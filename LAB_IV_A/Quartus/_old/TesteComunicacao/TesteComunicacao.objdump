
TesteComunicacao.elf:     file format elf32-littlenios2
TesteComunicacao.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00012dd8 memsz 0x00012dd8 flags r-x
    LOAD off    0x00013df8 vaddr 0x00052df8 paddr 0x00054dac align 2**12
         filesz 0x00001fb4 memsz 0x00001fb4 flags rw-
    LOAD off    0x00016d60 vaddr 0x00056d60 paddr 0x00056d60 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001284c  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  00052a7c  00052a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fb4  00052df8  00054dac  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  00056d60  00056d60  00016d60  2**2
                  ALLOC, SMALL_DATA
  6 .MemoriaDados 00000000  00000000  00000000  00015dac  2**0
                  CONTENTS
  7 .MemoriaPrograma 00000000  00056ed0  00056ed0  00015dac  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015dac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ea0  00000000  00000000  00015dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001ffe9  00000000  00000000  00016c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007ec6  00000000  00000000  00036c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009fa2  00000000  00000000  0003eb1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022a4  00000000  00000000  00048ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c87  00000000  00000000  0004ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000886d  00000000  00000000  0004e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0005725c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000012e0  00000000  00000000  00057270  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005b64a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0005b64d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005b658  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005b659  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0005b65a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0005b663  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0005b66c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000010  00000000  00000000  0005b675  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001f  00000000  00000000  0005b685  2**0
                  CONTENTS, READONLY
 27 .jdi          0000561e  00000000  00000000  0005b6a4  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003a273  00000000  00000000  00060cc2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00052a7c l    d  .rodata	00000000 .rodata
00052df8 l    d  .rwdata	00000000 .rwdata
00056d60 l    d  .bss	00000000 .bss
00000000 l    d  .MemoriaDados	00000000 .MemoriaDados
00056ed0 l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TesteComunicacao_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000404b4 l     F .text	000000f0 __sbprintf
000426dc l     F .text	0000020c cvt
000428e8 l     F .text	00000140 exponent
00052aee l     O .rodata	00000010 blanks.4403
00052afe l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042bc8 l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044ee4 l     F .text	000000f4 std
00056d60 l     O .bss	00000004 __sfp_lock
00056d64 l     O .bss	00000004 __sinit_lock
000453f8 l     F .text	00000024 __fp_lock
0004541c l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000532b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000536d4 l     O .rwdata	00000038 lconv
0005370c l     O .rwdata	00000020 lc_ctype_charset
0005372c l     O .rwdata	00000020 lc_message_charset
00056d74 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00046174 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00052c54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000497a4 l     F .text	000000f0 __sbprintf
00052caa l     O .rodata	00000010 blanks.4348
00052cba l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00050234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00050348 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00050374 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00050468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00050550 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0005063c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00050818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00054d9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00050a8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00050bc8 l     F .text	00000034 alt_dev_reg
00053cfc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00050ea0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000510ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00051830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00051c90 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00051df0 l     F .text	0000003c alt_get_errno
00051e2c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00056da4 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
00056da0 g     O .bss	00000004 alt_instruction_exception_handler
00048da8 g     F .text	000000b0 _mprec_log10
00048f28 g     F .text	00000134 __any_on
0004b88c g     F .text	00000060 _isatty_r
00052c2c g     O .rodata	00000028 __mprec_tinytens
00050754 g     F .text	0000007c alt_main
00056dd0 g     O .bss	00000100 alt_irq
0004b8ec g     F .text	00000070 _lseek_r
00054dac g       *ABS*	00000000 __flash_rwdata_start
0004ec0c g     F .text	00000088 .hidden __eqdf2
00056ed0 g       *ABS*	00000000 __alt_heap_start
0004044c g     F .text	00000068 printf
0004c96c g     F .text	000000d4 _wcrtomb_r
00049340 g     F .text	000000a0 __sseek
000452a0 g     F .text	000000d8 __sinit
0004c7c4 g     F .text	00000168 __swbuf_r
00045da4 g     F .text	00000084 _setlocale_r
00044fd8 g     F .text	000000bc __sfmoreglue
000507f4 g     F .text	00000024 __malloc_unlock
0004b95c g     F .text	00000208 memmove
0004526c g     F .text	00000034 _cleanup
000475ac g     F .text	00000130 _Balloc
0004ec94 g     F .text	000000dc .hidden __gtdf2
00052218 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00054d68 g     O .rwdata	00000004 size_2
0004b23c g     F .text	00000068 _fstat_r
00056d84 g     O .bss	00000004 errno
0004925c g     F .text	00000030 __seofread
00056d8c g     O .bss	00000004 alt_argv
0005cd5c g       *ABS*	00000000 _gp
00053b7c g     O .rwdata	00000180 alt_fd_list
0005223c g     F .text	00000090 alt_find_dev
00047260 g     F .text	00000188 memcpy
00045228 g     F .text	00000044 _cleanup_r
0005004c g     F .text	000000dc .hidden __floatsidf
00051d74 g     F .text	0000007c alt_io_redirect
0004ed70 g     F .text	000000f4 .hidden __ltdf2
00052a7c g       *ABS*	00000000 __DTOR_END__
00052498 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004905c g     F .text	00000104 __fpclassifyd
00048c8c g     F .text	0000011c __ratio
00049894 g     F .text	00000050 __vfiprintf_internal
000512a4 g     F .text	0000021c altera_avalon_jtag_uart_read
000403e8 g     F .text	00000064 _printf_r
0004d8ac g     F .text	00000064 .hidden __udivsi3
000504a4 g     F .text	000000ac isatty
00052b3c g     O .rodata	000000c8 __mprec_tens
00045e28 g     F .text	00000024 __locale_charset
00056d78 g     O .bss	00000004 __malloc_top_pad
00054d74 g     O .rwdata	00000004 __mb_cur_max
00045eb0 g     F .text	00000028 _localeconv_r
0004b2a4 g     F .text	000005e8 __sfvwrite_r
00047c0c g     F .text	00000058 __i2b
00049160 g     F .text	00000060 _sbrk_r
0004bb64 g     F .text	00000070 _read_r
00054d94 g     O .rwdata	00000004 alt_max_fd
0004adf4 g     F .text	0000012c _fclose_r
00044e90 g     F .text	00000054 fflush
00056d7c g     O .bss	00000004 __malloc_max_sbrked_mem
0004d990 g     F .text	000008ac .hidden __adddf3
00048848 g     F .text	00000204 __b2d
0004d1f0 g     F .text	000005c4 .hidden __umoddi3
00050678 g     F .text	000000dc lseek
00054d70 g     O .rwdata	00000004 _global_impure_ptr
0004bbd4 g     F .text	00000bf0 _realloc_r
00056ed0 g       *ABS*	00000000 __bss_end
00051ba0 g     F .text	000000f0 alt_iic_isr_register
00052110 g     F .text	00000108 alt_tick
0004cbf4 g     F .text	000005fc .hidden __udivdi3
0004b14c g     F .text	00000088 _fputwc_r
00052c04 g     O .rodata	00000028 __mprec_bigtens
00047904 g     F .text	0000018c __s2b
00050128 g     F .text	000000a8 .hidden __floatunsidf
000483c4 g     F .text	00000114 __mcmp
00045440 g     F .text	00000040 __fp_lock_all
00051b54 g     F .text	0000004c alt_ic_irq_enabled
00052074 g     F .text	0000009c alt_alarm_stop
00056d94 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00053b54 g     O .rwdata	00000028 alt_dev_null
00000000 g       *ABS*	00000000 __alt_mem_MemoriaDados
00051810 g     F .text	00000020 alt_dcache_flush_all
00047a90 g     F .text	00000090 __hi0bits
0004ffcc g     F .text	00000080 .hidden __fixdfsi
00054dac g       *ABS*	00000000 __ram_rwdata_end
00054d8c g     O .rwdata	00000008 alt_dev_list
00050ac8 g     F .text	00000100 write
00052df8 g       *ABS*	00000000 __ram_rodata_end
000503b0 g     F .text	000000b8 fstat
0004ed70 g     F .text	000000f4 .hidden __ledf2
00048054 g     F .text	00000178 __pow5mult
000498e4 g     F .text	000012dc ___vfiprintf_internal_r
00056d68 g     O .bss	00000004 __nlocale_changed
0004d910 g     F .text	00000058 .hidden __umodsi3
00056ed0 g       *ABS*	00000000 end
00040000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
00050de0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00052a7c g       *ABS*	00000000 __CTOR_LIST__
0005c3c0 g       *ABS*	00000000 __alt_stack_pointer
000501d0 g     F .text	00000064 .hidden __clzsi2
000514c0 g     F .text	00000224 altera_avalon_jtag_uart_write
00045378 g     F .text	00000020 __sfp_lock_acquire
000470a4 g     F .text	000001bc memchr
000405f4 g     F .text	000020e8 ___vfprintf_internal_r
000454c0 g     F .text	00000560 _free_r
00045e4c g     F .text	00000020 __locale_mb_cur_max
0005285c g     F .text	000001ec __call_exitprocs
00056d6c g     O .bss	00000004 __mlocale_changed
00054d7c g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00056d98 g     O .bss	00000004 _alt_tick_rate
000481cc g     F .text	000001f8 __lshift
00056d9c g     O .bss	00000004 _alt_nticks
00050854 g     F .text	00000104 read
00050c34 g     F .text	00000048 alt_sys_init
000526ec g     F .text	00000170 __register_exitproc
00047c64 g     F .text	000003f0 __multiply
0005114c g     F .text	00000068 altera_avalon_jtag_uart_close
0004d968 g     F .text	00000028 .hidden __mulsi3
00052df8 g       *ABS*	00000000 __ram_rwdata_start
00052a7c g       *ABS*	00000000 __ram_rodata_start
00056da8 g     O .bss	00000028 __malloc_current_mallinfo
00048a4c g     F .text	00000240 __d2b
00050c7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000523d4 g     F .text	000000c4 alt_get_fd
0004ac30 g     F .text	00000060 _close_r
000525b8 g     F .text	00000134 memcmp
00050d3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00056ed0 g       *ABS*	00000000 __alt_stack_base
00050d8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042a28 g     F .text	000001a0 __swsetup_r
0004e23c g     F .text	000009d0 .hidden __divdf3
00045094 g     F .text	00000194 __sfp
00048e58 g     F .text	000000d0 __copybits
0005374c g     O .rwdata	00000408 __malloc_av_
000453d8 g     F .text	00000020 __sinit_lock_release
0004ee64 g     F .text	0000086c .hidden __muldf3
000491c0 g     F .text	0000009c __sread
000522cc g     F .text	00000108 alt_find_file
0005186c g     F .text	000000a4 alt_dev_llist_insert
000507d0 g     F .text	00000024 __malloc_lock
000509dc g     F .text	000000b0 sbrk
00044e08 g     F .text	00000088 _fflush_r
0004ac90 g     F .text	00000164 _calloc_r
00056d60 g       *ABS*	00000000 __bss_start
00054d5c g     O .rwdata	00000004 data
000473e8 g     F .text	000001c4 memset
0004026c g     F .text	0000017c main
00056d90 g     O .bss	00000004 alt_envp
00056d80 g     O .bss	00000004 __malloc_max_total_mem
00050cdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004c92c g     F .text	00000040 __swbuf
000493e0 g     F .text	00000054 __sclose
0005c3c0 g       *ABS*	00000000 __alt_heap_limit
0004af20 g     F .text	00000038 fclose
00054d64 g     O .rwdata	00000004 size
00042f8c g     F .text	00001b78 _dtoa_r
00046528 g     F .text	00000b7c _malloc_r
0004cb7c g     F .text	00000078 __ascii_wctomb
00054d98 g     O .rwdata	00000004 alt_errno
00045bf0 g     F .text	000000d8 _fwalk
0004d7b4 g     F .text	00000084 .hidden __divsi3
00045a20 g     F .text	000001d0 _malloc_trim_r
00052a7c g       *ABS*	00000000 __CTOR_END__
00049434 g     F .text	00000140 strcmp
00052a7c g       *ABS*	00000000 __flash_rodata_start
00052a7c g       *ABS*	00000000 __DTOR_LIST__
0004ec0c g     F .text	00000088 .hidden __nedf2
00050bfc g     F .text	00000038 alt_irq_init
00050958 g     F .text	00000084 alt_release_fd
00052cca g     O .rodata	00000100 .hidden __clz_tab
00056d70 g     O .bss	00000004 _PathLocale
00052534 g     F .text	0000003c atexit
0004abc0 g     F .text	00000070 _write_r
00045ed8 g     F .text	00000040 setlocale
00054d6c g     O .rwdata	00000004 _impure_ptr
00056d88 g     O .bss	00000004 alt_argc
00044b04 g     F .text	00000304 __sflush_r
00051970 g     F .text	00000060 _do_dtors
00045e90 g     F .text	00000020 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
0004877c g     F .text	000000cc __ulp
00045480 g     F .text	00000040 __fp_unlock_all
0005305c g     O .rwdata	00000254 coords_2
00054d84 g     O .rwdata	00000008 alt_fs_list
00052df8 g     O .rwdata	00000264 coords
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045f18 g     F .text	00000030 localeconv
000519f0 g     F .text	00000050 alt_ic_isr_register
00054dac g       *ABS*	00000000 _edata
00056ed0 g       *ABS*	00000000 _end
0004af58 g     F .text	000001f4 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
000511b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00051ac8 g     F .text	0000008c alt_ic_irq_disable
0004928c g     F .text	000000b4 __swrite
00054d78 g     O .rwdata	00000004 __malloc_trim_threshold
00045e6c g     F .text	00000024 __locale_msgcharset
00052570 g     F .text	00000048 exit
00045cc8 g     F .text	000000dc _fwalk_reent
000484d8 g     F .text	000002a4 __mdiff
0004d838 g     F .text	00000074 .hidden __modsi3
0005c3c0 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00045398 g     F .text	00000020 __sfp_lock_release
00052a48 g     F .text	00000034 _exit
000516e4 g     F .text	0000012c alt_alarm_start
00045f48 g     F .text	0000022c __smakebuf_r
00049574 g     F .text	000000f4 strlen
00054d60 g     O .rwdata	00000004 controle
00051f18 g     F .text	0000015c open
0004ec94 g     F .text	000000dc .hidden __gedf2
00054d80 g     O .rwdata	00000004 __wctomb
00049668 g     F .text	0000013c __sprint_r
000519d0 g     F .text	00000020 alt_icache_flush_all
00054da0 g     O .rwdata	00000004 alt_priority_mask
00051a40 g     F .text	00000088 alt_ic_irq_enable
000405a4 g     F .text	00000050 __vfprintf_internal
0004cb18 g     F .text	00000064 _wctomb_r
0004f6d0 g     F .text	000008fc .hidden __subdf3
00047b20 g     F .text	000000ec __lo0bits
00054da4 g     O .rwdata	00000008 alt_alarm_list
00051910 g     F .text	00000060 _do_ctors
0004ca40 g     F .text	000000d8 wcrtomb
00050270 g     F .text	000000d8 close
000505b8 g     F .text	00000084 alt_load
0004b1d4 g     F .text	00000068 fputwc
000453b8 g     F .text	00000020 __sinit_lock_acquire
00047758 g     F .text	000001ac __multadd
000476dc g     F .text	0000007c _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	109b7404 	addi	r2,r2,28112
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	109b7404 	addi	r2,r2,28112
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <_gp+0xfffe33d0>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <_gp+0xfffe33c4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a81117 	ldw	r2,-24508(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a81117 	ldw	r2,-24508(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	def0f014 	ori	sp,sp,50112
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6b35714 	ori	gp,gp,52572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	109b5814 	ori	r2,r2,28000

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18dbb414 	ori	r3,r3,28368

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <_gp+0xfffe34f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00505b80 	call	505b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00507540 	call	50754 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <_gp+0xfffe350c>

0004026c <main>:

#define STEP coords
#define SIZE size


int main() {
   4026c:	defff704 	addi	sp,sp,-36
   40270:	dfc00815 	stw	ra,32(sp)
   40274:	df000715 	stw	fp,28(sp)
   40278:	df000704 	addi	fp,sp,28

    int data_size = 0;
   4027c:	e03ffc15 	stw	zero,-16(fp)
    int temp_data_size = 0;
   40280:	e03ffd15 	stw	zero,-12(fp)
    int temp_x = 0;
   40284:	e03ffe15 	stw	zero,-8(fp)
    int temp_y = 0;
   40288:	e03fff15 	stw	zero,-4(fp)

    //read data_size
	data_size = SIZE;
   4028c:	d0a00217 	ldw	r2,-32760(gp)
   40290:	e0bffc15 	stw	r2,-16(fp)
	temp_data_size = (2*data_size);
   40294:	e0bffc17 	ldw	r2,-16(fp)
   40298:	1085883a 	add	r2,r2,r2
   4029c:	e0bffd15 	stw	r2,-12(fp)

    int j = 0;
   402a0:	e03ff915 	stw	zero,-28(fp)
    for (int i = 0; i<temp_data_size; i+=1) {
   402a4:	e03ffa15 	stw	zero,-24(fp)
   402a8:	00002506 	br	40340 <main+0xd4>
    	data[i] = (STEP[X]&0xFFFF)|(STEP[Y]<<16);
   402ac:	d0e00017 	ldw	r3,-32768(gp)
   402b0:	e0bffa17 	ldw	r2,-24(fp)
   402b4:	1085883a 	add	r2,r2,r2
   402b8:	1085883a 	add	r2,r2,r2
   402bc:	1889883a 	add	r4,r3,r2
   402c0:	00800174 	movhi	r2,5
   402c4:	108b7e04 	addi	r2,r2,11768
   402c8:	e0fff917 	ldw	r3,-28(fp)
   402cc:	18c7883a 	add	r3,r3,r3
   402d0:	10c5883a 	add	r2,r2,r3
   402d4:	1080000b 	ldhu	r2,0(r2)
   402d8:	10bfffcc 	andi	r2,r2,65535
   402dc:	10a0001c 	xori	r2,r2,32768
   402e0:	10a00004 	addi	r2,r2,-32768
   402e4:	117fffcc 	andi	r5,r2,65535
   402e8:	e0bff917 	ldw	r2,-28(fp)
   402ec:	10c00044 	addi	r3,r2,1
   402f0:	00800174 	movhi	r2,5
   402f4:	108b7e04 	addi	r2,r2,11768
   402f8:	18c7883a 	add	r3,r3,r3
   402fc:	10c5883a 	add	r2,r2,r3
   40300:	1080000b 	ldhu	r2,0(r2)
   40304:	10bfffcc 	andi	r2,r2,65535
   40308:	10a0001c 	xori	r2,r2,32768
   4030c:	10a00004 	addi	r2,r2,-32768
   40310:	1004943a 	slli	r2,r2,16
   40314:	2884b03a 	or	r2,r5,r2
   40318:	20800015 	stw	r2,0(r4)
    	controle[0] = i;
   4031c:	d0a00117 	ldw	r2,-32764(gp)
   40320:	e0fffa17 	ldw	r3,-24(fp)
   40324:	10c00015 	stw	r3,0(r2)
    	j+=2;
   40328:	e0bff917 	ldw	r2,-28(fp)
   4032c:	10800084 	addi	r2,r2,2
   40330:	e0bff915 	stw	r2,-28(fp)
    //read data_size
	data_size = SIZE;
	temp_data_size = (2*data_size);

    int j = 0;
    for (int i = 0; i<temp_data_size; i+=1) {
   40334:	e0bffa17 	ldw	r2,-24(fp)
   40338:	10800044 	addi	r2,r2,1
   4033c:	e0bffa15 	stw	r2,-24(fp)
   40340:	e0fffa17 	ldw	r3,-24(fp)
   40344:	e0bffd17 	ldw	r2,-12(fp)
   40348:	18bfd816 	blt	r3,r2,402ac <_gp+0xfffe3550>
    	data[i] = (STEP[X]&0xFFFF)|(STEP[Y]<<16);
    	controle[0] = i;
    	j+=2;
    }
    printf("size: %d\n", data_size);
   4034c:	e17ffc17 	ldw	r5,-16(fp)
   40350:	01000174 	movhi	r4,5
   40354:	210a9f04 	addi	r4,r4,10876
   40358:	004044c0 	call	4044c <printf>

    for (int i = 0; i<data_size; i+=1) {
   4035c:	e03ffb15 	stw	zero,-20(fp)
   40360:	00001806 	br	403c4 <main+0x158>
    	temp_x = data[i]&0xFFFF;
   40364:	d0e00017 	ldw	r3,-32768(gp)
   40368:	e0bffb17 	ldw	r2,-20(fp)
   4036c:	1085883a 	add	r2,r2,r2
   40370:	1085883a 	add	r2,r2,r2
   40374:	1885883a 	add	r2,r3,r2
   40378:	10800017 	ldw	r2,0(r2)
   4037c:	10bfffcc 	andi	r2,r2,65535
   40380:	e0bffe15 	stw	r2,-8(fp)
    	temp_y = (data[i]>>16)&0xFFFF;
   40384:	d0e00017 	ldw	r3,-32768(gp)
   40388:	e0bffb17 	ldw	r2,-20(fp)
   4038c:	1085883a 	add	r2,r2,r2
   40390:	1085883a 	add	r2,r2,r2
   40394:	1885883a 	add	r2,r3,r2
   40398:	10800017 	ldw	r2,0(r2)
   4039c:	1004d43a 	srli	r2,r2,16
   403a0:	e0bfff15 	stw	r2,-4(fp)
    	printf("%d, %d\n", temp_x, temp_y);
   403a4:	e1bfff17 	ldw	r6,-4(fp)
   403a8:	e17ffe17 	ldw	r5,-8(fp)
   403ac:	01000174 	movhi	r4,5
   403b0:	210aa204 	addi	r4,r4,10888
   403b4:	004044c0 	call	4044c <printf>
    	controle[0] = i;
    	j+=2;
    }
    printf("size: %d\n", data_size);

    for (int i = 0; i<data_size; i+=1) {
   403b8:	e0bffb17 	ldw	r2,-20(fp)
   403bc:	10800044 	addi	r2,r2,1
   403c0:	e0bffb15 	stw	r2,-20(fp)
   403c4:	e0fffb17 	ldw	r3,-20(fp)
   403c8:	e0bffc17 	ldw	r2,-16(fp)
   403cc:	18bfe516 	blt	r3,r2,40364 <_gp+0xfffe3608>
    	temp_x = data[i]&0xFFFF;
    	temp_y = (data[i]>>16)&0xFFFF;
    	printf("%d, %d\n", temp_x, temp_y);
    }
    return 0;
   403d0:	0005883a 	mov	r2,zero
}
   403d4:	e037883a 	mov	sp,fp
   403d8:	dfc00117 	ldw	ra,4(sp)
   403dc:	df000017 	ldw	fp,0(sp)
   403e0:	dec00204 	addi	sp,sp,8
   403e4:	f800283a 	ret

000403e8 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
   403e8:	defff804 	addi	sp,sp,-32
   403ec:	dfc00515 	stw	ra,20(sp)
   403f0:	df000415 	stw	fp,16(sp)
   403f4:	df000404 	addi	fp,sp,16
   403f8:	e13ffe15 	stw	r4,-8(fp)
   403fc:	e17fff15 	stw	r5,-4(fp)
   40400:	e1800215 	stw	r6,8(fp)
   40404:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
   40408:	e0800204 	addi	r2,fp,8
   4040c:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
   40410:	e0bffe17 	ldw	r2,-8(fp)
   40414:	10800217 	ldw	r2,8(r2)
   40418:	e0fffd17 	ldw	r3,-12(fp)
   4041c:	180f883a 	mov	r7,r3
   40420:	e1bfff17 	ldw	r6,-4(fp)
   40424:	100b883a 	mov	r5,r2
   40428:	e13ffe17 	ldw	r4,-8(fp)
   4042c:	00405f40 	call	405f4 <___vfprintf_internal_r>
   40430:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
   40434:	e0bffc17 	ldw	r2,-16(fp)
}
   40438:	e037883a 	mov	sp,fp
   4043c:	dfc00117 	ldw	ra,4(sp)
   40440:	df000017 	ldw	fp,0(sp)
   40444:	dec00404 	addi	sp,sp,16
   40448:	f800283a 	ret

0004044c <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
   4044c:	defff704 	addi	sp,sp,-36
   40450:	dfc00515 	stw	ra,20(sp)
   40454:	df000415 	stw	fp,16(sp)
   40458:	df000404 	addi	fp,sp,16
   4045c:	e13fff15 	stw	r4,-4(fp)
   40460:	e1400215 	stw	r5,8(fp)
   40464:	e1800315 	stw	r6,12(fp)
   40468:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
   4046c:	d0a00417 	ldw	r2,-32752(gp)
   40470:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
   40474:	e0800204 	addi	r2,fp,8
   40478:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
   4047c:	d0a00417 	ldw	r2,-32752(gp)
   40480:	10800217 	ldw	r2,8(r2)
   40484:	e0fffe17 	ldw	r3,-8(fp)
   40488:	180d883a 	mov	r6,r3
   4048c:	e17fff17 	ldw	r5,-4(fp)
   40490:	1009883a 	mov	r4,r2
   40494:	00405a40 	call	405a4 <__vfprintf_internal>
   40498:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
   4049c:	e0bffd17 	ldw	r2,-12(fp)
}
   404a0:	e037883a 	mov	sp,fp
   404a4:	dfc00117 	ldw	ra,4(sp)
   404a8:	df000017 	ldw	fp,0(sp)
   404ac:	dec00504 	addi	sp,sp,20
   404b0:	f800283a 	ret

000404b4 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   404b4:	defedf04 	addi	sp,sp,-1156
   404b8:	dfc12015 	stw	ra,1152(sp)
   404bc:	df011f15 	stw	fp,1148(sp)
   404c0:	dc011e15 	stw	r16,1144(sp)
   404c4:	df011f04 	addi	fp,sp,1148
   404c8:	e13ffc15 	stw	r4,-16(fp)
   404cc:	2821883a 	mov	r16,r5
   404d0:	e1bffd15 	stw	r6,-12(fp)
   404d4:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   404d8:	80c0030b 	ldhu	r3,12(r16)
   404dc:	00bfff44 	movi	r2,-3
   404e0:	1884703a 	and	r2,r3,r2
   404e4:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   404e8:	80801917 	ldw	r2,100(r16)
   404ec:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   404f0:	8080038b 	ldhu	r2,14(r16)
   404f4:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   404f8:	80800717 	ldw	r2,28(r16)
   404fc:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   40500:	80800917 	ldw	r2,36(r16)
   40504:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   40508:	e0befc04 	addi	r2,fp,-1040
   4050c:	e0bee215 	stw	r2,-1144(fp)
   40510:	e0bee217 	ldw	r2,-1144(fp)
   40514:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   40518:	00810004 	movi	r2,1024
   4051c:	e0bee415 	stw	r2,-1136(fp)
   40520:	e0bee417 	ldw	r2,-1136(fp)
   40524:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   40528:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   4052c:	e0bee204 	addi	r2,fp,-1144
   40530:	e1fffe17 	ldw	r7,-8(fp)
   40534:	e1bffd17 	ldw	r6,-12(fp)
   40538:	100b883a 	mov	r5,r2
   4053c:	e13ffc17 	ldw	r4,-16(fp)
   40540:	00405f40 	call	405f4 <___vfprintf_internal_r>
   40544:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   40548:	e0bee117 	ldw	r2,-1148(fp)
   4054c:	10000716 	blt	r2,zero,4056c <__sbprintf+0xb8>
   40550:	e0bee204 	addi	r2,fp,-1144
   40554:	100b883a 	mov	r5,r2
   40558:	e13ffc17 	ldw	r4,-16(fp)
   4055c:	0044e080 	call	44e08 <_fflush_r>
   40560:	10000226 	beq	r2,zero,4056c <__sbprintf+0xb8>
		ret = EOF;
   40564:	00bfffc4 	movi	r2,-1
   40568:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   4056c:	e0bee50b 	ldhu	r2,-1132(fp)
   40570:	10bfffcc 	andi	r2,r2,65535
   40574:	1080100c 	andi	r2,r2,64
   40578:	10000326 	beq	r2,zero,40588 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   4057c:	8080030b 	ldhu	r2,12(r16)
   40580:	10801014 	ori	r2,r2,64
   40584:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   40588:	e0bee117 	ldw	r2,-1148(fp)
}
   4058c:	e6ffff04 	addi	sp,fp,-4
   40590:	dfc00217 	ldw	ra,8(sp)
   40594:	df000117 	ldw	fp,4(sp)
   40598:	dc000017 	ldw	r16,0(sp)
   4059c:	dec00304 	addi	sp,sp,12
   405a0:	f800283a 	ret

000405a4 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   405a4:	defffa04 	addi	sp,sp,-24
   405a8:	dfc00515 	stw	ra,20(sp)
   405ac:	df000415 	stw	fp,16(sp)
   405b0:	df000404 	addi	fp,sp,16
   405b4:	e13ffd15 	stw	r4,-12(fp)
   405b8:	e17ffe15 	stw	r5,-8(fp)
   405bc:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   405c0:	d0a00417 	ldw	r2,-32752(gp)
   405c4:	e1ffff17 	ldw	r7,-4(fp)
   405c8:	e1bffe17 	ldw	r6,-8(fp)
   405cc:	e17ffd17 	ldw	r5,-12(fp)
   405d0:	1009883a 	mov	r4,r2
   405d4:	00405f40 	call	405f4 <___vfprintf_internal_r>
   405d8:	e0bffc15 	stw	r2,-16(fp)
  return result;
   405dc:	e0bffc17 	ldw	r2,-16(fp)
}
   405e0:	e037883a 	mov	sp,fp
   405e4:	dfc00117 	ldw	ra,4(sp)
   405e8:	df000017 	ldw	fp,0(sp)
   405ec:	dec00204 	addi	sp,sp,8
   405f0:	f800283a 	ret

000405f4 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   405f4:	deffa404 	addi	sp,sp,-368
   405f8:	dfc05b15 	stw	ra,364(sp)
   405fc:	df005a15 	stw	fp,360(sp)
   40600:	ddc05915 	stw	r23,356(sp)
   40604:	dd805815 	stw	r22,352(sp)
   40608:	dd405715 	stw	r21,348(sp)
   4060c:	dd005615 	stw	r20,344(sp)
   40610:	dcc05515 	stw	r19,340(sp)
   40614:	dc805415 	stw	r18,336(sp)
   40618:	dc405315 	stw	r17,332(sp)
   4061c:	dc005215 	stw	r16,328(sp)
   40620:	df005a04 	addi	fp,sp,360
   40624:	e13fe615 	stw	r4,-104(fp)
   40628:	e17fe715 	stw	r5,-100(fp)
   4062c:	e1bfe815 	stw	r6,-96(fp)
   40630:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
   40634:	e13fe617 	ldw	r4,-104(fp)
   40638:	0045eb00 	call	45eb0 <_localeconv_r>
   4063c:	10800017 	ldw	r2,0(r2)
   40640:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
   40644:	e13fbb17 	ldw	r4,-276(fp)
   40648:	00495740 	call	49574 <strlen>
   4064c:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
   40650:	e03fc215 	stw	zero,-248(fp)
   40654:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
   40658:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
   4065c:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   40660:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   40664:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   40668:	e0bfe617 	ldw	r2,-104(fp)
   4066c:	e0bfbd15 	stw	r2,-268(fp)
   40670:	e0bfbd17 	ldw	r2,-268(fp)
   40674:	10000526 	beq	r2,zero,4068c <___vfprintf_internal_r+0x98>
   40678:	e0bfbd17 	ldw	r2,-268(fp)
   4067c:	10800e17 	ldw	r2,56(r2)
   40680:	1000021e 	bne	r2,zero,4068c <___vfprintf_internal_r+0x98>
   40684:	e13fbd17 	ldw	r4,-268(fp)
   40688:	00452a00 	call	452a0 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   4068c:	e0bfe717 	ldw	r2,-100(fp)
   40690:	1080030b 	ldhu	r2,12(r2)
   40694:	10bfffcc 	andi	r2,r2,65535
   40698:	1088000c 	andi	r2,r2,8192
   4069c:	10000c1e 	bne	r2,zero,406d0 <___vfprintf_internal_r+0xdc>
   406a0:	e0bfe717 	ldw	r2,-100(fp)
   406a4:	1080030b 	ldhu	r2,12(r2)
   406a8:	10880014 	ori	r2,r2,8192
   406ac:	1007883a 	mov	r3,r2
   406b0:	e0bfe717 	ldw	r2,-100(fp)
   406b4:	10c0030d 	sth	r3,12(r2)
   406b8:	e0bfe717 	ldw	r2,-100(fp)
   406bc:	10c01917 	ldw	r3,100(r2)
   406c0:	00b7ffc4 	movi	r2,-8193
   406c4:	1886703a 	and	r3,r3,r2
   406c8:	e0bfe717 	ldw	r2,-100(fp)
   406cc:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   406d0:	e0bfe717 	ldw	r2,-100(fp)
   406d4:	1080030b 	ldhu	r2,12(r2)
   406d8:	10bfffcc 	andi	r2,r2,65535
   406dc:	1080020c 	andi	r2,r2,8
   406e0:	10000326 	beq	r2,zero,406f0 <___vfprintf_internal_r+0xfc>
   406e4:	e0bfe717 	ldw	r2,-100(fp)
   406e8:	10800417 	ldw	r2,16(r2)
   406ec:	1000061e 	bne	r2,zero,40708 <___vfprintf_internal_r+0x114>
   406f0:	e17fe717 	ldw	r5,-100(fp)
   406f4:	e13fe617 	ldw	r4,-104(fp)
   406f8:	0042a280 	call	42a28 <__swsetup_r>
   406fc:	10000226 	beq	r2,zero,40708 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
   40700:	00bfffc4 	movi	r2,-1
   40704:	0007e806 	br	426a8 <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   40708:	e0bfe717 	ldw	r2,-100(fp)
   4070c:	1080030b 	ldhu	r2,12(r2)
   40710:	10bfffcc 	andi	r2,r2,65535
   40714:	1080068c 	andi	r2,r2,26
   40718:	10800298 	cmpnei	r2,r2,10
   4071c:	10000c1e 	bne	r2,zero,40750 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
   40720:	e0bfe717 	ldw	r2,-100(fp)
   40724:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   40728:	10bfffcc 	andi	r2,r2,65535
   4072c:	10a0001c 	xori	r2,r2,32768
   40730:	10a00004 	addi	r2,r2,-32768
   40734:	10000616 	blt	r2,zero,40750 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   40738:	e1ffe917 	ldw	r7,-92(fp)
   4073c:	e1bfe817 	ldw	r6,-96(fp)
   40740:	e17fe717 	ldw	r5,-100(fp)
   40744:	e13fe617 	ldw	r4,-104(fp)
   40748:	00404b40 	call	404b4 <__sbprintf>
   4074c:	0007d606 	br	426a8 <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   40750:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   40754:	e47fcb04 	addi	r17,fp,-212
   40758:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
   4075c:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   40760:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   40764:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   40768:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   4076c:	00000106 	br	40774 <___vfprintf_internal_r+0x180>
                    fmt += 1;
   40770:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   40774:	a8800003 	ldbu	r2,0(r21)
   40778:	10803fcc 	andi	r2,r2,255
   4077c:	1080201c 	xori	r2,r2,128
   40780:	10bfe004 	addi	r2,r2,-128
   40784:	10000626 	beq	r2,zero,407a0 <___vfprintf_internal_r+0x1ac>
   40788:	a8800003 	ldbu	r2,0(r21)
   4078c:	10803fcc 	andi	r2,r2,255
   40790:	1080201c 	xori	r2,r2,128
   40794:	10bfe004 	addi	r2,r2,-128
   40798:	10800958 	cmpnei	r2,r2,37
   4079c:	103ff41e 	bne	r2,zero,40770 <_gp+0xfffe3a14>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   407a0:	a807883a 	mov	r3,r21
   407a4:	9005883a 	mov	r2,r18
   407a8:	18a1c83a 	sub	r16,r3,r2
   407ac:	80001826 	beq	r16,zero,40810 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
   407b0:	8c800015 	stw	r18,0(r17)
   407b4:	8005883a 	mov	r2,r16
   407b8:	88800115 	stw	r2,4(r17)
   407bc:	e0bfca17 	ldw	r2,-216(fp)
   407c0:	8007883a 	mov	r3,r16
   407c4:	10c5883a 	add	r2,r2,r3
   407c8:	e0bfca15 	stw	r2,-216(fp)
   407cc:	8c400204 	addi	r17,r17,8
   407d0:	e0bfc917 	ldw	r2,-220(fp)
   407d4:	10800044 	addi	r2,r2,1
   407d8:	e0bfc915 	stw	r2,-220(fp)
   407dc:	e0bfc917 	ldw	r2,-220(fp)
   407e0:	10800210 	cmplti	r2,r2,8
   407e4:	1000071e 	bne	r2,zero,40804 <___vfprintf_internal_r+0x210>
   407e8:	e0bfc804 	addi	r2,fp,-224
   407ec:	100d883a 	mov	r6,r2
   407f0:	e17fe717 	ldw	r5,-100(fp)
   407f4:	e13fe617 	ldw	r4,-104(fp)
   407f8:	00496680 	call	49668 <__sprint_r>
   407fc:	1007531e 	bne	r2,zero,4254c <___vfprintf_internal_r+0x1f58>
   40800:	e47fcb04 	addi	r17,fp,-212
			ret += m;
   40804:	e0bfac17 	ldw	r2,-336(fp)
   40808:	1405883a 	add	r2,r2,r16
   4080c:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   40810:	a8800003 	ldbu	r2,0(r21)
   40814:	10803fcc 	andi	r2,r2,255
   40818:	1080201c 	xori	r2,r2,128
   4081c:	10bfe004 	addi	r2,r2,-128
   40820:	10073c26 	beq	r2,zero,42514 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
   40824:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
   40828:	ad400044 	addi	r21,r21,1

		flags = 0;
   4082c:	0027883a 	mov	r19,zero
		dprec = 0;
   40830:	e03fb415 	stw	zero,-304(fp)
		width = 0;
   40834:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
   40838:	00bfffc4 	movi	r2,-1
   4083c:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
   40840:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
   40844:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   40848:	a805883a 	mov	r2,r21
   4084c:	15400044 	addi	r21,r2,1
   40850:	10800003 	ldbu	r2,0(r2)
   40854:	15003fcc 	andi	r20,r2,255
   40858:	a500201c 	xori	r20,r20,128
   4085c:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
   40860:	a0bff804 	addi	r2,r20,-32
   40864:	10c01668 	cmpgeui	r3,r2,89
   40868:	18034f1e 	bne	r3,zero,415a8 <___vfprintf_internal_r+0xfb4>
   4086c:	100690ba 	slli	r3,r2,2
   40870:	00800134 	movhi	r2,4
   40874:	10822104 	addi	r2,r2,2180
   40878:	1885883a 	add	r2,r3,r2
   4087c:	10800017 	ldw	r2,0(r2)
   40880:	1000683a 	jmp	r2
   40884:	000409e8 	cmpgeui	zero,zero,4135
   40888:	000415a8 	cmpgeui	zero,zero,4182
   4088c:	000415a8 	cmpgeui	zero,zero,4182
   40890:	00040a08 	cmpgei	zero,zero,4136
   40894:	000415a8 	cmpgeui	zero,zero,4182
   40898:	000415a8 	cmpgeui	zero,zero,4182
   4089c:	000415a8 	cmpgeui	zero,zero,4182
   408a0:	000415a8 	cmpgeui	zero,zero,4182
   408a4:	000415a8 	cmpgeui	zero,zero,4182
   408a8:	000415a8 	cmpgeui	zero,zero,4182
   408ac:	00040a10 	cmplti	zero,zero,4136
   408b0:	00040a44 	movi	zero,4137
   408b4:	000415a8 	cmpgeui	zero,zero,4182
   408b8:	00040a3c 	xorhi	zero,zero,4136
   408bc:	00040a50 	cmplti	zero,zero,4137
   408c0:	000415a8 	cmpgeui	zero,zero,4182
   408c4:	00040af0 	cmpltui	zero,zero,4139
   408c8:	00040af8 	rdprs	zero,zero,4139
   408cc:	00040af8 	rdprs	zero,zero,4139
   408d0:	00040af8 	rdprs	zero,zero,4139
   408d4:	00040af8 	rdprs	zero,zero,4139
   408d8:	00040af8 	rdprs	zero,zero,4139
   408dc:	00040af8 	rdprs	zero,zero,4139
   408e0:	00040af8 	rdprs	zero,zero,4139
   408e4:	00040af8 	rdprs	zero,zero,4139
   408e8:	00040af8 	rdprs	zero,zero,4139
   408ec:	000415a8 	cmpgeui	zero,zero,4182
   408f0:	000415a8 	cmpgeui	zero,zero,4182
   408f4:	000415a8 	cmpgeui	zero,zero,4182
   408f8:	000415a8 	cmpgeui	zero,zero,4182
   408fc:	000415a8 	cmpgeui	zero,zero,4182
   40900:	000415a8 	cmpgeui	zero,zero,4182
   40904:	000415a8 	cmpgeui	zero,zero,4182
   40908:	000415a8 	cmpgeui	zero,zero,4182
   4090c:	000415a8 	cmpgeui	zero,zero,4182
   40910:	000415a8 	cmpgeui	zero,zero,4182
   40914:	00040bac 	andhi	zero,zero,4142
   40918:	00040cac 	andhi	zero,zero,4146
   4091c:	000415a8 	cmpgeui	zero,zero,4182
   40920:	00040cac 	andhi	zero,zero,4146
   40924:	000415a8 	cmpgeui	zero,zero,4182
   40928:	000415a8 	cmpgeui	zero,zero,4182
   4092c:	000415a8 	cmpgeui	zero,zero,4182
   40930:	000415a8 	cmpgeui	zero,zero,4182
   40934:	00040b40 	call	40b4 <__alt_mem_MemoriaDados+0x40b4>
   40938:	000415a8 	cmpgeui	zero,zero,4182
   4093c:	000415a8 	cmpgeui	zero,zero,4182
   40940:	00041048 	cmpgei	zero,zero,4161
   40944:	000415a8 	cmpgeui	zero,zero,4182
   40948:	000415a8 	cmpgeui	zero,zero,4182
   4094c:	000415a8 	cmpgeui	zero,zero,4182
   40950:	000415a8 	cmpgeui	zero,zero,4182
   40954:	000415a8 	cmpgeui	zero,zero,4182
   40958:	000411c4 	movi	zero,4167
   4095c:	000415a8 	cmpgeui	zero,zero,4182
   40960:	000415a8 	cmpgeui	zero,zero,4182
   40964:	00041284 	movi	zero,4170
   40968:	000415a8 	cmpgeui	zero,zero,4182
   4096c:	000415a8 	cmpgeui	zero,zero,4182
   40970:	000415a8 	cmpgeui	zero,zero,4182
   40974:	000415a8 	cmpgeui	zero,zero,4182
   40978:	000415a8 	cmpgeui	zero,zero,4182
   4097c:	000415a8 	cmpgeui	zero,zero,4182
   40980:	000415a8 	cmpgeui	zero,zero,4182
   40984:	000415a8 	cmpgeui	zero,zero,4182
   40988:	000415a8 	cmpgeui	zero,zero,4182
   4098c:	000415a8 	cmpgeui	zero,zero,4182
   40990:	00040b84 	movi	zero,4142
   40994:	00040bb0 	cmpltui	zero,zero,4142
   40998:	00040cac 	andhi	zero,zero,4146
   4099c:	00040cac 	andhi	zero,zero,4146
   409a0:	00040cac 	andhi	zero,zero,4146
   409a4:	00040b48 	cmpgei	zero,zero,4141
   409a8:	00040bb0 	cmpltui	zero,zero,4142
   409ac:	000415a8 	cmpgeui	zero,zero,4182
   409b0:	000415a8 	cmpgeui	zero,zero,4182
   409b4:	00040b50 	cmplti	zero,zero,4141
   409b8:	000415a8 	cmpgeui	zero,zero,4182
   409bc:	00040fa8 	cmpgeui	zero,zero,4158
   409c0:	0004104c 	andi	zero,zero,4161
   409c4:	000410ec 	andhi	zero,zero,4163
   409c8:	00040b7c 	xorhi	zero,zero,4141
   409cc:	000415a8 	cmpgeui	zero,zero,4182
   409d0:	00041134 	movhi	zero,4164
   409d4:	000415a8 	cmpgeui	zero,zero,4182
   409d8:	000411c8 	cmpgei	zero,zero,4167
   409dc:	000415a8 	cmpgeui	zero,zero,4182
   409e0:	000415a8 	cmpgeui	zero,zero,4182
   409e4:	00041294 	movui	zero,4170
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   409e8:	e0bfc103 	ldbu	r2,-252(fp)
   409ec:	10803fcc 	andi	r2,r2,255
   409f0:	1080201c 	xori	r2,r2,128
   409f4:	10bfe004 	addi	r2,r2,-128
   409f8:	103f931e 	bne	r2,zero,40848 <_gp+0xfffe3aec>
				sign = ' ';
   409fc:	00800804 	movi	r2,32
   40a00:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   40a04:	003f9006 	br	40848 <_gp+0xfffe3aec>
		case '#':
			flags |= ALT;
   40a08:	9cc00054 	ori	r19,r19,1
			goto rflag;
   40a0c:	003f8e06 	br	40848 <_gp+0xfffe3aec>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   40a10:	e0bfe917 	ldw	r2,-92(fp)
   40a14:	10c00104 	addi	r3,r2,4
   40a18:	e0ffe915 	stw	r3,-92(fp)
   40a1c:	10800017 	ldw	r2,0(r2)
   40a20:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   40a24:	e0bfad17 	ldw	r2,-332(fp)
   40a28:	10000116 	blt	r2,zero,40a30 <___vfprintf_internal_r+0x43c>
				goto rflag;
   40a2c:	003f8606 	br	40848 <_gp+0xfffe3aec>
			width = -width;
   40a30:	e0bfad17 	ldw	r2,-332(fp)
   40a34:	0085c83a 	sub	r2,zero,r2
   40a38:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   40a3c:	9cc00114 	ori	r19,r19,4
			goto rflag;
   40a40:	003f8106 	br	40848 <_gp+0xfffe3aec>
		case '+':
			sign = '+';
   40a44:	00800ac4 	movi	r2,43
   40a48:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   40a4c:	003f7e06 	br	40848 <_gp+0xfffe3aec>
		case '.':
			if ((ch = *fmt++) == '*') {
   40a50:	a805883a 	mov	r2,r21
   40a54:	15400044 	addi	r21,r2,1
   40a58:	10800003 	ldbu	r2,0(r2)
   40a5c:	15003fcc 	andi	r20,r2,255
   40a60:	a500201c 	xori	r20,r20,128
   40a64:	a53fe004 	addi	r20,r20,-128
   40a68:	a0800a98 	cmpnei	r2,r20,42
   40a6c:	10000a1e 	bne	r2,zero,40a98 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   40a70:	e0bfe917 	ldw	r2,-92(fp)
   40a74:	10c00104 	addi	r3,r2,4
   40a78:	e0ffe915 	stw	r3,-92(fp)
   40a7c:	10800017 	ldw	r2,0(r2)
   40a80:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   40a84:	e0bfae17 	ldw	r2,-328(fp)
   40a88:	103f6f0e 	bge	r2,zero,40848 <_gp+0xfffe3aec>
					prec = -1;
   40a8c:	00bfffc4 	movi	r2,-1
   40a90:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
   40a94:	003f6c06 	br	40848 <_gp+0xfffe3aec>
			}
			n = 0;
   40a98:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   40a9c:	00000c06 	br	40ad0 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
   40aa0:	01400284 	movi	r5,10
   40aa4:	8009883a 	mov	r4,r16
   40aa8:	004d9680 	call	4d968 <__mulsi3>
   40aac:	1007883a 	mov	r3,r2
   40ab0:	a0bff404 	addi	r2,r20,-48
   40ab4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   40ab8:	a805883a 	mov	r2,r21
   40abc:	15400044 	addi	r21,r2,1
   40ac0:	10800003 	ldbu	r2,0(r2)
   40ac4:	15003fcc 	andi	r20,r2,255
   40ac8:	a500201c 	xori	r20,r20,128
   40acc:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   40ad0:	a0bff404 	addi	r2,r20,-48
   40ad4:	108002b0 	cmpltui	r2,r2,10
   40ad8:	103ff11e 	bne	r2,zero,40aa0 <_gp+0xfffe3d44>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   40adc:	8005883a 	mov	r2,r16
   40ae0:	1000010e 	bge	r2,zero,40ae8 <___vfprintf_internal_r+0x4f4>
   40ae4:	00bfffc4 	movi	r2,-1
   40ae8:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
   40aec:	003f5c06 	br	40860 <_gp+0xfffe3b04>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   40af0:	9cc02014 	ori	r19,r19,128
			goto rflag;
   40af4:	003f5406 	br	40848 <_gp+0xfffe3aec>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   40af8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   40afc:	01400284 	movi	r5,10
   40b00:	8009883a 	mov	r4,r16
   40b04:	004d9680 	call	4d968 <__mulsi3>
   40b08:	1007883a 	mov	r3,r2
   40b0c:	a0bff404 	addi	r2,r20,-48
   40b10:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   40b14:	a805883a 	mov	r2,r21
   40b18:	15400044 	addi	r21,r2,1
   40b1c:	10800003 	ldbu	r2,0(r2)
   40b20:	15003fcc 	andi	r20,r2,255
   40b24:	a500201c 	xori	r20,r20,128
   40b28:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
   40b2c:	a0bff404 	addi	r2,r20,-48
   40b30:	108002b0 	cmpltui	r2,r2,10
   40b34:	103ff11e 	bne	r2,zero,40afc <_gp+0xfffe3da0>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   40b38:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
   40b3c:	003f4806 	br	40860 <_gp+0xfffe3b04>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   40b40:	9cc00214 	ori	r19,r19,8
			goto rflag;
   40b44:	003f4006 	br	40848 <_gp+0xfffe3aec>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   40b48:	9cc01014 	ori	r19,r19,64
			goto rflag;
   40b4c:	003f3e06 	br	40848 <_gp+0xfffe3aec>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   40b50:	a8800003 	ldbu	r2,0(r21)
   40b54:	10803fcc 	andi	r2,r2,255
   40b58:	1080201c 	xori	r2,r2,128
   40b5c:	10bfe004 	addi	r2,r2,-128
   40b60:	10801b18 	cmpnei	r2,r2,108
   40b64:	1000031e 	bne	r2,zero,40b74 <___vfprintf_internal_r+0x580>
				fmt++;
   40b68:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   40b6c:	9cc00814 	ori	r19,r19,32
   40b70:	003f3506 	br	40848 <_gp+0xfffe3aec>
			} else
#endif
				flags |= LONGINT;
   40b74:	9cc00414 	ori	r19,r19,16
			goto rflag;
   40b78:	003f3306 	br	40848 <_gp+0xfffe3aec>
		case 'q': /* extension */
			flags |= QUADINT;
   40b7c:	9cc00814 	ori	r19,r19,32
			goto rflag;
   40b80:	003f3106 	br	40848 <_gp+0xfffe3aec>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   40b84:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   40b88:	e0bfe917 	ldw	r2,-92(fp)
   40b8c:	10c00104 	addi	r3,r2,4
   40b90:	e0ffe915 	stw	r3,-92(fp)
   40b94:	10800017 	ldw	r2,0(r2)
   40b98:	90800005 	stb	r2,0(r18)
				size = 1;
   40b9c:	00800044 	movi	r2,1
   40ba0:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
   40ba4:	e03fc105 	stb	zero,-252(fp)
			break;
   40ba8:	00028806 	br	415cc <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
   40bac:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   40bb0:	9880080c 	andi	r2,r19,32
   40bb4:	10000826 	beq	r2,zero,40bd8 <___vfprintf_internal_r+0x5e4>
   40bb8:	e13fe917 	ldw	r4,-92(fp)
   40bbc:	20800204 	addi	r2,r4,8
   40bc0:	e0bfe915 	stw	r2,-92(fp)
   40bc4:	20800017 	ldw	r2,0(r4)
   40bc8:	20c00117 	ldw	r3,4(r4)
   40bcc:	e0bfea15 	stw	r2,-88(fp)
   40bd0:	e0ffeb15 	stw	r3,-84(fp)
   40bd4:	00001e06 	br	40c50 <___vfprintf_internal_r+0x65c>
   40bd8:	9880040c 	andi	r2,r19,16
   40bdc:	10000826 	beq	r2,zero,40c00 <___vfprintf_internal_r+0x60c>
   40be0:	e0bfe917 	ldw	r2,-92(fp)
   40be4:	10c00104 	addi	r3,r2,4
   40be8:	e0ffe915 	stw	r3,-92(fp)
   40bec:	10800017 	ldw	r2,0(r2)
   40bf0:	e0bfea15 	stw	r2,-88(fp)
   40bf4:	1005d7fa 	srai	r2,r2,31
   40bf8:	e0bfeb15 	stw	r2,-84(fp)
   40bfc:	00001406 	br	40c50 <___vfprintf_internal_r+0x65c>
   40c00:	9880100c 	andi	r2,r19,64
   40c04:	10000b26 	beq	r2,zero,40c34 <___vfprintf_internal_r+0x640>
   40c08:	e0bfe917 	ldw	r2,-92(fp)
   40c0c:	10c00104 	addi	r3,r2,4
   40c10:	e0ffe915 	stw	r3,-92(fp)
   40c14:	10800017 	ldw	r2,0(r2)
   40c18:	10bfffcc 	andi	r2,r2,65535
   40c1c:	10a0001c 	xori	r2,r2,32768
   40c20:	10a00004 	addi	r2,r2,-32768
   40c24:	e0bfea15 	stw	r2,-88(fp)
   40c28:	1005d7fa 	srai	r2,r2,31
   40c2c:	e0bfeb15 	stw	r2,-84(fp)
   40c30:	00000706 	br	40c50 <___vfprintf_internal_r+0x65c>
   40c34:	e0bfe917 	ldw	r2,-92(fp)
   40c38:	10c00104 	addi	r3,r2,4
   40c3c:	e0ffe915 	stw	r3,-92(fp)
   40c40:	10800017 	ldw	r2,0(r2)
   40c44:	e0bfea15 	stw	r2,-88(fp)
   40c48:	1005d7fa 	srai	r2,r2,31
   40c4c:	e0bfeb15 	stw	r2,-84(fp)
   40c50:	e0bfea17 	ldw	r2,-88(fp)
   40c54:	e0bfb115 	stw	r2,-316(fp)
   40c58:	e0ffeb17 	ldw	r3,-84(fp)
   40c5c:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   40c60:	e0bfb117 	ldw	r2,-316(fp)
   40c64:	e0ffb217 	ldw	r3,-312(fp)
   40c68:	18000d0e 	bge	r3,zero,40ca0 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   40c6c:	000f883a 	mov	r7,zero
   40c70:	0011883a 	mov	r8,zero
   40c74:	e13fb117 	ldw	r4,-316(fp)
   40c78:	e17fb217 	ldw	r5,-312(fp)
   40c7c:	3905c83a 	sub	r2,r7,r4
   40c80:	388d803a 	cmpltu	r6,r7,r2
   40c84:	4147c83a 	sub	r3,r8,r5
   40c88:	1989c83a 	sub	r4,r3,r6
   40c8c:	2007883a 	mov	r3,r4
   40c90:	e0bfb115 	stw	r2,-316(fp)
   40c94:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
   40c98:	00800b44 	movi	r2,45
   40c9c:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
   40ca0:	00800044 	movi	r2,1
   40ca4:	e0bfb305 	stb	r2,-308(fp)
			goto number;
   40ca8:	0001b706 	br	41388 <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
   40cac:	9880020c 	andi	r2,r19,8
   40cb0:	10000826 	beq	r2,zero,40cd4 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
   40cb4:	e13fe917 	ldw	r4,-92(fp)
   40cb8:	20800204 	addi	r2,r4,8
   40cbc:	e0bfe915 	stw	r2,-92(fp)
   40cc0:	20800017 	ldw	r2,0(r4)
   40cc4:	20c00117 	ldw	r3,4(r4)
   40cc8:	e0bfc215 	stw	r2,-248(fp)
   40ccc:	e0ffc315 	stw	r3,-244(fp)
   40cd0:	00000706 	br	40cf0 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
   40cd4:	e13fe917 	ldw	r4,-92(fp)
   40cd8:	20800204 	addi	r2,r4,8
   40cdc:	e0bfe915 	stw	r2,-92(fp)
   40ce0:	20800017 	ldw	r2,0(r4)
   40ce4:	20c00117 	ldw	r3,4(r4)
   40ce8:	e0bfc215 	stw	r2,-248(fp)
   40cec:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
   40cf0:	e0bfc217 	ldw	r2,-248(fp)
   40cf4:	e0ffc317 	ldw	r3,-244(fp)
   40cf8:	1009883a 	mov	r4,r2
   40cfc:	180b883a 	mov	r5,r3
   40d00:	004905c0 	call	4905c <__fpclassifyd>
   40d04:	10800058 	cmpnei	r2,r2,1
   40d08:	1000161e 	bne	r2,zero,40d64 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
   40d0c:	e0bfc217 	ldw	r2,-248(fp)
   40d10:	e0ffc317 	ldw	r3,-244(fp)
   40d14:	000d883a 	mov	r6,zero
   40d18:	000f883a 	mov	r7,zero
   40d1c:	1009883a 	mov	r4,r2
   40d20:	180b883a 	mov	r5,r3
   40d24:	004ed700 	call	4ed70 <__ledf2>
   40d28:	1000020e 	bge	r2,zero,40d34 <___vfprintf_internal_r+0x740>
					sign = '-';
   40d2c:	00800b44 	movi	r2,45
   40d30:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   40d34:	a0801208 	cmpgei	r2,r20,72
   40d38:	1000031e 	bne	r2,zero,40d48 <___vfprintf_internal_r+0x754>
					cp = "INF";
   40d3c:	04800174 	movhi	r18,5
   40d40:	948aa404 	addi	r18,r18,10896
   40d44:	00000206 	br	40d50 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
   40d48:	04800174 	movhi	r18,5
   40d4c:	948aa504 	addi	r18,r18,10900
				size = 3;
   40d50:	008000c4 	movi	r2,3
   40d54:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   40d58:	00bfdfc4 	movi	r2,-129
   40d5c:	98a6703a 	and	r19,r19,r2
				break;
   40d60:	00021a06 	br	415cc <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
   40d64:	e0bfc217 	ldw	r2,-248(fp)
   40d68:	e0ffc317 	ldw	r3,-244(fp)
   40d6c:	1009883a 	mov	r4,r2
   40d70:	180b883a 	mov	r5,r3
   40d74:	004905c0 	call	4905c <__fpclassifyd>
   40d78:	10000c1e 	bne	r2,zero,40dac <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   40d7c:	a0801208 	cmpgei	r2,r20,72
   40d80:	1000031e 	bne	r2,zero,40d90 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
   40d84:	04800174 	movhi	r18,5
   40d88:	948aa604 	addi	r18,r18,10904
   40d8c:	00000206 	br	40d98 <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
   40d90:	04800174 	movhi	r18,5
   40d94:	948aa704 	addi	r18,r18,10908
				size = 3;
   40d98:	008000c4 	movi	r2,3
   40d9c:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   40da0:	00bfdfc4 	movi	r2,-129
   40da4:	98a6703a 	and	r19,r19,r2
				break;
   40da8:	00020806 	br	415cc <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
   40dac:	e0bfae17 	ldw	r2,-328(fp)
   40db0:	10bfffd8 	cmpnei	r2,r2,-1
   40db4:	1000031e 	bne	r2,zero,40dc4 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
   40db8:	00800184 	movi	r2,6
   40dbc:	e0bfae15 	stw	r2,-328(fp)
   40dc0:	00000806 	br	40de4 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
   40dc4:	a08019e0 	cmpeqi	r2,r20,103
   40dc8:	1000021e 	bne	r2,zero,40dd4 <___vfprintf_internal_r+0x7e0>
   40dcc:	a08011d8 	cmpnei	r2,r20,71
   40dd0:	1000041e 	bne	r2,zero,40de4 <___vfprintf_internal_r+0x7f0>
   40dd4:	e0bfae17 	ldw	r2,-328(fp)
   40dd8:	1000021e 	bne	r2,zero,40de4 <___vfprintf_internal_r+0x7f0>
				prec = 1;
   40ddc:	00800044 	movi	r2,1
   40de0:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
   40de4:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
   40de8:	e0bfc217 	ldw	r2,-248(fp)
   40dec:	e0ffc317 	ldw	r3,-244(fp)
   40df0:	dc800515 	stw	r18,20(sp)
   40df4:	e13fc704 	addi	r4,fp,-228
   40df8:	d9000415 	stw	r4,16(sp)
   40dfc:	dd000315 	stw	r20,12(sp)
   40e00:	e13fc404 	addi	r4,fp,-240
   40e04:	d9000215 	stw	r4,8(sp)
   40e08:	e13fc144 	addi	r4,fp,-251
   40e0c:	d9000115 	stw	r4,4(sp)
   40e10:	dcc00015 	stw	r19,0(sp)
   40e14:	e1ffae17 	ldw	r7,-328(fp)
   40e18:	100b883a 	mov	r5,r2
   40e1c:	180d883a 	mov	r6,r3
   40e20:	e13fe617 	ldw	r4,-104(fp)
   40e24:	00426dc0 	call	426dc <cvt>
   40e28:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
   40e2c:	a08019e0 	cmpeqi	r2,r20,103
   40e30:	1000021e 	bne	r2,zero,40e3c <___vfprintf_internal_r+0x848>
   40e34:	a08011d8 	cmpnei	r2,r20,71
   40e38:	1000091e 	bne	r2,zero,40e60 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
   40e3c:	e0bfc417 	ldw	r2,-240(fp)
   40e40:	10bfff50 	cmplti	r2,r2,-3
   40e44:	1000031e 	bne	r2,zero,40e54 <___vfprintf_internal_r+0x860>
   40e48:	e0bfc417 	ldw	r2,-240(fp)
   40e4c:	e0ffae17 	ldw	r3,-328(fp)
   40e50:	1880020e 	bge	r3,r2,40e5c <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
   40e54:	a53fff84 	addi	r20,r20,-2
   40e58:	00000106 	br	40e60 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
   40e5c:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
   40e60:	a0801988 	cmpgei	r2,r20,102
   40e64:	1000171e 	bne	r2,zero,40ec4 <___vfprintf_internal_r+0x8d0>
				--expt;
   40e68:	e0bfc417 	ldw	r2,-240(fp)
   40e6c:	10bfffc4 	addi	r2,r2,-1
   40e70:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
   40e74:	e0bfc417 	ldw	r2,-240(fp)
   40e78:	e0ffc504 	addi	r3,fp,-236
   40e7c:	a00d883a 	mov	r6,r20
   40e80:	100b883a 	mov	r5,r2
   40e84:	1809883a 	mov	r4,r3
   40e88:	00428e80 	call	428e8 <exponent>
   40e8c:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
   40e90:	e0bfc717 	ldw	r2,-228(fp)
   40e94:	e0ffaf17 	ldw	r3,-324(fp)
   40e98:	1885883a 	add	r2,r3,r2
   40e9c:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
   40ea0:	e0bfc717 	ldw	r2,-228(fp)
   40ea4:	10800088 	cmpgei	r2,r2,2
   40ea8:	1000021e 	bne	r2,zero,40eb4 <___vfprintf_internal_r+0x8c0>
   40eac:	9880004c 	andi	r2,r19,1
   40eb0:	10003526 	beq	r2,zero,40f88 <___vfprintf_internal_r+0x994>
					++size;
   40eb4:	e0bfb617 	ldw	r2,-296(fp)
   40eb8:	10800044 	addi	r2,r2,1
   40ebc:	e0bfb615 	stw	r2,-296(fp)
   40ec0:	00003106 	br	40f88 <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
   40ec4:	a0801998 	cmpnei	r2,r20,102
   40ec8:	1000181e 	bne	r2,zero,40f2c <___vfprintf_internal_r+0x938>
					if (expt > 0) {
   40ecc:	e0bfc417 	ldw	r2,-240(fp)
   40ed0:	00800c0e 	bge	zero,r2,40f04 <___vfprintf_internal_r+0x910>
						size = expt;
   40ed4:	e0bfc417 	ldw	r2,-240(fp)
   40ed8:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
   40edc:	e0bfae17 	ldw	r2,-328(fp)
   40ee0:	1000021e 	bne	r2,zero,40eec <___vfprintf_internal_r+0x8f8>
   40ee4:	9880004c 	andi	r2,r19,1
   40ee8:	10002526 	beq	r2,zero,40f80 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
   40eec:	e0bfae17 	ldw	r2,-328(fp)
   40ef0:	10800044 	addi	r2,r2,1
   40ef4:	e0ffb617 	ldw	r3,-296(fp)
   40ef8:	1885883a 	add	r2,r3,r2
   40efc:	e0bfb615 	stw	r2,-296(fp)
   40f00:	00001f06 	br	40f80 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
   40f04:	e0bfae17 	ldw	r2,-328(fp)
   40f08:	1000021e 	bne	r2,zero,40f14 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   40f0c:	9880004c 	andi	r2,r19,1
   40f10:	10000326 	beq	r2,zero,40f20 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
   40f14:	e0bfae17 	ldw	r2,-328(fp)
   40f18:	10800084 	addi	r2,r2,2
   40f1c:	00000106 	br	40f24 <___vfprintf_internal_r+0x930>
   40f20:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   40f24:	e0bfb615 	stw	r2,-296(fp)
   40f28:	00001506 	br	40f80 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
   40f2c:	e0ffc417 	ldw	r3,-240(fp)
   40f30:	e0bfc717 	ldw	r2,-228(fp)
   40f34:	18800816 	blt	r3,r2,40f58 <___vfprintf_internal_r+0x964>
					size = expt;
   40f38:	e0bfc417 	ldw	r2,-240(fp)
   40f3c:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
   40f40:	9880004c 	andi	r2,r19,1
   40f44:	10000e26 	beq	r2,zero,40f80 <___vfprintf_internal_r+0x98c>
						++size;
   40f48:	e0bfb617 	ldw	r2,-296(fp)
   40f4c:	10800044 	addi	r2,r2,1
   40f50:	e0bfb615 	stw	r2,-296(fp)
   40f54:	00000a06 	br	40f80 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
   40f58:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
   40f5c:	00800416 	blt	zero,r2,40f70 <___vfprintf_internal_r+0x97c>
   40f60:	e0bfc417 	ldw	r2,-240(fp)
   40f64:	00c00084 	movi	r3,2
   40f68:	1885c83a 	sub	r2,r3,r2
   40f6c:	00000106 	br	40f74 <___vfprintf_internal_r+0x980>
   40f70:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
   40f74:	e0ffc717 	ldw	r3,-228(fp)
   40f78:	10c5883a 	add	r2,r2,r3
   40f7c:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
   40f80:	e0bfc417 	ldw	r2,-240(fp)
   40f84:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
   40f88:	e0bfc143 	ldbu	r2,-251(fp)
   40f8c:	10803fcc 	andi	r2,r2,255
   40f90:	1080201c 	xori	r2,r2,128
   40f94:	10bfe004 	addi	r2,r2,-128
   40f98:	10018b26 	beq	r2,zero,415c8 <___vfprintf_internal_r+0xfd4>
				sign = '-';
   40f9c:	00800b44 	movi	r2,45
   40fa0:	e0bfc105 	stb	r2,-252(fp)
			break;
   40fa4:	00018806 	br	415c8 <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   40fa8:	9880080c 	andi	r2,r19,32
   40fac:	10000d26 	beq	r2,zero,40fe4 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   40fb0:	e0bfe917 	ldw	r2,-92(fp)
   40fb4:	10c00104 	addi	r3,r2,4
   40fb8:	e0ffe915 	stw	r3,-92(fp)
   40fbc:	10800017 	ldw	r2,0(r2)
   40fc0:	e0ffac17 	ldw	r3,-336(fp)
   40fc4:	e0fff015 	stw	r3,-64(fp)
   40fc8:	1807d7fa 	srai	r3,r3,31
   40fcc:	e0fff115 	stw	r3,-60(fp)
   40fd0:	e0fff017 	ldw	r3,-64(fp)
   40fd4:	10c00015 	stw	r3,0(r2)
   40fd8:	e0fff117 	ldw	r3,-60(fp)
   40fdc:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   40fe0:	00054b06 	br	42510 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   40fe4:	9880040c 	andi	r2,r19,16
   40fe8:	10000726 	beq	r2,zero,41008 <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   40fec:	e0bfe917 	ldw	r2,-92(fp)
   40ff0:	10c00104 	addi	r3,r2,4
   40ff4:	e0ffe915 	stw	r3,-92(fp)
   40ff8:	10800017 	ldw	r2,0(r2)
   40ffc:	e0ffac17 	ldw	r3,-336(fp)
   41000:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   41004:	00054206 	br	42510 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   41008:	9880100c 	andi	r2,r19,64
   4100c:	10000726 	beq	r2,zero,4102c <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   41010:	e0bfe917 	ldw	r2,-92(fp)
   41014:	10c00104 	addi	r3,r2,4
   41018:	e0ffe915 	stw	r3,-92(fp)
   4101c:	10800017 	ldw	r2,0(r2)
   41020:	e0ffac17 	ldw	r3,-336(fp)
   41024:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   41028:	00053906 	br	42510 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   4102c:	e0bfe917 	ldw	r2,-92(fp)
   41030:	10c00104 	addi	r3,r2,4
   41034:	e0ffe915 	stw	r3,-92(fp)
   41038:	10800017 	ldw	r2,0(r2)
   4103c:	e0ffac17 	ldw	r3,-336(fp)
   41040:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   41044:	00053206 	br	42510 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
   41048:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   4104c:	9880080c 	andi	r2,r19,32
   41050:	10000626 	beq	r2,zero,4106c <___vfprintf_internal_r+0xa78>
   41054:	e0bfe917 	ldw	r2,-92(fp)
   41058:	10c00204 	addi	r3,r2,8
   4105c:	e0ffe915 	stw	r3,-92(fp)
   41060:	15800017 	ldw	r22,0(r2)
   41064:	15c00117 	ldw	r23,4(r2)
   41068:	00001c06 	br	410dc <___vfprintf_internal_r+0xae8>
   4106c:	9880040c 	andi	r2,r19,16
   41070:	10000726 	beq	r2,zero,41090 <___vfprintf_internal_r+0xa9c>
   41074:	e0bfe917 	ldw	r2,-92(fp)
   41078:	10c00104 	addi	r3,r2,4
   4107c:	e0ffe915 	stw	r3,-92(fp)
   41080:	10800017 	ldw	r2,0(r2)
   41084:	102d883a 	mov	r22,r2
   41088:	002f883a 	mov	r23,zero
   4108c:	00001306 	br	410dc <___vfprintf_internal_r+0xae8>
   41090:	9880100c 	andi	r2,r19,64
   41094:	10000b26 	beq	r2,zero,410c4 <___vfprintf_internal_r+0xad0>
   41098:	e0bfe917 	ldw	r2,-92(fp)
   4109c:	10c00104 	addi	r3,r2,4
   410a0:	e0ffe915 	stw	r3,-92(fp)
   410a4:	10800017 	ldw	r2,0(r2)
   410a8:	e0bff215 	stw	r2,-56(fp)
   410ac:	e03ff315 	stw	zero,-52(fp)
   410b0:	e0bff217 	ldw	r2,-56(fp)
   410b4:	15bfffcc 	andi	r22,r2,65535
   410b8:	e0fff317 	ldw	r3,-52(fp)
   410bc:	182e703a 	and	r23,r3,zero
   410c0:	00000606 	br	410dc <___vfprintf_internal_r+0xae8>
   410c4:	e0bfe917 	ldw	r2,-92(fp)
   410c8:	10c00104 	addi	r3,r2,4
   410cc:	e0ffe915 	stw	r3,-92(fp)
   410d0:	10800017 	ldw	r2,0(r2)
   410d4:	102d883a 	mov	r22,r2
   410d8:	002f883a 	mov	r23,zero
   410dc:	e5bfb115 	stw	r22,-316(fp)
   410e0:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
   410e4:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   410e8:	0000a606 	br	41384 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   410ec:	e0bfe917 	ldw	r2,-92(fp)
   410f0:	10c00104 	addi	r3,r2,4
   410f4:	e0ffe915 	stw	r3,-92(fp)
   410f8:	10800017 	ldw	r2,0(r2)
   410fc:	e0bfb115 	stw	r2,-316(fp)
   41100:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
   41104:	00800084 	movi	r2,2
   41108:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
   4110c:	00800174 	movhi	r2,5
   41110:	108aa804 	addi	r2,r2,10912
   41114:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
   41118:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   4111c:	00800c04 	movi	r2,48
   41120:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   41124:	05001e04 	movi	r20,120
   41128:	00801e04 	movi	r2,120
   4112c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   41130:	00009406 	br	41384 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   41134:	e0bfe917 	ldw	r2,-92(fp)
   41138:	10c00104 	addi	r3,r2,4
   4113c:	e0ffe915 	stw	r3,-92(fp)
   41140:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   41144:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   41148:	9000081e 	bne	r18,zero,4116c <___vfprintf_internal_r+0xb78>
				cp = "(null)";
   4114c:	04800174 	movhi	r18,5
   41150:	948aad04 	addi	r18,r18,10932
				size = ((unsigned) prec > 6U) ? 6 : prec;
   41154:	e0bfae17 	ldw	r2,-328(fp)
   41158:	10c001f0 	cmpltui	r3,r2,7
   4115c:	1800011e 	bne	r3,zero,41164 <___vfprintf_internal_r+0xb70>
   41160:	00800184 	movi	r2,6
   41164:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   41168:	00011806 	br	415cc <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   4116c:	e0bfae17 	ldw	r2,-328(fp)
   41170:	10001016 	blt	r2,zero,411b4 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   41174:	e0bfae17 	ldw	r2,-328(fp)
   41178:	100d883a 	mov	r6,r2
   4117c:	000b883a 	mov	r5,zero
   41180:	9009883a 	mov	r4,r18
   41184:	00470a40 	call	470a4 <memchr>
   41188:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
   4118c:	e0bfbf17 	ldw	r2,-260(fp)
   41190:	10000526 	beq	r2,zero,411a8 <___vfprintf_internal_r+0xbb4>
					size = p - cp;
   41194:	e0bfbf17 	ldw	r2,-260(fp)
   41198:	9007883a 	mov	r3,r18
   4119c:	10c5c83a 	sub	r2,r2,r3
   411a0:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   411a4:	00010906 	br	415cc <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   411a8:	e0bfae17 	ldw	r2,-328(fp)
   411ac:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
   411b0:	00010606 	br	415cc <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   411b4:	9009883a 	mov	r4,r18
   411b8:	00495740 	call	49574 <strlen>
   411bc:	e0bfb615 	stw	r2,-296(fp)

			break;
   411c0:	00010206 	br	415cc <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
   411c4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   411c8:	9880080c 	andi	r2,r19,32
   411cc:	10000826 	beq	r2,zero,411f0 <___vfprintf_internal_r+0xbfc>
   411d0:	e0bfe917 	ldw	r2,-92(fp)
   411d4:	10c00204 	addi	r3,r2,8
   411d8:	e0ffe915 	stw	r3,-92(fp)
   411dc:	10c00017 	ldw	r3,0(r2)
   411e0:	e0ffec15 	stw	r3,-80(fp)
   411e4:	10c00117 	ldw	r3,4(r2)
   411e8:	e0ffed15 	stw	r3,-76(fp)
   411ec:	00001e06 	br	41268 <___vfprintf_internal_r+0xc74>
   411f0:	9880040c 	andi	r2,r19,16
   411f4:	10000726 	beq	r2,zero,41214 <___vfprintf_internal_r+0xc20>
   411f8:	e0bfe917 	ldw	r2,-92(fp)
   411fc:	10c00104 	addi	r3,r2,4
   41200:	e0ffe915 	stw	r3,-92(fp)
   41204:	10800017 	ldw	r2,0(r2)
   41208:	e0bfec15 	stw	r2,-80(fp)
   4120c:	e03fed15 	stw	zero,-76(fp)
   41210:	00001506 	br	41268 <___vfprintf_internal_r+0xc74>
   41214:	9880100c 	andi	r2,r19,64
   41218:	10000d26 	beq	r2,zero,41250 <___vfprintf_internal_r+0xc5c>
   4121c:	e0bfe917 	ldw	r2,-92(fp)
   41220:	10c00104 	addi	r3,r2,4
   41224:	e0ffe915 	stw	r3,-92(fp)
   41228:	10800017 	ldw	r2,0(r2)
   4122c:	e0bff415 	stw	r2,-48(fp)
   41230:	e03ff515 	stw	zero,-44(fp)
   41234:	e0bff417 	ldw	r2,-48(fp)
   41238:	10bfffcc 	andi	r2,r2,65535
   4123c:	e0bfec15 	stw	r2,-80(fp)
   41240:	e0fff517 	ldw	r3,-44(fp)
   41244:	1806703a 	and	r3,r3,zero
   41248:	e0ffed15 	stw	r3,-76(fp)
   4124c:	00000606 	br	41268 <___vfprintf_internal_r+0xc74>
   41250:	e0bfe917 	ldw	r2,-92(fp)
   41254:	10c00104 	addi	r3,r2,4
   41258:	e0ffe915 	stw	r3,-92(fp)
   4125c:	10800017 	ldw	r2,0(r2)
   41260:	e0bfec15 	stw	r2,-80(fp)
   41264:	e03fed15 	stw	zero,-76(fp)
   41268:	e0bfec17 	ldw	r2,-80(fp)
   4126c:	e0bfb115 	stw	r2,-316(fp)
   41270:	e0ffed17 	ldw	r3,-76(fp)
   41274:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
   41278:	00800044 	movi	r2,1
   4127c:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
   41280:	00004006 	br	41384 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
   41284:	00800174 	movhi	r2,5
   41288:	108aaf04 	addi	r2,r2,10940
   4128c:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
   41290:	00000306 	br	412a0 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
   41294:	00800174 	movhi	r2,5
   41298:	108aa804 	addi	r2,r2,10912
   4129c:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
   412a0:	9880080c 	andi	r2,r19,32
   412a4:	10000826 	beq	r2,zero,412c8 <___vfprintf_internal_r+0xcd4>
   412a8:	e0bfe917 	ldw	r2,-92(fp)
   412ac:	10c00204 	addi	r3,r2,8
   412b0:	e0ffe915 	stw	r3,-92(fp)
   412b4:	10c00017 	ldw	r3,0(r2)
   412b8:	e0ffee15 	stw	r3,-72(fp)
   412bc:	10c00117 	ldw	r3,4(r2)
   412c0:	e0ffef15 	stw	r3,-68(fp)
   412c4:	00001e06 	br	41340 <___vfprintf_internal_r+0xd4c>
   412c8:	9880040c 	andi	r2,r19,16
   412cc:	10000726 	beq	r2,zero,412ec <___vfprintf_internal_r+0xcf8>
   412d0:	e0bfe917 	ldw	r2,-92(fp)
   412d4:	10c00104 	addi	r3,r2,4
   412d8:	e0ffe915 	stw	r3,-92(fp)
   412dc:	10800017 	ldw	r2,0(r2)
   412e0:	e0bfee15 	stw	r2,-72(fp)
   412e4:	e03fef15 	stw	zero,-68(fp)
   412e8:	00001506 	br	41340 <___vfprintf_internal_r+0xd4c>
   412ec:	9880100c 	andi	r2,r19,64
   412f0:	10000d26 	beq	r2,zero,41328 <___vfprintf_internal_r+0xd34>
   412f4:	e0bfe917 	ldw	r2,-92(fp)
   412f8:	10c00104 	addi	r3,r2,4
   412fc:	e0ffe915 	stw	r3,-92(fp)
   41300:	10800017 	ldw	r2,0(r2)
   41304:	e0bff615 	stw	r2,-40(fp)
   41308:	e03ff715 	stw	zero,-36(fp)
   4130c:	e0bff617 	ldw	r2,-40(fp)
   41310:	10bfffcc 	andi	r2,r2,65535
   41314:	e0bfee15 	stw	r2,-72(fp)
   41318:	e0fff717 	ldw	r3,-36(fp)
   4131c:	1806703a 	and	r3,r3,zero
   41320:	e0ffef15 	stw	r3,-68(fp)
   41324:	00000606 	br	41340 <___vfprintf_internal_r+0xd4c>
   41328:	e0bfe917 	ldw	r2,-92(fp)
   4132c:	10c00104 	addi	r3,r2,4
   41330:	e0ffe915 	stw	r3,-92(fp)
   41334:	10800017 	ldw	r2,0(r2)
   41338:	e0bfee15 	stw	r2,-72(fp)
   4133c:	e03fef15 	stw	zero,-68(fp)
   41340:	e0bfee17 	ldw	r2,-72(fp)
   41344:	e0bfb115 	stw	r2,-316(fp)
   41348:	e0ffef17 	ldw	r3,-68(fp)
   4134c:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
   41350:	00800084 	movi	r2,2
   41354:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   41358:	9880004c 	andi	r2,r19,1
   4135c:	10000926 	beq	r2,zero,41384 <___vfprintf_internal_r+0xd90>
   41360:	e0bfb117 	ldw	r2,-316(fp)
   41364:	e0ffb217 	ldw	r3,-312(fp)
   41368:	10c4b03a 	or	r2,r2,r3
   4136c:	10000526 	beq	r2,zero,41384 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
   41370:	00800c04 	movi	r2,48
   41374:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   41378:	a005883a 	mov	r2,r20
   4137c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   41380:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   41384:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   41388:	e0bfae17 	ldw	r2,-328(fp)
   4138c:	e0bfb415 	stw	r2,-304(fp)
   41390:	e0bfb417 	ldw	r2,-304(fp)
   41394:	10000216 	blt	r2,zero,413a0 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
   41398:	00bfdfc4 	movi	r2,-129
   4139c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   413a0:	e4bfdb04 	addi	r18,fp,-148
   413a4:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
   413a8:	e0bfb117 	ldw	r2,-316(fp)
   413ac:	e0ffb217 	ldw	r3,-312(fp)
   413b0:	10c4b03a 	or	r2,r2,r3
   413b4:	1000021e 	bne	r2,zero,413c0 <___vfprintf_internal_r+0xdcc>
   413b8:	e0bfae17 	ldw	r2,-328(fp)
   413bc:	10006c26 	beq	r2,zero,41570 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   413c0:	e0bfb303 	ldbu	r2,-308(fp)
   413c4:	10c00060 	cmpeqi	r3,r2,1
   413c8:	1800211e 	bne	r3,zero,41450 <___vfprintf_internal_r+0xe5c>
   413cc:	10c000a0 	cmpeqi	r3,r2,2
   413d0:	1800491e 	bne	r3,zero,414f8 <___vfprintf_internal_r+0xf04>
   413d4:	10005d1e 	bne	r2,zero,4154c <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   413d8:	94bfffc4 	addi	r18,r18,-1
   413dc:	e0bfb117 	ldw	r2,-316(fp)
   413e0:	108001cc 	andi	r2,r2,7
   413e4:	10800c04 	addi	r2,r2,48
   413e8:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
   413ec:	e0bfb217 	ldw	r2,-312(fp)
   413f0:	1004977a 	slli	r2,r2,29
   413f4:	e0ffb117 	ldw	r3,-316(fp)
   413f8:	1806d0fa 	srli	r3,r3,3
   413fc:	1884b03a 	or	r2,r3,r2
   41400:	e0bfb115 	stw	r2,-316(fp)
   41404:	e0bfb217 	ldw	r2,-312(fp)
   41408:	1004d0fa 	srli	r2,r2,3
   4140c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   41410:	e0bfb117 	ldw	r2,-316(fp)
   41414:	e0ffb217 	ldw	r3,-312(fp)
   41418:	10c4b03a 	or	r2,r2,r3
   4141c:	103fee1e 	bne	r2,zero,413d8 <_gp+0xfffe467c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   41420:	9880004c 	andi	r2,r19,1
   41424:	10005026 	beq	r2,zero,41568 <___vfprintf_internal_r+0xf74>
   41428:	90800003 	ldbu	r2,0(r18)
   4142c:	10803fcc 	andi	r2,r2,255
   41430:	1080201c 	xori	r2,r2,128
   41434:	10bfe004 	addi	r2,r2,-128
   41438:	10800c20 	cmpeqi	r2,r2,48
   4143c:	10004a1e 	bne	r2,zero,41568 <___vfprintf_internal_r+0xf74>
						*--cp = '0';
   41440:	94bfffc4 	addi	r18,r18,-1
   41444:	00800c04 	movi	r2,48
   41448:	90800005 	stb	r2,0(r18)
					break;
   4144c:	00004606 	br	41568 <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   41450:	e0bfb217 	ldw	r2,-312(fp)
   41454:	10000a1e 	bne	r2,zero,41480 <___vfprintf_internal_r+0xe8c>
   41458:	e0bfb217 	ldw	r2,-312(fp)
   4145c:	1000031e 	bne	r2,zero,4146c <___vfprintf_internal_r+0xe78>
   41460:	e0bfb117 	ldw	r2,-316(fp)
   41464:	108002a8 	cmpgeui	r2,r2,10
   41468:	1000051e 	bne	r2,zero,41480 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
   4146c:	94bfffc4 	addi	r18,r18,-1
   41470:	e0bfb117 	ldw	r2,-316(fp)
   41474:	10800c04 	addi	r2,r2,48
   41478:	90800005 	stb	r2,0(r18)
						break;
   4147c:	00003b06 	br	4156c <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   41480:	94bfffc4 	addi	r18,r18,-1
   41484:	e0bfb117 	ldw	r2,-316(fp)
   41488:	e0ffb217 	ldw	r3,-312(fp)
   4148c:	01800284 	movi	r6,10
   41490:	000f883a 	mov	r7,zero
   41494:	1009883a 	mov	r4,r2
   41498:	180b883a 	mov	r5,r3
   4149c:	004d1f00 	call	4d1f0 <__umoddi3>
   414a0:	1009883a 	mov	r4,r2
   414a4:	180b883a 	mov	r5,r3
   414a8:	2005883a 	mov	r2,r4
   414ac:	2807883a 	mov	r3,r5
   414b0:	10800c04 	addi	r2,r2,48
   414b4:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   414b8:	e0bfb117 	ldw	r2,-316(fp)
   414bc:	e0ffb217 	ldw	r3,-312(fp)
   414c0:	01800284 	movi	r6,10
   414c4:	000f883a 	mov	r7,zero
   414c8:	1009883a 	mov	r4,r2
   414cc:	180b883a 	mov	r5,r3
   414d0:	004cbf40 	call	4cbf4 <__udivdi3>
   414d4:	1009883a 	mov	r4,r2
   414d8:	180b883a 	mov	r5,r3
   414dc:	e13fb115 	stw	r4,-316(fp)
   414e0:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
   414e4:	e0bfb117 	ldw	r2,-316(fp)
   414e8:	e0ffb217 	ldw	r3,-312(fp)
   414ec:	10c4b03a 	or	r2,r2,r3
   414f0:	103fe31e 	bne	r2,zero,41480 <_gp+0xfffe4724>
					break;
   414f4:	00001d06 	br	4156c <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   414f8:	94bfffc4 	addi	r18,r18,-1
   414fc:	e0bfb117 	ldw	r2,-316(fp)
   41500:	108003cc 	andi	r2,r2,15
   41504:	e0ffb717 	ldw	r3,-292(fp)
   41508:	1885883a 	add	r2,r3,r2
   4150c:	10800003 	ldbu	r2,0(r2)
   41510:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
   41514:	e0bfb217 	ldw	r2,-312(fp)
   41518:	1004973a 	slli	r2,r2,28
   4151c:	e0ffb117 	ldw	r3,-316(fp)
   41520:	1806d13a 	srli	r3,r3,4
   41524:	1884b03a 	or	r2,r3,r2
   41528:	e0bfb115 	stw	r2,-316(fp)
   4152c:	e0bfb217 	ldw	r2,-312(fp)
   41530:	1004d13a 	srli	r2,r2,4
   41534:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   41538:	e0bfb117 	ldw	r2,-316(fp)
   4153c:	e0ffb217 	ldw	r3,-312(fp)
   41540:	10c4b03a 	or	r2,r2,r3
   41544:	103fec1e 	bne	r2,zero,414f8 <_gp+0xfffe479c>
					break;
   41548:	00000806 	br	4156c <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
   4154c:	04800174 	movhi	r18,5
   41550:	948ab404 	addi	r18,r18,10960
					size = strlen (cp);
   41554:	9009883a 	mov	r4,r18
   41558:	00495740 	call	49574 <strlen>
   4155c:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
   41560:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   41564:	00001906 	br	415cc <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   41568:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   4156c:	00000706 	br	4158c <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   41570:	e0bfb303 	ldbu	r2,-308(fp)
   41574:	1000051e 	bne	r2,zero,4158c <___vfprintf_internal_r+0xf98>
   41578:	9880004c 	andi	r2,r19,1
   4157c:	10000326 	beq	r2,zero,4158c <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
   41580:	94bfffc4 	addi	r18,r18,-1
   41584:	00800c04 	movi	r2,48
   41588:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
   4158c:	e0bfdb04 	addi	r2,fp,-148
   41590:	10800a04 	addi	r2,r2,40
   41594:	1007883a 	mov	r3,r2
   41598:	9005883a 	mov	r2,r18
   4159c:	1885c83a 	sub	r2,r3,r2
   415a0:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
   415a4:	00000906 	br	415cc <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   415a8:	a003dc26 	beq	r20,zero,4251c <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   415ac:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
   415b0:	a005883a 	mov	r2,r20
   415b4:	90800005 	stb	r2,0(r18)
			size = 1;
   415b8:	00800044 	movi	r2,1
   415bc:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
   415c0:	e03fc105 	stb	zero,-252(fp)
			break;
   415c4:	00000106 	br	415cc <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
   415c8:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   415cc:	e0ffb417 	ldw	r3,-304(fp)
   415d0:	e0bfb617 	ldw	r2,-296(fp)
   415d4:	10c0010e 	bge	r2,r3,415dc <___vfprintf_internal_r+0xfe8>
   415d8:	1805883a 	mov	r2,r3
   415dc:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
   415e0:	e0bfc103 	ldbu	r2,-252(fp)
   415e4:	10803fcc 	andi	r2,r2,255
   415e8:	1080201c 	xori	r2,r2,128
   415ec:	10bfe004 	addi	r2,r2,-128
   415f0:	10000326 	beq	r2,zero,41600 <___vfprintf_internal_r+0x100c>
			realsz++;
   415f4:	e0bfb517 	ldw	r2,-300(fp)
   415f8:	10800044 	addi	r2,r2,1
   415fc:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
   41600:	9880008c 	andi	r2,r19,2
   41604:	10000326 	beq	r2,zero,41614 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
   41608:	e0bfb517 	ldw	r2,-300(fp)
   4160c:	10800084 	addi	r2,r2,2
   41610:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   41614:	9880210c 	andi	r2,r19,132
   41618:	1000351e 	bne	r2,zero,416f0 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
   4161c:	e0ffad17 	ldw	r3,-332(fp)
   41620:	e0bfb517 	ldw	r2,-300(fp)
   41624:	18a1c83a 	sub	r16,r3,r2
   41628:	0400310e 	bge	zero,r16,416f0 <___vfprintf_internal_r+0x10fc>
   4162c:	00001706 	br	4168c <___vfprintf_internal_r+0x1098>
   41630:	00800174 	movhi	r2,5
   41634:	108abb84 	addi	r2,r2,10990
   41638:	88800015 	stw	r2,0(r17)
   4163c:	00800404 	movi	r2,16
   41640:	88800115 	stw	r2,4(r17)
   41644:	e0bfca17 	ldw	r2,-216(fp)
   41648:	10800404 	addi	r2,r2,16
   4164c:	e0bfca15 	stw	r2,-216(fp)
   41650:	8c400204 	addi	r17,r17,8
   41654:	e0bfc917 	ldw	r2,-220(fp)
   41658:	10800044 	addi	r2,r2,1
   4165c:	e0bfc915 	stw	r2,-220(fp)
   41660:	e0bfc917 	ldw	r2,-220(fp)
   41664:	10800210 	cmplti	r2,r2,8
   41668:	1000071e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x1094>
   4166c:	e0bfc804 	addi	r2,fp,-224
   41670:	100d883a 	mov	r6,r2
   41674:	e17fe717 	ldw	r5,-100(fp)
   41678:	e13fe617 	ldw	r4,-104(fp)
   4167c:	00496680 	call	49668 <__sprint_r>
   41680:	1003b41e 	bne	r2,zero,42554 <___vfprintf_internal_r+0x1f60>
   41684:	e47fcb04 	addi	r17,fp,-212
   41688:	843ffc04 	addi	r16,r16,-16
   4168c:	80800448 	cmpgei	r2,r16,17
   41690:	103fe71e 	bne	r2,zero,41630 <_gp+0xfffe48d4>
   41694:	00800174 	movhi	r2,5
   41698:	108abb84 	addi	r2,r2,10990
   4169c:	88800015 	stw	r2,0(r17)
   416a0:	8005883a 	mov	r2,r16
   416a4:	88800115 	stw	r2,4(r17)
   416a8:	e0bfca17 	ldw	r2,-216(fp)
   416ac:	8007883a 	mov	r3,r16
   416b0:	10c5883a 	add	r2,r2,r3
   416b4:	e0bfca15 	stw	r2,-216(fp)
   416b8:	8c400204 	addi	r17,r17,8
   416bc:	e0bfc917 	ldw	r2,-220(fp)
   416c0:	10800044 	addi	r2,r2,1
   416c4:	e0bfc915 	stw	r2,-220(fp)
   416c8:	e0bfc917 	ldw	r2,-220(fp)
   416cc:	10800210 	cmplti	r2,r2,8
   416d0:	1000071e 	bne	r2,zero,416f0 <___vfprintf_internal_r+0x10fc>
   416d4:	e0bfc804 	addi	r2,fp,-224
   416d8:	100d883a 	mov	r6,r2
   416dc:	e17fe717 	ldw	r5,-100(fp)
   416e0:	e13fe617 	ldw	r4,-104(fp)
   416e4:	00496680 	call	49668 <__sprint_r>
   416e8:	10039c1e 	bne	r2,zero,4255c <___vfprintf_internal_r+0x1f68>
   416ec:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
   416f0:	e0bfc103 	ldbu	r2,-252(fp)
   416f4:	10803fcc 	andi	r2,r2,255
   416f8:	1080201c 	xori	r2,r2,128
   416fc:	10bfe004 	addi	r2,r2,-128
   41700:	10001526 	beq	r2,zero,41758 <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
   41704:	e0bfc104 	addi	r2,fp,-252
   41708:	88800015 	stw	r2,0(r17)
   4170c:	00800044 	movi	r2,1
   41710:	88800115 	stw	r2,4(r17)
   41714:	e0bfca17 	ldw	r2,-216(fp)
   41718:	10800044 	addi	r2,r2,1
   4171c:	e0bfca15 	stw	r2,-216(fp)
   41720:	8c400204 	addi	r17,r17,8
   41724:	e0bfc917 	ldw	r2,-220(fp)
   41728:	10800044 	addi	r2,r2,1
   4172c:	e0bfc915 	stw	r2,-220(fp)
   41730:	e0bfc917 	ldw	r2,-220(fp)
   41734:	10800210 	cmplti	r2,r2,8
   41738:	1000071e 	bne	r2,zero,41758 <___vfprintf_internal_r+0x1164>
   4173c:	e0bfc804 	addi	r2,fp,-224
   41740:	100d883a 	mov	r6,r2
   41744:	e17fe717 	ldw	r5,-100(fp)
   41748:	e13fe617 	ldw	r4,-104(fp)
   4174c:	00496680 	call	49668 <__sprint_r>
   41750:	1003841e 	bne	r2,zero,42564 <___vfprintf_internal_r+0x1f70>
   41754:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
   41758:	9880008c 	andi	r2,r19,2
   4175c:	10001526 	beq	r2,zero,417b4 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
   41760:	e0bfe504 	addi	r2,fp,-108
   41764:	88800015 	stw	r2,0(r17)
   41768:	00800084 	movi	r2,2
   4176c:	88800115 	stw	r2,4(r17)
   41770:	e0bfca17 	ldw	r2,-216(fp)
   41774:	10800084 	addi	r2,r2,2
   41778:	e0bfca15 	stw	r2,-216(fp)
   4177c:	8c400204 	addi	r17,r17,8
   41780:	e0bfc917 	ldw	r2,-220(fp)
   41784:	10800044 	addi	r2,r2,1
   41788:	e0bfc915 	stw	r2,-220(fp)
   4178c:	e0bfc917 	ldw	r2,-220(fp)
   41790:	10800210 	cmplti	r2,r2,8
   41794:	1000071e 	bne	r2,zero,417b4 <___vfprintf_internal_r+0x11c0>
   41798:	e0bfc804 	addi	r2,fp,-224
   4179c:	100d883a 	mov	r6,r2
   417a0:	e17fe717 	ldw	r5,-100(fp)
   417a4:	e13fe617 	ldw	r4,-104(fp)
   417a8:	00496680 	call	49668 <__sprint_r>
   417ac:	10036f1e 	bne	r2,zero,4256c <___vfprintf_internal_r+0x1f78>
   417b0:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   417b4:	9880210c 	andi	r2,r19,132
   417b8:	10802018 	cmpnei	r2,r2,128
   417bc:	1000351e 	bne	r2,zero,41894 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
   417c0:	e0ffad17 	ldw	r3,-332(fp)
   417c4:	e0bfb517 	ldw	r2,-300(fp)
   417c8:	18a1c83a 	sub	r16,r3,r2
   417cc:	0400310e 	bge	zero,r16,41894 <___vfprintf_internal_r+0x12a0>
   417d0:	00001706 	br	41830 <___vfprintf_internal_r+0x123c>
   417d4:	00800174 	movhi	r2,5
   417d8:	108abf84 	addi	r2,r2,11006
   417dc:	88800015 	stw	r2,0(r17)
   417e0:	00800404 	movi	r2,16
   417e4:	88800115 	stw	r2,4(r17)
   417e8:	e0bfca17 	ldw	r2,-216(fp)
   417ec:	10800404 	addi	r2,r2,16
   417f0:	e0bfca15 	stw	r2,-216(fp)
   417f4:	8c400204 	addi	r17,r17,8
   417f8:	e0bfc917 	ldw	r2,-220(fp)
   417fc:	10800044 	addi	r2,r2,1
   41800:	e0bfc915 	stw	r2,-220(fp)
   41804:	e0bfc917 	ldw	r2,-220(fp)
   41808:	10800210 	cmplti	r2,r2,8
   4180c:	1000071e 	bne	r2,zero,4182c <___vfprintf_internal_r+0x1238>
   41810:	e0bfc804 	addi	r2,fp,-224
   41814:	100d883a 	mov	r6,r2
   41818:	e17fe717 	ldw	r5,-100(fp)
   4181c:	e13fe617 	ldw	r4,-104(fp)
   41820:	00496680 	call	49668 <__sprint_r>
   41824:	1003531e 	bne	r2,zero,42574 <___vfprintf_internal_r+0x1f80>
   41828:	e47fcb04 	addi	r17,fp,-212
   4182c:	843ffc04 	addi	r16,r16,-16
   41830:	80800448 	cmpgei	r2,r16,17
   41834:	103fe71e 	bne	r2,zero,417d4 <_gp+0xfffe4a78>
   41838:	00800174 	movhi	r2,5
   4183c:	108abf84 	addi	r2,r2,11006
   41840:	88800015 	stw	r2,0(r17)
   41844:	8005883a 	mov	r2,r16
   41848:	88800115 	stw	r2,4(r17)
   4184c:	e0bfca17 	ldw	r2,-216(fp)
   41850:	8007883a 	mov	r3,r16
   41854:	10c5883a 	add	r2,r2,r3
   41858:	e0bfca15 	stw	r2,-216(fp)
   4185c:	8c400204 	addi	r17,r17,8
   41860:	e0bfc917 	ldw	r2,-220(fp)
   41864:	10800044 	addi	r2,r2,1
   41868:	e0bfc915 	stw	r2,-220(fp)
   4186c:	e0bfc917 	ldw	r2,-220(fp)
   41870:	10800210 	cmplti	r2,r2,8
   41874:	1000071e 	bne	r2,zero,41894 <___vfprintf_internal_r+0x12a0>
   41878:	e0bfc804 	addi	r2,fp,-224
   4187c:	100d883a 	mov	r6,r2
   41880:	e17fe717 	ldw	r5,-100(fp)
   41884:	e13fe617 	ldw	r4,-104(fp)
   41888:	00496680 	call	49668 <__sprint_r>
   4188c:	10033b1e 	bne	r2,zero,4257c <___vfprintf_internal_r+0x1f88>
   41890:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   41894:	e0ffb417 	ldw	r3,-304(fp)
   41898:	e0bfb617 	ldw	r2,-296(fp)
   4189c:	18a1c83a 	sub	r16,r3,r2
   418a0:	0400310e 	bge	zero,r16,41968 <___vfprintf_internal_r+0x1374>
   418a4:	00001706 	br	41904 <___vfprintf_internal_r+0x1310>
   418a8:	00800174 	movhi	r2,5
   418ac:	108abf84 	addi	r2,r2,11006
   418b0:	88800015 	stw	r2,0(r17)
   418b4:	00800404 	movi	r2,16
   418b8:	88800115 	stw	r2,4(r17)
   418bc:	e0bfca17 	ldw	r2,-216(fp)
   418c0:	10800404 	addi	r2,r2,16
   418c4:	e0bfca15 	stw	r2,-216(fp)
   418c8:	8c400204 	addi	r17,r17,8
   418cc:	e0bfc917 	ldw	r2,-220(fp)
   418d0:	10800044 	addi	r2,r2,1
   418d4:	e0bfc915 	stw	r2,-220(fp)
   418d8:	e0bfc917 	ldw	r2,-220(fp)
   418dc:	10800210 	cmplti	r2,r2,8
   418e0:	1000071e 	bne	r2,zero,41900 <___vfprintf_internal_r+0x130c>
   418e4:	e0bfc804 	addi	r2,fp,-224
   418e8:	100d883a 	mov	r6,r2
   418ec:	e17fe717 	ldw	r5,-100(fp)
   418f0:	e13fe617 	ldw	r4,-104(fp)
   418f4:	00496680 	call	49668 <__sprint_r>
   418f8:	1003221e 	bne	r2,zero,42584 <___vfprintf_internal_r+0x1f90>
   418fc:	e47fcb04 	addi	r17,fp,-212
   41900:	843ffc04 	addi	r16,r16,-16
   41904:	80800448 	cmpgei	r2,r16,17
   41908:	103fe71e 	bne	r2,zero,418a8 <_gp+0xfffe4b4c>
   4190c:	00800174 	movhi	r2,5
   41910:	108abf84 	addi	r2,r2,11006
   41914:	88800015 	stw	r2,0(r17)
   41918:	8005883a 	mov	r2,r16
   4191c:	88800115 	stw	r2,4(r17)
   41920:	e0bfca17 	ldw	r2,-216(fp)
   41924:	8007883a 	mov	r3,r16
   41928:	10c5883a 	add	r2,r2,r3
   4192c:	e0bfca15 	stw	r2,-216(fp)
   41930:	8c400204 	addi	r17,r17,8
   41934:	e0bfc917 	ldw	r2,-220(fp)
   41938:	10800044 	addi	r2,r2,1
   4193c:	e0bfc915 	stw	r2,-220(fp)
   41940:	e0bfc917 	ldw	r2,-220(fp)
   41944:	10800210 	cmplti	r2,r2,8
   41948:	1000071e 	bne	r2,zero,41968 <___vfprintf_internal_r+0x1374>
   4194c:	e0bfc804 	addi	r2,fp,-224
   41950:	100d883a 	mov	r6,r2
   41954:	e17fe717 	ldw	r5,-100(fp)
   41958:	e13fe617 	ldw	r4,-104(fp)
   4195c:	00496680 	call	49668 <__sprint_r>
   41960:	10030a1e 	bne	r2,zero,4258c <___vfprintf_internal_r+0x1f98>
   41964:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   41968:	9880400c 	andi	r2,r19,256
   4196c:	1000161e 	bne	r2,zero,419c8 <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
   41970:	8c800015 	stw	r18,0(r17)
   41974:	e0bfb617 	ldw	r2,-296(fp)
   41978:	88800115 	stw	r2,4(r17)
   4197c:	e0ffca17 	ldw	r3,-216(fp)
   41980:	e0bfb617 	ldw	r2,-296(fp)
   41984:	1885883a 	add	r2,r3,r2
   41988:	e0bfca15 	stw	r2,-216(fp)
   4198c:	8c400204 	addi	r17,r17,8
   41990:	e0bfc917 	ldw	r2,-220(fp)
   41994:	10800044 	addi	r2,r2,1
   41998:	e0bfc915 	stw	r2,-220(fp)
   4199c:	e0bfc917 	ldw	r2,-220(fp)
   419a0:	10800210 	cmplti	r2,r2,8
   419a4:	10028c1e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
   419a8:	e0bfc804 	addi	r2,fp,-224
   419ac:	100d883a 	mov	r6,r2
   419b0:	e17fe717 	ldw	r5,-100(fp)
   419b4:	e13fe617 	ldw	r4,-104(fp)
   419b8:	00496680 	call	49668 <__sprint_r>
   419bc:	1002f51e 	bne	r2,zero,42594 <___vfprintf_internal_r+0x1fa0>
   419c0:	e47fcb04 	addi	r17,fp,-212
   419c4:	00028406 	br	423d8 <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
   419c8:	a0801990 	cmplti	r2,r20,102
   419cc:	1001d11e 	bne	r2,zero,42114 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
   419d0:	e0bfc217 	ldw	r2,-248(fp)
   419d4:	e0ffc317 	ldw	r3,-244(fp)
   419d8:	000d883a 	mov	r6,zero
   419dc:	000f883a 	mov	r7,zero
   419e0:	1009883a 	mov	r4,r2
   419e4:	180b883a 	mov	r5,r3
   419e8:	004ec0c0 	call	4ec0c <__eqdf2>
   419ec:	1000661e 	bne	r2,zero,41b88 <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   419f0:	00800174 	movhi	r2,5
   419f4:	108abb04 	addi	r2,r2,10988
   419f8:	88800015 	stw	r2,0(r17)
   419fc:	00800044 	movi	r2,1
   41a00:	88800115 	stw	r2,4(r17)
   41a04:	e0bfca17 	ldw	r2,-216(fp)
   41a08:	10800044 	addi	r2,r2,1
   41a0c:	e0bfca15 	stw	r2,-216(fp)
   41a10:	8c400204 	addi	r17,r17,8
   41a14:	e0bfc917 	ldw	r2,-220(fp)
   41a18:	10800044 	addi	r2,r2,1
   41a1c:	e0bfc915 	stw	r2,-220(fp)
   41a20:	e0bfc917 	ldw	r2,-220(fp)
   41a24:	10800210 	cmplti	r2,r2,8
   41a28:	1000071e 	bne	r2,zero,41a48 <___vfprintf_internal_r+0x1454>
   41a2c:	e0bfc804 	addi	r2,fp,-224
   41a30:	100d883a 	mov	r6,r2
   41a34:	e17fe717 	ldw	r5,-100(fp)
   41a38:	e13fe617 	ldw	r4,-104(fp)
   41a3c:	00496680 	call	49668 <__sprint_r>
   41a40:	1002d61e 	bne	r2,zero,4259c <___vfprintf_internal_r+0x1fa8>
   41a44:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
   41a48:	e0ffc417 	ldw	r3,-240(fp)
   41a4c:	e0bfc717 	ldw	r2,-228(fp)
   41a50:	18800216 	blt	r3,r2,41a5c <___vfprintf_internal_r+0x1468>
   41a54:	9880004c 	andi	r2,r19,1
   41a58:	10025f26 	beq	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   41a5c:	e0bfbb17 	ldw	r2,-276(fp)
   41a60:	88800015 	stw	r2,0(r17)
   41a64:	e0bfbc17 	ldw	r2,-272(fp)
   41a68:	88800115 	stw	r2,4(r17)
   41a6c:	e0ffca17 	ldw	r3,-216(fp)
   41a70:	e0bfbc17 	ldw	r2,-272(fp)
   41a74:	1885883a 	add	r2,r3,r2
   41a78:	e0bfca15 	stw	r2,-216(fp)
   41a7c:	8c400204 	addi	r17,r17,8
   41a80:	e0bfc917 	ldw	r2,-220(fp)
   41a84:	10800044 	addi	r2,r2,1
   41a88:	e0bfc915 	stw	r2,-220(fp)
   41a8c:	e0bfc917 	ldw	r2,-220(fp)
   41a90:	10800210 	cmplti	r2,r2,8
   41a94:	1000071e 	bne	r2,zero,41ab4 <___vfprintf_internal_r+0x14c0>
   41a98:	e0bfc804 	addi	r2,fp,-224
   41a9c:	100d883a 	mov	r6,r2
   41aa0:	e17fe717 	ldw	r5,-100(fp)
   41aa4:	e13fe617 	ldw	r4,-104(fp)
   41aa8:	00496680 	call	49668 <__sprint_r>
   41aac:	1002bd1e 	bne	r2,zero,425a4 <___vfprintf_internal_r+0x1fb0>
   41ab0:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
   41ab4:	e0bfc717 	ldw	r2,-228(fp)
   41ab8:	143fffc4 	addi	r16,r2,-1
   41abc:	0402460e 	bge	zero,r16,423d8 <___vfprintf_internal_r+0x1de4>
   41ac0:	00001706 	br	41b20 <___vfprintf_internal_r+0x152c>
   41ac4:	00800174 	movhi	r2,5
   41ac8:	108abf84 	addi	r2,r2,11006
   41acc:	88800015 	stw	r2,0(r17)
   41ad0:	00800404 	movi	r2,16
   41ad4:	88800115 	stw	r2,4(r17)
   41ad8:	e0bfca17 	ldw	r2,-216(fp)
   41adc:	10800404 	addi	r2,r2,16
   41ae0:	e0bfca15 	stw	r2,-216(fp)
   41ae4:	8c400204 	addi	r17,r17,8
   41ae8:	e0bfc917 	ldw	r2,-220(fp)
   41aec:	10800044 	addi	r2,r2,1
   41af0:	e0bfc915 	stw	r2,-220(fp)
   41af4:	e0bfc917 	ldw	r2,-220(fp)
   41af8:	10800210 	cmplti	r2,r2,8
   41afc:	1000071e 	bne	r2,zero,41b1c <___vfprintf_internal_r+0x1528>
   41b00:	e0bfc804 	addi	r2,fp,-224
   41b04:	100d883a 	mov	r6,r2
   41b08:	e17fe717 	ldw	r5,-100(fp)
   41b0c:	e13fe617 	ldw	r4,-104(fp)
   41b10:	00496680 	call	49668 <__sprint_r>
   41b14:	1002a51e 	bne	r2,zero,425ac <___vfprintf_internal_r+0x1fb8>
   41b18:	e47fcb04 	addi	r17,fp,-212
   41b1c:	843ffc04 	addi	r16,r16,-16
   41b20:	80800448 	cmpgei	r2,r16,17
   41b24:	103fe71e 	bne	r2,zero,41ac4 <_gp+0xfffe4d68>
   41b28:	00800174 	movhi	r2,5
   41b2c:	108abf84 	addi	r2,r2,11006
   41b30:	88800015 	stw	r2,0(r17)
   41b34:	8005883a 	mov	r2,r16
   41b38:	88800115 	stw	r2,4(r17)
   41b3c:	e0bfca17 	ldw	r2,-216(fp)
   41b40:	8007883a 	mov	r3,r16
   41b44:	10c5883a 	add	r2,r2,r3
   41b48:	e0bfca15 	stw	r2,-216(fp)
   41b4c:	8c400204 	addi	r17,r17,8
   41b50:	e0bfc917 	ldw	r2,-220(fp)
   41b54:	10800044 	addi	r2,r2,1
   41b58:	e0bfc915 	stw	r2,-220(fp)
   41b5c:	e0bfc917 	ldw	r2,-220(fp)
   41b60:	10800210 	cmplti	r2,r2,8
   41b64:	10021c1e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
   41b68:	e0bfc804 	addi	r2,fp,-224
   41b6c:	100d883a 	mov	r6,r2
   41b70:	e17fe717 	ldw	r5,-100(fp)
   41b74:	e13fe617 	ldw	r4,-104(fp)
   41b78:	00496680 	call	49668 <__sprint_r>
   41b7c:	10028d1e 	bne	r2,zero,425b4 <___vfprintf_internal_r+0x1fc0>
   41b80:	e47fcb04 	addi	r17,fp,-212
   41b84:	00021406 	br	423d8 <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
   41b88:	e0bfc417 	ldw	r2,-240(fp)
   41b8c:	00807c16 	blt	zero,r2,41d80 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
   41b90:	00800174 	movhi	r2,5
   41b94:	108abb04 	addi	r2,r2,10988
   41b98:	88800015 	stw	r2,0(r17)
   41b9c:	00800044 	movi	r2,1
   41ba0:	88800115 	stw	r2,4(r17)
   41ba4:	e0bfca17 	ldw	r2,-216(fp)
   41ba8:	10800044 	addi	r2,r2,1
   41bac:	e0bfca15 	stw	r2,-216(fp)
   41bb0:	8c400204 	addi	r17,r17,8
   41bb4:	e0bfc917 	ldw	r2,-220(fp)
   41bb8:	10800044 	addi	r2,r2,1
   41bbc:	e0bfc915 	stw	r2,-220(fp)
   41bc0:	e0bfc917 	ldw	r2,-220(fp)
   41bc4:	10800210 	cmplti	r2,r2,8
   41bc8:	1000071e 	bne	r2,zero,41be8 <___vfprintf_internal_r+0x15f4>
   41bcc:	e0bfc804 	addi	r2,fp,-224
   41bd0:	100d883a 	mov	r6,r2
   41bd4:	e17fe717 	ldw	r5,-100(fp)
   41bd8:	e13fe617 	ldw	r4,-104(fp)
   41bdc:	00496680 	call	49668 <__sprint_r>
   41be0:	1002761e 	bne	r2,zero,425bc <___vfprintf_internal_r+0x1fc8>
   41be4:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
   41be8:	e0bfc417 	ldw	r2,-240(fp)
   41bec:	1000041e 	bne	r2,zero,41c00 <___vfprintf_internal_r+0x160c>
   41bf0:	e0bfc717 	ldw	r2,-228(fp)
   41bf4:	1000021e 	bne	r2,zero,41c00 <___vfprintf_internal_r+0x160c>
   41bf8:	9880004c 	andi	r2,r19,1
   41bfc:	1001f626 	beq	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   41c00:	e0bfbb17 	ldw	r2,-276(fp)
   41c04:	88800015 	stw	r2,0(r17)
   41c08:	e0bfbc17 	ldw	r2,-272(fp)
   41c0c:	88800115 	stw	r2,4(r17)
   41c10:	e0ffca17 	ldw	r3,-216(fp)
   41c14:	e0bfbc17 	ldw	r2,-272(fp)
   41c18:	1885883a 	add	r2,r3,r2
   41c1c:	e0bfca15 	stw	r2,-216(fp)
   41c20:	8c400204 	addi	r17,r17,8
   41c24:	e0bfc917 	ldw	r2,-220(fp)
   41c28:	10800044 	addi	r2,r2,1
   41c2c:	e0bfc915 	stw	r2,-220(fp)
   41c30:	e0bfc917 	ldw	r2,-220(fp)
   41c34:	10800210 	cmplti	r2,r2,8
   41c38:	1000071e 	bne	r2,zero,41c58 <___vfprintf_internal_r+0x1664>
   41c3c:	e0bfc804 	addi	r2,fp,-224
   41c40:	100d883a 	mov	r6,r2
   41c44:	e17fe717 	ldw	r5,-100(fp)
   41c48:	e13fe617 	ldw	r4,-104(fp)
   41c4c:	00496680 	call	49668 <__sprint_r>
   41c50:	10025c1e 	bne	r2,zero,425c4 <___vfprintf_internal_r+0x1fd0>
   41c54:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
   41c58:	e0bfc417 	ldw	r2,-240(fp)
   41c5c:	00a1c83a 	sub	r16,zero,r2
   41c60:	0400310e 	bge	zero,r16,41d28 <___vfprintf_internal_r+0x1734>
   41c64:	00001706 	br	41cc4 <___vfprintf_internal_r+0x16d0>
   41c68:	00800174 	movhi	r2,5
   41c6c:	108abf84 	addi	r2,r2,11006
   41c70:	88800015 	stw	r2,0(r17)
   41c74:	00800404 	movi	r2,16
   41c78:	88800115 	stw	r2,4(r17)
   41c7c:	e0bfca17 	ldw	r2,-216(fp)
   41c80:	10800404 	addi	r2,r2,16
   41c84:	e0bfca15 	stw	r2,-216(fp)
   41c88:	8c400204 	addi	r17,r17,8
   41c8c:	e0bfc917 	ldw	r2,-220(fp)
   41c90:	10800044 	addi	r2,r2,1
   41c94:	e0bfc915 	stw	r2,-220(fp)
   41c98:	e0bfc917 	ldw	r2,-220(fp)
   41c9c:	10800210 	cmplti	r2,r2,8
   41ca0:	1000071e 	bne	r2,zero,41cc0 <___vfprintf_internal_r+0x16cc>
   41ca4:	e0bfc804 	addi	r2,fp,-224
   41ca8:	100d883a 	mov	r6,r2
   41cac:	e17fe717 	ldw	r5,-100(fp)
   41cb0:	e13fe617 	ldw	r4,-104(fp)
   41cb4:	00496680 	call	49668 <__sprint_r>
   41cb8:	1002441e 	bne	r2,zero,425cc <___vfprintf_internal_r+0x1fd8>
   41cbc:	e47fcb04 	addi	r17,fp,-212
   41cc0:	843ffc04 	addi	r16,r16,-16
   41cc4:	80800448 	cmpgei	r2,r16,17
   41cc8:	103fe71e 	bne	r2,zero,41c68 <_gp+0xfffe4f0c>
   41ccc:	00800174 	movhi	r2,5
   41cd0:	108abf84 	addi	r2,r2,11006
   41cd4:	88800015 	stw	r2,0(r17)
   41cd8:	8005883a 	mov	r2,r16
   41cdc:	88800115 	stw	r2,4(r17)
   41ce0:	e0bfca17 	ldw	r2,-216(fp)
   41ce4:	8007883a 	mov	r3,r16
   41ce8:	10c5883a 	add	r2,r2,r3
   41cec:	e0bfca15 	stw	r2,-216(fp)
   41cf0:	8c400204 	addi	r17,r17,8
   41cf4:	e0bfc917 	ldw	r2,-220(fp)
   41cf8:	10800044 	addi	r2,r2,1
   41cfc:	e0bfc915 	stw	r2,-220(fp)
   41d00:	e0bfc917 	ldw	r2,-220(fp)
   41d04:	10800210 	cmplti	r2,r2,8
   41d08:	1000071e 	bne	r2,zero,41d28 <___vfprintf_internal_r+0x1734>
   41d0c:	e0bfc804 	addi	r2,fp,-224
   41d10:	100d883a 	mov	r6,r2
   41d14:	e17fe717 	ldw	r5,-100(fp)
   41d18:	e13fe617 	ldw	r4,-104(fp)
   41d1c:	00496680 	call	49668 <__sprint_r>
   41d20:	10022c1e 	bne	r2,zero,425d4 <___vfprintf_internal_r+0x1fe0>
   41d24:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
   41d28:	8c800015 	stw	r18,0(r17)
   41d2c:	e0bfc717 	ldw	r2,-228(fp)
   41d30:	88800115 	stw	r2,4(r17)
   41d34:	e0bfca17 	ldw	r2,-216(fp)
   41d38:	e0ffc717 	ldw	r3,-228(fp)
   41d3c:	10c5883a 	add	r2,r2,r3
   41d40:	e0bfca15 	stw	r2,-216(fp)
   41d44:	8c400204 	addi	r17,r17,8
   41d48:	e0bfc917 	ldw	r2,-220(fp)
   41d4c:	10800044 	addi	r2,r2,1
   41d50:	e0bfc915 	stw	r2,-220(fp)
   41d54:	e0bfc917 	ldw	r2,-220(fp)
   41d58:	10800210 	cmplti	r2,r2,8
   41d5c:	10019e1e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
   41d60:	e0bfc804 	addi	r2,fp,-224
   41d64:	100d883a 	mov	r6,r2
   41d68:	e17fe717 	ldw	r5,-100(fp)
   41d6c:	e13fe617 	ldw	r4,-104(fp)
   41d70:	00496680 	call	49668 <__sprint_r>
   41d74:	1002191e 	bne	r2,zero,425dc <___vfprintf_internal_r+0x1fe8>
   41d78:	e47fcb04 	addi	r17,fp,-212
   41d7c:	00019606 	br	423d8 <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
   41d80:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
   41d84:	e0bfc717 	ldw	r2,-228(fp)
   41d88:	1007883a 	mov	r3,r2
   41d8c:	e0bfc017 	ldw	r2,-256(fp)
   41d90:	10c5883a 	add	r2,r2,r3
   41d94:	1007883a 	mov	r3,r2
   41d98:	9005883a 	mov	r2,r18
   41d9c:	1885c83a 	sub	r2,r3,r2
   41da0:	e0bfb915 	stw	r2,-284(fp)
   41da4:	e0bfb917 	ldw	r2,-284(fp)
   41da8:	e0ffb017 	ldw	r3,-320(fp)
   41dac:	1880020e 	bge	r3,r2,41db8 <___vfprintf_internal_r+0x17c4>
   41db0:	e0bfb017 	ldw	r2,-320(fp)
   41db4:	e0bfb915 	stw	r2,-284(fp)
   41db8:	e0bfb917 	ldw	r2,-284(fp)
   41dbc:	0080150e 	bge	zero,r2,41e14 <___vfprintf_internal_r+0x1820>
   41dc0:	8c800015 	stw	r18,0(r17)
   41dc4:	e0bfb917 	ldw	r2,-284(fp)
   41dc8:	88800115 	stw	r2,4(r17)
   41dcc:	e0ffca17 	ldw	r3,-216(fp)
   41dd0:	e0bfb917 	ldw	r2,-284(fp)
   41dd4:	1885883a 	add	r2,r3,r2
   41dd8:	e0bfca15 	stw	r2,-216(fp)
   41ddc:	8c400204 	addi	r17,r17,8
   41de0:	e0bfc917 	ldw	r2,-220(fp)
   41de4:	10800044 	addi	r2,r2,1
   41de8:	e0bfc915 	stw	r2,-220(fp)
   41dec:	e0bfc917 	ldw	r2,-220(fp)
   41df0:	10800210 	cmplti	r2,r2,8
   41df4:	1000071e 	bne	r2,zero,41e14 <___vfprintf_internal_r+0x1820>
   41df8:	e0bfc804 	addi	r2,fp,-224
   41dfc:	100d883a 	mov	r6,r2
   41e00:	e17fe717 	ldw	r5,-100(fp)
   41e04:	e13fe617 	ldw	r4,-104(fp)
   41e08:	00496680 	call	49668 <__sprint_r>
   41e0c:	1001f51e 	bne	r2,zero,425e4 <___vfprintf_internal_r+0x1ff0>
   41e10:	e47fcb04 	addi	r17,fp,-212
   41e14:	e0bfb917 	ldw	r2,-284(fp)
   41e18:	1000010e 	bge	r2,zero,41e20 <___vfprintf_internal_r+0x182c>
   41e1c:	0005883a 	mov	r2,zero
   41e20:	e0ffb017 	ldw	r3,-320(fp)
   41e24:	1885c83a 	sub	r2,r3,r2
   41e28:	e0bfb915 	stw	r2,-284(fp)
   41e2c:	e0bfb917 	ldw	r2,-284(fp)
   41e30:	0080340e 	bge	zero,r2,41f04 <___vfprintf_internal_r+0x1910>
   41e34:	00001906 	br	41e9c <___vfprintf_internal_r+0x18a8>
   41e38:	00800174 	movhi	r2,5
   41e3c:	108abf84 	addi	r2,r2,11006
   41e40:	88800015 	stw	r2,0(r17)
   41e44:	00800404 	movi	r2,16
   41e48:	88800115 	stw	r2,4(r17)
   41e4c:	e0bfca17 	ldw	r2,-216(fp)
   41e50:	10800404 	addi	r2,r2,16
   41e54:	e0bfca15 	stw	r2,-216(fp)
   41e58:	8c400204 	addi	r17,r17,8
   41e5c:	e0bfc917 	ldw	r2,-220(fp)
   41e60:	10800044 	addi	r2,r2,1
   41e64:	e0bfc915 	stw	r2,-220(fp)
   41e68:	e0bfc917 	ldw	r2,-220(fp)
   41e6c:	10800210 	cmplti	r2,r2,8
   41e70:	1000071e 	bne	r2,zero,41e90 <___vfprintf_internal_r+0x189c>
   41e74:	e0bfc804 	addi	r2,fp,-224
   41e78:	100d883a 	mov	r6,r2
   41e7c:	e17fe717 	ldw	r5,-100(fp)
   41e80:	e13fe617 	ldw	r4,-104(fp)
   41e84:	00496680 	call	49668 <__sprint_r>
   41e88:	1001d81e 	bne	r2,zero,425ec <___vfprintf_internal_r+0x1ff8>
   41e8c:	e47fcb04 	addi	r17,fp,-212
   41e90:	e0bfb917 	ldw	r2,-284(fp)
   41e94:	10bffc04 	addi	r2,r2,-16
   41e98:	e0bfb915 	stw	r2,-284(fp)
   41e9c:	e0bfb917 	ldw	r2,-284(fp)
   41ea0:	10800448 	cmpgei	r2,r2,17
   41ea4:	103fe41e 	bne	r2,zero,41e38 <_gp+0xfffe50dc>
   41ea8:	00800174 	movhi	r2,5
   41eac:	108abf84 	addi	r2,r2,11006
   41eb0:	88800015 	stw	r2,0(r17)
   41eb4:	e0bfb917 	ldw	r2,-284(fp)
   41eb8:	88800115 	stw	r2,4(r17)
   41ebc:	e0ffca17 	ldw	r3,-216(fp)
   41ec0:	e0bfb917 	ldw	r2,-284(fp)
   41ec4:	1885883a 	add	r2,r3,r2
   41ec8:	e0bfca15 	stw	r2,-216(fp)
   41ecc:	8c400204 	addi	r17,r17,8
   41ed0:	e0bfc917 	ldw	r2,-220(fp)
   41ed4:	10800044 	addi	r2,r2,1
   41ed8:	e0bfc915 	stw	r2,-220(fp)
   41edc:	e0bfc917 	ldw	r2,-220(fp)
   41ee0:	10800210 	cmplti	r2,r2,8
   41ee4:	1000071e 	bne	r2,zero,41f04 <___vfprintf_internal_r+0x1910>
   41ee8:	e0bfc804 	addi	r2,fp,-224
   41eec:	100d883a 	mov	r6,r2
   41ef0:	e17fe717 	ldw	r5,-100(fp)
   41ef4:	e13fe617 	ldw	r4,-104(fp)
   41ef8:	00496680 	call	49668 <__sprint_r>
   41efc:	1001bd1e 	bne	r2,zero,425f4 <___vfprintf_internal_r+0x2000>
   41f00:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
   41f04:	e0bfb017 	ldw	r2,-320(fp)
   41f08:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
   41f0c:	e0ffc417 	ldw	r3,-240(fp)
   41f10:	e0bfc717 	ldw	r2,-228(fp)
   41f14:	18800216 	blt	r3,r2,41f20 <___vfprintf_internal_r+0x192c>
   41f18:	9880004c 	andi	r2,r19,1
   41f1c:	10001626 	beq	r2,zero,41f78 <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
   41f20:	e0bfbb17 	ldw	r2,-276(fp)
   41f24:	88800015 	stw	r2,0(r17)
   41f28:	e0bfbc17 	ldw	r2,-272(fp)
   41f2c:	88800115 	stw	r2,4(r17)
   41f30:	e0ffca17 	ldw	r3,-216(fp)
   41f34:	e0bfbc17 	ldw	r2,-272(fp)
   41f38:	1885883a 	add	r2,r3,r2
   41f3c:	e0bfca15 	stw	r2,-216(fp)
   41f40:	8c400204 	addi	r17,r17,8
   41f44:	e0bfc917 	ldw	r2,-220(fp)
   41f48:	10800044 	addi	r2,r2,1
   41f4c:	e0bfc915 	stw	r2,-220(fp)
   41f50:	e0bfc917 	ldw	r2,-220(fp)
   41f54:	10800210 	cmplti	r2,r2,8
   41f58:	1000071e 	bne	r2,zero,41f78 <___vfprintf_internal_r+0x1984>
   41f5c:	e0bfc804 	addi	r2,fp,-224
   41f60:	100d883a 	mov	r6,r2
   41f64:	e17fe717 	ldw	r5,-100(fp)
   41f68:	e13fe617 	ldw	r4,-104(fp)
   41f6c:	00496680 	call	49668 <__sprint_r>
   41f70:	1001a21e 	bne	r2,zero,425fc <___vfprintf_internal_r+0x2008>
   41f74:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
   41f78:	e0bfc717 	ldw	r2,-228(fp)
   41f7c:	1007883a 	mov	r3,r2
   41f80:	e0bfc017 	ldw	r2,-256(fp)
   41f84:	10c5883a 	add	r2,r2,r3
   41f88:	1007883a 	mov	r3,r2
   41f8c:	9005883a 	mov	r2,r18
   41f90:	1885c83a 	sub	r2,r3,r2
   41f94:	e0bfba15 	stw	r2,-280(fp)
   41f98:	e0ffc717 	ldw	r3,-228(fp)
   41f9c:	e0bfc417 	ldw	r2,-240(fp)
   41fa0:	1887c83a 	sub	r3,r3,r2
   41fa4:	e0bfba17 	ldw	r2,-280(fp)
   41fa8:	1880040e 	bge	r3,r2,41fbc <___vfprintf_internal_r+0x19c8>
   41fac:	e0ffc717 	ldw	r3,-228(fp)
   41fb0:	e0bfc417 	ldw	r2,-240(fp)
   41fb4:	1885c83a 	sub	r2,r3,r2
   41fb8:	e0bfba15 	stw	r2,-280(fp)
   41fbc:	e0bfba17 	ldw	r2,-280(fp)
   41fc0:	0080150e 	bge	zero,r2,42018 <___vfprintf_internal_r+0x1a24>
   41fc4:	8c800015 	stw	r18,0(r17)
   41fc8:	e0bfba17 	ldw	r2,-280(fp)
   41fcc:	88800115 	stw	r2,4(r17)
   41fd0:	e0ffca17 	ldw	r3,-216(fp)
   41fd4:	e0bfba17 	ldw	r2,-280(fp)
   41fd8:	1885883a 	add	r2,r3,r2
   41fdc:	e0bfca15 	stw	r2,-216(fp)
   41fe0:	8c400204 	addi	r17,r17,8
   41fe4:	e0bfc917 	ldw	r2,-220(fp)
   41fe8:	10800044 	addi	r2,r2,1
   41fec:	e0bfc915 	stw	r2,-220(fp)
   41ff0:	e0bfc917 	ldw	r2,-220(fp)
   41ff4:	10800210 	cmplti	r2,r2,8
   41ff8:	1000071e 	bne	r2,zero,42018 <___vfprintf_internal_r+0x1a24>
   41ffc:	e0bfc804 	addi	r2,fp,-224
   42000:	100d883a 	mov	r6,r2
   42004:	e17fe717 	ldw	r5,-100(fp)
   42008:	e13fe617 	ldw	r4,-104(fp)
   4200c:	00496680 	call	49668 <__sprint_r>
   42010:	10017c1e 	bne	r2,zero,42604 <___vfprintf_internal_r+0x2010>
   42014:	e47fcb04 	addi	r17,fp,-212
   42018:	e0ffc717 	ldw	r3,-228(fp)
   4201c:	e0bfc417 	ldw	r2,-240(fp)
   42020:	1887c83a 	sub	r3,r3,r2
   42024:	e0bfba17 	ldw	r2,-280(fp)
   42028:	1000010e 	bge	r2,zero,42030 <___vfprintf_internal_r+0x1a3c>
   4202c:	0005883a 	mov	r2,zero
   42030:	1885c83a 	sub	r2,r3,r2
   42034:	e0bfba15 	stw	r2,-280(fp)
   42038:	e0bfba17 	ldw	r2,-280(fp)
   4203c:	0080e60e 	bge	zero,r2,423d8 <___vfprintf_internal_r+0x1de4>
   42040:	00001906 	br	420a8 <___vfprintf_internal_r+0x1ab4>
   42044:	00800174 	movhi	r2,5
   42048:	108abf84 	addi	r2,r2,11006
   4204c:	88800015 	stw	r2,0(r17)
   42050:	00800404 	movi	r2,16
   42054:	88800115 	stw	r2,4(r17)
   42058:	e0bfca17 	ldw	r2,-216(fp)
   4205c:	10800404 	addi	r2,r2,16
   42060:	e0bfca15 	stw	r2,-216(fp)
   42064:	8c400204 	addi	r17,r17,8
   42068:	e0bfc917 	ldw	r2,-220(fp)
   4206c:	10800044 	addi	r2,r2,1
   42070:	e0bfc915 	stw	r2,-220(fp)
   42074:	e0bfc917 	ldw	r2,-220(fp)
   42078:	10800210 	cmplti	r2,r2,8
   4207c:	1000071e 	bne	r2,zero,4209c <___vfprintf_internal_r+0x1aa8>
   42080:	e0bfc804 	addi	r2,fp,-224
   42084:	100d883a 	mov	r6,r2
   42088:	e17fe717 	ldw	r5,-100(fp)
   4208c:	e13fe617 	ldw	r4,-104(fp)
   42090:	00496680 	call	49668 <__sprint_r>
   42094:	10015d1e 	bne	r2,zero,4260c <___vfprintf_internal_r+0x2018>
   42098:	e47fcb04 	addi	r17,fp,-212
   4209c:	e0bfba17 	ldw	r2,-280(fp)
   420a0:	10bffc04 	addi	r2,r2,-16
   420a4:	e0bfba15 	stw	r2,-280(fp)
   420a8:	e0bfba17 	ldw	r2,-280(fp)
   420ac:	10800448 	cmpgei	r2,r2,17
   420b0:	103fe41e 	bne	r2,zero,42044 <_gp+0xfffe52e8>
   420b4:	00800174 	movhi	r2,5
   420b8:	108abf84 	addi	r2,r2,11006
   420bc:	88800015 	stw	r2,0(r17)
   420c0:	e0bfba17 	ldw	r2,-280(fp)
   420c4:	88800115 	stw	r2,4(r17)
   420c8:	e0ffca17 	ldw	r3,-216(fp)
   420cc:	e0bfba17 	ldw	r2,-280(fp)
   420d0:	1885883a 	add	r2,r3,r2
   420d4:	e0bfca15 	stw	r2,-216(fp)
   420d8:	8c400204 	addi	r17,r17,8
   420dc:	e0bfc917 	ldw	r2,-220(fp)
   420e0:	10800044 	addi	r2,r2,1
   420e4:	e0bfc915 	stw	r2,-220(fp)
   420e8:	e0bfc917 	ldw	r2,-220(fp)
   420ec:	10800210 	cmplti	r2,r2,8
   420f0:	1000b91e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
   420f4:	e0bfc804 	addi	r2,fp,-224
   420f8:	100d883a 	mov	r6,r2
   420fc:	e17fe717 	ldw	r5,-100(fp)
   42100:	e13fe617 	ldw	r4,-104(fp)
   42104:	00496680 	call	49668 <__sprint_r>
   42108:	1001421e 	bne	r2,zero,42614 <___vfprintf_internal_r+0x2020>
   4210c:	e47fcb04 	addi	r17,fp,-212
   42110:	0000b106 	br	423d8 <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
   42114:	e0bfc717 	ldw	r2,-228(fp)
   42118:	10800088 	cmpgei	r2,r2,2
   4211c:	1000021e 	bne	r2,zero,42128 <___vfprintf_internal_r+0x1b34>
   42120:	9880004c 	andi	r2,r19,1
   42124:	10008026 	beq	r2,zero,42328 <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
   42128:	8c800015 	stw	r18,0(r17)
   4212c:	00800044 	movi	r2,1
   42130:	88800115 	stw	r2,4(r17)
   42134:	e0bfca17 	ldw	r2,-216(fp)
   42138:	10800044 	addi	r2,r2,1
   4213c:	e0bfca15 	stw	r2,-216(fp)
   42140:	8c400204 	addi	r17,r17,8
   42144:	e0bfc917 	ldw	r2,-220(fp)
   42148:	10800044 	addi	r2,r2,1
   4214c:	e0bfc915 	stw	r2,-220(fp)
   42150:	e0bfc917 	ldw	r2,-220(fp)
   42154:	10800210 	cmplti	r2,r2,8
   42158:	1000071e 	bne	r2,zero,42178 <___vfprintf_internal_r+0x1b84>
   4215c:	e0bfc804 	addi	r2,fp,-224
   42160:	100d883a 	mov	r6,r2
   42164:	e17fe717 	ldw	r5,-100(fp)
   42168:	e13fe617 	ldw	r4,-104(fp)
   4216c:	00496680 	call	49668 <__sprint_r>
   42170:	10012a1e 	bne	r2,zero,4261c <___vfprintf_internal_r+0x2028>
   42174:	e47fcb04 	addi	r17,fp,-212
					cp++;
   42178:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
   4217c:	e0bfbb17 	ldw	r2,-276(fp)
   42180:	88800015 	stw	r2,0(r17)
   42184:	e0bfbc17 	ldw	r2,-272(fp)
   42188:	88800115 	stw	r2,4(r17)
   4218c:	e0ffca17 	ldw	r3,-216(fp)
   42190:	e0bfbc17 	ldw	r2,-272(fp)
   42194:	1885883a 	add	r2,r3,r2
   42198:	e0bfca15 	stw	r2,-216(fp)
   4219c:	8c400204 	addi	r17,r17,8
   421a0:	e0bfc917 	ldw	r2,-220(fp)
   421a4:	10800044 	addi	r2,r2,1
   421a8:	e0bfc915 	stw	r2,-220(fp)
   421ac:	e0bfc917 	ldw	r2,-220(fp)
   421b0:	10800210 	cmplti	r2,r2,8
   421b4:	1000071e 	bne	r2,zero,421d4 <___vfprintf_internal_r+0x1be0>
   421b8:	e0bfc804 	addi	r2,fp,-224
   421bc:	100d883a 	mov	r6,r2
   421c0:	e17fe717 	ldw	r5,-100(fp)
   421c4:	e13fe617 	ldw	r4,-104(fp)
   421c8:	00496680 	call	49668 <__sprint_r>
   421cc:	1001151e 	bne	r2,zero,42624 <___vfprintf_internal_r+0x2030>
   421d0:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
   421d4:	e0bfc217 	ldw	r2,-248(fp)
   421d8:	e0ffc317 	ldw	r3,-244(fp)
   421dc:	000d883a 	mov	r6,zero
   421e0:	000f883a 	mov	r7,zero
   421e4:	1009883a 	mov	r4,r2
   421e8:	180b883a 	mov	r5,r3
   421ec:	004ec0c0 	call	4ec0c <__eqdf2>
   421f0:	10001826 	beq	r2,zero,42254 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
   421f4:	8c800015 	stw	r18,0(r17)
   421f8:	e0bfc717 	ldw	r2,-228(fp)
   421fc:	10bfffc4 	addi	r2,r2,-1
   42200:	88800115 	stw	r2,4(r17)
   42204:	e0bfca17 	ldw	r2,-216(fp)
   42208:	e0ffc717 	ldw	r3,-228(fp)
   4220c:	10c5883a 	add	r2,r2,r3
   42210:	10bfffc4 	addi	r2,r2,-1
   42214:	e0bfca15 	stw	r2,-216(fp)
   42218:	8c400204 	addi	r17,r17,8
   4221c:	e0bfc917 	ldw	r2,-220(fp)
   42220:	10800044 	addi	r2,r2,1
   42224:	e0bfc915 	stw	r2,-220(fp)
   42228:	e0bfc917 	ldw	r2,-220(fp)
   4222c:	10800210 	cmplti	r2,r2,8
   42230:	1000521e 	bne	r2,zero,4237c <___vfprintf_internal_r+0x1d88>
   42234:	e0bfc804 	addi	r2,fp,-224
   42238:	100d883a 	mov	r6,r2
   4223c:	e17fe717 	ldw	r5,-100(fp)
   42240:	e13fe617 	ldw	r4,-104(fp)
   42244:	00496680 	call	49668 <__sprint_r>
   42248:	1000f81e 	bne	r2,zero,4262c <___vfprintf_internal_r+0x2038>
   4224c:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   42250:	00004a06 	br	4237c <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   42254:	e0bfc717 	ldw	r2,-228(fp)
   42258:	143fffc4 	addi	r16,r2,-1
   4225c:	0400470e 	bge	zero,r16,4237c <___vfprintf_internal_r+0x1d88>
   42260:	00001706 	br	422c0 <___vfprintf_internal_r+0x1ccc>
   42264:	00800174 	movhi	r2,5
   42268:	108abf84 	addi	r2,r2,11006
   4226c:	88800015 	stw	r2,0(r17)
   42270:	00800404 	movi	r2,16
   42274:	88800115 	stw	r2,4(r17)
   42278:	e0bfca17 	ldw	r2,-216(fp)
   4227c:	10800404 	addi	r2,r2,16
   42280:	e0bfca15 	stw	r2,-216(fp)
   42284:	8c400204 	addi	r17,r17,8
   42288:	e0bfc917 	ldw	r2,-220(fp)
   4228c:	10800044 	addi	r2,r2,1
   42290:	e0bfc915 	stw	r2,-220(fp)
   42294:	e0bfc917 	ldw	r2,-220(fp)
   42298:	10800210 	cmplti	r2,r2,8
   4229c:	1000071e 	bne	r2,zero,422bc <___vfprintf_internal_r+0x1cc8>
   422a0:	e0bfc804 	addi	r2,fp,-224
   422a4:	100d883a 	mov	r6,r2
   422a8:	e17fe717 	ldw	r5,-100(fp)
   422ac:	e13fe617 	ldw	r4,-104(fp)
   422b0:	00496680 	call	49668 <__sprint_r>
   422b4:	1000df1e 	bne	r2,zero,42634 <___vfprintf_internal_r+0x2040>
   422b8:	e47fcb04 	addi	r17,fp,-212
   422bc:	843ffc04 	addi	r16,r16,-16
   422c0:	80800448 	cmpgei	r2,r16,17
   422c4:	103fe71e 	bne	r2,zero,42264 <_gp+0xfffe5508>
   422c8:	00800174 	movhi	r2,5
   422cc:	108abf84 	addi	r2,r2,11006
   422d0:	88800015 	stw	r2,0(r17)
   422d4:	8005883a 	mov	r2,r16
   422d8:	88800115 	stw	r2,4(r17)
   422dc:	e0bfca17 	ldw	r2,-216(fp)
   422e0:	8007883a 	mov	r3,r16
   422e4:	10c5883a 	add	r2,r2,r3
   422e8:	e0bfca15 	stw	r2,-216(fp)
   422ec:	8c400204 	addi	r17,r17,8
   422f0:	e0bfc917 	ldw	r2,-220(fp)
   422f4:	10800044 	addi	r2,r2,1
   422f8:	e0bfc915 	stw	r2,-220(fp)
   422fc:	e0bfc917 	ldw	r2,-220(fp)
   42300:	10800210 	cmplti	r2,r2,8
   42304:	10001d1e 	bne	r2,zero,4237c <___vfprintf_internal_r+0x1d88>
   42308:	e0bfc804 	addi	r2,fp,-224
   4230c:	100d883a 	mov	r6,r2
   42310:	e17fe717 	ldw	r5,-100(fp)
   42314:	e13fe617 	ldw	r4,-104(fp)
   42318:	00496680 	call	49668 <__sprint_r>
   4231c:	1000c71e 	bne	r2,zero,4263c <___vfprintf_internal_r+0x2048>
   42320:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   42324:	00001506 	br	4237c <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
   42328:	8c800015 	stw	r18,0(r17)
   4232c:	00800044 	movi	r2,1
   42330:	88800115 	stw	r2,4(r17)
   42334:	e0bfca17 	ldw	r2,-216(fp)
   42338:	10800044 	addi	r2,r2,1
   4233c:	e0bfca15 	stw	r2,-216(fp)
   42340:	8c400204 	addi	r17,r17,8
   42344:	e0bfc917 	ldw	r2,-220(fp)
   42348:	10800044 	addi	r2,r2,1
   4234c:	e0bfc915 	stw	r2,-220(fp)
   42350:	e0bfc917 	ldw	r2,-220(fp)
   42354:	10800210 	cmplti	r2,r2,8
   42358:	1000091e 	bne	r2,zero,42380 <___vfprintf_internal_r+0x1d8c>
   4235c:	e0bfc804 	addi	r2,fp,-224
   42360:	100d883a 	mov	r6,r2
   42364:	e17fe717 	ldw	r5,-100(fp)
   42368:	e13fe617 	ldw	r4,-104(fp)
   4236c:	00496680 	call	49668 <__sprint_r>
   42370:	1000b41e 	bne	r2,zero,42644 <___vfprintf_internal_r+0x2050>
   42374:	e47fcb04 	addi	r17,fp,-212
   42378:	00000106 	br	42380 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   4237c:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
   42380:	e0bfc504 	addi	r2,fp,-236
   42384:	88800015 	stw	r2,0(r17)
   42388:	e0bfaf17 	ldw	r2,-324(fp)
   4238c:	88800115 	stw	r2,4(r17)
   42390:	e0ffca17 	ldw	r3,-216(fp)
   42394:	e0bfaf17 	ldw	r2,-324(fp)
   42398:	1885883a 	add	r2,r3,r2
   4239c:	e0bfca15 	stw	r2,-216(fp)
   423a0:	8c400204 	addi	r17,r17,8
   423a4:	e0bfc917 	ldw	r2,-220(fp)
   423a8:	10800044 	addi	r2,r2,1
   423ac:	e0bfc915 	stw	r2,-220(fp)
   423b0:	e0bfc917 	ldw	r2,-220(fp)
   423b4:	10800210 	cmplti	r2,r2,8
   423b8:	1000071e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x1de4>
   423bc:	e0bfc804 	addi	r2,fp,-224
   423c0:	100d883a 	mov	r6,r2
   423c4:	e17fe717 	ldw	r5,-100(fp)
   423c8:	e13fe617 	ldw	r4,-104(fp)
   423cc:	00496680 	call	49668 <__sprint_r>
   423d0:	10009e1e 	bne	r2,zero,4264c <___vfprintf_internal_r+0x2058>
   423d4:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   423d8:	9880010c 	andi	r2,r19,4
   423dc:	10003526 	beq	r2,zero,424b4 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
   423e0:	e0ffad17 	ldw	r3,-332(fp)
   423e4:	e0bfb517 	ldw	r2,-300(fp)
   423e8:	18a1c83a 	sub	r16,r3,r2
   423ec:	0400310e 	bge	zero,r16,424b4 <___vfprintf_internal_r+0x1ec0>
   423f0:	00001706 	br	42450 <___vfprintf_internal_r+0x1e5c>
   423f4:	00800174 	movhi	r2,5
   423f8:	108abb84 	addi	r2,r2,10990
   423fc:	88800015 	stw	r2,0(r17)
   42400:	00800404 	movi	r2,16
   42404:	88800115 	stw	r2,4(r17)
   42408:	e0bfca17 	ldw	r2,-216(fp)
   4240c:	10800404 	addi	r2,r2,16
   42410:	e0bfca15 	stw	r2,-216(fp)
   42414:	8c400204 	addi	r17,r17,8
   42418:	e0bfc917 	ldw	r2,-220(fp)
   4241c:	10800044 	addi	r2,r2,1
   42420:	e0bfc915 	stw	r2,-220(fp)
   42424:	e0bfc917 	ldw	r2,-220(fp)
   42428:	10800210 	cmplti	r2,r2,8
   4242c:	1000071e 	bne	r2,zero,4244c <___vfprintf_internal_r+0x1e58>
   42430:	e0bfc804 	addi	r2,fp,-224
   42434:	100d883a 	mov	r6,r2
   42438:	e17fe717 	ldw	r5,-100(fp)
   4243c:	e13fe617 	ldw	r4,-104(fp)
   42440:	00496680 	call	49668 <__sprint_r>
   42444:	1000831e 	bne	r2,zero,42654 <___vfprintf_internal_r+0x2060>
   42448:	e47fcb04 	addi	r17,fp,-212
   4244c:	843ffc04 	addi	r16,r16,-16
   42450:	80800448 	cmpgei	r2,r16,17
   42454:	103fe71e 	bne	r2,zero,423f4 <_gp+0xfffe5698>
   42458:	00800174 	movhi	r2,5
   4245c:	108abb84 	addi	r2,r2,10990
   42460:	88800015 	stw	r2,0(r17)
   42464:	8005883a 	mov	r2,r16
   42468:	88800115 	stw	r2,4(r17)
   4246c:	e0bfca17 	ldw	r2,-216(fp)
   42470:	8007883a 	mov	r3,r16
   42474:	10c5883a 	add	r2,r2,r3
   42478:	e0bfca15 	stw	r2,-216(fp)
   4247c:	8c400204 	addi	r17,r17,8
   42480:	e0bfc917 	ldw	r2,-220(fp)
   42484:	10800044 	addi	r2,r2,1
   42488:	e0bfc915 	stw	r2,-220(fp)
   4248c:	e0bfc917 	ldw	r2,-220(fp)
   42490:	10800210 	cmplti	r2,r2,8
   42494:	1000071e 	bne	r2,zero,424b4 <___vfprintf_internal_r+0x1ec0>
   42498:	e0bfc804 	addi	r2,fp,-224
   4249c:	100d883a 	mov	r6,r2
   424a0:	e17fe717 	ldw	r5,-100(fp)
   424a4:	e13fe617 	ldw	r4,-104(fp)
   424a8:	00496680 	call	49668 <__sprint_r>
   424ac:	10006b1e 	bne	r2,zero,4265c <___vfprintf_internal_r+0x2068>
   424b0:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   424b4:	e0ffad17 	ldw	r3,-332(fp)
   424b8:	e0bfb517 	ldw	r2,-300(fp)
   424bc:	10c0010e 	bge	r2,r3,424c4 <___vfprintf_internal_r+0x1ed0>
   424c0:	1805883a 	mov	r2,r3
   424c4:	e0ffac17 	ldw	r3,-336(fp)
   424c8:	1885883a 	add	r2,r3,r2
   424cc:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
   424d0:	e0bfca17 	ldw	r2,-216(fp)
   424d4:	10000626 	beq	r2,zero,424f0 <___vfprintf_internal_r+0x1efc>
   424d8:	e0bfc804 	addi	r2,fp,-224
   424dc:	100d883a 	mov	r6,r2
   424e0:	e17fe717 	ldw	r5,-100(fp)
   424e4:	e13fe617 	ldw	r4,-104(fp)
   424e8:	00496680 	call	49668 <__sprint_r>
   424ec:	10005d1e 	bne	r2,zero,42664 <___vfprintf_internal_r+0x2070>
   424f0:	e03fc915 	stw	zero,-220(fp)
   424f4:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
   424f8:	e0bfb817 	ldw	r2,-288(fp)
   424fc:	10389a26 	beq	r2,zero,40768 <_gp+0xfffe3a0c>
			_free_r (data, malloc_buf);
   42500:	e17fb817 	ldw	r5,-288(fp)
   42504:	e13fe617 	ldw	r4,-104(fp)
   42508:	00454c00 	call	454c0 <_free_r>
			malloc_buf = NULL;
   4250c:	e03fb815 	stw	zero,-288(fp)
		}
	}
   42510:	00389506 	br	40768 <_gp+0xfffe3a0c>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   42514:	0001883a 	nop
   42518:	00000106 	br	42520 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   4251c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   42520:	e0bfca17 	ldw	r2,-216(fp)
   42524:	10000626 	beq	r2,zero,42540 <___vfprintf_internal_r+0x1f4c>
   42528:	e0bfc804 	addi	r2,fp,-224
   4252c:	100d883a 	mov	r6,r2
   42530:	e17fe717 	ldw	r5,-100(fp)
   42534:	e13fe617 	ldw	r4,-104(fp)
   42538:	00496680 	call	49668 <__sprint_r>
   4253c:	10004b1e 	bne	r2,zero,4266c <___vfprintf_internal_r+0x2078>
   42540:	e03fc915 	stw	zero,-220(fp)
   42544:	e47fcb04 	addi	r17,fp,-212
   42548:	00004906 	br	42670 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   4254c:	0001883a 	nop
   42550:	00004706 	br	42670 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   42554:	0001883a 	nop
   42558:	00004506 	br	42670 <___vfprintf_internal_r+0x207c>
   4255c:	0001883a 	nop
   42560:	00004306 	br	42670 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   42564:	0001883a 	nop
   42568:	00004106 	br	42670 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   4256c:	0001883a 	nop
   42570:	00003f06 	br	42670 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   42574:	0001883a 	nop
   42578:	00003d06 	br	42670 <___vfprintf_internal_r+0x207c>
   4257c:	0001883a 	nop
   42580:	00003b06 	br	42670 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   42584:	0001883a 	nop
   42588:	00003906 	br	42670 <___vfprintf_internal_r+0x207c>
   4258c:	0001883a 	nop
   42590:	00003706 	br	42670 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
   42594:	0001883a 	nop
   42598:	00003506 	br	42670 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   4259c:	0001883a 	nop
   425a0:	00003306 	br	42670 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   425a4:	0001883a 	nop
   425a8:	00003106 	br	42670 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
   425ac:	0001883a 	nop
   425b0:	00002f06 	br	42670 <___vfprintf_internal_r+0x207c>
   425b4:	0001883a 	nop
   425b8:	00002d06 	br	42670 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
   425bc:	0001883a 	nop
   425c0:	00002b06 	br	42670 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   425c4:	0001883a 	nop
   425c8:	00002906 	br	42670 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
   425cc:	0001883a 	nop
   425d0:	00002706 	br	42670 <___vfprintf_internal_r+0x207c>
   425d4:	0001883a 	nop
   425d8:	00002506 	br	42670 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
   425dc:	0001883a 	nop
   425e0:	00002306 	br	42670 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
   425e4:	0001883a 	nop
   425e8:	00002106 	br	42670 <___vfprintf_internal_r+0x207c>
   425ec:	0001883a 	nop
   425f0:	00001f06 	br	42670 <___vfprintf_internal_r+0x207c>
   425f4:	0001883a 	nop
   425f8:	00001d06 	br	42670 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
   425fc:	0001883a 	nop
   42600:	00001b06 	br	42670 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
   42604:	0001883a 	nop
   42608:	00001906 	br	42670 <___vfprintf_internal_r+0x207c>
   4260c:	0001883a 	nop
   42610:	00001706 	br	42670 <___vfprintf_internal_r+0x207c>
   42614:	0001883a 	nop
   42618:	00001506 	br	42670 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
   4261c:	0001883a 	nop
   42620:	00001306 	br	42670 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
   42624:	0001883a 	nop
   42628:	00001106 	br	42670 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
   4262c:	0001883a 	nop
   42630:	00000f06 	br	42670 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   42634:	0001883a 	nop
   42638:	00000d06 	br	42670 <___vfprintf_internal_r+0x207c>
   4263c:	0001883a 	nop
   42640:	00000b06 	br	42670 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
   42644:	0001883a 	nop
   42648:	00000906 	br	42670 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
   4264c:	0001883a 	nop
   42650:	00000706 	br	42670 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   42654:	0001883a 	nop
   42658:	00000506 	br	42670 <___vfprintf_internal_r+0x207c>
   4265c:	0001883a 	nop
   42660:	00000306 	br	42670 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   42664:	0001883a 	nop
   42668:	00000106 	br	42670 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   4266c:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   42670:	e0bfb817 	ldw	r2,-288(fp)
   42674:	10000326 	beq	r2,zero,42684 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
   42678:	e17fb817 	ldw	r5,-288(fp)
   4267c:	e13fe617 	ldw	r4,-104(fp)
   42680:	00454c00 	call	454c0 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   42684:	e0bfe717 	ldw	r2,-100(fp)
   42688:	1080030b 	ldhu	r2,12(r2)
   4268c:	10bfffcc 	andi	r2,r2,65535
   42690:	1080100c 	andi	r2,r2,64
   42694:	1000021e 	bne	r2,zero,426a0 <___vfprintf_internal_r+0x20ac>
   42698:	e0bfac17 	ldw	r2,-336(fp)
   4269c:	00000206 	br	426a8 <___vfprintf_internal_r+0x20b4>
   426a0:	00bfffc4 	movi	r2,-1
   426a4:	0001883a 	nop
	/* NOTREACHED */
}
   426a8:	e6fff804 	addi	sp,fp,-32
   426ac:	dfc00917 	ldw	ra,36(sp)
   426b0:	df000817 	ldw	fp,32(sp)
   426b4:	ddc00717 	ldw	r23,28(sp)
   426b8:	dd800617 	ldw	r22,24(sp)
   426bc:	dd400517 	ldw	r21,20(sp)
   426c0:	dd000417 	ldw	r20,16(sp)
   426c4:	dcc00317 	ldw	r19,12(sp)
   426c8:	dc800217 	ldw	r18,8(sp)
   426cc:	dc400117 	ldw	r17,4(sp)
   426d0:	dc000017 	ldw	r16,0(sp)
   426d4:	dec00a04 	addi	sp,sp,40
   426d8:	f800283a 	ret

000426dc <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
   426dc:	deffef04 	addi	sp,sp,-68
   426e0:	dfc01015 	stw	ra,64(sp)
   426e4:	df000f15 	stw	fp,60(sp)
   426e8:	df000f04 	addi	fp,sp,60
   426ec:	e13ffc15 	stw	r4,-16(fp)
   426f0:	e17ffd15 	stw	r5,-12(fp)
   426f4:	e1bffe15 	stw	r6,-8(fp)
   426f8:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
   426fc:	e0bffd17 	ldw	r2,-12(fp)
   42700:	e0bffa15 	stw	r2,-24(fp)
   42704:	e0bffe17 	ldw	r2,-8(fp)
   42708:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
   4270c:	e0bffb17 	ldw	r2,-20(fp)
   42710:	1000090e 	bge	r2,zero,42738 <cvt+0x5c>
		value = -value;
   42714:	e0bffd17 	ldw	r2,-12(fp)
   42718:	e0bffd15 	stw	r2,-12(fp)
   4271c:	e0bffe17 	ldw	r2,-8(fp)
   42720:	10a0003c 	xorhi	r2,r2,32768
   42724:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
   42728:	e0800317 	ldw	r2,12(fp)
   4272c:	00c00b44 	movi	r3,45
   42730:	10c00005 	stb	r3,0(r2)
   42734:	00000206 	br	42740 <cvt+0x64>
	} else
		*sign = '\000';
   42738:	e0800317 	ldw	r2,12(fp)
   4273c:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
   42740:	e0800517 	ldw	r2,20(fp)
   42744:	108019a0 	cmpeqi	r2,r2,102
   42748:	1000031e 	bne	r2,zero,42758 <cvt+0x7c>
   4274c:	e0800517 	ldw	r2,20(fp)
   42750:	10801198 	cmpnei	r2,r2,70
   42754:	1000031e 	bne	r2,zero,42764 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
   42758:	008000c4 	movi	r2,3
   4275c:	e0bff515 	stw	r2,-44(fp)
   42760:	00000b06 	br	42790 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
   42764:	e0800517 	ldw	r2,20(fp)
   42768:	10801960 	cmpeqi	r2,r2,101
   4276c:	1000031e 	bne	r2,zero,4277c <cvt+0xa0>
   42770:	e0800517 	ldw	r2,20(fp)
   42774:	10801158 	cmpnei	r2,r2,69
   42778:	1000031e 	bne	r2,zero,42788 <cvt+0xac>
			ndigits++;
   4277c:	e0bfff17 	ldw	r2,-4(fp)
   42780:	10800044 	addi	r2,r2,1
   42784:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
   42788:	00800084 	movi	r2,2
   4278c:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
   42790:	e0bff904 	addi	r2,fp,-28
   42794:	d8800315 	stw	r2,12(sp)
   42798:	e0bff804 	addi	r2,fp,-32
   4279c:	d8800215 	stw	r2,8(sp)
   427a0:	e0800417 	ldw	r2,16(fp)
   427a4:	d8800115 	stw	r2,4(sp)
   427a8:	e0bfff17 	ldw	r2,-4(fp)
   427ac:	d8800015 	stw	r2,0(sp)
   427b0:	e1fff517 	ldw	r7,-44(fp)
   427b4:	e17ffd17 	ldw	r5,-12(fp)
   427b8:	e1bffe17 	ldw	r6,-8(fp)
   427bc:	e13ffc17 	ldw	r4,-16(fp)
   427c0:	0042f8c0 	call	42f8c <_dtoa_r>
   427c4:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
   427c8:	e0800517 	ldw	r2,20(fp)
   427cc:	108019e0 	cmpeqi	r2,r2,103
   427d0:	1000031e 	bne	r2,zero,427e0 <cvt+0x104>
   427d4:	e0800517 	ldw	r2,20(fp)
   427d8:	108011d8 	cmpnei	r2,r2,71
   427dc:	1000031e 	bne	r2,zero,427ec <cvt+0x110>
   427e0:	e0800217 	ldw	r2,8(fp)
   427e4:	1080004c 	andi	r2,r2,1
   427e8:	10003326 	beq	r2,zero,428b8 <cvt+0x1dc>
		bp = digits + ndigits;
   427ec:	e0bfff17 	ldw	r2,-4(fp)
   427f0:	e0fff717 	ldw	r3,-36(fp)
   427f4:	1885883a 	add	r2,r3,r2
   427f8:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
   427fc:	e0800517 	ldw	r2,20(fp)
   42800:	108019a0 	cmpeqi	r2,r2,102
   42804:	1000031e 	bne	r2,zero,42814 <cvt+0x138>
   42808:	e0800517 	ldw	r2,20(fp)
   4280c:	10801198 	cmpnei	r2,r2,70
   42810:	1000181e 	bne	r2,zero,42874 <cvt+0x198>
			if (*digits == '0' && value)
   42814:	e0bff717 	ldw	r2,-36(fp)
   42818:	10800003 	ldbu	r2,0(r2)
   4281c:	10803fcc 	andi	r2,r2,255
   42820:	1080201c 	xori	r2,r2,128
   42824:	10bfe004 	addi	r2,r2,-128
   42828:	10800c18 	cmpnei	r2,r2,48
   4282c:	10000b1e 	bne	r2,zero,4285c <cvt+0x180>
   42830:	000d883a 	mov	r6,zero
   42834:	000f883a 	mov	r7,zero
   42838:	e13ffd17 	ldw	r4,-12(fp)
   4283c:	e17ffe17 	ldw	r5,-8(fp)
   42840:	004ec0c0 	call	4ec0c <__eqdf2>
   42844:	10000526 	beq	r2,zero,4285c <cvt+0x180>
				*decpt = -ndigits + 1;
   42848:	00c00044 	movi	r3,1
   4284c:	e0bfff17 	ldw	r2,-4(fp)
   42850:	1887c83a 	sub	r3,r3,r2
   42854:	e0800417 	ldw	r2,16(fp)
   42858:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
   4285c:	e0800417 	ldw	r2,16(fp)
   42860:	10800017 	ldw	r2,0(r2)
   42864:	1007883a 	mov	r3,r2
   42868:	e0bff617 	ldw	r2,-40(fp)
   4286c:	10c5883a 	add	r2,r2,r3
   42870:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
   42874:	000d883a 	mov	r6,zero
   42878:	000f883a 	mov	r7,zero
   4287c:	e13ffd17 	ldw	r4,-12(fp)
   42880:	e17ffe17 	ldw	r5,-8(fp)
   42884:	004ec0c0 	call	4ec0c <__eqdf2>
   42888:	1000081e 	bne	r2,zero,428ac <cvt+0x1d0>
			rve = bp;
   4288c:	e0bff617 	ldw	r2,-40(fp)
   42890:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
   42894:	00000506 	br	428ac <cvt+0x1d0>
			*rve++ = '0';
   42898:	e0bff917 	ldw	r2,-28(fp)
   4289c:	10c00044 	addi	r3,r2,1
   428a0:	e0fff915 	stw	r3,-28(fp)
   428a4:	00c00c04 	movi	r3,48
   428a8:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
   428ac:	e0fff917 	ldw	r3,-28(fp)
   428b0:	e0bff617 	ldw	r2,-40(fp)
   428b4:	18bff836 	bltu	r3,r2,42898 <_gp+0xfffe5b3c>
			*rve++ = '0';
	}
	*length = rve - digits;
   428b8:	e0bff917 	ldw	r2,-28(fp)
   428bc:	1007883a 	mov	r3,r2
   428c0:	e0bff717 	ldw	r2,-36(fp)
   428c4:	1887c83a 	sub	r3,r3,r2
   428c8:	e0800617 	ldw	r2,24(fp)
   428cc:	10c00015 	stw	r3,0(r2)
	return (digits);
   428d0:	e0bff717 	ldw	r2,-36(fp)
}
   428d4:	e037883a 	mov	sp,fp
   428d8:	dfc00117 	ldw	ra,4(sp)
   428dc:	df000017 	ldw	fp,0(sp)
   428e0:	dec00204 	addi	sp,sp,8
   428e4:	f800283a 	ret

000428e8 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
   428e8:	defff704 	addi	sp,sp,-36
   428ec:	dfc00815 	stw	ra,32(sp)
   428f0:	df000715 	stw	fp,28(sp)
   428f4:	dc400615 	stw	r17,24(sp)
   428f8:	dc000515 	stw	r16,20(sp)
   428fc:	df000704 	addi	fp,sp,28
   42900:	e13ffb15 	stw	r4,-20(fp)
   42904:	e17ffc15 	stw	r5,-16(fp)
   42908:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
   4290c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
   42910:	8805883a 	mov	r2,r17
   42914:	14400044 	addi	r17,r2,1
   42918:	e0fffd17 	ldw	r3,-12(fp)
   4291c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
   42920:	e0bffc17 	ldw	r2,-16(fp)
   42924:	1000080e 	bge	r2,zero,42948 <exponent+0x60>
		exp = -exp;
   42928:	e0bffc17 	ldw	r2,-16(fp)
   4292c:	0085c83a 	sub	r2,zero,r2
   42930:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
   42934:	8805883a 	mov	r2,r17
   42938:	14400044 	addi	r17,r2,1
   4293c:	00c00b44 	movi	r3,45
   42940:	10c00005 	stb	r3,0(r2)
   42944:	00000406 	br	42958 <exponent+0x70>
	}
	else
		*p++ = '+';
   42948:	8805883a 	mov	r2,r17
   4294c:	14400044 	addi	r17,r2,1
   42950:	00c00ac4 	movi	r3,43
   42954:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
   42958:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
   4295c:	e0bffc17 	ldw	r2,-16(fp)
   42960:	10800290 	cmplti	r2,r2,10
   42964:	10001d1e 	bne	r2,zero,429dc <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
   42968:	843fffc4 	addi	r16,r16,-1
   4296c:	e0bffc17 	ldw	r2,-16(fp)
   42970:	01400284 	movi	r5,10
   42974:	1009883a 	mov	r4,r2
   42978:	004d8380 	call	4d838 <__modsi3>
   4297c:	10800c04 	addi	r2,r2,48
   42980:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
   42984:	e0bffc17 	ldw	r2,-16(fp)
   42988:	01400284 	movi	r5,10
   4298c:	1009883a 	mov	r4,r2
   42990:	004d7b40 	call	4d7b4 <__divsi3>
   42994:	e0bffc15 	stw	r2,-16(fp)
   42998:	e0bffc17 	ldw	r2,-16(fp)
   4299c:	10800288 	cmpgei	r2,r2,10
   429a0:	103ff11e 	bne	r2,zero,42968 <_gp+0xfffe5c0c>
		*--t = to_char (exp);
   429a4:	843fffc4 	addi	r16,r16,-1
   429a8:	e0bffc17 	ldw	r2,-16(fp)
   429ac:	10800c04 	addi	r2,r2,48
   429b0:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
   429b4:	00000606 	br	429d0 <exponent+0xe8>
   429b8:	8805883a 	mov	r2,r17
   429bc:	14400044 	addi	r17,r2,1
   429c0:	8007883a 	mov	r3,r16
   429c4:	1c000044 	addi	r16,r3,1
   429c8:	18c00003 	ldbu	r3,0(r3)
   429cc:	10c00005 	stb	r3,0(r2)
   429d0:	e0bffac4 	addi	r2,fp,-21
   429d4:	80bff836 	bltu	r16,r2,429b8 <_gp+0xfffe5c5c>
   429d8:	00000906 	br	42a00 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
   429dc:	8805883a 	mov	r2,r17
   429e0:	14400044 	addi	r17,r2,1
   429e4:	00c00c04 	movi	r3,48
   429e8:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
   429ec:	8805883a 	mov	r2,r17
   429f0:	14400044 	addi	r17,r2,1
   429f4:	e0fffc17 	ldw	r3,-16(fp)
   429f8:	18c00c04 	addi	r3,r3,48
   429fc:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
   42a00:	8807883a 	mov	r3,r17
   42a04:	e0bffb17 	ldw	r2,-20(fp)
   42a08:	1885c83a 	sub	r2,r3,r2
}
   42a0c:	e6fffe04 	addi	sp,fp,-8
   42a10:	dfc00317 	ldw	ra,12(sp)
   42a14:	df000217 	ldw	fp,8(sp)
   42a18:	dc400117 	ldw	r17,4(sp)
   42a1c:	dc000017 	ldw	r16,0(sp)
   42a20:	dec00404 	addi	sp,sp,16
   42a24:	f800283a 	ret

00042a28 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   42a28:	defffb04 	addi	sp,sp,-20
   42a2c:	dfc00415 	stw	ra,16(sp)
   42a30:	df000315 	stw	fp,12(sp)
   42a34:	dc000215 	stw	r16,8(sp)
   42a38:	df000304 	addi	fp,sp,12
   42a3c:	e13ffe15 	stw	r4,-8(fp)
   42a40:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   42a44:	d0a00417 	ldw	r2,-32752(gp)
   42a48:	e0bffd15 	stw	r2,-12(fp)
   42a4c:	e0bffd17 	ldw	r2,-12(fp)
   42a50:	10000526 	beq	r2,zero,42a68 <__swsetup_r+0x40>
   42a54:	e0bffd17 	ldw	r2,-12(fp)
   42a58:	10800e17 	ldw	r2,56(r2)
   42a5c:	1000021e 	bne	r2,zero,42a68 <__swsetup_r+0x40>
   42a60:	e13ffd17 	ldw	r4,-12(fp)
   42a64:	00452a00 	call	452a0 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
   42a68:	8080030b 	ldhu	r2,12(r16)
   42a6c:	10bfffcc 	andi	r2,r2,65535
   42a70:	1080020c 	andi	r2,r2,8
   42a74:	1000241e 	bne	r2,zero,42b08 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
   42a78:	8080030b 	ldhu	r2,12(r16)
   42a7c:	10bfffcc 	andi	r2,r2,65535
   42a80:	1080040c 	andi	r2,r2,16
   42a84:	1000081e 	bne	r2,zero,42aa8 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
   42a88:	e0bffe17 	ldw	r2,-8(fp)
   42a8c:	00c00244 	movi	r3,9
   42a90:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
   42a94:	8080030b 	ldhu	r2,12(r16)
   42a98:	10801014 	ori	r2,r2,64
   42a9c:	8080030d 	sth	r2,12(r16)
	  return EOF;
   42aa0:	00bfffc4 	movi	r2,-1
   42aa4:	00004206 	br	42bb0 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
   42aa8:	8080030b 	ldhu	r2,12(r16)
   42aac:	10bfffcc 	andi	r2,r2,65535
   42ab0:	1080010c 	andi	r2,r2,4
   42ab4:	10001126 	beq	r2,zero,42afc <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
   42ab8:	80800c17 	ldw	r2,48(r16)
   42abc:	10000826 	beq	r2,zero,42ae0 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
   42ac0:	80c00c17 	ldw	r3,48(r16)
   42ac4:	80801004 	addi	r2,r16,64
   42ac8:	18800426 	beq	r3,r2,42adc <__swsetup_r+0xb4>
   42acc:	80800c17 	ldw	r2,48(r16)
   42ad0:	100b883a 	mov	r5,r2
   42ad4:	e13ffe17 	ldw	r4,-8(fp)
   42ad8:	00454c00 	call	454c0 <_free_r>
   42adc:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
   42ae0:	80c0030b 	ldhu	r3,12(r16)
   42ae4:	00bff6c4 	movi	r2,-37
   42ae8:	1884703a 	and	r2,r3,r2
   42aec:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
   42af0:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
   42af4:	80800417 	ldw	r2,16(r16)
   42af8:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
   42afc:	8080030b 	ldhu	r2,12(r16)
   42b00:	10800214 	ori	r2,r2,8
   42b04:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   42b08:	80800417 	ldw	r2,16(r16)
   42b0c:	10000b1e 	bne	r2,zero,42b3c <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
   42b10:	8080030b 	ldhu	r2,12(r16)
   42b14:	10bfffcc 	andi	r2,r2,65535
   42b18:	1080800c 	andi	r2,r2,512
   42b1c:	10000426 	beq	r2,zero,42b30 <__swsetup_r+0x108>
   42b20:	8080030b 	ldhu	r2,12(r16)
   42b24:	10bfffcc 	andi	r2,r2,65535
   42b28:	1080200c 	andi	r2,r2,128
   42b2c:	10000326 	beq	r2,zero,42b3c <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
   42b30:	800b883a 	mov	r5,r16
   42b34:	e13ffe17 	ldw	r4,-8(fp)
   42b38:	0045f480 	call	45f48 <__smakebuf_r>

  if (fp->_flags & __SLBF)
   42b3c:	8080030b 	ldhu	r2,12(r16)
   42b40:	10bfffcc 	andi	r2,r2,65535
   42b44:	1080004c 	andi	r2,r2,1
   42b48:	10000526 	beq	r2,zero,42b60 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
   42b4c:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
   42b50:	80800517 	ldw	r2,20(r16)
   42b54:	0085c83a 	sub	r2,zero,r2
   42b58:	80800615 	stw	r2,24(r16)
   42b5c:	00000806 	br	42b80 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
   42b60:	8080030b 	ldhu	r2,12(r16)
   42b64:	10bfffcc 	andi	r2,r2,65535
   42b68:	1080008c 	andi	r2,r2,2
   42b6c:	1000021e 	bne	r2,zero,42b78 <__swsetup_r+0x150>
   42b70:	80800517 	ldw	r2,20(r16)
   42b74:	00000106 	br	42b7c <__swsetup_r+0x154>
   42b78:	0005883a 	mov	r2,zero
   42b7c:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   42b80:	80800417 	ldw	r2,16(r16)
   42b84:	1000091e 	bne	r2,zero,42bac <__swsetup_r+0x184>
   42b88:	8080030b 	ldhu	r2,12(r16)
   42b8c:	10bfffcc 	andi	r2,r2,65535
   42b90:	1080200c 	andi	r2,r2,128
   42b94:	10000526 	beq	r2,zero,42bac <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
   42b98:	8080030b 	ldhu	r2,12(r16)
   42b9c:	10801014 	ori	r2,r2,64
   42ba0:	8080030d 	sth	r2,12(r16)
      return EOF;
   42ba4:	00bfffc4 	movi	r2,-1
   42ba8:	00000106 	br	42bb0 <__swsetup_r+0x188>
    }
  return 0;
   42bac:	0005883a 	mov	r2,zero
}
   42bb0:	e6ffff04 	addi	sp,fp,-4
   42bb4:	dfc00217 	ldw	ra,8(sp)
   42bb8:	df000117 	ldw	fp,4(sp)
   42bbc:	dc000017 	ldw	r16,0(sp)
   42bc0:	dec00304 	addi	sp,sp,12
   42bc4:	f800283a 	ret

00042bc8 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
   42bc8:	deffef04 	addi	sp,sp,-68
   42bcc:	dfc01015 	stw	ra,64(sp)
   42bd0:	df000f15 	stw	fp,60(sp)
   42bd4:	df000f04 	addi	fp,sp,60
   42bd8:	e13ffe15 	stw	r4,-8(fp)
   42bdc:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
   42be0:	e0bfff17 	ldw	r2,-4(fp)
   42be4:	10800417 	ldw	r2,16(r2)
   42be8:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
   42bec:	e0bffe17 	ldw	r2,-8(fp)
   42bf0:	10c00417 	ldw	r3,16(r2)
   42bf4:	e0bff117 	ldw	r2,-60(fp)
   42bf8:	1880020e 	bge	r3,r2,42c04 <quorem+0x3c>
    return 0;
   42bfc:	0005883a 	mov	r2,zero
   42c00:	0000dd06 	br	42f78 <quorem+0x3b0>
  sx = S->_x;
   42c04:	e0bfff17 	ldw	r2,-4(fp)
   42c08:	10800504 	addi	r2,r2,20
   42c0c:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
   42c10:	e0bff117 	ldw	r2,-60(fp)
   42c14:	10bfffc4 	addi	r2,r2,-1
   42c18:	e0bff115 	stw	r2,-60(fp)
   42c1c:	e0bff117 	ldw	r2,-60(fp)
   42c20:	1085883a 	add	r2,r2,r2
   42c24:	1085883a 	add	r2,r2,r2
   42c28:	1007883a 	mov	r3,r2
   42c2c:	e0bff717 	ldw	r2,-36(fp)
   42c30:	10c5883a 	add	r2,r2,r3
   42c34:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
   42c38:	e0bffe17 	ldw	r2,-8(fp)
   42c3c:	10800504 	addi	r2,r2,20
   42c40:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
   42c44:	e0bff117 	ldw	r2,-60(fp)
   42c48:	1085883a 	add	r2,r2,r2
   42c4c:	1085883a 	add	r2,r2,r2
   42c50:	1007883a 	mov	r3,r2
   42c54:	e0bff517 	ldw	r2,-44(fp)
   42c58:	10c5883a 	add	r2,r2,r3
   42c5c:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
   42c60:	e0bff617 	ldw	r2,-40(fp)
   42c64:	10c00017 	ldw	r3,0(r2)
   42c68:	e0bff817 	ldw	r2,-32(fp)
   42c6c:	10800017 	ldw	r2,0(r2)
   42c70:	10800044 	addi	r2,r2,1
   42c74:	100b883a 	mov	r5,r2
   42c78:	1809883a 	mov	r4,r3
   42c7c:	004d8ac0 	call	4d8ac <__udivsi3>
   42c80:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
   42c84:	e0bff417 	ldw	r2,-48(fp)
   42c88:	10005726 	beq	r2,zero,42de8 <quorem+0x220>
    {
      borrow = 0;
   42c8c:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   42c90:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   42c94:	e0bff717 	ldw	r2,-36(fp)
   42c98:	10c00104 	addi	r3,r2,4
   42c9c:	e0fff715 	stw	r3,-36(fp)
   42ca0:	10800017 	ldw	r2,0(r2)
   42ca4:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
   42ca8:	e0bff917 	ldw	r2,-28(fp)
   42cac:	10bfffcc 	andi	r2,r2,65535
   42cb0:	e17ff417 	ldw	r5,-48(fp)
   42cb4:	1009883a 	mov	r4,r2
   42cb8:	004d9680 	call	4d968 <__mulsi3>
   42cbc:	1007883a 	mov	r3,r2
   42cc0:	e0bff317 	ldw	r2,-52(fp)
   42cc4:	1885883a 	add	r2,r3,r2
   42cc8:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
   42ccc:	e0bff917 	ldw	r2,-28(fp)
   42cd0:	1004d43a 	srli	r2,r2,16
   42cd4:	e17ff417 	ldw	r5,-48(fp)
   42cd8:	1009883a 	mov	r4,r2
   42cdc:	004d9680 	call	4d968 <__mulsi3>
   42ce0:	1007883a 	mov	r3,r2
   42ce4:	e0bffa17 	ldw	r2,-24(fp)
   42ce8:	1004d43a 	srli	r2,r2,16
   42cec:	1885883a 	add	r2,r3,r2
   42cf0:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   42cf4:	e0bffb17 	ldw	r2,-20(fp)
   42cf8:	1004d43a 	srli	r2,r2,16
   42cfc:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   42d00:	e0bff517 	ldw	r2,-44(fp)
   42d04:	10800017 	ldw	r2,0(r2)
   42d08:	10ffffcc 	andi	r3,r2,65535
   42d0c:	e0bffa17 	ldw	r2,-24(fp)
   42d10:	10bfffcc 	andi	r2,r2,65535
   42d14:	1887c83a 	sub	r3,r3,r2
   42d18:	e0bff217 	ldw	r2,-56(fp)
   42d1c:	1885883a 	add	r2,r3,r2
   42d20:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   42d24:	e0bffc17 	ldw	r2,-16(fp)
   42d28:	1005d43a 	srai	r2,r2,16
   42d2c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   42d30:	e0bff517 	ldw	r2,-44(fp)
   42d34:	10800017 	ldw	r2,0(r2)
   42d38:	1006d43a 	srli	r3,r2,16
   42d3c:	e0bffb17 	ldw	r2,-20(fp)
   42d40:	10bfffcc 	andi	r2,r2,65535
   42d44:	1887c83a 	sub	r3,r3,r2
   42d48:	e0bff217 	ldw	r2,-56(fp)
   42d4c:	1885883a 	add	r2,r3,r2
   42d50:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   42d54:	e0bffd17 	ldw	r2,-12(fp)
   42d58:	1005d43a 	srai	r2,r2,16
   42d5c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   42d60:	e0bff517 	ldw	r2,-44(fp)
   42d64:	10c00104 	addi	r3,r2,4
   42d68:	e0fff515 	stw	r3,-44(fp)
   42d6c:	e0fffd17 	ldw	r3,-12(fp)
   42d70:	1808943a 	slli	r4,r3,16
   42d74:	e0fffc17 	ldw	r3,-16(fp)
   42d78:	18ffffcc 	andi	r3,r3,65535
   42d7c:	20c6b03a 	or	r3,r4,r3
   42d80:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   42d84:	e0bff717 	ldw	r2,-36(fp)
   42d88:	e0fff817 	ldw	r3,-32(fp)
   42d8c:	18bfc12e 	bgeu	r3,r2,42c94 <_gp+0xfffe5f38>
      if (!*bxe)
   42d90:	e0bff617 	ldw	r2,-40(fp)
   42d94:	10800017 	ldw	r2,0(r2)
   42d98:	1000131e 	bne	r2,zero,42de8 <quorem+0x220>
	{
	  bx = b->_x;
   42d9c:	e0bffe17 	ldw	r2,-8(fp)
   42da0:	10800504 	addi	r2,r2,20
   42da4:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
   42da8:	00000306 	br	42db8 <quorem+0x1f0>
	    --n;
   42dac:	e0bff117 	ldw	r2,-60(fp)
   42db0:	10bfffc4 	addi	r2,r2,-1
   42db4:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
   42db8:	e0bff617 	ldw	r2,-40(fp)
   42dbc:	10bfff04 	addi	r2,r2,-4
   42dc0:	e0bff615 	stw	r2,-40(fp)
   42dc4:	e0bff617 	ldw	r2,-40(fp)
   42dc8:	e0fff517 	ldw	r3,-44(fp)
   42dcc:	1880032e 	bgeu	r3,r2,42ddc <quorem+0x214>
   42dd0:	e0bff617 	ldw	r2,-40(fp)
   42dd4:	10800017 	ldw	r2,0(r2)
   42dd8:	103ff426 	beq	r2,zero,42dac <_gp+0xfffe6050>
	    --n;
	  b->_wds = n;
   42ddc:	e0bffe17 	ldw	r2,-8(fp)
   42de0:	e0fff117 	ldw	r3,-60(fp)
   42de4:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
   42de8:	e17fff17 	ldw	r5,-4(fp)
   42dec:	e13ffe17 	ldw	r4,-8(fp)
   42df0:	00483c40 	call	483c4 <__mcmp>
   42df4:	10005f16 	blt	r2,zero,42f74 <quorem+0x3ac>
    {
      q++;
   42df8:	e0bff417 	ldw	r2,-48(fp)
   42dfc:	10800044 	addi	r2,r2,1
   42e00:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
   42e04:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   42e08:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
   42e0c:	e0bffe17 	ldw	r2,-8(fp)
   42e10:	10800504 	addi	r2,r2,20
   42e14:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
   42e18:	e0bfff17 	ldw	r2,-4(fp)
   42e1c:	10800504 	addi	r2,r2,20
   42e20:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   42e24:	e0bff717 	ldw	r2,-36(fp)
   42e28:	10c00104 	addi	r3,r2,4
   42e2c:	e0fff715 	stw	r3,-36(fp)
   42e30:	10800017 	ldw	r2,0(r2)
   42e34:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
   42e38:	e0bff917 	ldw	r2,-28(fp)
   42e3c:	10ffffcc 	andi	r3,r2,65535
   42e40:	e0bff317 	ldw	r2,-52(fp)
   42e44:	1885883a 	add	r2,r3,r2
   42e48:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
   42e4c:	e0bff917 	ldw	r2,-28(fp)
   42e50:	1006d43a 	srli	r3,r2,16
   42e54:	e0bffa17 	ldw	r2,-24(fp)
   42e58:	1004d43a 	srli	r2,r2,16
   42e5c:	1885883a 	add	r2,r3,r2
   42e60:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   42e64:	e0bffb17 	ldw	r2,-20(fp)
   42e68:	1004d43a 	srli	r2,r2,16
   42e6c:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   42e70:	e0bff517 	ldw	r2,-44(fp)
   42e74:	10800017 	ldw	r2,0(r2)
   42e78:	10ffffcc 	andi	r3,r2,65535
   42e7c:	e0bffa17 	ldw	r2,-24(fp)
   42e80:	10bfffcc 	andi	r2,r2,65535
   42e84:	1887c83a 	sub	r3,r3,r2
   42e88:	e0bff217 	ldw	r2,-56(fp)
   42e8c:	1885883a 	add	r2,r3,r2
   42e90:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   42e94:	e0bffc17 	ldw	r2,-16(fp)
   42e98:	1005d43a 	srai	r2,r2,16
   42e9c:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   42ea0:	e0bff517 	ldw	r2,-44(fp)
   42ea4:	10800017 	ldw	r2,0(r2)
   42ea8:	1006d43a 	srli	r3,r2,16
   42eac:	e0bffb17 	ldw	r2,-20(fp)
   42eb0:	10bfffcc 	andi	r2,r2,65535
   42eb4:	1887c83a 	sub	r3,r3,r2
   42eb8:	e0bff217 	ldw	r2,-56(fp)
   42ebc:	1885883a 	add	r2,r3,r2
   42ec0:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   42ec4:	e0bffd17 	ldw	r2,-12(fp)
   42ec8:	1005d43a 	srai	r2,r2,16
   42ecc:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   42ed0:	e0bff517 	ldw	r2,-44(fp)
   42ed4:	10c00104 	addi	r3,r2,4
   42ed8:	e0fff515 	stw	r3,-44(fp)
   42edc:	e0fffd17 	ldw	r3,-12(fp)
   42ee0:	1808943a 	slli	r4,r3,16
   42ee4:	e0fffc17 	ldw	r3,-16(fp)
   42ee8:	18ffffcc 	andi	r3,r3,65535
   42eec:	20c6b03a 	or	r3,r4,r3
   42ef0:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   42ef4:	e0bff717 	ldw	r2,-36(fp)
   42ef8:	e0fff817 	ldw	r3,-32(fp)
   42efc:	18bfc92e 	bgeu	r3,r2,42e24 <_gp+0xfffe60c8>
      bx = b->_x;
   42f00:	e0bffe17 	ldw	r2,-8(fp)
   42f04:	10800504 	addi	r2,r2,20
   42f08:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
   42f0c:	e0bff117 	ldw	r2,-60(fp)
   42f10:	1085883a 	add	r2,r2,r2
   42f14:	1085883a 	add	r2,r2,r2
   42f18:	1007883a 	mov	r3,r2
   42f1c:	e0bff517 	ldw	r2,-44(fp)
   42f20:	10c5883a 	add	r2,r2,r3
   42f24:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
   42f28:	e0bff617 	ldw	r2,-40(fp)
   42f2c:	10800017 	ldw	r2,0(r2)
   42f30:	1000101e 	bne	r2,zero,42f74 <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
   42f34:	00000306 	br	42f44 <quorem+0x37c>
	    --n;
   42f38:	e0bff117 	ldw	r2,-60(fp)
   42f3c:	10bfffc4 	addi	r2,r2,-1
   42f40:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
   42f44:	e0bff617 	ldw	r2,-40(fp)
   42f48:	10bfff04 	addi	r2,r2,-4
   42f4c:	e0bff615 	stw	r2,-40(fp)
   42f50:	e0bff617 	ldw	r2,-40(fp)
   42f54:	e0fff517 	ldw	r3,-44(fp)
   42f58:	1880032e 	bgeu	r3,r2,42f68 <quorem+0x3a0>
   42f5c:	e0bff617 	ldw	r2,-40(fp)
   42f60:	10800017 	ldw	r2,0(r2)
   42f64:	103ff426 	beq	r2,zero,42f38 <_gp+0xfffe61dc>
	    --n;
	  b->_wds = n;
   42f68:	e0bffe17 	ldw	r2,-8(fp)
   42f6c:	e0fff117 	ldw	r3,-60(fp)
   42f70:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
   42f74:	e0bff417 	ldw	r2,-48(fp)
}
   42f78:	e037883a 	mov	sp,fp
   42f7c:	dfc00117 	ldw	ra,4(sp)
   42f80:	df000017 	ldw	fp,0(sp)
   42f84:	dec00204 	addi	sp,sp,8
   42f88:	f800283a 	ret

00042f8c <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
   42f8c:	deffcc04 	addi	sp,sp,-208
   42f90:	dfc03315 	stw	ra,204(sp)
   42f94:	df003215 	stw	fp,200(sp)
   42f98:	dcc03115 	stw	r19,196(sp)
   42f9c:	dc803015 	stw	r18,192(sp)
   42fa0:	dc402f15 	stw	r17,188(sp)
   42fa4:	dc002e15 	stw	r16,184(sp)
   42fa8:	df003204 	addi	fp,sp,200
   42fac:	e13ff815 	stw	r4,-32(fp)
   42fb0:	e17ff915 	stw	r5,-28(fp)
   42fb4:	e1bffa15 	stw	r6,-24(fp)
   42fb8:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
   42fbc:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
   42fc0:	e0bff917 	ldw	r2,-28(fp)
   42fc4:	e0bff215 	stw	r2,-56(fp)
   42fc8:	e0bffa17 	ldw	r2,-24(fp)
   42fcc:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
   42fd0:	e0bff817 	ldw	r2,-32(fp)
   42fd4:	10801017 	ldw	r2,64(r2)
   42fd8:	10001326 	beq	r2,zero,43028 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
   42fdc:	e0bff817 	ldw	r2,-32(fp)
   42fe0:	10801017 	ldw	r2,64(r2)
   42fe4:	e0fff817 	ldw	r3,-32(fp)
   42fe8:	18c01117 	ldw	r3,68(r3)
   42fec:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
   42ff0:	e0bff817 	ldw	r2,-32(fp)
   42ff4:	10801017 	ldw	r2,64(r2)
   42ff8:	e0fff817 	ldw	r3,-32(fp)
   42ffc:	18c01117 	ldw	r3,68(r3)
   43000:	01000044 	movi	r4,1
   43004:	20c6983a 	sll	r3,r4,r3
   43008:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
   4300c:	e0bff817 	ldw	r2,-32(fp)
   43010:	10801017 	ldw	r2,64(r2)
   43014:	100b883a 	mov	r5,r2
   43018:	e13ff817 	ldw	r4,-32(fp)
   4301c:	00476dc0 	call	476dc <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
   43020:	e0bff817 	ldw	r2,-32(fp)
   43024:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
   43028:	e0bff317 	ldw	r2,-52(fp)
   4302c:	1000090e 	bge	r2,zero,43054 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
   43030:	e0800417 	ldw	r2,16(fp)
   43034:	00c00044 	movi	r3,1
   43038:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
   4303c:	e0fff317 	ldw	r3,-52(fp)
   43040:	00a00034 	movhi	r2,32768
   43044:	10bfffc4 	addi	r2,r2,-1
   43048:	1884703a 	and	r2,r3,r2
   4304c:	e0bff315 	stw	r2,-52(fp)
   43050:	00000206 	br	4305c <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
   43054:	e0800417 	ldw	r2,16(fp)
   43058:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
   4305c:	e0bff317 	ldw	r2,-52(fp)
   43060:	10dffc2c 	andhi	r3,r2,32752
   43064:	009ffc34 	movhi	r2,32752
   43068:	1880221e 	bne	r3,r2,430f4 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
   4306c:	e0800317 	ldw	r2,12(fp)
   43070:	00c9c3c4 	movi	r3,9999
   43074:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
   43078:	e0bff217 	ldw	r2,-56(fp)
   4307c:	1000081e 	bne	r2,zero,430a0 <_dtoa_r+0x114>
   43080:	e0fff317 	ldw	r3,-52(fp)
   43084:	00800434 	movhi	r2,16
   43088:	10bfffc4 	addi	r2,r2,-1
   4308c:	1884703a 	and	r2,r3,r2
   43090:	1000031e 	bne	r2,zero,430a0 <_dtoa_r+0x114>
   43094:	00800174 	movhi	r2,5
   43098:	108ac404 	addi	r2,r2,11024
   4309c:	00000206 	br	430a8 <_dtoa_r+0x11c>
   430a0:	00800174 	movhi	r2,5
   430a4:	108ac704 	addi	r2,r2,11036
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
   430a8:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
   430ac:	e0800517 	ldw	r2,20(fp)
   430b0:	10000e26 	beq	r2,zero,430ec <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
   430b4:	e0bfe717 	ldw	r2,-100(fp)
   430b8:	108000c4 	addi	r2,r2,3
   430bc:	10800003 	ldbu	r2,0(r2)
   430c0:	10803fcc 	andi	r2,r2,255
   430c4:	1080201c 	xori	r2,r2,128
   430c8:	10bfe004 	addi	r2,r2,-128
   430cc:	10000326 	beq	r2,zero,430dc <_dtoa_r+0x150>
   430d0:	e0bfe717 	ldw	r2,-100(fp)
   430d4:	10800204 	addi	r2,r2,8
   430d8:	00000206 	br	430e4 <_dtoa_r+0x158>
   430dc:	e0bfe717 	ldw	r2,-100(fp)
   430e0:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
   430e4:	e0c00517 	ldw	r3,20(fp)
   430e8:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
   430ec:	e0bfe717 	ldw	r2,-100(fp)
   430f0:	00067b06 	br	44ae0 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
   430f4:	e0bff217 	ldw	r2,-56(fp)
   430f8:	e0fff317 	ldw	r3,-52(fp)
   430fc:	000d883a 	mov	r6,zero
   43100:	000f883a 	mov	r7,zero
   43104:	1009883a 	mov	r4,r2
   43108:	180b883a 	mov	r5,r3
   4310c:	004ec0c0 	call	4ec0c <__eqdf2>
   43110:	10000e1e 	bne	r2,zero,4314c <_dtoa_r+0x1c0>
    {
      *decpt = 1;
   43114:	e0800317 	ldw	r2,12(fp)
   43118:	00c00044 	movi	r3,1
   4311c:	10c00015 	stw	r3,0(r2)
      s = "0";
   43120:	00800174 	movhi	r2,5
   43124:	108ac804 	addi	r2,r2,11040
   43128:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
   4312c:	e0800517 	ldw	r2,20(fp)
   43130:	10000426 	beq	r2,zero,43144 <_dtoa_r+0x1b8>
	*rve = s + 1;
   43134:	e0bfe717 	ldw	r2,-100(fp)
   43138:	10c00044 	addi	r3,r2,1
   4313c:	e0800517 	ldw	r2,20(fp)
   43140:	10c00015 	stw	r3,0(r2)
      return s;
   43144:	e0bfe717 	ldw	r2,-100(fp)
   43148:	00066506 	br	44ae0 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
   4314c:	e0bff217 	ldw	r2,-56(fp)
   43150:	e0fff317 	ldw	r3,-52(fp)
   43154:	e17ff104 	addi	r5,fp,-60
   43158:	e13ff004 	addi	r4,fp,-64
   4315c:	d9000015 	stw	r4,0(sp)
   43160:	280f883a 	mov	r7,r5
   43164:	100b883a 	mov	r5,r2
   43168:	180d883a 	mov	r6,r3
   4316c:	e13ff817 	ldw	r4,-32(fp)
   43170:	0048a4c0 	call	48a4c <__d2b>
   43174:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
   43178:	e0bff317 	ldw	r2,-52(fp)
   4317c:	1004d53a 	srli	r2,r2,20
   43180:	1081ffcc 	andi	r2,r2,2047
   43184:	e0bfd215 	stw	r2,-184(fp)
   43188:	e0bfd217 	ldw	r2,-184(fp)
   4318c:	10001126 	beq	r2,zero,431d4 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
   43190:	e0bff217 	ldw	r2,-56(fp)
   43194:	e0fff317 	ldw	r3,-52(fp)
   43198:	e0bff415 	stw	r2,-48(fp)
   4319c:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
   431a0:	e0fff517 	ldw	r3,-44(fp)
   431a4:	00800434 	movhi	r2,16
   431a8:	10bfffc4 	addi	r2,r2,-1
   431ac:	1884703a 	and	r2,r3,r2
   431b0:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
   431b4:	e0bff517 	ldw	r2,-44(fp)
   431b8:	108ffc34 	orhi	r2,r2,16368
   431bc:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
   431c0:	e0bfd217 	ldw	r2,-184(fp)
   431c4:	10bf0044 	addi	r2,r2,-1023
   431c8:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
   431cc:	e03fe015 	stw	zero,-128(fp)
   431d0:	00002806 	br	43274 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
   431d4:	e0fff017 	ldw	r3,-64(fp)
   431d8:	e0bff117 	ldw	r2,-60(fp)
   431dc:	1885883a 	add	r2,r3,r2
   431e0:	10810c84 	addi	r2,r2,1074
   431e4:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
   431e8:	e0bfd217 	ldw	r2,-184(fp)
   431ec:	10800850 	cmplti	r2,r2,33
   431f0:	10000b1e 	bne	r2,zero,43220 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   431f4:	e0fff317 	ldw	r3,-52(fp)
   431f8:	01001004 	movi	r4,64
   431fc:	e0bfd217 	ldw	r2,-184(fp)
   43200:	2085c83a 	sub	r2,r4,r2
   43204:	1886983a 	sll	r3,r3,r2
   43208:	e13ff217 	ldw	r4,-56(fp)
   4320c:	e0bfd217 	ldw	r2,-184(fp)
   43210:	10bff804 	addi	r2,r2,-32
   43214:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
   43218:	1884b03a 	or	r2,r3,r2
   4321c:	00000506 	br	43234 <_dtoa_r+0x2a8>
   43220:	e0fff217 	ldw	r3,-56(fp)
   43224:	01000804 	movi	r4,32
   43228:	e0bfd217 	ldw	r2,-184(fp)
   4322c:	2085c83a 	sub	r2,r4,r2
   43230:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   43234:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
   43238:	e13fe817 	ldw	r4,-96(fp)
   4323c:	00501280 	call	50128 <__floatunsidf>
   43240:	1009883a 	mov	r4,r2
   43244:	180b883a 	mov	r5,r3
   43248:	e13ff415 	stw	r4,-48(fp)
   4324c:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
   43250:	e0fff517 	ldw	r3,-44(fp)
   43254:	00bf8434 	movhi	r2,65040
   43258:	1885883a 	add	r2,r3,r2
   4325c:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
   43260:	e0bfd217 	ldw	r2,-184(fp)
   43264:	10bef344 	addi	r2,r2,-1075
   43268:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
   4326c:	00800044 	movi	r2,1
   43270:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
   43274:	e0bff417 	ldw	r2,-48(fp)
   43278:	e0fff517 	ldw	r3,-44(fp)
   4327c:	000d883a 	mov	r6,zero
   43280:	01cffe34 	movhi	r7,16376
   43284:	1009883a 	mov	r4,r2
   43288:	180b883a 	mov	r5,r3
   4328c:	004f6d00 	call	4f6d0 <__subdf3>
   43290:	1009883a 	mov	r4,r2
   43294:	180b883a 	mov	r5,r3
   43298:	2005883a 	mov	r2,r4
   4329c:	2807883a 	mov	r3,r5
   432a0:	0198dbf4 	movhi	r6,25455
   432a4:	3190d844 	addi	r6,r6,17249
   432a8:	01cff4f4 	movhi	r7,16339
   432ac:	39e1e9c4 	addi	r7,r7,-30809
   432b0:	1009883a 	mov	r4,r2
   432b4:	180b883a 	mov	r5,r3
   432b8:	004ee640 	call	4ee64 <__muldf3>
   432bc:	1009883a 	mov	r4,r2
   432c0:	180b883a 	mov	r5,r3
   432c4:	2005883a 	mov	r2,r4
   432c8:	2807883a 	mov	r3,r5
   432cc:	01a2d874 	movhi	r6,35681
   432d0:	31b22cc4 	addi	r6,r6,-14157
   432d4:	01cff1f4 	movhi	r7,16327
   432d8:	39e28a04 	addi	r7,r7,-30168
   432dc:	1009883a 	mov	r4,r2
   432e0:	180b883a 	mov	r5,r3
   432e4:	004d9900 	call	4d990 <__adddf3>
   432e8:	1009883a 	mov	r4,r2
   432ec:	180b883a 	mov	r5,r3
   432f0:	2025883a 	mov	r18,r4
   432f4:	2827883a 	mov	r19,r5
   432f8:	e13fd217 	ldw	r4,-184(fp)
   432fc:	005004c0 	call	5004c <__floatsidf>
   43300:	1011883a 	mov	r8,r2
   43304:	1813883a 	mov	r9,r3
   43308:	019427f4 	movhi	r6,20639
   4330c:	319e7ec4 	addi	r6,r6,31227
   43310:	01cff4f4 	movhi	r7,16339
   43314:	39d104c4 	addi	r7,r7,17427
   43318:	4009883a 	mov	r4,r8
   4331c:	480b883a 	mov	r5,r9
   43320:	004ee640 	call	4ee64 <__muldf3>
   43324:	1009883a 	mov	r4,r2
   43328:	180b883a 	mov	r5,r3
   4332c:	2005883a 	mov	r2,r4
   43330:	2807883a 	mov	r3,r5
   43334:	100d883a 	mov	r6,r2
   43338:	180f883a 	mov	r7,r3
   4333c:	9009883a 	mov	r4,r18
   43340:	980b883a 	mov	r5,r19
   43344:	004d9900 	call	4d990 <__adddf3>
   43348:	1009883a 	mov	r4,r2
   4334c:	180b883a 	mov	r5,r3
   43350:	e13fe515 	stw	r4,-108(fp)
   43354:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
   43358:	e13fe517 	ldw	r4,-108(fp)
   4335c:	e17fe617 	ldw	r5,-104(fp)
   43360:	004ffcc0 	call	4ffcc <__fixdfsi>
   43364:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
   43368:	000d883a 	mov	r6,zero
   4336c:	000f883a 	mov	r7,zero
   43370:	e13fe517 	ldw	r4,-108(fp)
   43374:	e17fe617 	ldw	r5,-104(fp)
   43378:	004ed700 	call	4ed70 <__ledf2>
   4337c:	10000d0e 	bge	r2,zero,433b4 <_dtoa_r+0x428>
   43380:	e13fd717 	ldw	r4,-164(fp)
   43384:	005004c0 	call	5004c <__floatsidf>
   43388:	1011883a 	mov	r8,r2
   4338c:	1813883a 	mov	r9,r3
   43390:	e1bfe517 	ldw	r6,-108(fp)
   43394:	e1ffe617 	ldw	r7,-104(fp)
   43398:	4009883a 	mov	r4,r8
   4339c:	480b883a 	mov	r5,r9
   433a0:	004ec0c0 	call	4ec0c <__eqdf2>
   433a4:	10000326 	beq	r2,zero,433b4 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
   433a8:	e0bfd717 	ldw	r2,-164(fp)
   433ac:	10bfffc4 	addi	r2,r2,-1
   433b0:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
   433b4:	00800044 	movi	r2,1
   433b8:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
   433bc:	e0bfd717 	ldw	r2,-164(fp)
   433c0:	10001616 	blt	r2,zero,4341c <_dtoa_r+0x490>
   433c4:	e0bfd717 	ldw	r2,-164(fp)
   433c8:	108005c8 	cmpgei	r2,r2,23
   433cc:	1000131e 	bne	r2,zero,4341c <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
   433d0:	e0bff217 	ldw	r2,-56(fp)
   433d4:	e0fff317 	ldw	r3,-52(fp)
   433d8:	01000174 	movhi	r4,5
   433dc:	210acf04 	addi	r4,r4,11068
   433e0:	e17fd717 	ldw	r5,-164(fp)
   433e4:	280a90fa 	slli	r5,r5,3
   433e8:	214d883a 	add	r6,r4,r5
   433ec:	31000017 	ldw	r4,0(r6)
   433f0:	31400117 	ldw	r5,4(r6)
   433f4:	200d883a 	mov	r6,r4
   433f8:	280f883a 	mov	r7,r5
   433fc:	1009883a 	mov	r4,r2
   43400:	180b883a 	mov	r5,r3
   43404:	004ed700 	call	4ed70 <__ledf2>
   43408:	1000030e 	bge	r2,zero,43418 <_dtoa_r+0x48c>
	k--;
   4340c:	e0bfd717 	ldw	r2,-164(fp)
   43410:	10bfffc4 	addi	r2,r2,-1
   43414:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
   43418:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
   4341c:	e0fff017 	ldw	r3,-64(fp)
   43420:	e0bfd217 	ldw	r2,-184(fp)
   43424:	1885c83a 	sub	r2,r3,r2
   43428:	10bfffc4 	addi	r2,r2,-1
   4342c:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
   43430:	e0bfd617 	ldw	r2,-168(fp)
   43434:	10000416 	blt	r2,zero,43448 <_dtoa_r+0x4bc>
    {
      b2 = 0;
   43438:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
   4343c:	e0bfd617 	ldw	r2,-168(fp)
   43440:	e0bfdc15 	stw	r2,-144(fp)
   43444:	00000406 	br	43458 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
   43448:	e0bfd617 	ldw	r2,-168(fp)
   4344c:	0085c83a 	sub	r2,zero,r2
   43450:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
   43454:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
   43458:	e0bfd717 	ldw	r2,-164(fp)
   4345c:	10000816 	blt	r2,zero,43480 <_dtoa_r+0x4f4>
    {
      b5 = 0;
   43460:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
   43464:	e0bfd717 	ldw	r2,-164(fp)
   43468:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
   4346c:	e0ffdc17 	ldw	r3,-144(fp)
   43470:	e0bfd717 	ldw	r2,-164(fp)
   43474:	1885883a 	add	r2,r3,r2
   43478:	e0bfdc15 	stw	r2,-144(fp)
   4347c:	00000806 	br	434a0 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
   43480:	e0ffcf17 	ldw	r3,-196(fp)
   43484:	e0bfd717 	ldw	r2,-164(fp)
   43488:	1885c83a 	sub	r2,r3,r2
   4348c:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
   43490:	e0bfd717 	ldw	r2,-164(fp)
   43494:	0085c83a 	sub	r2,zero,r2
   43498:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
   4349c:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
   434a0:	e0bffb17 	ldw	r2,-20(fp)
   434a4:	10000316 	blt	r2,zero,434b4 <_dtoa_r+0x528>
   434a8:	e0bffb17 	ldw	r2,-20(fp)
   434ac:	10800290 	cmplti	r2,r2,10
   434b0:	1000011e 	bne	r2,zero,434b8 <_dtoa_r+0x52c>
    mode = 0;
   434b4:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
   434b8:	00800044 	movi	r2,1
   434bc:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
   434c0:	e0bffb17 	ldw	r2,-20(fp)
   434c4:	10800190 	cmplti	r2,r2,6
   434c8:	1000041e 	bne	r2,zero,434dc <_dtoa_r+0x550>
    {
      mode -= 4;
   434cc:	e0bffb17 	ldw	r2,-20(fp)
   434d0:	10bfff04 	addi	r2,r2,-4
   434d4:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
   434d8:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
   434dc:	00800044 	movi	r2,1
   434e0:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
   434e4:	00bfffc4 	movi	r2,-1
   434e8:	e0bfd515 	stw	r2,-172(fp)
   434ec:	e0bfd517 	ldw	r2,-172(fp)
   434f0:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
   434f4:	e0bffb17 	ldw	r2,-20(fp)
   434f8:	108001a8 	cmpgeui	r2,r2,6
   434fc:	10002c1e 	bne	r2,zero,435b0 <_dtoa_r+0x624>
   43500:	e0bffb17 	ldw	r2,-20(fp)
   43504:	100690ba 	slli	r3,r2,2
   43508:	00800134 	movhi	r2,4
   4350c:	108d4704 	addi	r2,r2,13596
   43510:	1885883a 	add	r2,r3,r2
   43514:	10800017 	ldw	r2,0(r2)
   43518:	1000683a 	jmp	r2
   4351c:	00043534 	movhi	zero,4308
   43520:	00043534 	movhi	zero,4308
   43524:	00043544 	movi	zero,4309
   43528:	00043574 	movhi	zero,4309
   4352c:	00043548 	cmpgei	zero,zero,4309
   43530:	00043578 	rdprs	zero,zero,4309
    {
    case 0:
    case 1:
      i = 18;
   43534:	00800484 	movi	r2,18
   43538:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
   4353c:	e0000215 	stw	zero,8(fp)
      break;
   43540:	00001b06 	br	435b0 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
   43544:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
   43548:	e0800217 	ldw	r2,8(fp)
   4354c:	00800216 	blt	zero,r2,43558 <_dtoa_r+0x5cc>
	ndigits = 1;
   43550:	00800044 	movi	r2,1
   43554:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
   43558:	e0800217 	ldw	r2,8(fp)
   4355c:	e0bfd215 	stw	r2,-184(fp)
   43560:	e0bfd217 	ldw	r2,-184(fp)
   43564:	e0bfd515 	stw	r2,-172(fp)
   43568:	e0bfd517 	ldw	r2,-172(fp)
   4356c:	e0bfd415 	stw	r2,-176(fp)
      break;
   43570:	00000f06 	br	435b0 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
   43574:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
   43578:	e0c00217 	ldw	r3,8(fp)
   4357c:	e0bfd717 	ldw	r2,-164(fp)
   43580:	1885883a 	add	r2,r3,r2
   43584:	10800044 	addi	r2,r2,1
   43588:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
   4358c:	e0bfd217 	ldw	r2,-184(fp)
   43590:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
   43594:	e0bfd217 	ldw	r2,-184(fp)
   43598:	10bfffc4 	addi	r2,r2,-1
   4359c:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
   435a0:	e0bfd217 	ldw	r2,-184(fp)
   435a4:	00800216 	blt	zero,r2,435b0 <_dtoa_r+0x624>
	i = 1;
   435a8:	00800044 	movi	r2,1
   435ac:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
   435b0:	00800104 	movi	r2,4
   435b4:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   435b8:	e0bff817 	ldw	r2,-32(fp)
   435bc:	10001115 	stw	zero,68(r2)
   435c0:	00000806 	br	435e4 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
   435c4:	e0bff817 	ldw	r2,-32(fp)
   435c8:	10801117 	ldw	r2,68(r2)
   435cc:	10c00044 	addi	r3,r2,1
   435d0:	e0bff817 	ldw	r2,-32(fp)
   435d4:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
   435d8:	e0bfd617 	ldw	r2,-168(fp)
   435dc:	1085883a 	add	r2,r2,r2
   435e0:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   435e4:	e0bfd617 	ldw	r2,-168(fp)
   435e8:	10800504 	addi	r2,r2,20
   435ec:	e0ffd217 	ldw	r3,-184(fp)
   435f0:	18bff42e 	bgeu	r3,r2,435c4 <_gp+0xfffe6868>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
   435f4:	e0bff817 	ldw	r2,-32(fp)
   435f8:	10801117 	ldw	r2,68(r2)
   435fc:	100b883a 	mov	r5,r2
   43600:	e13ff817 	ldw	r4,-32(fp)
   43604:	00475ac0 	call	475ac <_Balloc>
   43608:	1007883a 	mov	r3,r2
   4360c:	e0bff817 	ldw	r2,-32(fp)
   43610:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
   43614:	e0bff817 	ldw	r2,-32(fp)
   43618:	10801017 	ldw	r2,64(r2)
   4361c:	e0bfe915 	stw	r2,-92(fp)
   43620:	e0bfe917 	ldw	r2,-92(fp)
   43624:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
   43628:	e0bfd417 	ldw	r2,-176(fp)
   4362c:	10021616 	blt	r2,zero,43e88 <_dtoa_r+0xefc>
   43630:	e0bfd417 	ldw	r2,-176(fp)
   43634:	108003c8 	cmpgei	r2,r2,15
   43638:	1002131e 	bne	r2,zero,43e88 <_dtoa_r+0xefc>
   4363c:	e0bfdf17 	ldw	r2,-132(fp)
   43640:	10021126 	beq	r2,zero,43e88 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
   43644:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
   43648:	e0bff217 	ldw	r2,-56(fp)
   4364c:	e0fff317 	ldw	r3,-52(fp)
   43650:	e0bff415 	stw	r2,-48(fp)
   43654:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
   43658:	e0bfd717 	ldw	r2,-164(fp)
   4365c:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
   43660:	e0bfd417 	ldw	r2,-176(fp)
   43664:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
   43668:	00800084 	movi	r2,2
   4366c:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
   43670:	e0bfd717 	ldw	r2,-164(fp)
   43674:	0080540e 	bge	zero,r2,437c8 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
   43678:	e0bfd717 	ldw	r2,-164(fp)
   4367c:	10c003cc 	andi	r3,r2,15
   43680:	00800174 	movhi	r2,5
   43684:	108acf04 	addi	r2,r2,11068
   43688:	180690fa 	slli	r3,r3,3
   4368c:	10c5883a 	add	r2,r2,r3
   43690:	10c00017 	ldw	r3,0(r2)
   43694:	e0ffe515 	stw	r3,-108(fp)
   43698:	10800117 	ldw	r2,4(r2)
   4369c:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
   436a0:	e0bfd717 	ldw	r2,-164(fp)
   436a4:	1005d13a 	srai	r2,r2,4
   436a8:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
   436ac:	e0bfd617 	ldw	r2,-168(fp)
   436b0:	1080040c 	andi	r2,r2,16
   436b4:	10003426 	beq	r2,zero,43788 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
   436b8:	e0bfd617 	ldw	r2,-168(fp)
   436bc:	108003cc 	andi	r2,r2,15
   436c0:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
   436c4:	e0bff217 	ldw	r2,-56(fp)
   436c8:	e0fff317 	ldw	r3,-52(fp)
   436cc:	01800174 	movhi	r6,5
   436d0:	318b0104 	addi	r6,r6,11268
   436d4:	31000817 	ldw	r4,32(r6)
   436d8:	31400917 	ldw	r5,36(r6)
   436dc:	200d883a 	mov	r6,r4
   436e0:	280f883a 	mov	r7,r5
   436e4:	1009883a 	mov	r4,r2
   436e8:	180b883a 	mov	r5,r3
   436ec:	004e23c0 	call	4e23c <__divdf3>
   436f0:	1009883a 	mov	r4,r2
   436f4:	180b883a 	mov	r5,r3
   436f8:	2005883a 	mov	r2,r4
   436fc:	2807883a 	mov	r3,r5
   43700:	e0bff215 	stw	r2,-56(fp)
   43704:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
   43708:	e0bfd317 	ldw	r2,-180(fp)
   4370c:	10800044 	addi	r2,r2,1
   43710:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
   43714:	00001c06 	br	43788 <_dtoa_r+0x7fc>
	    if (j & 1)
   43718:	e0bfd617 	ldw	r2,-168(fp)
   4371c:	1080004c 	andi	r2,r2,1
   43720:	10001326 	beq	r2,zero,43770 <_dtoa_r+0x7e4>
	      {
		ieps++;
   43724:	e0bfd317 	ldw	r2,-180(fp)
   43728:	10800044 	addi	r2,r2,1
   4372c:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
   43730:	00800174 	movhi	r2,5
   43734:	108b0104 	addi	r2,r2,11268
   43738:	e0ffd217 	ldw	r3,-184(fp)
   4373c:	180690fa 	slli	r3,r3,3
   43740:	10c9883a 	add	r4,r2,r3
   43744:	20800017 	ldw	r2,0(r4)
   43748:	20c00117 	ldw	r3,4(r4)
   4374c:	100d883a 	mov	r6,r2
   43750:	180f883a 	mov	r7,r3
   43754:	e13fe517 	ldw	r4,-108(fp)
   43758:	e17fe617 	ldw	r5,-104(fp)
   4375c:	004ee640 	call	4ee64 <__muldf3>
   43760:	1009883a 	mov	r4,r2
   43764:	180b883a 	mov	r5,r3
   43768:	e13fe515 	stw	r4,-108(fp)
   4376c:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
   43770:	e0bfd617 	ldw	r2,-168(fp)
   43774:	1005d07a 	srai	r2,r2,1
   43778:	e0bfd615 	stw	r2,-168(fp)
   4377c:	e0bfd217 	ldw	r2,-184(fp)
   43780:	10800044 	addi	r2,r2,1
   43784:	e0bfd215 	stw	r2,-184(fp)
   43788:	e0bfd617 	ldw	r2,-168(fp)
   4378c:	103fe21e 	bne	r2,zero,43718 <_gp+0xfffe69bc>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
   43790:	e0bff217 	ldw	r2,-56(fp)
   43794:	e0fff317 	ldw	r3,-52(fp)
   43798:	e1bfe517 	ldw	r6,-108(fp)
   4379c:	e1ffe617 	ldw	r7,-104(fp)
   437a0:	1009883a 	mov	r4,r2
   437a4:	180b883a 	mov	r5,r3
   437a8:	004e23c0 	call	4e23c <__divdf3>
   437ac:	1009883a 	mov	r4,r2
   437b0:	180b883a 	mov	r5,r3
   437b4:	2005883a 	mov	r2,r4
   437b8:	2807883a 	mov	r3,r5
   437bc:	e0bff215 	stw	r2,-56(fp)
   437c0:	e0fff315 	stw	r3,-52(fp)
   437c4:	00004006 	br	438c8 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
   437c8:	e0bfd717 	ldw	r2,-164(fp)
   437cc:	0085c83a 	sub	r2,zero,r2
   437d0:	e0bfec15 	stw	r2,-80(fp)
   437d4:	e0bfec17 	ldw	r2,-80(fp)
   437d8:	10003b26 	beq	r2,zero,438c8 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
   437dc:	e0bff217 	ldw	r2,-56(fp)
   437e0:	e0fff317 	ldw	r3,-52(fp)
   437e4:	e13fec17 	ldw	r4,-80(fp)
   437e8:	214003cc 	andi	r5,r4,15
   437ec:	01000174 	movhi	r4,5
   437f0:	210acf04 	addi	r4,r4,11068
   437f4:	280a90fa 	slli	r5,r5,3
   437f8:	214d883a 	add	r6,r4,r5
   437fc:	31000017 	ldw	r4,0(r6)
   43800:	31400117 	ldw	r5,4(r6)
   43804:	200d883a 	mov	r6,r4
   43808:	280f883a 	mov	r7,r5
   4380c:	1009883a 	mov	r4,r2
   43810:	180b883a 	mov	r5,r3
   43814:	004ee640 	call	4ee64 <__muldf3>
   43818:	1009883a 	mov	r4,r2
   4381c:	180b883a 	mov	r5,r3
   43820:	2005883a 	mov	r2,r4
   43824:	2807883a 	mov	r3,r5
   43828:	e0bff215 	stw	r2,-56(fp)
   4382c:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
   43830:	e0bfec17 	ldw	r2,-80(fp)
   43834:	1005d13a 	srai	r2,r2,4
   43838:	e0bfd615 	stw	r2,-168(fp)
   4383c:	00002006 	br	438c0 <_dtoa_r+0x934>
	    if (j & 1)
   43840:	e0bfd617 	ldw	r2,-168(fp)
   43844:	1080004c 	andi	r2,r2,1
   43848:	10001726 	beq	r2,zero,438a8 <_dtoa_r+0x91c>
	      {
		ieps++;
   4384c:	e0bfd317 	ldw	r2,-180(fp)
   43850:	10800044 	addi	r2,r2,1
   43854:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
   43858:	e0bff217 	ldw	r2,-56(fp)
   4385c:	e0fff317 	ldw	r3,-52(fp)
   43860:	01000174 	movhi	r4,5
   43864:	210b0104 	addi	r4,r4,11268
   43868:	e17fd217 	ldw	r5,-184(fp)
   4386c:	280a90fa 	slli	r5,r5,3
   43870:	214d883a 	add	r6,r4,r5
   43874:	31000017 	ldw	r4,0(r6)
   43878:	31400117 	ldw	r5,4(r6)
   4387c:	200d883a 	mov	r6,r4
   43880:	280f883a 	mov	r7,r5
   43884:	1009883a 	mov	r4,r2
   43888:	180b883a 	mov	r5,r3
   4388c:	004ee640 	call	4ee64 <__muldf3>
   43890:	1009883a 	mov	r4,r2
   43894:	180b883a 	mov	r5,r3
   43898:	2005883a 	mov	r2,r4
   4389c:	2807883a 	mov	r3,r5
   438a0:	e0bff215 	stw	r2,-56(fp)
   438a4:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
   438a8:	e0bfd617 	ldw	r2,-168(fp)
   438ac:	1005d07a 	srai	r2,r2,1
   438b0:	e0bfd615 	stw	r2,-168(fp)
   438b4:	e0bfd217 	ldw	r2,-184(fp)
   438b8:	10800044 	addi	r2,r2,1
   438bc:	e0bfd215 	stw	r2,-184(fp)
   438c0:	e0bfd617 	ldw	r2,-168(fp)
   438c4:	103fde1e 	bne	r2,zero,43840 <_gp+0xfffe6ae4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
   438c8:	e0bfd817 	ldw	r2,-160(fp)
   438cc:	10002126 	beq	r2,zero,43954 <_dtoa_r+0x9c8>
   438d0:	e0bff217 	ldw	r2,-56(fp)
   438d4:	e0fff317 	ldw	r3,-52(fp)
   438d8:	000d883a 	mov	r6,zero
   438dc:	01cffc34 	movhi	r7,16368
   438e0:	1009883a 	mov	r4,r2
   438e4:	180b883a 	mov	r5,r3
   438e8:	004ed700 	call	4ed70 <__ledf2>
   438ec:	1000190e 	bge	r2,zero,43954 <_dtoa_r+0x9c8>
   438f0:	e0bfd417 	ldw	r2,-176(fp)
   438f4:	0080170e 	bge	zero,r2,43954 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
   438f8:	e0bfd517 	ldw	r2,-172(fp)
   438fc:	0081550e 	bge	zero,r2,43e54 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
   43900:	e0bfd517 	ldw	r2,-172(fp)
   43904:	e0bfd415 	stw	r2,-176(fp)
	  k--;
   43908:	e0bfd717 	ldw	r2,-164(fp)
   4390c:	10bfffc4 	addi	r2,r2,-1
   43910:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
   43914:	e0bff217 	ldw	r2,-56(fp)
   43918:	e0fff317 	ldw	r3,-52(fp)
   4391c:	000d883a 	mov	r6,zero
   43920:	01d00934 	movhi	r7,16420
   43924:	1009883a 	mov	r4,r2
   43928:	180b883a 	mov	r5,r3
   4392c:	004ee640 	call	4ee64 <__muldf3>
   43930:	1009883a 	mov	r4,r2
   43934:	180b883a 	mov	r5,r3
   43938:	2005883a 	mov	r2,r4
   4393c:	2807883a 	mov	r3,r5
   43940:	e0bff215 	stw	r2,-56(fp)
   43944:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
   43948:	e0bfd317 	ldw	r2,-180(fp)
   4394c:	10800044 	addi	r2,r2,1
   43950:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
   43954:	e13fd317 	ldw	r4,-180(fp)
   43958:	005004c0 	call	5004c <__floatsidf>
   4395c:	1011883a 	mov	r8,r2
   43960:	1813883a 	mov	r9,r3
   43964:	e0bff217 	ldw	r2,-56(fp)
   43968:	e0fff317 	ldw	r3,-52(fp)
   4396c:	100d883a 	mov	r6,r2
   43970:	180f883a 	mov	r7,r3
   43974:	4009883a 	mov	r4,r8
   43978:	480b883a 	mov	r5,r9
   4397c:	004ee640 	call	4ee64 <__muldf3>
   43980:	1009883a 	mov	r4,r2
   43984:	180b883a 	mov	r5,r3
   43988:	2005883a 	mov	r2,r4
   4398c:	2807883a 	mov	r3,r5
   43990:	000d883a 	mov	r6,zero
   43994:	01d00734 	movhi	r7,16412
   43998:	1009883a 	mov	r4,r2
   4399c:	180b883a 	mov	r5,r3
   439a0:	004d9900 	call	4d990 <__adddf3>
   439a4:	1009883a 	mov	r4,r2
   439a8:	180b883a 	mov	r5,r3
   439ac:	2005883a 	mov	r2,r4
   439b0:	2807883a 	mov	r3,r5
   439b4:	e0bff615 	stw	r2,-40(fp)
   439b8:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
   439bc:	e0fff717 	ldw	r3,-36(fp)
   439c0:	00bf3034 	movhi	r2,64704
   439c4:	1885883a 	add	r2,r3,r2
   439c8:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
   439cc:	e0bfd417 	ldw	r2,-176(fp)
   439d0:	1000271e 	bne	r2,zero,43a70 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
   439d4:	e03fe315 	stw	zero,-116(fp)
   439d8:	e0bfe317 	ldw	r2,-116(fp)
   439dc:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
   439e0:	e0bff217 	ldw	r2,-56(fp)
   439e4:	e0fff317 	ldw	r3,-52(fp)
   439e8:	000d883a 	mov	r6,zero
   439ec:	01d00534 	movhi	r7,16404
   439f0:	1009883a 	mov	r4,r2
   439f4:	180b883a 	mov	r5,r3
   439f8:	004f6d00 	call	4f6d0 <__subdf3>
   439fc:	1009883a 	mov	r4,r2
   43a00:	180b883a 	mov	r5,r3
   43a04:	2005883a 	mov	r2,r4
   43a08:	2807883a 	mov	r3,r5
   43a0c:	e0bff215 	stw	r2,-56(fp)
   43a10:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
   43a14:	e0bff217 	ldw	r2,-56(fp)
   43a18:	e0fff317 	ldw	r3,-52(fp)
   43a1c:	e13ff617 	ldw	r4,-40(fp)
   43a20:	e17ff717 	ldw	r5,-36(fp)
   43a24:	200d883a 	mov	r6,r4
   43a28:	280f883a 	mov	r7,r5
   43a2c:	1009883a 	mov	r4,r2
   43a30:	180b883a 	mov	r5,r3
   43a34:	004ec940 	call	4ec94 <__gedf2>
   43a38:	0082eb16 	blt	zero,r2,445e8 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
   43a3c:	e23ff217 	ldw	r8,-56(fp)
   43a40:	e27ff317 	ldw	r9,-52(fp)
   43a44:	e0bff617 	ldw	r2,-40(fp)
   43a48:	e0fff717 	ldw	r3,-36(fp)
   43a4c:	1021883a 	mov	r16,r2
   43a50:	1c60003c 	xorhi	r17,r3,32768
   43a54:	800d883a 	mov	r6,r16
   43a58:	880f883a 	mov	r7,r17
   43a5c:	4009883a 	mov	r4,r8
   43a60:	480b883a 	mov	r5,r9
   43a64:	004ed700 	call	4ed70 <__ledf2>
   43a68:	1002da16 	blt	r2,zero,445d4 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
   43a6c:	0000fc06 	br	43e60 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
   43a70:	e0bfd917 	ldw	r2,-156(fp)
   43a74:	10007a26 	beq	r2,zero,43c60 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
   43a78:	e0bfd417 	ldw	r2,-176(fp)
   43a7c:	10ffffc4 	addi	r3,r2,-1
   43a80:	00800174 	movhi	r2,5
   43a84:	108acf04 	addi	r2,r2,11068
   43a88:	180690fa 	slli	r3,r3,3
   43a8c:	10c9883a 	add	r4,r2,r3
   43a90:	20800017 	ldw	r2,0(r4)
   43a94:	20c00117 	ldw	r3,4(r4)
   43a98:	100d883a 	mov	r6,r2
   43a9c:	180f883a 	mov	r7,r3
   43aa0:	0009883a 	mov	r4,zero
   43aa4:	014ff834 	movhi	r5,16352
   43aa8:	004e23c0 	call	4e23c <__divdf3>
   43aac:	1009883a 	mov	r4,r2
   43ab0:	180b883a 	mov	r5,r3
   43ab4:	2011883a 	mov	r8,r4
   43ab8:	2813883a 	mov	r9,r5
   43abc:	e0bff617 	ldw	r2,-40(fp)
   43ac0:	e0fff717 	ldw	r3,-36(fp)
   43ac4:	100d883a 	mov	r6,r2
   43ac8:	180f883a 	mov	r7,r3
   43acc:	4009883a 	mov	r4,r8
   43ad0:	480b883a 	mov	r5,r9
   43ad4:	004f6d00 	call	4f6d0 <__subdf3>
   43ad8:	1009883a 	mov	r4,r2
   43adc:	180b883a 	mov	r5,r3
   43ae0:	2005883a 	mov	r2,r4
   43ae4:	2807883a 	mov	r3,r5
   43ae8:	e0bff615 	stw	r2,-40(fp)
   43aec:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
   43af0:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
   43af4:	e0bff217 	ldw	r2,-56(fp)
   43af8:	e0fff317 	ldw	r3,-52(fp)
   43afc:	1009883a 	mov	r4,r2
   43b00:	180b883a 	mov	r5,r3
   43b04:	004ffcc0 	call	4ffcc <__fixdfsi>
   43b08:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   43b0c:	e43ff217 	ldw	r16,-56(fp)
   43b10:	e47ff317 	ldw	r17,-52(fp)
   43b14:	e13fed17 	ldw	r4,-76(fp)
   43b18:	005004c0 	call	5004c <__floatsidf>
   43b1c:	1009883a 	mov	r4,r2
   43b20:	180b883a 	mov	r5,r3
   43b24:	200d883a 	mov	r6,r4
   43b28:	280f883a 	mov	r7,r5
   43b2c:	8009883a 	mov	r4,r16
   43b30:	880b883a 	mov	r5,r17
   43b34:	004f6d00 	call	4f6d0 <__subdf3>
   43b38:	1009883a 	mov	r4,r2
   43b3c:	180b883a 	mov	r5,r3
   43b40:	2005883a 	mov	r2,r4
   43b44:	2807883a 	mov	r3,r5
   43b48:	e0bff215 	stw	r2,-56(fp)
   43b4c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   43b50:	e0bfe717 	ldw	r2,-100(fp)
   43b54:	10c00044 	addi	r3,r2,1
   43b58:	e0ffe715 	stw	r3,-100(fp)
   43b5c:	e0ffed17 	ldw	r3,-76(fp)
   43b60:	18c00c04 	addi	r3,r3,48
   43b64:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
   43b68:	e0bff217 	ldw	r2,-56(fp)
   43b6c:	e0fff317 	ldw	r3,-52(fp)
   43b70:	e13ff617 	ldw	r4,-40(fp)
   43b74:	e17ff717 	ldw	r5,-36(fp)
   43b78:	200d883a 	mov	r6,r4
   43b7c:	280f883a 	mov	r7,r5
   43b80:	1009883a 	mov	r4,r2
   43b84:	180b883a 	mov	r5,r3
   43b88:	004ed700 	call	4ed70 <__ledf2>
   43b8c:	1003c416 	blt	r2,zero,44aa0 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
   43b90:	e0bff217 	ldw	r2,-56(fp)
   43b94:	e0fff317 	ldw	r3,-52(fp)
   43b98:	100d883a 	mov	r6,r2
   43b9c:	180f883a 	mov	r7,r3
   43ba0:	0009883a 	mov	r4,zero
   43ba4:	014ffc34 	movhi	r5,16368
   43ba8:	004f6d00 	call	4f6d0 <__subdf3>
   43bac:	1009883a 	mov	r4,r2
   43bb0:	180b883a 	mov	r5,r3
   43bb4:	2011883a 	mov	r8,r4
   43bb8:	2813883a 	mov	r9,r5
   43bbc:	e0bff617 	ldw	r2,-40(fp)
   43bc0:	e0fff717 	ldw	r3,-36(fp)
   43bc4:	100d883a 	mov	r6,r2
   43bc8:	180f883a 	mov	r7,r3
   43bcc:	4009883a 	mov	r4,r8
   43bd0:	480b883a 	mov	r5,r9
   43bd4:	004ed700 	call	4ed70 <__ledf2>
   43bd8:	10012916 	blt	r2,zero,44080 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
   43bdc:	e0bfd217 	ldw	r2,-184(fp)
   43be0:	10800044 	addi	r2,r2,1
   43be4:	e0bfd215 	stw	r2,-184(fp)
   43be8:	e0ffd217 	ldw	r3,-184(fp)
   43bec:	e0bfd417 	ldw	r2,-176(fp)
   43bf0:	18809a0e 	bge	r3,r2,43e5c <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
   43bf4:	e0bff617 	ldw	r2,-40(fp)
   43bf8:	e0fff717 	ldw	r3,-36(fp)
   43bfc:	000d883a 	mov	r6,zero
   43c00:	01d00934 	movhi	r7,16420
   43c04:	1009883a 	mov	r4,r2
   43c08:	180b883a 	mov	r5,r3
   43c0c:	004ee640 	call	4ee64 <__muldf3>
   43c10:	1009883a 	mov	r4,r2
   43c14:	180b883a 	mov	r5,r3
   43c18:	2005883a 	mov	r2,r4
   43c1c:	2807883a 	mov	r3,r5
   43c20:	e0bff615 	stw	r2,-40(fp)
   43c24:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
   43c28:	e0bff217 	ldw	r2,-56(fp)
   43c2c:	e0fff317 	ldw	r3,-52(fp)
   43c30:	000d883a 	mov	r6,zero
   43c34:	01d00934 	movhi	r7,16420
   43c38:	1009883a 	mov	r4,r2
   43c3c:	180b883a 	mov	r5,r3
   43c40:	004ee640 	call	4ee64 <__muldf3>
   43c44:	1009883a 	mov	r4,r2
   43c48:	180b883a 	mov	r5,r3
   43c4c:	2005883a 	mov	r2,r4
   43c50:	2807883a 	mov	r3,r5
   43c54:	e0bff215 	stw	r2,-56(fp)
   43c58:	e0fff315 	stw	r3,-52(fp)
	    }
   43c5c:	003fa506 	br	43af4 <_gp+0xfffe6d98>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
   43c60:	e0bff617 	ldw	r2,-40(fp)
   43c64:	e0fff717 	ldw	r3,-36(fp)
   43c68:	e13fd417 	ldw	r4,-176(fp)
   43c6c:	217fffc4 	addi	r5,r4,-1
   43c70:	01000174 	movhi	r4,5
   43c74:	210acf04 	addi	r4,r4,11068
   43c78:	280a90fa 	slli	r5,r5,3
   43c7c:	214d883a 	add	r6,r4,r5
   43c80:	31000017 	ldw	r4,0(r6)
   43c84:	31400117 	ldw	r5,4(r6)
   43c88:	200d883a 	mov	r6,r4
   43c8c:	280f883a 	mov	r7,r5
   43c90:	1009883a 	mov	r4,r2
   43c94:	180b883a 	mov	r5,r3
   43c98:	004ee640 	call	4ee64 <__muldf3>
   43c9c:	1009883a 	mov	r4,r2
   43ca0:	180b883a 	mov	r5,r3
   43ca4:	2005883a 	mov	r2,r4
   43ca8:	2807883a 	mov	r3,r5
   43cac:	e0bff615 	stw	r2,-40(fp)
   43cb0:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
   43cb4:	00800044 	movi	r2,1
   43cb8:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
   43cbc:	e0bff217 	ldw	r2,-56(fp)
   43cc0:	e0fff317 	ldw	r3,-52(fp)
   43cc4:	1009883a 	mov	r4,r2
   43cc8:	180b883a 	mov	r5,r3
   43ccc:	004ffcc0 	call	4ffcc <__fixdfsi>
   43cd0:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   43cd4:	e43ff217 	ldw	r16,-56(fp)
   43cd8:	e47ff317 	ldw	r17,-52(fp)
   43cdc:	e13fed17 	ldw	r4,-76(fp)
   43ce0:	005004c0 	call	5004c <__floatsidf>
   43ce4:	1009883a 	mov	r4,r2
   43ce8:	180b883a 	mov	r5,r3
   43cec:	200d883a 	mov	r6,r4
   43cf0:	280f883a 	mov	r7,r5
   43cf4:	8009883a 	mov	r4,r16
   43cf8:	880b883a 	mov	r5,r17
   43cfc:	004f6d00 	call	4f6d0 <__subdf3>
   43d00:	1009883a 	mov	r4,r2
   43d04:	180b883a 	mov	r5,r3
   43d08:	2005883a 	mov	r2,r4
   43d0c:	2807883a 	mov	r3,r5
   43d10:	e0bff215 	stw	r2,-56(fp)
   43d14:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   43d18:	e0bfe717 	ldw	r2,-100(fp)
   43d1c:	10c00044 	addi	r3,r2,1
   43d20:	e0ffe715 	stw	r3,-100(fp)
   43d24:	e0ffed17 	ldw	r3,-76(fp)
   43d28:	18c00c04 	addi	r3,r3,48
   43d2c:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
   43d30:	e0ffd217 	ldw	r3,-184(fp)
   43d34:	e0bfd417 	ldw	r2,-176(fp)
   43d38:	1880351e 	bne	r3,r2,43e10 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
   43d3c:	e43ff217 	ldw	r16,-56(fp)
   43d40:	e47ff317 	ldw	r17,-52(fp)
   43d44:	e0bff617 	ldw	r2,-40(fp)
   43d48:	e0fff717 	ldw	r3,-36(fp)
   43d4c:	000d883a 	mov	r6,zero
   43d50:	01cff834 	movhi	r7,16352
   43d54:	1009883a 	mov	r4,r2
   43d58:	180b883a 	mov	r5,r3
   43d5c:	004d9900 	call	4d990 <__adddf3>
   43d60:	1009883a 	mov	r4,r2
   43d64:	180b883a 	mov	r5,r3
   43d68:	2005883a 	mov	r2,r4
   43d6c:	2807883a 	mov	r3,r5
   43d70:	100d883a 	mov	r6,r2
   43d74:	180f883a 	mov	r7,r3
   43d78:	8009883a 	mov	r4,r16
   43d7c:	880b883a 	mov	r5,r17
   43d80:	004ec940 	call	4ec94 <__gedf2>
   43d84:	0080c016 	blt	zero,r2,44088 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
   43d88:	e43ff217 	ldw	r16,-56(fp)
   43d8c:	e47ff317 	ldw	r17,-52(fp)
   43d90:	e0bff617 	ldw	r2,-40(fp)
   43d94:	e0fff717 	ldw	r3,-36(fp)
   43d98:	100d883a 	mov	r6,r2
   43d9c:	180f883a 	mov	r7,r3
   43da0:	0009883a 	mov	r4,zero
   43da4:	014ff834 	movhi	r5,16352
   43da8:	004f6d00 	call	4f6d0 <__subdf3>
   43dac:	1009883a 	mov	r4,r2
   43db0:	180b883a 	mov	r5,r3
   43db4:	2005883a 	mov	r2,r4
   43db8:	2807883a 	mov	r3,r5
   43dbc:	100d883a 	mov	r6,r2
   43dc0:	180f883a 	mov	r7,r3
   43dc4:	8009883a 	mov	r4,r16
   43dc8:	880b883a 	mov	r5,r17
   43dcc:	004ed700 	call	4ed70 <__ledf2>
   43dd0:	10000116 	blt	r2,zero,43dd8 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
   43dd4:	00002206 	br	43e60 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
   43dd8:	e0bfe717 	ldw	r2,-100(fp)
   43ddc:	10bfffc4 	addi	r2,r2,-1
   43de0:	e0bfe715 	stw	r2,-100(fp)
   43de4:	e0bfe717 	ldw	r2,-100(fp)
   43de8:	10800003 	ldbu	r2,0(r2)
   43dec:	10803fcc 	andi	r2,r2,255
   43df0:	1080201c 	xori	r2,r2,128
   43df4:	10bfe004 	addi	r2,r2,-128
   43df8:	10800c20 	cmpeqi	r2,r2,48
   43dfc:	103ff61e 	bne	r2,zero,43dd8 <_gp+0xfffe707c>
		      s++;
   43e00:	e0bfe717 	ldw	r2,-100(fp)
   43e04:	10800044 	addi	r2,r2,1
   43e08:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
   43e0c:	00032506 	br	44aa4 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
   43e10:	e0bfd217 	ldw	r2,-184(fp)
   43e14:	10800044 	addi	r2,r2,1
   43e18:	e0bfd215 	stw	r2,-184(fp)
   43e1c:	e0bff217 	ldw	r2,-56(fp)
   43e20:	e0fff317 	ldw	r3,-52(fp)
   43e24:	000d883a 	mov	r6,zero
   43e28:	01d00934 	movhi	r7,16420
   43e2c:	1009883a 	mov	r4,r2
   43e30:	180b883a 	mov	r5,r3
   43e34:	004ee640 	call	4ee64 <__muldf3>
   43e38:	1009883a 	mov	r4,r2
   43e3c:	180b883a 	mov	r5,r3
   43e40:	2005883a 	mov	r2,r4
   43e44:	2807883a 	mov	r3,r5
   43e48:	e0bff215 	stw	r2,-56(fp)
   43e4c:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
   43e50:	003f9a06 	br	43cbc <_gp+0xfffe6f60>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
   43e54:	0001883a 	nop
   43e58:	00000106 	br	43e60 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
   43e5c:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
   43e60:	e0bfe917 	ldw	r2,-92(fp)
   43e64:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
   43e68:	e0bff417 	ldw	r2,-48(fp)
   43e6c:	e0fff517 	ldw	r3,-44(fp)
   43e70:	e0bff215 	stw	r2,-56(fp)
   43e74:	e0fff315 	stw	r3,-52(fp)
      k = k0;
   43e78:	e0bfea17 	ldw	r2,-88(fp)
   43e7c:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
   43e80:	e0bfeb17 	ldw	r2,-84(fp)
   43e84:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
   43e88:	e0bff117 	ldw	r2,-60(fp)
   43e8c:	1000b816 	blt	r2,zero,44170 <_dtoa_r+0x11e4>
   43e90:	e0bfd717 	ldw	r2,-164(fp)
   43e94:	108003c8 	cmpgei	r2,r2,15
   43e98:	1000b51e 	bne	r2,zero,44170 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
   43e9c:	00800174 	movhi	r2,5
   43ea0:	108acf04 	addi	r2,r2,11068
   43ea4:	e0ffd717 	ldw	r3,-164(fp)
   43ea8:	180690fa 	slli	r3,r3,3
   43eac:	10c5883a 	add	r2,r2,r3
   43eb0:	10c00017 	ldw	r3,0(r2)
   43eb4:	e0ffe515 	stw	r3,-108(fp)
   43eb8:	10800117 	ldw	r2,4(r2)
   43ebc:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
   43ec0:	e0800217 	ldw	r2,8(fp)
   43ec4:	1000190e 	bge	r2,zero,43f2c <_dtoa_r+0xfa0>
   43ec8:	e0bfd417 	ldw	r2,-176(fp)
   43ecc:	00801716 	blt	zero,r2,43f2c <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
   43ed0:	e03fe315 	stw	zero,-116(fp)
   43ed4:	e0bfe317 	ldw	r2,-116(fp)
   43ed8:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
   43edc:	e0bfd417 	ldw	r2,-176(fp)
   43ee0:	1001bd16 	blt	r2,zero,445d8 <_dtoa_r+0x164c>
   43ee4:	e43ff217 	ldw	r16,-56(fp)
   43ee8:	e47ff317 	ldw	r17,-52(fp)
   43eec:	000d883a 	mov	r6,zero
   43ef0:	01d00534 	movhi	r7,16404
   43ef4:	e13fe517 	ldw	r4,-108(fp)
   43ef8:	e17fe617 	ldw	r5,-104(fp)
   43efc:	004ee640 	call	4ee64 <__muldf3>
   43f00:	1009883a 	mov	r4,r2
   43f04:	180b883a 	mov	r5,r3
   43f08:	2005883a 	mov	r2,r4
   43f0c:	2807883a 	mov	r3,r5
   43f10:	100d883a 	mov	r6,r2
   43f14:	180f883a 	mov	r7,r3
   43f18:	8009883a 	mov	r4,r16
   43f1c:	880b883a 	mov	r5,r17
   43f20:	004ed700 	call	4ed70 <__ledf2>
   43f24:	0081ac0e 	bge	zero,r2,445d8 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
   43f28:	0001b006 	br	445ec <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
   43f2c:	00800044 	movi	r2,1
   43f30:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
   43f34:	e0bff217 	ldw	r2,-56(fp)
   43f38:	e0fff317 	ldw	r3,-52(fp)
   43f3c:	e1bfe517 	ldw	r6,-108(fp)
   43f40:	e1ffe617 	ldw	r7,-104(fp)
   43f44:	1009883a 	mov	r4,r2
   43f48:	180b883a 	mov	r5,r3
   43f4c:	004e23c0 	call	4e23c <__divdf3>
   43f50:	1009883a 	mov	r4,r2
   43f54:	180b883a 	mov	r5,r3
   43f58:	2005883a 	mov	r2,r4
   43f5c:	2807883a 	mov	r3,r5
   43f60:	1009883a 	mov	r4,r2
   43f64:	180b883a 	mov	r5,r3
   43f68:	004ffcc0 	call	4ffcc <__fixdfsi>
   43f6c:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
   43f70:	e43ff217 	ldw	r16,-56(fp)
   43f74:	e47ff317 	ldw	r17,-52(fp)
   43f78:	e13fed17 	ldw	r4,-76(fp)
   43f7c:	005004c0 	call	5004c <__floatsidf>
   43f80:	1011883a 	mov	r8,r2
   43f84:	1813883a 	mov	r9,r3
   43f88:	e1bfe517 	ldw	r6,-108(fp)
   43f8c:	e1ffe617 	ldw	r7,-104(fp)
   43f90:	4009883a 	mov	r4,r8
   43f94:	480b883a 	mov	r5,r9
   43f98:	004ee640 	call	4ee64 <__muldf3>
   43f9c:	1009883a 	mov	r4,r2
   43fa0:	180b883a 	mov	r5,r3
   43fa4:	2005883a 	mov	r2,r4
   43fa8:	2807883a 	mov	r3,r5
   43fac:	100d883a 	mov	r6,r2
   43fb0:	180f883a 	mov	r7,r3
   43fb4:	8009883a 	mov	r4,r16
   43fb8:	880b883a 	mov	r5,r17
   43fbc:	004f6d00 	call	4f6d0 <__subdf3>
   43fc0:	1009883a 	mov	r4,r2
   43fc4:	180b883a 	mov	r5,r3
   43fc8:	2005883a 	mov	r2,r4
   43fcc:	2807883a 	mov	r3,r5
   43fd0:	e0bff215 	stw	r2,-56(fp)
   43fd4:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
   43fd8:	e0bfe717 	ldw	r2,-100(fp)
   43fdc:	10c00044 	addi	r3,r2,1
   43fe0:	e0ffe715 	stw	r3,-100(fp)
   43fe4:	e0ffed17 	ldw	r3,-76(fp)
   43fe8:	18c00c04 	addi	r3,r3,48
   43fec:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   43ff0:	e0ffd217 	ldw	r3,-184(fp)
   43ff4:	e0bfd417 	ldw	r2,-176(fp)
   43ff8:	1880401e 	bne	r3,r2,440fc <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
   43ffc:	e0bff217 	ldw	r2,-56(fp)
   44000:	e0fff317 	ldw	r3,-52(fp)
   44004:	100d883a 	mov	r6,r2
   44008:	180f883a 	mov	r7,r3
   4400c:	1009883a 	mov	r4,r2
   44010:	180b883a 	mov	r5,r3
   44014:	004d9900 	call	4d990 <__adddf3>
   44018:	1009883a 	mov	r4,r2
   4401c:	180b883a 	mov	r5,r3
   44020:	2005883a 	mov	r2,r4
   44024:	2807883a 	mov	r3,r5
   44028:	e0bff215 	stw	r2,-56(fp)
   4402c:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
   44030:	e0bff217 	ldw	r2,-56(fp)
   44034:	e0fff317 	ldw	r3,-52(fp)
   44038:	e1bfe517 	ldw	r6,-108(fp)
   4403c:	e1ffe617 	ldw	r7,-104(fp)
   44040:	1009883a 	mov	r4,r2
   44044:	180b883a 	mov	r5,r3
   44048:	004ec940 	call	4ec94 <__gedf2>
   4404c:	00801a16 	blt	zero,r2,440b8 <_dtoa_r+0x112c>
   44050:	e0bff217 	ldw	r2,-56(fp)
   44054:	e0fff317 	ldw	r3,-52(fp)
   44058:	e1bfe517 	ldw	r6,-108(fp)
   4405c:	e1ffe617 	ldw	r7,-104(fp)
   44060:	1009883a 	mov	r4,r2
   44064:	180b883a 	mov	r5,r3
   44068:	004ec0c0 	call	4ec0c <__eqdf2>
   4406c:	10003c1e 	bne	r2,zero,44160 <_dtoa_r+0x11d4>
   44070:	e0bfed17 	ldw	r2,-76(fp)
   44074:	1080004c 	andi	r2,r2,1
   44078:	10003926 	beq	r2,zero,44160 <_dtoa_r+0x11d4>
   4407c:	00000e06 	br	440b8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
   44080:	0001883a 	nop
   44084:	00000c06 	br	440b8 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
   44088:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   4408c:	00000a06 	br	440b8 <_dtoa_r+0x112c>
		    if (s == s0)
   44090:	e0ffe717 	ldw	r3,-100(fp)
   44094:	e0bfe917 	ldw	r2,-92(fp)
   44098:	1880071e 	bne	r3,r2,440b8 <_dtoa_r+0x112c>
		      {
			k++;
   4409c:	e0bfd717 	ldw	r2,-164(fp)
   440a0:	10800044 	addi	r2,r2,1
   440a4:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
   440a8:	e0bfe717 	ldw	r2,-100(fp)
   440ac:	00c00c04 	movi	r3,48
   440b0:	10c00005 	stb	r3,0(r2)
			break;
   440b4:	00000a06 	br	440e0 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   440b8:	e0bfe717 	ldw	r2,-100(fp)
   440bc:	10bfffc4 	addi	r2,r2,-1
   440c0:	e0bfe715 	stw	r2,-100(fp)
   440c4:	e0bfe717 	ldw	r2,-100(fp)
   440c8:	10800003 	ldbu	r2,0(r2)
   440cc:	10803fcc 	andi	r2,r2,255
   440d0:	1080201c 	xori	r2,r2,128
   440d4:	10bfe004 	addi	r2,r2,-128
   440d8:	10800e60 	cmpeqi	r2,r2,57
   440dc:	103fec1e 	bne	r2,zero,44090 <_gp+0xfffe7334>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
   440e0:	e0bfe717 	ldw	r2,-100(fp)
   440e4:	10c00044 	addi	r3,r2,1
   440e8:	e0ffe715 	stw	r3,-100(fp)
   440ec:	10c00003 	ldbu	r3,0(r2)
   440f0:	18c00044 	addi	r3,r3,1
   440f4:	10c00005 	stb	r3,0(r2)
		}
	      break;
   440f8:	00001906 	br	44160 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
   440fc:	e0bff217 	ldw	r2,-56(fp)
   44100:	e0fff317 	ldw	r3,-52(fp)
   44104:	000d883a 	mov	r6,zero
   44108:	01d00934 	movhi	r7,16420
   4410c:	1009883a 	mov	r4,r2
   44110:	180b883a 	mov	r5,r3
   44114:	004ee640 	call	4ee64 <__muldf3>
   44118:	1009883a 	mov	r4,r2
   4411c:	180b883a 	mov	r5,r3
   44120:	2005883a 	mov	r2,r4
   44124:	2807883a 	mov	r3,r5
   44128:	e0bff215 	stw	r2,-56(fp)
   4412c:	e0fff315 	stw	r3,-52(fp)
   44130:	e0bff217 	ldw	r2,-56(fp)
   44134:	e0fff317 	ldw	r3,-52(fp)
   44138:	000d883a 	mov	r6,zero
   4413c:	000f883a 	mov	r7,zero
   44140:	1009883a 	mov	r4,r2
   44144:	180b883a 	mov	r5,r3
   44148:	004ec0c0 	call	4ec0c <__eqdf2>
   4414c:	10000626 	beq	r2,zero,44168 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
   44150:	e0bfd217 	ldw	r2,-184(fp)
   44154:	10800044 	addi	r2,r2,1
   44158:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
   4415c:	003f7506 	br	43f34 <_gp+0xfffe71d8>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
   44160:	0001883a 	nop
   44164:	00024f06 	br	44aa4 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
   44168:	0001883a 	nop
	}
      goto ret1;
   4416c:	00024d06 	br	44aa4 <_dtoa_r+0x1b18>
    }

  m2 = b2;
   44170:	e0bfcf17 	ldw	r2,-196(fp)
   44174:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
   44178:	e0bfd017 	ldw	r2,-192(fp)
   4417c:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
   44180:	e03fe215 	stw	zero,-120(fp)
   44184:	e0bfe217 	ldw	r2,-120(fp)
   44188:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
   4418c:	e0bfd917 	ldw	r2,-156(fp)
   44190:	10003a26 	beq	r2,zero,4427c <_dtoa_r+0x12f0>
    {
      if (mode < 2)
   44194:	e0bffb17 	ldw	r2,-20(fp)
   44198:	10800088 	cmpgei	r2,r2,2
   4419c:	10000a1e 	bne	r2,zero,441c8 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   441a0:	e0bfe017 	ldw	r2,-128(fp)
   441a4:	10000326 	beq	r2,zero,441b4 <_dtoa_r+0x1228>
   441a8:	e0bff117 	ldw	r2,-60(fp)
   441ac:	10810cc4 	addi	r2,r2,1075
   441b0:	00000306 	br	441c0 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
   441b4:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   441b8:	00c00d84 	movi	r3,54
   441bc:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
   441c0:	e0bfd215 	stw	r2,-184(fp)
   441c4:	00002106 	br	4424c <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
   441c8:	e0bfd417 	ldw	r2,-176(fp)
   441cc:	10bfffc4 	addi	r2,r2,-1
   441d0:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
   441d4:	e0ffdb17 	ldw	r3,-148(fp)
   441d8:	e0bfd617 	ldw	r2,-168(fp)
   441dc:	18800516 	blt	r3,r2,441f4 <_dtoa_r+0x1268>
	    m5 -= j;
   441e0:	e0ffdb17 	ldw	r3,-148(fp)
   441e4:	e0bfd617 	ldw	r2,-168(fp)
   441e8:	1885c83a 	sub	r2,r3,r2
   441ec:	e0bfdb15 	stw	r2,-148(fp)
   441f0:	00000d06 	br	44228 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
   441f4:	e0ffd617 	ldw	r3,-168(fp)
   441f8:	e0bfdb17 	ldw	r2,-148(fp)
   441fc:	1885c83a 	sub	r2,r3,r2
   44200:	e0bfd615 	stw	r2,-168(fp)
   44204:	e0bfd617 	ldw	r2,-168(fp)
   44208:	e0ffdd17 	ldw	r3,-140(fp)
   4420c:	1885883a 	add	r2,r3,r2
   44210:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
   44214:	e0ffd017 	ldw	r3,-192(fp)
   44218:	e0bfd617 	ldw	r2,-168(fp)
   4421c:	1885883a 	add	r2,r3,r2
   44220:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
   44224:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
   44228:	e0bfd417 	ldw	r2,-176(fp)
   4422c:	e0bfd215 	stw	r2,-184(fp)
   44230:	e0bfd217 	ldw	r2,-184(fp)
   44234:	1000050e 	bge	r2,zero,4424c <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
   44238:	e0ffda17 	ldw	r3,-152(fp)
   4423c:	e0bfd217 	ldw	r2,-184(fp)
   44240:	1885c83a 	sub	r2,r3,r2
   44244:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
   44248:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
   4424c:	e0ffcf17 	ldw	r3,-196(fp)
   44250:	e0bfd217 	ldw	r2,-184(fp)
   44254:	1885883a 	add	r2,r3,r2
   44258:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
   4425c:	e0ffdc17 	ldw	r3,-144(fp)
   44260:	e0bfd217 	ldw	r2,-184(fp)
   44264:	1885883a 	add	r2,r3,r2
   44268:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
   4426c:	01400044 	movi	r5,1
   44270:	e13ff817 	ldw	r4,-32(fp)
   44274:	0047c0c0 	call	47c0c <__i2b>
   44278:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
   4427c:	e0bfda17 	ldw	r2,-152(fp)
   44280:	0080130e 	bge	zero,r2,442d0 <_dtoa_r+0x1344>
   44284:	e0bfdc17 	ldw	r2,-144(fp)
   44288:	0080110e 	bge	zero,r2,442d0 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
   4428c:	e0ffda17 	ldw	r3,-152(fp)
   44290:	e0bfdc17 	ldw	r2,-144(fp)
   44294:	1880010e 	bge	r3,r2,4429c <_dtoa_r+0x1310>
   44298:	1805883a 	mov	r2,r3
   4429c:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
   442a0:	e0ffcf17 	ldw	r3,-196(fp)
   442a4:	e0bfd217 	ldw	r2,-184(fp)
   442a8:	1885c83a 	sub	r2,r3,r2
   442ac:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
   442b0:	e0ffda17 	ldw	r3,-152(fp)
   442b4:	e0bfd217 	ldw	r2,-184(fp)
   442b8:	1885c83a 	sub	r2,r3,r2
   442bc:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
   442c0:	e0ffdc17 	ldw	r3,-144(fp)
   442c4:	e0bfd217 	ldw	r2,-184(fp)
   442c8:	1885c83a 	sub	r2,r3,r2
   442cc:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
   442d0:	e0bfd017 	ldw	r2,-192(fp)
   442d4:	0080240e 	bge	zero,r2,44368 <_dtoa_r+0x13dc>
    {
      if (leftright)
   442d8:	e0bfd917 	ldw	r2,-156(fp)
   442dc:	10001d26 	beq	r2,zero,44354 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
   442e0:	e0bfdb17 	ldw	r2,-148(fp)
   442e4:	00800f0e 	bge	zero,r2,44324 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
   442e8:	e1bfdb17 	ldw	r6,-148(fp)
   442ec:	e17fe317 	ldw	r5,-116(fp)
   442f0:	e13ff817 	ldw	r4,-32(fp)
   442f4:	00480540 	call	48054 <__pow5mult>
   442f8:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
   442fc:	e1bfe117 	ldw	r6,-124(fp)
   44300:	e17fe317 	ldw	r5,-116(fp)
   44304:	e13ff817 	ldw	r4,-32(fp)
   44308:	0047c640 	call	47c64 <__multiply>
   4430c:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
   44310:	e17fe117 	ldw	r5,-124(fp)
   44314:	e13ff817 	ldw	r4,-32(fp)
   44318:	00476dc0 	call	476dc <_Bfree>
	      b = b1;
   4431c:	e0bfee17 	ldw	r2,-72(fp)
   44320:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
   44324:	e0ffd017 	ldw	r3,-192(fp)
   44328:	e0bfdb17 	ldw	r2,-148(fp)
   4432c:	1885c83a 	sub	r2,r3,r2
   44330:	e0bfd615 	stw	r2,-168(fp)
   44334:	e0bfd617 	ldw	r2,-168(fp)
   44338:	10000b26 	beq	r2,zero,44368 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
   4433c:	e1bfd617 	ldw	r6,-168(fp)
   44340:	e17fe117 	ldw	r5,-124(fp)
   44344:	e13ff817 	ldw	r4,-32(fp)
   44348:	00480540 	call	48054 <__pow5mult>
   4434c:	e0bfe115 	stw	r2,-124(fp)
   44350:	00000506 	br	44368 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
   44354:	e1bfd017 	ldw	r6,-192(fp)
   44358:	e17fe117 	ldw	r5,-124(fp)
   4435c:	e13ff817 	ldw	r4,-32(fp)
   44360:	00480540 	call	48054 <__pow5mult>
   44364:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
   44368:	01400044 	movi	r5,1
   4436c:	e13ff817 	ldw	r4,-32(fp)
   44370:	0047c0c0 	call	47c0c <__i2b>
   44374:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
   44378:	e0bfdd17 	ldw	r2,-140(fp)
   4437c:	0080050e 	bge	zero,r2,44394 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
   44380:	e1bfdd17 	ldw	r6,-140(fp)
   44384:	e17fe417 	ldw	r5,-112(fp)
   44388:	e13ff817 	ldw	r4,-32(fp)
   4438c:	00480540 	call	48054 <__pow5mult>
   44390:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
   44394:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
   44398:	e0bffb17 	ldw	r2,-20(fp)
   4439c:	10800088 	cmpgei	r2,r2,2
   443a0:	1000121e 	bne	r2,zero,443ec <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
   443a4:	e0bff217 	ldw	r2,-56(fp)
   443a8:	1000101e 	bne	r2,zero,443ec <_dtoa_r+0x1460>
   443ac:	e0fff317 	ldw	r3,-52(fp)
   443b0:	00800434 	movhi	r2,16
   443b4:	10bfffc4 	addi	r2,r2,-1
   443b8:	1884703a 	and	r2,r3,r2
   443bc:	10000b1e 	bne	r2,zero,443ec <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
   443c0:	e0bff317 	ldw	r2,-52(fp)
   443c4:	109ffc2c 	andhi	r2,r2,32752
   443c8:	10000826 	beq	r2,zero,443ec <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
   443cc:	e0bfcf17 	ldw	r2,-196(fp)
   443d0:	10800044 	addi	r2,r2,1
   443d4:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
   443d8:	e0bfdc17 	ldw	r2,-144(fp)
   443dc:	10800044 	addi	r2,r2,1
   443e0:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
   443e4:	00800044 	movi	r2,1
   443e8:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
   443ec:	e0bfdd17 	ldw	r2,-140(fp)
   443f0:	10000f26 	beq	r2,zero,44430 <_dtoa_r+0x14a4>
   443f4:	e0bfe417 	ldw	r2,-112(fp)
   443f8:	10800417 	ldw	r2,16(r2)
   443fc:	10bfffc4 	addi	r2,r2,-1
   44400:	e0ffe417 	ldw	r3,-112(fp)
   44404:	10800144 	addi	r2,r2,5
   44408:	1085883a 	add	r2,r2,r2
   4440c:	1085883a 	add	r2,r2,r2
   44410:	1885883a 	add	r2,r3,r2
   44414:	10800017 	ldw	r2,0(r2)
   44418:	1009883a 	mov	r4,r2
   4441c:	0047a900 	call	47a90 <__hi0bits>
   44420:	1007883a 	mov	r3,r2
   44424:	00800804 	movi	r2,32
   44428:	10c5c83a 	sub	r2,r2,r3
   4442c:	00000106 	br	44434 <_dtoa_r+0x14a8>
   44430:	00800044 	movi	r2,1
   44434:	e0ffdc17 	ldw	r3,-144(fp)
   44438:	10c5883a 	add	r2,r2,r3
   4443c:	108007cc 	andi	r2,r2,31
   44440:	e0bfd215 	stw	r2,-184(fp)
   44444:	e0bfd217 	ldw	r2,-184(fp)
   44448:	10000426 	beq	r2,zero,4445c <_dtoa_r+0x14d0>
    i = 32 - i;
   4444c:	00c00804 	movi	r3,32
   44450:	e0bfd217 	ldw	r2,-184(fp)
   44454:	1885c83a 	sub	r2,r3,r2
   44458:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
   4445c:	e0bfd217 	ldw	r2,-184(fp)
   44460:	10800150 	cmplti	r2,r2,5
   44464:	1000101e 	bne	r2,zero,444a8 <_dtoa_r+0x151c>
    {
      i -= 4;
   44468:	e0bfd217 	ldw	r2,-184(fp)
   4446c:	10bfff04 	addi	r2,r2,-4
   44470:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   44474:	e0ffcf17 	ldw	r3,-196(fp)
   44478:	e0bfd217 	ldw	r2,-184(fp)
   4447c:	1885883a 	add	r2,r3,r2
   44480:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   44484:	e0ffda17 	ldw	r3,-152(fp)
   44488:	e0bfd217 	ldw	r2,-184(fp)
   4448c:	1885883a 	add	r2,r3,r2
   44490:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   44494:	e0ffdc17 	ldw	r3,-144(fp)
   44498:	e0bfd217 	ldw	r2,-184(fp)
   4449c:	1885883a 	add	r2,r3,r2
   444a0:	e0bfdc15 	stw	r2,-144(fp)
   444a4:	00001206 	br	444f0 <_dtoa_r+0x1564>
    }
  else if (i < 4)
   444a8:	e0bfd217 	ldw	r2,-184(fp)
   444ac:	10800108 	cmpgei	r2,r2,4
   444b0:	10000f1e 	bne	r2,zero,444f0 <_dtoa_r+0x1564>
    {
      i += 28;
   444b4:	e0bfd217 	ldw	r2,-184(fp)
   444b8:	10800704 	addi	r2,r2,28
   444bc:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   444c0:	e0ffcf17 	ldw	r3,-196(fp)
   444c4:	e0bfd217 	ldw	r2,-184(fp)
   444c8:	1885883a 	add	r2,r3,r2
   444cc:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   444d0:	e0ffda17 	ldw	r3,-152(fp)
   444d4:	e0bfd217 	ldw	r2,-184(fp)
   444d8:	1885883a 	add	r2,r3,r2
   444dc:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   444e0:	e0ffdc17 	ldw	r3,-144(fp)
   444e4:	e0bfd217 	ldw	r2,-184(fp)
   444e8:	1885883a 	add	r2,r3,r2
   444ec:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
   444f0:	e0bfcf17 	ldw	r2,-196(fp)
   444f4:	0080050e 	bge	zero,r2,4450c <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
   444f8:	e1bfcf17 	ldw	r6,-196(fp)
   444fc:	e17fe117 	ldw	r5,-124(fp)
   44500:	e13ff817 	ldw	r4,-32(fp)
   44504:	00481cc0 	call	481cc <__lshift>
   44508:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
   4450c:	e0bfdc17 	ldw	r2,-144(fp)
   44510:	0080050e 	bge	zero,r2,44528 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
   44514:	e1bfdc17 	ldw	r6,-144(fp)
   44518:	e17fe417 	ldw	r5,-112(fp)
   4451c:	e13ff817 	ldw	r4,-32(fp)
   44520:	00481cc0 	call	481cc <__lshift>
   44524:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
   44528:	e0bfd817 	ldw	r2,-160(fp)
   4452c:	10001726 	beq	r2,zero,4458c <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
   44530:	e17fe417 	ldw	r5,-112(fp)
   44534:	e13fe117 	ldw	r4,-124(fp)
   44538:	00483c40 	call	483c4 <__mcmp>
   4453c:	1000130e 	bge	r2,zero,4458c <_dtoa_r+0x1600>
	{
	  k--;
   44540:	e0bfd717 	ldw	r2,-164(fp)
   44544:	10bfffc4 	addi	r2,r2,-1
   44548:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
   4454c:	000f883a 	mov	r7,zero
   44550:	01800284 	movi	r6,10
   44554:	e17fe117 	ldw	r5,-124(fp)
   44558:	e13ff817 	ldw	r4,-32(fp)
   4455c:	00477580 	call	47758 <__multadd>
   44560:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
   44564:	e0bfd917 	ldw	r2,-156(fp)
   44568:	10000626 	beq	r2,zero,44584 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
   4456c:	000f883a 	mov	r7,zero
   44570:	01800284 	movi	r6,10
   44574:	e17fe317 	ldw	r5,-116(fp)
   44578:	e13ff817 	ldw	r4,-32(fp)
   4457c:	00477580 	call	47758 <__multadd>
   44580:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
   44584:	e0bfd517 	ldw	r2,-172(fp)
   44588:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
   4458c:	e0bfd417 	ldw	r2,-176(fp)
   44590:	00801f16 	blt	zero,r2,44610 <_dtoa_r+0x1684>
   44594:	e0bffb17 	ldw	r2,-20(fp)
   44598:	108000d0 	cmplti	r2,r2,3
   4459c:	10001c1e 	bne	r2,zero,44610 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
   445a0:	e0bfd417 	ldw	r2,-176(fp)
   445a4:	10000c16 	blt	r2,zero,445d8 <_dtoa_r+0x164c>
   445a8:	000f883a 	mov	r7,zero
   445ac:	01800144 	movi	r6,5
   445b0:	e17fe417 	ldw	r5,-112(fp)
   445b4:	e13ff817 	ldw	r4,-32(fp)
   445b8:	00477580 	call	47758 <__multadd>
   445bc:	e0bfe415 	stw	r2,-112(fp)
   445c0:	e17fe417 	ldw	r5,-112(fp)
   445c4:	e13fe117 	ldw	r4,-124(fp)
   445c8:	00483c40 	call	483c4 <__mcmp>
   445cc:	00800716 	blt	zero,r2,445ec <_dtoa_r+0x1660>
   445d0:	00000106 	br	445d8 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
   445d4:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
   445d8:	e0800217 	ldw	r2,8(fp)
   445dc:	0084303a 	nor	r2,zero,r2
   445e0:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
   445e4:	00011d06 	br	44a5c <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
   445e8:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
   445ec:	e0bfe717 	ldw	r2,-100(fp)
   445f0:	10c00044 	addi	r3,r2,1
   445f4:	e0ffe715 	stw	r3,-100(fp)
   445f8:	00c00c44 	movi	r3,49
   445fc:	10c00005 	stb	r3,0(r2)
      k++;
   44600:	e0bfd717 	ldw	r2,-164(fp)
   44604:	10800044 	addi	r2,r2,1
   44608:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
   4460c:	00011306 	br	44a5c <_dtoa_r+0x1ad0>
    }
  if (leftright)
   44610:	e0bfd917 	ldw	r2,-156(fp)
   44614:	1000ba26 	beq	r2,zero,44900 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
   44618:	e0bfda17 	ldw	r2,-152(fp)
   4461c:	0080050e 	bge	zero,r2,44634 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
   44620:	e1bfda17 	ldw	r6,-152(fp)
   44624:	e17fe317 	ldw	r5,-116(fp)
   44628:	e13ff817 	ldw	r4,-32(fp)
   4462c:	00481cc0 	call	481cc <__lshift>
   44630:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
   44634:	e0bfe317 	ldw	r2,-116(fp)
   44638:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
   4463c:	e0bfde17 	ldw	r2,-136(fp)
   44640:	10001826 	beq	r2,zero,446a4 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
   44644:	e0bfe317 	ldw	r2,-116(fp)
   44648:	10800117 	ldw	r2,4(r2)
   4464c:	100b883a 	mov	r5,r2
   44650:	e13ff817 	ldw	r4,-32(fp)
   44654:	00475ac0 	call	475ac <_Balloc>
   44658:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
   4465c:	e0bfe317 	ldw	r2,-116(fp)
   44660:	10c00304 	addi	r3,r2,12
   44664:	e0bfe217 	ldw	r2,-120(fp)
   44668:	11000304 	addi	r4,r2,12
   4466c:	e0bfe217 	ldw	r2,-120(fp)
   44670:	10800417 	ldw	r2,16(r2)
   44674:	10800084 	addi	r2,r2,2
   44678:	1085883a 	add	r2,r2,r2
   4467c:	1085883a 	add	r2,r2,r2
   44680:	100d883a 	mov	r6,r2
   44684:	200b883a 	mov	r5,r4
   44688:	1809883a 	mov	r4,r3
   4468c:	00472600 	call	47260 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
   44690:	01800044 	movi	r6,1
   44694:	e17fe317 	ldw	r5,-116(fp)
   44698:	e13ff817 	ldw	r4,-32(fp)
   4469c:	00481cc0 	call	481cc <__lshift>
   446a0:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
   446a4:	00800044 	movi	r2,1
   446a8:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
   446ac:	e17fe417 	ldw	r5,-112(fp)
   446b0:	e13fe117 	ldw	r4,-124(fp)
   446b4:	0042bc80 	call	42bc8 <quorem>
   446b8:	10800c04 	addi	r2,r2,48
   446bc:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
   446c0:	e17fe217 	ldw	r5,-120(fp)
   446c4:	e13fe117 	ldw	r4,-124(fp)
   446c8:	00483c40 	call	483c4 <__mcmp>
   446cc:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
   446d0:	e1bfe317 	ldw	r6,-116(fp)
   446d4:	e17fe417 	ldw	r5,-112(fp)
   446d8:	e13ff817 	ldw	r4,-32(fp)
   446dc:	00484d80 	call	484d8 <__mdiff>
   446e0:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
   446e4:	e0bfef17 	ldw	r2,-68(fp)
   446e8:	10800317 	ldw	r2,12(r2)
   446ec:	1000041e 	bne	r2,zero,44700 <_dtoa_r+0x1774>
   446f0:	e17fef17 	ldw	r5,-68(fp)
   446f4:	e13fe117 	ldw	r4,-124(fp)
   446f8:	00483c40 	call	483c4 <__mcmp>
   446fc:	00000106 	br	44704 <_dtoa_r+0x1778>
   44700:	00800044 	movi	r2,1
   44704:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
   44708:	e17fef17 	ldw	r5,-68(fp)
   4470c:	e13ff817 	ldw	r4,-32(fp)
   44710:	00476dc0 	call	476dc <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
   44714:	e0bfec17 	ldw	r2,-80(fp)
   44718:	1000131e 	bne	r2,zero,44768 <_dtoa_r+0x17dc>
   4471c:	e0bffb17 	ldw	r2,-20(fp)
   44720:	1000111e 	bne	r2,zero,44768 <_dtoa_r+0x17dc>
   44724:	e0bff217 	ldw	r2,-56(fp)
   44728:	1080004c 	andi	r2,r2,1
   4472c:	10000e1e 	bne	r2,zero,44768 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
   44730:	e0bfd117 	ldw	r2,-188(fp)
   44734:	10800e58 	cmpnei	r2,r2,57
   44738:	10003726 	beq	r2,zero,44818 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
   4473c:	e0bfd617 	ldw	r2,-168(fp)
   44740:	0080030e 	bge	zero,r2,44750 <_dtoa_r+0x17c4>
		dig++;
   44744:	e0bfd117 	ldw	r2,-188(fp)
   44748:	10800044 	addi	r2,r2,1
   4474c:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
   44750:	e0bfe717 	ldw	r2,-100(fp)
   44754:	10c00044 	addi	r3,r2,1
   44758:	e0ffe715 	stw	r3,-100(fp)
   4475c:	e0ffd117 	ldw	r3,-188(fp)
   44760:	10c00005 	stb	r3,0(r2)
	      goto ret;
   44764:	0000bd06 	br	44a5c <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
   44768:	e0bfd617 	ldw	r2,-168(fp)
   4476c:	10000716 	blt	r2,zero,4478c <_dtoa_r+0x1800>
   44770:	e0bfd617 	ldw	r2,-168(fp)
   44774:	1000221e 	bne	r2,zero,44800 <_dtoa_r+0x1874>
   44778:	e0bffb17 	ldw	r2,-20(fp)
   4477c:	1000201e 	bne	r2,zero,44800 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
   44780:	e0bff217 	ldw	r2,-56(fp)
   44784:	1080004c 	andi	r2,r2,1
   44788:	10001d1e 	bne	r2,zero,44800 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
   4478c:	e0bfec17 	ldw	r2,-80(fp)
   44790:	0080150e 	bge	zero,r2,447e8 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
   44794:	01800044 	movi	r6,1
   44798:	e17fe117 	ldw	r5,-124(fp)
   4479c:	e13ff817 	ldw	r4,-32(fp)
   447a0:	00481cc0 	call	481cc <__lshift>
   447a4:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
   447a8:	e17fe417 	ldw	r5,-112(fp)
   447ac:	e13fe117 	ldw	r4,-124(fp)
   447b0:	00483c40 	call	483c4 <__mcmp>
   447b4:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
   447b8:	e0bfec17 	ldw	r2,-80(fp)
   447bc:	00800516 	blt	zero,r2,447d4 <_dtoa_r+0x1848>
   447c0:	e0bfec17 	ldw	r2,-80(fp)
   447c4:	1000081e 	bne	r2,zero,447e8 <_dtoa_r+0x185c>
   447c8:	e0bfd117 	ldw	r2,-188(fp)
   447cc:	1080004c 	andi	r2,r2,1
   447d0:	10000526 	beq	r2,zero,447e8 <_dtoa_r+0x185c>
		      && dig++ == '9')
   447d4:	e0bfd117 	ldw	r2,-188(fp)
   447d8:	10c00044 	addi	r3,r2,1
   447dc:	e0ffd115 	stw	r3,-188(fp)
   447e0:	10800e58 	cmpnei	r2,r2,57
   447e4:	10000e26 	beq	r2,zero,44820 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
   447e8:	e0bfe717 	ldw	r2,-100(fp)
   447ec:	10c00044 	addi	r3,r2,1
   447f0:	e0ffe715 	stw	r3,-100(fp)
   447f4:	e0ffd117 	ldw	r3,-188(fp)
   447f8:	10c00005 	stb	r3,0(r2)
	      goto ret;
   447fc:	00009706 	br	44a5c <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
   44800:	e0bfec17 	ldw	r2,-80(fp)
   44804:	0080140e 	bge	zero,r2,44858 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
   44808:	e0bfd117 	ldw	r2,-188(fp)
   4480c:	10800e58 	cmpnei	r2,r2,57
   44810:	10000a1e 	bne	r2,zero,4483c <_dtoa_r+0x18b0>
   44814:	00000306 	br	44824 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
   44818:	0001883a 	nop
   4481c:	00000106 	br	44824 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
   44820:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
   44824:	e0bfe717 	ldw	r2,-100(fp)
   44828:	10c00044 	addi	r3,r2,1
   4482c:	e0ffe715 	stw	r3,-100(fp)
   44830:	00c00e44 	movi	r3,57
   44834:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
   44838:	00005d06 	br	449b0 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
   4483c:	e0bfe717 	ldw	r2,-100(fp)
   44840:	10c00044 	addi	r3,r2,1
   44844:	e0ffe715 	stw	r3,-100(fp)
   44848:	e0ffd117 	ldw	r3,-188(fp)
   4484c:	18c00044 	addi	r3,r3,1
   44850:	10c00005 	stb	r3,0(r2)
	      goto ret;
   44854:	00008106 	br	44a5c <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
   44858:	e0bfe717 	ldw	r2,-100(fp)
   4485c:	10c00044 	addi	r3,r2,1
   44860:	e0ffe715 	stw	r3,-100(fp)
   44864:	e0ffd117 	ldw	r3,-188(fp)
   44868:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   4486c:	e0ffd217 	ldw	r3,-184(fp)
   44870:	e0bfd417 	ldw	r2,-176(fp)
   44874:	18803b26 	beq	r3,r2,44964 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
   44878:	000f883a 	mov	r7,zero
   4487c:	01800284 	movi	r6,10
   44880:	e17fe117 	ldw	r5,-124(fp)
   44884:	e13ff817 	ldw	r4,-32(fp)
   44888:	00477580 	call	47758 <__multadd>
   4488c:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
   44890:	e0ffe217 	ldw	r3,-120(fp)
   44894:	e0bfe317 	ldw	r2,-116(fp)
   44898:	1880091e 	bne	r3,r2,448c0 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
   4489c:	000f883a 	mov	r7,zero
   448a0:	01800284 	movi	r6,10
   448a4:	e17fe317 	ldw	r5,-116(fp)
   448a8:	e13ff817 	ldw	r4,-32(fp)
   448ac:	00477580 	call	47758 <__multadd>
   448b0:	e0bfe315 	stw	r2,-116(fp)
   448b4:	e0bfe317 	ldw	r2,-116(fp)
   448b8:	e0bfe215 	stw	r2,-120(fp)
   448bc:	00000c06 	br	448f0 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
   448c0:	000f883a 	mov	r7,zero
   448c4:	01800284 	movi	r6,10
   448c8:	e17fe217 	ldw	r5,-120(fp)
   448cc:	e13ff817 	ldw	r4,-32(fp)
   448d0:	00477580 	call	47758 <__multadd>
   448d4:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
   448d8:	000f883a 	mov	r7,zero
   448dc:	01800284 	movi	r6,10
   448e0:	e17fe317 	ldw	r5,-116(fp)
   448e4:	e13ff817 	ldw	r4,-32(fp)
   448e8:	00477580 	call	47758 <__multadd>
   448ec:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
   448f0:	e0bfd217 	ldw	r2,-184(fp)
   448f4:	10800044 	addi	r2,r2,1
   448f8:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
   448fc:	003f6b06 	br	446ac <_gp+0xfffe7950>
    }
  else
    for (i = 1;; i++)
   44900:	00800044 	movi	r2,1
   44904:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
   44908:	e43fe717 	ldw	r16,-100(fp)
   4490c:	80800044 	addi	r2,r16,1
   44910:	e0bfe715 	stw	r2,-100(fp)
   44914:	e17fe417 	ldw	r5,-112(fp)
   44918:	e13fe117 	ldw	r4,-124(fp)
   4491c:	0042bc80 	call	42bc8 <quorem>
   44920:	10800c04 	addi	r2,r2,48
   44924:	e0bfd115 	stw	r2,-188(fp)
   44928:	e0bfd117 	ldw	r2,-188(fp)
   4492c:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
   44930:	e0ffd217 	ldw	r3,-184(fp)
   44934:	e0bfd417 	ldw	r2,-176(fp)
   44938:	18800c0e 	bge	r3,r2,4496c <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
   4493c:	000f883a 	mov	r7,zero
   44940:	01800284 	movi	r6,10
   44944:	e17fe117 	ldw	r5,-124(fp)
   44948:	e13ff817 	ldw	r4,-32(fp)
   4494c:	00477580 	call	47758 <__multadd>
   44950:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
   44954:	e0bfd217 	ldw	r2,-184(fp)
   44958:	10800044 	addi	r2,r2,1
   4495c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
   44960:	003fe906 	br	44908 <_gp+0xfffe7bac>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
   44964:	0001883a 	nop
   44968:	00000106 	br	44970 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
   4496c:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
   44970:	01800044 	movi	r6,1
   44974:	e17fe117 	ldw	r5,-124(fp)
   44978:	e13ff817 	ldw	r4,-32(fp)
   4497c:	00481cc0 	call	481cc <__lshift>
   44980:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
   44984:	e17fe417 	ldw	r5,-112(fp)
   44988:	e13fe117 	ldw	r4,-124(fp)
   4498c:	00483c40 	call	483c4 <__mcmp>
   44990:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
   44994:	e0bfd617 	ldw	r2,-168(fp)
   44998:	00801216 	blt	zero,r2,449e4 <_dtoa_r+0x1a58>
   4499c:	e0bfd617 	ldw	r2,-168(fp)
   449a0:	1000211e 	bne	r2,zero,44a28 <_dtoa_r+0x1a9c>
   449a4:	e0bfd117 	ldw	r2,-188(fp)
   449a8:	1080004c 	andi	r2,r2,1
   449ac:	10001e26 	beq	r2,zero,44a28 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
   449b0:	00000c06 	br	449e4 <_dtoa_r+0x1a58>
	if (s == s0)
   449b4:	e0ffe717 	ldw	r3,-100(fp)
   449b8:	e0bfe917 	ldw	r2,-92(fp)
   449bc:	1880091e 	bne	r3,r2,449e4 <_dtoa_r+0x1a58>
	  {
	    k++;
   449c0:	e0bfd717 	ldw	r2,-164(fp)
   449c4:	10800044 	addi	r2,r2,1
   449c8:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
   449cc:	e0bfe717 	ldw	r2,-100(fp)
   449d0:	10c00044 	addi	r3,r2,1
   449d4:	e0ffe715 	stw	r3,-100(fp)
   449d8:	00c00c44 	movi	r3,49
   449dc:	10c00005 	stb	r3,0(r2)
	    goto ret;
   449e0:	00001e06 	br	44a5c <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
   449e4:	e0bfe717 	ldw	r2,-100(fp)
   449e8:	10bfffc4 	addi	r2,r2,-1
   449ec:	e0bfe715 	stw	r2,-100(fp)
   449f0:	e0bfe717 	ldw	r2,-100(fp)
   449f4:	10800003 	ldbu	r2,0(r2)
   449f8:	10803fcc 	andi	r2,r2,255
   449fc:	1080201c 	xori	r2,r2,128
   44a00:	10bfe004 	addi	r2,r2,-128
   44a04:	10800e60 	cmpeqi	r2,r2,57
   44a08:	103fea1e 	bne	r2,zero,449b4 <_gp+0xfffe7c58>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
   44a0c:	e0bfe717 	ldw	r2,-100(fp)
   44a10:	10c00044 	addi	r3,r2,1
   44a14:	e0ffe715 	stw	r3,-100(fp)
   44a18:	10c00003 	ldbu	r3,0(r2)
   44a1c:	18c00044 	addi	r3,r3,1
   44a20:	10c00005 	stb	r3,0(r2)
   44a24:	00000d06 	br	44a5c <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
   44a28:	e0bfe717 	ldw	r2,-100(fp)
   44a2c:	10bfffc4 	addi	r2,r2,-1
   44a30:	e0bfe715 	stw	r2,-100(fp)
   44a34:	e0bfe717 	ldw	r2,-100(fp)
   44a38:	10800003 	ldbu	r2,0(r2)
   44a3c:	10803fcc 	andi	r2,r2,255
   44a40:	1080201c 	xori	r2,r2,128
   44a44:	10bfe004 	addi	r2,r2,-128
   44a48:	10800c20 	cmpeqi	r2,r2,48
   44a4c:	103ff61e 	bne	r2,zero,44a28 <_gp+0xfffe7ccc>
      s++;
   44a50:	e0bfe717 	ldw	r2,-100(fp)
   44a54:	10800044 	addi	r2,r2,1
   44a58:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
   44a5c:	e17fe417 	ldw	r5,-112(fp)
   44a60:	e13ff817 	ldw	r4,-32(fp)
   44a64:	00476dc0 	call	476dc <_Bfree>
  if (mhi)
   44a68:	e0bfe317 	ldw	r2,-116(fp)
   44a6c:	10000d26 	beq	r2,zero,44aa4 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
   44a70:	e0bfe217 	ldw	r2,-120(fp)
   44a74:	10000626 	beq	r2,zero,44a90 <_dtoa_r+0x1b04>
   44a78:	e0ffe217 	ldw	r3,-120(fp)
   44a7c:	e0bfe317 	ldw	r2,-116(fp)
   44a80:	18800326 	beq	r3,r2,44a90 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
   44a84:	e17fe217 	ldw	r5,-120(fp)
   44a88:	e13ff817 	ldw	r4,-32(fp)
   44a8c:	00476dc0 	call	476dc <_Bfree>
      Bfree (ptr, mhi);
   44a90:	e17fe317 	ldw	r5,-116(fp)
   44a94:	e13ff817 	ldw	r4,-32(fp)
   44a98:	00476dc0 	call	476dc <_Bfree>
   44a9c:	00000106 	br	44aa4 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
   44aa0:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
   44aa4:	e17fe117 	ldw	r5,-124(fp)
   44aa8:	e13ff817 	ldw	r4,-32(fp)
   44aac:	00476dc0 	call	476dc <_Bfree>
  *s = 0;
   44ab0:	e0bfe717 	ldw	r2,-100(fp)
   44ab4:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
   44ab8:	e0bfd717 	ldw	r2,-164(fp)
   44abc:	10c00044 	addi	r3,r2,1
   44ac0:	e0800317 	ldw	r2,12(fp)
   44ac4:	10c00015 	stw	r3,0(r2)
  if (rve)
   44ac8:	e0800517 	ldw	r2,20(fp)
   44acc:	10000326 	beq	r2,zero,44adc <_dtoa_r+0x1b50>
    *rve = s;
   44ad0:	e0800517 	ldw	r2,20(fp)
   44ad4:	e0ffe717 	ldw	r3,-100(fp)
   44ad8:	10c00015 	stw	r3,0(r2)
  return s0;
   44adc:	e0bfe917 	ldw	r2,-92(fp)
}
   44ae0:	e6fffc04 	addi	sp,fp,-16
   44ae4:	dfc00517 	ldw	ra,20(sp)
   44ae8:	df000417 	ldw	fp,16(sp)
   44aec:	dcc00317 	ldw	r19,12(sp)
   44af0:	dc800217 	ldw	r18,8(sp)
   44af4:	dc400117 	ldw	r17,4(sp)
   44af8:	dc000017 	ldw	r16,0(sp)
   44afc:	dec00604 	addi	sp,sp,24
   44b00:	f800283a 	ret

00044b04 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   44b04:	defff504 	addi	sp,sp,-44
   44b08:	dfc00a15 	stw	ra,40(sp)
   44b0c:	df000915 	stw	fp,36(sp)
   44b10:	dcc00815 	stw	r19,32(sp)
   44b14:	dc800715 	stw	r18,28(sp)
   44b18:	dc400615 	stw	r17,24(sp)
   44b1c:	dc000515 	stw	r16,20(sp)
   44b20:	df000904 	addi	fp,sp,36
   44b24:	e13ffb15 	stw	r4,-20(fp)
   44b28:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
   44b2c:	8080030b 	ldhu	r2,12(r16)
   44b30:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
   44b34:	e0bff90b 	ldhu	r2,-28(fp)
   44b38:	10bfffcc 	andi	r2,r2,65535
   44b3c:	1080020c 	andi	r2,r2,8
   44b40:	1000831e 	bne	r2,zero,44d50 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   44b44:	8080030b 	ldhu	r2,12(r16)
   44b48:	10820014 	ori	r2,r2,2048
   44b4c:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   44b50:	80800117 	ldw	r2,4(r16)
   44b54:	00800216 	blt	zero,r2,44b60 <__sflush_r+0x5c>
   44b58:	80800f17 	ldw	r2,60(r16)
   44b5c:	00807a0e 	bge	zero,r2,44d48 <__sflush_r+0x244>
   44b60:	80800a17 	ldw	r2,40(r16)
   44b64:	10007826 	beq	r2,zero,44d48 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
   44b68:	e0bffb17 	ldw	r2,-20(fp)
   44b6c:	10800017 	ldw	r2,0(r2)
   44b70:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
   44b74:	e0bffb17 	ldw	r2,-20(fp)
   44b78:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   44b7c:	8080030b 	ldhu	r2,12(r16)
   44b80:	10bfffcc 	andi	r2,r2,65535
   44b84:	1084000c 	andi	r2,r2,4096
   44b88:	10000326 	beq	r2,zero,44b98 <__sflush_r+0x94>
	    curoff = fp->_offset;
   44b8c:	80801417 	ldw	r2,80(r16)
   44b90:	e0bff715 	stw	r2,-36(fp)
   44b94:	00002206 	br	44c20 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   44b98:	80800a17 	ldw	r2,40(r16)
   44b9c:	80c00717 	ldw	r3,28(r16)
   44ba0:	01c00044 	movi	r7,1
   44ba4:	000d883a 	mov	r6,zero
   44ba8:	180b883a 	mov	r5,r3
   44bac:	e13ffb17 	ldw	r4,-20(fp)
   44bb0:	103ee83a 	callr	r2
   44bb4:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
   44bb8:	e0bff717 	ldw	r2,-36(fp)
   44bbc:	10bfffd8 	cmpnei	r2,r2,-1
   44bc0:	1000171e 	bne	r2,zero,44c20 <__sflush_r+0x11c>
   44bc4:	e0bffb17 	ldw	r2,-20(fp)
   44bc8:	10800017 	ldw	r2,0(r2)
   44bcc:	10001426 	beq	r2,zero,44c20 <__sflush_r+0x11c>
		{
		  int result = EOF;
   44bd0:	00bfffc4 	movi	r2,-1
   44bd4:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   44bd8:	e0bffb17 	ldw	r2,-20(fp)
   44bdc:	10800017 	ldw	r2,0(r2)
   44be0:	10800760 	cmpeqi	r2,r2,29
   44be4:	1000041e 	bne	r2,zero,44bf8 <__sflush_r+0xf4>
   44be8:	e0bffb17 	ldw	r2,-20(fp)
   44bec:	10800017 	ldw	r2,0(r2)
   44bf0:	10800598 	cmpnei	r2,r2,22
   44bf4:	1000051e 	bne	r2,zero,44c0c <__sflush_r+0x108>
		    {
		      result = 0;
   44bf8:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
   44bfc:	e0bffb17 	ldw	r2,-20(fp)
   44c00:	e0fffa17 	ldw	r3,-24(fp)
   44c04:	10c00015 	stw	r3,0(r2)
   44c08:	00000306 	br	44c18 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
   44c0c:	8080030b 	ldhu	r2,12(r16)
   44c10:	10801014 	ori	r2,r2,64
   44c14:	8080030d 	sth	r2,12(r16)
		  return result;
   44c18:	e0bff817 	ldw	r2,-32(fp)
   44c1c:	00007106 	br	44de4 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
   44c20:	8080030b 	ldhu	r2,12(r16)
   44c24:	10bfffcc 	andi	r2,r2,65535
   44c28:	1080010c 	andi	r2,r2,4
   44c2c:	10000a26 	beq	r2,zero,44c58 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   44c30:	80800117 	ldw	r2,4(r16)
   44c34:	e0fff717 	ldw	r3,-36(fp)
   44c38:	1885c83a 	sub	r2,r3,r2
   44c3c:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
   44c40:	80800c17 	ldw	r2,48(r16)
   44c44:	10000426 	beq	r2,zero,44c58 <__sflush_r+0x154>
                curoff -= fp->_ur;
   44c48:	80800f17 	ldw	r2,60(r16)
   44c4c:	e0fff717 	ldw	r3,-36(fp)
   44c50:	1885c83a 	sub	r2,r3,r2
   44c54:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
   44c58:	80800a17 	ldw	r2,40(r16)
   44c5c:	80c00717 	ldw	r3,28(r16)
   44c60:	000f883a 	mov	r7,zero
   44c64:	e1bff717 	ldw	r6,-36(fp)
   44c68:	180b883a 	mov	r5,r3
   44c6c:	e13ffb17 	ldw	r4,-20(fp)
   44c70:	103ee83a 	callr	r2
   44c74:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
   44c78:	e0bff717 	ldw	r2,-36(fp)
   44c7c:	10bfffd8 	cmpnei	r2,r2,-1
   44c80:	10000b1e 	bne	r2,zero,44cb0 <__sflush_r+0x1ac>
   44c84:	e0bffb17 	ldw	r2,-20(fp)
   44c88:	10800017 	ldw	r2,0(r2)
   44c8c:	10000826 	beq	r2,zero,44cb0 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   44c90:	e0bffb17 	ldw	r2,-20(fp)
   44c94:	10800017 	ldw	r2,0(r2)
   44c98:	10800760 	cmpeqi	r2,r2,29
   44c9c:	1000041e 	bne	r2,zero,44cb0 <__sflush_r+0x1ac>
   44ca0:	e0bffb17 	ldw	r2,-20(fp)
   44ca4:	10800017 	ldw	r2,0(r2)
   44ca8:	10800598 	cmpnei	r2,r2,22
   44cac:	1000211e 	bne	r2,zero,44d34 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   44cb0:	80c0030b 	ldhu	r3,12(r16)
   44cb4:	00bdffc4 	movi	r2,-2049
   44cb8:	1884703a 	and	r2,r3,r2
   44cbc:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
   44cc0:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
   44cc4:	80800417 	ldw	r2,16(r16)
   44cc8:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   44ccc:	8080030b 	ldhu	r2,12(r16)
   44cd0:	10bfffcc 	andi	r2,r2,65535
   44cd4:	1084000c 	andi	r2,r2,4096
   44cd8:	10000826 	beq	r2,zero,44cfc <__sflush_r+0x1f8>
   44cdc:	e0bff717 	ldw	r2,-36(fp)
   44ce0:	10bfffd8 	cmpnei	r2,r2,-1
   44ce4:	1000031e 	bne	r2,zero,44cf4 <__sflush_r+0x1f0>
   44ce8:	e0bffb17 	ldw	r2,-20(fp)
   44cec:	10800017 	ldw	r2,0(r2)
   44cf0:	1000021e 	bne	r2,zero,44cfc <__sflush_r+0x1f8>
		fp->_offset = curoff;
   44cf4:	e0bff717 	ldw	r2,-36(fp)
   44cf8:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
   44cfc:	e0bffb17 	ldw	r2,-20(fp)
   44d00:	e0fffa17 	ldw	r3,-24(fp)
   44d04:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
   44d08:	80800c17 	ldw	r2,48(r16)
   44d0c:	10000e26 	beq	r2,zero,44d48 <__sflush_r+0x244>
		FREEUB (ptr, fp);
   44d10:	80c00c17 	ldw	r3,48(r16)
   44d14:	80801004 	addi	r2,r16,64
   44d18:	18800426 	beq	r3,r2,44d2c <__sflush_r+0x228>
   44d1c:	80800c17 	ldw	r2,48(r16)
   44d20:	100b883a 	mov	r5,r2
   44d24:	e13ffb17 	ldw	r4,-20(fp)
   44d28:	00454c00 	call	454c0 <_free_r>
   44d2c:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
   44d30:	00000506 	br	44d48 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
   44d34:	8080030b 	ldhu	r2,12(r16)
   44d38:	10801014 	ori	r2,r2,64
   44d3c:	8080030d 	sth	r2,12(r16)
	      return EOF;
   44d40:	00bfffc4 	movi	r2,-1
   44d44:	00002706 	br	44de4 <__sflush_r+0x2e0>
	    }
	}
      return 0;
   44d48:	0005883a 	mov	r2,zero
   44d4c:	00002506 	br	44de4 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
   44d50:	84400417 	ldw	r17,16(r16)
   44d54:	8800021e 	bne	r17,zero,44d60 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
   44d58:	0005883a 	mov	r2,zero
   44d5c:	00002106 	br	44de4 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
   44d60:	80800017 	ldw	r2,0(r16)
   44d64:	1007883a 	mov	r3,r2
   44d68:	8805883a 	mov	r2,r17
   44d6c:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
   44d70:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   44d74:	e0bff90b 	ldhu	r2,-28(fp)
   44d78:	10bfffcc 	andi	r2,r2,65535
   44d7c:	108000cc 	andi	r2,r2,3
   44d80:	1000021e 	bne	r2,zero,44d8c <__sflush_r+0x288>
   44d84:	80800517 	ldw	r2,20(r16)
   44d88:	00000106 	br	44d90 <__sflush_r+0x28c>
   44d8c:	0005883a 	mov	r2,zero
   44d90:	80800215 	stw	r2,8(r16)

  while (n > 0)
   44d94:	00001106 	br	44ddc <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
   44d98:	80800917 	ldw	r2,36(r16)
   44d9c:	80c00717 	ldw	r3,28(r16)
   44da0:	900f883a 	mov	r7,r18
   44da4:	880d883a 	mov	r6,r17
   44da8:	180b883a 	mov	r5,r3
   44dac:	e13ffb17 	ldw	r4,-20(fp)
   44db0:	103ee83a 	callr	r2
   44db4:	1027883a 	mov	r19,r2
      if (t <= 0)
   44db8:	04c00516 	blt	zero,r19,44dd0 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
   44dbc:	8080030b 	ldhu	r2,12(r16)
   44dc0:	10801014 	ori	r2,r2,64
   44dc4:	8080030d 	sth	r2,12(r16)
          return EOF;
   44dc8:	00bfffc4 	movi	r2,-1
   44dcc:	00000506 	br	44de4 <__sflush_r+0x2e0>
	}
      p += t;
   44dd0:	9805883a 	mov	r2,r19
   44dd4:	88a3883a 	add	r17,r17,r2
      n -= t;
   44dd8:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
   44ddc:	04bfee16 	blt	zero,r18,44d98 <_gp+0xfffe803c>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
   44de0:	0005883a 	mov	r2,zero
}
   44de4:	e6fffc04 	addi	sp,fp,-16
   44de8:	dfc00517 	ldw	ra,20(sp)
   44dec:	df000417 	ldw	fp,16(sp)
   44df0:	dcc00317 	ldw	r19,12(sp)
   44df4:	dc800217 	ldw	r18,8(sp)
   44df8:	dc400117 	ldw	r17,4(sp)
   44dfc:	dc000017 	ldw	r16,0(sp)
   44e00:	dec00604 	addi	sp,sp,24
   44e04:	f800283a 	ret

00044e08 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   44e08:	defffa04 	addi	sp,sp,-24
   44e0c:	dfc00515 	stw	ra,20(sp)
   44e10:	df000415 	stw	fp,16(sp)
   44e14:	dc000315 	stw	r16,12(sp)
   44e18:	df000404 	addi	fp,sp,16
   44e1c:	e13ffe15 	stw	r4,-8(fp)
   44e20:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   44e24:	e0bffe17 	ldw	r2,-8(fp)
   44e28:	e0bffc15 	stw	r2,-16(fp)
   44e2c:	e0bffc17 	ldw	r2,-16(fp)
   44e30:	10000526 	beq	r2,zero,44e48 <_fflush_r+0x40>
   44e34:	e0bffc17 	ldw	r2,-16(fp)
   44e38:	10800e17 	ldw	r2,56(r2)
   44e3c:	1000021e 	bne	r2,zero,44e48 <_fflush_r+0x40>
   44e40:	e13ffc17 	ldw	r4,-16(fp)
   44e44:	00452a00 	call	452a0 <__sinit>

  if (!fp->_flags)
   44e48:	8080030b 	ldhu	r2,12(r16)
   44e4c:	10bfffcc 	andi	r2,r2,65535
   44e50:	10a0001c 	xori	r2,r2,32768
   44e54:	10a00004 	addi	r2,r2,-32768
   44e58:	1000021e 	bne	r2,zero,44e64 <_fflush_r+0x5c>
    return 0;
   44e5c:	0005883a 	mov	r2,zero
   44e60:	00000506 	br	44e78 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   44e64:	800b883a 	mov	r5,r16
   44e68:	e13ffe17 	ldw	r4,-8(fp)
   44e6c:	0044b040 	call	44b04 <__sflush_r>
   44e70:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
   44e74:	e0bffd17 	ldw	r2,-12(fp)
}
   44e78:	e6ffff04 	addi	sp,fp,-4
   44e7c:	dfc00217 	ldw	ra,8(sp)
   44e80:	df000117 	ldw	fp,4(sp)
   44e84:	dc000017 	ldw	r16,0(sp)
   44e88:	dec00304 	addi	sp,sp,12
   44e8c:	f800283a 	ret

00044e90 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
   44e90:	defffe04 	addi	sp,sp,-8
   44e94:	dfc00115 	stw	ra,4(sp)
   44e98:	df000015 	stw	fp,0(sp)
   44e9c:	d839883a 	mov	fp,sp
   44ea0:	2005883a 	mov	r2,r4
  if (fp == NULL)
   44ea4:	1000061e 	bne	r2,zero,44ec0 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
   44ea8:	d0a00517 	ldw	r2,-32748(gp)
   44eac:	01400134 	movhi	r5,4
   44eb0:	29538204 	addi	r5,r5,19976
   44eb4:	1009883a 	mov	r4,r2
   44eb8:	0045cc80 	call	45cc8 <_fwalk_reent>
   44ebc:	00000406 	br	44ed0 <fflush+0x40>

  return _fflush_r (_REENT, fp);
   44ec0:	d0e00417 	ldw	r3,-32752(gp)
   44ec4:	100b883a 	mov	r5,r2
   44ec8:	1809883a 	mov	r4,r3
   44ecc:	0044e080 	call	44e08 <_fflush_r>
}
   44ed0:	e037883a 	mov	sp,fp
   44ed4:	dfc00117 	ldw	ra,4(sp)
   44ed8:	df000017 	ldw	fp,0(sp)
   44edc:	dec00204 	addi	sp,sp,8
   44ee0:	f800283a 	ret

00044ee4 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
   44ee4:	defffa04 	addi	sp,sp,-24
   44ee8:	dfc00515 	stw	ra,20(sp)
   44eec:	df000415 	stw	fp,16(sp)
   44ef0:	df000404 	addi	fp,sp,16
   44ef4:	e13ffc15 	stw	r4,-16(fp)
   44ef8:	e17ffd15 	stw	r5,-12(fp)
   44efc:	e1bffe15 	stw	r6,-8(fp)
   44f00:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
   44f04:	e0bffc17 	ldw	r2,-16(fp)
   44f08:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
   44f0c:	e0bffc17 	ldw	r2,-16(fp)
   44f10:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
   44f14:	e0bffc17 	ldw	r2,-16(fp)
   44f18:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
   44f1c:	e0bffd17 	ldw	r2,-12(fp)
   44f20:	1007883a 	mov	r3,r2
   44f24:	e0bffc17 	ldw	r2,-16(fp)
   44f28:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
   44f2c:	e0bffc17 	ldw	r2,-16(fp)
   44f30:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
   44f34:	e0bffe17 	ldw	r2,-8(fp)
   44f38:	1007883a 	mov	r3,r2
   44f3c:	e0bffc17 	ldw	r2,-16(fp)
   44f40:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
   44f44:	e0bffc17 	ldw	r2,-16(fp)
   44f48:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
   44f4c:	e0bffc17 	ldw	r2,-16(fp)
   44f50:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
   44f54:	e0bffc17 	ldw	r2,-16(fp)
   44f58:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   44f5c:	e0bffc17 	ldw	r2,-16(fp)
   44f60:	10801704 	addi	r2,r2,92
   44f64:	01800204 	movi	r6,8
   44f68:	000b883a 	mov	r5,zero
   44f6c:	1009883a 	mov	r4,r2
   44f70:	00473e80 	call	473e8 <memset>
  ptr->_cookie = ptr;
   44f74:	e0bffc17 	ldw	r2,-16(fp)
   44f78:	e0fffc17 	ldw	r3,-16(fp)
   44f7c:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
   44f80:	e0fffc17 	ldw	r3,-16(fp)
   44f84:	00800174 	movhi	r2,5
   44f88:	10a47004 	addi	r2,r2,-28224
   44f8c:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   44f90:	e0fffc17 	ldw	r3,-16(fp)
   44f94:	00800174 	movhi	r2,5
   44f98:	10a4a304 	addi	r2,r2,-28020
   44f9c:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   44fa0:	e0fffc17 	ldw	r3,-16(fp)
   44fa4:	00800174 	movhi	r2,5
   44fa8:	10a4d004 	addi	r2,r2,-27840
   44fac:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   44fb0:	e0fffc17 	ldw	r3,-16(fp)
   44fb4:	00800174 	movhi	r2,5
   44fb8:	10a4f804 	addi	r2,r2,-27680
   44fbc:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
   44fc0:	0001883a 	nop
   44fc4:	e037883a 	mov	sp,fp
   44fc8:	dfc00117 	ldw	ra,4(sp)
   44fcc:	df000017 	ldw	fp,0(sp)
   44fd0:	dec00204 	addi	sp,sp,8
   44fd4:	f800283a 	ret

00044fd8 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   44fd8:	defffa04 	addi	sp,sp,-24
   44fdc:	dfc00515 	stw	ra,20(sp)
   44fe0:	df000415 	stw	fp,16(sp)
   44fe4:	dc400315 	stw	r17,12(sp)
   44fe8:	dc000215 	stw	r16,8(sp)
   44fec:	df000404 	addi	fp,sp,16
   44ff0:	e13ffd15 	stw	r4,-12(fp)
   44ff4:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   44ff8:	80bfffc4 	addi	r2,r16,-1
   44ffc:	01401a04 	movi	r5,104
   45000:	1009883a 	mov	r4,r2
   45004:	004d9680 	call	4d968 <__mulsi3>
   45008:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   4500c:	100b883a 	mov	r5,r2
   45010:	e13ffd17 	ldw	r4,-12(fp)
   45014:	00465280 	call	46528 <_malloc_r>
   45018:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
   4501c:	e0bffc17 	ldw	r2,-16(fp)
   45020:	1000021e 	bne	r2,zero,4502c <__sfmoreglue+0x54>
    return NULL;
   45024:	0005883a 	mov	r2,zero
   45028:	00001306 	br	45078 <__sfmoreglue+0xa0>
  g->glue._next = NULL;
   4502c:	e0bffc17 	ldw	r2,-16(fp)
   45030:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
   45034:	e0bffc17 	ldw	r2,-16(fp)
   45038:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
   4503c:	e0bffc17 	ldw	r2,-16(fp)
   45040:	10c00304 	addi	r3,r2,12
   45044:	e0bffc17 	ldw	r2,-16(fp)
   45048:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
   4504c:	e0bffc17 	ldw	r2,-16(fp)
   45050:	14400304 	addi	r17,r2,12
   45054:	8005883a 	mov	r2,r16
   45058:	01401a04 	movi	r5,104
   4505c:	1009883a 	mov	r4,r2
   45060:	004d9680 	call	4d968 <__mulsi3>
   45064:	100d883a 	mov	r6,r2
   45068:	000b883a 	mov	r5,zero
   4506c:	8809883a 	mov	r4,r17
   45070:	00473e80 	call	473e8 <memset>
  return &g->glue;
   45074:	e0bffc17 	ldw	r2,-16(fp)
}
   45078:	e6fffe04 	addi	sp,fp,-8
   4507c:	dfc00317 	ldw	ra,12(sp)
   45080:	df000217 	ldw	fp,8(sp)
   45084:	dc400117 	ldw	r17,4(sp)
   45088:	dc000017 	ldw	r16,0(sp)
   4508c:	dec00404 	addi	sp,sp,16
   45090:	f800283a 	ret

00045094 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   45094:	defffa04 	addi	sp,sp,-24
   45098:	dfc00515 	stw	ra,20(sp)
   4509c:	df000415 	stw	fp,16(sp)
   450a0:	df000404 	addi	fp,sp,16
   450a4:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
   450a8:	00453780 	call	45378 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
   450ac:	d0a00517 	ldw	r2,-32748(gp)
   450b0:	10800e17 	ldw	r2,56(r2)
   450b4:	1000031e 	bne	r2,zero,450c4 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
   450b8:	d0a00517 	ldw	r2,-32748(gp)
   450bc:	1009883a 	mov	r4,r2
   450c0:	00452a00 	call	452a0 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   450c4:	d0a00517 	ldw	r2,-32748(gp)
   450c8:	1080b804 	addi	r2,r2,736
   450cc:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   450d0:	e0bffe17 	ldw	r2,-8(fp)
   450d4:	10800217 	ldw	r2,8(r2)
   450d8:	e0bffc15 	stw	r2,-16(fp)
   450dc:	e0bffe17 	ldw	r2,-8(fp)
   450e0:	10800117 	ldw	r2,4(r2)
   450e4:	e0bffd15 	stw	r2,-12(fp)
   450e8:	00000906 	br	45110 <__sfp+0x7c>
	if (fp->_flags == 0)
   450ec:	e0bffc17 	ldw	r2,-16(fp)
   450f0:	1080030b 	ldhu	r2,12(r2)
   450f4:	10bfffcc 	andi	r2,r2,65535
   450f8:	10a0001c 	xori	r2,r2,32768
   450fc:	10a00004 	addi	r2,r2,-32768
   45100:	10001f26 	beq	r2,zero,45180 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   45104:	e0bffc17 	ldw	r2,-16(fp)
   45108:	10801a04 	addi	r2,r2,104
   4510c:	e0bffc15 	stw	r2,-16(fp)
   45110:	e0bffd17 	ldw	r2,-12(fp)
   45114:	10bfffc4 	addi	r2,r2,-1
   45118:	e0bffd15 	stw	r2,-12(fp)
   4511c:	e0bffd17 	ldw	r2,-12(fp)
   45120:	103ff20e 	bge	r2,zero,450ec <_gp+0xfffe8390>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   45124:	e0bffe17 	ldw	r2,-8(fp)
   45128:	10800017 	ldw	r2,0(r2)
   4512c:	1000091e 	bne	r2,zero,45154 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
   45130:	01400104 	movi	r5,4
   45134:	e13fff17 	ldw	r4,-4(fp)
   45138:	0044fd80 	call	44fd8 <__sfmoreglue>
   4513c:	1007883a 	mov	r3,r2
   45140:	e0bffe17 	ldw	r2,-8(fp)
   45144:	10c00015 	stw	r3,0(r2)
   45148:	e0bffe17 	ldw	r2,-8(fp)
   4514c:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   45150:	10000426 	beq	r2,zero,45164 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   45154:	e0bffe17 	ldw	r2,-8(fp)
   45158:	10800017 	ldw	r2,0(r2)
   4515c:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
   45160:	003fdb06 	br	450d0 <_gp+0xfffe8374>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
   45164:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
   45168:	00453980 	call	45398 <__sfp_lock_release>
  d->_errno = ENOMEM;
   4516c:	e0bfff17 	ldw	r2,-4(fp)
   45170:	00c00304 	movi	r3,12
   45174:	10c00015 	stw	r3,0(r2)
  return NULL;
   45178:	0005883a 	mov	r2,zero
   4517c:	00002506 	br	45214 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
   45180:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
   45184:	e0bffc17 	ldw	r2,-16(fp)
   45188:	00ffffc4 	movi	r3,-1
   4518c:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
   45190:	e0bffc17 	ldw	r2,-16(fp)
   45194:	00c00044 	movi	r3,1
   45198:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
   4519c:	e0bffc17 	ldw	r2,-16(fp)
   451a0:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
   451a4:	00453980 	call	45398 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
   451a8:	e0bffc17 	ldw	r2,-16(fp)
   451ac:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
   451b0:	e0bffc17 	ldw	r2,-16(fp)
   451b4:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
   451b8:	e0bffc17 	ldw	r2,-16(fp)
   451bc:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
   451c0:	e0bffc17 	ldw	r2,-16(fp)
   451c4:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
   451c8:	e0bffc17 	ldw	r2,-16(fp)
   451cc:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
   451d0:	e0bffc17 	ldw	r2,-16(fp)
   451d4:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   451d8:	e0bffc17 	ldw	r2,-16(fp)
   451dc:	10801704 	addi	r2,r2,92
   451e0:	01800204 	movi	r6,8
   451e4:	000b883a 	mov	r5,zero
   451e8:	1009883a 	mov	r4,r2
   451ec:	00473e80 	call	473e8 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
   451f0:	e0bffc17 	ldw	r2,-16(fp)
   451f4:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
   451f8:	e0bffc17 	ldw	r2,-16(fp)
   451fc:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
   45200:	e0bffc17 	ldw	r2,-16(fp)
   45204:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
   45208:	e0bffc17 	ldw	r2,-16(fp)
   4520c:	10001215 	stw	zero,72(r2)

  return fp;
   45210:	e0bffc17 	ldw	r2,-16(fp)
}
   45214:	e037883a 	mov	sp,fp
   45218:	dfc00117 	ldw	ra,4(sp)
   4521c:	df000017 	ldw	fp,0(sp)
   45220:	dec00204 	addi	sp,sp,8
   45224:	f800283a 	ret

00045228 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
   45228:	defffc04 	addi	sp,sp,-16
   4522c:	dfc00315 	stw	ra,12(sp)
   45230:	df000215 	stw	fp,8(sp)
   45234:	df000204 	addi	fp,sp,8
   45238:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
   4523c:	00800174 	movhi	r2,5
   45240:	10ab7d04 	addi	r2,r2,-21004
   45244:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   45248:	e17ffe17 	ldw	r5,-8(fp)
   4524c:	e13fff17 	ldw	r4,-4(fp)
   45250:	0045cc80 	call	45cc8 <_fwalk_reent>
}
   45254:	0001883a 	nop
   45258:	e037883a 	mov	sp,fp
   4525c:	dfc00117 	ldw	ra,4(sp)
   45260:	df000017 	ldw	fp,0(sp)
   45264:	dec00204 	addi	sp,sp,8
   45268:	f800283a 	ret

0004526c <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
   4526c:	defffe04 	addi	sp,sp,-8
   45270:	dfc00115 	stw	ra,4(sp)
   45274:	df000015 	stw	fp,0(sp)
   45278:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
   4527c:	d0a00517 	ldw	r2,-32748(gp)
   45280:	1009883a 	mov	r4,r2
   45284:	00452280 	call	45228 <_cleanup_r>
}
   45288:	0001883a 	nop
   4528c:	e037883a 	mov	sp,fp
   45290:	dfc00117 	ldw	ra,4(sp)
   45294:	df000017 	ldw	fp,0(sp)
   45298:	dec00204 	addi	sp,sp,8
   4529c:	f800283a 	ret

000452a0 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
   452a0:	defffd04 	addi	sp,sp,-12
   452a4:	dfc00215 	stw	ra,8(sp)
   452a8:	df000115 	stw	fp,4(sp)
   452ac:	df000104 	addi	fp,sp,4
   452b0:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
   452b4:	00453b80 	call	453b8 <__sinit_lock_acquire>

  if (s->__sdidinit)
   452b8:	e0bfff17 	ldw	r2,-4(fp)
   452bc:	10800e17 	ldw	r2,56(r2)
   452c0:	10000226 	beq	r2,zero,452cc <__sinit+0x2c>
    {
      __sinit_lock_release ();
   452c4:	00453d80 	call	453d8 <__sinit_lock_release>
      return;
   452c8:	00002606 	br	45364 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   452cc:	e0ffff17 	ldw	r3,-4(fp)
   452d0:	00800134 	movhi	r2,4
   452d4:	10948a04 	addi	r2,r2,21032
   452d8:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
   452dc:	e0bfff17 	ldw	r2,-4(fp)
   452e0:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
   452e4:	e0bfff17 	ldw	r2,-4(fp)
   452e8:	00c000c4 	movi	r3,3
   452ec:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
   452f0:	e0bfff17 	ldw	r2,-4(fp)
   452f4:	10c0bb04 	addi	r3,r2,748
   452f8:	e0bfff17 	ldw	r2,-4(fp)
   452fc:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
   45300:	e0bfff17 	ldw	r2,-4(fp)
   45304:	10800117 	ldw	r2,4(r2)
   45308:	e1ffff17 	ldw	r7,-4(fp)
   4530c:	000d883a 	mov	r6,zero
   45310:	01400104 	movi	r5,4
   45314:	1009883a 	mov	r4,r2
   45318:	0044ee40 	call	44ee4 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
   4531c:	e0bfff17 	ldw	r2,-4(fp)
   45320:	10800217 	ldw	r2,8(r2)
   45324:	e1ffff17 	ldw	r7,-4(fp)
   45328:	01800044 	movi	r6,1
   4532c:	01400284 	movi	r5,10
   45330:	1009883a 	mov	r4,r2
   45334:	0044ee40 	call	44ee4 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
   45338:	e0bfff17 	ldw	r2,-4(fp)
   4533c:	10800317 	ldw	r2,12(r2)
   45340:	e1ffff17 	ldw	r7,-4(fp)
   45344:	01800084 	movi	r6,2
   45348:	01400484 	movi	r5,18
   4534c:	1009883a 	mov	r4,r2
   45350:	0044ee40 	call	44ee4 <std>

  s->__sdidinit = 1;
   45354:	e0bfff17 	ldw	r2,-4(fp)
   45358:	00c00044 	movi	r3,1
   4535c:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
   45360:	00453d80 	call	453d8 <__sinit_lock_release>
}
   45364:	e037883a 	mov	sp,fp
   45368:	dfc00117 	ldw	ra,4(sp)
   4536c:	df000017 	ldw	fp,0(sp)
   45370:	dec00204 	addi	sp,sp,8
   45374:	f800283a 	ret

00045378 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
   45378:	deffff04 	addi	sp,sp,-4
   4537c:	df000015 	stw	fp,0(sp)
   45380:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
   45384:	0001883a 	nop
   45388:	e037883a 	mov	sp,fp
   4538c:	df000017 	ldw	fp,0(sp)
   45390:	dec00104 	addi	sp,sp,4
   45394:	f800283a 	ret

00045398 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
   45398:	deffff04 	addi	sp,sp,-4
   4539c:	df000015 	stw	fp,0(sp)
   453a0:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
   453a4:	0001883a 	nop
   453a8:	e037883a 	mov	sp,fp
   453ac:	df000017 	ldw	fp,0(sp)
   453b0:	dec00104 	addi	sp,sp,4
   453b4:	f800283a 	ret

000453b8 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
   453b8:	deffff04 	addi	sp,sp,-4
   453bc:	df000015 	stw	fp,0(sp)
   453c0:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
   453c4:	0001883a 	nop
   453c8:	e037883a 	mov	sp,fp
   453cc:	df000017 	ldw	fp,0(sp)
   453d0:	dec00104 	addi	sp,sp,4
   453d4:	f800283a 	ret

000453d8 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
   453d8:	deffff04 	addi	sp,sp,-4
   453dc:	df000015 	stw	fp,0(sp)
   453e0:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
   453e4:	0001883a 	nop
   453e8:	e037883a 	mov	sp,fp
   453ec:	df000017 	ldw	fp,0(sp)
   453f0:	dec00104 	addi	sp,sp,4
   453f4:	f800283a 	ret

000453f8 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
   453f8:	defffe04 	addi	sp,sp,-8
   453fc:	df000115 	stw	fp,4(sp)
   45400:	df000104 	addi	fp,sp,4
   45404:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
   45408:	0005883a 	mov	r2,zero
}
   4540c:	e037883a 	mov	sp,fp
   45410:	df000017 	ldw	fp,0(sp)
   45414:	dec00104 	addi	sp,sp,4
   45418:	f800283a 	ret

0004541c <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
   4541c:	defffe04 	addi	sp,sp,-8
   45420:	df000115 	stw	fp,4(sp)
   45424:	df000104 	addi	fp,sp,4
   45428:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
   4542c:	0005883a 	mov	r2,zero
}
   45430:	e037883a 	mov	sp,fp
   45434:	df000017 	ldw	fp,0(sp)
   45438:	dec00104 	addi	sp,sp,4
   4543c:	f800283a 	ret

00045440 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
   45440:	defffe04 	addi	sp,sp,-8
   45444:	dfc00115 	stw	ra,4(sp)
   45448:	df000015 	stw	fp,0(sp)
   4544c:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
   45450:	00453780 	call	45378 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
   45454:	d0a00417 	ldw	r2,-32752(gp)
   45458:	01400134 	movhi	r5,4
   4545c:	2954fe04 	addi	r5,r5,21496
   45460:	1009883a 	mov	r4,r2
   45464:	0045bf00 	call	45bf0 <_fwalk>
}
   45468:	0001883a 	nop
   4546c:	e037883a 	mov	sp,fp
   45470:	dfc00117 	ldw	ra,4(sp)
   45474:	df000017 	ldw	fp,0(sp)
   45478:	dec00204 	addi	sp,sp,8
   4547c:	f800283a 	ret

00045480 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
   45480:	defffe04 	addi	sp,sp,-8
   45484:	dfc00115 	stw	ra,4(sp)
   45488:	df000015 	stw	fp,0(sp)
   4548c:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
   45490:	d0a00417 	ldw	r2,-32752(gp)
   45494:	01400134 	movhi	r5,4
   45498:	29550704 	addi	r5,r5,21532
   4549c:	1009883a 	mov	r4,r2
   454a0:	0045bf00 	call	45bf0 <_fwalk>

  __sfp_lock_release ();
   454a4:	00453980 	call	45398 <__sfp_lock_release>
}
   454a8:	0001883a 	nop
   454ac:	e037883a 	mov	sp,fp
   454b0:	dfc00117 	ldw	ra,4(sp)
   454b4:	df000017 	ldw	fp,0(sp)
   454b8:	dec00204 	addi	sp,sp,8
   454bc:	f800283a 	ret

000454c0 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
   454c0:	defff204 	addi	sp,sp,-56
   454c4:	dfc00d15 	stw	ra,52(sp)
   454c8:	df000c15 	stw	fp,48(sp)
   454cc:	df000c04 	addi	fp,sp,48
   454d0:	e13ffe15 	stw	r4,-8(fp)
   454d4:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
   454d8:	e0bfff17 	ldw	r2,-4(fp)
   454dc:	10014a26 	beq	r2,zero,45a08 <_free_r+0x548>
    return;

  MALLOC_LOCK;
   454e0:	e13ffe17 	ldw	r4,-8(fp)
   454e4:	00507d00 	call	507d0 <__malloc_lock>

  p = mem2chunk(mem);
   454e8:	e0bfff17 	ldw	r2,-4(fp)
   454ec:	10bffe04 	addi	r2,r2,-8
   454f0:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
   454f4:	e0bff417 	ldw	r2,-48(fp)
   454f8:	10800117 	ldw	r2,4(r2)
   454fc:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
   45500:	e0fff917 	ldw	r3,-28(fp)
   45504:	00bfff84 	movi	r2,-2
   45508:	1884703a 	and	r2,r3,r2
   4550c:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
   45510:	e0fff417 	ldw	r3,-48(fp)
   45514:	e0bff517 	ldw	r2,-44(fp)
   45518:	1885883a 	add	r2,r3,r2
   4551c:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
   45520:	e0bffa17 	ldw	r2,-24(fp)
   45524:	10c00117 	ldw	r3,4(r2)
   45528:	00bfff04 	movi	r2,-4
   4552c:	1884703a 	and	r2,r3,r2
   45530:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
   45534:	00800174 	movhi	r2,5
   45538:	108dd304 	addi	r2,r2,14156
   4553c:	10c00217 	ldw	r3,8(r2)
   45540:	e0bffa17 	ldw	r2,-24(fp)
   45544:	1880311e 	bne	r3,r2,4560c <_free_r+0x14c>
  {
    sz += nextsz;
   45548:	e0fff517 	ldw	r3,-44(fp)
   4554c:	e0bffb17 	ldw	r2,-20(fp)
   45550:	1885883a 	add	r2,r3,r2
   45554:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   45558:	e0bff917 	ldw	r2,-28(fp)
   4555c:	1080004c 	andi	r2,r2,1
   45560:	1000181e 	bne	r2,zero,455c4 <_free_r+0x104>
    {
      prevsz = p->prev_size;
   45564:	e0bff417 	ldw	r2,-48(fp)
   45568:	10800017 	ldw	r2,0(r2)
   4556c:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
   45570:	e0bffc17 	ldw	r2,-16(fp)
   45574:	0085c83a 	sub	r2,zero,r2
   45578:	e0fff417 	ldw	r3,-48(fp)
   4557c:	1885883a 	add	r2,r3,r2
   45580:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
   45584:	e0fff517 	ldw	r3,-44(fp)
   45588:	e0bffc17 	ldw	r2,-16(fp)
   4558c:	1885883a 	add	r2,r3,r2
   45590:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
   45594:	e0bff417 	ldw	r2,-48(fp)
   45598:	10800317 	ldw	r2,12(r2)
   4559c:	e0bff615 	stw	r2,-40(fp)
   455a0:	e0bff417 	ldw	r2,-48(fp)
   455a4:	10800217 	ldw	r2,8(r2)
   455a8:	e0bff715 	stw	r2,-36(fp)
   455ac:	e0bff717 	ldw	r2,-36(fp)
   455b0:	e0fff617 	ldw	r3,-40(fp)
   455b4:	10c00315 	stw	r3,12(r2)
   455b8:	e0bff617 	ldw	r2,-40(fp)
   455bc:	e0fff717 	ldw	r3,-36(fp)
   455c0:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
   455c4:	e0bff517 	ldw	r2,-44(fp)
   455c8:	10c00054 	ori	r3,r2,1
   455cc:	e0bff417 	ldw	r2,-48(fp)
   455d0:	10c00115 	stw	r3,4(r2)
    top = p;
   455d4:	00800174 	movhi	r2,5
   455d8:	108dd304 	addi	r2,r2,14156
   455dc:	e0fff417 	ldw	r3,-48(fp)
   455e0:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   455e4:	d0a00717 	ldw	r2,-32740(gp)
   455e8:	e0fff517 	ldw	r3,-44(fp)
   455ec:	18800436 	bltu	r3,r2,45600 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
   455f0:	d0a80717 	ldw	r2,-24548(gp)
   455f4:	100b883a 	mov	r5,r2
   455f8:	e13ffe17 	ldw	r4,-8(fp)
   455fc:	0045a200 	call	45a20 <_malloc_trim_r>
    MALLOC_UNLOCK;
   45600:	e13ffe17 	ldw	r4,-8(fp)
   45604:	00507f40 	call	507f4 <__malloc_unlock>
    return;
   45608:	00010006 	br	45a0c <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
   4560c:	e0bffa17 	ldw	r2,-24(fp)
   45610:	e0fffb17 	ldw	r3,-20(fp)
   45614:	10c00115 	stw	r3,4(r2)

  islr = 0;
   45618:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
   4561c:	e0bff917 	ldw	r2,-28(fp)
   45620:	1080004c 	andi	r2,r2,1
   45624:	1000201e 	bne	r2,zero,456a8 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
   45628:	e0bff417 	ldw	r2,-48(fp)
   4562c:	10800017 	ldw	r2,0(r2)
   45630:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
   45634:	e0bffc17 	ldw	r2,-16(fp)
   45638:	0085c83a 	sub	r2,zero,r2
   4563c:	e0fff417 	ldw	r3,-48(fp)
   45640:	1885883a 	add	r2,r3,r2
   45644:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
   45648:	e0fff517 	ldw	r3,-44(fp)
   4564c:	e0bffc17 	ldw	r2,-16(fp)
   45650:	1885883a 	add	r2,r3,r2
   45654:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   45658:	e0bff417 	ldw	r2,-48(fp)
   4565c:	10c00217 	ldw	r3,8(r2)
   45660:	00800174 	movhi	r2,5
   45664:	108dd504 	addi	r2,r2,14164
   45668:	1880031e 	bne	r3,r2,45678 <_free_r+0x1b8>
      islr = 1;
   4566c:	00800044 	movi	r2,1
   45670:	e0bff815 	stw	r2,-32(fp)
   45674:	00000c06 	br	456a8 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
   45678:	e0bff417 	ldw	r2,-48(fp)
   4567c:	10800317 	ldw	r2,12(r2)
   45680:	e0bff615 	stw	r2,-40(fp)
   45684:	e0bff417 	ldw	r2,-48(fp)
   45688:	10800217 	ldw	r2,8(r2)
   4568c:	e0bff715 	stw	r2,-36(fp)
   45690:	e0bff717 	ldw	r2,-36(fp)
   45694:	e0fff617 	ldw	r3,-40(fp)
   45698:	10c00315 	stw	r3,12(r2)
   4569c:	e0bff617 	ldw	r2,-40(fp)
   456a0:	e0fff717 	ldw	r3,-36(fp)
   456a4:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   456a8:	e0fffa17 	ldw	r3,-24(fp)
   456ac:	e0bffb17 	ldw	r2,-20(fp)
   456b0:	1885883a 	add	r2,r3,r2
   456b4:	10800117 	ldw	r2,4(r2)
   456b8:	1080004c 	andi	r2,r2,1
   456bc:	10002a1e 	bne	r2,zero,45768 <_free_r+0x2a8>
  {
    sz += nextsz;
   456c0:	e0fff517 	ldw	r3,-44(fp)
   456c4:	e0bffb17 	ldw	r2,-20(fp)
   456c8:	1885883a 	add	r2,r3,r2
   456cc:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   456d0:	e0bff817 	ldw	r2,-32(fp)
   456d4:	1000181e 	bne	r2,zero,45738 <_free_r+0x278>
   456d8:	e0bffa17 	ldw	r2,-24(fp)
   456dc:	10c00217 	ldw	r3,8(r2)
   456e0:	00800174 	movhi	r2,5
   456e4:	108dd504 	addi	r2,r2,14164
   456e8:	1880131e 	bne	r3,r2,45738 <_free_r+0x278>
    {
      islr = 1;
   456ec:	00800044 	movi	r2,1
   456f0:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
   456f4:	00c00174 	movhi	r3,5
   456f8:	18cdd504 	addi	r3,r3,14164
   456fc:	00800174 	movhi	r2,5
   45700:	108dd504 	addi	r2,r2,14164
   45704:	e13ff417 	ldw	r4,-48(fp)
   45708:	11000315 	stw	r4,12(r2)
   4570c:	10800317 	ldw	r2,12(r2)
   45710:	18800215 	stw	r2,8(r3)
   45714:	00800174 	movhi	r2,5
   45718:	108dd504 	addi	r2,r2,14164
   4571c:	e0fff417 	ldw	r3,-48(fp)
   45720:	18800315 	stw	r2,12(r3)
   45724:	e0bff417 	ldw	r2,-48(fp)
   45728:	10c00317 	ldw	r3,12(r2)
   4572c:	e0bff417 	ldw	r2,-48(fp)
   45730:	10c00215 	stw	r3,8(r2)
   45734:	00000c06 	br	45768 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
   45738:	e0bffa17 	ldw	r2,-24(fp)
   4573c:	10800317 	ldw	r2,12(r2)
   45740:	e0bff615 	stw	r2,-40(fp)
   45744:	e0bffa17 	ldw	r2,-24(fp)
   45748:	10800217 	ldw	r2,8(r2)
   4574c:	e0bff715 	stw	r2,-36(fp)
   45750:	e0bff717 	ldw	r2,-36(fp)
   45754:	e0fff617 	ldw	r3,-40(fp)
   45758:	10c00315 	stw	r3,12(r2)
   4575c:	e0bff617 	ldw	r2,-40(fp)
   45760:	e0fff717 	ldw	r3,-36(fp)
   45764:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
   45768:	e0bff517 	ldw	r2,-44(fp)
   4576c:	10c00054 	ori	r3,r2,1
   45770:	e0bff417 	ldw	r2,-48(fp)
   45774:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
   45778:	e0fff417 	ldw	r3,-48(fp)
   4577c:	e0bff517 	ldw	r2,-44(fp)
   45780:	1885883a 	add	r2,r3,r2
   45784:	e0fff517 	ldw	r3,-44(fp)
   45788:	10c00015 	stw	r3,0(r2)
  if (!islr)
   4578c:	e0bff817 	ldw	r2,-32(fp)
   45790:	10009a1e 	bne	r2,zero,459fc <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
   45794:	e0bff517 	ldw	r2,-44(fp)
   45798:	10808028 	cmpgeui	r2,r2,512
   4579c:	10002c1e 	bne	r2,zero,45850 <_free_r+0x390>
   457a0:	e0bff517 	ldw	r2,-44(fp)
   457a4:	1004d0fa 	srli	r2,r2,3
   457a8:	e0bffd15 	stw	r2,-12(fp)
   457ac:	00c00174 	movhi	r3,5
   457b0:	18cdd304 	addi	r3,r3,14156
   457b4:	00800174 	movhi	r2,5
   457b8:	108dd304 	addi	r2,r2,14156
   457bc:	11000117 	ldw	r4,4(r2)
   457c0:	e0bffd17 	ldw	r2,-12(fp)
   457c4:	1000010e 	bge	r2,zero,457cc <_free_r+0x30c>
   457c8:	108000c4 	addi	r2,r2,3
   457cc:	1005d0ba 	srai	r2,r2,2
   457d0:	100b883a 	mov	r5,r2
   457d4:	00800044 	movi	r2,1
   457d8:	1144983a 	sll	r2,r2,r5
   457dc:	2084b03a 	or	r2,r4,r2
   457e0:	18800115 	stw	r2,4(r3)
   457e4:	e0bffd17 	ldw	r2,-12(fp)
   457e8:	10800044 	addi	r2,r2,1
   457ec:	1085883a 	add	r2,r2,r2
   457f0:	1085883a 	add	r2,r2,r2
   457f4:	1087883a 	add	r3,r2,r2
   457f8:	00800174 	movhi	r2,5
   457fc:	108dd304 	addi	r2,r2,14156
   45800:	1885883a 	add	r2,r3,r2
   45804:	10bffe04 	addi	r2,r2,-8
   45808:	e0bff615 	stw	r2,-40(fp)
   4580c:	e0bff617 	ldw	r2,-40(fp)
   45810:	10800217 	ldw	r2,8(r2)
   45814:	e0bff715 	stw	r2,-36(fp)
   45818:	e0bff417 	ldw	r2,-48(fp)
   4581c:	e0fff617 	ldw	r3,-40(fp)
   45820:	10c00315 	stw	r3,12(r2)
   45824:	e0bff417 	ldw	r2,-48(fp)
   45828:	e0fff717 	ldw	r3,-36(fp)
   4582c:	10c00215 	stw	r3,8(r2)
   45830:	e0bff617 	ldw	r2,-40(fp)
   45834:	e0fff417 	ldw	r3,-48(fp)
   45838:	10c00215 	stw	r3,8(r2)
   4583c:	e0bff617 	ldw	r2,-40(fp)
   45840:	10c00217 	ldw	r3,8(r2)
   45844:	e0bff717 	ldw	r2,-36(fp)
   45848:	10c00315 	stw	r3,12(r2)
   4584c:	00006b06 	br	459fc <_free_r+0x53c>
   45850:	e0bff517 	ldw	r2,-44(fp)
   45854:	1004d27a 	srli	r2,r2,9
   45858:	1000031e 	bne	r2,zero,45868 <_free_r+0x3a8>
   4585c:	e0bff517 	ldw	r2,-44(fp)
   45860:	1004d0fa 	srli	r2,r2,3
   45864:	00002906 	br	4590c <_free_r+0x44c>
   45868:	e0bff517 	ldw	r2,-44(fp)
   4586c:	1004d27a 	srli	r2,r2,9
   45870:	10800168 	cmpgeui	r2,r2,5
   45874:	1000041e 	bne	r2,zero,45888 <_free_r+0x3c8>
   45878:	e0bff517 	ldw	r2,-44(fp)
   4587c:	1004d1ba 	srli	r2,r2,6
   45880:	10800e04 	addi	r2,r2,56
   45884:	00002106 	br	4590c <_free_r+0x44c>
   45888:	e0bff517 	ldw	r2,-44(fp)
   4588c:	1004d27a 	srli	r2,r2,9
   45890:	10800568 	cmpgeui	r2,r2,21
   45894:	1000041e 	bne	r2,zero,458a8 <_free_r+0x3e8>
   45898:	e0bff517 	ldw	r2,-44(fp)
   4589c:	1004d27a 	srli	r2,r2,9
   458a0:	108016c4 	addi	r2,r2,91
   458a4:	00001906 	br	4590c <_free_r+0x44c>
   458a8:	e0bff517 	ldw	r2,-44(fp)
   458ac:	1004d27a 	srli	r2,r2,9
   458b0:	10801568 	cmpgeui	r2,r2,85
   458b4:	1000041e 	bne	r2,zero,458c8 <_free_r+0x408>
   458b8:	e0bff517 	ldw	r2,-44(fp)
   458bc:	1004d33a 	srli	r2,r2,12
   458c0:	10801b84 	addi	r2,r2,110
   458c4:	00001106 	br	4590c <_free_r+0x44c>
   458c8:	e0bff517 	ldw	r2,-44(fp)
   458cc:	1004d27a 	srli	r2,r2,9
   458d0:	10805568 	cmpgeui	r2,r2,341
   458d4:	1000041e 	bne	r2,zero,458e8 <_free_r+0x428>
   458d8:	e0bff517 	ldw	r2,-44(fp)
   458dc:	1004d3fa 	srli	r2,r2,15
   458e0:	10801dc4 	addi	r2,r2,119
   458e4:	00000906 	br	4590c <_free_r+0x44c>
   458e8:	e0bff517 	ldw	r2,-44(fp)
   458ec:	1004d27a 	srli	r2,r2,9
   458f0:	10815568 	cmpgeui	r2,r2,1365
   458f4:	1000041e 	bne	r2,zero,45908 <_free_r+0x448>
   458f8:	e0bff517 	ldw	r2,-44(fp)
   458fc:	1004d4ba 	srli	r2,r2,18
   45900:	10801f04 	addi	r2,r2,124
   45904:	00000106 	br	4590c <_free_r+0x44c>
   45908:	00801f84 	movi	r2,126
   4590c:	e0bffd15 	stw	r2,-12(fp)
   45910:	e0bffd17 	ldw	r2,-12(fp)
   45914:	10800044 	addi	r2,r2,1
   45918:	1085883a 	add	r2,r2,r2
   4591c:	1085883a 	add	r2,r2,r2
   45920:	1087883a 	add	r3,r2,r2
   45924:	00800174 	movhi	r2,5
   45928:	108dd304 	addi	r2,r2,14156
   4592c:	1885883a 	add	r2,r3,r2
   45930:	10bffe04 	addi	r2,r2,-8
   45934:	e0bff615 	stw	r2,-40(fp)
   45938:	e0bff617 	ldw	r2,-40(fp)
   4593c:	10800217 	ldw	r2,8(r2)
   45940:	e0bff715 	stw	r2,-36(fp)
   45944:	e0fff717 	ldw	r3,-36(fp)
   45948:	e0bff617 	ldw	r2,-40(fp)
   4594c:	1880121e 	bne	r3,r2,45998 <_free_r+0x4d8>
   45950:	00c00174 	movhi	r3,5
   45954:	18cdd304 	addi	r3,r3,14156
   45958:	00800174 	movhi	r2,5
   4595c:	108dd304 	addi	r2,r2,14156
   45960:	11000117 	ldw	r4,4(r2)
   45964:	e0bffd17 	ldw	r2,-12(fp)
   45968:	1000010e 	bge	r2,zero,45970 <_free_r+0x4b0>
   4596c:	108000c4 	addi	r2,r2,3
   45970:	1005d0ba 	srai	r2,r2,2
   45974:	100b883a 	mov	r5,r2
   45978:	00800044 	movi	r2,1
   4597c:	1144983a 	sll	r2,r2,r5
   45980:	2084b03a 	or	r2,r4,r2
   45984:	18800115 	stw	r2,4(r3)
   45988:	00000f06 	br	459c8 <_free_r+0x508>
   4598c:	e0bff717 	ldw	r2,-36(fp)
   45990:	10800217 	ldw	r2,8(r2)
   45994:	e0bff715 	stw	r2,-36(fp)
   45998:	e0fff717 	ldw	r3,-36(fp)
   4599c:	e0bff617 	ldw	r2,-40(fp)
   459a0:	18800626 	beq	r3,r2,459bc <_free_r+0x4fc>
   459a4:	e0bff717 	ldw	r2,-36(fp)
   459a8:	10c00117 	ldw	r3,4(r2)
   459ac:	00bfff04 	movi	r2,-4
   459b0:	1884703a 	and	r2,r3,r2
   459b4:	e0fff517 	ldw	r3,-44(fp)
   459b8:	18bff436 	bltu	r3,r2,4598c <_gp+0xfffe8c30>
   459bc:	e0bff717 	ldw	r2,-36(fp)
   459c0:	10800317 	ldw	r2,12(r2)
   459c4:	e0bff615 	stw	r2,-40(fp)
   459c8:	e0bff417 	ldw	r2,-48(fp)
   459cc:	e0fff617 	ldw	r3,-40(fp)
   459d0:	10c00315 	stw	r3,12(r2)
   459d4:	e0bff417 	ldw	r2,-48(fp)
   459d8:	e0fff717 	ldw	r3,-36(fp)
   459dc:	10c00215 	stw	r3,8(r2)
   459e0:	e0bff617 	ldw	r2,-40(fp)
   459e4:	e0fff417 	ldw	r3,-48(fp)
   459e8:	10c00215 	stw	r3,8(r2)
   459ec:	e0bff617 	ldw	r2,-40(fp)
   459f0:	10c00217 	ldw	r3,8(r2)
   459f4:	e0bff717 	ldw	r2,-36(fp)
   459f8:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
   459fc:	e13ffe17 	ldw	r4,-8(fp)
   45a00:	00507f40 	call	507f4 <__malloc_unlock>
   45a04:	00000106 	br	45a0c <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
   45a08:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
   45a0c:	e037883a 	mov	sp,fp
   45a10:	dfc00117 	ldw	ra,4(sp)
   45a14:	df000017 	ldw	fp,0(sp)
   45a18:	dec00204 	addi	sp,sp,8
   45a1c:	f800283a 	ret

00045a20 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   45a20:	defff704 	addi	sp,sp,-36
   45a24:	dfc00815 	stw	ra,32(sp)
   45a28:	df000715 	stw	fp,28(sp)
   45a2c:	df000704 	addi	fp,sp,28
   45a30:	e13ffe15 	stw	r4,-8(fp)
   45a34:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
   45a38:	00840004 	movi	r2,4096
   45a3c:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
   45a40:	e13ffe17 	ldw	r4,-8(fp)
   45a44:	00507d00 	call	507d0 <__malloc_lock>

  top_size = chunksize(top);
   45a48:	00800174 	movhi	r2,5
   45a4c:	108dd304 	addi	r2,r2,14156
   45a50:	10800217 	ldw	r2,8(r2)
   45a54:	10800117 	ldw	r2,4(r2)
   45a58:	1007883a 	mov	r3,r2
   45a5c:	00bfff04 	movi	r2,-4
   45a60:	1884703a 	and	r2,r3,r2
   45a64:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   45a68:	e0fffa17 	ldw	r3,-24(fp)
   45a6c:	e0bfff17 	ldw	r2,-4(fp)
   45a70:	1887c83a 	sub	r3,r3,r2
   45a74:	e0bff917 	ldw	r2,-28(fp)
   45a78:	1885883a 	add	r2,r3,r2
   45a7c:	10bffbc4 	addi	r2,r2,-17
   45a80:	e17ff917 	ldw	r5,-28(fp)
   45a84:	1009883a 	mov	r4,r2
   45a88:	004d8ac0 	call	4d8ac <__udivsi3>
   45a8c:	10bfffc4 	addi	r2,r2,-1
   45a90:	e17ff917 	ldw	r5,-28(fp)
   45a94:	1009883a 	mov	r4,r2
   45a98:	004d9680 	call	4d968 <__mulsi3>
   45a9c:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
   45aa0:	e0bff917 	ldw	r2,-28(fp)
   45aa4:	e0fffb17 	ldw	r3,-20(fp)
   45aa8:	1880040e 	bge	r3,r2,45abc <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
   45aac:	e13ffe17 	ldw	r4,-8(fp)
   45ab0:	00507f40 	call	507f4 <__malloc_unlock>
    return 0;
   45ab4:	0005883a 	mov	r2,zero
   45ab8:	00004806 	br	45bdc <_malloc_trim_r+0x1bc>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
   45abc:	000b883a 	mov	r5,zero
   45ac0:	e13ffe17 	ldw	r4,-8(fp)
   45ac4:	00491600 	call	49160 <_sbrk_r>
   45ac8:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
   45acc:	00800174 	movhi	r2,5
   45ad0:	108dd304 	addi	r2,r2,14156
   45ad4:	10c00217 	ldw	r3,8(r2)
   45ad8:	e0bffa17 	ldw	r2,-24(fp)
   45adc:	1887883a 	add	r3,r3,r2
   45ae0:	e0bffc17 	ldw	r2,-16(fp)
   45ae4:	18800426 	beq	r3,r2,45af8 <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
   45ae8:	e13ffe17 	ldw	r4,-8(fp)
   45aec:	00507f40 	call	507f4 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
   45af0:	0005883a 	mov	r2,zero
   45af4:	00003906 	br	45bdc <_malloc_trim_r+0x1bc>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
   45af8:	e0bffb17 	ldw	r2,-20(fp)
   45afc:	0085c83a 	sub	r2,zero,r2
   45b00:	100b883a 	mov	r5,r2
   45b04:	e13ffe17 	ldw	r4,-8(fp)
   45b08:	00491600 	call	49160 <_sbrk_r>
   45b0c:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
   45b10:	e0bffd17 	ldw	r2,-12(fp)
   45b14:	10bfffd8 	cmpnei	r2,r2,-1
   45b18:	10001d1e 	bne	r2,zero,45b90 <_malloc_trim_r+0x170>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
   45b1c:	000b883a 	mov	r5,zero
   45b20:	e13ffe17 	ldw	r4,-8(fp)
   45b24:	00491600 	call	49160 <_sbrk_r>
   45b28:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
   45b2c:	e0fffc17 	ldw	r3,-16(fp)
   45b30:	00800174 	movhi	r2,5
   45b34:	108dd304 	addi	r2,r2,14156
   45b38:	10800217 	ldw	r2,8(r2)
   45b3c:	1885c83a 	sub	r2,r3,r2
   45b40:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   45b44:	e0bffa17 	ldw	r2,-24(fp)
   45b48:	10800410 	cmplti	r2,r2,16
   45b4c:	10000c1e 	bne	r2,zero,45b80 <_malloc_trim_r+0x160>
        {
          sbrked_mem = current_brk - sbrk_base;
   45b50:	e0bffc17 	ldw	r2,-16(fp)
   45b54:	d0e00817 	ldw	r3,-32736(gp)
   45b58:	10c7c83a 	sub	r3,r2,r3
   45b5c:	00800174 	movhi	r2,5
   45b60:	109b6a04 	addi	r2,r2,28072
   45b64:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
   45b68:	00800174 	movhi	r2,5
   45b6c:	108dd304 	addi	r2,r2,14156
   45b70:	10800217 	ldw	r2,8(r2)
   45b74:	e0fffa17 	ldw	r3,-24(fp)
   45b78:	18c00054 	ori	r3,r3,1
   45b7c:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
   45b80:	e13ffe17 	ldw	r4,-8(fp)
   45b84:	00507f40 	call	507f4 <__malloc_unlock>
        return 0; 
   45b88:	0005883a 	mov	r2,zero
   45b8c:	00001306 	br	45bdc <_malloc_trim_r+0x1bc>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   45b90:	00800174 	movhi	r2,5
   45b94:	108dd304 	addi	r2,r2,14156
   45b98:	10800217 	ldw	r2,8(r2)
   45b9c:	e13ffa17 	ldw	r4,-24(fp)
   45ba0:	e0fffb17 	ldw	r3,-20(fp)
   45ba4:	20c7c83a 	sub	r3,r4,r3
   45ba8:	18c00054 	ori	r3,r3,1
   45bac:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
   45bb0:	00800174 	movhi	r2,5
   45bb4:	109b6a04 	addi	r2,r2,28072
   45bb8:	10c00017 	ldw	r3,0(r2)
   45bbc:	e0bffb17 	ldw	r2,-20(fp)
   45bc0:	1887c83a 	sub	r3,r3,r2
   45bc4:	00800174 	movhi	r2,5
   45bc8:	109b6a04 	addi	r2,r2,28072
   45bcc:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
   45bd0:	e13ffe17 	ldw	r4,-8(fp)
   45bd4:	00507f40 	call	507f4 <__malloc_unlock>
        return 1;
   45bd8:	00800044 	movi	r2,1
      }
    }
  }
}
   45bdc:	e037883a 	mov	sp,fp
   45be0:	dfc00117 	ldw	ra,4(sp)
   45be4:	df000017 	ldw	fp,0(sp)
   45be8:	dec00204 	addi	sp,sp,8
   45bec:	f800283a 	ret

00045bf0 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   45bf0:	defff804 	addi	sp,sp,-32
   45bf4:	dfc00715 	stw	ra,28(sp)
   45bf8:	df000615 	stw	fp,24(sp)
   45bfc:	dd000515 	stw	r20,20(sp)
   45c00:	dcc00415 	stw	r19,16(sp)
   45c04:	dc800315 	stw	r18,12(sp)
   45c08:	dc400215 	stw	r17,8(sp)
   45c0c:	dc000115 	stw	r16,4(sp)
   45c10:	df000604 	addi	fp,sp,24
   45c14:	e13ffa15 	stw	r4,-24(fp)
   45c18:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   45c1c:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   45c20:	e0bffa17 	ldw	r2,-24(fp)
   45c24:	1440b804 	addi	r17,r2,736
   45c28:	00001b06 	br	45c98 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   45c2c:	8c000217 	ldw	r16,8(r17)
   45c30:	8c800117 	ldw	r18,4(r17)
   45c34:	00001506 	br	45c8c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   45c38:	8080030b 	ldhu	r2,12(r16)
   45c3c:	10bfffcc 	andi	r2,r2,65535
   45c40:	10a0001c 	xori	r2,r2,32768
   45c44:	10a00004 	addi	r2,r2,-32768
   45c48:	10000f26 	beq	r2,zero,45c88 <_fwalk+0x98>
   45c4c:	8080030b 	ldhu	r2,12(r16)
   45c50:	10bfffcc 	andi	r2,r2,65535
   45c54:	10a0001c 	xori	r2,r2,32768
   45c58:	10a00004 	addi	r2,r2,-32768
   45c5c:	10800060 	cmpeqi	r2,r2,1
   45c60:	1000091e 	bne	r2,zero,45c88 <_fwalk+0x98>
   45c64:	8080038b 	ldhu	r2,14(r16)
   45c68:	10bfffcc 	andi	r2,r2,65535
   45c6c:	10a0001c 	xori	r2,r2,32768
   45c70:	10a00004 	addi	r2,r2,-32768
   45c74:	10bfffe0 	cmpeqi	r2,r2,-1
   45c78:	1000031e 	bne	r2,zero,45c88 <_fwalk+0x98>
	ret |= (*function) (fp);
   45c7c:	8009883a 	mov	r4,r16
   45c80:	a03ee83a 	callr	r20
   45c84:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   45c88:	84001a04 	addi	r16,r16,104
   45c8c:	94bfffc4 	addi	r18,r18,-1
   45c90:	903fe90e 	bge	r18,zero,45c38 <_gp+0xfffe8edc>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   45c94:	8c400017 	ldw	r17,0(r17)
   45c98:	883fe41e 	bne	r17,zero,45c2c <_gp+0xfffe8ed0>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
   45c9c:	9805883a 	mov	r2,r19
}
   45ca0:	e6fffb04 	addi	sp,fp,-20
   45ca4:	dfc00617 	ldw	ra,24(sp)
   45ca8:	df000517 	ldw	fp,20(sp)
   45cac:	dd000417 	ldw	r20,16(sp)
   45cb0:	dcc00317 	ldw	r19,12(sp)
   45cb4:	dc800217 	ldw	r18,8(sp)
   45cb8:	dc400117 	ldw	r17,4(sp)
   45cbc:	dc000017 	ldw	r16,0(sp)
   45cc0:	dec00704 	addi	sp,sp,28
   45cc4:	f800283a 	ret

00045cc8 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   45cc8:	defff804 	addi	sp,sp,-32
   45ccc:	dfc00715 	stw	ra,28(sp)
   45cd0:	df000615 	stw	fp,24(sp)
   45cd4:	dd000515 	stw	r20,20(sp)
   45cd8:	dcc00415 	stw	r19,16(sp)
   45cdc:	dc800315 	stw	r18,12(sp)
   45ce0:	dc400215 	stw	r17,8(sp)
   45ce4:	dc000115 	stw	r16,4(sp)
   45ce8:	df000604 	addi	fp,sp,24
   45cec:	e13ffa15 	stw	r4,-24(fp)
   45cf0:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   45cf4:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   45cf8:	e0bffa17 	ldw	r2,-24(fp)
   45cfc:	1440b804 	addi	r17,r2,736
   45d00:	00001c06 	br	45d74 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   45d04:	8c000217 	ldw	r16,8(r17)
   45d08:	8c800117 	ldw	r18,4(r17)
   45d0c:	00001606 	br	45d68 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   45d10:	8080030b 	ldhu	r2,12(r16)
   45d14:	10bfffcc 	andi	r2,r2,65535
   45d18:	10a0001c 	xori	r2,r2,32768
   45d1c:	10a00004 	addi	r2,r2,-32768
   45d20:	10001026 	beq	r2,zero,45d64 <_fwalk_reent+0x9c>
   45d24:	8080030b 	ldhu	r2,12(r16)
   45d28:	10bfffcc 	andi	r2,r2,65535
   45d2c:	10a0001c 	xori	r2,r2,32768
   45d30:	10a00004 	addi	r2,r2,-32768
   45d34:	10800060 	cmpeqi	r2,r2,1
   45d38:	10000a1e 	bne	r2,zero,45d64 <_fwalk_reent+0x9c>
   45d3c:	8080038b 	ldhu	r2,14(r16)
   45d40:	10bfffcc 	andi	r2,r2,65535
   45d44:	10a0001c 	xori	r2,r2,32768
   45d48:	10a00004 	addi	r2,r2,-32768
   45d4c:	10bfffe0 	cmpeqi	r2,r2,-1
   45d50:	1000041e 	bne	r2,zero,45d64 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
   45d54:	800b883a 	mov	r5,r16
   45d58:	e13ffa17 	ldw	r4,-24(fp)
   45d5c:	a03ee83a 	callr	r20
   45d60:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   45d64:	84001a04 	addi	r16,r16,104
   45d68:	94bfffc4 	addi	r18,r18,-1
   45d6c:	903fe80e 	bge	r18,zero,45d10 <_gp+0xfffe8fb4>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   45d70:	8c400017 	ldw	r17,0(r17)
   45d74:	883fe31e 	bne	r17,zero,45d04 <_gp+0xfffe8fa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
   45d78:	9805883a 	mov	r2,r19
}
   45d7c:	e6fffb04 	addi	sp,fp,-20
   45d80:	dfc00617 	ldw	ra,24(sp)
   45d84:	df000517 	ldw	fp,20(sp)
   45d88:	dd000417 	ldw	r20,16(sp)
   45d8c:	dcc00317 	ldw	r19,12(sp)
   45d90:	dc800217 	ldw	r18,8(sp)
   45d94:	dc400117 	ldw	r17,4(sp)
   45d98:	dc000017 	ldw	r16,0(sp)
   45d9c:	dec00704 	addi	sp,sp,28
   45da0:	f800283a 	ret

00045da4 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
   45da4:	defffb04 	addi	sp,sp,-20
   45da8:	dfc00415 	stw	ra,16(sp)
   45dac:	df000315 	stw	fp,12(sp)
   45db0:	df000304 	addi	fp,sp,12
   45db4:	e13ffd15 	stw	r4,-12(fp)
   45db8:	e17ffe15 	stw	r5,-8(fp)
   45dbc:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
   45dc0:	e0bfff17 	ldw	r2,-4(fp)
   45dc4:	10001126 	beq	r2,zero,45e0c <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
   45dc8:	01400174 	movhi	r5,5
   45dcc:	294acc04 	addi	r5,r5,11056
   45dd0:	e13fff17 	ldw	r4,-4(fp)
   45dd4:	00494340 	call	49434 <strcmp>
   45dd8:	10000c26 	beq	r2,zero,45e0c <_setlocale_r+0x68>
   45ddc:	01400174 	movhi	r5,5
   45de0:	294ace04 	addi	r5,r5,11064
   45de4:	e13fff17 	ldw	r4,-4(fp)
   45de8:	00494340 	call	49434 <strcmp>
   45dec:	10000726 	beq	r2,zero,45e0c <_setlocale_r+0x68>
	  && strcmp (locale, ""))
   45df0:	01400174 	movhi	r5,5
   45df4:	294acb04 	addi	r5,r5,11052
   45df8:	e13fff17 	ldw	r4,-4(fp)
   45dfc:	00494340 	call	49434 <strcmp>
   45e00:	10000226 	beq	r2,zero,45e0c <_setlocale_r+0x68>
        return NULL;
   45e04:	0005883a 	mov	r2,zero
   45e08:	00000206 	br	45e14 <_setlocale_r+0x70>
    }
  return "C";
   45e0c:	00800174 	movhi	r2,5
   45e10:	108ace04 	addi	r2,r2,11064
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
   45e14:	e037883a 	mov	sp,fp
   45e18:	dfc00117 	ldw	ra,4(sp)
   45e1c:	df000017 	ldw	fp,0(sp)
   45e20:	dec00204 	addi	sp,sp,8
   45e24:	f800283a 	ret

00045e28 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
   45e28:	deffff04 	addi	sp,sp,-4
   45e2c:	df000015 	stw	fp,0(sp)
   45e30:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
   45e34:	00800174 	movhi	r2,5
   45e38:	108dc304 	addi	r2,r2,14092
#endif
}
   45e3c:	e037883a 	mov	sp,fp
   45e40:	df000017 	ldw	fp,0(sp)
   45e44:	dec00104 	addi	sp,sp,4
   45e48:	f800283a 	ret

00045e4c <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
   45e4c:	deffff04 	addi	sp,sp,-4
   45e50:	df000015 	stw	fp,0(sp)
   45e54:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
   45e58:	d0a00617 	ldw	r2,-32744(gp)
#endif
}
   45e5c:	e037883a 	mov	sp,fp
   45e60:	df000017 	ldw	fp,0(sp)
   45e64:	dec00104 	addi	sp,sp,4
   45e68:	f800283a 	ret

00045e6c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
   45e6c:	deffff04 	addi	sp,sp,-4
   45e70:	df000015 	stw	fp,0(sp)
   45e74:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
   45e78:	00800174 	movhi	r2,5
   45e7c:	108dcb04 	addi	r2,r2,14124
#endif
}
   45e80:	e037883a 	mov	sp,fp
   45e84:	df000017 	ldw	fp,0(sp)
   45e88:	dec00104 	addi	sp,sp,4
   45e8c:	f800283a 	ret

00045e90 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
   45e90:	deffff04 	addi	sp,sp,-4
   45e94:	df000015 	stw	fp,0(sp)
   45e98:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
   45e9c:	d0a80617 	ldw	r2,-24552(gp)
}
   45ea0:	e037883a 	mov	sp,fp
   45ea4:	df000017 	ldw	fp,0(sp)
   45ea8:	dec00104 	addi	sp,sp,4
   45eac:	f800283a 	ret

00045eb0 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
   45eb0:	defffe04 	addi	sp,sp,-8
   45eb4:	df000115 	stw	fp,4(sp)
   45eb8:	df000104 	addi	fp,sp,4
   45ebc:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
   45ec0:	00800174 	movhi	r2,5
   45ec4:	108db504 	addi	r2,r2,14036
}
   45ec8:	e037883a 	mov	sp,fp
   45ecc:	df000017 	ldw	fp,0(sp)
   45ed0:	dec00104 	addi	sp,sp,4
   45ed4:	f800283a 	ret

00045ed8 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
   45ed8:	defffc04 	addi	sp,sp,-16
   45edc:	dfc00315 	stw	ra,12(sp)
   45ee0:	df000215 	stw	fp,8(sp)
   45ee4:	df000204 	addi	fp,sp,8
   45ee8:	e13ffe15 	stw	r4,-8(fp)
   45eec:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
   45ef0:	d0a00417 	ldw	r2,-32752(gp)
   45ef4:	e1bfff17 	ldw	r6,-4(fp)
   45ef8:	e17ffe17 	ldw	r5,-8(fp)
   45efc:	1009883a 	mov	r4,r2
   45f00:	0045da40 	call	45da4 <_setlocale_r>
}
   45f04:	e037883a 	mov	sp,fp
   45f08:	dfc00117 	ldw	ra,4(sp)
   45f0c:	df000017 	ldw	fp,0(sp)
   45f10:	dec00204 	addi	sp,sp,8
   45f14:	f800283a 	ret

00045f18 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
   45f18:	defffe04 	addi	sp,sp,-8
   45f1c:	dfc00115 	stw	ra,4(sp)
   45f20:	df000015 	stw	fp,0(sp)
   45f24:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
   45f28:	d0a00417 	ldw	r2,-32752(gp)
   45f2c:	1009883a 	mov	r4,r2
   45f30:	0045eb00 	call	45eb0 <_localeconv_r>
}
   45f34:	e037883a 	mov	sp,fp
   45f38:	dfc00117 	ldw	ra,4(sp)
   45f3c:	df000017 	ldw	fp,0(sp)
   45f40:	dec00204 	addi	sp,sp,8
   45f44:	f800283a 	ret

00045f48 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   45f48:	deffea04 	addi	sp,sp,-88
   45f4c:	dfc01515 	stw	ra,84(sp)
   45f50:	df001415 	stw	fp,80(sp)
   45f54:	dcc01315 	stw	r19,76(sp)
   45f58:	dc801215 	stw	r18,72(sp)
   45f5c:	dc401115 	stw	r17,68(sp)
   45f60:	dc001015 	stw	r16,64(sp)
   45f64:	df001404 	addi	fp,sp,80
   45f68:	e13ffb15 	stw	r4,-20(fp)
   45f6c:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   45f70:	8080030b 	ldhu	r2,12(r16)
   45f74:	10bfffcc 	andi	r2,r2,65535
   45f78:	1080008c 	andi	r2,r2,2
   45f7c:	10000726 	beq	r2,zero,45f9c <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
   45f80:	808010c4 	addi	r2,r16,67
   45f84:	80800015 	stw	r2,0(r16)
   45f88:	80800017 	ldw	r2,0(r16)
   45f8c:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
   45f90:	00800044 	movi	r2,1
   45f94:	80800515 	stw	r2,20(r16)
   45f98:	00006d06 	br	46150 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
   45f9c:	8080038b 	ldhu	r2,14(r16)
   45fa0:	10bfffcc 	andi	r2,r2,65535
   45fa4:	10a0001c 	xori	r2,r2,32768
   45fa8:	10a00004 	addi	r2,r2,-32768
   45fac:	10000916 	blt	r2,zero,45fd4 <__smakebuf_r+0x8c>
   45fb0:	8080038b 	ldhu	r2,14(r16)
   45fb4:	10bfffcc 	andi	r2,r2,65535
   45fb8:	10a0001c 	xori	r2,r2,32768
   45fbc:	10a00004 	addi	r2,r2,-32768
   45fc0:	e1bfec04 	addi	r6,fp,-80
   45fc4:	100b883a 	mov	r5,r2
   45fc8:	e13ffb17 	ldw	r4,-20(fp)
   45fcc:	004b23c0 	call	4b23c <_fstat_r>
   45fd0:	10000c0e 	bge	r2,zero,46004 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
   45fd4:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
   45fd8:	8080030b 	ldhu	r2,12(r16)
   45fdc:	10bfffcc 	andi	r2,r2,65535
   45fe0:	1080200c 	andi	r2,r2,128
   45fe4:	10000226 	beq	r2,zero,45ff0 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
   45fe8:	04401004 	movi	r17,64
   45fec:	00000106 	br	45ff4 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
   45ff0:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   45ff4:	8080030b 	ldhu	r2,12(r16)
   45ff8:	10820014 	ori	r2,r2,2048
   45ffc:	8080030d 	sth	r2,12(r16)
   46000:	00001606 	br	4605c <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   46004:	e0bfed17 	ldw	r2,-76(fp)
   46008:	10bc000c 	andi	r2,r2,61440
   4600c:	10880020 	cmpeqi	r2,r2,8192
   46010:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
   46014:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   46018:	e0bfed17 	ldw	r2,-76(fp)
   4601c:	10fc000c 	andi	r3,r2,61440
   46020:	00a00014 	movui	r2,32768
   46024:	18800a1e 	bne	r3,r2,46050 <__smakebuf_r+0x108>
   46028:	80c00a17 	ldw	r3,40(r16)
   4602c:	00800174 	movhi	r2,5
   46030:	10a4d004 	addi	r2,r2,-27840
   46034:	1880061e 	bne	r3,r2,46050 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
   46038:	8080030b 	ldhu	r2,12(r16)
   4603c:	10810014 	ori	r2,r2,1024
   46040:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   46044:	00810004 	movi	r2,1024
   46048:	80801315 	stw	r2,76(r16)
   4604c:	00000306 	br	4605c <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
   46050:	8080030b 	ldhu	r2,12(r16)
   46054:	10820014 	ori	r2,r2,2048
   46058:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
   4605c:	90001126 	beq	r18,zero,460a4 <__smakebuf_r+0x15c>
   46060:	8080038b 	ldhu	r2,14(r16)
   46064:	10bfffcc 	andi	r2,r2,65535
   46068:	10a0001c 	xori	r2,r2,32768
   4606c:	10a00004 	addi	r2,r2,-32768
   46070:	100b883a 	mov	r5,r2
   46074:	e13ffb17 	ldw	r4,-20(fp)
   46078:	004b88c0 	call	4b88c <_isatty_r>
   4607c:	10000926 	beq	r2,zero,460a4 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
   46080:	8080030b 	ldhu	r2,12(r16)
   46084:	10800054 	ori	r2,r2,1
   46088:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
   4608c:	808010c4 	addi	r2,r16,67
   46090:	80800015 	stw	r2,0(r16)
   46094:	80800017 	ldw	r2,0(r16)
   46098:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
   4609c:	00800044 	movi	r2,1
   460a0:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
   460a4:	880b883a 	mov	r5,r17
   460a8:	e13ffb17 	ldw	r4,-20(fp)
   460ac:	00465280 	call	46528 <_malloc_r>
   460b0:	1027883a 	mov	r19,r2
   460b4:	98000e1e 	bne	r19,zero,460f0 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
   460b8:	8080030b 	ldhu	r2,12(r16)
   460bc:	10bfffcc 	andi	r2,r2,65535
   460c0:	1080800c 	andi	r2,r2,512
   460c4:	1000221e 	bne	r2,zero,46150 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
   460c8:	8080030b 	ldhu	r2,12(r16)
   460cc:	10800094 	ori	r2,r2,2
   460d0:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
   460d4:	808010c4 	addi	r2,r16,67
   460d8:	80800015 	stw	r2,0(r16)
   460dc:	80800017 	ldw	r2,0(r16)
   460e0:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
   460e4:	00800044 	movi	r2,1
   460e8:	80800515 	stw	r2,20(r16)
   460ec:	00001806 	br	46150 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   460f0:	e0fffb17 	ldw	r3,-20(fp)
   460f4:	00800134 	movhi	r2,4
   460f8:	10948a04 	addi	r2,r2,21032
   460fc:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
   46100:	8080030b 	ldhu	r2,12(r16)
   46104:	10802014 	ori	r2,r2,128
   46108:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
   4610c:	84c00015 	stw	r19,0(r16)
   46110:	80800017 	ldw	r2,0(r16)
   46114:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
   46118:	8805883a 	mov	r2,r17
   4611c:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
   46120:	90000b26 	beq	r18,zero,46150 <__smakebuf_r+0x208>
   46124:	8080038b 	ldhu	r2,14(r16)
   46128:	10bfffcc 	andi	r2,r2,65535
   4612c:	10a0001c 	xori	r2,r2,32768
   46130:	10a00004 	addi	r2,r2,-32768
   46134:	100b883a 	mov	r5,r2
   46138:	e13ffb17 	ldw	r4,-20(fp)
   4613c:	004b88c0 	call	4b88c <_isatty_r>
   46140:	10000326 	beq	r2,zero,46150 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
   46144:	8080030b 	ldhu	r2,12(r16)
   46148:	10800054 	ori	r2,r2,1
   4614c:	8080030d 	sth	r2,12(r16)
    }
}
   46150:	e6fffc04 	addi	sp,fp,-16
   46154:	dfc00517 	ldw	ra,20(sp)
   46158:	df000417 	ldw	fp,16(sp)
   4615c:	dcc00317 	ldw	r19,12(sp)
   46160:	dc800217 	ldw	r18,8(sp)
   46164:	dc400117 	ldw	r17,4(sp)
   46168:	dc000017 	ldw	r16,0(sp)
   4616c:	dec00604 	addi	sp,sp,24
   46170:	f800283a 	ret

00046174 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
   46174:	defff104 	addi	sp,sp,-60
   46178:	dfc00e15 	stw	ra,56(sp)
   4617c:	df000d15 	stw	fp,52(sp)
   46180:	df000d04 	addi	fp,sp,52
   46184:	e13ffe15 	stw	r4,-8(fp)
   46188:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
   4618c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
   46190:	00800174 	movhi	r2,5
   46194:	108dd304 	addi	r2,r2,14156
   46198:	10800217 	ldw	r2,8(r2)
   4619c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
   461a0:	e0bff817 	ldw	r2,-32(fp)
   461a4:	10c00117 	ldw	r3,4(r2)
   461a8:	00bfff04 	movi	r2,-4
   461ac:	1884703a 	and	r2,r3,r2
   461b0:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
   461b4:	e0fff817 	ldw	r3,-32(fp)
   461b8:	e0bff917 	ldw	r2,-28(fp)
   461bc:	1885883a 	add	r2,r3,r2
   461c0:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   461c4:	d0e80717 	ldw	r3,-24548(gp)
   461c8:	e0bfff17 	ldw	r2,-4(fp)
   461cc:	1885883a 	add	r2,r3,r2
   461d0:	10800404 	addi	r2,r2,16
   461d4:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
   461d8:	00840004 	movi	r2,4096
   461dc:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   461e0:	d0a00817 	ldw	r2,-32736(gp)
   461e4:	10bfffe0 	cmpeqi	r2,r2,-1
   461e8:	1000081e 	bne	r2,zero,4620c <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
   461ec:	e0fffb17 	ldw	r3,-20(fp)
   461f0:	e0bff617 	ldw	r2,-40(fp)
   461f4:	1885883a 	add	r2,r3,r2
   461f8:	10ffffc4 	addi	r3,r2,-1
   461fc:	e0bffb17 	ldw	r2,-20(fp)
   46200:	0085c83a 	sub	r2,zero,r2
   46204:	1884703a 	and	r2,r3,r2
   46208:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
   4620c:	e0bff617 	ldw	r2,-40(fp)
   46210:	100b883a 	mov	r5,r2
   46214:	e13ffe17 	ldw	r4,-8(fp)
   46218:	00491600 	call	49160 <_sbrk_r>
   4621c:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   46220:	e0bff317 	ldw	r2,-52(fp)
   46224:	10bfffe0 	cmpeqi	r2,r2,-1
   46228:	1000b91e 	bne	r2,zero,46510 <malloc_extend_top+0x39c>
   4622c:	e0fff317 	ldw	r3,-52(fp)
   46230:	e0bffa17 	ldw	r2,-24(fp)
   46234:	1880042e 	bgeu	r3,r2,46248 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
   46238:	00800174 	movhi	r2,5
   4623c:	108dd304 	addi	r2,r2,14156
   46240:	e0fff817 	ldw	r3,-32(fp)
   46244:	1880b21e 	bne	r3,r2,46510 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
   46248:	00800174 	movhi	r2,5
   4624c:	109b6a04 	addi	r2,r2,28072
   46250:	10800017 	ldw	r2,0(r2)
   46254:	1007883a 	mov	r3,r2
   46258:	e0bff617 	ldw	r2,-40(fp)
   4625c:	1885883a 	add	r2,r3,r2
   46260:	1007883a 	mov	r3,r2
   46264:	00800174 	movhi	r2,5
   46268:	109b6a04 	addi	r2,r2,28072
   4626c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
   46270:	e0fff317 	ldw	r3,-52(fp)
   46274:	e0bffa17 	ldw	r2,-24(fp)
   46278:	1880101e 	bne	r3,r2,462bc <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
   4627c:	e0bffb17 	ldw	r2,-20(fp)
   46280:	10ffffc4 	addi	r3,r2,-1
   46284:	e0bffa17 	ldw	r2,-24(fp)
   46288:	1884703a 	and	r2,r3,r2
   4628c:	10000b1e 	bne	r2,zero,462bc <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
   46290:	e0fff617 	ldw	r3,-40(fp)
   46294:	e0bff917 	ldw	r2,-28(fp)
   46298:	1885883a 	add	r2,r3,r2
   4629c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   462a0:	00800174 	movhi	r2,5
   462a4:	108dd304 	addi	r2,r2,14156
   462a8:	10800217 	ldw	r2,8(r2)
   462ac:	e0fffc17 	ldw	r3,-16(fp)
   462b0:	18c00054 	ori	r3,r3,1
   462b4:	10c00115 	stw	r3,4(r2)
   462b8:	00008006 	br	464bc <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
   462bc:	d0a00817 	ldw	r2,-32736(gp)
   462c0:	10bfffd8 	cmpnei	r2,r2,-1
   462c4:	1000031e 	bne	r2,zero,462d4 <malloc_extend_top+0x160>
      sbrk_base = brk;
   462c8:	e0bff317 	ldw	r2,-52(fp)
   462cc:	d0a00815 	stw	r2,-32736(gp)
   462d0:	00000a06 	br	462fc <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
   462d4:	00800174 	movhi	r2,5
   462d8:	109b6a04 	addi	r2,r2,28072
   462dc:	10c00017 	ldw	r3,0(r2)
   462e0:	e13ff317 	ldw	r4,-52(fp)
   462e4:	e0bffa17 	ldw	r2,-24(fp)
   462e8:	2085c83a 	sub	r2,r4,r2
   462ec:	1887883a 	add	r3,r3,r2
   462f0:	00800174 	movhi	r2,5
   462f4:	109b6a04 	addi	r2,r2,28072
   462f8:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
   462fc:	e0bff317 	ldw	r2,-52(fp)
   46300:	10800204 	addi	r2,r2,8
   46304:	108001cc 	andi	r2,r2,7
   46308:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
   4630c:	e0bffd17 	ldw	r2,-12(fp)
   46310:	10000926 	beq	r2,zero,46338 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
   46314:	00c00204 	movi	r3,8
   46318:	e0bffd17 	ldw	r2,-12(fp)
   4631c:	1885c83a 	sub	r2,r3,r2
   46320:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
   46324:	e0fff317 	ldw	r3,-52(fp)
   46328:	e0bff417 	ldw	r2,-48(fp)
   4632c:	1885883a 	add	r2,r3,r2
   46330:	e0bff315 	stw	r2,-52(fp)
   46334:	00000106 	br	4633c <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
   46338:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
   4633c:	e0fff317 	ldw	r3,-52(fp)
   46340:	e0bff617 	ldw	r2,-40(fp)
   46344:	1885883a 	add	r2,r3,r2
   46348:	1007883a 	mov	r3,r2
   4634c:	e0bffb17 	ldw	r2,-20(fp)
   46350:	10bfffc4 	addi	r2,r2,-1
   46354:	1884703a 	and	r2,r3,r2
   46358:	e0fffb17 	ldw	r3,-20(fp)
   4635c:	1885c83a 	sub	r2,r3,r2
   46360:	e0fff417 	ldw	r3,-48(fp)
   46364:	1885883a 	add	r2,r3,r2
   46368:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
   4636c:	e0bff417 	ldw	r2,-48(fp)
   46370:	100b883a 	mov	r5,r2
   46374:	e13ffe17 	ldw	r4,-8(fp)
   46378:	00491600 	call	49160 <_sbrk_r>
   4637c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
   46380:	e0bff517 	ldw	r2,-44(fp)
   46384:	10bfffd8 	cmpnei	r2,r2,-1
   46388:	1000051e 	bne	r2,zero,463a0 <malloc_extend_top+0x22c>
      {
	correction = 0;
   4638c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
   46390:	00800044 	movi	r2,1
   46394:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
   46398:	e0bff317 	ldw	r2,-52(fp)
   4639c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
   463a0:	00800174 	movhi	r2,5
   463a4:	109b6a04 	addi	r2,r2,28072
   463a8:	10800017 	ldw	r2,0(r2)
   463ac:	1007883a 	mov	r3,r2
   463b0:	e0bff417 	ldw	r2,-48(fp)
   463b4:	1885883a 	add	r2,r3,r2
   463b8:	1007883a 	mov	r3,r2
   463bc:	00800174 	movhi	r2,5
   463c0:	109b6a04 	addi	r2,r2,28072
   463c4:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
   463c8:	00800174 	movhi	r2,5
   463cc:	108dd304 	addi	r2,r2,14156
   463d0:	e0fff317 	ldw	r3,-52(fp)
   463d4:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
   463d8:	e0fff517 	ldw	r3,-44(fp)
   463dc:	e0bff317 	ldw	r2,-52(fp)
   463e0:	1885c83a 	sub	r2,r3,r2
   463e4:	1007883a 	mov	r3,r2
   463e8:	e0bff417 	ldw	r2,-48(fp)
   463ec:	1885883a 	add	r2,r3,r2
   463f0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   463f4:	00800174 	movhi	r2,5
   463f8:	108dd304 	addi	r2,r2,14156
   463fc:	10800217 	ldw	r2,8(r2)
   46400:	e0fffc17 	ldw	r3,-16(fp)
   46404:	18c00054 	ori	r3,r3,1
   46408:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
   4640c:	00800174 	movhi	r2,5
   46410:	108dd304 	addi	r2,r2,14156
   46414:	e0fff817 	ldw	r3,-32(fp)
   46418:	18802826 	beq	r3,r2,464bc <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
   4641c:	e0bff917 	ldw	r2,-28(fp)
   46420:	10800428 	cmpgeui	r2,r2,16
   46424:	1000061e 	bne	r2,zero,46440 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
   46428:	00800174 	movhi	r2,5
   4642c:	108dd304 	addi	r2,r2,14156
   46430:	10800217 	ldw	r2,8(r2)
   46434:	00c00044 	movi	r3,1
   46438:	10c00115 	stw	r3,4(r2)
        return;
   4643c:	00003506 	br	46514 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
   46440:	e0bff917 	ldw	r2,-28(fp)
   46444:	10fffd04 	addi	r3,r2,-12
   46448:	00bffe04 	movi	r2,-8
   4644c:	1884703a 	and	r2,r3,r2
   46450:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
   46454:	e0bff817 	ldw	r2,-32(fp)
   46458:	10800117 	ldw	r2,4(r2)
   4645c:	10c0004c 	andi	r3,r2,1
   46460:	e0bff917 	ldw	r2,-28(fp)
   46464:	1886b03a 	or	r3,r3,r2
   46468:	e0bff817 	ldw	r2,-32(fp)
   4646c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
   46470:	e0fff817 	ldw	r3,-32(fp)
   46474:	e0bff917 	ldw	r2,-28(fp)
   46478:	1885883a 	add	r2,r3,r2
   4647c:	00c00144 	movi	r3,5
   46480:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
   46484:	e0bff917 	ldw	r2,-28(fp)
   46488:	10800104 	addi	r2,r2,4
   4648c:	e0fff817 	ldw	r3,-32(fp)
   46490:	1885883a 	add	r2,r3,r2
   46494:	00c00144 	movi	r3,5
   46498:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
   4649c:	e0bff917 	ldw	r2,-28(fp)
   464a0:	10800430 	cmpltui	r2,r2,16
   464a4:	1000051e 	bne	r2,zero,464bc <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
   464a8:	e0bff817 	ldw	r2,-32(fp)
   464ac:	10800204 	addi	r2,r2,8
   464b0:	100b883a 	mov	r5,r2
   464b4:	e13ffe17 	ldw	r4,-8(fp)
   464b8:	00454c00 	call	454c0 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
   464bc:	00800174 	movhi	r2,5
   464c0:	109b6a04 	addi	r2,r2,28072
   464c4:	10800017 	ldw	r2,0(r2)
   464c8:	1007883a 	mov	r3,r2
   464cc:	d0a80817 	ldw	r2,-24544(gp)
   464d0:	10c0042e 	bgeu	r2,r3,464e4 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
   464d4:	00800174 	movhi	r2,5
   464d8:	109b6a04 	addi	r2,r2,28072
   464dc:	10800017 	ldw	r2,0(r2)
   464e0:	d0a80815 	stw	r2,-24544(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
   464e4:	00800174 	movhi	r2,5
   464e8:	109b6a04 	addi	r2,r2,28072
   464ec:	10800017 	ldw	r2,0(r2)
   464f0:	1007883a 	mov	r3,r2
   464f4:	d0a80917 	ldw	r2,-24540(gp)
   464f8:	10c0062e 	bgeu	r2,r3,46514 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
   464fc:	00800174 	movhi	r2,5
   46500:	109b6a04 	addi	r2,r2,28072
   46504:	10800017 	ldw	r2,0(r2)
   46508:	d0a80915 	stw	r2,-24540(gp)
   4650c:	00000106 	br	46514 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
   46510:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
   46514:	e037883a 	mov	sp,fp
   46518:	dfc00117 	ldw	ra,4(sp)
   4651c:	df000017 	ldw	fp,0(sp)
   46520:	dec00204 	addi	sp,sp,8
   46524:	f800283a 	ret

00046528 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   46528:	deffef04 	addi	sp,sp,-68
   4652c:	dfc01015 	stw	ra,64(sp)
   46530:	df000f15 	stw	fp,60(sp)
   46534:	df000f04 	addi	fp,sp,60
   46538:	e13ffe15 	stw	r4,-8(fp)
   4653c:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   46540:	e0bfff17 	ldw	r2,-4(fp)
   46544:	108002c4 	addi	r2,r2,11
   46548:	108005f0 	cmpltui	r2,r2,23
   4654c:	1000051e 	bne	r2,zero,46564 <_malloc_r+0x3c>
   46550:	e0bfff17 	ldw	r2,-4(fp)
   46554:	10c002c4 	addi	r3,r2,11
   46558:	00bffe04 	movi	r2,-8
   4655c:	1884703a 	and	r2,r3,r2
   46560:	00000106 	br	46568 <_malloc_r+0x40>
   46564:	00800404 	movi	r2,16
   46568:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   4656c:	e0bffa17 	ldw	r2,-24(fp)
   46570:	10000316 	blt	r2,zero,46580 <_malloc_r+0x58>
   46574:	e0fffa17 	ldw	r3,-24(fp)
   46578:	e0bfff17 	ldw	r2,-4(fp)
   4657c:	1880052e 	bgeu	r3,r2,46594 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
   46580:	e0bffe17 	ldw	r2,-8(fp)
   46584:	00c00304 	movi	r3,12
   46588:	10c00015 	stw	r3,0(r2)
    return 0;
   4658c:	0005883a 	mov	r2,zero
   46590:	0002bf06 	br	47090 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
   46594:	e13ffe17 	ldw	r4,-8(fp)
   46598:	00507d00 	call	507d0 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
   4659c:	e0bffa17 	ldw	r2,-24(fp)
   465a0:	10807e28 	cmpgeui	r2,r2,504
   465a4:	10003f1e 	bne	r2,zero,466a4 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
   465a8:	e0bffa17 	ldw	r2,-24(fp)
   465ac:	1004d0fa 	srli	r2,r2,3
   465b0:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
   465b4:	e0bff217 	ldw	r2,-56(fp)
   465b8:	10800044 	addi	r2,r2,1
   465bc:	1085883a 	add	r2,r2,r2
   465c0:	1085883a 	add	r2,r2,r2
   465c4:	1087883a 	add	r3,r2,r2
   465c8:	00800174 	movhi	r2,5
   465cc:	108dd304 	addi	r2,r2,14156
   465d0:	1885883a 	add	r2,r3,r2
   465d4:	10bffe04 	addi	r2,r2,-8
   465d8:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
   465dc:	e0bff917 	ldw	r2,-28(fp)
   465e0:	10800317 	ldw	r2,12(r2)
   465e4:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
   465e8:	e0fff117 	ldw	r3,-60(fp)
   465ec:	e0bff917 	ldw	r2,-28(fp)
   465f0:	1880061e 	bne	r3,r2,4660c <_malloc_r+0xe4>
    {
      q = next_bin(q);
   465f4:	e0bff917 	ldw	r2,-28(fp)
   465f8:	10800204 	addi	r2,r2,8
   465fc:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
   46600:	e0bff917 	ldw	r2,-28(fp)
   46604:	10800317 	ldw	r2,12(r2)
   46608:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
   4660c:	e0fff117 	ldw	r3,-60(fp)
   46610:	e0bff917 	ldw	r2,-28(fp)
   46614:	18801f26 	beq	r3,r2,46694 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
   46618:	e0bff117 	ldw	r2,-60(fp)
   4661c:	10c00117 	ldw	r3,4(r2)
   46620:	00bfff04 	movi	r2,-4
   46624:	1884703a 	and	r2,r3,r2
   46628:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
   4662c:	e0bff117 	ldw	r2,-60(fp)
   46630:	10800317 	ldw	r2,12(r2)
   46634:	e0bff815 	stw	r2,-32(fp)
   46638:	e0bff117 	ldw	r2,-60(fp)
   4663c:	10800217 	ldw	r2,8(r2)
   46640:	e0bff715 	stw	r2,-36(fp)
   46644:	e0bff717 	ldw	r2,-36(fp)
   46648:	e0fff817 	ldw	r3,-32(fp)
   4664c:	10c00315 	stw	r3,12(r2)
   46650:	e0bff817 	ldw	r2,-32(fp)
   46654:	e0fff717 	ldw	r3,-36(fp)
   46658:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
   4665c:	e0fff117 	ldw	r3,-60(fp)
   46660:	e0bffb17 	ldw	r2,-20(fp)
   46664:	1885883a 	add	r2,r3,r2
   46668:	e13ff117 	ldw	r4,-60(fp)
   4666c:	e0fffb17 	ldw	r3,-20(fp)
   46670:	20c7883a 	add	r3,r4,r3
   46674:	18c00117 	ldw	r3,4(r3)
   46678:	18c00054 	ori	r3,r3,1
   4667c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   46680:	e13ffe17 	ldw	r4,-8(fp)
   46684:	00507f40 	call	507f4 <__malloc_unlock>
      return chunk2mem(victim);
   46688:	e0bff117 	ldw	r2,-60(fp)
   4668c:	10800204 	addi	r2,r2,8
   46690:	00027f06 	br	47090 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
   46694:	e0bff217 	ldw	r2,-56(fp)
   46698:	10800084 	addi	r2,r2,2
   4669c:	e0bff215 	stw	r2,-56(fp)
   466a0:	00007306 	br	46870 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
   466a4:	e0bffa17 	ldw	r2,-24(fp)
   466a8:	1004d27a 	srli	r2,r2,9
   466ac:	1000031e 	bne	r2,zero,466bc <_malloc_r+0x194>
   466b0:	e0bffa17 	ldw	r2,-24(fp)
   466b4:	1004d0fa 	srli	r2,r2,3
   466b8:	00002906 	br	46760 <_malloc_r+0x238>
   466bc:	e0bffa17 	ldw	r2,-24(fp)
   466c0:	1004d27a 	srli	r2,r2,9
   466c4:	10800168 	cmpgeui	r2,r2,5
   466c8:	1000041e 	bne	r2,zero,466dc <_malloc_r+0x1b4>
   466cc:	e0bffa17 	ldw	r2,-24(fp)
   466d0:	1004d1ba 	srli	r2,r2,6
   466d4:	10800e04 	addi	r2,r2,56
   466d8:	00002106 	br	46760 <_malloc_r+0x238>
   466dc:	e0bffa17 	ldw	r2,-24(fp)
   466e0:	1004d27a 	srli	r2,r2,9
   466e4:	10800568 	cmpgeui	r2,r2,21
   466e8:	1000041e 	bne	r2,zero,466fc <_malloc_r+0x1d4>
   466ec:	e0bffa17 	ldw	r2,-24(fp)
   466f0:	1004d27a 	srli	r2,r2,9
   466f4:	108016c4 	addi	r2,r2,91
   466f8:	00001906 	br	46760 <_malloc_r+0x238>
   466fc:	e0bffa17 	ldw	r2,-24(fp)
   46700:	1004d27a 	srli	r2,r2,9
   46704:	10801568 	cmpgeui	r2,r2,85
   46708:	1000041e 	bne	r2,zero,4671c <_malloc_r+0x1f4>
   4670c:	e0bffa17 	ldw	r2,-24(fp)
   46710:	1004d33a 	srli	r2,r2,12
   46714:	10801b84 	addi	r2,r2,110
   46718:	00001106 	br	46760 <_malloc_r+0x238>
   4671c:	e0bffa17 	ldw	r2,-24(fp)
   46720:	1004d27a 	srli	r2,r2,9
   46724:	10805568 	cmpgeui	r2,r2,341
   46728:	1000041e 	bne	r2,zero,4673c <_malloc_r+0x214>
   4672c:	e0bffa17 	ldw	r2,-24(fp)
   46730:	1004d3fa 	srli	r2,r2,15
   46734:	10801dc4 	addi	r2,r2,119
   46738:	00000906 	br	46760 <_malloc_r+0x238>
   4673c:	e0bffa17 	ldw	r2,-24(fp)
   46740:	1004d27a 	srli	r2,r2,9
   46744:	10815568 	cmpgeui	r2,r2,1365
   46748:	1000041e 	bne	r2,zero,4675c <_malloc_r+0x234>
   4674c:	e0bffa17 	ldw	r2,-24(fp)
   46750:	1004d4ba 	srli	r2,r2,18
   46754:	10801f04 	addi	r2,r2,124
   46758:	00000106 	br	46760 <_malloc_r+0x238>
   4675c:	00801f84 	movi	r2,126
   46760:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
   46764:	e0bff217 	ldw	r2,-56(fp)
   46768:	10800044 	addi	r2,r2,1
   4676c:	1085883a 	add	r2,r2,r2
   46770:	1085883a 	add	r2,r2,r2
   46774:	1087883a 	add	r3,r2,r2
   46778:	00800174 	movhi	r2,5
   4677c:	108dd304 	addi	r2,r2,14156
   46780:	1885883a 	add	r2,r3,r2
   46784:	10bffe04 	addi	r2,r2,-8
   46788:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
   4678c:	e0bff317 	ldw	r2,-52(fp)
   46790:	10800317 	ldw	r2,12(r2)
   46794:	e0bff115 	stw	r2,-60(fp)
   46798:	00002f06 	br	46858 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
   4679c:	e0bff117 	ldw	r2,-60(fp)
   467a0:	10c00117 	ldw	r3,4(r2)
   467a4:	00bfff04 	movi	r2,-4
   467a8:	1884703a 	and	r2,r3,r2
   467ac:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
   467b0:	e0fffb17 	ldw	r3,-20(fp)
   467b4:	e0bffa17 	ldw	r2,-24(fp)
   467b8:	1885c83a 	sub	r2,r3,r2
   467bc:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   467c0:	e0bff417 	ldw	r2,-48(fp)
   467c4:	10800410 	cmplti	r2,r2,16
   467c8:	1000041e 	bne	r2,zero,467dc <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
   467cc:	e0bff217 	ldw	r2,-56(fp)
   467d0:	10bfffc4 	addi	r2,r2,-1
   467d4:	e0bff215 	stw	r2,-56(fp)
        break;   
   467d8:	00002206 	br	46864 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
   467dc:	e0bff417 	ldw	r2,-48(fp)
   467e0:	10001a16 	blt	r2,zero,4684c <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
   467e4:	e0bff117 	ldw	r2,-60(fp)
   467e8:	10800317 	ldw	r2,12(r2)
   467ec:	e0bff815 	stw	r2,-32(fp)
   467f0:	e0bff117 	ldw	r2,-60(fp)
   467f4:	10800217 	ldw	r2,8(r2)
   467f8:	e0bff715 	stw	r2,-36(fp)
   467fc:	e0bff717 	ldw	r2,-36(fp)
   46800:	e0fff817 	ldw	r3,-32(fp)
   46804:	10c00315 	stw	r3,12(r2)
   46808:	e0bff817 	ldw	r2,-32(fp)
   4680c:	e0fff717 	ldw	r3,-36(fp)
   46810:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
   46814:	e0fff117 	ldw	r3,-60(fp)
   46818:	e0bffb17 	ldw	r2,-20(fp)
   4681c:	1885883a 	add	r2,r3,r2
   46820:	e13ff117 	ldw	r4,-60(fp)
   46824:	e0fffb17 	ldw	r3,-20(fp)
   46828:	20c7883a 	add	r3,r4,r3
   4682c:	18c00117 	ldw	r3,4(r3)
   46830:	18c00054 	ori	r3,r3,1
   46834:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   46838:	e13ffe17 	ldw	r4,-8(fp)
   4683c:	00507f40 	call	507f4 <__malloc_unlock>
        return chunk2mem(victim);
   46840:	e0bff117 	ldw	r2,-60(fp)
   46844:	10800204 	addi	r2,r2,8
   46848:	00021106 	br	47090 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   4684c:	e0bff117 	ldw	r2,-60(fp)
   46850:	10800317 	ldw	r2,12(r2)
   46854:	e0bff115 	stw	r2,-60(fp)
   46858:	e0fff117 	ldw	r3,-60(fp)
   4685c:	e0bff317 	ldw	r2,-52(fp)
   46860:	18bfce1e 	bne	r3,r2,4679c <_gp+0xfffe9a40>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
   46864:	e0bff217 	ldw	r2,-56(fp)
   46868:	10800044 	addi	r2,r2,1
   4686c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
   46870:	00800174 	movhi	r2,5
   46874:	108dd504 	addi	r2,r2,14164
   46878:	10800217 	ldw	r2,8(r2)
   4687c:	e0bff115 	stw	r2,-60(fp)
   46880:	00800174 	movhi	r2,5
   46884:	108dd504 	addi	r2,r2,14164
   46888:	e0fff117 	ldw	r3,-60(fp)
   4688c:	1880e626 	beq	r3,r2,46c28 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
   46890:	e0bff117 	ldw	r2,-60(fp)
   46894:	10c00117 	ldw	r3,4(r2)
   46898:	00bfff04 	movi	r2,-4
   4689c:	1884703a 	and	r2,r3,r2
   468a0:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
   468a4:	e0fffb17 	ldw	r3,-20(fp)
   468a8:	e0bffa17 	ldw	r2,-24(fp)
   468ac:	1885c83a 	sub	r2,r3,r2
   468b0:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
   468b4:	e0bff417 	ldw	r2,-48(fp)
   468b8:	10800410 	cmplti	r2,r2,16
   468bc:	1000271e 	bne	r2,zero,4695c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
   468c0:	e0fff117 	ldw	r3,-60(fp)
   468c4:	e0bffa17 	ldw	r2,-24(fp)
   468c8:	1885883a 	add	r2,r3,r2
   468cc:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
   468d0:	e0bffa17 	ldw	r2,-24(fp)
   468d4:	10c00054 	ori	r3,r2,1
   468d8:	e0bff117 	ldw	r2,-60(fp)
   468dc:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
   468e0:	00c00174 	movhi	r3,5
   468e4:	18cdd504 	addi	r3,r3,14164
   468e8:	00800174 	movhi	r2,5
   468ec:	108dd504 	addi	r2,r2,14164
   468f0:	e13ffc17 	ldw	r4,-16(fp)
   468f4:	11000315 	stw	r4,12(r2)
   468f8:	10800317 	ldw	r2,12(r2)
   468fc:	18800215 	stw	r2,8(r3)
   46900:	00800174 	movhi	r2,5
   46904:	108dd504 	addi	r2,r2,14164
   46908:	e0fffc17 	ldw	r3,-16(fp)
   4690c:	18800315 	stw	r2,12(r3)
   46910:	e0bffc17 	ldw	r2,-16(fp)
   46914:	10c00317 	ldw	r3,12(r2)
   46918:	e0bffc17 	ldw	r2,-16(fp)
   4691c:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
   46920:	e0bff417 	ldw	r2,-48(fp)
   46924:	10800054 	ori	r2,r2,1
   46928:	1007883a 	mov	r3,r2
   4692c:	e0bffc17 	ldw	r2,-16(fp)
   46930:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
   46934:	e0bff417 	ldw	r2,-48(fp)
   46938:	e0fffc17 	ldw	r3,-16(fp)
   4693c:	1885883a 	add	r2,r3,r2
   46940:	e0fff417 	ldw	r3,-48(fp)
   46944:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   46948:	e13ffe17 	ldw	r4,-8(fp)
   4694c:	00507f40 	call	507f4 <__malloc_unlock>
      return chunk2mem(victim);
   46950:	e0bff117 	ldw	r2,-60(fp)
   46954:	10800204 	addi	r2,r2,8
   46958:	0001cd06 	br	47090 <_malloc_r+0xb68>
    }

    clear_last_remainder;
   4695c:	00c00174 	movhi	r3,5
   46960:	18cdd504 	addi	r3,r3,14164
   46964:	00800174 	movhi	r2,5
   46968:	108dd504 	addi	r2,r2,14164
   4696c:	01000174 	movhi	r4,5
   46970:	210dd504 	addi	r4,r4,14164
   46974:	11000315 	stw	r4,12(r2)
   46978:	10800317 	ldw	r2,12(r2)
   4697c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
   46980:	e0bff417 	ldw	r2,-48(fp)
   46984:	10000e16 	blt	r2,zero,469c0 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
   46988:	e0fff117 	ldw	r3,-60(fp)
   4698c:	e0bffb17 	ldw	r2,-20(fp)
   46990:	1885883a 	add	r2,r3,r2
   46994:	e13ff117 	ldw	r4,-60(fp)
   46998:	e0fffb17 	ldw	r3,-20(fp)
   4699c:	20c7883a 	add	r3,r4,r3
   469a0:	18c00117 	ldw	r3,4(r3)
   469a4:	18c00054 	ori	r3,r3,1
   469a8:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   469ac:	e13ffe17 	ldw	r4,-8(fp)
   469b0:	00507f40 	call	507f4 <__malloc_unlock>
      return chunk2mem(victim);
   469b4:	e0bff117 	ldw	r2,-60(fp)
   469b8:	10800204 	addi	r2,r2,8
   469bc:	0001b406 	br	47090 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   469c0:	e0bffb17 	ldw	r2,-20(fp)
   469c4:	10808028 	cmpgeui	r2,r2,512
   469c8:	10002c1e 	bne	r2,zero,46a7c <_malloc_r+0x554>
   469cc:	e0bffb17 	ldw	r2,-20(fp)
   469d0:	1004d0fa 	srli	r2,r2,3
   469d4:	e0bffd15 	stw	r2,-12(fp)
   469d8:	00c00174 	movhi	r3,5
   469dc:	18cdd304 	addi	r3,r3,14156
   469e0:	00800174 	movhi	r2,5
   469e4:	108dd304 	addi	r2,r2,14156
   469e8:	11000117 	ldw	r4,4(r2)
   469ec:	e0bffd17 	ldw	r2,-12(fp)
   469f0:	1000010e 	bge	r2,zero,469f8 <_malloc_r+0x4d0>
   469f4:	108000c4 	addi	r2,r2,3
   469f8:	1005d0ba 	srai	r2,r2,2
   469fc:	100b883a 	mov	r5,r2
   46a00:	00800044 	movi	r2,1
   46a04:	1144983a 	sll	r2,r2,r5
   46a08:	2084b03a 	or	r2,r4,r2
   46a0c:	18800115 	stw	r2,4(r3)
   46a10:	e0bffd17 	ldw	r2,-12(fp)
   46a14:	10800044 	addi	r2,r2,1
   46a18:	1085883a 	add	r2,r2,r2
   46a1c:	1085883a 	add	r2,r2,r2
   46a20:	1087883a 	add	r3,r2,r2
   46a24:	00800174 	movhi	r2,5
   46a28:	108dd304 	addi	r2,r2,14156
   46a2c:	1885883a 	add	r2,r3,r2
   46a30:	10bffe04 	addi	r2,r2,-8
   46a34:	e0bff815 	stw	r2,-32(fp)
   46a38:	e0bff817 	ldw	r2,-32(fp)
   46a3c:	10800217 	ldw	r2,8(r2)
   46a40:	e0bff715 	stw	r2,-36(fp)
   46a44:	e0bff117 	ldw	r2,-60(fp)
   46a48:	e0fff817 	ldw	r3,-32(fp)
   46a4c:	10c00315 	stw	r3,12(r2)
   46a50:	e0bff117 	ldw	r2,-60(fp)
   46a54:	e0fff717 	ldw	r3,-36(fp)
   46a58:	10c00215 	stw	r3,8(r2)
   46a5c:	e0bff817 	ldw	r2,-32(fp)
   46a60:	e0fff117 	ldw	r3,-60(fp)
   46a64:	10c00215 	stw	r3,8(r2)
   46a68:	e0bff817 	ldw	r2,-32(fp)
   46a6c:	10c00217 	ldw	r3,8(r2)
   46a70:	e0bff717 	ldw	r2,-36(fp)
   46a74:	10c00315 	stw	r3,12(r2)
   46a78:	00006b06 	br	46c28 <_malloc_r+0x700>
   46a7c:	e0bffb17 	ldw	r2,-20(fp)
   46a80:	1004d27a 	srli	r2,r2,9
   46a84:	1000031e 	bne	r2,zero,46a94 <_malloc_r+0x56c>
   46a88:	e0bffb17 	ldw	r2,-20(fp)
   46a8c:	1004d0fa 	srli	r2,r2,3
   46a90:	00002906 	br	46b38 <_malloc_r+0x610>
   46a94:	e0bffb17 	ldw	r2,-20(fp)
   46a98:	1004d27a 	srli	r2,r2,9
   46a9c:	10800168 	cmpgeui	r2,r2,5
   46aa0:	1000041e 	bne	r2,zero,46ab4 <_malloc_r+0x58c>
   46aa4:	e0bffb17 	ldw	r2,-20(fp)
   46aa8:	1004d1ba 	srli	r2,r2,6
   46aac:	10800e04 	addi	r2,r2,56
   46ab0:	00002106 	br	46b38 <_malloc_r+0x610>
   46ab4:	e0bffb17 	ldw	r2,-20(fp)
   46ab8:	1004d27a 	srli	r2,r2,9
   46abc:	10800568 	cmpgeui	r2,r2,21
   46ac0:	1000041e 	bne	r2,zero,46ad4 <_malloc_r+0x5ac>
   46ac4:	e0bffb17 	ldw	r2,-20(fp)
   46ac8:	1004d27a 	srli	r2,r2,9
   46acc:	108016c4 	addi	r2,r2,91
   46ad0:	00001906 	br	46b38 <_malloc_r+0x610>
   46ad4:	e0bffb17 	ldw	r2,-20(fp)
   46ad8:	1004d27a 	srli	r2,r2,9
   46adc:	10801568 	cmpgeui	r2,r2,85
   46ae0:	1000041e 	bne	r2,zero,46af4 <_malloc_r+0x5cc>
   46ae4:	e0bffb17 	ldw	r2,-20(fp)
   46ae8:	1004d33a 	srli	r2,r2,12
   46aec:	10801b84 	addi	r2,r2,110
   46af0:	00001106 	br	46b38 <_malloc_r+0x610>
   46af4:	e0bffb17 	ldw	r2,-20(fp)
   46af8:	1004d27a 	srli	r2,r2,9
   46afc:	10805568 	cmpgeui	r2,r2,341
   46b00:	1000041e 	bne	r2,zero,46b14 <_malloc_r+0x5ec>
   46b04:	e0bffb17 	ldw	r2,-20(fp)
   46b08:	1004d3fa 	srli	r2,r2,15
   46b0c:	10801dc4 	addi	r2,r2,119
   46b10:	00000906 	br	46b38 <_malloc_r+0x610>
   46b14:	e0bffb17 	ldw	r2,-20(fp)
   46b18:	1004d27a 	srli	r2,r2,9
   46b1c:	10815568 	cmpgeui	r2,r2,1365
   46b20:	1000041e 	bne	r2,zero,46b34 <_malloc_r+0x60c>
   46b24:	e0bffb17 	ldw	r2,-20(fp)
   46b28:	1004d4ba 	srli	r2,r2,18
   46b2c:	10801f04 	addi	r2,r2,124
   46b30:	00000106 	br	46b38 <_malloc_r+0x610>
   46b34:	00801f84 	movi	r2,126
   46b38:	e0bffd15 	stw	r2,-12(fp)
   46b3c:	e0bffd17 	ldw	r2,-12(fp)
   46b40:	10800044 	addi	r2,r2,1
   46b44:	1085883a 	add	r2,r2,r2
   46b48:	1085883a 	add	r2,r2,r2
   46b4c:	1087883a 	add	r3,r2,r2
   46b50:	00800174 	movhi	r2,5
   46b54:	108dd304 	addi	r2,r2,14156
   46b58:	1885883a 	add	r2,r3,r2
   46b5c:	10bffe04 	addi	r2,r2,-8
   46b60:	e0bff815 	stw	r2,-32(fp)
   46b64:	e0bff817 	ldw	r2,-32(fp)
   46b68:	10800217 	ldw	r2,8(r2)
   46b6c:	e0bff715 	stw	r2,-36(fp)
   46b70:	e0fff717 	ldw	r3,-36(fp)
   46b74:	e0bff817 	ldw	r2,-32(fp)
   46b78:	1880121e 	bne	r3,r2,46bc4 <_malloc_r+0x69c>
   46b7c:	00c00174 	movhi	r3,5
   46b80:	18cdd304 	addi	r3,r3,14156
   46b84:	00800174 	movhi	r2,5
   46b88:	108dd304 	addi	r2,r2,14156
   46b8c:	11000117 	ldw	r4,4(r2)
   46b90:	e0bffd17 	ldw	r2,-12(fp)
   46b94:	1000010e 	bge	r2,zero,46b9c <_malloc_r+0x674>
   46b98:	108000c4 	addi	r2,r2,3
   46b9c:	1005d0ba 	srai	r2,r2,2
   46ba0:	100b883a 	mov	r5,r2
   46ba4:	00800044 	movi	r2,1
   46ba8:	1144983a 	sll	r2,r2,r5
   46bac:	2084b03a 	or	r2,r4,r2
   46bb0:	18800115 	stw	r2,4(r3)
   46bb4:	00000f06 	br	46bf4 <_malloc_r+0x6cc>
   46bb8:	e0bff717 	ldw	r2,-36(fp)
   46bbc:	10800217 	ldw	r2,8(r2)
   46bc0:	e0bff715 	stw	r2,-36(fp)
   46bc4:	e0fff717 	ldw	r3,-36(fp)
   46bc8:	e0bff817 	ldw	r2,-32(fp)
   46bcc:	18800626 	beq	r3,r2,46be8 <_malloc_r+0x6c0>
   46bd0:	e0bff717 	ldw	r2,-36(fp)
   46bd4:	10c00117 	ldw	r3,4(r2)
   46bd8:	00bfff04 	movi	r2,-4
   46bdc:	1884703a 	and	r2,r3,r2
   46be0:	e0fffb17 	ldw	r3,-20(fp)
   46be4:	18bff436 	bltu	r3,r2,46bb8 <_gp+0xfffe9e5c>
   46be8:	e0bff717 	ldw	r2,-36(fp)
   46bec:	10800317 	ldw	r2,12(r2)
   46bf0:	e0bff815 	stw	r2,-32(fp)
   46bf4:	e0bff117 	ldw	r2,-60(fp)
   46bf8:	e0fff817 	ldw	r3,-32(fp)
   46bfc:	10c00315 	stw	r3,12(r2)
   46c00:	e0bff117 	ldw	r2,-60(fp)
   46c04:	e0fff717 	ldw	r3,-36(fp)
   46c08:	10c00215 	stw	r3,8(r2)
   46c0c:	e0bff817 	ldw	r2,-32(fp)
   46c10:	e0fff117 	ldw	r3,-60(fp)
   46c14:	10c00215 	stw	r3,8(r2)
   46c18:	e0bff817 	ldw	r2,-32(fp)
   46c1c:	10c00217 	ldw	r3,8(r2)
   46c20:	e0bff717 	ldw	r2,-36(fp)
   46c24:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
   46c28:	e0bff217 	ldw	r2,-56(fp)
   46c2c:	1000010e 	bge	r2,zero,46c34 <_malloc_r+0x70c>
   46c30:	108000c4 	addi	r2,r2,3
   46c34:	1005d0ba 	srai	r2,r2,2
   46c38:	1007883a 	mov	r3,r2
   46c3c:	00800044 	movi	r2,1
   46c40:	10c4983a 	sll	r2,r2,r3
   46c44:	e0bff515 	stw	r2,-44(fp)
   46c48:	00800174 	movhi	r2,5
   46c4c:	108dd304 	addi	r2,r2,14156
   46c50:	10c00117 	ldw	r3,4(r2)
   46c54:	e0bff517 	ldw	r2,-44(fp)
   46c58:	1880c636 	bltu	r3,r2,46f74 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
   46c5c:	00800174 	movhi	r2,5
   46c60:	108dd304 	addi	r2,r2,14156
   46c64:	10c00117 	ldw	r3,4(r2)
   46c68:	e0bff517 	ldw	r2,-44(fp)
   46c6c:	1884703a 	and	r2,r3,r2
   46c70:	1000151e 	bne	r2,zero,46cc8 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   46c74:	e0fff217 	ldw	r3,-56(fp)
   46c78:	00bfff04 	movi	r2,-4
   46c7c:	1884703a 	and	r2,r3,r2
   46c80:	10800104 	addi	r2,r2,4
   46c84:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
   46c88:	e0bff517 	ldw	r2,-44(fp)
   46c8c:	1085883a 	add	r2,r2,r2
   46c90:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
   46c94:	00000606 	br	46cb0 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
   46c98:	e0bff217 	ldw	r2,-56(fp)
   46c9c:	10800104 	addi	r2,r2,4
   46ca0:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
   46ca4:	e0bff517 	ldw	r2,-44(fp)
   46ca8:	1085883a 	add	r2,r2,r2
   46cac:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   46cb0:	00800174 	movhi	r2,5
   46cb4:	108dd304 	addi	r2,r2,14156
   46cb8:	10c00117 	ldw	r3,4(r2)
   46cbc:	e0bff517 	ldw	r2,-44(fp)
   46cc0:	1884703a 	and	r2,r3,r2
   46cc4:	103ff426 	beq	r2,zero,46c98 <_gp+0xfffe9f3c>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
   46cc8:	e0bff217 	ldw	r2,-56(fp)
   46ccc:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
   46cd0:	e0bff217 	ldw	r2,-56(fp)
   46cd4:	10800044 	addi	r2,r2,1
   46cd8:	1085883a 	add	r2,r2,r2
   46cdc:	1085883a 	add	r2,r2,r2
   46ce0:	1087883a 	add	r3,r2,r2
   46ce4:	00800174 	movhi	r2,5
   46ce8:	108dd304 	addi	r2,r2,14156
   46cec:	1885883a 	add	r2,r3,r2
   46cf0:	10bffe04 	addi	r2,r2,-8
   46cf4:	e0bff315 	stw	r2,-52(fp)
   46cf8:	e0bff317 	ldw	r2,-52(fp)
   46cfc:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   46d00:	e0bff317 	ldw	r2,-52(fp)
   46d04:	10800317 	ldw	r2,12(r2)
   46d08:	e0bff115 	stw	r2,-60(fp)
   46d0c:	00005e06 	br	46e88 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
   46d10:	e0bff117 	ldw	r2,-60(fp)
   46d14:	10c00117 	ldw	r3,4(r2)
   46d18:	00bfff04 	movi	r2,-4
   46d1c:	1884703a 	and	r2,r3,r2
   46d20:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
   46d24:	e0fffb17 	ldw	r3,-20(fp)
   46d28:	e0bffa17 	ldw	r2,-24(fp)
   46d2c:	1885c83a 	sub	r2,r3,r2
   46d30:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
   46d34:	e0bff417 	ldw	r2,-48(fp)
   46d38:	10800410 	cmplti	r2,r2,16
   46d3c:	1000331e 	bne	r2,zero,46e0c <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
   46d40:	e0fff117 	ldw	r3,-60(fp)
   46d44:	e0bffa17 	ldw	r2,-24(fp)
   46d48:	1885883a 	add	r2,r3,r2
   46d4c:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
   46d50:	e0bffa17 	ldw	r2,-24(fp)
   46d54:	10c00054 	ori	r3,r2,1
   46d58:	e0bff117 	ldw	r2,-60(fp)
   46d5c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   46d60:	e0bff117 	ldw	r2,-60(fp)
   46d64:	10800317 	ldw	r2,12(r2)
   46d68:	e0bff815 	stw	r2,-32(fp)
   46d6c:	e0bff117 	ldw	r2,-60(fp)
   46d70:	10800217 	ldw	r2,8(r2)
   46d74:	e0bff715 	stw	r2,-36(fp)
   46d78:	e0bff717 	ldw	r2,-36(fp)
   46d7c:	e0fff817 	ldw	r3,-32(fp)
   46d80:	10c00315 	stw	r3,12(r2)
   46d84:	e0bff817 	ldw	r2,-32(fp)
   46d88:	e0fff717 	ldw	r3,-36(fp)
   46d8c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
   46d90:	00c00174 	movhi	r3,5
   46d94:	18cdd504 	addi	r3,r3,14164
   46d98:	00800174 	movhi	r2,5
   46d9c:	108dd504 	addi	r2,r2,14164
   46da0:	e13ffc17 	ldw	r4,-16(fp)
   46da4:	11000315 	stw	r4,12(r2)
   46da8:	10800317 	ldw	r2,12(r2)
   46dac:	18800215 	stw	r2,8(r3)
   46db0:	00800174 	movhi	r2,5
   46db4:	108dd504 	addi	r2,r2,14164
   46db8:	e0fffc17 	ldw	r3,-16(fp)
   46dbc:	18800315 	stw	r2,12(r3)
   46dc0:	e0bffc17 	ldw	r2,-16(fp)
   46dc4:	10c00317 	ldw	r3,12(r2)
   46dc8:	e0bffc17 	ldw	r2,-16(fp)
   46dcc:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
   46dd0:	e0bff417 	ldw	r2,-48(fp)
   46dd4:	10800054 	ori	r2,r2,1
   46dd8:	1007883a 	mov	r3,r2
   46ddc:	e0bffc17 	ldw	r2,-16(fp)
   46de0:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
   46de4:	e0bff417 	ldw	r2,-48(fp)
   46de8:	e0fffc17 	ldw	r3,-16(fp)
   46dec:	1885883a 	add	r2,r3,r2
   46df0:	e0fff417 	ldw	r3,-48(fp)
   46df4:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   46df8:	e13ffe17 	ldw	r4,-8(fp)
   46dfc:	00507f40 	call	507f4 <__malloc_unlock>
            return chunk2mem(victim);
   46e00:	e0bff117 	ldw	r2,-60(fp)
   46e04:	10800204 	addi	r2,r2,8
   46e08:	0000a106 	br	47090 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
   46e0c:	e0bff417 	ldw	r2,-48(fp)
   46e10:	10001a16 	blt	r2,zero,46e7c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
   46e14:	e0fff117 	ldw	r3,-60(fp)
   46e18:	e0bffb17 	ldw	r2,-20(fp)
   46e1c:	1885883a 	add	r2,r3,r2
   46e20:	e13ff117 	ldw	r4,-60(fp)
   46e24:	e0fffb17 	ldw	r3,-20(fp)
   46e28:	20c7883a 	add	r3,r4,r3
   46e2c:	18c00117 	ldw	r3,4(r3)
   46e30:	18c00054 	ori	r3,r3,1
   46e34:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   46e38:	e0bff117 	ldw	r2,-60(fp)
   46e3c:	10800317 	ldw	r2,12(r2)
   46e40:	e0bff815 	stw	r2,-32(fp)
   46e44:	e0bff117 	ldw	r2,-60(fp)
   46e48:	10800217 	ldw	r2,8(r2)
   46e4c:	e0bff715 	stw	r2,-36(fp)
   46e50:	e0bff717 	ldw	r2,-36(fp)
   46e54:	e0fff817 	ldw	r3,-32(fp)
   46e58:	10c00315 	stw	r3,12(r2)
   46e5c:	e0bff817 	ldw	r2,-32(fp)
   46e60:	e0fff717 	ldw	r3,-36(fp)
   46e64:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   46e68:	e13ffe17 	ldw	r4,-8(fp)
   46e6c:	00507f40 	call	507f4 <__malloc_unlock>
            return chunk2mem(victim);
   46e70:	e0bff117 	ldw	r2,-60(fp)
   46e74:	10800204 	addi	r2,r2,8
   46e78:	00008506 	br	47090 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   46e7c:	e0bff117 	ldw	r2,-60(fp)
   46e80:	10800317 	ldw	r2,12(r2)
   46e84:	e0bff115 	stw	r2,-60(fp)
   46e88:	e0fff117 	ldw	r3,-60(fp)
   46e8c:	e0bff317 	ldw	r2,-52(fp)
   46e90:	18bf9f1e 	bne	r3,r2,46d10 <_gp+0xfffe9fb4>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
   46e94:	e0bff317 	ldw	r2,-52(fp)
   46e98:	10800204 	addi	r2,r2,8
   46e9c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   46ea0:	e0bff217 	ldw	r2,-56(fp)
   46ea4:	10800044 	addi	r2,r2,1
   46ea8:	e0bff215 	stw	r2,-56(fp)
   46eac:	e0bff217 	ldw	r2,-56(fp)
   46eb0:	108000cc 	andi	r2,r2,3
   46eb4:	103f921e 	bne	r2,zero,46d00 <_gp+0xfffe9fa4>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   46eb8:	e0bff617 	ldw	r2,-40(fp)
   46ebc:	108000cc 	andi	r2,r2,3
   46ec0:	10000a1e 	bne	r2,zero,46eec <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
   46ec4:	00800174 	movhi	r2,5
   46ec8:	108dd304 	addi	r2,r2,14156
   46ecc:	00c00174 	movhi	r3,5
   46ed0:	18cdd304 	addi	r3,r3,14156
   46ed4:	19000117 	ldw	r4,4(r3)
   46ed8:	e0fff517 	ldw	r3,-44(fp)
   46edc:	00c6303a 	nor	r3,zero,r3
   46ee0:	20c6703a 	and	r3,r4,r3
   46ee4:	10c00115 	stw	r3,4(r2)
          break;
   46ee8:	00000a06 	br	46f14 <_malloc_r+0x9ec>
        }
        --startidx;
   46eec:	e0bff617 	ldw	r2,-40(fp)
   46ef0:	10bfffc4 	addi	r2,r2,-1
   46ef4:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
   46ef8:	e0bff917 	ldw	r2,-28(fp)
   46efc:	10bffe04 	addi	r2,r2,-8
   46f00:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
   46f04:	e0bff917 	ldw	r2,-28(fp)
   46f08:	10c00217 	ldw	r3,8(r2)
   46f0c:	e0bff917 	ldw	r2,-28(fp)
   46f10:	18bfe926 	beq	r3,r2,46eb8 <_gp+0xfffea15c>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
   46f14:	e0bff517 	ldw	r2,-44(fp)
   46f18:	1085883a 	add	r2,r2,r2
   46f1c:	e0bff515 	stw	r2,-44(fp)
   46f20:	00800174 	movhi	r2,5
   46f24:	108dd304 	addi	r2,r2,14156
   46f28:	10c00117 	ldw	r3,4(r2)
   46f2c:	e0bff517 	ldw	r2,-44(fp)
   46f30:	18801036 	bltu	r3,r2,46f74 <_malloc_r+0xa4c>
   46f34:	e0bff517 	ldw	r2,-44(fp)
   46f38:	10000e26 	beq	r2,zero,46f74 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
   46f3c:	00000606 	br	46f58 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
   46f40:	e0bff217 	ldw	r2,-56(fp)
   46f44:	10800104 	addi	r2,r2,4
   46f48:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
   46f4c:	e0bff517 	ldw	r2,-44(fp)
   46f50:	1085883a 	add	r2,r2,r2
   46f54:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   46f58:	00800174 	movhi	r2,5
   46f5c:	108dd304 	addi	r2,r2,14156
   46f60:	10c00117 	ldw	r3,4(r2)
   46f64:	e0bff517 	ldw	r2,-44(fp)
   46f68:	1884703a 	and	r2,r3,r2
   46f6c:	103ff426 	beq	r2,zero,46f40 <_gp+0xfffea1e4>
          block <<= 1;
        }
      }
      else
        break;
    }
   46f70:	003f5506 	br	46cc8 <_gp+0xfffe9f6c>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   46f74:	00800174 	movhi	r2,5
   46f78:	108dd304 	addi	r2,r2,14156
   46f7c:	10800217 	ldw	r2,8(r2)
   46f80:	10c00117 	ldw	r3,4(r2)
   46f84:	00bfff04 	movi	r2,-4
   46f88:	1886703a 	and	r3,r3,r2
   46f8c:	e0bffa17 	ldw	r2,-24(fp)
   46f90:	1885c83a 	sub	r2,r3,r2
   46f94:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   46f98:	00800174 	movhi	r2,5
   46f9c:	108dd304 	addi	r2,r2,14156
   46fa0:	10800217 	ldw	r2,8(r2)
   46fa4:	10c00117 	ldw	r3,4(r2)
   46fa8:	00bfff04 	movi	r2,-4
   46fac:	1886703a 	and	r3,r3,r2
   46fb0:	e0bffa17 	ldw	r2,-24(fp)
   46fb4:	18800336 	bltu	r3,r2,46fc4 <_malloc_r+0xa9c>
   46fb8:	e0bff417 	ldw	r2,-48(fp)
   46fbc:	10800408 	cmpgei	r2,r2,16
   46fc0:	10001b1e 	bne	r2,zero,47030 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
   46fc4:	e17ffa17 	ldw	r5,-24(fp)
   46fc8:	e13ffe17 	ldw	r4,-8(fp)
   46fcc:	00461740 	call	46174 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
   46fd0:	00800174 	movhi	r2,5
   46fd4:	108dd304 	addi	r2,r2,14156
   46fd8:	10800217 	ldw	r2,8(r2)
   46fdc:	10c00117 	ldw	r3,4(r2)
   46fe0:	00bfff04 	movi	r2,-4
   46fe4:	1886703a 	and	r3,r3,r2
   46fe8:	e0bffa17 	ldw	r2,-24(fp)
   46fec:	1885c83a 	sub	r2,r3,r2
   46ff0:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   46ff4:	00800174 	movhi	r2,5
   46ff8:	108dd304 	addi	r2,r2,14156
   46ffc:	10800217 	ldw	r2,8(r2)
   47000:	10c00117 	ldw	r3,4(r2)
   47004:	00bfff04 	movi	r2,-4
   47008:	1886703a 	and	r3,r3,r2
   4700c:	e0bffa17 	ldw	r2,-24(fp)
   47010:	18800336 	bltu	r3,r2,47020 <_malloc_r+0xaf8>
   47014:	e0bff417 	ldw	r2,-48(fp)
   47018:	10800408 	cmpgei	r2,r2,16
   4701c:	1000041e 	bne	r2,zero,47030 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
   47020:	e13ffe17 	ldw	r4,-8(fp)
   47024:	00507f40 	call	507f4 <__malloc_unlock>
      return 0; /* propagate failure */
   47028:	0005883a 	mov	r2,zero
   4702c:	00001806 	br	47090 <_malloc_r+0xb68>
    }
  }

  victim = top;
   47030:	00800174 	movhi	r2,5
   47034:	108dd304 	addi	r2,r2,14156
   47038:	10800217 	ldw	r2,8(r2)
   4703c:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
   47040:	e0bffa17 	ldw	r2,-24(fp)
   47044:	10c00054 	ori	r3,r2,1
   47048:	e0bff117 	ldw	r2,-60(fp)
   4704c:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
   47050:	00800174 	movhi	r2,5
   47054:	108dd304 	addi	r2,r2,14156
   47058:	e13ff117 	ldw	r4,-60(fp)
   4705c:	e0fffa17 	ldw	r3,-24(fp)
   47060:	20c7883a 	add	r3,r4,r3
   47064:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
   47068:	00800174 	movhi	r2,5
   4706c:	108dd304 	addi	r2,r2,14156
   47070:	10800217 	ldw	r2,8(r2)
   47074:	e0fff417 	ldw	r3,-48(fp)
   47078:	18c00054 	ori	r3,r3,1
   4707c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   47080:	e13ffe17 	ldw	r4,-8(fp)
   47084:	00507f40 	call	507f4 <__malloc_unlock>
  return chunk2mem(victim);
   47088:	e0bff117 	ldw	r2,-60(fp)
   4708c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   47090:	e037883a 	mov	sp,fp
   47094:	dfc00117 	ldw	ra,4(sp)
   47098:	df000017 	ldw	fp,0(sp)
   4709c:	dec00204 	addi	sp,sp,8
   470a0:	f800283a 	ret

000470a4 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
   470a4:	defff704 	addi	sp,sp,-36
   470a8:	df000815 	stw	fp,32(sp)
   470ac:	df000804 	addi	fp,sp,32
   470b0:	e13ffd15 	stw	r4,-12(fp)
   470b4:	e17ffe15 	stw	r5,-8(fp)
   470b8:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
   470bc:	e0bffd17 	ldw	r2,-12(fp)
   470c0:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
   470c4:	e0bffe17 	ldw	r2,-8(fp)
   470c8:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   470cc:	00001006 	br	47110 <memchr+0x6c>
    {
      if (!length--)
   470d0:	e0bfff17 	ldw	r2,-4(fp)
   470d4:	10ffffc4 	addi	r3,r2,-1
   470d8:	e0ffff15 	stw	r3,-4(fp)
   470dc:	1000021e 	bne	r2,zero,470e8 <memchr+0x44>
        return NULL;
   470e0:	0005883a 	mov	r2,zero
   470e4:	00005a06 	br	47250 <memchr+0x1ac>
      if (*src == d)
   470e8:	e0bff817 	ldw	r2,-32(fp)
   470ec:	10800003 	ldbu	r2,0(r2)
   470f0:	10c03fcc 	andi	r3,r2,255
   470f4:	e0bffc03 	ldbu	r2,-16(fp)
   470f8:	1880021e 	bne	r3,r2,47104 <memchr+0x60>
        return (void *) src;
   470fc:	e0bff817 	ldw	r2,-32(fp)
   47100:	00005306 	br	47250 <memchr+0x1ac>
      src++;
   47104:	e0bff817 	ldw	r2,-32(fp)
   47108:	10800044 	addi	r2,r2,1
   4710c:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   47110:	e0bff817 	ldw	r2,-32(fp)
   47114:	108000cc 	andi	r2,r2,3
   47118:	103fed1e 	bne	r2,zero,470d0 <_gp+0xfffea374>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
   4711c:	e0bfff17 	ldw	r2,-4(fp)
   47120:	10800130 	cmpltui	r2,r2,4
   47124:	1000451e 	bne	r2,zero,4723c <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
   47128:	e0bff817 	ldw	r2,-32(fp)
   4712c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
   47130:	e0bffc03 	ldbu	r2,-16(fp)
   47134:	1006923a 	slli	r3,r2,8
   47138:	e0bffc03 	ldbu	r2,-16(fp)
   4713c:	1884b03a 	or	r2,r3,r2
   47140:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
   47144:	e0bffa17 	ldw	r2,-24(fp)
   47148:	1004943a 	slli	r2,r2,16
   4714c:	e0fffa17 	ldw	r3,-24(fp)
   47150:	1884b03a 	or	r2,r3,r2
   47154:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   47158:	00800804 	movi	r2,32
   4715c:	e0bffb15 	stw	r2,-20(fp)
   47160:	00000906 	br	47188 <memchr+0xe4>
        mask = (mask << i) | mask;
   47164:	e0fffa17 	ldw	r3,-24(fp)
   47168:	e0bffb17 	ldw	r2,-20(fp)
   4716c:	1884983a 	sll	r2,r3,r2
   47170:	e0fffa17 	ldw	r3,-24(fp)
   47174:	1884b03a 	or	r2,r3,r2
   47178:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   4717c:	e0bffb17 	ldw	r2,-20(fp)
   47180:	1085883a 	add	r2,r2,r2
   47184:	e0bffb15 	stw	r2,-20(fp)
   47188:	e0bffb17 	ldw	r2,-20(fp)
   4718c:	10800830 	cmpltui	r2,r2,32
   47190:	103ff41e 	bne	r2,zero,47164 <_gp+0xfffea408>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   47194:	00001706 	br	471f4 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
   47198:	e0bff917 	ldw	r2,-28(fp)
   4719c:	10c00017 	ldw	r3,0(r2)
   471a0:	e0bffa17 	ldw	r2,-24(fp)
   471a4:	1886f03a 	xor	r3,r3,r2
   471a8:	00bfbff4 	movhi	r2,65279
   471ac:	10bfbfc4 	addi	r2,r2,-257
   471b0:	1887883a 	add	r3,r3,r2
   471b4:	e0bff917 	ldw	r2,-28(fp)
   471b8:	11000017 	ldw	r4,0(r2)
   471bc:	e0bffa17 	ldw	r2,-24(fp)
   471c0:	2084f03a 	xor	r2,r4,r2
   471c4:	0084303a 	nor	r2,zero,r2
   471c8:	1886703a 	and	r3,r3,r2
   471cc:	00a02074 	movhi	r2,32897
   471d0:	10a02004 	addi	r2,r2,-32640
   471d4:	1884703a 	and	r2,r3,r2
   471d8:	10000a1e 	bne	r2,zero,47204 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
   471dc:	e0bfff17 	ldw	r2,-4(fp)
   471e0:	10bfff04 	addi	r2,r2,-4
   471e4:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
   471e8:	e0bff917 	ldw	r2,-28(fp)
   471ec:	10800104 	addi	r2,r2,4
   471f0:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   471f4:	e0bfff17 	ldw	r2,-4(fp)
   471f8:	10800128 	cmpgeui	r2,r2,4
   471fc:	103fe61e 	bne	r2,zero,47198 <_gp+0xfffea43c>
   47200:	00000106 	br	47208 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
   47204:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
   47208:	e0bff917 	ldw	r2,-28(fp)
   4720c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   47210:	00000a06 	br	4723c <memchr+0x198>
    {
      if (*src == d)
   47214:	e0bff817 	ldw	r2,-32(fp)
   47218:	10800003 	ldbu	r2,0(r2)
   4721c:	10c03fcc 	andi	r3,r2,255
   47220:	e0bffc03 	ldbu	r2,-16(fp)
   47224:	1880021e 	bne	r3,r2,47230 <memchr+0x18c>
        return (void *) src;
   47228:	e0bff817 	ldw	r2,-32(fp)
   4722c:	00000806 	br	47250 <memchr+0x1ac>
      src++;
   47230:	e0bff817 	ldw	r2,-32(fp)
   47234:	10800044 	addi	r2,r2,1
   47238:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   4723c:	e0bfff17 	ldw	r2,-4(fp)
   47240:	10ffffc4 	addi	r3,r2,-1
   47244:	e0ffff15 	stw	r3,-4(fp)
   47248:	103ff21e 	bne	r2,zero,47214 <_gp+0xfffea4b8>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
   4724c:	0005883a 	mov	r2,zero
}
   47250:	e037883a 	mov	sp,fp
   47254:	df000017 	ldw	fp,0(sp)
   47258:	dec00104 	addi	sp,sp,4
   4725c:	f800283a 	ret

00047260 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
   47260:	defff804 	addi	sp,sp,-32
   47264:	df000715 	stw	fp,28(sp)
   47268:	df000704 	addi	fp,sp,28
   4726c:	e13ffd15 	stw	r4,-12(fp)
   47270:	e17ffe15 	stw	r5,-8(fp)
   47274:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
   47278:	e0bffd17 	ldw	r2,-12(fp)
   4727c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
   47280:	e0bffe17 	ldw	r2,-8(fp)
   47284:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
   47288:	e0bfff17 	ldw	r2,-4(fp)
   4728c:	10800430 	cmpltui	r2,r2,16
   47290:	10004c1e 	bne	r2,zero,473c4 <memcpy+0x164>
   47294:	e0fffa17 	ldw	r3,-24(fp)
   47298:	e0bff917 	ldw	r2,-28(fp)
   4729c:	1884b03a 	or	r2,r3,r2
   472a0:	108000cc 	andi	r2,r2,3
   472a4:	1000471e 	bne	r2,zero,473c4 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
   472a8:	e0bff917 	ldw	r2,-28(fp)
   472ac:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
   472b0:	e0bffa17 	ldw	r2,-24(fp)
   472b4:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   472b8:	00002306 	br	47348 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
   472bc:	e0bffb17 	ldw	r2,-20(fp)
   472c0:	10c00104 	addi	r3,r2,4
   472c4:	e0fffb15 	stw	r3,-20(fp)
   472c8:	e0fffc17 	ldw	r3,-16(fp)
   472cc:	19000104 	addi	r4,r3,4
   472d0:	e13ffc15 	stw	r4,-16(fp)
   472d4:	18c00017 	ldw	r3,0(r3)
   472d8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   472dc:	e0bffb17 	ldw	r2,-20(fp)
   472e0:	10c00104 	addi	r3,r2,4
   472e4:	e0fffb15 	stw	r3,-20(fp)
   472e8:	e0fffc17 	ldw	r3,-16(fp)
   472ec:	19000104 	addi	r4,r3,4
   472f0:	e13ffc15 	stw	r4,-16(fp)
   472f4:	18c00017 	ldw	r3,0(r3)
   472f8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   472fc:	e0bffb17 	ldw	r2,-20(fp)
   47300:	10c00104 	addi	r3,r2,4
   47304:	e0fffb15 	stw	r3,-20(fp)
   47308:	e0fffc17 	ldw	r3,-16(fp)
   4730c:	19000104 	addi	r4,r3,4
   47310:	e13ffc15 	stw	r4,-16(fp)
   47314:	18c00017 	ldw	r3,0(r3)
   47318:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   4731c:	e0bffb17 	ldw	r2,-20(fp)
   47320:	10c00104 	addi	r3,r2,4
   47324:	e0fffb15 	stw	r3,-20(fp)
   47328:	e0fffc17 	ldw	r3,-16(fp)
   4732c:	19000104 	addi	r4,r3,4
   47330:	e13ffc15 	stw	r4,-16(fp)
   47334:	18c00017 	ldw	r3,0(r3)
   47338:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
   4733c:	e0bfff17 	ldw	r2,-4(fp)
   47340:	10bffc04 	addi	r2,r2,-16
   47344:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   47348:	e0bfff17 	ldw	r2,-4(fp)
   4734c:	10800428 	cmpgeui	r2,r2,16
   47350:	103fda1e 	bne	r2,zero,472bc <_gp+0xfffea560>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   47354:	00000b06 	br	47384 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
   47358:	e0bffb17 	ldw	r2,-20(fp)
   4735c:	10c00104 	addi	r3,r2,4
   47360:	e0fffb15 	stw	r3,-20(fp)
   47364:	e0fffc17 	ldw	r3,-16(fp)
   47368:	19000104 	addi	r4,r3,4
   4736c:	e13ffc15 	stw	r4,-16(fp)
   47370:	18c00017 	ldw	r3,0(r3)
   47374:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
   47378:	e0bfff17 	ldw	r2,-4(fp)
   4737c:	10bfff04 	addi	r2,r2,-4
   47380:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   47384:	e0bfff17 	ldw	r2,-4(fp)
   47388:	10800128 	cmpgeui	r2,r2,4
   4738c:	103ff21e 	bne	r2,zero,47358 <_gp+0xfffea5fc>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
   47390:	e0bffb17 	ldw	r2,-20(fp)
   47394:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
   47398:	e0bffc17 	ldw	r2,-16(fp)
   4739c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
   473a0:	00000806 	br	473c4 <memcpy+0x164>
    *dst++ = *src++;
   473a4:	e0bff917 	ldw	r2,-28(fp)
   473a8:	10c00044 	addi	r3,r2,1
   473ac:	e0fff915 	stw	r3,-28(fp)
   473b0:	e0fffa17 	ldw	r3,-24(fp)
   473b4:	19000044 	addi	r4,r3,1
   473b8:	e13ffa15 	stw	r4,-24(fp)
   473bc:	18c00003 	ldbu	r3,0(r3)
   473c0:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
   473c4:	e0bfff17 	ldw	r2,-4(fp)
   473c8:	10ffffc4 	addi	r3,r2,-1
   473cc:	e0ffff15 	stw	r3,-4(fp)
   473d0:	103ff41e 	bne	r2,zero,473a4 <_gp+0xfffea648>
    *dst++ = *src++;

  return dst0;
   473d4:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   473d8:	e037883a 	mov	sp,fp
   473dc:	df000017 	ldw	fp,0(sp)
   473e0:	dec00104 	addi	sp,sp,4
   473e4:	f800283a 	ret

000473e8 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
   473e8:	defff704 	addi	sp,sp,-36
   473ec:	df000815 	stw	fp,32(sp)
   473f0:	df000804 	addi	fp,sp,32
   473f4:	e13ffd15 	stw	r4,-12(fp)
   473f8:	e17ffe15 	stw	r5,-8(fp)
   473fc:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
   47400:	e0bffd17 	ldw	r2,-12(fp)
   47404:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
   47408:	e0bffe17 	ldw	r2,-8(fp)
   4740c:	10803fcc 	andi	r2,r2,255
   47410:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
   47414:	00000c06 	br	47448 <memset+0x60>
    {
      if (n--)
   47418:	e0bfff17 	ldw	r2,-4(fp)
   4741c:	10ffffc4 	addi	r3,r2,-1
   47420:	e0ffff15 	stw	r3,-4(fp)
   47424:	10000626 	beq	r2,zero,47440 <memset+0x58>
        *s++ = (char) c;
   47428:	e0bff817 	ldw	r2,-32(fp)
   4742c:	10c00044 	addi	r3,r2,1
   47430:	e0fff815 	stw	r3,-32(fp)
   47434:	e0fffe17 	ldw	r3,-8(fp)
   47438:	10c00005 	stb	r3,0(r2)
   4743c:	00000206 	br	47448 <memset+0x60>
      else
        return m;
   47440:	e0bffd17 	ldw	r2,-12(fp)
   47444:	00005506 	br	4759c <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
   47448:	e0bff817 	ldw	r2,-32(fp)
   4744c:	108000cc 	andi	r2,r2,3
   47450:	103ff11e 	bne	r2,zero,47418 <_gp+0xfffea6bc>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
   47454:	e0bfff17 	ldw	r2,-4(fp)
   47458:	10800130 	cmpltui	r2,r2,4
   4745c:	10004a1e 	bne	r2,zero,47588 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
   47460:	e0bff817 	ldw	r2,-32(fp)
   47464:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
   47468:	e0bffc17 	ldw	r2,-16(fp)
   4746c:	1006923a 	slli	r3,r2,8
   47470:	e0bffc17 	ldw	r2,-16(fp)
   47474:	1884b03a 	or	r2,r3,r2
   47478:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
   4747c:	e0bffa17 	ldw	r2,-24(fp)
   47480:	1004943a 	slli	r2,r2,16
   47484:	e0fffa17 	ldw	r3,-24(fp)
   47488:	1884b03a 	or	r2,r3,r2
   4748c:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   47490:	00800804 	movi	r2,32
   47494:	e0bff915 	stw	r2,-28(fp)
   47498:	00000906 	br	474c0 <memset+0xd8>
        buffer = (buffer << i) | buffer;
   4749c:	e0fffa17 	ldw	r3,-24(fp)
   474a0:	e0bff917 	ldw	r2,-28(fp)
   474a4:	1884983a 	sll	r2,r3,r2
   474a8:	e0fffa17 	ldw	r3,-24(fp)
   474ac:	1884b03a 	or	r2,r3,r2
   474b0:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   474b4:	e0bff917 	ldw	r2,-28(fp)
   474b8:	1085883a 	add	r2,r2,r2
   474bc:	e0bff915 	stw	r2,-28(fp)
   474c0:	e0bff917 	ldw	r2,-28(fp)
   474c4:	10800830 	cmpltui	r2,r2,32
   474c8:	103ff41e 	bne	r2,zero,4749c <_gp+0xfffea740>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   474cc:	00001706 	br	4752c <memset+0x144>
        {
          *aligned_addr++ = buffer;
   474d0:	e0bffb17 	ldw	r2,-20(fp)
   474d4:	10c00104 	addi	r3,r2,4
   474d8:	e0fffb15 	stw	r3,-20(fp)
   474dc:	e0fffa17 	ldw	r3,-24(fp)
   474e0:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   474e4:	e0bffb17 	ldw	r2,-20(fp)
   474e8:	10c00104 	addi	r3,r2,4
   474ec:	e0fffb15 	stw	r3,-20(fp)
   474f0:	e0fffa17 	ldw	r3,-24(fp)
   474f4:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   474f8:	e0bffb17 	ldw	r2,-20(fp)
   474fc:	10c00104 	addi	r3,r2,4
   47500:	e0fffb15 	stw	r3,-20(fp)
   47504:	e0fffa17 	ldw	r3,-24(fp)
   47508:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   4750c:	e0bffb17 	ldw	r2,-20(fp)
   47510:	10c00104 	addi	r3,r2,4
   47514:	e0fffb15 	stw	r3,-20(fp)
   47518:	e0fffa17 	ldw	r3,-24(fp)
   4751c:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
   47520:	e0bfff17 	ldw	r2,-4(fp)
   47524:	10bffc04 	addi	r2,r2,-16
   47528:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   4752c:	e0bfff17 	ldw	r2,-4(fp)
   47530:	10800428 	cmpgeui	r2,r2,16
   47534:	103fe61e 	bne	r2,zero,474d0 <_gp+0xfffea774>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   47538:	00000806 	br	4755c <memset+0x174>
        {
          *aligned_addr++ = buffer;
   4753c:	e0bffb17 	ldw	r2,-20(fp)
   47540:	10c00104 	addi	r3,r2,4
   47544:	e0fffb15 	stw	r3,-20(fp)
   47548:	e0fffa17 	ldw	r3,-24(fp)
   4754c:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
   47550:	e0bfff17 	ldw	r2,-4(fp)
   47554:	10bfff04 	addi	r2,r2,-4
   47558:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   4755c:	e0bfff17 	ldw	r2,-4(fp)
   47560:	10800128 	cmpgeui	r2,r2,4
   47564:	103ff51e 	bne	r2,zero,4753c <_gp+0xfffea7e0>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
   47568:	e0bffb17 	ldw	r2,-20(fp)
   4756c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   47570:	00000506 	br	47588 <memset+0x1a0>
    *s++ = (char) c;
   47574:	e0bff817 	ldw	r2,-32(fp)
   47578:	10c00044 	addi	r3,r2,1
   4757c:	e0fff815 	stw	r3,-32(fp)
   47580:	e0fffe17 	ldw	r3,-8(fp)
   47584:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   47588:	e0bfff17 	ldw	r2,-4(fp)
   4758c:	10ffffc4 	addi	r3,r2,-1
   47590:	e0ffff15 	stw	r3,-4(fp)
   47594:	103ff71e 	bne	r2,zero,47574 <_gp+0xfffea818>
    *s++ = (char) c;

  return m;
   47598:	e0bffd17 	ldw	r2,-12(fp)
}
   4759c:	e037883a 	mov	sp,fp
   475a0:	df000017 	ldw	fp,0(sp)
   475a4:	dec00104 	addi	sp,sp,4
   475a8:	f800283a 	ret

000475ac <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
   475ac:	defffa04 	addi	sp,sp,-24
   475b0:	dfc00515 	stw	ra,20(sp)
   475b4:	df000415 	stw	fp,16(sp)
   475b8:	df000404 	addi	fp,sp,16
   475bc:	e13ffe15 	stw	r4,-8(fp)
   475c0:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
   475c4:	e0bffe17 	ldw	r2,-8(fp)
   475c8:	10801317 	ldw	r2,76(r2)
   475cc:	10000c1e 	bne	r2,zero,47600 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
   475d0:	01800844 	movi	r6,33
   475d4:	01400104 	movi	r5,4
   475d8:	e13ffe17 	ldw	r4,-8(fp)
   475dc:	004ac900 	call	4ac90 <_calloc_r>
   475e0:	1007883a 	mov	r3,r2
   475e4:	e0bffe17 	ldw	r2,-8(fp)
   475e8:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
   475ec:	e0bffe17 	ldw	r2,-8(fp)
   475f0:	10801317 	ldw	r2,76(r2)
   475f4:	1000021e 	bne	r2,zero,47600 <_Balloc+0x54>
	{
	  return NULL;
   475f8:	0005883a 	mov	r2,zero
   475fc:	00003206 	br	476c8 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
   47600:	e0bffe17 	ldw	r2,-8(fp)
   47604:	10c01317 	ldw	r3,76(r2)
   47608:	e0bfff17 	ldw	r2,-4(fp)
   4760c:	1085883a 	add	r2,r2,r2
   47610:	1085883a 	add	r2,r2,r2
   47614:	1885883a 	add	r2,r3,r2
   47618:	10800017 	ldw	r2,0(r2)
   4761c:	e0bffc15 	stw	r2,-16(fp)
   47620:	e0bffc17 	ldw	r2,-16(fp)
   47624:	10000a26 	beq	r2,zero,47650 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
   47628:	e0bffe17 	ldw	r2,-8(fp)
   4762c:	10c01317 	ldw	r3,76(r2)
   47630:	e0bfff17 	ldw	r2,-4(fp)
   47634:	1085883a 	add	r2,r2,r2
   47638:	1085883a 	add	r2,r2,r2
   4763c:	1885883a 	add	r2,r3,r2
   47640:	e0fffc17 	ldw	r3,-16(fp)
   47644:	18c00017 	ldw	r3,0(r3)
   47648:	10c00015 	stw	r3,0(r2)
   4764c:	00001706 	br	476ac <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
   47650:	00c00044 	movi	r3,1
   47654:	e0bfff17 	ldw	r2,-4(fp)
   47658:	1884983a 	sll	r2,r3,r2
   4765c:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
   47660:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
   47664:	10800144 	addi	r2,r2,5
   47668:	1085883a 	add	r2,r2,r2
   4766c:	1085883a 	add	r2,r2,r2
   47670:	100d883a 	mov	r6,r2
   47674:	01400044 	movi	r5,1
   47678:	e13ffe17 	ldw	r4,-8(fp)
   4767c:	004ac900 	call	4ac90 <_calloc_r>
   47680:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
   47684:	e0bffc17 	ldw	r2,-16(fp)
   47688:	1000021e 	bne	r2,zero,47694 <_Balloc+0xe8>
   4768c:	0005883a 	mov	r2,zero
   47690:	00000d06 	br	476c8 <_Balloc+0x11c>
      rv->_k = k;
   47694:	e0bffc17 	ldw	r2,-16(fp)
   47698:	e0ffff17 	ldw	r3,-4(fp)
   4769c:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
   476a0:	e0bffc17 	ldw	r2,-16(fp)
   476a4:	e0fffd17 	ldw	r3,-12(fp)
   476a8:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
   476ac:	e0bffc17 	ldw	r2,-16(fp)
   476b0:	10000415 	stw	zero,16(r2)
   476b4:	e0bffc17 	ldw	r2,-16(fp)
   476b8:	10c00417 	ldw	r3,16(r2)
   476bc:	e0bffc17 	ldw	r2,-16(fp)
   476c0:	10c00315 	stw	r3,12(r2)
  return rv;
   476c4:	e0bffc17 	ldw	r2,-16(fp)
}
   476c8:	e037883a 	mov	sp,fp
   476cc:	dfc00117 	ldw	ra,4(sp)
   476d0:	df000017 	ldw	fp,0(sp)
   476d4:	dec00204 	addi	sp,sp,8
   476d8:	f800283a 	ret

000476dc <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
   476dc:	defffd04 	addi	sp,sp,-12
   476e0:	df000215 	stw	fp,8(sp)
   476e4:	df000204 	addi	fp,sp,8
   476e8:	e13ffe15 	stw	r4,-8(fp)
   476ec:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
   476f0:	e0bfff17 	ldw	r2,-4(fp)
   476f4:	10001326 	beq	r2,zero,47744 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
   476f8:	e0bffe17 	ldw	r2,-8(fp)
   476fc:	10c01317 	ldw	r3,76(r2)
   47700:	e0bfff17 	ldw	r2,-4(fp)
   47704:	10800117 	ldw	r2,4(r2)
   47708:	1085883a 	add	r2,r2,r2
   4770c:	1085883a 	add	r2,r2,r2
   47710:	1885883a 	add	r2,r3,r2
   47714:	10c00017 	ldw	r3,0(r2)
   47718:	e0bfff17 	ldw	r2,-4(fp)
   4771c:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
   47720:	e0bffe17 	ldw	r2,-8(fp)
   47724:	10c01317 	ldw	r3,76(r2)
   47728:	e0bfff17 	ldw	r2,-4(fp)
   4772c:	10800117 	ldw	r2,4(r2)
   47730:	1085883a 	add	r2,r2,r2
   47734:	1085883a 	add	r2,r2,r2
   47738:	1885883a 	add	r2,r3,r2
   4773c:	e0ffff17 	ldw	r3,-4(fp)
   47740:	10c00015 	stw	r3,0(r2)
    }
}
   47744:	0001883a 	nop
   47748:	e037883a 	mov	sp,fp
   4774c:	df000017 	ldw	fp,0(sp)
   47750:	dec00104 	addi	sp,sp,4
   47754:	f800283a 	ret

00047758 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
   47758:	defff304 	addi	sp,sp,-52
   4775c:	dfc00c15 	stw	ra,48(sp)
   47760:	df000b15 	stw	fp,44(sp)
   47764:	df000b04 	addi	fp,sp,44
   47768:	e13ffc15 	stw	r4,-16(fp)
   4776c:	e17ffd15 	stw	r5,-12(fp)
   47770:	e1bffe15 	stw	r6,-8(fp)
   47774:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
   47778:	e0bffd17 	ldw	r2,-12(fp)
   4777c:	10800417 	ldw	r2,16(r2)
   47780:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
   47784:	e0bffd17 	ldw	r2,-12(fp)
   47788:	10800504 	addi	r2,r2,20
   4778c:	e0bff615 	stw	r2,-40(fp)
  i = 0;
   47790:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
   47794:	e0bff617 	ldw	r2,-40(fp)
   47798:	10800017 	ldw	r2,0(r2)
   4779c:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
   477a0:	e0bff817 	ldw	r2,-32(fp)
   477a4:	10bfffcc 	andi	r2,r2,65535
   477a8:	e0fffe17 	ldw	r3,-8(fp)
   477ac:	180b883a 	mov	r5,r3
   477b0:	1009883a 	mov	r4,r2
   477b4:	004d9680 	call	4d968 <__mulsi3>
   477b8:	1007883a 	mov	r3,r2
   477bc:	e0bfff17 	ldw	r2,-4(fp)
   477c0:	1885883a 	add	r2,r3,r2
   477c4:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
   477c8:	e0bff817 	ldw	r2,-32(fp)
   477cc:	1004d43a 	srli	r2,r2,16
   477d0:	e0fffe17 	ldw	r3,-8(fp)
   477d4:	180b883a 	mov	r5,r3
   477d8:	1009883a 	mov	r4,r2
   477dc:	004d9680 	call	4d968 <__mulsi3>
   477e0:	1007883a 	mov	r3,r2
   477e4:	e0bff917 	ldw	r2,-28(fp)
   477e8:	1004d43a 	srli	r2,r2,16
   477ec:	1885883a 	add	r2,r3,r2
   477f0:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
   477f4:	e0bffa17 	ldw	r2,-24(fp)
   477f8:	1004d43a 	srli	r2,r2,16
   477fc:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
   47800:	e0bff617 	ldw	r2,-40(fp)
   47804:	10c00104 	addi	r3,r2,4
   47808:	e0fff615 	stw	r3,-40(fp)
   4780c:	e0fffa17 	ldw	r3,-24(fp)
   47810:	1808943a 	slli	r4,r3,16
   47814:	e0fff917 	ldw	r3,-28(fp)
   47818:	18ffffcc 	andi	r3,r3,65535
   4781c:	20c7883a 	add	r3,r4,r3
   47820:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
   47824:	e0bff517 	ldw	r2,-44(fp)
   47828:	10800044 	addi	r2,r2,1
   4782c:	e0bff515 	stw	r2,-44(fp)
   47830:	e0fff517 	ldw	r3,-44(fp)
   47834:	e0bff717 	ldw	r2,-36(fp)
   47838:	18bfd616 	blt	r3,r2,47794 <_gp+0xfffeaa38>
  if (a)
   4783c:	e0bfff17 	ldw	r2,-4(fp)
   47840:	10002a26 	beq	r2,zero,478ec <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
   47844:	e0bffd17 	ldw	r2,-12(fp)
   47848:	10800217 	ldw	r2,8(r2)
   4784c:	e0fff717 	ldw	r3,-36(fp)
   47850:	18801916 	blt	r3,r2,478b8 <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
   47854:	e0bffd17 	ldw	r2,-12(fp)
   47858:	10800117 	ldw	r2,4(r2)
   4785c:	10800044 	addi	r2,r2,1
   47860:	100b883a 	mov	r5,r2
   47864:	e13ffc17 	ldw	r4,-16(fp)
   47868:	00475ac0 	call	475ac <_Balloc>
   4786c:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
   47870:	e0bffb17 	ldw	r2,-20(fp)
   47874:	10c00304 	addi	r3,r2,12
   47878:	e0bffd17 	ldw	r2,-12(fp)
   4787c:	11000304 	addi	r4,r2,12
   47880:	e0bffd17 	ldw	r2,-12(fp)
   47884:	10800417 	ldw	r2,16(r2)
   47888:	10800084 	addi	r2,r2,2
   4788c:	1085883a 	add	r2,r2,r2
   47890:	1085883a 	add	r2,r2,r2
   47894:	100d883a 	mov	r6,r2
   47898:	200b883a 	mov	r5,r4
   4789c:	1809883a 	mov	r4,r3
   478a0:	00472600 	call	47260 <memcpy>
	  Bfree (ptr, b);
   478a4:	e17ffd17 	ldw	r5,-12(fp)
   478a8:	e13ffc17 	ldw	r4,-16(fp)
   478ac:	00476dc0 	call	476dc <_Bfree>
	  b = b1;
   478b0:	e0bffb17 	ldw	r2,-20(fp)
   478b4:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
   478b8:	e0bff717 	ldw	r2,-36(fp)
   478bc:	10c00044 	addi	r3,r2,1
   478c0:	e0fff715 	stw	r3,-36(fp)
   478c4:	e0ffff17 	ldw	r3,-4(fp)
   478c8:	e13ffd17 	ldw	r4,-12(fp)
   478cc:	10800144 	addi	r2,r2,5
   478d0:	1085883a 	add	r2,r2,r2
   478d4:	1085883a 	add	r2,r2,r2
   478d8:	2085883a 	add	r2,r4,r2
   478dc:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
   478e0:	e0bffd17 	ldw	r2,-12(fp)
   478e4:	e0fff717 	ldw	r3,-36(fp)
   478e8:	10c00415 	stw	r3,16(r2)
    }
  return b;
   478ec:	e0bffd17 	ldw	r2,-12(fp)
}
   478f0:	e037883a 	mov	sp,fp
   478f4:	dfc00117 	ldw	ra,4(sp)
   478f8:	df000017 	ldw	fp,0(sp)
   478fc:	dec00204 	addi	sp,sp,8
   47900:	f800283a 	ret

00047904 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
   47904:	defff504 	addi	sp,sp,-44
   47908:	dfc00a15 	stw	ra,40(sp)
   4790c:	df000915 	stw	fp,36(sp)
   47910:	df000904 	addi	fp,sp,36
   47914:	e13ffc15 	stw	r4,-16(fp)
   47918:	e17ffd15 	stw	r5,-12(fp)
   4791c:	e1bffe15 	stw	r6,-8(fp)
   47920:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
   47924:	e0bfff17 	ldw	r2,-4(fp)
   47928:	10800204 	addi	r2,r2,8
   4792c:	01400244 	movi	r5,9
   47930:	1009883a 	mov	r4,r2
   47934:	004d7b40 	call	4d7b4 <__divsi3>
   47938:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
   4793c:	e03ff915 	stw	zero,-28(fp)
   47940:	00800044 	movi	r2,1
   47944:	e0bffa15 	stw	r2,-24(fp)
   47948:	00000606 	br	47964 <__s2b+0x60>
   4794c:	e0bffa17 	ldw	r2,-24(fp)
   47950:	1085883a 	add	r2,r2,r2
   47954:	e0bffa15 	stw	r2,-24(fp)
   47958:	e0bff917 	ldw	r2,-28(fp)
   4795c:	10800044 	addi	r2,r2,1
   47960:	e0bff915 	stw	r2,-28(fp)
   47964:	e0bffb17 	ldw	r2,-20(fp)
   47968:	e0fffa17 	ldw	r3,-24(fp)
   4796c:	18bff716 	blt	r3,r2,4794c <_gp+0xfffeabf0>
#ifdef Pack_32
  b = Balloc (ptr, k);
   47970:	e17ff917 	ldw	r5,-28(fp)
   47974:	e13ffc17 	ldw	r4,-16(fp)
   47978:	00475ac0 	call	475ac <_Balloc>
   4797c:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
   47980:	e0bff717 	ldw	r2,-36(fp)
   47984:	e0c00217 	ldw	r3,8(fp)
   47988:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   4798c:	e0bff717 	ldw	r2,-36(fp)
   47990:	00c00044 	movi	r3,1
   47994:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
   47998:	00800244 	movi	r2,9
   4799c:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
   479a0:	e0bffe17 	ldw	r2,-8(fp)
   479a4:	10800290 	cmplti	r2,r2,10
   479a8:	10001b1e 	bne	r2,zero,47a18 <__s2b+0x114>
    {
      s += 9;
   479ac:	e0bffd17 	ldw	r2,-12(fp)
   479b0:	10800244 	addi	r2,r2,9
   479b4:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
   479b8:	e0bffd17 	ldw	r2,-12(fp)
   479bc:	10c00044 	addi	r3,r2,1
   479c0:	e0fffd15 	stw	r3,-12(fp)
   479c4:	10800003 	ldbu	r2,0(r2)
   479c8:	10803fcc 	andi	r2,r2,255
   479cc:	1080201c 	xori	r2,r2,128
   479d0:	10bfe004 	addi	r2,r2,-128
   479d4:	10bff404 	addi	r2,r2,-48
   479d8:	100f883a 	mov	r7,r2
   479dc:	01800284 	movi	r6,10
   479e0:	e17ff717 	ldw	r5,-36(fp)
   479e4:	e13ffc17 	ldw	r4,-16(fp)
   479e8:	00477580 	call	47758 <__multadd>
   479ec:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
   479f0:	e0bff817 	ldw	r2,-32(fp)
   479f4:	10800044 	addi	r2,r2,1
   479f8:	e0bff815 	stw	r2,-32(fp)
   479fc:	e0fff817 	ldw	r3,-32(fp)
   47a00:	e0bffe17 	ldw	r2,-8(fp)
   47a04:	18bfec16 	blt	r3,r2,479b8 <_gp+0xfffeac5c>
      s++;
   47a08:	e0bffd17 	ldw	r2,-12(fp)
   47a0c:	10800044 	addi	r2,r2,1
   47a10:	e0bffd15 	stw	r2,-12(fp)
   47a14:	00001506 	br	47a6c <__s2b+0x168>
    }
  else
    s += 10;
   47a18:	e0bffd17 	ldw	r2,-12(fp)
   47a1c:	10800284 	addi	r2,r2,10
   47a20:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
   47a24:	00001106 	br	47a6c <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
   47a28:	e0bffd17 	ldw	r2,-12(fp)
   47a2c:	10c00044 	addi	r3,r2,1
   47a30:	e0fffd15 	stw	r3,-12(fp)
   47a34:	10800003 	ldbu	r2,0(r2)
   47a38:	10803fcc 	andi	r2,r2,255
   47a3c:	1080201c 	xori	r2,r2,128
   47a40:	10bfe004 	addi	r2,r2,-128
   47a44:	10bff404 	addi	r2,r2,-48
   47a48:	100f883a 	mov	r7,r2
   47a4c:	01800284 	movi	r6,10
   47a50:	e17ff717 	ldw	r5,-36(fp)
   47a54:	e13ffc17 	ldw	r4,-16(fp)
   47a58:	00477580 	call	47758 <__multadd>
   47a5c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
   47a60:	e0bff817 	ldw	r2,-32(fp)
   47a64:	10800044 	addi	r2,r2,1
   47a68:	e0bff815 	stw	r2,-32(fp)
   47a6c:	e0fff817 	ldw	r3,-32(fp)
   47a70:	e0bfff17 	ldw	r2,-4(fp)
   47a74:	18bfec16 	blt	r3,r2,47a28 <_gp+0xfffeaccc>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
   47a78:	e0bff717 	ldw	r2,-36(fp)
}
   47a7c:	e037883a 	mov	sp,fp
   47a80:	dfc00117 	ldw	ra,4(sp)
   47a84:	df000017 	ldw	fp,0(sp)
   47a88:	dec00204 	addi	sp,sp,8
   47a8c:	f800283a 	ret

00047a90 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
   47a90:	defffe04 	addi	sp,sp,-8
   47a94:	df000115 	stw	fp,4(sp)
   47a98:	dc000015 	stw	r16,0(sp)
   47a9c:	df000104 	addi	fp,sp,4
   47aa0:	2005883a 	mov	r2,r4
  register int k = 0;
   47aa4:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
   47aa8:	10ffffec 	andhi	r3,r2,65535
   47aac:	1800021e 	bne	r3,zero,47ab8 <__hi0bits+0x28>
    {
      k = 16;
   47ab0:	04000404 	movi	r16,16
      x <<= 16;
   47ab4:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
   47ab8:	10ffc02c 	andhi	r3,r2,65280
   47abc:	1800021e 	bne	r3,zero,47ac8 <__hi0bits+0x38>
    {
      k += 8;
   47ac0:	84000204 	addi	r16,r16,8
      x <<= 8;
   47ac4:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
   47ac8:	10fc002c 	andhi	r3,r2,61440
   47acc:	1800021e 	bne	r3,zero,47ad8 <__hi0bits+0x48>
    {
      k += 4;
   47ad0:	84000104 	addi	r16,r16,4
      x <<= 4;
   47ad4:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
   47ad8:	10f0002c 	andhi	r3,r2,49152
   47adc:	1800031e 	bne	r3,zero,47aec <__hi0bits+0x5c>
    {
      k += 2;
   47ae0:	84000084 	addi	r16,r16,2
      x <<= 2;
   47ae4:	1085883a 	add	r2,r2,r2
   47ae8:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
   47aec:	1007883a 	mov	r3,r2
   47af0:	18000516 	blt	r3,zero,47b08 <__hi0bits+0x78>
    {
      k++;
   47af4:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
   47af8:	1090002c 	andhi	r2,r2,16384
   47afc:	1000021e 	bne	r2,zero,47b08 <__hi0bits+0x78>
	return 32;
   47b00:	00800804 	movi	r2,32
   47b04:	00000106 	br	47b0c <__hi0bits+0x7c>
    }
  return k;
   47b08:	8005883a 	mov	r2,r16
}
   47b0c:	e6ffff04 	addi	sp,fp,-4
   47b10:	df000117 	ldw	fp,4(sp)
   47b14:	dc000017 	ldw	r16,0(sp)
   47b18:	dec00204 	addi	sp,sp,8
   47b1c:	f800283a 	ret

00047b20 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
   47b20:	defffc04 	addi	sp,sp,-16
   47b24:	df000315 	stw	fp,12(sp)
   47b28:	dc400215 	stw	r17,8(sp)
   47b2c:	dc000115 	stw	r16,4(sp)
   47b30:	df000304 	addi	fp,sp,12
   47b34:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
   47b38:	e0bffd17 	ldw	r2,-12(fp)
   47b3c:	14000017 	ldw	r16,0(r2)

  if (x & 7)
   47b40:	808001cc 	andi	r2,r16,7
   47b44:	10001026 	beq	r2,zero,47b88 <__lo0bits+0x68>
    {
      if (x & 1)
   47b48:	8080004c 	andi	r2,r16,1
   47b4c:	10000226 	beq	r2,zero,47b58 <__lo0bits+0x38>
	return 0;
   47b50:	0005883a 	mov	r2,zero
   47b54:	00002706 	br	47bf4 <__lo0bits+0xd4>
      if (x & 2)
   47b58:	8080008c 	andi	r2,r16,2
   47b5c:	10000526 	beq	r2,zero,47b74 <__lo0bits+0x54>
	{
	  *y = x >> 1;
   47b60:	8006d07a 	srli	r3,r16,1
   47b64:	e0bffd17 	ldw	r2,-12(fp)
   47b68:	10c00015 	stw	r3,0(r2)
	  return 1;
   47b6c:	00800044 	movi	r2,1
   47b70:	00002006 	br	47bf4 <__lo0bits+0xd4>
	}
      *y = x >> 2;
   47b74:	8006d0ba 	srli	r3,r16,2
   47b78:	e0bffd17 	ldw	r2,-12(fp)
   47b7c:	10c00015 	stw	r3,0(r2)
      return 2;
   47b80:	00800084 	movi	r2,2
   47b84:	00001b06 	br	47bf4 <__lo0bits+0xd4>
    }
  k = 0;
   47b88:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
   47b8c:	80bfffcc 	andi	r2,r16,65535
   47b90:	1000021e 	bne	r2,zero,47b9c <__lo0bits+0x7c>
    {
      k = 16;
   47b94:	04400404 	movi	r17,16
      x >>= 16;
   47b98:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
   47b9c:	80803fcc 	andi	r2,r16,255
   47ba0:	1000021e 	bne	r2,zero,47bac <__lo0bits+0x8c>
    {
      k += 8;
   47ba4:	8c400204 	addi	r17,r17,8
      x >>= 8;
   47ba8:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
   47bac:	808003cc 	andi	r2,r16,15
   47bb0:	1000021e 	bne	r2,zero,47bbc <__lo0bits+0x9c>
    {
      k += 4;
   47bb4:	8c400104 	addi	r17,r17,4
      x >>= 4;
   47bb8:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
   47bbc:	808000cc 	andi	r2,r16,3
   47bc0:	1000021e 	bne	r2,zero,47bcc <__lo0bits+0xac>
    {
      k += 2;
   47bc4:	8c400084 	addi	r17,r17,2
      x >>= 2;
   47bc8:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
   47bcc:	8080004c 	andi	r2,r16,1
   47bd0:	1000051e 	bne	r2,zero,47be8 <__lo0bits+0xc8>
    {
      k++;
   47bd4:	8c400044 	addi	r17,r17,1
      x >>= 1;
   47bd8:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
   47bdc:	8000021e 	bne	r16,zero,47be8 <__lo0bits+0xc8>
	return 32;
   47be0:	00800804 	movi	r2,32
   47be4:	00000306 	br	47bf4 <__lo0bits+0xd4>
    }
  *y = x;
   47be8:	e0bffd17 	ldw	r2,-12(fp)
   47bec:	14000015 	stw	r16,0(r2)
  return k;
   47bf0:	8805883a 	mov	r2,r17
}
   47bf4:	e6fffe04 	addi	sp,fp,-8
   47bf8:	df000217 	ldw	fp,8(sp)
   47bfc:	dc400117 	ldw	r17,4(sp)
   47c00:	dc000017 	ldw	r16,0(sp)
   47c04:	dec00304 	addi	sp,sp,12
   47c08:	f800283a 	ret

00047c0c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
   47c0c:	defffb04 	addi	sp,sp,-20
   47c10:	dfc00415 	stw	ra,16(sp)
   47c14:	df000315 	stw	fp,12(sp)
   47c18:	df000304 	addi	fp,sp,12
   47c1c:	e13ffe15 	stw	r4,-8(fp)
   47c20:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
   47c24:	01400044 	movi	r5,1
   47c28:	e13ffe17 	ldw	r4,-8(fp)
   47c2c:	00475ac0 	call	475ac <_Balloc>
   47c30:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
   47c34:	e0ffff17 	ldw	r3,-4(fp)
   47c38:	e0bffd17 	ldw	r2,-12(fp)
   47c3c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   47c40:	e0bffd17 	ldw	r2,-12(fp)
   47c44:	00c00044 	movi	r3,1
   47c48:	10c00415 	stw	r3,16(r2)
  return b;
   47c4c:	e0bffd17 	ldw	r2,-12(fp)
}
   47c50:	e037883a 	mov	sp,fp
   47c54:	dfc00117 	ldw	ra,4(sp)
   47c58:	df000017 	ldw	fp,0(sp)
   47c5c:	dec00204 	addi	sp,sp,8
   47c60:	f800283a 	ret

00047c64 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
   47c64:	deffeb04 	addi	sp,sp,-84
   47c68:	dfc01415 	stw	ra,80(sp)
   47c6c:	df001315 	stw	fp,76(sp)
   47c70:	df001304 	addi	fp,sp,76
   47c74:	e13ffd15 	stw	r4,-12(fp)
   47c78:	e17ffe15 	stw	r5,-8(fp)
   47c7c:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
   47c80:	e0bffe17 	ldw	r2,-8(fp)
   47c84:	10c00417 	ldw	r3,16(r2)
   47c88:	e0bfff17 	ldw	r2,-4(fp)
   47c8c:	10800417 	ldw	r2,16(r2)
   47c90:	1880060e 	bge	r3,r2,47cac <__multiply+0x48>
    {
      c = a;
   47c94:	e0bffe17 	ldw	r2,-8(fp)
   47c98:	e0bff515 	stw	r2,-44(fp)
      a = b;
   47c9c:	e0bfff17 	ldw	r2,-4(fp)
   47ca0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   47ca4:	e0bff517 	ldw	r2,-44(fp)
   47ca8:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
   47cac:	e0bffe17 	ldw	r2,-8(fp)
   47cb0:	10800117 	ldw	r2,4(r2)
   47cb4:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
   47cb8:	e0bffe17 	ldw	r2,-8(fp)
   47cbc:	10800417 	ldw	r2,16(r2)
   47cc0:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
   47cc4:	e0bfff17 	ldw	r2,-4(fp)
   47cc8:	10800417 	ldw	r2,16(r2)
   47ccc:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
   47cd0:	e0fff617 	ldw	r3,-40(fp)
   47cd4:	e0bff717 	ldw	r2,-36(fp)
   47cd8:	1885883a 	add	r2,r3,r2
   47cdc:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
   47ce0:	e0bffe17 	ldw	r2,-8(fp)
   47ce4:	10c00217 	ldw	r3,8(r2)
   47ce8:	e0bfee17 	ldw	r2,-72(fp)
   47cec:	1880030e 	bge	r3,r2,47cfc <__multiply+0x98>
    k++;
   47cf0:	e0bfed17 	ldw	r2,-76(fp)
   47cf4:	10800044 	addi	r2,r2,1
   47cf8:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
   47cfc:	e17fed17 	ldw	r5,-76(fp)
   47d00:	e13ffd17 	ldw	r4,-12(fp)
   47d04:	00475ac0 	call	475ac <_Balloc>
   47d08:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
   47d0c:	e0bff517 	ldw	r2,-44(fp)
   47d10:	10800504 	addi	r2,r2,20
   47d14:	e0bff015 	stw	r2,-64(fp)
   47d18:	e0bfee17 	ldw	r2,-72(fp)
   47d1c:	1085883a 	add	r2,r2,r2
   47d20:	1085883a 	add	r2,r2,r2
   47d24:	1007883a 	mov	r3,r2
   47d28:	e0bff017 	ldw	r2,-64(fp)
   47d2c:	10c5883a 	add	r2,r2,r3
   47d30:	e0bff815 	stw	r2,-32(fp)
   47d34:	00000506 	br	47d4c <__multiply+0xe8>
    *x = 0;
   47d38:	e0bff017 	ldw	r2,-64(fp)
   47d3c:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
   47d40:	e0bff017 	ldw	r2,-64(fp)
   47d44:	10800104 	addi	r2,r2,4
   47d48:	e0bff015 	stw	r2,-64(fp)
   47d4c:	e0fff017 	ldw	r3,-64(fp)
   47d50:	e0bff817 	ldw	r2,-32(fp)
   47d54:	18bff836 	bltu	r3,r2,47d38 <_gp+0xfffeafdc>
    *x = 0;
  xa = a->_x;
   47d58:	e0bffe17 	ldw	r2,-8(fp)
   47d5c:	10800504 	addi	r2,r2,20
   47d60:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
   47d64:	e0bff617 	ldw	r2,-40(fp)
   47d68:	1085883a 	add	r2,r2,r2
   47d6c:	1085883a 	add	r2,r2,r2
   47d70:	1007883a 	mov	r3,r2
   47d74:	e0bff817 	ldw	r2,-32(fp)
   47d78:	10c5883a 	add	r2,r2,r3
   47d7c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   47d80:	e0bfff17 	ldw	r2,-4(fp)
   47d84:	10800504 	addi	r2,r2,20
   47d88:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
   47d8c:	e0bff717 	ldw	r2,-36(fp)
   47d90:	1085883a 	add	r2,r2,r2
   47d94:	1085883a 	add	r2,r2,r2
   47d98:	1007883a 	mov	r3,r2
   47d9c:	e0bff117 	ldw	r2,-60(fp)
   47da0:	10c5883a 	add	r2,r2,r3
   47da4:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
   47da8:	e0bff517 	ldw	r2,-44(fp)
   47dac:	10800504 	addi	r2,r2,20
   47db0:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   47db4:	00008506 	br	47fcc <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
   47db8:	e0bff117 	ldw	r2,-60(fp)
   47dbc:	10800017 	ldw	r2,0(r2)
   47dc0:	10bfffcc 	andi	r2,r2,65535
   47dc4:	e0bffb15 	stw	r2,-20(fp)
   47dc8:	e0bffb17 	ldw	r2,-20(fp)
   47dcc:	10003826 	beq	r2,zero,47eb0 <__multiply+0x24c>
	{
	  x = xa;
   47dd0:	e0bff817 	ldw	r2,-32(fp)
   47dd4:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   47dd8:	e0bff317 	ldw	r2,-52(fp)
   47ddc:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   47de0:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
   47de4:	e0bff017 	ldw	r2,-64(fp)
   47de8:	10800017 	ldw	r2,0(r2)
   47dec:	10bfffcc 	andi	r2,r2,65535
   47df0:	e17ffb17 	ldw	r5,-20(fp)
   47df4:	1009883a 	mov	r4,r2
   47df8:	004d9680 	call	4d968 <__mulsi3>
   47dfc:	1007883a 	mov	r3,r2
   47e00:	e0bff217 	ldw	r2,-56(fp)
   47e04:	10800017 	ldw	r2,0(r2)
   47e08:	10bfffcc 	andi	r2,r2,65535
   47e0c:	1887883a 	add	r3,r3,r2
   47e10:	e0bfef17 	ldw	r2,-68(fp)
   47e14:	1885883a 	add	r2,r3,r2
   47e18:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   47e1c:	e0bffc17 	ldw	r2,-16(fp)
   47e20:	1004d43a 	srli	r2,r2,16
   47e24:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
   47e28:	e0bff017 	ldw	r2,-64(fp)
   47e2c:	10c00104 	addi	r3,r2,4
   47e30:	e0fff015 	stw	r3,-64(fp)
   47e34:	10800017 	ldw	r2,0(r2)
   47e38:	1004d43a 	srli	r2,r2,16
   47e3c:	e17ffb17 	ldw	r5,-20(fp)
   47e40:	1009883a 	mov	r4,r2
   47e44:	004d9680 	call	4d968 <__mulsi3>
   47e48:	1007883a 	mov	r3,r2
   47e4c:	e0bff217 	ldw	r2,-56(fp)
   47e50:	10800017 	ldw	r2,0(r2)
   47e54:	1004d43a 	srli	r2,r2,16
   47e58:	1887883a 	add	r3,r3,r2
   47e5c:	e0bfef17 	ldw	r2,-68(fp)
   47e60:	1885883a 	add	r2,r3,r2
   47e64:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   47e68:	e0bff417 	ldw	r2,-48(fp)
   47e6c:	1004d43a 	srli	r2,r2,16
   47e70:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
   47e74:	e0bff217 	ldw	r2,-56(fp)
   47e78:	10c00104 	addi	r3,r2,4
   47e7c:	e0fff215 	stw	r3,-56(fp)
   47e80:	e0fff417 	ldw	r3,-48(fp)
   47e84:	1808943a 	slli	r4,r3,16
   47e88:	e0fffc17 	ldw	r3,-16(fp)
   47e8c:	18ffffcc 	andi	r3,r3,65535
   47e90:	20c6b03a 	or	r3,r4,r3
   47e94:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
   47e98:	e0fff017 	ldw	r3,-64(fp)
   47e9c:	e0bff917 	ldw	r2,-28(fp)
   47ea0:	18bfd036 	bltu	r3,r2,47de4 <_gp+0xfffeb088>
	  *xc = carry;
   47ea4:	e0bff217 	ldw	r2,-56(fp)
   47ea8:	e0ffef17 	ldw	r3,-68(fp)
   47eac:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
   47eb0:	e0bff117 	ldw	r2,-60(fp)
   47eb4:	10800017 	ldw	r2,0(r2)
   47eb8:	1004d43a 	srli	r2,r2,16
   47ebc:	e0bffb15 	stw	r2,-20(fp)
   47ec0:	e0bffb17 	ldw	r2,-20(fp)
   47ec4:	10003b26 	beq	r2,zero,47fb4 <__multiply+0x350>
	{
	  x = xa;
   47ec8:	e0bff817 	ldw	r2,-32(fp)
   47ecc:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   47ed0:	e0bff317 	ldw	r2,-52(fp)
   47ed4:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   47ed8:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
   47edc:	e0bff217 	ldw	r2,-56(fp)
   47ee0:	10800017 	ldw	r2,0(r2)
   47ee4:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
   47ee8:	e0bff017 	ldw	r2,-64(fp)
   47eec:	10800017 	ldw	r2,0(r2)
   47ef0:	10bfffcc 	andi	r2,r2,65535
   47ef4:	e17ffb17 	ldw	r5,-20(fp)
   47ef8:	1009883a 	mov	r4,r2
   47efc:	004d9680 	call	4d968 <__mulsi3>
   47f00:	1007883a 	mov	r3,r2
   47f04:	e0bff217 	ldw	r2,-56(fp)
   47f08:	10800017 	ldw	r2,0(r2)
   47f0c:	1004d43a 	srli	r2,r2,16
   47f10:	1887883a 	add	r3,r3,r2
   47f14:	e0bfef17 	ldw	r2,-68(fp)
   47f18:	1885883a 	add	r2,r3,r2
   47f1c:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   47f20:	e0bffc17 	ldw	r2,-16(fp)
   47f24:	1004d43a 	srli	r2,r2,16
   47f28:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
   47f2c:	e0bff217 	ldw	r2,-56(fp)
   47f30:	10c00104 	addi	r3,r2,4
   47f34:	e0fff215 	stw	r3,-56(fp)
   47f38:	e0fffc17 	ldw	r3,-16(fp)
   47f3c:	1808943a 	slli	r4,r3,16
   47f40:	e0fff417 	ldw	r3,-48(fp)
   47f44:	18ffffcc 	andi	r3,r3,65535
   47f48:	20c6b03a 	or	r3,r4,r3
   47f4c:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
   47f50:	e0bff017 	ldw	r2,-64(fp)
   47f54:	10c00104 	addi	r3,r2,4
   47f58:	e0fff015 	stw	r3,-64(fp)
   47f5c:	10800017 	ldw	r2,0(r2)
   47f60:	1004d43a 	srli	r2,r2,16
   47f64:	e17ffb17 	ldw	r5,-20(fp)
   47f68:	1009883a 	mov	r4,r2
   47f6c:	004d9680 	call	4d968 <__mulsi3>
   47f70:	1007883a 	mov	r3,r2
   47f74:	e0bff217 	ldw	r2,-56(fp)
   47f78:	10800017 	ldw	r2,0(r2)
   47f7c:	10bfffcc 	andi	r2,r2,65535
   47f80:	1887883a 	add	r3,r3,r2
   47f84:	e0bfef17 	ldw	r2,-68(fp)
   47f88:	1885883a 	add	r2,r3,r2
   47f8c:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   47f90:	e0bff417 	ldw	r2,-48(fp)
   47f94:	1004d43a 	srli	r2,r2,16
   47f98:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
   47f9c:	e0fff017 	ldw	r3,-64(fp)
   47fa0:	e0bff917 	ldw	r2,-28(fp)
   47fa4:	18bfd036 	bltu	r3,r2,47ee8 <_gp+0xfffeb18c>
	  *xc = z2;
   47fa8:	e0bff217 	ldw	r2,-56(fp)
   47fac:	e0fff417 	ldw	r3,-48(fp)
   47fb0:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   47fb4:	e0bff117 	ldw	r2,-60(fp)
   47fb8:	10800104 	addi	r2,r2,4
   47fbc:	e0bff115 	stw	r2,-60(fp)
   47fc0:	e0bff317 	ldw	r2,-52(fp)
   47fc4:	10800104 	addi	r2,r2,4
   47fc8:	e0bff315 	stw	r2,-52(fp)
   47fcc:	e0fff117 	ldw	r3,-60(fp)
   47fd0:	e0bffa17 	ldw	r2,-24(fp)
   47fd4:	18bf7836 	bltu	r3,r2,47db8 <_gp+0xfffeb05c>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
   47fd8:	e0bff517 	ldw	r2,-44(fp)
   47fdc:	10800504 	addi	r2,r2,20
   47fe0:	e0bff315 	stw	r2,-52(fp)
   47fe4:	e0bfee17 	ldw	r2,-72(fp)
   47fe8:	1085883a 	add	r2,r2,r2
   47fec:	1085883a 	add	r2,r2,r2
   47ff0:	1007883a 	mov	r3,r2
   47ff4:	e0bff317 	ldw	r2,-52(fp)
   47ff8:	10c5883a 	add	r2,r2,r3
   47ffc:	e0bff215 	stw	r2,-56(fp)
   48000:	00000306 	br	48010 <__multiply+0x3ac>
   48004:	e0bfee17 	ldw	r2,-72(fp)
   48008:	10bfffc4 	addi	r2,r2,-1
   4800c:	e0bfee15 	stw	r2,-72(fp)
   48010:	e0bfee17 	ldw	r2,-72(fp)
   48014:	0080060e 	bge	zero,r2,48030 <__multiply+0x3cc>
   48018:	e0bff217 	ldw	r2,-56(fp)
   4801c:	10bfff04 	addi	r2,r2,-4
   48020:	e0bff215 	stw	r2,-56(fp)
   48024:	e0bff217 	ldw	r2,-56(fp)
   48028:	10800017 	ldw	r2,0(r2)
   4802c:	103ff526 	beq	r2,zero,48004 <_gp+0xfffeb2a8>
  c->_wds = wc;
   48030:	e0bff517 	ldw	r2,-44(fp)
   48034:	e0ffee17 	ldw	r3,-72(fp)
   48038:	10c00415 	stw	r3,16(r2)
  return c;
   4803c:	e0bff517 	ldw	r2,-44(fp)
}
   48040:	e037883a 	mov	sp,fp
   48044:	dfc00117 	ldw	ra,4(sp)
   48048:	df000017 	ldw	fp,0(sp)
   4804c:	dec00204 	addi	sp,sp,8
   48050:	f800283a 	ret

00048054 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   48054:	defff704 	addi	sp,sp,-36
   48058:	dfc00815 	stw	ra,32(sp)
   4805c:	df000715 	stw	fp,28(sp)
   48060:	df000704 	addi	fp,sp,28
   48064:	e13ffd15 	stw	r4,-12(fp)
   48068:	e17ffe15 	stw	r5,-8(fp)
   4806c:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
   48070:	e0bfff17 	ldw	r2,-4(fp)
   48074:	108000cc 	andi	r2,r2,3
   48078:	e0bffb15 	stw	r2,-20(fp)
   4807c:	e0bffb17 	ldw	r2,-20(fp)
   48080:	10000e26 	beq	r2,zero,480bc <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
   48084:	e0bffb17 	ldw	r2,-20(fp)
   48088:	10ffffc4 	addi	r3,r2,-1
   4808c:	00800174 	movhi	r2,5
   48090:	108b1504 	addi	r2,r2,11348
   48094:	18c7883a 	add	r3,r3,r3
   48098:	18c7883a 	add	r3,r3,r3
   4809c:	10c5883a 	add	r2,r2,r3
   480a0:	10800017 	ldw	r2,0(r2)
   480a4:	000f883a 	mov	r7,zero
   480a8:	100d883a 	mov	r6,r2
   480ac:	e17ffe17 	ldw	r5,-8(fp)
   480b0:	e13ffd17 	ldw	r4,-12(fp)
   480b4:	00477580 	call	47758 <__multadd>
   480b8:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
   480bc:	e0bfff17 	ldw	r2,-4(fp)
   480c0:	1005d0ba 	srai	r2,r2,2
   480c4:	e0bfff15 	stw	r2,-4(fp)
   480c8:	e0bfff17 	ldw	r2,-4(fp)
   480cc:	1000021e 	bne	r2,zero,480d8 <__pow5mult+0x84>
    return b;
   480d0:	e0bffe17 	ldw	r2,-8(fp)
   480d4:	00003806 	br	481b8 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
   480d8:	e0bffd17 	ldw	r2,-12(fp)
   480dc:	10801217 	ldw	r2,72(r2)
   480e0:	e0bff915 	stw	r2,-28(fp)
   480e4:	e0bff917 	ldw	r2,-28(fp)
   480e8:	10000b1e 	bne	r2,zero,48118 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
   480ec:	01409c44 	movi	r5,625
   480f0:	e13ffd17 	ldw	r4,-12(fp)
   480f4:	0047c0c0 	call	47c0c <__i2b>
   480f8:	1007883a 	mov	r3,r2
   480fc:	e0bffd17 	ldw	r2,-12(fp)
   48100:	10c01215 	stw	r3,72(r2)
   48104:	e0bffd17 	ldw	r2,-12(fp)
   48108:	10801217 	ldw	r2,72(r2)
   4810c:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
   48110:	e0bff917 	ldw	r2,-28(fp)
   48114:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
   48118:	e0bfff17 	ldw	r2,-4(fp)
   4811c:	1080004c 	andi	r2,r2,1
   48120:	10000a26 	beq	r2,zero,4814c <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
   48124:	e1bff917 	ldw	r6,-28(fp)
   48128:	e17ffe17 	ldw	r5,-8(fp)
   4812c:	e13ffd17 	ldw	r4,-12(fp)
   48130:	0047c640 	call	47c64 <__multiply>
   48134:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
   48138:	e17ffe17 	ldw	r5,-8(fp)
   4813c:	e13ffd17 	ldw	r4,-12(fp)
   48140:	00476dc0 	call	476dc <_Bfree>
	  b = b1;
   48144:	e0bffc17 	ldw	r2,-16(fp)
   48148:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
   4814c:	e0bfff17 	ldw	r2,-4(fp)
   48150:	1005d07a 	srai	r2,r2,1
   48154:	e0bfff15 	stw	r2,-4(fp)
   48158:	e0bfff17 	ldw	r2,-4(fp)
   4815c:	10001426 	beq	r2,zero,481b0 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
   48160:	e0bff917 	ldw	r2,-28(fp)
   48164:	10800017 	ldw	r2,0(r2)
   48168:	e0bffa15 	stw	r2,-24(fp)
   4816c:	e0bffa17 	ldw	r2,-24(fp)
   48170:	10000c1e 	bne	r2,zero,481a4 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
   48174:	e1bff917 	ldw	r6,-28(fp)
   48178:	e17ff917 	ldw	r5,-28(fp)
   4817c:	e13ffd17 	ldw	r4,-12(fp)
   48180:	0047c640 	call	47c64 <__multiply>
   48184:	1007883a 	mov	r3,r2
   48188:	e0bff917 	ldw	r2,-28(fp)
   4818c:	10c00015 	stw	r3,0(r2)
   48190:	e0bff917 	ldw	r2,-28(fp)
   48194:	10800017 	ldw	r2,0(r2)
   48198:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
   4819c:	e0bffa17 	ldw	r2,-24(fp)
   481a0:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
   481a4:	e0bffa17 	ldw	r2,-24(fp)
   481a8:	e0bff915 	stw	r2,-28(fp)
    }
   481ac:	003fda06 	br	48118 <_gp+0xfffeb3bc>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
   481b0:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
   481b4:	e0bffe17 	ldw	r2,-8(fp)
}
   481b8:	e037883a 	mov	sp,fp
   481bc:	dfc00117 	ldw	ra,4(sp)
   481c0:	df000017 	ldw	fp,0(sp)
   481c4:	dec00204 	addi	sp,sp,8
   481c8:	f800283a 	ret

000481cc <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   481cc:	defff204 	addi	sp,sp,-56
   481d0:	dfc00d15 	stw	ra,52(sp)
   481d4:	df000c15 	stw	fp,48(sp)
   481d8:	df000c04 	addi	fp,sp,48
   481dc:	e13ffd15 	stw	r4,-12(fp)
   481e0:	e17ffe15 	stw	r5,-8(fp)
   481e4:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
   481e8:	e0bfff17 	ldw	r2,-4(fp)
   481ec:	1005d17a 	srai	r2,r2,5
   481f0:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
   481f4:	e0bffe17 	ldw	r2,-8(fp)
   481f8:	10800117 	ldw	r2,4(r2)
   481fc:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
   48200:	e0bffe17 	ldw	r2,-8(fp)
   48204:	10c00417 	ldw	r3,16(r2)
   48208:	e0bffa17 	ldw	r2,-24(fp)
   4820c:	1885883a 	add	r2,r3,r2
   48210:	10800044 	addi	r2,r2,1
   48214:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
   48218:	e0bffe17 	ldw	r2,-8(fp)
   4821c:	10800217 	ldw	r2,8(r2)
   48220:	e0bff415 	stw	r2,-48(fp)
   48224:	00000606 	br	48240 <__lshift+0x74>
    k1++;
   48228:	e0bff517 	ldw	r2,-44(fp)
   4822c:	10800044 	addi	r2,r2,1
   48230:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
   48234:	e0bff417 	ldw	r2,-48(fp)
   48238:	1085883a 	add	r2,r2,r2
   4823c:	e0bff415 	stw	r2,-48(fp)
   48240:	e0bff617 	ldw	r2,-40(fp)
   48244:	e0fff417 	ldw	r3,-48(fp)
   48248:	18bff716 	blt	r3,r2,48228 <_gp+0xfffeb4cc>
    k1++;
  b1 = Balloc (ptr, k1);
   4824c:	e17ff517 	ldw	r5,-44(fp)
   48250:	e13ffd17 	ldw	r4,-12(fp)
   48254:	00475ac0 	call	475ac <_Balloc>
   48258:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
   4825c:	e0bffb17 	ldw	r2,-20(fp)
   48260:	10800504 	addi	r2,r2,20
   48264:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
   48268:	e03ff415 	stw	zero,-48(fp)
   4826c:	00000706 	br	4828c <__lshift+0xc0>
    *x1++ = 0;
   48270:	e0bff817 	ldw	r2,-32(fp)
   48274:	10c00104 	addi	r3,r2,4
   48278:	e0fff815 	stw	r3,-32(fp)
   4827c:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
   48280:	e0bff417 	ldw	r2,-48(fp)
   48284:	10800044 	addi	r2,r2,1
   48288:	e0bff415 	stw	r2,-48(fp)
   4828c:	e0fff417 	ldw	r3,-48(fp)
   48290:	e0bffa17 	ldw	r2,-24(fp)
   48294:	18bff616 	blt	r3,r2,48270 <_gp+0xfffeb514>
    *x1++ = 0;
  x = b->_x;
   48298:	e0bffe17 	ldw	r2,-8(fp)
   4829c:	10800504 	addi	r2,r2,20
   482a0:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
   482a4:	e0bffe17 	ldw	r2,-8(fp)
   482a8:	10800417 	ldw	r2,16(r2)
   482ac:	1085883a 	add	r2,r2,r2
   482b0:	1085883a 	add	r2,r2,r2
   482b4:	1007883a 	mov	r3,r2
   482b8:	e0bff717 	ldw	r2,-36(fp)
   482bc:	10c5883a 	add	r2,r2,r3
   482c0:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
   482c4:	e0bfff17 	ldw	r2,-4(fp)
   482c8:	108007cc 	andi	r2,r2,31
   482cc:	e0bfff15 	stw	r2,-4(fp)
   482d0:	e0bfff17 	ldw	r2,-4(fp)
   482d4:	10002326 	beq	r2,zero,48364 <__lshift+0x198>
    {
      k1 = 32 - k;
   482d8:	00c00804 	movi	r3,32
   482dc:	e0bfff17 	ldw	r2,-4(fp)
   482e0:	1885c83a 	sub	r2,r3,r2
   482e4:	e0bff515 	stw	r2,-44(fp)
      z = 0;
   482e8:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
   482ec:	e0bff817 	ldw	r2,-32(fp)
   482f0:	10c00104 	addi	r3,r2,4
   482f4:	e0fff815 	stw	r3,-32(fp)
   482f8:	e0fff717 	ldw	r3,-36(fp)
   482fc:	19000017 	ldw	r4,0(r3)
   48300:	e0ffff17 	ldw	r3,-4(fp)
   48304:	20c8983a 	sll	r4,r4,r3
   48308:	e0fff917 	ldw	r3,-28(fp)
   4830c:	20c6b03a 	or	r3,r4,r3
   48310:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
   48314:	e0bff717 	ldw	r2,-36(fp)
   48318:	10c00104 	addi	r3,r2,4
   4831c:	e0fff715 	stw	r3,-36(fp)
   48320:	10c00017 	ldw	r3,0(r2)
   48324:	e0bff517 	ldw	r2,-44(fp)
   48328:	1884d83a 	srl	r2,r3,r2
   4832c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
   48330:	e0fff717 	ldw	r3,-36(fp)
   48334:	e0bffc17 	ldw	r2,-16(fp)
   48338:	18bfec36 	bltu	r3,r2,482ec <_gp+0xfffeb590>
      if ((*x1 = z) != 0)
   4833c:	e0bff817 	ldw	r2,-32(fp)
   48340:	e0fff917 	ldw	r3,-28(fp)
   48344:	10c00015 	stw	r3,0(r2)
   48348:	e0bff817 	ldw	r2,-32(fp)
   4834c:	10800017 	ldw	r2,0(r2)
   48350:	10000f26 	beq	r2,zero,48390 <__lshift+0x1c4>
	++n1;
   48354:	e0bff617 	ldw	r2,-40(fp)
   48358:	10800044 	addi	r2,r2,1
   4835c:	e0bff615 	stw	r2,-40(fp)
   48360:	00000b06 	br	48390 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
   48364:	e0bff817 	ldw	r2,-32(fp)
   48368:	10c00104 	addi	r3,r2,4
   4836c:	e0fff815 	stw	r3,-32(fp)
   48370:	e0fff717 	ldw	r3,-36(fp)
   48374:	19000104 	addi	r4,r3,4
   48378:	e13ff715 	stw	r4,-36(fp)
   4837c:	18c00017 	ldw	r3,0(r3)
   48380:	10c00015 	stw	r3,0(r2)
    while (x < xe);
   48384:	e0fff717 	ldw	r3,-36(fp)
   48388:	e0bffc17 	ldw	r2,-16(fp)
   4838c:	18bff536 	bltu	r3,r2,48364 <_gp+0xfffeb608>
  b1->_wds = n1 - 1;
   48390:	e0bff617 	ldw	r2,-40(fp)
   48394:	10ffffc4 	addi	r3,r2,-1
   48398:	e0bffb17 	ldw	r2,-20(fp)
   4839c:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
   483a0:	e17ffe17 	ldw	r5,-8(fp)
   483a4:	e13ffd17 	ldw	r4,-12(fp)
   483a8:	00476dc0 	call	476dc <_Bfree>
  return b1;
   483ac:	e0bffb17 	ldw	r2,-20(fp)
}
   483b0:	e037883a 	mov	sp,fp
   483b4:	dfc00117 	ldw	ra,4(sp)
   483b8:	df000017 	ldw	fp,0(sp)
   483bc:	dec00204 	addi	sp,sp,8
   483c0:	f800283a 	ret

000483c4 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
   483c4:	defff704 	addi	sp,sp,-36
   483c8:	df000815 	stw	fp,32(sp)
   483cc:	df000804 	addi	fp,sp,32
   483d0:	e13ffe15 	stw	r4,-8(fp)
   483d4:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
   483d8:	e0bffe17 	ldw	r2,-8(fp)
   483dc:	10800417 	ldw	r2,16(r2)
   483e0:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
   483e4:	e0bfff17 	ldw	r2,-4(fp)
   483e8:	10800417 	ldw	r2,16(r2)
   483ec:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
   483f0:	e0fffa17 	ldw	r3,-24(fp)
   483f4:	e0bffb17 	ldw	r2,-20(fp)
   483f8:	1885c83a 	sub	r2,r3,r2
   483fc:	e0bffa15 	stw	r2,-24(fp)
   48400:	e0bffa17 	ldw	r2,-24(fp)
   48404:	10000226 	beq	r2,zero,48410 <__mcmp+0x4c>
    return i;
   48408:	e0bffa17 	ldw	r2,-24(fp)
   4840c:	00002e06 	br	484c8 <__mcmp+0x104>
  xa0 = a->_x;
   48410:	e0bffe17 	ldw	r2,-8(fp)
   48414:	10800504 	addi	r2,r2,20
   48418:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
   4841c:	e0bffb17 	ldw	r2,-20(fp)
   48420:	1085883a 	add	r2,r2,r2
   48424:	1085883a 	add	r2,r2,r2
   48428:	1007883a 	mov	r3,r2
   4842c:	e0bffc17 	ldw	r2,-16(fp)
   48430:	10c5883a 	add	r2,r2,r3
   48434:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
   48438:	e0bfff17 	ldw	r2,-4(fp)
   4843c:	10800504 	addi	r2,r2,20
   48440:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
   48444:	e0bffb17 	ldw	r2,-20(fp)
   48448:	1085883a 	add	r2,r2,r2
   4844c:	1085883a 	add	r2,r2,r2
   48450:	1007883a 	mov	r3,r2
   48454:	e0bffd17 	ldw	r2,-12(fp)
   48458:	10c5883a 	add	r2,r2,r3
   4845c:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
   48460:	e0bff817 	ldw	r2,-32(fp)
   48464:	10bfff04 	addi	r2,r2,-4
   48468:	e0bff815 	stw	r2,-32(fp)
   4846c:	e0bff817 	ldw	r2,-32(fp)
   48470:	10c00017 	ldw	r3,0(r2)
   48474:	e0bff917 	ldw	r2,-28(fp)
   48478:	10bfff04 	addi	r2,r2,-4
   4847c:	e0bff915 	stw	r2,-28(fp)
   48480:	e0bff917 	ldw	r2,-28(fp)
   48484:	10800017 	ldw	r2,0(r2)
   48488:	18800926 	beq	r3,r2,484b0 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
   4848c:	e0bff817 	ldw	r2,-32(fp)
   48490:	10c00017 	ldw	r3,0(r2)
   48494:	e0bff917 	ldw	r2,-28(fp)
   48498:	10800017 	ldw	r2,0(r2)
   4849c:	1880022e 	bgeu	r3,r2,484a8 <__mcmp+0xe4>
   484a0:	00bfffc4 	movi	r2,-1
   484a4:	00000806 	br	484c8 <__mcmp+0x104>
   484a8:	00800044 	movi	r2,1
   484ac:	00000606 	br	484c8 <__mcmp+0x104>
      if (xa <= xa0)
   484b0:	e0bff817 	ldw	r2,-32(fp)
   484b4:	e0fffc17 	ldw	r3,-16(fp)
   484b8:	1880012e 	bgeu	r3,r2,484c0 <__mcmp+0xfc>
	break;
    }
   484bc:	003fe806 	br	48460 <_gp+0xfffeb704>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
   484c0:	0001883a 	nop
    }
  return 0;
   484c4:	0005883a 	mov	r2,zero
}
   484c8:	e037883a 	mov	sp,fp
   484cc:	df000017 	ldw	fp,0(sp)
   484d0:	dec00104 	addi	sp,sp,4
   484d4:	f800283a 	ret

000484d8 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
   484d8:	deffef04 	addi	sp,sp,-68
   484dc:	dfc01015 	stw	ra,64(sp)
   484e0:	df000f15 	stw	fp,60(sp)
   484e4:	df000f04 	addi	fp,sp,60
   484e8:	e13ffd15 	stw	r4,-12(fp)
   484ec:	e17ffe15 	stw	r5,-8(fp)
   484f0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
   484f4:	e17fff17 	ldw	r5,-4(fp)
   484f8:	e13ffe17 	ldw	r4,-8(fp)
   484fc:	00483c40 	call	483c4 <__mcmp>
   48500:	e0bff115 	stw	r2,-60(fp)
  if (!i)
   48504:	e0bff117 	ldw	r2,-60(fp)
   48508:	10000b1e 	bne	r2,zero,48538 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
   4850c:	000b883a 	mov	r5,zero
   48510:	e13ffd17 	ldw	r4,-12(fp)
   48514:	00475ac0 	call	475ac <_Balloc>
   48518:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
   4851c:	e0bff717 	ldw	r2,-36(fp)
   48520:	00c00044 	movi	r3,1
   48524:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
   48528:	e0bff717 	ldw	r2,-36(fp)
   4852c:	10000515 	stw	zero,20(r2)
      return c;
   48530:	e0bff717 	ldw	r2,-36(fp)
   48534:	00008c06 	br	48768 <__mdiff+0x290>
    }
  if (i < 0)
   48538:	e0bff117 	ldw	r2,-60(fp)
   4853c:	1000090e 	bge	r2,zero,48564 <__mdiff+0x8c>
    {
      c = a;
   48540:	e0bffe17 	ldw	r2,-8(fp)
   48544:	e0bff715 	stw	r2,-36(fp)
      a = b;
   48548:	e0bfff17 	ldw	r2,-4(fp)
   4854c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   48550:	e0bff717 	ldw	r2,-36(fp)
   48554:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
   48558:	00800044 	movi	r2,1
   4855c:	e0bff115 	stw	r2,-60(fp)
   48560:	00000106 	br	48568 <__mdiff+0x90>
    }
  else
    i = 0;
   48564:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
   48568:	e0bffe17 	ldw	r2,-8(fp)
   4856c:	10800117 	ldw	r2,4(r2)
   48570:	100b883a 	mov	r5,r2
   48574:	e13ffd17 	ldw	r4,-12(fp)
   48578:	00475ac0 	call	475ac <_Balloc>
   4857c:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
   48580:	e0bff717 	ldw	r2,-36(fp)
   48584:	e0fff117 	ldw	r3,-60(fp)
   48588:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
   4858c:	e0bffe17 	ldw	r2,-8(fp)
   48590:	10800417 	ldw	r2,16(r2)
   48594:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
   48598:	e0bffe17 	ldw	r2,-8(fp)
   4859c:	10800504 	addi	r2,r2,20
   485a0:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
   485a4:	e0bff217 	ldw	r2,-56(fp)
   485a8:	1085883a 	add	r2,r2,r2
   485ac:	1085883a 	add	r2,r2,r2
   485b0:	1007883a 	mov	r3,r2
   485b4:	e0bff417 	ldw	r2,-48(fp)
   485b8:	10c5883a 	add	r2,r2,r3
   485bc:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
   485c0:	e0bfff17 	ldw	r2,-4(fp)
   485c4:	10800417 	ldw	r2,16(r2)
   485c8:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   485cc:	e0bfff17 	ldw	r2,-4(fp)
   485d0:	10800504 	addi	r2,r2,20
   485d4:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
   485d8:	e0bff917 	ldw	r2,-28(fp)
   485dc:	1085883a 	add	r2,r2,r2
   485e0:	1085883a 	add	r2,r2,r2
   485e4:	1007883a 	mov	r3,r2
   485e8:	e0bff517 	ldw	r2,-44(fp)
   485ec:	10c5883a 	add	r2,r2,r3
   485f0:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
   485f4:	e0bff717 	ldw	r2,-36(fp)
   485f8:	10800504 	addi	r2,r2,20
   485fc:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
   48600:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
   48604:	e0bff417 	ldw	r2,-48(fp)
   48608:	10800017 	ldw	r2,0(r2)
   4860c:	10ffffcc 	andi	r3,r2,65535
   48610:	e0bff517 	ldw	r2,-44(fp)
   48614:	10800017 	ldw	r2,0(r2)
   48618:	10bfffcc 	andi	r2,r2,65535
   4861c:	1887c83a 	sub	r3,r3,r2
   48620:	e0bff317 	ldw	r2,-52(fp)
   48624:	1885883a 	add	r2,r3,r2
   48628:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   4862c:	e0bffb17 	ldw	r2,-20(fp)
   48630:	1005d43a 	srai	r2,r2,16
   48634:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
   48638:	e0bff417 	ldw	r2,-48(fp)
   4863c:	10c00104 	addi	r3,r2,4
   48640:	e0fff415 	stw	r3,-48(fp)
   48644:	10800017 	ldw	r2,0(r2)
   48648:	1006d43a 	srli	r3,r2,16
   4864c:	e0bff517 	ldw	r2,-44(fp)
   48650:	11000104 	addi	r4,r2,4
   48654:	e13ff515 	stw	r4,-44(fp)
   48658:	10800017 	ldw	r2,0(r2)
   4865c:	1004d43a 	srli	r2,r2,16
   48660:	1887c83a 	sub	r3,r3,r2
   48664:	e0bff317 	ldw	r2,-52(fp)
   48668:	1885883a 	add	r2,r3,r2
   4866c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   48670:	e0bffc17 	ldw	r2,-16(fp)
   48674:	1005d43a 	srai	r2,r2,16
   48678:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   4867c:	e0bff617 	ldw	r2,-40(fp)
   48680:	10c00104 	addi	r3,r2,4
   48684:	e0fff615 	stw	r3,-40(fp)
   48688:	e0fffc17 	ldw	r3,-16(fp)
   4868c:	1808943a 	slli	r4,r3,16
   48690:	e0fffb17 	ldw	r3,-20(fp)
   48694:	18ffffcc 	andi	r3,r3,65535
   48698:	20c6b03a 	or	r3,r4,r3
   4869c:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
   486a0:	e0fff517 	ldw	r3,-44(fp)
   486a4:	e0bffa17 	ldw	r2,-24(fp)
   486a8:	18bfd636 	bltu	r3,r2,48604 <_gp+0xfffeb8a8>
  while (xa < xae)
   486ac:	00001d06 	br	48724 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
   486b0:	e0bff417 	ldw	r2,-48(fp)
   486b4:	10800017 	ldw	r2,0(r2)
   486b8:	10ffffcc 	andi	r3,r2,65535
   486bc:	e0bff317 	ldw	r2,-52(fp)
   486c0:	1885883a 	add	r2,r3,r2
   486c4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   486c8:	e0bffb17 	ldw	r2,-20(fp)
   486cc:	1005d43a 	srai	r2,r2,16
   486d0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
   486d4:	e0bff417 	ldw	r2,-48(fp)
   486d8:	10c00104 	addi	r3,r2,4
   486dc:	e0fff415 	stw	r3,-48(fp)
   486e0:	10800017 	ldw	r2,0(r2)
   486e4:	1006d43a 	srli	r3,r2,16
   486e8:	e0bff317 	ldw	r2,-52(fp)
   486ec:	1885883a 	add	r2,r3,r2
   486f0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   486f4:	e0bffc17 	ldw	r2,-16(fp)
   486f8:	1005d43a 	srai	r2,r2,16
   486fc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   48700:	e0bff617 	ldw	r2,-40(fp)
   48704:	10c00104 	addi	r3,r2,4
   48708:	e0fff615 	stw	r3,-40(fp)
   4870c:	e0fffc17 	ldw	r3,-16(fp)
   48710:	1808943a 	slli	r4,r3,16
   48714:	e0fffb17 	ldw	r3,-20(fp)
   48718:	18ffffcc 	andi	r3,r3,65535
   4871c:	20c6b03a 	or	r3,r4,r3
   48720:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
   48724:	e0fff417 	ldw	r3,-48(fp)
   48728:	e0bff817 	ldw	r2,-32(fp)
   4872c:	18bfe036 	bltu	r3,r2,486b0 <_gp+0xfffeb954>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   48730:	00000306 	br	48740 <__mdiff+0x268>
    wa--;
   48734:	e0bff217 	ldw	r2,-56(fp)
   48738:	10bfffc4 	addi	r2,r2,-1
   4873c:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   48740:	e0bff617 	ldw	r2,-40(fp)
   48744:	10bfff04 	addi	r2,r2,-4
   48748:	e0bff615 	stw	r2,-40(fp)
   4874c:	e0bff617 	ldw	r2,-40(fp)
   48750:	10800017 	ldw	r2,0(r2)
   48754:	103ff726 	beq	r2,zero,48734 <_gp+0xfffeb9d8>
    wa--;
  c->_wds = wa;
   48758:	e0bff717 	ldw	r2,-36(fp)
   4875c:	e0fff217 	ldw	r3,-56(fp)
   48760:	10c00415 	stw	r3,16(r2)
  return c;
   48764:	e0bff717 	ldw	r2,-36(fp)
}
   48768:	e037883a 	mov	sp,fp
   4876c:	dfc00117 	ldw	ra,4(sp)
   48770:	df000017 	ldw	fp,0(sp)
   48774:	dec00204 	addi	sp,sp,8
   48778:	f800283a 	ret

0004877c <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
   4877c:	defff804 	addi	sp,sp,-32
   48780:	df000715 	stw	fp,28(sp)
   48784:	dc000615 	stw	r16,24(sp)
   48788:	df000704 	addi	fp,sp,28
   4878c:	e13ffd15 	stw	r4,-12(fp)
   48790:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
   48794:	e0bffd17 	ldw	r2,-12(fp)
   48798:	e0bff915 	stw	r2,-28(fp)
   4879c:	e0bffe17 	ldw	r2,-8(fp)
   487a0:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
   487a4:	e0bffa17 	ldw	r2,-24(fp)
   487a8:	10dffc2c 	andhi	r3,r2,32752
   487ac:	00bf3034 	movhi	r2,64704
   487b0:	1885883a 	add	r2,r3,r2
   487b4:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
   487b8:	0400040e 	bge	zero,r16,487cc <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
   487bc:	8005883a 	mov	r2,r16
   487c0:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
   487c4:	e03ffb15 	stw	zero,-20(fp)
   487c8:	00001406 	br	4881c <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
   487cc:	0405c83a 	sub	r2,zero,r16
   487d0:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
   487d4:	80800508 	cmpgei	r2,r16,20
   487d8:	1000051e 	bne	r2,zero,487f0 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
   487dc:	00800234 	movhi	r2,8
   487e0:	1405d83a 	sra	r2,r2,r16
   487e4:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
   487e8:	e03ffb15 	stw	zero,-20(fp)
   487ec:	00000b06 	br	4881c <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
   487f0:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
   487f4:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
   487f8:	808007c8 	cmpgei	r2,r16,31
   487fc:	1000051e 	bne	r2,zero,48814 <__ulp+0x98>
   48800:	008007c4 	movi	r2,31
   48804:	1405c83a 	sub	r2,r2,r16
   48808:	00c00044 	movi	r3,1
   4880c:	1884983a 	sll	r2,r3,r2
   48810:	00000106 	br	48818 <__ulp+0x9c>
   48814:	00800044 	movi	r2,1
   48818:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
   4881c:	e0bffb17 	ldw	r2,-20(fp)
   48820:	e0fffc17 	ldw	r3,-16(fp)
   48824:	1009883a 	mov	r4,r2
   48828:	180b883a 	mov	r5,r3
}
   4882c:	2005883a 	mov	r2,r4
   48830:	2807883a 	mov	r3,r5
   48834:	e6ffff04 	addi	sp,fp,-4
   48838:	df000117 	ldw	fp,4(sp)
   4883c:	dc000017 	ldw	r16,0(sp)
   48840:	dec00204 	addi	sp,sp,8
   48844:	f800283a 	ret

00048848 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
   48848:	defff404 	addi	sp,sp,-48
   4884c:	dfc00b15 	stw	ra,44(sp)
   48850:	df000a15 	stw	fp,40(sp)
   48854:	df000a04 	addi	fp,sp,40
   48858:	e13ffe15 	stw	r4,-8(fp)
   4885c:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
   48860:	e0bffe17 	ldw	r2,-8(fp)
   48864:	10800504 	addi	r2,r2,20
   48868:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
   4886c:	e0bffe17 	ldw	r2,-8(fp)
   48870:	10800417 	ldw	r2,16(r2)
   48874:	1085883a 	add	r2,r2,r2
   48878:	1085883a 	add	r2,r2,r2
   4887c:	1007883a 	mov	r3,r2
   48880:	e0bff717 	ldw	r2,-36(fp)
   48884:	10c5883a 	add	r2,r2,r3
   48888:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
   4888c:	e0bff617 	ldw	r2,-40(fp)
   48890:	10bfff04 	addi	r2,r2,-4
   48894:	e0bff615 	stw	r2,-40(fp)
   48898:	e0bff617 	ldw	r2,-40(fp)
   4889c:	10800017 	ldw	r2,0(r2)
   488a0:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
   488a4:	e13ff817 	ldw	r4,-32(fp)
   488a8:	0047a900 	call	47a90 <__hi0bits>
   488ac:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
   488b0:	00c00804 	movi	r3,32
   488b4:	e0bff917 	ldw	r2,-28(fp)
   488b8:	1887c83a 	sub	r3,r3,r2
   488bc:	e0bfff17 	ldw	r2,-4(fp)
   488c0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
   488c4:	e0bff917 	ldw	r2,-28(fp)
   488c8:	108002c8 	cmpgei	r2,r2,11
   488cc:	10001e1e 	bne	r2,zero,48948 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
   488d0:	00c002c4 	movi	r3,11
   488d4:	e0bff917 	ldw	r2,-28(fp)
   488d8:	1885c83a 	sub	r2,r3,r2
   488dc:	e0fff817 	ldw	r3,-32(fp)
   488e0:	1884d83a 	srl	r2,r3,r2
   488e4:	108ffc34 	orhi	r2,r2,16368
   488e8:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
   488ec:	e0bff617 	ldw	r2,-40(fp)
   488f0:	e0fff717 	ldw	r3,-36(fp)
   488f4:	1880062e 	bgeu	r3,r2,48910 <__b2d+0xc8>
   488f8:	e0bff617 	ldw	r2,-40(fp)
   488fc:	10bfff04 	addi	r2,r2,-4
   48900:	e0bff615 	stw	r2,-40(fp)
   48904:	e0bff617 	ldw	r2,-40(fp)
   48908:	10800017 	ldw	r2,0(r2)
   4890c:	00000106 	br	48914 <__b2d+0xcc>
   48910:	0005883a 	mov	r2,zero
   48914:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
   48918:	e0bff917 	ldw	r2,-28(fp)
   4891c:	10800544 	addi	r2,r2,21
   48920:	e0fff817 	ldw	r3,-32(fp)
   48924:	1886983a 	sll	r3,r3,r2
   48928:	010002c4 	movi	r4,11
   4892c:	e0bff917 	ldw	r2,-28(fp)
   48930:	2085c83a 	sub	r2,r4,r2
   48934:	e13ffa17 	ldw	r4,-24(fp)
   48938:	2084d83a 	srl	r2,r4,r2
   4893c:	1884b03a 	or	r2,r3,r2
   48940:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
   48944:	00003606 	br	48a20 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
   48948:	e0bff617 	ldw	r2,-40(fp)
   4894c:	e0fff717 	ldw	r3,-36(fp)
   48950:	1880062e 	bgeu	r3,r2,4896c <__b2d+0x124>
   48954:	e0bff617 	ldw	r2,-40(fp)
   48958:	10bfff04 	addi	r2,r2,-4
   4895c:	e0bff615 	stw	r2,-40(fp)
   48960:	e0bff617 	ldw	r2,-40(fp)
   48964:	10800017 	ldw	r2,0(r2)
   48968:	00000106 	br	48970 <__b2d+0x128>
   4896c:	0005883a 	mov	r2,zero
   48970:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
   48974:	e0bff917 	ldw	r2,-28(fp)
   48978:	10bffd44 	addi	r2,r2,-11
   4897c:	e0bff915 	stw	r2,-28(fp)
   48980:	e0bff917 	ldw	r2,-28(fp)
   48984:	10002126 	beq	r2,zero,48a0c <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
   48988:	e0fff817 	ldw	r3,-32(fp)
   4898c:	e0bff917 	ldw	r2,-28(fp)
   48990:	1886983a 	sll	r3,r3,r2
   48994:	01000804 	movi	r4,32
   48998:	e0bff917 	ldw	r2,-28(fp)
   4899c:	2085c83a 	sub	r2,r4,r2
   489a0:	e13ffb17 	ldw	r4,-20(fp)
   489a4:	2084d83a 	srl	r2,r4,r2
   489a8:	1884b03a 	or	r2,r3,r2
   489ac:	108ffc34 	orhi	r2,r2,16368
   489b0:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
   489b4:	e0bff617 	ldw	r2,-40(fp)
   489b8:	e0fff717 	ldw	r3,-36(fp)
   489bc:	1880062e 	bgeu	r3,r2,489d8 <__b2d+0x190>
   489c0:	e0bff617 	ldw	r2,-40(fp)
   489c4:	10bfff04 	addi	r2,r2,-4
   489c8:	e0bff615 	stw	r2,-40(fp)
   489cc:	e0bff617 	ldw	r2,-40(fp)
   489d0:	10800017 	ldw	r2,0(r2)
   489d4:	00000106 	br	489dc <__b2d+0x194>
   489d8:	0005883a 	mov	r2,zero
   489dc:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
   489e0:	e0fffb17 	ldw	r3,-20(fp)
   489e4:	e0bff917 	ldw	r2,-28(fp)
   489e8:	1886983a 	sll	r3,r3,r2
   489ec:	01000804 	movi	r4,32
   489f0:	e0bff917 	ldw	r2,-28(fp)
   489f4:	2085c83a 	sub	r2,r4,r2
   489f8:	e13ff817 	ldw	r4,-32(fp)
   489fc:	2084d83a 	srl	r2,r4,r2
   48a00:	1884b03a 	or	r2,r3,r2
   48a04:	e0bffc15 	stw	r2,-16(fp)
   48a08:	00000506 	br	48a20 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
   48a0c:	e0bff817 	ldw	r2,-32(fp)
   48a10:	108ffc34 	orhi	r2,r2,16368
   48a14:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
   48a18:	e0bffb17 	ldw	r2,-20(fp)
   48a1c:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
   48a20:	e0bffc17 	ldw	r2,-16(fp)
   48a24:	e0fffd17 	ldw	r3,-12(fp)
   48a28:	1009883a 	mov	r4,r2
   48a2c:	180b883a 	mov	r5,r3
}
   48a30:	2005883a 	mov	r2,r4
   48a34:	2807883a 	mov	r3,r5
   48a38:	e037883a 	mov	sp,fp
   48a3c:	dfc00117 	ldw	ra,4(sp)
   48a40:	df000017 	ldw	fp,0(sp)
   48a44:	dec00204 	addi	sp,sp,8
   48a48:	f800283a 	ret

00048a4c <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
   48a4c:	defff004 	addi	sp,sp,-64
   48a50:	dfc00f15 	stw	ra,60(sp)
   48a54:	df000e15 	stw	fp,56(sp)
   48a58:	dc000d15 	stw	r16,52(sp)
   48a5c:	df000e04 	addi	fp,sp,56
   48a60:	e13ffb15 	stw	r4,-20(fp)
   48a64:	e17ffc15 	stw	r5,-16(fp)
   48a68:	e1bffd15 	stw	r6,-12(fp)
   48a6c:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
   48a70:	e0bffc17 	ldw	r2,-16(fp)
   48a74:	e0bff715 	stw	r2,-36(fp)
   48a78:	e0bffd17 	ldw	r2,-12(fp)
   48a7c:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
   48a80:	e0bffc17 	ldw	r2,-16(fp)
   48a84:	e0bff715 	stw	r2,-36(fp)
   48a88:	e0bffd17 	ldw	r2,-12(fp)
   48a8c:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
   48a90:	01400044 	movi	r5,1
   48a94:	e13ffb17 	ldw	r4,-20(fp)
   48a98:	00475ac0 	call	475ac <_Balloc>
   48a9c:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
   48aa0:	e0bff417 	ldw	r2,-48(fp)
   48aa4:	10800504 	addi	r2,r2,20
   48aa8:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
   48aac:	e0fff817 	ldw	r3,-32(fp)
   48ab0:	00800434 	movhi	r2,16
   48ab4:	10bfffc4 	addi	r2,r2,-1
   48ab8:	1884703a 	and	r2,r3,r2
   48abc:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
   48ac0:	e0fff817 	ldw	r3,-32(fp)
   48ac4:	00a00034 	movhi	r2,32768
   48ac8:	10bfffc4 	addi	r2,r2,-1
   48acc:	1884703a 	and	r2,r3,r2
   48ad0:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
   48ad4:	e0bff817 	ldw	r2,-32(fp)
   48ad8:	1004d53a 	srli	r2,r2,20
   48adc:	e0bff615 	stw	r2,-40(fp)
   48ae0:	e0bff617 	ldw	r2,-40(fp)
   48ae4:	10000326 	beq	r2,zero,48af4 <__d2b+0xa8>
    z |= Exp_msk1;
   48ae8:	e0bffa17 	ldw	r2,-24(fp)
   48aec:	10800434 	orhi	r2,r2,16
   48af0:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
   48af4:	e0bff717 	ldw	r2,-36(fp)
   48af8:	10002826 	beq	r2,zero,48b9c <__d2b+0x150>
    {
      y = d1;
   48afc:	e0bff717 	ldw	r2,-36(fp)
   48b00:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
   48b04:	e0bff904 	addi	r2,fp,-28
   48b08:	1009883a 	mov	r4,r2
   48b0c:	0047b200 	call	47b20 <__lo0bits>
   48b10:	e0bff315 	stw	r2,-52(fp)
      if (k)
   48b14:	e0bff317 	ldw	r2,-52(fp)
   48b18:	10000e26 	beq	r2,zero,48b54 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
   48b1c:	e0fffa17 	ldw	r3,-24(fp)
   48b20:	01000804 	movi	r4,32
   48b24:	e0bff317 	ldw	r2,-52(fp)
   48b28:	2085c83a 	sub	r2,r4,r2
   48b2c:	1886983a 	sll	r3,r3,r2
   48b30:	e0bff917 	ldw	r2,-28(fp)
   48b34:	1886b03a 	or	r3,r3,r2
   48b38:	e0bff517 	ldw	r2,-44(fp)
   48b3c:	10c00015 	stw	r3,0(r2)
	  z >>= k;
   48b40:	e0fffa17 	ldw	r3,-24(fp)
   48b44:	e0bff317 	ldw	r2,-52(fp)
   48b48:	1884d83a 	srl	r2,r3,r2
   48b4c:	e0bffa15 	stw	r2,-24(fp)
   48b50:	00000306 	br	48b60 <__d2b+0x114>
	}
      else
	x[0] = y;
   48b54:	e0fff917 	ldw	r3,-28(fp)
   48b58:	e0bff517 	ldw	r2,-44(fp)
   48b5c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
   48b60:	e0bff517 	ldw	r2,-44(fp)
   48b64:	10800104 	addi	r2,r2,4
   48b68:	e0fffa17 	ldw	r3,-24(fp)
   48b6c:	10c00015 	stw	r3,0(r2)
   48b70:	10800017 	ldw	r2,0(r2)
   48b74:	10000226 	beq	r2,zero,48b80 <__d2b+0x134>
   48b78:	00800084 	movi	r2,2
   48b7c:	00000106 	br	48b84 <__d2b+0x138>
   48b80:	00800044 	movi	r2,1
   48b84:	e0fff417 	ldw	r3,-48(fp)
   48b88:	18800415 	stw	r2,16(r3)
   48b8c:	e0bff417 	ldw	r2,-48(fp)
   48b90:	10800417 	ldw	r2,16(r2)
   48b94:	e0bff215 	stw	r2,-56(fp)
   48b98:	00001006 	br	48bdc <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
   48b9c:	e0bffa04 	addi	r2,fp,-24
   48ba0:	1009883a 	mov	r4,r2
   48ba4:	0047b200 	call	47b20 <__lo0bits>
   48ba8:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
   48bac:	e0fffa17 	ldw	r3,-24(fp)
   48bb0:	e0bff517 	ldw	r2,-44(fp)
   48bb4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
   48bb8:	e0bff417 	ldw	r2,-48(fp)
   48bbc:	00c00044 	movi	r3,1
   48bc0:	10c00415 	stw	r3,16(r2)
   48bc4:	e0bff417 	ldw	r2,-48(fp)
   48bc8:	10800417 	ldw	r2,16(r2)
   48bcc:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
   48bd0:	e0bff317 	ldw	r2,-52(fp)
   48bd4:	10800804 	addi	r2,r2,32
   48bd8:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
   48bdc:	e0bff617 	ldw	r2,-40(fp)
   48be0:	10000c26 	beq	r2,zero,48c14 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
   48be4:	e0bff617 	ldw	r2,-40(fp)
   48be8:	10fef344 	addi	r3,r2,-1075
   48bec:	e0bff317 	ldw	r2,-52(fp)
   48bf0:	1887883a 	add	r3,r3,r2
   48bf4:	e0bffe17 	ldw	r2,-8(fp)
   48bf8:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
   48bfc:	00c00d44 	movi	r3,53
   48c00:	e0bff317 	ldw	r2,-52(fp)
   48c04:	1887c83a 	sub	r3,r3,r2
   48c08:	e0800217 	ldw	r2,8(fp)
   48c0c:	10c00015 	stw	r3,0(r2)
   48c10:	00001706 	br	48c70 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
   48c14:	e0bff617 	ldw	r2,-40(fp)
   48c18:	10fef384 	addi	r3,r2,-1074
   48c1c:	e0bff317 	ldw	r2,-52(fp)
   48c20:	1887883a 	add	r3,r3,r2
   48c24:	e0bffe17 	ldw	r2,-8(fp)
   48c28:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
   48c2c:	e0bff217 	ldw	r2,-56(fp)
   48c30:	1020917a 	slli	r16,r2,5
   48c34:	e0fff217 	ldw	r3,-56(fp)
   48c38:	00900034 	movhi	r2,16384
   48c3c:	10bfffc4 	addi	r2,r2,-1
   48c40:	1885883a 	add	r2,r3,r2
   48c44:	1085883a 	add	r2,r2,r2
   48c48:	1085883a 	add	r2,r2,r2
   48c4c:	1007883a 	mov	r3,r2
   48c50:	e0bff517 	ldw	r2,-44(fp)
   48c54:	10c5883a 	add	r2,r2,r3
   48c58:	10800017 	ldw	r2,0(r2)
   48c5c:	1009883a 	mov	r4,r2
   48c60:	0047a900 	call	47a90 <__hi0bits>
   48c64:	8087c83a 	sub	r3,r16,r2
   48c68:	e0800217 	ldw	r2,8(fp)
   48c6c:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
   48c70:	e0bff417 	ldw	r2,-48(fp)
}
   48c74:	e6ffff04 	addi	sp,fp,-4
   48c78:	dfc00217 	ldw	ra,8(sp)
   48c7c:	df000117 	ldw	fp,4(sp)
   48c80:	dc000017 	ldw	r16,0(sp)
   48c84:	dec00304 	addi	sp,sp,12
   48c88:	f800283a 	ret

00048c8c <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
   48c8c:	defff504 	addi	sp,sp,-44
   48c90:	dfc00a15 	stw	ra,40(sp)
   48c94:	df000915 	stw	fp,36(sp)
   48c98:	df000904 	addi	fp,sp,36
   48c9c:	e13ffe15 	stw	r4,-8(fp)
   48ca0:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
   48ca4:	e0bffc04 	addi	r2,fp,-16
   48ca8:	100b883a 	mov	r5,r2
   48cac:	e13ffe17 	ldw	r4,-8(fp)
   48cb0:	00488480 	call	48848 <__b2d>
   48cb4:	1009883a 	mov	r4,r2
   48cb8:	180b883a 	mov	r5,r3
   48cbc:	e13ff815 	stw	r4,-32(fp)
   48cc0:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
   48cc4:	e0bffd04 	addi	r2,fp,-12
   48cc8:	100b883a 	mov	r5,r2
   48ccc:	e13fff17 	ldw	r4,-4(fp)
   48cd0:	00488480 	call	48848 <__b2d>
   48cd4:	1009883a 	mov	r4,r2
   48cd8:	180b883a 	mov	r5,r3
   48cdc:	e13ffa15 	stw	r4,-24(fp)
   48ce0:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
   48ce4:	e0fffc17 	ldw	r3,-16(fp)
   48ce8:	e0bffd17 	ldw	r2,-12(fp)
   48cec:	1887c83a 	sub	r3,r3,r2
   48cf0:	e0bffe17 	ldw	r2,-8(fp)
   48cf4:	11000417 	ldw	r4,16(r2)
   48cf8:	e0bfff17 	ldw	r2,-4(fp)
   48cfc:	10800417 	ldw	r2,16(r2)
   48d00:	2085c83a 	sub	r2,r4,r2
   48d04:	1004917a 	slli	r2,r2,5
   48d08:	1885883a 	add	r2,r3,r2
   48d0c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
   48d10:	e0bff717 	ldw	r2,-36(fp)
   48d14:	0080060e 	bge	zero,r2,48d30 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
   48d18:	e0fff917 	ldw	r3,-28(fp)
   48d1c:	e0bff717 	ldw	r2,-36(fp)
   48d20:	1004953a 	slli	r2,r2,20
   48d24:	1885883a 	add	r2,r3,r2
   48d28:	e0bff915 	stw	r2,-28(fp)
   48d2c:	00000806 	br	48d50 <__ratio+0xc4>
  else
    {
      k = -k;
   48d30:	e0bff717 	ldw	r2,-36(fp)
   48d34:	0085c83a 	sub	r2,zero,r2
   48d38:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
   48d3c:	e0fffb17 	ldw	r3,-20(fp)
   48d40:	e0bff717 	ldw	r2,-36(fp)
   48d44:	1004953a 	slli	r2,r2,20
   48d48:	1885883a 	add	r2,r3,r2
   48d4c:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
   48d50:	e0bff817 	ldw	r2,-32(fp)
   48d54:	e0fff917 	ldw	r3,-28(fp)
   48d58:	e13ffa17 	ldw	r4,-24(fp)
   48d5c:	e17ffb17 	ldw	r5,-20(fp)
   48d60:	200d883a 	mov	r6,r4
   48d64:	280f883a 	mov	r7,r5
   48d68:	1009883a 	mov	r4,r2
   48d6c:	180b883a 	mov	r5,r3
   48d70:	004e23c0 	call	4e23c <__divdf3>
   48d74:	100f883a 	mov	r7,r2
   48d78:	1811883a 	mov	r8,r3
   48d7c:	380b883a 	mov	r5,r7
   48d80:	400d883a 	mov	r6,r8
   48d84:	2807883a 	mov	r3,r5
   48d88:	3009883a 	mov	r4,r6
}
   48d8c:	1805883a 	mov	r2,r3
   48d90:	2007883a 	mov	r3,r4
   48d94:	e037883a 	mov	sp,fp
   48d98:	dfc00117 	ldw	ra,4(sp)
   48d9c:	df000017 	ldw	fp,0(sp)
   48da0:	dec00204 	addi	sp,sp,8
   48da4:	f800283a 	ret

00048da8 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
   48da8:	defffb04 	addi	sp,sp,-20
   48dac:	dfc00415 	stw	ra,16(sp)
   48db0:	df000315 	stw	fp,12(sp)
   48db4:	df000304 	addi	fp,sp,12
   48db8:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
   48dbc:	e03ffd15 	stw	zero,-12(fp)
   48dc0:	008ffc34 	movhi	r2,16368
   48dc4:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
   48dc8:	e0bfff17 	ldw	r2,-4(fp)
   48dcc:	10800608 	cmpgei	r2,r2,24
   48dd0:	1000141e 	bne	r2,zero,48e24 <_mprec_log10+0x7c>
    return tens[dig];
   48dd4:	00800174 	movhi	r2,5
   48dd8:	108acf04 	addi	r2,r2,11068
   48ddc:	e0ffff17 	ldw	r3,-4(fp)
   48de0:	180690fa 	slli	r3,r3,3
   48de4:	10c9883a 	add	r4,r2,r3
   48de8:	20800017 	ldw	r2,0(r4)
   48dec:	20c00117 	ldw	r3,4(r4)
   48df0:	00001006 	br	48e34 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
   48df4:	000d883a 	mov	r6,zero
   48df8:	01d00934 	movhi	r7,16420
   48dfc:	e13ffd17 	ldw	r4,-12(fp)
   48e00:	e17ffe17 	ldw	r5,-8(fp)
   48e04:	004ee640 	call	4ee64 <__muldf3>
   48e08:	1009883a 	mov	r4,r2
   48e0c:	180b883a 	mov	r5,r3
   48e10:	e13ffd15 	stw	r4,-12(fp)
   48e14:	e17ffe15 	stw	r5,-8(fp)
      dig--;
   48e18:	e0bfff17 	ldw	r2,-4(fp)
   48e1c:	10bfffc4 	addi	r2,r2,-1
   48e20:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
   48e24:	e0bfff17 	ldw	r2,-4(fp)
   48e28:	00bff216 	blt	zero,r2,48df4 <_gp+0xfffec098>
    {
      v *= 10;
      dig--;
    }
  return v;
   48e2c:	e0bffd17 	ldw	r2,-12(fp)
   48e30:	e0fffe17 	ldw	r3,-8(fp)
   48e34:	1009883a 	mov	r4,r2
   48e38:	180b883a 	mov	r5,r3
}
   48e3c:	2005883a 	mov	r2,r4
   48e40:	2807883a 	mov	r3,r5
   48e44:	e037883a 	mov	sp,fp
   48e48:	dfc00117 	ldw	ra,4(sp)
   48e4c:	df000017 	ldw	fp,0(sp)
   48e50:	dec00204 	addi	sp,sp,8
   48e54:	f800283a 	ret

00048e58 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
   48e58:	defff904 	addi	sp,sp,-28
   48e5c:	df000615 	stw	fp,24(sp)
   48e60:	df000604 	addi	fp,sp,24
   48e64:	e13ffd15 	stw	r4,-12(fp)
   48e68:	e17ffe15 	stw	r5,-8(fp)
   48e6c:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
   48e70:	e0bffe17 	ldw	r2,-8(fp)
   48e74:	10bfffc4 	addi	r2,r2,-1
   48e78:	1005d17a 	srai	r2,r2,5
   48e7c:	10800044 	addi	r2,r2,1
   48e80:	1085883a 	add	r2,r2,r2
   48e84:	1085883a 	add	r2,r2,r2
   48e88:	1007883a 	mov	r3,r2
   48e8c:	e0bffd17 	ldw	r2,-12(fp)
   48e90:	10c5883a 	add	r2,r2,r3
   48e94:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
   48e98:	e0bfff17 	ldw	r2,-4(fp)
   48e9c:	10800504 	addi	r2,r2,20
   48ea0:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
   48ea4:	e0bfff17 	ldw	r2,-4(fp)
   48ea8:	10800417 	ldw	r2,16(r2)
   48eac:	1085883a 	add	r2,r2,r2
   48eb0:	1085883a 	add	r2,r2,r2
   48eb4:	1007883a 	mov	r3,r2
   48eb8:	e0bffa17 	ldw	r2,-24(fp)
   48ebc:	10c5883a 	add	r2,r2,r3
   48ec0:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
   48ec4:	00000806 	br	48ee8 <__copybits+0x90>
		*c++ = *x++;
   48ec8:	e0bffd17 	ldw	r2,-12(fp)
   48ecc:	10c00104 	addi	r3,r2,4
   48ed0:	e0fffd15 	stw	r3,-12(fp)
   48ed4:	e0fffa17 	ldw	r3,-24(fp)
   48ed8:	19000104 	addi	r4,r3,4
   48edc:	e13ffa15 	stw	r4,-24(fp)
   48ee0:	18c00017 	ldw	r3,0(r3)
   48ee4:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
   48ee8:	e0fffa17 	ldw	r3,-24(fp)
   48eec:	e0bffc17 	ldw	r2,-16(fp)
   48ef0:	18bff536 	bltu	r3,r2,48ec8 <_gp+0xfffec16c>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   48ef4:	00000406 	br	48f08 <__copybits+0xb0>
		*c++ = 0;
   48ef8:	e0bffd17 	ldw	r2,-12(fp)
   48efc:	10c00104 	addi	r3,r2,4
   48f00:	e0fffd15 	stw	r3,-12(fp)
   48f04:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   48f08:	e0fffd17 	ldw	r3,-12(fp)
   48f0c:	e0bffb17 	ldw	r2,-20(fp)
   48f10:	18bff936 	bltu	r3,r2,48ef8 <_gp+0xfffec19c>
		*c++ = 0;
}
   48f14:	0001883a 	nop
   48f18:	e037883a 	mov	sp,fp
   48f1c:	df000017 	ldw	fp,0(sp)
   48f20:	dec00104 	addi	sp,sp,4
   48f24:	f800283a 	ret

00048f28 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
   48f28:	defff704 	addi	sp,sp,-36
   48f2c:	df000815 	stw	fp,32(sp)
   48f30:	df000804 	addi	fp,sp,32
   48f34:	e13ffe15 	stw	r4,-8(fp)
   48f38:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
   48f3c:	e0bffe17 	ldw	r2,-8(fp)
   48f40:	10800504 	addi	r2,r2,20
   48f44:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
   48f48:	e0bffe17 	ldw	r2,-8(fp)
   48f4c:	10800417 	ldw	r2,16(r2)
   48f50:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
   48f54:	e0bfff17 	ldw	r2,-4(fp)
   48f58:	1005d17a 	srai	r2,r2,5
   48f5c:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
   48f60:	e0bff817 	ldw	r2,-32(fp)
   48f64:	e0fffa17 	ldw	r3,-24(fp)
   48f68:	1880030e 	bge	r3,r2,48f78 <__any_on+0x50>
		n = nwds;
   48f6c:	e0bffa17 	ldw	r2,-24(fp)
   48f70:	e0bff815 	stw	r2,-32(fp)
   48f74:	00001f06 	br	48ff4 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
   48f78:	e0fff817 	ldw	r3,-32(fp)
   48f7c:	e0bffa17 	ldw	r2,-24(fp)
   48f80:	18801c0e 	bge	r3,r2,48ff4 <__any_on+0xcc>
   48f84:	e0bfff17 	ldw	r2,-4(fp)
   48f88:	108007cc 	andi	r2,r2,31
   48f8c:	e0bfff15 	stw	r2,-4(fp)
   48f90:	e0bfff17 	ldw	r2,-4(fp)
   48f94:	10001726 	beq	r2,zero,48ff4 <__any_on+0xcc>
		x1 = x2 = x[n];
   48f98:	e0bff817 	ldw	r2,-32(fp)
   48f9c:	1085883a 	add	r2,r2,r2
   48fa0:	1085883a 	add	r2,r2,r2
   48fa4:	1007883a 	mov	r3,r2
   48fa8:	e0bff917 	ldw	r2,-28(fp)
   48fac:	10c5883a 	add	r2,r2,r3
   48fb0:	10800017 	ldw	r2,0(r2)
   48fb4:	e0bffb15 	stw	r2,-20(fp)
   48fb8:	e0bffb17 	ldw	r2,-20(fp)
   48fbc:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
   48fc0:	e0fffc17 	ldw	r3,-16(fp)
   48fc4:	e0bfff17 	ldw	r2,-4(fp)
   48fc8:	1884d83a 	srl	r2,r3,r2
   48fcc:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
   48fd0:	e0fffc17 	ldw	r3,-16(fp)
   48fd4:	e0bfff17 	ldw	r2,-4(fp)
   48fd8:	1884983a 	sll	r2,r3,r2
   48fdc:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
   48fe0:	e0fffc17 	ldw	r3,-16(fp)
   48fe4:	e0bffb17 	ldw	r2,-20(fp)
   48fe8:	18800226 	beq	r3,r2,48ff4 <__any_on+0xcc>
			return 1;
   48fec:	00800044 	movi	r2,1
   48ff0:	00001606 	br	4904c <__any_on+0x124>
		}
	x0 = x;
   48ff4:	e0bff917 	ldw	r2,-28(fp)
   48ff8:	e0bffd15 	stw	r2,-12(fp)
	x += n;
   48ffc:	e0bff817 	ldw	r2,-32(fp)
   49000:	1085883a 	add	r2,r2,r2
   49004:	1085883a 	add	r2,r2,r2
   49008:	1007883a 	mov	r3,r2
   4900c:	e0bff917 	ldw	r2,-28(fp)
   49010:	10c5883a 	add	r2,r2,r3
   49014:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
   49018:	00000806 	br	4903c <__any_on+0x114>
		if (*--x)
   4901c:	e0bff917 	ldw	r2,-28(fp)
   49020:	10bfff04 	addi	r2,r2,-4
   49024:	e0bff915 	stw	r2,-28(fp)
   49028:	e0bff917 	ldw	r2,-28(fp)
   4902c:	10800017 	ldw	r2,0(r2)
   49030:	10000226 	beq	r2,zero,4903c <__any_on+0x114>
			return 1;
   49034:	00800044 	movi	r2,1
   49038:	00000406 	br	4904c <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
   4903c:	e0bff917 	ldw	r2,-28(fp)
   49040:	e0fffd17 	ldw	r3,-12(fp)
   49044:	18bff536 	bltu	r3,r2,4901c <_gp+0xfffec2c0>
		if (*--x)
			return 1;
	return 0;
   49048:	0005883a 	mov	r2,zero
}
   4904c:	e037883a 	mov	sp,fp
   49050:	df000017 	ldw	fp,0(sp)
   49054:	dec00104 	addi	sp,sp,4
   49058:	f800283a 	ret

0004905c <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
   4905c:	defff904 	addi	sp,sp,-28
   49060:	df000615 	stw	fp,24(sp)
   49064:	df000604 	addi	fp,sp,24
   49068:	e13ffe15 	stw	r4,-8(fp)
   4906c:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
   49070:	e0bffe17 	ldw	r2,-8(fp)
   49074:	e0bffc15 	stw	r2,-16(fp)
   49078:	e0bfff17 	ldw	r2,-4(fp)
   4907c:	e0bffd15 	stw	r2,-12(fp)
   49080:	e0bffd17 	ldw	r2,-12(fp)
   49084:	e0bffa15 	stw	r2,-24(fp)
   49088:	e0bffc17 	ldw	r2,-16(fp)
   4908c:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
   49090:	e0bffa17 	ldw	r2,-24(fp)
   49094:	1000021e 	bne	r2,zero,490a0 <__fpclassifyd+0x44>
   49098:	e0bffb17 	ldw	r2,-20(fp)
   4909c:	10000526 	beq	r2,zero,490b4 <__fpclassifyd+0x58>
   490a0:	e0fffa17 	ldw	r3,-24(fp)
   490a4:	00a00034 	movhi	r2,32768
   490a8:	1880041e 	bne	r3,r2,490bc <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
   490ac:	e0bffb17 	ldw	r2,-20(fp)
   490b0:	1000021e 	bne	r2,zero,490bc <__fpclassifyd+0x60>
    return FP_ZERO;
   490b4:	00800084 	movi	r2,2
   490b8:	00002506 	br	49150 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
   490bc:	e0fffa17 	ldw	r3,-24(fp)
   490c0:	00800434 	movhi	r2,16
   490c4:	18800336 	bltu	r3,r2,490d4 <__fpclassifyd+0x78>
   490c8:	e0fffa17 	ldw	r3,-24(fp)
   490cc:	009ffc34 	movhi	r2,32752
   490d0:	18800636 	bltu	r3,r2,490ec <__fpclassifyd+0x90>
   490d4:	e0fffa17 	ldw	r3,-24(fp)
   490d8:	00a00434 	movhi	r2,32784
   490dc:	18800536 	bltu	r3,r2,490f4 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
   490e0:	e0fffa17 	ldw	r3,-24(fp)
   490e4:	00bffc34 	movhi	r2,65520
   490e8:	1880022e 	bgeu	r3,r2,490f4 <__fpclassifyd+0x98>
    return FP_NORMAL;
   490ec:	00800104 	movi	r2,4
   490f0:	00001706 	br	49150 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   490f4:	e0fffa17 	ldw	r3,-24(fp)
   490f8:	00800434 	movhi	r2,16
   490fc:	18800536 	bltu	r3,r2,49114 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   49100:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   49104:	1000050e 	bge	r2,zero,4911c <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   49108:	e0fffa17 	ldw	r3,-24(fp)
   4910c:	00a00434 	movhi	r2,32784
   49110:	1880022e 	bgeu	r3,r2,4911c <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
   49114:	008000c4 	movi	r2,3
   49118:	00000d06 	br	49150 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
   4911c:	e0fffa17 	ldw	r3,-24(fp)
   49120:	009ffc34 	movhi	r2,32752
   49124:	1880021e 	bne	r3,r2,49130 <__fpclassifyd+0xd4>
   49128:	e0bffb17 	ldw	r2,-20(fp)
   4912c:	10000526 	beq	r2,zero,49144 <__fpclassifyd+0xe8>
   49130:	e0fffa17 	ldw	r3,-24(fp)
   49134:	00bffc34 	movhi	r2,65520
   49138:	1880041e 	bne	r3,r2,4914c <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
   4913c:	e0bffb17 	ldw	r2,-20(fp)
   49140:	1000021e 	bne	r2,zero,4914c <__fpclassifyd+0xf0>
    return FP_INFINITE;
   49144:	00800044 	movi	r2,1
   49148:	00000106 	br	49150 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
   4914c:	0005883a 	mov	r2,zero
}
   49150:	e037883a 	mov	sp,fp
   49154:	df000017 	ldw	fp,0(sp)
   49158:	dec00104 	addi	sp,sp,4
   4915c:	f800283a 	ret

00049160 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
   49160:	defffb04 	addi	sp,sp,-20
   49164:	dfc00415 	stw	ra,16(sp)
   49168:	df000315 	stw	fp,12(sp)
   4916c:	df000304 	addi	fp,sp,12
   49170:	e13ffe15 	stw	r4,-8(fp)
   49174:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
   49178:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
   4917c:	e13fff17 	ldw	r4,-4(fp)
   49180:	00509dc0 	call	509dc <sbrk>
   49184:	e0bffd15 	stw	r2,-12(fp)
   49188:	e0bffd17 	ldw	r2,-12(fp)
   4918c:	10bfffd8 	cmpnei	r2,r2,-1
   49190:	1000051e 	bne	r2,zero,491a8 <_sbrk_r+0x48>
   49194:	d0a80a17 	ldw	r2,-24536(gp)
   49198:	10000326 	beq	r2,zero,491a8 <_sbrk_r+0x48>
    ptr->_errno = errno;
   4919c:	d0e80a17 	ldw	r3,-24536(gp)
   491a0:	e0bffe17 	ldw	r2,-8(fp)
   491a4:	10c00015 	stw	r3,0(r2)
  return ret;
   491a8:	e0bffd17 	ldw	r2,-12(fp)
}
   491ac:	e037883a 	mov	sp,fp
   491b0:	dfc00117 	ldw	ra,4(sp)
   491b4:	df000017 	ldw	fp,0(sp)
   491b8:	dec00204 	addi	sp,sp,8
   491bc:	f800283a 	ret

000491c0 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   491c0:	defff804 	addi	sp,sp,-32
   491c4:	dfc00715 	stw	ra,28(sp)
   491c8:	df000615 	stw	fp,24(sp)
   491cc:	dc400515 	stw	r17,20(sp)
   491d0:	dc000415 	stw	r16,16(sp)
   491d4:	df000604 	addi	fp,sp,24
   491d8:	e13ffa15 	stw	r4,-24(fp)
   491dc:	e17ffb15 	stw	r5,-20(fp)
   491e0:	e1bffc15 	stw	r6,-16(fp)
   491e4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   491e8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   491ec:	8080038b 	ldhu	r2,14(r16)
   491f0:	10bfffcc 	andi	r2,r2,65535
   491f4:	10a0001c 	xori	r2,r2,32768
   491f8:	10a00004 	addi	r2,r2,-32768
   491fc:	e0fffd17 	ldw	r3,-12(fp)
   49200:	180f883a 	mov	r7,r3
   49204:	e1bffc17 	ldw	r6,-16(fp)
   49208:	100b883a 	mov	r5,r2
   4920c:	e13ffa17 	ldw	r4,-24(fp)
   49210:	004bb640 	call	4bb64 <_read_r>
   49214:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
   49218:	88000416 	blt	r17,zero,4922c <__sread+0x6c>
    fp->_offset += ret;
   4921c:	80801417 	ldw	r2,80(r16)
   49220:	1445883a 	add	r2,r2,r17
   49224:	80801415 	stw	r2,80(r16)
   49228:	00000406 	br	4923c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   4922c:	80c0030b 	ldhu	r3,12(r16)
   49230:	00bbffc4 	movi	r2,-4097
   49234:	1884703a 	and	r2,r3,r2
   49238:	8080030d 	sth	r2,12(r16)
  return ret;
   4923c:	8805883a 	mov	r2,r17
}
   49240:	e6fffe04 	addi	sp,fp,-8
   49244:	dfc00317 	ldw	ra,12(sp)
   49248:	df000217 	ldw	fp,8(sp)
   4924c:	dc400117 	ldw	r17,4(sp)
   49250:	dc000017 	ldw	r16,0(sp)
   49254:	dec00404 	addi	sp,sp,16
   49258:	f800283a 	ret

0004925c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
   4925c:	defffb04 	addi	sp,sp,-20
   49260:	df000415 	stw	fp,16(sp)
   49264:	df000404 	addi	fp,sp,16
   49268:	e13ffc15 	stw	r4,-16(fp)
   4926c:	e17ffd15 	stw	r5,-12(fp)
   49270:	e1bffe15 	stw	r6,-8(fp)
   49274:	e1ffff15 	stw	r7,-4(fp)
  return 0;
   49278:	0005883a 	mov	r2,zero
}
   4927c:	e037883a 	mov	sp,fp
   49280:	df000017 	ldw	fp,0(sp)
   49284:	dec00104 	addi	sp,sp,4
   49288:	f800283a 	ret

0004928c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   4928c:	defff804 	addi	sp,sp,-32
   49290:	dfc00715 	stw	ra,28(sp)
   49294:	df000615 	stw	fp,24(sp)
   49298:	dc000515 	stw	r16,20(sp)
   4929c:	df000604 	addi	fp,sp,24
   492a0:	e13ffb15 	stw	r4,-20(fp)
   492a4:	e17ffc15 	stw	r5,-16(fp)
   492a8:	e1bffd15 	stw	r6,-12(fp)
   492ac:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
   492b0:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   492b4:	8080030b 	ldhu	r2,12(r16)
   492b8:	10bfffcc 	andi	r2,r2,65535
   492bc:	1080400c 	andi	r2,r2,256
   492c0:	10000926 	beq	r2,zero,492e8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
   492c4:	8080038b 	ldhu	r2,14(r16)
   492c8:	10bfffcc 	andi	r2,r2,65535
   492cc:	10a0001c 	xori	r2,r2,32768
   492d0:	10a00004 	addi	r2,r2,-32768
   492d4:	01c00084 	movi	r7,2
   492d8:	000d883a 	mov	r6,zero
   492dc:	100b883a 	mov	r5,r2
   492e0:	e13ffb17 	ldw	r4,-20(fp)
   492e4:	004b8ec0 	call	4b8ec <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   492e8:	80c0030b 	ldhu	r3,12(r16)
   492ec:	00bbffc4 	movi	r2,-4097
   492f0:	1884703a 	and	r2,r3,r2
   492f4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   492f8:	8080038b 	ldhu	r2,14(r16)
   492fc:	10bfffcc 	andi	r2,r2,65535
   49300:	10a0001c 	xori	r2,r2,32768
   49304:	10a00004 	addi	r2,r2,-32768
   49308:	e0fffe17 	ldw	r3,-8(fp)
   4930c:	180f883a 	mov	r7,r3
   49310:	e1bffd17 	ldw	r6,-12(fp)
   49314:	100b883a 	mov	r5,r2
   49318:	e13ffb17 	ldw	r4,-20(fp)
   4931c:	004abc00 	call	4abc0 <_write_r>
   49320:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
   49324:	e0bffa17 	ldw	r2,-24(fp)
}
   49328:	e6ffff04 	addi	sp,fp,-4
   4932c:	dfc00217 	ldw	ra,8(sp)
   49330:	df000117 	ldw	fp,4(sp)
   49334:	dc000017 	ldw	r16,0(sp)
   49338:	dec00304 	addi	sp,sp,12
   4933c:	f800283a 	ret

00049340 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
   49340:	defff804 	addi	sp,sp,-32
   49344:	dfc00715 	stw	ra,28(sp)
   49348:	df000615 	stw	fp,24(sp)
   4934c:	dc400515 	stw	r17,20(sp)
   49350:	dc000415 	stw	r16,16(sp)
   49354:	df000604 	addi	fp,sp,24
   49358:	e13ffa15 	stw	r4,-24(fp)
   4935c:	e17ffb15 	stw	r5,-20(fp)
   49360:	e1bffc15 	stw	r6,-16(fp)
   49364:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   49368:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   4936c:	8080038b 	ldhu	r2,14(r16)
   49370:	10bfffcc 	andi	r2,r2,65535
   49374:	10a0001c 	xori	r2,r2,32768
   49378:	10a00004 	addi	r2,r2,-32768
   4937c:	e1fffd17 	ldw	r7,-12(fp)
   49380:	e1bffc17 	ldw	r6,-16(fp)
   49384:	100b883a 	mov	r5,r2
   49388:	e13ffa17 	ldw	r4,-24(fp)
   4938c:	004b8ec0 	call	4b8ec <_lseek_r>
   49390:	1023883a 	mov	r17,r2
  if (ret == -1L)
   49394:	88bfffd8 	cmpnei	r2,r17,-1
   49398:	1000051e 	bne	r2,zero,493b0 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
   4939c:	80c0030b 	ldhu	r3,12(r16)
   493a0:	00bbffc4 	movi	r2,-4097
   493a4:	1884703a 	and	r2,r3,r2
   493a8:	8080030d 	sth	r2,12(r16)
   493ac:	00000406 	br	493c0 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
   493b0:	8080030b 	ldhu	r2,12(r16)
   493b4:	10840014 	ori	r2,r2,4096
   493b8:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
   493bc:	84401415 	stw	r17,80(r16)
    }
  return ret;
   493c0:	8805883a 	mov	r2,r17
}
   493c4:	e6fffe04 	addi	sp,fp,-8
   493c8:	dfc00317 	ldw	ra,12(sp)
   493cc:	df000217 	ldw	fp,8(sp)
   493d0:	dc400117 	ldw	r17,4(sp)
   493d4:	dc000017 	ldw	r16,0(sp)
   493d8:	dec00404 	addi	sp,sp,16
   493dc:	f800283a 	ret

000493e0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
   493e0:	defffb04 	addi	sp,sp,-20
   493e4:	dfc00415 	stw	ra,16(sp)
   493e8:	df000315 	stw	fp,12(sp)
   493ec:	df000304 	addi	fp,sp,12
   493f0:	e13ffe15 	stw	r4,-8(fp)
   493f4:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
   493f8:	e0bfff17 	ldw	r2,-4(fp)
   493fc:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
   49400:	e0bffd17 	ldw	r2,-12(fp)
   49404:	1080038b 	ldhu	r2,14(r2)
   49408:	10bfffcc 	andi	r2,r2,65535
   4940c:	10a0001c 	xori	r2,r2,32768
   49410:	10a00004 	addi	r2,r2,-32768
   49414:	100b883a 	mov	r5,r2
   49418:	e13ffe17 	ldw	r4,-8(fp)
   4941c:	004ac300 	call	4ac30 <_close_r>
}
   49420:	e037883a 	mov	sp,fp
   49424:	dfc00117 	ldw	ra,4(sp)
   49428:	df000017 	ldw	fp,0(sp)
   4942c:	dec00204 	addi	sp,sp,8
   49430:	f800283a 	ret

00049434 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
   49434:	defffb04 	addi	sp,sp,-20
   49438:	df000415 	stw	fp,16(sp)
   4943c:	df000404 	addi	fp,sp,16
   49440:	e13ffe15 	stw	r4,-8(fp)
   49444:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
   49448:	e0fffe17 	ldw	r3,-8(fp)
   4944c:	e0bfff17 	ldw	r2,-4(fp)
   49450:	1884b03a 	or	r2,r3,r2
   49454:	108000cc 	andi	r2,r2,3
   49458:	10002a1e 	bne	r2,zero,49504 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
   4945c:	e0bffe17 	ldw	r2,-8(fp)
   49460:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
   49464:	e0bfff17 	ldw	r2,-4(fp)
   49468:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
   4946c:	00001506 	br	494c4 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
   49470:	e0bffc17 	ldw	r2,-16(fp)
   49474:	10c00017 	ldw	r3,0(r2)
   49478:	00bfbff4 	movhi	r2,65279
   4947c:	10bfbfc4 	addi	r2,r2,-257
   49480:	1887883a 	add	r3,r3,r2
   49484:	e0bffc17 	ldw	r2,-16(fp)
   49488:	10800017 	ldw	r2,0(r2)
   4948c:	0084303a 	nor	r2,zero,r2
   49490:	1886703a 	and	r3,r3,r2
   49494:	00a02074 	movhi	r2,32897
   49498:	10a02004 	addi	r2,r2,-32640
   4949c:	1884703a 	and	r2,r3,r2
   494a0:	10000226 	beq	r2,zero,494ac <strcmp+0x78>
	    return 0;
   494a4:	0005883a 	mov	r2,zero
   494a8:	00002e06 	br	49564 <strcmp+0x130>

          a1++;
   494ac:	e0bffc17 	ldw	r2,-16(fp)
   494b0:	10800104 	addi	r2,r2,4
   494b4:	e0bffc15 	stw	r2,-16(fp)
          a2++;
   494b8:	e0bffd17 	ldw	r2,-12(fp)
   494bc:	10800104 	addi	r2,r2,4
   494c0:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
   494c4:	e0bffc17 	ldw	r2,-16(fp)
   494c8:	10c00017 	ldw	r3,0(r2)
   494cc:	e0bffd17 	ldw	r2,-12(fp)
   494d0:	10800017 	ldw	r2,0(r2)
   494d4:	18bfe626 	beq	r3,r2,49470 <_gp+0xfffec714>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
   494d8:	e0bffc17 	ldw	r2,-16(fp)
   494dc:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
   494e0:	e0bffd17 	ldw	r2,-12(fp)
   494e4:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
   494e8:	00000606 	br	49504 <strcmp+0xd0>
    {
      s1++;
   494ec:	e0bffe17 	ldw	r2,-8(fp)
   494f0:	10800044 	addi	r2,r2,1
   494f4:	e0bffe15 	stw	r2,-8(fp)
      s2++;
   494f8:	e0bfff17 	ldw	r2,-4(fp)
   494fc:	10800044 	addi	r2,r2,1
   49500:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
   49504:	e0bffe17 	ldw	r2,-8(fp)
   49508:	10800003 	ldbu	r2,0(r2)
   4950c:	10803fcc 	andi	r2,r2,255
   49510:	1080201c 	xori	r2,r2,128
   49514:	10bfe004 	addi	r2,r2,-128
   49518:	10000b26 	beq	r2,zero,49548 <strcmp+0x114>
   4951c:	e0bffe17 	ldw	r2,-8(fp)
   49520:	10c00003 	ldbu	r3,0(r2)
   49524:	e0bfff17 	ldw	r2,-4(fp)
   49528:	10800003 	ldbu	r2,0(r2)
   4952c:	18c03fcc 	andi	r3,r3,255
   49530:	18c0201c 	xori	r3,r3,128
   49534:	18ffe004 	addi	r3,r3,-128
   49538:	10803fcc 	andi	r2,r2,255
   4953c:	1080201c 	xori	r2,r2,128
   49540:	10bfe004 	addi	r2,r2,-128
   49544:	18bfe926 	beq	r3,r2,494ec <_gp+0xfffec790>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
   49548:	e0bffe17 	ldw	r2,-8(fp)
   4954c:	10800003 	ldbu	r2,0(r2)
   49550:	10c03fcc 	andi	r3,r2,255
   49554:	e0bfff17 	ldw	r2,-4(fp)
   49558:	10800003 	ldbu	r2,0(r2)
   4955c:	10803fcc 	andi	r2,r2,255
   49560:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   49564:	e037883a 	mov	sp,fp
   49568:	df000017 	ldw	fp,0(sp)
   4956c:	dec00104 	addi	sp,sp,4
   49570:	f800283a 	ret

00049574 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
   49574:	defffc04 	addi	sp,sp,-16
   49578:	df000315 	stw	fp,12(sp)
   4957c:	df000304 	addi	fp,sp,12
   49580:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
   49584:	e0bfff17 	ldw	r2,-4(fp)
   49588:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   4958c:	00000d06 	br	495c4 <strlen+0x50>
    {
      if (!*str)
   49590:	e0bfff17 	ldw	r2,-4(fp)
   49594:	10800003 	ldbu	r2,0(r2)
   49598:	10803fcc 	andi	r2,r2,255
   4959c:	1080201c 	xori	r2,r2,128
   495a0:	10bfe004 	addi	r2,r2,-128
   495a4:	1000041e 	bne	r2,zero,495b8 <strlen+0x44>
	return str - start;
   495a8:	e0ffff17 	ldw	r3,-4(fp)
   495ac:	e0bffe17 	ldw	r2,-8(fp)
   495b0:	1885c83a 	sub	r2,r3,r2
   495b4:	00002806 	br	49658 <strlen+0xe4>
      str++;
   495b8:	e0bfff17 	ldw	r2,-4(fp)
   495bc:	10800044 	addi	r2,r2,1
   495c0:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   495c4:	e0bfff17 	ldw	r2,-4(fp)
   495c8:	108000cc 	andi	r2,r2,3
   495cc:	103ff01e 	bne	r2,zero,49590 <_gp+0xfffec834>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
   495d0:	e0bfff17 	ldw	r2,-4(fp)
   495d4:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
   495d8:	00000306 	br	495e8 <strlen+0x74>
    aligned_addr++;
   495dc:	e0bffd17 	ldw	r2,-12(fp)
   495e0:	10800104 	addi	r2,r2,4
   495e4:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
   495e8:	e0bffd17 	ldw	r2,-12(fp)
   495ec:	10c00017 	ldw	r3,0(r2)
   495f0:	00bfbff4 	movhi	r2,65279
   495f4:	10bfbfc4 	addi	r2,r2,-257
   495f8:	1887883a 	add	r3,r3,r2
   495fc:	e0bffd17 	ldw	r2,-12(fp)
   49600:	10800017 	ldw	r2,0(r2)
   49604:	0084303a 	nor	r2,zero,r2
   49608:	1886703a 	and	r3,r3,r2
   4960c:	00a02074 	movhi	r2,32897
   49610:	10a02004 	addi	r2,r2,-32640
   49614:	1884703a 	and	r2,r3,r2
   49618:	103ff026 	beq	r2,zero,495dc <_gp+0xfffec880>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
   4961c:	e0bffd17 	ldw	r2,-12(fp)
   49620:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   49624:	00000306 	br	49634 <strlen+0xc0>
    str++;
   49628:	e0bfff17 	ldw	r2,-4(fp)
   4962c:	10800044 	addi	r2,r2,1
   49630:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   49634:	e0bfff17 	ldw	r2,-4(fp)
   49638:	10800003 	ldbu	r2,0(r2)
   4963c:	10803fcc 	andi	r2,r2,255
   49640:	1080201c 	xori	r2,r2,128
   49644:	10bfe004 	addi	r2,r2,-128
   49648:	103ff71e 	bne	r2,zero,49628 <_gp+0xfffec8cc>
    str++;
  return str - start;
   4964c:	e0ffff17 	ldw	r3,-4(fp)
   49650:	e0bffe17 	ldw	r2,-8(fp)
   49654:	1885c83a 	sub	r2,r3,r2
}
   49658:	e037883a 	mov	sp,fp
   4965c:	df000017 	ldw	fp,0(sp)
   49660:	dec00104 	addi	sp,sp,4
   49664:	f800283a 	ret

00049668 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
   49668:	defff604 	addi	sp,sp,-40
   4966c:	dfc00915 	stw	ra,36(sp)
   49670:	df000815 	stw	fp,32(sp)
   49674:	dc400715 	stw	r17,28(sp)
   49678:	dc000615 	stw	r16,24(sp)
   4967c:	df000804 	addi	fp,sp,32
   49680:	e13ffc15 	stw	r4,-16(fp)
   49684:	e17ffd15 	stw	r5,-12(fp)
   49688:	3021883a 	mov	r16,r6
	register int err = 0;
   4968c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
   49690:	80800217 	ldw	r2,8(r16)
   49694:	1000031e 	bne	r2,zero,496a4 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
   49698:	80000115 	stw	zero,4(r16)
		return (0);
   4969c:	0005883a 	mov	r2,zero
   496a0:	00003906 	br	49788 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
   496a4:	e0bffd17 	ldw	r2,-12(fp)
   496a8:	10801917 	ldw	r2,100(r2)
   496ac:	1088000c 	andi	r2,r2,8192
   496b0:	10002d26 	beq	r2,zero,49768 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
   496b4:	80800017 	ldw	r2,0(r16)
   496b8:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
   496bc:	00002706 	br	4975c <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
   496c0:	e0bff817 	ldw	r2,-32(fp)
   496c4:	10800017 	ldw	r2,0(r2)
   496c8:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
   496cc:	e0bff817 	ldw	r2,-32(fp)
   496d0:	10800117 	ldw	r2,4(r2)
   496d4:	1004d0ba 	srli	r2,r2,2
   496d8:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
   496dc:	e03ff915 	stw	zero,-28(fp)
   496e0:	00001206 	br	4972c <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
   496e4:	e0bff917 	ldw	r2,-28(fp)
   496e8:	1085883a 	add	r2,r2,r2
   496ec:	1085883a 	add	r2,r2,r2
   496f0:	1007883a 	mov	r3,r2
   496f4:	e0bffa17 	ldw	r2,-24(fp)
   496f8:	10c5883a 	add	r2,r2,r3
   496fc:	10800017 	ldw	r2,0(r2)
   49700:	e1bffd17 	ldw	r6,-12(fp)
   49704:	100b883a 	mov	r5,r2
   49708:	e13ffc17 	ldw	r4,-16(fp)
   4970c:	004b14c0 	call	4b14c <_fputwc_r>
   49710:	10bfffd8 	cmpnei	r2,r2,-1
   49714:	1000021e 	bne	r2,zero,49720 <__sprint_r+0xb8>
					err = -1;
   49718:	047fffc4 	movi	r17,-1
					goto out;
   4971c:	00001706 	br	4977c <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
   49720:	e0bff917 	ldw	r2,-28(fp)
   49724:	10800044 	addi	r2,r2,1
   49728:	e0bff915 	stw	r2,-28(fp)
   4972c:	e0fff917 	ldw	r3,-28(fp)
   49730:	e0bffb17 	ldw	r2,-20(fp)
   49734:	18bfeb16 	blt	r3,r2,496e4 <_gp+0xfffec988>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
   49738:	80c00217 	ldw	r3,8(r16)
   4973c:	e0bffb17 	ldw	r2,-20(fp)
   49740:	1085883a 	add	r2,r2,r2
   49744:	1085883a 	add	r2,r2,r2
   49748:	1885c83a 	sub	r2,r3,r2
   4974c:	80800215 	stw	r2,8(r16)
   49750:	e0bff817 	ldw	r2,-32(fp)
   49754:	10800204 	addi	r2,r2,8
   49758:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
   4975c:	80800217 	ldw	r2,8(r16)
   49760:	103fd71e 	bne	r2,zero,496c0 <_gp+0xfffec964>
   49764:	00000506 	br	4977c <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
   49768:	800d883a 	mov	r6,r16
   4976c:	e17ffd17 	ldw	r5,-12(fp)
   49770:	e13ffc17 	ldw	r4,-16(fp)
   49774:	004b2a40 	call	4b2a4 <__sfvwrite_r>
   49778:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
   4977c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
   49780:	80000115 	stw	zero,4(r16)
	return (err);
   49784:	8805883a 	mov	r2,r17
}
   49788:	e6fffe04 	addi	sp,fp,-8
   4978c:	dfc00317 	ldw	ra,12(sp)
   49790:	df000217 	ldw	fp,8(sp)
   49794:	dc400117 	ldw	r17,4(sp)
   49798:	dc000017 	ldw	r16,0(sp)
   4979c:	dec00404 	addi	sp,sp,16
   497a0:	f800283a 	ret

000497a4 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   497a4:	defedf04 	addi	sp,sp,-1156
   497a8:	dfc12015 	stw	ra,1152(sp)
   497ac:	df011f15 	stw	fp,1148(sp)
   497b0:	dc011e15 	stw	r16,1144(sp)
   497b4:	df011f04 	addi	fp,sp,1148
   497b8:	e13ffc15 	stw	r4,-16(fp)
   497bc:	2821883a 	mov	r16,r5
   497c0:	e1bffd15 	stw	r6,-12(fp)
   497c4:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   497c8:	80c0030b 	ldhu	r3,12(r16)
   497cc:	00bfff44 	movi	r2,-3
   497d0:	1884703a 	and	r2,r3,r2
   497d4:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   497d8:	80801917 	ldw	r2,100(r16)
   497dc:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   497e0:	8080038b 	ldhu	r2,14(r16)
   497e4:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   497e8:	80800717 	ldw	r2,28(r16)
   497ec:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   497f0:	80800917 	ldw	r2,36(r16)
   497f4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   497f8:	e0befc04 	addi	r2,fp,-1040
   497fc:	e0bee215 	stw	r2,-1144(fp)
   49800:	e0bee217 	ldw	r2,-1144(fp)
   49804:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   49808:	00810004 	movi	r2,1024
   4980c:	e0bee415 	stw	r2,-1136(fp)
   49810:	e0bee417 	ldw	r2,-1136(fp)
   49814:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   49818:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   4981c:	e0bee204 	addi	r2,fp,-1144
   49820:	e1fffe17 	ldw	r7,-8(fp)
   49824:	e1bffd17 	ldw	r6,-12(fp)
   49828:	100b883a 	mov	r5,r2
   4982c:	e13ffc17 	ldw	r4,-16(fp)
   49830:	00498e40 	call	498e4 <___vfiprintf_internal_r>
   49834:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   49838:	e0bee117 	ldw	r2,-1148(fp)
   4983c:	10000716 	blt	r2,zero,4985c <__sbprintf+0xb8>
   49840:	e0bee204 	addi	r2,fp,-1144
   49844:	100b883a 	mov	r5,r2
   49848:	e13ffc17 	ldw	r4,-16(fp)
   4984c:	0044e080 	call	44e08 <_fflush_r>
   49850:	10000226 	beq	r2,zero,4985c <__sbprintf+0xb8>
		ret = EOF;
   49854:	00bfffc4 	movi	r2,-1
   49858:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   4985c:	e0bee50b 	ldhu	r2,-1132(fp)
   49860:	10bfffcc 	andi	r2,r2,65535
   49864:	1080100c 	andi	r2,r2,64
   49868:	10000326 	beq	r2,zero,49878 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   4986c:	8080030b 	ldhu	r2,12(r16)
   49870:	10801014 	ori	r2,r2,64
   49874:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   49878:	e0bee117 	ldw	r2,-1148(fp)
}
   4987c:	e6ffff04 	addi	sp,fp,-4
   49880:	dfc00217 	ldw	ra,8(sp)
   49884:	df000117 	ldw	fp,4(sp)
   49888:	dc000017 	ldw	r16,0(sp)
   4988c:	dec00304 	addi	sp,sp,12
   49890:	f800283a 	ret

00049894 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   49894:	defffa04 	addi	sp,sp,-24
   49898:	dfc00515 	stw	ra,20(sp)
   4989c:	df000415 	stw	fp,16(sp)
   498a0:	df000404 	addi	fp,sp,16
   498a4:	e13ffd15 	stw	r4,-12(fp)
   498a8:	e17ffe15 	stw	r5,-8(fp)
   498ac:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   498b0:	d0a00417 	ldw	r2,-32752(gp)
   498b4:	e1ffff17 	ldw	r7,-4(fp)
   498b8:	e1bffe17 	ldw	r6,-8(fp)
   498bc:	e17ffd17 	ldw	r5,-12(fp)
   498c0:	1009883a 	mov	r4,r2
   498c4:	00498e40 	call	498e4 <___vfiprintf_internal_r>
   498c8:	e0bffc15 	stw	r2,-16(fp)
  return result;
   498cc:	e0bffc17 	ldw	r2,-16(fp)
}
   498d0:	e037883a 	mov	sp,fp
   498d4:	dfc00117 	ldw	ra,4(sp)
   498d8:	df000017 	ldw	fp,0(sp)
   498dc:	dec00204 	addi	sp,sp,8
   498e0:	f800283a 	ret

000498e4 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   498e4:	deffb704 	addi	sp,sp,-292
   498e8:	dfc04815 	stw	ra,288(sp)
   498ec:	df004715 	stw	fp,284(sp)
   498f0:	ddc04615 	stw	r23,280(sp)
   498f4:	dd804515 	stw	r22,276(sp)
   498f8:	dd404415 	stw	r21,272(sp)
   498fc:	dd004315 	stw	r20,268(sp)
   49900:	dcc04215 	stw	r19,264(sp)
   49904:	dc804115 	stw	r18,260(sp)
   49908:	dc404015 	stw	r17,256(sp)
   4990c:	dc003f15 	stw	r16,252(sp)
   49910:	df004704 	addi	fp,sp,284
   49914:	e13fe615 	stw	r4,-104(fp)
   49918:	e17fe715 	stw	r5,-100(fp)
   4991c:	e1bfe815 	stw	r6,-96(fp)
   49920:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   49924:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   49928:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   4992c:	e0bfe617 	ldw	r2,-104(fp)
   49930:	e0bfc415 	stw	r2,-240(fp)
   49934:	e0bfc417 	ldw	r2,-240(fp)
   49938:	10000526 	beq	r2,zero,49950 <___vfiprintf_internal_r+0x6c>
   4993c:	e0bfc417 	ldw	r2,-240(fp)
   49940:	10800e17 	ldw	r2,56(r2)
   49944:	1000021e 	bne	r2,zero,49950 <___vfiprintf_internal_r+0x6c>
   49948:	e13fc417 	ldw	r4,-240(fp)
   4994c:	00452a00 	call	452a0 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   49950:	e0bfe717 	ldw	r2,-100(fp)
   49954:	1080030b 	ldhu	r2,12(r2)
   49958:	10bfffcc 	andi	r2,r2,65535
   4995c:	1088000c 	andi	r2,r2,8192
   49960:	10000c1e 	bne	r2,zero,49994 <___vfiprintf_internal_r+0xb0>
   49964:	e0bfe717 	ldw	r2,-100(fp)
   49968:	1080030b 	ldhu	r2,12(r2)
   4996c:	10880014 	ori	r2,r2,8192
   49970:	1007883a 	mov	r3,r2
   49974:	e0bfe717 	ldw	r2,-100(fp)
   49978:	10c0030d 	sth	r3,12(r2)
   4997c:	e0bfe717 	ldw	r2,-100(fp)
   49980:	10c01917 	ldw	r3,100(r2)
   49984:	00b7ffc4 	movi	r2,-8193
   49988:	1886703a 	and	r3,r3,r2
   4998c:	e0bfe717 	ldw	r2,-100(fp)
   49990:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   49994:	e0bfe717 	ldw	r2,-100(fp)
   49998:	1080030b 	ldhu	r2,12(r2)
   4999c:	10bfffcc 	andi	r2,r2,65535
   499a0:	1080020c 	andi	r2,r2,8
   499a4:	10000326 	beq	r2,zero,499b4 <___vfiprintf_internal_r+0xd0>
   499a8:	e0bfe717 	ldw	r2,-100(fp)
   499ac:	10800417 	ldw	r2,16(r2)
   499b0:	1000061e 	bne	r2,zero,499cc <___vfiprintf_internal_r+0xe8>
   499b4:	e17fe717 	ldw	r5,-100(fp)
   499b8:	e13fe617 	ldw	r4,-104(fp)
   499bc:	0042a280 	call	42a28 <__swsetup_r>
   499c0:	10000226 	beq	r2,zero,499cc <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
   499c4:	00bfffc4 	movi	r2,-1
   499c8:	00047006 	br	4ab8c <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   499cc:	e0bfe717 	ldw	r2,-100(fp)
   499d0:	1080030b 	ldhu	r2,12(r2)
   499d4:	10bfffcc 	andi	r2,r2,65535
   499d8:	1080068c 	andi	r2,r2,26
   499dc:	10800298 	cmpnei	r2,r2,10
   499e0:	10000c1e 	bne	r2,zero,49a14 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
   499e4:	e0bfe717 	ldw	r2,-100(fp)
   499e8:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   499ec:	10bfffcc 	andi	r2,r2,65535
   499f0:	10a0001c 	xori	r2,r2,32768
   499f4:	10a00004 	addi	r2,r2,-32768
   499f8:	10000616 	blt	r2,zero,49a14 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   499fc:	e1ffe917 	ldw	r7,-92(fp)
   49a00:	e1bfe817 	ldw	r6,-96(fp)
   49a04:	e17fe717 	ldw	r5,-100(fp)
   49a08:	e13fe617 	ldw	r4,-104(fp)
   49a0c:	00497a40 	call	497a4 <__sbprintf>
   49a10:	00045e06 	br	4ab8c <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   49a14:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   49a18:	e4bfcb04 	addi	r18,fp,-212
   49a1c:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
   49a20:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   49a24:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   49a28:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   49a2c:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   49a30:	00000106 	br	49a38 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
   49a34:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   49a38:	a8800003 	ldbu	r2,0(r21)
   49a3c:	10803fcc 	andi	r2,r2,255
   49a40:	1080201c 	xori	r2,r2,128
   49a44:	10bfe004 	addi	r2,r2,-128
   49a48:	10000626 	beq	r2,zero,49a64 <___vfiprintf_internal_r+0x180>
   49a4c:	a8800003 	ldbu	r2,0(r21)
   49a50:	10803fcc 	andi	r2,r2,255
   49a54:	1080201c 	xori	r2,r2,128
   49a58:	10bfe004 	addi	r2,r2,-128
   49a5c:	10800958 	cmpnei	r2,r2,37
   49a60:	103ff41e 	bne	r2,zero,49a34 <_gp+0xfffeccd8>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   49a64:	a807883a 	mov	r3,r21
   49a68:	a005883a 	mov	r2,r20
   49a6c:	18a1c83a 	sub	r16,r3,r2
   49a70:	80001826 	beq	r16,zero,49ad4 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
   49a74:	95000015 	stw	r20,0(r18)
   49a78:	8005883a 	mov	r2,r16
   49a7c:	90800115 	stw	r2,4(r18)
   49a80:	e0bfca17 	ldw	r2,-216(fp)
   49a84:	8007883a 	mov	r3,r16
   49a88:	10c5883a 	add	r2,r2,r3
   49a8c:	e0bfca15 	stw	r2,-216(fp)
   49a90:	94800204 	addi	r18,r18,8
   49a94:	e0bfc917 	ldw	r2,-220(fp)
   49a98:	10800044 	addi	r2,r2,1
   49a9c:	e0bfc915 	stw	r2,-220(fp)
   49aa0:	e0bfc917 	ldw	r2,-220(fp)
   49aa4:	10800210 	cmplti	r2,r2,8
   49aa8:	1000071e 	bne	r2,zero,49ac8 <___vfiprintf_internal_r+0x1e4>
   49aac:	e0bfc804 	addi	r2,fp,-224
   49ab0:	100d883a 	mov	r6,r2
   49ab4:	e17fe717 	ldw	r5,-100(fp)
   49ab8:	e13fe617 	ldw	r4,-104(fp)
   49abc:	00496680 	call	49668 <__sprint_r>
   49ac0:	1004091e 	bne	r2,zero,4aae8 <___vfiprintf_internal_r+0x1204>
   49ac4:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
   49ac8:	e0bfb917 	ldw	r2,-284(fp)
   49acc:	1405883a 	add	r2,r2,r16
   49ad0:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   49ad4:	a8800003 	ldbu	r2,0(r21)
   49ad8:	10803fcc 	andi	r2,r2,255
   49adc:	1080201c 	xori	r2,r2,128
   49ae0:	10bfe004 	addi	r2,r2,-128
   49ae4:	1003f226 	beq	r2,zero,4aab0 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
   49ae8:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
   49aec:	ad400044 	addi	r21,r21,1

		flags = 0;
   49af0:	0027883a 	mov	r19,zero
		dprec = 0;
   49af4:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
   49af8:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
   49afc:	00bfffc4 	movi	r2,-1
   49b00:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
   49b04:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   49b08:	a805883a 	mov	r2,r21
   49b0c:	15400044 	addi	r21,r2,1
   49b10:	10800003 	ldbu	r2,0(r2)
   49b14:	14403fcc 	andi	r17,r2,255
   49b18:	8c40201c 	xori	r17,r17,128
   49b1c:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
   49b20:	88bff804 	addi	r2,r17,-32
   49b24:	10c01668 	cmpgeui	r3,r2,89
   49b28:	18028e1e 	bne	r3,zero,4a564 <___vfiprintf_internal_r+0xc80>
   49b2c:	100690ba 	slli	r3,r2,2
   49b30:	00800174 	movhi	r2,5
   49b34:	10a6d104 	addi	r2,r2,-25788
   49b38:	1885883a 	add	r2,r3,r2
   49b3c:	10800017 	ldw	r2,0(r2)
   49b40:	1000683a 	jmp	r2
   49b44:	00049ca8 	cmpgeui	zero,zero,4722
   49b48:	0004a564 	muli	zero,zero,4757
   49b4c:	0004a564 	muli	zero,zero,4757
   49b50:	00049cc8 	cmpgei	zero,zero,4723
   49b54:	0004a564 	muli	zero,zero,4757
   49b58:	0004a564 	muli	zero,zero,4757
   49b5c:	0004a564 	muli	zero,zero,4757
   49b60:	0004a564 	muli	zero,zero,4757
   49b64:	0004a564 	muli	zero,zero,4757
   49b68:	0004a564 	muli	zero,zero,4757
   49b6c:	00049cd0 	cmplti	zero,zero,4723
   49b70:	00049d04 	movi	zero,4724
   49b74:	0004a564 	muli	zero,zero,4757
   49b78:	00049cfc 	xorhi	zero,zero,4723
   49b7c:	00049d10 	cmplti	zero,zero,4724
   49b80:	0004a564 	muli	zero,zero,4757
   49b84:	00049db0 	cmpltui	zero,zero,4726
   49b88:	00049db8 	rdprs	zero,zero,4726
   49b8c:	00049db8 	rdprs	zero,zero,4726
   49b90:	00049db8 	rdprs	zero,zero,4726
   49b94:	00049db8 	rdprs	zero,zero,4726
   49b98:	00049db8 	rdprs	zero,zero,4726
   49b9c:	00049db8 	rdprs	zero,zero,4726
   49ba0:	00049db8 	rdprs	zero,zero,4726
   49ba4:	00049db8 	rdprs	zero,zero,4726
   49ba8:	00049db8 	rdprs	zero,zero,4726
   49bac:	0004a564 	muli	zero,zero,4757
   49bb0:	0004a564 	muli	zero,zero,4757
   49bb4:	0004a564 	muli	zero,zero,4757
   49bb8:	0004a564 	muli	zero,zero,4757
   49bbc:	0004a564 	muli	zero,zero,4757
   49bc0:	0004a564 	muli	zero,zero,4757
   49bc4:	0004a564 	muli	zero,zero,4757
   49bc8:	0004a564 	muli	zero,zero,4757
   49bcc:	0004a564 	muli	zero,zero,4757
   49bd0:	0004a564 	muli	zero,zero,4757
   49bd4:	00049e64 	muli	zero,zero,4729
   49bd8:	0004a564 	muli	zero,zero,4757
   49bdc:	0004a564 	muli	zero,zero,4757
   49be0:	0004a564 	muli	zero,zero,4757
   49be4:	0004a564 	muli	zero,zero,4757
   49be8:	0004a564 	muli	zero,zero,4757
   49bec:	0004a564 	muli	zero,zero,4757
   49bf0:	0004a564 	muli	zero,zero,4757
   49bf4:	0004a564 	muli	zero,zero,4757
   49bf8:	0004a564 	muli	zero,zero,4757
   49bfc:	0004a564 	muli	zero,zero,4757
   49c00:	0004a004 	movi	zero,4736
   49c04:	0004a564 	muli	zero,zero,4757
   49c08:	0004a564 	muli	zero,zero,4757
   49c0c:	0004a564 	muli	zero,zero,4757
   49c10:	0004a564 	muli	zero,zero,4757
   49c14:	0004a564 	muli	zero,zero,4757
   49c18:	0004a180 	call	4a18 <__alt_mem_MemoriaDados+0x4a18>
   49c1c:	0004a564 	muli	zero,zero,4757
   49c20:	0004a564 	muli	zero,zero,4757
   49c24:	0004a240 	call	4a24 <__alt_mem_MemoriaDados+0x4a24>
   49c28:	0004a564 	muli	zero,zero,4757
   49c2c:	0004a564 	muli	zero,zero,4757
   49c30:	0004a564 	muli	zero,zero,4757
   49c34:	0004a564 	muli	zero,zero,4757
   49c38:	0004a564 	muli	zero,zero,4757
   49c3c:	0004a564 	muli	zero,zero,4757
   49c40:	0004a564 	muli	zero,zero,4757
   49c44:	0004a564 	muli	zero,zero,4757
   49c48:	0004a564 	muli	zero,zero,4757
   49c4c:	0004a564 	muli	zero,zero,4757
   49c50:	00049e3c 	xorhi	zero,zero,4728
   49c54:	00049e68 	cmpgeui	zero,zero,4729
   49c58:	0004a564 	muli	zero,zero,4757
   49c5c:	0004a564 	muli	zero,zero,4757
   49c60:	0004a564 	muli	zero,zero,4757
   49c64:	00049e00 	call	49e0 <__alt_mem_MemoriaDados+0x49e0>
   49c68:	00049e68 	cmpgeui	zero,zero,4729
   49c6c:	0004a564 	muli	zero,zero,4757
   49c70:	0004a564 	muli	zero,zero,4757
   49c74:	00049e08 	cmpgei	zero,zero,4728
   49c78:	0004a564 	muli	zero,zero,4757
   49c7c:	00049f64 	muli	zero,zero,4733
   49c80:	0004a008 	cmpgei	zero,zero,4736
   49c84:	0004a0a8 	cmpgeui	zero,zero,4738
   49c88:	00049e34 	movhi	zero,4728
   49c8c:	0004a564 	muli	zero,zero,4757
   49c90:	0004a0f0 	cmpltui	zero,zero,4739
   49c94:	0004a564 	muli	zero,zero,4757
   49c98:	0004a184 	movi	zero,4742
   49c9c:	0004a564 	muli	zero,zero,4757
   49ca0:	0004a564 	muli	zero,zero,4757
   49ca4:	0004a250 	cmplti	zero,zero,4745
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   49ca8:	e0bfc703 	ldbu	r2,-228(fp)
   49cac:	10803fcc 	andi	r2,r2,255
   49cb0:	1080201c 	xori	r2,r2,128
   49cb4:	10bfe004 	addi	r2,r2,-128
   49cb8:	103f931e 	bne	r2,zero,49b08 <_gp+0xfffecdac>
				sign = ' ';
   49cbc:	00800804 	movi	r2,32
   49cc0:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   49cc4:	003f9006 	br	49b08 <_gp+0xfffecdac>
		case '#':
			flags |= ALT;
   49cc8:	9cc00054 	ori	r19,r19,1
			goto rflag;
   49ccc:	003f8e06 	br	49b08 <_gp+0xfffecdac>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   49cd0:	e0bfe917 	ldw	r2,-92(fp)
   49cd4:	10c00104 	addi	r3,r2,4
   49cd8:	e0ffe915 	stw	r3,-92(fp)
   49cdc:	10800017 	ldw	r2,0(r2)
   49ce0:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   49ce4:	e0bfba17 	ldw	r2,-280(fp)
   49ce8:	10000116 	blt	r2,zero,49cf0 <___vfiprintf_internal_r+0x40c>
				goto rflag;
   49cec:	003f8606 	br	49b08 <_gp+0xfffecdac>
			width = -width;
   49cf0:	e0bfba17 	ldw	r2,-280(fp)
   49cf4:	0085c83a 	sub	r2,zero,r2
   49cf8:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   49cfc:	9cc00114 	ori	r19,r19,4
			goto rflag;
   49d00:	003f8106 	br	49b08 <_gp+0xfffecdac>
		case '+':
			sign = '+';
   49d04:	00800ac4 	movi	r2,43
   49d08:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   49d0c:	003f7e06 	br	49b08 <_gp+0xfffecdac>
		case '.':
			if ((ch = *fmt++) == '*') {
   49d10:	a805883a 	mov	r2,r21
   49d14:	15400044 	addi	r21,r2,1
   49d18:	10800003 	ldbu	r2,0(r2)
   49d1c:	14403fcc 	andi	r17,r2,255
   49d20:	8c40201c 	xori	r17,r17,128
   49d24:	8c7fe004 	addi	r17,r17,-128
   49d28:	88800a98 	cmpnei	r2,r17,42
   49d2c:	10000a1e 	bne	r2,zero,49d58 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   49d30:	e0bfe917 	ldw	r2,-92(fp)
   49d34:	10c00104 	addi	r3,r2,4
   49d38:	e0ffe915 	stw	r3,-92(fp)
   49d3c:	10800017 	ldw	r2,0(r2)
   49d40:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   49d44:	e0bfbb17 	ldw	r2,-276(fp)
   49d48:	103f6f0e 	bge	r2,zero,49b08 <_gp+0xfffecdac>
					prec = -1;
   49d4c:	00bfffc4 	movi	r2,-1
   49d50:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
   49d54:	003f6c06 	br	49b08 <_gp+0xfffecdac>
			}
			n = 0;
   49d58:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   49d5c:	00000c06 	br	49d90 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
   49d60:	01400284 	movi	r5,10
   49d64:	8009883a 	mov	r4,r16
   49d68:	004d9680 	call	4d968 <__mulsi3>
   49d6c:	1007883a 	mov	r3,r2
   49d70:	88bff404 	addi	r2,r17,-48
   49d74:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   49d78:	a805883a 	mov	r2,r21
   49d7c:	15400044 	addi	r21,r2,1
   49d80:	10800003 	ldbu	r2,0(r2)
   49d84:	14403fcc 	andi	r17,r2,255
   49d88:	8c40201c 	xori	r17,r17,128
   49d8c:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   49d90:	88bff404 	addi	r2,r17,-48
   49d94:	108002b0 	cmpltui	r2,r2,10
   49d98:	103ff11e 	bne	r2,zero,49d60 <_gp+0xfffed004>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   49d9c:	8005883a 	mov	r2,r16
   49da0:	1000010e 	bge	r2,zero,49da8 <___vfiprintf_internal_r+0x4c4>
   49da4:	00bfffc4 	movi	r2,-1
   49da8:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
   49dac:	003f5c06 	br	49b20 <_gp+0xfffecdc4>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   49db0:	9cc02014 	ori	r19,r19,128
			goto rflag;
   49db4:	003f5406 	br	49b08 <_gp+0xfffecdac>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   49db8:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   49dbc:	01400284 	movi	r5,10
   49dc0:	8009883a 	mov	r4,r16
   49dc4:	004d9680 	call	4d968 <__mulsi3>
   49dc8:	1007883a 	mov	r3,r2
   49dcc:	88bff404 	addi	r2,r17,-48
   49dd0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   49dd4:	a805883a 	mov	r2,r21
   49dd8:	15400044 	addi	r21,r2,1
   49ddc:	10800003 	ldbu	r2,0(r2)
   49de0:	14403fcc 	andi	r17,r2,255
   49de4:	8c40201c 	xori	r17,r17,128
   49de8:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
   49dec:	88bff404 	addi	r2,r17,-48
   49df0:	108002b0 	cmpltui	r2,r2,10
   49df4:	103ff11e 	bne	r2,zero,49dbc <_gp+0xfffed060>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   49df8:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
   49dfc:	003f4806 	br	49b20 <_gp+0xfffecdc4>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   49e00:	9cc01014 	ori	r19,r19,64
			goto rflag;
   49e04:	003f4006 	br	49b08 <_gp+0xfffecdac>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   49e08:	a8800003 	ldbu	r2,0(r21)
   49e0c:	10803fcc 	andi	r2,r2,255
   49e10:	1080201c 	xori	r2,r2,128
   49e14:	10bfe004 	addi	r2,r2,-128
   49e18:	10801b18 	cmpnei	r2,r2,108
   49e1c:	1000031e 	bne	r2,zero,49e2c <___vfiprintf_internal_r+0x548>
				fmt++;
   49e20:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   49e24:	9cc00814 	ori	r19,r19,32
   49e28:	003f3706 	br	49b08 <_gp+0xfffecdac>
			} else
#endif
				flags |= LONGINT;
   49e2c:	9cc00414 	ori	r19,r19,16
			goto rflag;
   49e30:	003f3506 	br	49b08 <_gp+0xfffecdac>
		case 'q': /* extension */
			flags |= QUADINT;
   49e34:	9cc00814 	ori	r19,r19,32
			goto rflag;
   49e38:	003f3306 	br	49b08 <_gp+0xfffecdac>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   49e3c:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   49e40:	e0bfe917 	ldw	r2,-92(fp)
   49e44:	10c00104 	addi	r3,r2,4
   49e48:	e0ffe915 	stw	r3,-92(fp)
   49e4c:	10800017 	ldw	r2,0(r2)
   49e50:	a0800005 	stb	r2,0(r20)
				size = 1;
   49e54:	00800044 	movi	r2,1
   49e58:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
   49e5c:	e03fc705 	stb	zero,-228(fp)
			break;
   49e60:	0001c806 	br	4a584 <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
   49e64:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   49e68:	9880080c 	andi	r2,r19,32
   49e6c:	10000826 	beq	r2,zero,49e90 <___vfiprintf_internal_r+0x5ac>
   49e70:	e13fe917 	ldw	r4,-92(fp)
   49e74:	20800204 	addi	r2,r4,8
   49e78:	e0bfe915 	stw	r2,-92(fp)
   49e7c:	20800017 	ldw	r2,0(r4)
   49e80:	20c00117 	ldw	r3,4(r4)
   49e84:	e0bfea15 	stw	r2,-88(fp)
   49e88:	e0ffeb15 	stw	r3,-84(fp)
   49e8c:	00001e06 	br	49f08 <___vfiprintf_internal_r+0x624>
   49e90:	9880040c 	andi	r2,r19,16
   49e94:	10000826 	beq	r2,zero,49eb8 <___vfiprintf_internal_r+0x5d4>
   49e98:	e0bfe917 	ldw	r2,-92(fp)
   49e9c:	10c00104 	addi	r3,r2,4
   49ea0:	e0ffe915 	stw	r3,-92(fp)
   49ea4:	10800017 	ldw	r2,0(r2)
   49ea8:	e0bfea15 	stw	r2,-88(fp)
   49eac:	1005d7fa 	srai	r2,r2,31
   49eb0:	e0bfeb15 	stw	r2,-84(fp)
   49eb4:	00001406 	br	49f08 <___vfiprintf_internal_r+0x624>
   49eb8:	9880100c 	andi	r2,r19,64
   49ebc:	10000b26 	beq	r2,zero,49eec <___vfiprintf_internal_r+0x608>
   49ec0:	e0bfe917 	ldw	r2,-92(fp)
   49ec4:	10c00104 	addi	r3,r2,4
   49ec8:	e0ffe915 	stw	r3,-92(fp)
   49ecc:	10800017 	ldw	r2,0(r2)
   49ed0:	10bfffcc 	andi	r2,r2,65535
   49ed4:	10a0001c 	xori	r2,r2,32768
   49ed8:	10a00004 	addi	r2,r2,-32768
   49edc:	e0bfea15 	stw	r2,-88(fp)
   49ee0:	1005d7fa 	srai	r2,r2,31
   49ee4:	e0bfeb15 	stw	r2,-84(fp)
   49ee8:	00000706 	br	49f08 <___vfiprintf_internal_r+0x624>
   49eec:	e0bfe917 	ldw	r2,-92(fp)
   49ef0:	10c00104 	addi	r3,r2,4
   49ef4:	e0ffe915 	stw	r3,-92(fp)
   49ef8:	10800017 	ldw	r2,0(r2)
   49efc:	e0bfea15 	stw	r2,-88(fp)
   49f00:	1005d7fa 	srai	r2,r2,31
   49f04:	e0bfeb15 	stw	r2,-84(fp)
   49f08:	e0bfea17 	ldw	r2,-88(fp)
   49f0c:	e0bfbc15 	stw	r2,-272(fp)
   49f10:	e0ffeb17 	ldw	r3,-84(fp)
   49f14:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   49f18:	e0bfbc17 	ldw	r2,-272(fp)
   49f1c:	e0ffbd17 	ldw	r3,-268(fp)
   49f20:	18000d0e 	bge	r3,zero,49f58 <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   49f24:	000d883a 	mov	r6,zero
   49f28:	000f883a 	mov	r7,zero
   49f2c:	e13fbc17 	ldw	r4,-272(fp)
   49f30:	e17fbd17 	ldw	r5,-268(fp)
   49f34:	3105c83a 	sub	r2,r6,r4
   49f38:	3091803a 	cmpltu	r8,r6,r2
   49f3c:	3947c83a 	sub	r3,r7,r5
   49f40:	1a09c83a 	sub	r4,r3,r8
   49f44:	2007883a 	mov	r3,r4
   49f48:	e0bfbc15 	stw	r2,-272(fp)
   49f4c:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
   49f50:	00800b44 	movi	r2,45
   49f54:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
   49f58:	00800044 	movi	r2,1
   49f5c:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
   49f60:	0000f806 	br	4a344 <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   49f64:	9880080c 	andi	r2,r19,32
   49f68:	10000d26 	beq	r2,zero,49fa0 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   49f6c:	e0bfe917 	ldw	r2,-92(fp)
   49f70:	10c00104 	addi	r3,r2,4
   49f74:	e0ffe915 	stw	r3,-92(fp)
   49f78:	10800017 	ldw	r2,0(r2)
   49f7c:	e0ffb917 	ldw	r3,-284(fp)
   49f80:	e0fff015 	stw	r3,-64(fp)
   49f84:	1807d7fa 	srai	r3,r3,31
   49f88:	e0fff115 	stw	r3,-60(fp)
   49f8c:	e0fff017 	ldw	r3,-64(fp)
   49f90:	10c00015 	stw	r3,0(r2)
   49f94:	e0fff117 	ldw	r3,-60(fp)
   49f98:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   49f9c:	0002c306 	br	4aaac <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   49fa0:	9880040c 	andi	r2,r19,16
   49fa4:	10000726 	beq	r2,zero,49fc4 <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   49fa8:	e0bfe917 	ldw	r2,-92(fp)
   49fac:	10c00104 	addi	r3,r2,4
   49fb0:	e0ffe915 	stw	r3,-92(fp)
   49fb4:	10800017 	ldw	r2,0(r2)
   49fb8:	e0ffb917 	ldw	r3,-284(fp)
   49fbc:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   49fc0:	0002ba06 	br	4aaac <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   49fc4:	9880100c 	andi	r2,r19,64
   49fc8:	10000726 	beq	r2,zero,49fe8 <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   49fcc:	e0bfe917 	ldw	r2,-92(fp)
   49fd0:	10c00104 	addi	r3,r2,4
   49fd4:	e0ffe915 	stw	r3,-92(fp)
   49fd8:	10800017 	ldw	r2,0(r2)
   49fdc:	e0ffb917 	ldw	r3,-284(fp)
   49fe0:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   49fe4:	0002b106 	br	4aaac <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   49fe8:	e0bfe917 	ldw	r2,-92(fp)
   49fec:	10c00104 	addi	r3,r2,4
   49ff0:	e0ffe915 	stw	r3,-92(fp)
   49ff4:	10800017 	ldw	r2,0(r2)
   49ff8:	e0ffb917 	ldw	r3,-284(fp)
   49ffc:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   4a000:	0002aa06 	br	4aaac <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
   4a004:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   4a008:	9880080c 	andi	r2,r19,32
   4a00c:	10000626 	beq	r2,zero,4a028 <___vfiprintf_internal_r+0x744>
   4a010:	e0bfe917 	ldw	r2,-92(fp)
   4a014:	10c00204 	addi	r3,r2,8
   4a018:	e0ffe915 	stw	r3,-92(fp)
   4a01c:	15800017 	ldw	r22,0(r2)
   4a020:	15c00117 	ldw	r23,4(r2)
   4a024:	00001c06 	br	4a098 <___vfiprintf_internal_r+0x7b4>
   4a028:	9880040c 	andi	r2,r19,16
   4a02c:	10000726 	beq	r2,zero,4a04c <___vfiprintf_internal_r+0x768>
   4a030:	e0bfe917 	ldw	r2,-92(fp)
   4a034:	10c00104 	addi	r3,r2,4
   4a038:	e0ffe915 	stw	r3,-92(fp)
   4a03c:	10800017 	ldw	r2,0(r2)
   4a040:	102d883a 	mov	r22,r2
   4a044:	002f883a 	mov	r23,zero
   4a048:	00001306 	br	4a098 <___vfiprintf_internal_r+0x7b4>
   4a04c:	9880100c 	andi	r2,r19,64
   4a050:	10000b26 	beq	r2,zero,4a080 <___vfiprintf_internal_r+0x79c>
   4a054:	e0bfe917 	ldw	r2,-92(fp)
   4a058:	10c00104 	addi	r3,r2,4
   4a05c:	e0ffe915 	stw	r3,-92(fp)
   4a060:	10800017 	ldw	r2,0(r2)
   4a064:	e0bff215 	stw	r2,-56(fp)
   4a068:	e03ff315 	stw	zero,-52(fp)
   4a06c:	e0bff217 	ldw	r2,-56(fp)
   4a070:	15bfffcc 	andi	r22,r2,65535
   4a074:	e0fff317 	ldw	r3,-52(fp)
   4a078:	182e703a 	and	r23,r3,zero
   4a07c:	00000606 	br	4a098 <___vfiprintf_internal_r+0x7b4>
   4a080:	e0bfe917 	ldw	r2,-92(fp)
   4a084:	10c00104 	addi	r3,r2,4
   4a088:	e0ffe915 	stw	r3,-92(fp)
   4a08c:	10800017 	ldw	r2,0(r2)
   4a090:	102d883a 	mov	r22,r2
   4a094:	002f883a 	mov	r23,zero
   4a098:	e5bfbc15 	stw	r22,-272(fp)
   4a09c:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
   4a0a0:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   4a0a4:	0000a606 	br	4a340 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   4a0a8:	e0bfe917 	ldw	r2,-92(fp)
   4a0ac:	10c00104 	addi	r3,r2,4
   4a0b0:	e0ffe915 	stw	r3,-92(fp)
   4a0b4:	10800017 	ldw	r2,0(r2)
   4a0b8:	e0bfbc15 	stw	r2,-272(fp)
   4a0bc:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
   4a0c0:	00800084 	movi	r2,2
   4a0c4:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
   4a0c8:	00800174 	movhi	r2,5
   4a0cc:	108b1804 	addi	r2,r2,11360
   4a0d0:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
   4a0d4:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   4a0d8:	00800c04 	movi	r2,48
   4a0dc:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   4a0e0:	04401e04 	movi	r17,120
   4a0e4:	00801e04 	movi	r2,120
   4a0e8:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   4a0ec:	00009406 	br	4a340 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   4a0f0:	e0bfe917 	ldw	r2,-92(fp)
   4a0f4:	10c00104 	addi	r3,r2,4
   4a0f8:	e0ffe915 	stw	r3,-92(fp)
   4a0fc:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   4a100:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   4a104:	a000081e 	bne	r20,zero,4a128 <___vfiprintf_internal_r+0x844>
				cp = "(null)";
   4a108:	05000174 	movhi	r20,5
   4a10c:	a50b1d04 	addi	r20,r20,11380
				size = ((unsigned) prec > 6U) ? 6 : prec;
   4a110:	e0bfbb17 	ldw	r2,-276(fp)
   4a114:	10c001f0 	cmpltui	r3,r2,7
   4a118:	1800011e 	bne	r3,zero,4a120 <___vfiprintf_internal_r+0x83c>
   4a11c:	00800184 	movi	r2,6
   4a120:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   4a124:	00011706 	br	4a584 <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   4a128:	e0bfbb17 	ldw	r2,-276(fp)
   4a12c:	10001016 	blt	r2,zero,4a170 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   4a130:	e0bfbb17 	ldw	r2,-276(fp)
   4a134:	100d883a 	mov	r6,r2
   4a138:	000b883a 	mov	r5,zero
   4a13c:	a009883a 	mov	r4,r20
   4a140:	00470a40 	call	470a4 <memchr>
   4a144:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
   4a148:	e0bfc617 	ldw	r2,-232(fp)
   4a14c:	10000526 	beq	r2,zero,4a164 <___vfiprintf_internal_r+0x880>
					size = p - cp;
   4a150:	e0bfc617 	ldw	r2,-232(fp)
   4a154:	a007883a 	mov	r3,r20
   4a158:	10c5c83a 	sub	r2,r2,r3
   4a15c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   4a160:	00010806 	br	4a584 <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   4a164:	e0bfbb17 	ldw	r2,-276(fp)
   4a168:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
   4a16c:	00010506 	br	4a584 <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   4a170:	a009883a 	mov	r4,r20
   4a174:	00495740 	call	49574 <strlen>
   4a178:	e0bfc115 	stw	r2,-252(fp)

			break;
   4a17c:	00010106 	br	4a584 <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
   4a180:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   4a184:	9880080c 	andi	r2,r19,32
   4a188:	10000826 	beq	r2,zero,4a1ac <___vfiprintf_internal_r+0x8c8>
   4a18c:	e0bfe917 	ldw	r2,-92(fp)
   4a190:	10c00204 	addi	r3,r2,8
   4a194:	e0ffe915 	stw	r3,-92(fp)
   4a198:	10c00017 	ldw	r3,0(r2)
   4a19c:	e0ffec15 	stw	r3,-80(fp)
   4a1a0:	10c00117 	ldw	r3,4(r2)
   4a1a4:	e0ffed15 	stw	r3,-76(fp)
   4a1a8:	00001e06 	br	4a224 <___vfiprintf_internal_r+0x940>
   4a1ac:	9880040c 	andi	r2,r19,16
   4a1b0:	10000726 	beq	r2,zero,4a1d0 <___vfiprintf_internal_r+0x8ec>
   4a1b4:	e0bfe917 	ldw	r2,-92(fp)
   4a1b8:	10c00104 	addi	r3,r2,4
   4a1bc:	e0ffe915 	stw	r3,-92(fp)
   4a1c0:	10800017 	ldw	r2,0(r2)
   4a1c4:	e0bfec15 	stw	r2,-80(fp)
   4a1c8:	e03fed15 	stw	zero,-76(fp)
   4a1cc:	00001506 	br	4a224 <___vfiprintf_internal_r+0x940>
   4a1d0:	9880100c 	andi	r2,r19,64
   4a1d4:	10000d26 	beq	r2,zero,4a20c <___vfiprintf_internal_r+0x928>
   4a1d8:	e0bfe917 	ldw	r2,-92(fp)
   4a1dc:	10c00104 	addi	r3,r2,4
   4a1e0:	e0ffe915 	stw	r3,-92(fp)
   4a1e4:	10800017 	ldw	r2,0(r2)
   4a1e8:	e0bff415 	stw	r2,-48(fp)
   4a1ec:	e03ff515 	stw	zero,-44(fp)
   4a1f0:	e0bff417 	ldw	r2,-48(fp)
   4a1f4:	10bfffcc 	andi	r2,r2,65535
   4a1f8:	e0bfec15 	stw	r2,-80(fp)
   4a1fc:	e0fff517 	ldw	r3,-44(fp)
   4a200:	1806703a 	and	r3,r3,zero
   4a204:	e0ffed15 	stw	r3,-76(fp)
   4a208:	00000606 	br	4a224 <___vfiprintf_internal_r+0x940>
   4a20c:	e0bfe917 	ldw	r2,-92(fp)
   4a210:	10c00104 	addi	r3,r2,4
   4a214:	e0ffe915 	stw	r3,-92(fp)
   4a218:	10800017 	ldw	r2,0(r2)
   4a21c:	e0bfec15 	stw	r2,-80(fp)
   4a220:	e03fed15 	stw	zero,-76(fp)
   4a224:	e0bfec17 	ldw	r2,-80(fp)
   4a228:	e0bfbc15 	stw	r2,-272(fp)
   4a22c:	e0ffed17 	ldw	r3,-76(fp)
   4a230:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
   4a234:	00800044 	movi	r2,1
   4a238:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
   4a23c:	00004006 	br	4a340 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
   4a240:	00800174 	movhi	r2,5
   4a244:	108b1f04 	addi	r2,r2,11388
   4a248:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
   4a24c:	00000306 	br	4a25c <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
   4a250:	00800174 	movhi	r2,5
   4a254:	108b1804 	addi	r2,r2,11360
   4a258:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
   4a25c:	9880080c 	andi	r2,r19,32
   4a260:	10000826 	beq	r2,zero,4a284 <___vfiprintf_internal_r+0x9a0>
   4a264:	e0bfe917 	ldw	r2,-92(fp)
   4a268:	10c00204 	addi	r3,r2,8
   4a26c:	e0ffe915 	stw	r3,-92(fp)
   4a270:	10c00017 	ldw	r3,0(r2)
   4a274:	e0ffee15 	stw	r3,-72(fp)
   4a278:	10c00117 	ldw	r3,4(r2)
   4a27c:	e0ffef15 	stw	r3,-68(fp)
   4a280:	00001e06 	br	4a2fc <___vfiprintf_internal_r+0xa18>
   4a284:	9880040c 	andi	r2,r19,16
   4a288:	10000726 	beq	r2,zero,4a2a8 <___vfiprintf_internal_r+0x9c4>
   4a28c:	e0bfe917 	ldw	r2,-92(fp)
   4a290:	10c00104 	addi	r3,r2,4
   4a294:	e0ffe915 	stw	r3,-92(fp)
   4a298:	10800017 	ldw	r2,0(r2)
   4a29c:	e0bfee15 	stw	r2,-72(fp)
   4a2a0:	e03fef15 	stw	zero,-68(fp)
   4a2a4:	00001506 	br	4a2fc <___vfiprintf_internal_r+0xa18>
   4a2a8:	9880100c 	andi	r2,r19,64
   4a2ac:	10000d26 	beq	r2,zero,4a2e4 <___vfiprintf_internal_r+0xa00>
   4a2b0:	e0bfe917 	ldw	r2,-92(fp)
   4a2b4:	10c00104 	addi	r3,r2,4
   4a2b8:	e0ffe915 	stw	r3,-92(fp)
   4a2bc:	10800017 	ldw	r2,0(r2)
   4a2c0:	e0bff615 	stw	r2,-40(fp)
   4a2c4:	e03ff715 	stw	zero,-36(fp)
   4a2c8:	e0bff617 	ldw	r2,-40(fp)
   4a2cc:	10bfffcc 	andi	r2,r2,65535
   4a2d0:	e0bfee15 	stw	r2,-72(fp)
   4a2d4:	e0fff717 	ldw	r3,-36(fp)
   4a2d8:	1806703a 	and	r3,r3,zero
   4a2dc:	e0ffef15 	stw	r3,-68(fp)
   4a2e0:	00000606 	br	4a2fc <___vfiprintf_internal_r+0xa18>
   4a2e4:	e0bfe917 	ldw	r2,-92(fp)
   4a2e8:	10c00104 	addi	r3,r2,4
   4a2ec:	e0ffe915 	stw	r3,-92(fp)
   4a2f0:	10800017 	ldw	r2,0(r2)
   4a2f4:	e0bfee15 	stw	r2,-72(fp)
   4a2f8:	e03fef15 	stw	zero,-68(fp)
   4a2fc:	e0bfee17 	ldw	r2,-72(fp)
   4a300:	e0bfbc15 	stw	r2,-272(fp)
   4a304:	e0ffef17 	ldw	r3,-68(fp)
   4a308:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
   4a30c:	00800084 	movi	r2,2
   4a310:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   4a314:	9880004c 	andi	r2,r19,1
   4a318:	10000926 	beq	r2,zero,4a340 <___vfiprintf_internal_r+0xa5c>
   4a31c:	e0bfbc17 	ldw	r2,-272(fp)
   4a320:	e0ffbd17 	ldw	r3,-268(fp)
   4a324:	10c4b03a 	or	r2,r2,r3
   4a328:	10000526 	beq	r2,zero,4a340 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
   4a32c:	00800c04 	movi	r2,48
   4a330:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   4a334:	8805883a 	mov	r2,r17
   4a338:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   4a33c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   4a340:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   4a344:	e0bfbb17 	ldw	r2,-276(fp)
   4a348:	e0bfbf15 	stw	r2,-260(fp)
   4a34c:	e0bfbf17 	ldw	r2,-260(fp)
   4a350:	10000216 	blt	r2,zero,4a35c <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
   4a354:	00bfdfc4 	movi	r2,-129
   4a358:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   4a35c:	e53fdb04 	addi	r20,fp,-148
   4a360:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
   4a364:	e0bfbc17 	ldw	r2,-272(fp)
   4a368:	e0ffbd17 	ldw	r3,-268(fp)
   4a36c:	10c4b03a 	or	r2,r2,r3
   4a370:	1000021e 	bne	r2,zero,4a37c <___vfiprintf_internal_r+0xa98>
   4a374:	e0bfbb17 	ldw	r2,-276(fp)
   4a378:	10006c26 	beq	r2,zero,4a52c <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   4a37c:	e0bfbe03 	ldbu	r2,-264(fp)
   4a380:	10c00060 	cmpeqi	r3,r2,1
   4a384:	1800211e 	bne	r3,zero,4a40c <___vfiprintf_internal_r+0xb28>
   4a388:	10c000a0 	cmpeqi	r3,r2,2
   4a38c:	1800491e 	bne	r3,zero,4a4b4 <___vfiprintf_internal_r+0xbd0>
   4a390:	10005d1e 	bne	r2,zero,4a508 <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   4a394:	a53fffc4 	addi	r20,r20,-1
   4a398:	e0bfbc17 	ldw	r2,-272(fp)
   4a39c:	108001cc 	andi	r2,r2,7
   4a3a0:	10800c04 	addi	r2,r2,48
   4a3a4:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
   4a3a8:	e0bfbd17 	ldw	r2,-268(fp)
   4a3ac:	1004977a 	slli	r2,r2,29
   4a3b0:	e0ffbc17 	ldw	r3,-272(fp)
   4a3b4:	1806d0fa 	srli	r3,r3,3
   4a3b8:	1884b03a 	or	r2,r3,r2
   4a3bc:	e0bfbc15 	stw	r2,-272(fp)
   4a3c0:	e0bfbd17 	ldw	r2,-268(fp)
   4a3c4:	1004d0fa 	srli	r2,r2,3
   4a3c8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   4a3cc:	e0bfbc17 	ldw	r2,-272(fp)
   4a3d0:	e0ffbd17 	ldw	r3,-268(fp)
   4a3d4:	10c4b03a 	or	r2,r2,r3
   4a3d8:	103fee1e 	bne	r2,zero,4a394 <_gp+0xfffed638>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   4a3dc:	9880004c 	andi	r2,r19,1
   4a3e0:	10005026 	beq	r2,zero,4a524 <___vfiprintf_internal_r+0xc40>
   4a3e4:	a0800003 	ldbu	r2,0(r20)
   4a3e8:	10803fcc 	andi	r2,r2,255
   4a3ec:	1080201c 	xori	r2,r2,128
   4a3f0:	10bfe004 	addi	r2,r2,-128
   4a3f4:	10800c20 	cmpeqi	r2,r2,48
   4a3f8:	10004a1e 	bne	r2,zero,4a524 <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
   4a3fc:	a53fffc4 	addi	r20,r20,-1
   4a400:	00800c04 	movi	r2,48
   4a404:	a0800005 	stb	r2,0(r20)
					break;
   4a408:	00004606 	br	4a524 <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   4a40c:	e0bfbd17 	ldw	r2,-268(fp)
   4a410:	10000a1e 	bne	r2,zero,4a43c <___vfiprintf_internal_r+0xb58>
   4a414:	e0bfbd17 	ldw	r2,-268(fp)
   4a418:	1000031e 	bne	r2,zero,4a428 <___vfiprintf_internal_r+0xb44>
   4a41c:	e0bfbc17 	ldw	r2,-272(fp)
   4a420:	108002a8 	cmpgeui	r2,r2,10
   4a424:	1000051e 	bne	r2,zero,4a43c <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
   4a428:	a53fffc4 	addi	r20,r20,-1
   4a42c:	e0bfbc17 	ldw	r2,-272(fp)
   4a430:	10800c04 	addi	r2,r2,48
   4a434:	a0800005 	stb	r2,0(r20)
						break;
   4a438:	00003b06 	br	4a528 <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   4a43c:	a53fffc4 	addi	r20,r20,-1
   4a440:	e0bfbc17 	ldw	r2,-272(fp)
   4a444:	e0ffbd17 	ldw	r3,-268(fp)
   4a448:	01800284 	movi	r6,10
   4a44c:	000f883a 	mov	r7,zero
   4a450:	1009883a 	mov	r4,r2
   4a454:	180b883a 	mov	r5,r3
   4a458:	004d1f00 	call	4d1f0 <__umoddi3>
   4a45c:	1009883a 	mov	r4,r2
   4a460:	180b883a 	mov	r5,r3
   4a464:	2005883a 	mov	r2,r4
   4a468:	2807883a 	mov	r3,r5
   4a46c:	10800c04 	addi	r2,r2,48
   4a470:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   4a474:	e0bfbc17 	ldw	r2,-272(fp)
   4a478:	e0ffbd17 	ldw	r3,-268(fp)
   4a47c:	01800284 	movi	r6,10
   4a480:	000f883a 	mov	r7,zero
   4a484:	1009883a 	mov	r4,r2
   4a488:	180b883a 	mov	r5,r3
   4a48c:	004cbf40 	call	4cbf4 <__udivdi3>
   4a490:	1009883a 	mov	r4,r2
   4a494:	180b883a 	mov	r5,r3
   4a498:	e13fbc15 	stw	r4,-272(fp)
   4a49c:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
   4a4a0:	e0bfbc17 	ldw	r2,-272(fp)
   4a4a4:	e0ffbd17 	ldw	r3,-268(fp)
   4a4a8:	10c4b03a 	or	r2,r2,r3
   4a4ac:	103fe31e 	bne	r2,zero,4a43c <_gp+0xfffed6e0>
					break;
   4a4b0:	00001d06 	br	4a528 <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   4a4b4:	a53fffc4 	addi	r20,r20,-1
   4a4b8:	e0bfbc17 	ldw	r2,-272(fp)
   4a4bc:	108003cc 	andi	r2,r2,15
   4a4c0:	e0ffc217 	ldw	r3,-248(fp)
   4a4c4:	1885883a 	add	r2,r3,r2
   4a4c8:	10800003 	ldbu	r2,0(r2)
   4a4cc:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
   4a4d0:	e0bfbd17 	ldw	r2,-268(fp)
   4a4d4:	1004973a 	slli	r2,r2,28
   4a4d8:	e0ffbc17 	ldw	r3,-272(fp)
   4a4dc:	1806d13a 	srli	r3,r3,4
   4a4e0:	1884b03a 	or	r2,r3,r2
   4a4e4:	e0bfbc15 	stw	r2,-272(fp)
   4a4e8:	e0bfbd17 	ldw	r2,-268(fp)
   4a4ec:	1004d13a 	srli	r2,r2,4
   4a4f0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   4a4f4:	e0bfbc17 	ldw	r2,-272(fp)
   4a4f8:	e0ffbd17 	ldw	r3,-268(fp)
   4a4fc:	10c4b03a 	or	r2,r2,r3
   4a500:	103fec1e 	bne	r2,zero,4a4b4 <_gp+0xfffed758>
					break;
   4a504:	00000806 	br	4a528 <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
   4a508:	05000174 	movhi	r20,5
   4a50c:	a50b2404 	addi	r20,r20,11408
					size = strlen (cp);
   4a510:	a009883a 	mov	r4,r20
   4a514:	00495740 	call	49574 <strlen>
   4a518:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
   4a51c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   4a520:	00001806 	br	4a584 <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   4a524:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   4a528:	00000706 	br	4a548 <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   4a52c:	e0bfbe03 	ldbu	r2,-264(fp)
   4a530:	1000051e 	bne	r2,zero,4a548 <___vfiprintf_internal_r+0xc64>
   4a534:	9880004c 	andi	r2,r19,1
   4a538:	10000326 	beq	r2,zero,4a548 <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
   4a53c:	a53fffc4 	addi	r20,r20,-1
   4a540:	00800c04 	movi	r2,48
   4a544:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
   4a548:	e0bfdb04 	addi	r2,fp,-148
   4a54c:	10800a04 	addi	r2,r2,40
   4a550:	1007883a 	mov	r3,r2
   4a554:	a005883a 	mov	r2,r20
   4a558:	1885c83a 	sub	r2,r3,r2
   4a55c:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
   4a560:	00000806 	br	4a584 <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   4a564:	88015426 	beq	r17,zero,4aab8 <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   4a568:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
   4a56c:	8805883a 	mov	r2,r17
   4a570:	a0800005 	stb	r2,0(r20)
			size = 1;
   4a574:	00800044 	movi	r2,1
   4a578:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
   4a57c:	e03fc705 	stb	zero,-228(fp)
			break;
   4a580:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   4a584:	e0ffbf17 	ldw	r3,-260(fp)
   4a588:	e0bfc117 	ldw	r2,-252(fp)
   4a58c:	10c0010e 	bge	r2,r3,4a594 <___vfiprintf_internal_r+0xcb0>
   4a590:	1805883a 	mov	r2,r3
   4a594:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
   4a598:	e0bfc703 	ldbu	r2,-228(fp)
   4a59c:	10803fcc 	andi	r2,r2,255
   4a5a0:	1080201c 	xori	r2,r2,128
   4a5a4:	10bfe004 	addi	r2,r2,-128
   4a5a8:	10000326 	beq	r2,zero,4a5b8 <___vfiprintf_internal_r+0xcd4>
			realsz++;
   4a5ac:	e0bfc017 	ldw	r2,-256(fp)
   4a5b0:	10800044 	addi	r2,r2,1
   4a5b4:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
   4a5b8:	9880008c 	andi	r2,r19,2
   4a5bc:	10000326 	beq	r2,zero,4a5cc <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
   4a5c0:	e0bfc017 	ldw	r2,-256(fp)
   4a5c4:	10800084 	addi	r2,r2,2
   4a5c8:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   4a5cc:	9880210c 	andi	r2,r19,132
   4a5d0:	1000351e 	bne	r2,zero,4a6a8 <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
   4a5d4:	e0ffba17 	ldw	r3,-280(fp)
   4a5d8:	e0bfc017 	ldw	r2,-256(fp)
   4a5dc:	18a1c83a 	sub	r16,r3,r2
   4a5e0:	0400310e 	bge	zero,r16,4a6a8 <___vfiprintf_internal_r+0xdc4>
   4a5e4:	00001706 	br	4a644 <___vfiprintf_internal_r+0xd60>
   4a5e8:	00800174 	movhi	r2,5
   4a5ec:	108b2a84 	addi	r2,r2,11434
   4a5f0:	90800015 	stw	r2,0(r18)
   4a5f4:	00800404 	movi	r2,16
   4a5f8:	90800115 	stw	r2,4(r18)
   4a5fc:	e0bfca17 	ldw	r2,-216(fp)
   4a600:	10800404 	addi	r2,r2,16
   4a604:	e0bfca15 	stw	r2,-216(fp)
   4a608:	94800204 	addi	r18,r18,8
   4a60c:	e0bfc917 	ldw	r2,-220(fp)
   4a610:	10800044 	addi	r2,r2,1
   4a614:	e0bfc915 	stw	r2,-220(fp)
   4a618:	e0bfc917 	ldw	r2,-220(fp)
   4a61c:	10800210 	cmplti	r2,r2,8
   4a620:	1000071e 	bne	r2,zero,4a640 <___vfiprintf_internal_r+0xd5c>
   4a624:	e0bfc804 	addi	r2,fp,-224
   4a628:	100d883a 	mov	r6,r2
   4a62c:	e17fe717 	ldw	r5,-100(fp)
   4a630:	e13fe617 	ldw	r4,-104(fp)
   4a634:	00496680 	call	49668 <__sprint_r>
   4a638:	10012d1e 	bne	r2,zero,4aaf0 <___vfiprintf_internal_r+0x120c>
   4a63c:	e4bfcb04 	addi	r18,fp,-212
   4a640:	843ffc04 	addi	r16,r16,-16
   4a644:	80800448 	cmpgei	r2,r16,17
   4a648:	103fe71e 	bne	r2,zero,4a5e8 <_gp+0xfffed88c>
   4a64c:	00800174 	movhi	r2,5
   4a650:	108b2a84 	addi	r2,r2,11434
   4a654:	90800015 	stw	r2,0(r18)
   4a658:	8005883a 	mov	r2,r16
   4a65c:	90800115 	stw	r2,4(r18)
   4a660:	e0bfca17 	ldw	r2,-216(fp)
   4a664:	8007883a 	mov	r3,r16
   4a668:	10c5883a 	add	r2,r2,r3
   4a66c:	e0bfca15 	stw	r2,-216(fp)
   4a670:	94800204 	addi	r18,r18,8
   4a674:	e0bfc917 	ldw	r2,-220(fp)
   4a678:	10800044 	addi	r2,r2,1
   4a67c:	e0bfc915 	stw	r2,-220(fp)
   4a680:	e0bfc917 	ldw	r2,-220(fp)
   4a684:	10800210 	cmplti	r2,r2,8
   4a688:	1000071e 	bne	r2,zero,4a6a8 <___vfiprintf_internal_r+0xdc4>
   4a68c:	e0bfc804 	addi	r2,fp,-224
   4a690:	100d883a 	mov	r6,r2
   4a694:	e17fe717 	ldw	r5,-100(fp)
   4a698:	e13fe617 	ldw	r4,-104(fp)
   4a69c:	00496680 	call	49668 <__sprint_r>
   4a6a0:	1001151e 	bne	r2,zero,4aaf8 <___vfiprintf_internal_r+0x1214>
   4a6a4:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
   4a6a8:	e0bfc703 	ldbu	r2,-228(fp)
   4a6ac:	10803fcc 	andi	r2,r2,255
   4a6b0:	1080201c 	xori	r2,r2,128
   4a6b4:	10bfe004 	addi	r2,r2,-128
   4a6b8:	10001526 	beq	r2,zero,4a710 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
   4a6bc:	e0bfc704 	addi	r2,fp,-228
   4a6c0:	90800015 	stw	r2,0(r18)
   4a6c4:	00800044 	movi	r2,1
   4a6c8:	90800115 	stw	r2,4(r18)
   4a6cc:	e0bfca17 	ldw	r2,-216(fp)
   4a6d0:	10800044 	addi	r2,r2,1
   4a6d4:	e0bfca15 	stw	r2,-216(fp)
   4a6d8:	94800204 	addi	r18,r18,8
   4a6dc:	e0bfc917 	ldw	r2,-220(fp)
   4a6e0:	10800044 	addi	r2,r2,1
   4a6e4:	e0bfc915 	stw	r2,-220(fp)
   4a6e8:	e0bfc917 	ldw	r2,-220(fp)
   4a6ec:	10800210 	cmplti	r2,r2,8
   4a6f0:	1000071e 	bne	r2,zero,4a710 <___vfiprintf_internal_r+0xe2c>
   4a6f4:	e0bfc804 	addi	r2,fp,-224
   4a6f8:	100d883a 	mov	r6,r2
   4a6fc:	e17fe717 	ldw	r5,-100(fp)
   4a700:	e13fe617 	ldw	r4,-104(fp)
   4a704:	00496680 	call	49668 <__sprint_r>
   4a708:	1000fd1e 	bne	r2,zero,4ab00 <___vfiprintf_internal_r+0x121c>
   4a70c:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
   4a710:	9880008c 	andi	r2,r19,2
   4a714:	10001526 	beq	r2,zero,4a76c <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
   4a718:	e0bfe504 	addi	r2,fp,-108
   4a71c:	90800015 	stw	r2,0(r18)
   4a720:	00800084 	movi	r2,2
   4a724:	90800115 	stw	r2,4(r18)
   4a728:	e0bfca17 	ldw	r2,-216(fp)
   4a72c:	10800084 	addi	r2,r2,2
   4a730:	e0bfca15 	stw	r2,-216(fp)
   4a734:	94800204 	addi	r18,r18,8
   4a738:	e0bfc917 	ldw	r2,-220(fp)
   4a73c:	10800044 	addi	r2,r2,1
   4a740:	e0bfc915 	stw	r2,-220(fp)
   4a744:	e0bfc917 	ldw	r2,-220(fp)
   4a748:	10800210 	cmplti	r2,r2,8
   4a74c:	1000071e 	bne	r2,zero,4a76c <___vfiprintf_internal_r+0xe88>
   4a750:	e0bfc804 	addi	r2,fp,-224
   4a754:	100d883a 	mov	r6,r2
   4a758:	e17fe717 	ldw	r5,-100(fp)
   4a75c:	e13fe617 	ldw	r4,-104(fp)
   4a760:	00496680 	call	49668 <__sprint_r>
   4a764:	1000e81e 	bne	r2,zero,4ab08 <___vfiprintf_internal_r+0x1224>
   4a768:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   4a76c:	9880210c 	andi	r2,r19,132
   4a770:	10802018 	cmpnei	r2,r2,128
   4a774:	1000351e 	bne	r2,zero,4a84c <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
   4a778:	e0ffba17 	ldw	r3,-280(fp)
   4a77c:	e0bfc017 	ldw	r2,-256(fp)
   4a780:	18a1c83a 	sub	r16,r3,r2
   4a784:	0400310e 	bge	zero,r16,4a84c <___vfiprintf_internal_r+0xf68>
   4a788:	00001706 	br	4a7e8 <___vfiprintf_internal_r+0xf04>
   4a78c:	00800174 	movhi	r2,5
   4a790:	108b2e84 	addi	r2,r2,11450
   4a794:	90800015 	stw	r2,0(r18)
   4a798:	00800404 	movi	r2,16
   4a79c:	90800115 	stw	r2,4(r18)
   4a7a0:	e0bfca17 	ldw	r2,-216(fp)
   4a7a4:	10800404 	addi	r2,r2,16
   4a7a8:	e0bfca15 	stw	r2,-216(fp)
   4a7ac:	94800204 	addi	r18,r18,8
   4a7b0:	e0bfc917 	ldw	r2,-220(fp)
   4a7b4:	10800044 	addi	r2,r2,1
   4a7b8:	e0bfc915 	stw	r2,-220(fp)
   4a7bc:	e0bfc917 	ldw	r2,-220(fp)
   4a7c0:	10800210 	cmplti	r2,r2,8
   4a7c4:	1000071e 	bne	r2,zero,4a7e4 <___vfiprintf_internal_r+0xf00>
   4a7c8:	e0bfc804 	addi	r2,fp,-224
   4a7cc:	100d883a 	mov	r6,r2
   4a7d0:	e17fe717 	ldw	r5,-100(fp)
   4a7d4:	e13fe617 	ldw	r4,-104(fp)
   4a7d8:	00496680 	call	49668 <__sprint_r>
   4a7dc:	1000cc1e 	bne	r2,zero,4ab10 <___vfiprintf_internal_r+0x122c>
   4a7e0:	e4bfcb04 	addi	r18,fp,-212
   4a7e4:	843ffc04 	addi	r16,r16,-16
   4a7e8:	80800448 	cmpgei	r2,r16,17
   4a7ec:	103fe71e 	bne	r2,zero,4a78c <_gp+0xfffeda30>
   4a7f0:	00800174 	movhi	r2,5
   4a7f4:	108b2e84 	addi	r2,r2,11450
   4a7f8:	90800015 	stw	r2,0(r18)
   4a7fc:	8005883a 	mov	r2,r16
   4a800:	90800115 	stw	r2,4(r18)
   4a804:	e0bfca17 	ldw	r2,-216(fp)
   4a808:	8007883a 	mov	r3,r16
   4a80c:	10c5883a 	add	r2,r2,r3
   4a810:	e0bfca15 	stw	r2,-216(fp)
   4a814:	94800204 	addi	r18,r18,8
   4a818:	e0bfc917 	ldw	r2,-220(fp)
   4a81c:	10800044 	addi	r2,r2,1
   4a820:	e0bfc915 	stw	r2,-220(fp)
   4a824:	e0bfc917 	ldw	r2,-220(fp)
   4a828:	10800210 	cmplti	r2,r2,8
   4a82c:	1000071e 	bne	r2,zero,4a84c <___vfiprintf_internal_r+0xf68>
   4a830:	e0bfc804 	addi	r2,fp,-224
   4a834:	100d883a 	mov	r6,r2
   4a838:	e17fe717 	ldw	r5,-100(fp)
   4a83c:	e13fe617 	ldw	r4,-104(fp)
   4a840:	00496680 	call	49668 <__sprint_r>
   4a844:	1000b41e 	bne	r2,zero,4ab18 <___vfiprintf_internal_r+0x1234>
   4a848:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   4a84c:	e0ffbf17 	ldw	r3,-260(fp)
   4a850:	e0bfc117 	ldw	r2,-252(fp)
   4a854:	18a1c83a 	sub	r16,r3,r2
   4a858:	0400310e 	bge	zero,r16,4a920 <___vfiprintf_internal_r+0x103c>
   4a85c:	00001706 	br	4a8bc <___vfiprintf_internal_r+0xfd8>
   4a860:	00800174 	movhi	r2,5
   4a864:	108b2e84 	addi	r2,r2,11450
   4a868:	90800015 	stw	r2,0(r18)
   4a86c:	00800404 	movi	r2,16
   4a870:	90800115 	stw	r2,4(r18)
   4a874:	e0bfca17 	ldw	r2,-216(fp)
   4a878:	10800404 	addi	r2,r2,16
   4a87c:	e0bfca15 	stw	r2,-216(fp)
   4a880:	94800204 	addi	r18,r18,8
   4a884:	e0bfc917 	ldw	r2,-220(fp)
   4a888:	10800044 	addi	r2,r2,1
   4a88c:	e0bfc915 	stw	r2,-220(fp)
   4a890:	e0bfc917 	ldw	r2,-220(fp)
   4a894:	10800210 	cmplti	r2,r2,8
   4a898:	1000071e 	bne	r2,zero,4a8b8 <___vfiprintf_internal_r+0xfd4>
   4a89c:	e0bfc804 	addi	r2,fp,-224
   4a8a0:	100d883a 	mov	r6,r2
   4a8a4:	e17fe717 	ldw	r5,-100(fp)
   4a8a8:	e13fe617 	ldw	r4,-104(fp)
   4a8ac:	00496680 	call	49668 <__sprint_r>
   4a8b0:	10009b1e 	bne	r2,zero,4ab20 <___vfiprintf_internal_r+0x123c>
   4a8b4:	e4bfcb04 	addi	r18,fp,-212
   4a8b8:	843ffc04 	addi	r16,r16,-16
   4a8bc:	80800448 	cmpgei	r2,r16,17
   4a8c0:	103fe71e 	bne	r2,zero,4a860 <_gp+0xfffedb04>
   4a8c4:	00800174 	movhi	r2,5
   4a8c8:	108b2e84 	addi	r2,r2,11450
   4a8cc:	90800015 	stw	r2,0(r18)
   4a8d0:	8005883a 	mov	r2,r16
   4a8d4:	90800115 	stw	r2,4(r18)
   4a8d8:	e0bfca17 	ldw	r2,-216(fp)
   4a8dc:	8007883a 	mov	r3,r16
   4a8e0:	10c5883a 	add	r2,r2,r3
   4a8e4:	e0bfca15 	stw	r2,-216(fp)
   4a8e8:	94800204 	addi	r18,r18,8
   4a8ec:	e0bfc917 	ldw	r2,-220(fp)
   4a8f0:	10800044 	addi	r2,r2,1
   4a8f4:	e0bfc915 	stw	r2,-220(fp)
   4a8f8:	e0bfc917 	ldw	r2,-220(fp)
   4a8fc:	10800210 	cmplti	r2,r2,8
   4a900:	1000071e 	bne	r2,zero,4a920 <___vfiprintf_internal_r+0x103c>
   4a904:	e0bfc804 	addi	r2,fp,-224
   4a908:	100d883a 	mov	r6,r2
   4a90c:	e17fe717 	ldw	r5,-100(fp)
   4a910:	e13fe617 	ldw	r4,-104(fp)
   4a914:	00496680 	call	49668 <__sprint_r>
   4a918:	1000831e 	bne	r2,zero,4ab28 <___vfiprintf_internal_r+0x1244>
   4a91c:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   4a920:	95000015 	stw	r20,0(r18)
   4a924:	e0bfc117 	ldw	r2,-252(fp)
   4a928:	90800115 	stw	r2,4(r18)
   4a92c:	e0ffca17 	ldw	r3,-216(fp)
   4a930:	e0bfc117 	ldw	r2,-252(fp)
   4a934:	1885883a 	add	r2,r3,r2
   4a938:	e0bfca15 	stw	r2,-216(fp)
   4a93c:	94800204 	addi	r18,r18,8
   4a940:	e0bfc917 	ldw	r2,-220(fp)
   4a944:	10800044 	addi	r2,r2,1
   4a948:	e0bfc915 	stw	r2,-220(fp)
   4a94c:	e0bfc917 	ldw	r2,-220(fp)
   4a950:	10800210 	cmplti	r2,r2,8
   4a954:	1000071e 	bne	r2,zero,4a974 <___vfiprintf_internal_r+0x1090>
   4a958:	e0bfc804 	addi	r2,fp,-224
   4a95c:	100d883a 	mov	r6,r2
   4a960:	e17fe717 	ldw	r5,-100(fp)
   4a964:	e13fe617 	ldw	r4,-104(fp)
   4a968:	00496680 	call	49668 <__sprint_r>
   4a96c:	1000701e 	bne	r2,zero,4ab30 <___vfiprintf_internal_r+0x124c>
   4a970:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   4a974:	9880010c 	andi	r2,r19,4
   4a978:	10003526 	beq	r2,zero,4aa50 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
   4a97c:	e0ffba17 	ldw	r3,-280(fp)
   4a980:	e0bfc017 	ldw	r2,-256(fp)
   4a984:	18a1c83a 	sub	r16,r3,r2
   4a988:	0400310e 	bge	zero,r16,4aa50 <___vfiprintf_internal_r+0x116c>
   4a98c:	00001706 	br	4a9ec <___vfiprintf_internal_r+0x1108>
   4a990:	00800174 	movhi	r2,5
   4a994:	108b2a84 	addi	r2,r2,11434
   4a998:	90800015 	stw	r2,0(r18)
   4a99c:	00800404 	movi	r2,16
   4a9a0:	90800115 	stw	r2,4(r18)
   4a9a4:	e0bfca17 	ldw	r2,-216(fp)
   4a9a8:	10800404 	addi	r2,r2,16
   4a9ac:	e0bfca15 	stw	r2,-216(fp)
   4a9b0:	94800204 	addi	r18,r18,8
   4a9b4:	e0bfc917 	ldw	r2,-220(fp)
   4a9b8:	10800044 	addi	r2,r2,1
   4a9bc:	e0bfc915 	stw	r2,-220(fp)
   4a9c0:	e0bfc917 	ldw	r2,-220(fp)
   4a9c4:	10800210 	cmplti	r2,r2,8
   4a9c8:	1000071e 	bne	r2,zero,4a9e8 <___vfiprintf_internal_r+0x1104>
   4a9cc:	e0bfc804 	addi	r2,fp,-224
   4a9d0:	100d883a 	mov	r6,r2
   4a9d4:	e17fe717 	ldw	r5,-100(fp)
   4a9d8:	e13fe617 	ldw	r4,-104(fp)
   4a9dc:	00496680 	call	49668 <__sprint_r>
   4a9e0:	1000551e 	bne	r2,zero,4ab38 <___vfiprintf_internal_r+0x1254>
   4a9e4:	e4bfcb04 	addi	r18,fp,-212
   4a9e8:	843ffc04 	addi	r16,r16,-16
   4a9ec:	80800448 	cmpgei	r2,r16,17
   4a9f0:	103fe71e 	bne	r2,zero,4a990 <_gp+0xfffedc34>
   4a9f4:	00800174 	movhi	r2,5
   4a9f8:	108b2a84 	addi	r2,r2,11434
   4a9fc:	90800015 	stw	r2,0(r18)
   4aa00:	8005883a 	mov	r2,r16
   4aa04:	90800115 	stw	r2,4(r18)
   4aa08:	e0bfca17 	ldw	r2,-216(fp)
   4aa0c:	8007883a 	mov	r3,r16
   4aa10:	10c5883a 	add	r2,r2,r3
   4aa14:	e0bfca15 	stw	r2,-216(fp)
   4aa18:	94800204 	addi	r18,r18,8
   4aa1c:	e0bfc917 	ldw	r2,-220(fp)
   4aa20:	10800044 	addi	r2,r2,1
   4aa24:	e0bfc915 	stw	r2,-220(fp)
   4aa28:	e0bfc917 	ldw	r2,-220(fp)
   4aa2c:	10800210 	cmplti	r2,r2,8
   4aa30:	1000071e 	bne	r2,zero,4aa50 <___vfiprintf_internal_r+0x116c>
   4aa34:	e0bfc804 	addi	r2,fp,-224
   4aa38:	100d883a 	mov	r6,r2
   4aa3c:	e17fe717 	ldw	r5,-100(fp)
   4aa40:	e13fe617 	ldw	r4,-104(fp)
   4aa44:	00496680 	call	49668 <__sprint_r>
   4aa48:	10003d1e 	bne	r2,zero,4ab40 <___vfiprintf_internal_r+0x125c>
   4aa4c:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   4aa50:	e0ffba17 	ldw	r3,-280(fp)
   4aa54:	e0bfc017 	ldw	r2,-256(fp)
   4aa58:	10c0010e 	bge	r2,r3,4aa60 <___vfiprintf_internal_r+0x117c>
   4aa5c:	1805883a 	mov	r2,r3
   4aa60:	e0ffb917 	ldw	r3,-284(fp)
   4aa64:	1885883a 	add	r2,r3,r2
   4aa68:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
   4aa6c:	e0bfca17 	ldw	r2,-216(fp)
   4aa70:	10000626 	beq	r2,zero,4aa8c <___vfiprintf_internal_r+0x11a8>
   4aa74:	e0bfc804 	addi	r2,fp,-224
   4aa78:	100d883a 	mov	r6,r2
   4aa7c:	e17fe717 	ldw	r5,-100(fp)
   4aa80:	e13fe617 	ldw	r4,-104(fp)
   4aa84:	00496680 	call	49668 <__sprint_r>
   4aa88:	10002f1e 	bne	r2,zero,4ab48 <___vfiprintf_internal_r+0x1264>
   4aa8c:	e03fc915 	stw	zero,-220(fp)
   4aa90:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
   4aa94:	e0bfc317 	ldw	r2,-244(fp)
   4aa98:	103be426 	beq	r2,zero,49a2c <_gp+0xfffeccd0>
			_free_r (data, malloc_buf);
   4aa9c:	e17fc317 	ldw	r5,-244(fp)
   4aaa0:	e13fe617 	ldw	r4,-104(fp)
   4aaa4:	00454c00 	call	454c0 <_free_r>
			malloc_buf = NULL;
   4aaa8:	e03fc315 	stw	zero,-244(fp)
		}
	}
   4aaac:	003bdf06 	br	49a2c <_gp+0xfffeccd0>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   4aab0:	0001883a 	nop
   4aab4:	00000106 	br	4aabc <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   4aab8:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   4aabc:	e0bfca17 	ldw	r2,-216(fp)
   4aac0:	10000626 	beq	r2,zero,4aadc <___vfiprintf_internal_r+0x11f8>
   4aac4:	e0bfc804 	addi	r2,fp,-224
   4aac8:	100d883a 	mov	r6,r2
   4aacc:	e17fe717 	ldw	r5,-100(fp)
   4aad0:	e13fe617 	ldw	r4,-104(fp)
   4aad4:	00496680 	call	49668 <__sprint_r>
   4aad8:	10001d1e 	bne	r2,zero,4ab50 <___vfiprintf_internal_r+0x126c>
   4aadc:	e03fc915 	stw	zero,-220(fp)
   4aae0:	e4bfcb04 	addi	r18,fp,-212
   4aae4:	00001b06 	br	4ab54 <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   4aae8:	0001883a 	nop
   4aaec:	00001906 	br	4ab54 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   4aaf0:	0001883a 	nop
   4aaf4:	00001706 	br	4ab54 <___vfiprintf_internal_r+0x1270>
   4aaf8:	0001883a 	nop
   4aafc:	00001506 	br	4ab54 <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   4ab00:	0001883a 	nop
   4ab04:	00001306 	br	4ab54 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   4ab08:	0001883a 	nop
   4ab0c:	00001106 	br	4ab54 <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   4ab10:	0001883a 	nop
   4ab14:	00000f06 	br	4ab54 <___vfiprintf_internal_r+0x1270>
   4ab18:	0001883a 	nop
   4ab1c:	00000d06 	br	4ab54 <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   4ab20:	0001883a 	nop
   4ab24:	00000b06 	br	4ab54 <___vfiprintf_internal_r+0x1270>
   4ab28:	0001883a 	nop
   4ab2c:	00000906 	br	4ab54 <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   4ab30:	0001883a 	nop
   4ab34:	00000706 	br	4ab54 <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   4ab38:	0001883a 	nop
   4ab3c:	00000506 	br	4ab54 <___vfiprintf_internal_r+0x1270>
   4ab40:	0001883a 	nop
   4ab44:	00000306 	br	4ab54 <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   4ab48:	0001883a 	nop
   4ab4c:	00000106 	br	4ab54 <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   4ab50:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   4ab54:	e0bfc317 	ldw	r2,-244(fp)
   4ab58:	10000326 	beq	r2,zero,4ab68 <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
   4ab5c:	e17fc317 	ldw	r5,-244(fp)
   4ab60:	e13fe617 	ldw	r4,-104(fp)
   4ab64:	00454c00 	call	454c0 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   4ab68:	e0bfe717 	ldw	r2,-100(fp)
   4ab6c:	1080030b 	ldhu	r2,12(r2)
   4ab70:	10bfffcc 	andi	r2,r2,65535
   4ab74:	1080100c 	andi	r2,r2,64
   4ab78:	1000021e 	bne	r2,zero,4ab84 <___vfiprintf_internal_r+0x12a0>
   4ab7c:	e0bfb917 	ldw	r2,-284(fp)
   4ab80:	00000206 	br	4ab8c <___vfiprintf_internal_r+0x12a8>
   4ab84:	00bfffc4 	movi	r2,-1
   4ab88:	0001883a 	nop
	/* NOTREACHED */
}
   4ab8c:	e6fff804 	addi	sp,fp,-32
   4ab90:	dfc00917 	ldw	ra,36(sp)
   4ab94:	df000817 	ldw	fp,32(sp)
   4ab98:	ddc00717 	ldw	r23,28(sp)
   4ab9c:	dd800617 	ldw	r22,24(sp)
   4aba0:	dd400517 	ldw	r21,20(sp)
   4aba4:	dd000417 	ldw	r20,16(sp)
   4aba8:	dcc00317 	ldw	r19,12(sp)
   4abac:	dc800217 	ldw	r18,8(sp)
   4abb0:	dc400117 	ldw	r17,4(sp)
   4abb4:	dc000017 	ldw	r16,0(sp)
   4abb8:	dec00a04 	addi	sp,sp,40
   4abbc:	f800283a 	ret

0004abc0 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
   4abc0:	defff904 	addi	sp,sp,-28
   4abc4:	dfc00615 	stw	ra,24(sp)
   4abc8:	df000515 	stw	fp,20(sp)
   4abcc:	df000504 	addi	fp,sp,20
   4abd0:	e13ffc15 	stw	r4,-16(fp)
   4abd4:	e17ffd15 	stw	r5,-12(fp)
   4abd8:	e1bffe15 	stw	r6,-8(fp)
   4abdc:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   4abe0:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
   4abe4:	e1bfff17 	ldw	r6,-4(fp)
   4abe8:	e17ffe17 	ldw	r5,-8(fp)
   4abec:	e13ffd17 	ldw	r4,-12(fp)
   4abf0:	0050ac80 	call	50ac8 <write>
   4abf4:	e0bffb15 	stw	r2,-20(fp)
   4abf8:	e0bffb17 	ldw	r2,-20(fp)
   4abfc:	10bfffd8 	cmpnei	r2,r2,-1
   4ac00:	1000051e 	bne	r2,zero,4ac18 <_write_r+0x58>
   4ac04:	d0a80a17 	ldw	r2,-24536(gp)
   4ac08:	10000326 	beq	r2,zero,4ac18 <_write_r+0x58>
    ptr->_errno = errno;
   4ac0c:	d0e80a17 	ldw	r3,-24536(gp)
   4ac10:	e0bffc17 	ldw	r2,-16(fp)
   4ac14:	10c00015 	stw	r3,0(r2)
  return ret;
   4ac18:	e0bffb17 	ldw	r2,-20(fp)
}
   4ac1c:	e037883a 	mov	sp,fp
   4ac20:	dfc00117 	ldw	ra,4(sp)
   4ac24:	df000017 	ldw	fp,0(sp)
   4ac28:	dec00204 	addi	sp,sp,8
   4ac2c:	f800283a 	ret

0004ac30 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   4ac30:	defffb04 	addi	sp,sp,-20
   4ac34:	dfc00415 	stw	ra,16(sp)
   4ac38:	df000315 	stw	fp,12(sp)
   4ac3c:	df000304 	addi	fp,sp,12
   4ac40:	e13ffe15 	stw	r4,-8(fp)
   4ac44:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   4ac48:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
   4ac4c:	e13fff17 	ldw	r4,-4(fp)
   4ac50:	00502700 	call	50270 <close>
   4ac54:	e0bffd15 	stw	r2,-12(fp)
   4ac58:	e0bffd17 	ldw	r2,-12(fp)
   4ac5c:	10bfffd8 	cmpnei	r2,r2,-1
   4ac60:	1000051e 	bne	r2,zero,4ac78 <_close_r+0x48>
   4ac64:	d0a80a17 	ldw	r2,-24536(gp)
   4ac68:	10000326 	beq	r2,zero,4ac78 <_close_r+0x48>
    ptr->_errno = errno;
   4ac6c:	d0e80a17 	ldw	r3,-24536(gp)
   4ac70:	e0bffe17 	ldw	r2,-8(fp)
   4ac74:	10c00015 	stw	r3,0(r2)
  return ret;
   4ac78:	e0bffd17 	ldw	r2,-12(fp)
}
   4ac7c:	e037883a 	mov	sp,fp
   4ac80:	dfc00117 	ldw	ra,4(sp)
   4ac84:	df000017 	ldw	fp,0(sp)
   4ac88:	dec00204 	addi	sp,sp,8
   4ac8c:	f800283a 	ret

0004ac90 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
   4ac90:	defff504 	addi	sp,sp,-44
   4ac94:	dfc00a15 	stw	ra,40(sp)
   4ac98:	df000915 	stw	fp,36(sp)
   4ac9c:	df000904 	addi	fp,sp,36
   4aca0:	e13ffd15 	stw	r4,-12(fp)
   4aca4:	e17ffe15 	stw	r5,-8(fp)
   4aca8:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
   4acac:	e17fff17 	ldw	r5,-4(fp)
   4acb0:	e13ffe17 	ldw	r4,-8(fp)
   4acb4:	004d9680 	call	4d968 <__mulsi3>
   4acb8:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
   4acbc:	e17ff817 	ldw	r5,-32(fp)
   4acc0:	e13ffd17 	ldw	r4,-12(fp)
   4acc4:	00465280 	call	46528 <_malloc_r>
   4acc8:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
   4accc:	e0bff917 	ldw	r2,-28(fp)
   4acd0:	1000021e 	bne	r2,zero,4acdc <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
   4acd4:	0005883a 	mov	r2,zero
   4acd8:	00004106 	br	4ade0 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
   4acdc:	e0bff917 	ldw	r2,-28(fp)
   4ace0:	10bffe04 	addi	r2,r2,-8
   4ace4:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
   4ace8:	e0bffa17 	ldw	r2,-24(fp)
   4acec:	10c00117 	ldw	r3,4(r2)
   4acf0:	00bfff04 	movi	r2,-4
   4acf4:	1884703a 	and	r2,r3,r2
   4acf8:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
   4acfc:	e0bffb17 	ldw	r2,-20(fp)
   4ad00:	10bfff04 	addi	r2,r2,-4
   4ad04:	e0bffc15 	stw	r2,-16(fp)
   4ad08:	e0bffc17 	ldw	r2,-16(fp)
   4ad0c:	10800968 	cmpgeui	r2,r2,37
   4ad10:	10002e1e 	bne	r2,zero,4adcc <_calloc_r+0x13c>
   4ad14:	e0bff917 	ldw	r2,-28(fp)
   4ad18:	e0bff715 	stw	r2,-36(fp)
   4ad1c:	e0bffc17 	ldw	r2,-16(fp)
   4ad20:	10800530 	cmpltui	r2,r2,20
   4ad24:	10001e1e 	bne	r2,zero,4ada0 <_calloc_r+0x110>
   4ad28:	e0bff717 	ldw	r2,-36(fp)
   4ad2c:	10c00104 	addi	r3,r2,4
   4ad30:	e0fff715 	stw	r3,-36(fp)
   4ad34:	10000015 	stw	zero,0(r2)
   4ad38:	e0bff717 	ldw	r2,-36(fp)
   4ad3c:	10c00104 	addi	r3,r2,4
   4ad40:	e0fff715 	stw	r3,-36(fp)
   4ad44:	10000015 	stw	zero,0(r2)
   4ad48:	e0bffc17 	ldw	r2,-16(fp)
   4ad4c:	10800730 	cmpltui	r2,r2,28
   4ad50:	1000131e 	bne	r2,zero,4ada0 <_calloc_r+0x110>
   4ad54:	e0bff717 	ldw	r2,-36(fp)
   4ad58:	10c00104 	addi	r3,r2,4
   4ad5c:	e0fff715 	stw	r3,-36(fp)
   4ad60:	10000015 	stw	zero,0(r2)
   4ad64:	e0bff717 	ldw	r2,-36(fp)
   4ad68:	10c00104 	addi	r3,r2,4
   4ad6c:	e0fff715 	stw	r3,-36(fp)
   4ad70:	10000015 	stw	zero,0(r2)
   4ad74:	e0bffc17 	ldw	r2,-16(fp)
   4ad78:	10800930 	cmpltui	r2,r2,36
   4ad7c:	1000081e 	bne	r2,zero,4ada0 <_calloc_r+0x110>
   4ad80:	e0bff717 	ldw	r2,-36(fp)
   4ad84:	10c00104 	addi	r3,r2,4
   4ad88:	e0fff715 	stw	r3,-36(fp)
   4ad8c:	10000015 	stw	zero,0(r2)
   4ad90:	e0bff717 	ldw	r2,-36(fp)
   4ad94:	10c00104 	addi	r3,r2,4
   4ad98:	e0fff715 	stw	r3,-36(fp)
   4ad9c:	10000015 	stw	zero,0(r2)
   4ada0:	e0bff717 	ldw	r2,-36(fp)
   4ada4:	10c00104 	addi	r3,r2,4
   4ada8:	e0fff715 	stw	r3,-36(fp)
   4adac:	10000015 	stw	zero,0(r2)
   4adb0:	e0bff717 	ldw	r2,-36(fp)
   4adb4:	10c00104 	addi	r3,r2,4
   4adb8:	e0fff715 	stw	r3,-36(fp)
   4adbc:	10000015 	stw	zero,0(r2)
   4adc0:	e0bff717 	ldw	r2,-36(fp)
   4adc4:	10000015 	stw	zero,0(r2)
   4adc8:	00000406 	br	4addc <_calloc_r+0x14c>
   4adcc:	e1bffc17 	ldw	r6,-16(fp)
   4add0:	000b883a 	mov	r5,zero
   4add4:	e13ff917 	ldw	r4,-28(fp)
   4add8:	00473e80 	call	473e8 <memset>
    return mem;
   4addc:	e0bff917 	ldw	r2,-28(fp)
  }
}
   4ade0:	e037883a 	mov	sp,fp
   4ade4:	dfc00117 	ldw	ra,4(sp)
   4ade8:	df000017 	ldw	fp,0(sp)
   4adec:	dec00204 	addi	sp,sp,8
   4adf0:	f800283a 	ret

0004adf4 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
   4adf4:	defffa04 	addi	sp,sp,-24
   4adf8:	dfc00515 	stw	ra,20(sp)
   4adfc:	df000415 	stw	fp,16(sp)
   4ae00:	dc000315 	stw	r16,12(sp)
   4ae04:	df000404 	addi	fp,sp,16
   4ae08:	e13ffe15 	stw	r4,-8(fp)
   4ae0c:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
   4ae10:	8000021e 	bne	r16,zero,4ae1c <_fclose_r+0x28>
    return (0);			/* on NULL */
   4ae14:	0005883a 	mov	r2,zero
   4ae18:	00003b06 	br	4af08 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
   4ae1c:	e0bffe17 	ldw	r2,-8(fp)
   4ae20:	e0bffd15 	stw	r2,-12(fp)
   4ae24:	e0bffd17 	ldw	r2,-12(fp)
   4ae28:	10000526 	beq	r2,zero,4ae40 <_fclose_r+0x4c>
   4ae2c:	e0bffd17 	ldw	r2,-12(fp)
   4ae30:	10800e17 	ldw	r2,56(r2)
   4ae34:	1000021e 	bne	r2,zero,4ae40 <_fclose_r+0x4c>
   4ae38:	e13ffd17 	ldw	r4,-12(fp)
   4ae3c:	00452a00 	call	452a0 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   4ae40:	8080030b 	ldhu	r2,12(r16)
   4ae44:	10bfffcc 	andi	r2,r2,65535
   4ae48:	10a0001c 	xori	r2,r2,32768
   4ae4c:	10a00004 	addi	r2,r2,-32768
   4ae50:	1000021e 	bne	r2,zero,4ae5c <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
   4ae54:	0005883a 	mov	r2,zero
   4ae58:	00002b06 	br	4af08 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   4ae5c:	800b883a 	mov	r5,r16
   4ae60:	e13ffe17 	ldw	r4,-8(fp)
   4ae64:	0044b040 	call	44b04 <__sflush_r>
   4ae68:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   4ae6c:	80800b17 	ldw	r2,44(r16)
   4ae70:	10000826 	beq	r2,zero,4ae94 <_fclose_r+0xa0>
   4ae74:	80800b17 	ldw	r2,44(r16)
   4ae78:	80c00717 	ldw	r3,28(r16)
   4ae7c:	180b883a 	mov	r5,r3
   4ae80:	e13ffe17 	ldw	r4,-8(fp)
   4ae84:	103ee83a 	callr	r2
   4ae88:	1000020e 	bge	r2,zero,4ae94 <_fclose_r+0xa0>
    r = EOF;
   4ae8c:	00bfffc4 	movi	r2,-1
   4ae90:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
   4ae94:	8080030b 	ldhu	r2,12(r16)
   4ae98:	10bfffcc 	andi	r2,r2,65535
   4ae9c:	1080200c 	andi	r2,r2,128
   4aea0:	10000426 	beq	r2,zero,4aeb4 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
   4aea4:	80800417 	ldw	r2,16(r16)
   4aea8:	100b883a 	mov	r5,r2
   4aeac:	e13ffe17 	ldw	r4,-8(fp)
   4aeb0:	00454c00 	call	454c0 <_free_r>
  if (HASUB (fp))
   4aeb4:	80800c17 	ldw	r2,48(r16)
   4aeb8:	10000826 	beq	r2,zero,4aedc <_fclose_r+0xe8>
    FREEUB (rptr, fp);
   4aebc:	80c00c17 	ldw	r3,48(r16)
   4aec0:	80801004 	addi	r2,r16,64
   4aec4:	18800426 	beq	r3,r2,4aed8 <_fclose_r+0xe4>
   4aec8:	80800c17 	ldw	r2,48(r16)
   4aecc:	100b883a 	mov	r5,r2
   4aed0:	e13ffe17 	ldw	r4,-8(fp)
   4aed4:	00454c00 	call	454c0 <_free_r>
   4aed8:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
   4aedc:	80801117 	ldw	r2,68(r16)
   4aee0:	10000526 	beq	r2,zero,4aef8 <_fclose_r+0x104>
    FREELB (rptr, fp);
   4aee4:	80801117 	ldw	r2,68(r16)
   4aee8:	100b883a 	mov	r5,r2
   4aeec:	e13ffe17 	ldw	r4,-8(fp)
   4aef0:	00454c00 	call	454c0 <_free_r>
   4aef4:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
   4aef8:	00453780 	call	45378 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
   4aefc:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
   4af00:	00453980 	call	45398 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
   4af04:	e0bffc17 	ldw	r2,-16(fp)
}
   4af08:	e6ffff04 	addi	sp,fp,-4
   4af0c:	dfc00217 	ldw	ra,8(sp)
   4af10:	df000117 	ldw	fp,4(sp)
   4af14:	dc000017 	ldw	r16,0(sp)
   4af18:	dec00304 	addi	sp,sp,12
   4af1c:	f800283a 	ret

0004af20 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
   4af20:	defffe04 	addi	sp,sp,-8
   4af24:	dfc00115 	stw	ra,4(sp)
   4af28:	df000015 	stw	fp,0(sp)
   4af2c:	d839883a 	mov	fp,sp
   4af30:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
   4af34:	d0a00417 	ldw	r2,-32752(gp)
   4af38:	180b883a 	mov	r5,r3
   4af3c:	1009883a 	mov	r4,r2
   4af40:	004adf40 	call	4adf4 <_fclose_r>
}
   4af44:	e037883a 	mov	sp,fp
   4af48:	dfc00117 	ldw	ra,4(sp)
   4af4c:	df000017 	ldw	fp,0(sp)
   4af50:	dec00204 	addi	sp,sp,8
   4af54:	f800283a 	ret

0004af58 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   4af58:	defff804 	addi	sp,sp,-32
   4af5c:	dfc00715 	stw	ra,28(sp)
   4af60:	df000615 	stw	fp,24(sp)
   4af64:	df000604 	addi	fp,sp,24
   4af68:	e13ffd15 	stw	r4,-12(fp)
   4af6c:	e17ffe15 	stw	r5,-8(fp)
   4af70:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
   4af74:	0045e4c0 	call	45e4c <__locale_mb_cur_max>
   4af78:	10800058 	cmpnei	r2,r2,1
   4af7c:	10000a1e 	bne	r2,zero,4afa8 <__fputwc+0x50>
   4af80:	e0bffe17 	ldw	r2,-8(fp)
   4af84:	0080080e 	bge	zero,r2,4afa8 <__fputwc+0x50>
   4af88:	e0bffe17 	ldw	r2,-8(fp)
   4af8c:	10804008 	cmpgei	r2,r2,256
   4af90:	1000051e 	bne	r2,zero,4afa8 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
   4af94:	e0bffe17 	ldw	r2,-8(fp)
   4af98:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
   4af9c:	00800044 	movi	r2,1
   4afa0:	e0bffb15 	stw	r2,-20(fp)
   4afa4:	00001406 	br	4aff8 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
   4afa8:	e0bfff17 	ldw	r2,-4(fp)
   4afac:	10c01704 	addi	r3,r2,92
   4afb0:	e0bffc04 	addi	r2,fp,-16
   4afb4:	180f883a 	mov	r7,r3
   4afb8:	e1bffe17 	ldw	r6,-8(fp)
   4afbc:	100b883a 	mov	r5,r2
   4afc0:	e13ffd17 	ldw	r4,-12(fp)
   4afc4:	004c96c0 	call	4c96c <_wcrtomb_r>
   4afc8:	e0bffb15 	stw	r2,-20(fp)
   4afcc:	e0bffb17 	ldw	r2,-20(fp)
   4afd0:	10bfffd8 	cmpnei	r2,r2,-1
   4afd4:	1000081e 	bne	r2,zero,4aff8 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
   4afd8:	e0bfff17 	ldw	r2,-4(fp)
   4afdc:	1080030b 	ldhu	r2,12(r2)
   4afe0:	10801014 	ori	r2,r2,64
   4afe4:	1007883a 	mov	r3,r2
   4afe8:	e0bfff17 	ldw	r2,-4(fp)
   4afec:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
   4aff0:	00bfffc4 	movi	r2,-1
   4aff4:	00005006 	br	4b138 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
   4aff8:	e03ffa15 	stw	zero,-24(fp)
   4affc:	00004a06 	br	4b128 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
   4b000:	e0bfff17 	ldw	r2,-4(fp)
   4b004:	10800217 	ldw	r2,8(r2)
   4b008:	10ffffc4 	addi	r3,r2,-1
   4b00c:	e0bfff17 	ldw	r2,-4(fp)
   4b010:	10c00215 	stw	r3,8(r2)
   4b014:	e0bfff17 	ldw	r2,-4(fp)
   4b018:	10800217 	ldw	r2,8(r2)
   4b01c:	10002c0e 	bge	r2,zero,4b0d0 <__fputwc+0x178>
   4b020:	e0bfff17 	ldw	r2,-4(fp)
   4b024:	10c00217 	ldw	r3,8(r2)
   4b028:	e0bfff17 	ldw	r2,-4(fp)
   4b02c:	10800617 	ldw	r2,24(r2)
   4b030:	18801c16 	blt	r3,r2,4b0a4 <__fputwc+0x14c>
   4b034:	e0bfff17 	ldw	r2,-4(fp)
   4b038:	10800017 	ldw	r2,0(r2)
   4b03c:	e13ffc04 	addi	r4,fp,-16
   4b040:	e0fffa17 	ldw	r3,-24(fp)
   4b044:	20c7883a 	add	r3,r4,r3
   4b048:	18c00003 	ldbu	r3,0(r3)
   4b04c:	10c00005 	stb	r3,0(r2)
   4b050:	e0bfff17 	ldw	r2,-4(fp)
   4b054:	10800017 	ldw	r2,0(r2)
   4b058:	10800003 	ldbu	r2,0(r2)
   4b05c:	10803fcc 	andi	r2,r2,255
   4b060:	108002a0 	cmpeqi	r2,r2,10
   4b064:	1000091e 	bne	r2,zero,4b08c <__fputwc+0x134>
   4b068:	e0bfff17 	ldw	r2,-4(fp)
   4b06c:	10800017 	ldw	r2,0(r2)
   4b070:	11000044 	addi	r4,r2,1
   4b074:	e0ffff17 	ldw	r3,-4(fp)
   4b078:	19000015 	stw	r4,0(r3)
   4b07c:	10800003 	ldbu	r2,0(r2)
   4b080:	10803fcc 	andi	r2,r2,255
   4b084:	10bfffe0 	cmpeqi	r2,r2,-1
   4b088:	00002006 	br	4b10c <__fputwc+0x1b4>
   4b08c:	e1bfff17 	ldw	r6,-4(fp)
   4b090:	01400284 	movi	r5,10
   4b094:	e13ffd17 	ldw	r4,-12(fp)
   4b098:	004c7c40 	call	4c7c4 <__swbuf_r>
   4b09c:	10bfffe0 	cmpeqi	r2,r2,-1
   4b0a0:	00001a06 	br	4b10c <__fputwc+0x1b4>
   4b0a4:	e0fffc04 	addi	r3,fp,-16
   4b0a8:	e0bffa17 	ldw	r2,-24(fp)
   4b0ac:	1885883a 	add	r2,r3,r2
   4b0b0:	10800003 	ldbu	r2,0(r2)
   4b0b4:	10803fcc 	andi	r2,r2,255
   4b0b8:	e1bfff17 	ldw	r6,-4(fp)
   4b0bc:	100b883a 	mov	r5,r2
   4b0c0:	e13ffd17 	ldw	r4,-12(fp)
   4b0c4:	004c7c40 	call	4c7c4 <__swbuf_r>
   4b0c8:	10bfffe0 	cmpeqi	r2,r2,-1
   4b0cc:	00000f06 	br	4b10c <__fputwc+0x1b4>
   4b0d0:	e0bfff17 	ldw	r2,-4(fp)
   4b0d4:	10800017 	ldw	r2,0(r2)
   4b0d8:	e13ffc04 	addi	r4,fp,-16
   4b0dc:	e0fffa17 	ldw	r3,-24(fp)
   4b0e0:	20c7883a 	add	r3,r4,r3
   4b0e4:	18c00003 	ldbu	r3,0(r3)
   4b0e8:	10c00005 	stb	r3,0(r2)
   4b0ec:	e0bfff17 	ldw	r2,-4(fp)
   4b0f0:	10800017 	ldw	r2,0(r2)
   4b0f4:	11000044 	addi	r4,r2,1
   4b0f8:	e0ffff17 	ldw	r3,-4(fp)
   4b0fc:	19000015 	stw	r4,0(r3)
   4b100:	10800003 	ldbu	r2,0(r2)
   4b104:	10803fcc 	andi	r2,r2,255
   4b108:	10bfffe0 	cmpeqi	r2,r2,-1
   4b10c:	10803fcc 	andi	r2,r2,255
   4b110:	10000226 	beq	r2,zero,4b11c <__fputwc+0x1c4>
      return WEOF;
   4b114:	00bfffc4 	movi	r2,-1
   4b118:	00000706 	br	4b138 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
   4b11c:	e0bffa17 	ldw	r2,-24(fp)
   4b120:	10800044 	addi	r2,r2,1
   4b124:	e0bffa15 	stw	r2,-24(fp)
   4b128:	e0fffa17 	ldw	r3,-24(fp)
   4b12c:	e0bffb17 	ldw	r2,-20(fp)
   4b130:	18bfb336 	bltu	r3,r2,4b000 <_gp+0xfffee2a4>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
   4b134:	e0bffe17 	ldw	r2,-8(fp)
}
   4b138:	e037883a 	mov	sp,fp
   4b13c:	dfc00117 	ldw	ra,4(sp)
   4b140:	df000017 	ldw	fp,0(sp)
   4b144:	dec00204 	addi	sp,sp,8
   4b148:	f800283a 	ret

0004b14c <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   4b14c:	defffa04 	addi	sp,sp,-24
   4b150:	dfc00515 	stw	ra,20(sp)
   4b154:	df000415 	stw	fp,16(sp)
   4b158:	df000404 	addi	fp,sp,16
   4b15c:	e13ffd15 	stw	r4,-12(fp)
   4b160:	e17ffe15 	stw	r5,-8(fp)
   4b164:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
   4b168:	e0bfff17 	ldw	r2,-4(fp)
   4b16c:	1080030b 	ldhu	r2,12(r2)
   4b170:	10bfffcc 	andi	r2,r2,65535
   4b174:	1088000c 	andi	r2,r2,8192
   4b178:	10000b1e 	bne	r2,zero,4b1a8 <_fputwc_r+0x5c>
   4b17c:	e0bfff17 	ldw	r2,-4(fp)
   4b180:	1080030b 	ldhu	r2,12(r2)
   4b184:	10880014 	ori	r2,r2,8192
   4b188:	1007883a 	mov	r3,r2
   4b18c:	e0bfff17 	ldw	r2,-4(fp)
   4b190:	10c0030d 	sth	r3,12(r2)
   4b194:	e0bfff17 	ldw	r2,-4(fp)
   4b198:	10801917 	ldw	r2,100(r2)
   4b19c:	10c80014 	ori	r3,r2,8192
   4b1a0:	e0bfff17 	ldw	r2,-4(fp)
   4b1a4:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
   4b1a8:	e1bfff17 	ldw	r6,-4(fp)
   4b1ac:	e17ffe17 	ldw	r5,-8(fp)
   4b1b0:	e13ffd17 	ldw	r4,-12(fp)
   4b1b4:	004af580 	call	4af58 <__fputwc>
   4b1b8:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
   4b1bc:	e0bffc17 	ldw	r2,-16(fp)
}
   4b1c0:	e037883a 	mov	sp,fp
   4b1c4:	dfc00117 	ldw	ra,4(sp)
   4b1c8:	df000017 	ldw	fp,0(sp)
   4b1cc:	dec00204 	addi	sp,sp,8
   4b1d0:	f800283a 	ret

0004b1d4 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
   4b1d4:	defffa04 	addi	sp,sp,-24
   4b1d8:	dfc00515 	stw	ra,20(sp)
   4b1dc:	df000415 	stw	fp,16(sp)
   4b1e0:	df000404 	addi	fp,sp,16
   4b1e4:	e13ffe15 	stw	r4,-8(fp)
   4b1e8:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
   4b1ec:	d0a00417 	ldw	r2,-32752(gp)
   4b1f0:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
   4b1f4:	e0bffc17 	ldw	r2,-16(fp)
   4b1f8:	e0bffd15 	stw	r2,-12(fp)
   4b1fc:	e0bffd17 	ldw	r2,-12(fp)
   4b200:	10000526 	beq	r2,zero,4b218 <fputwc+0x44>
   4b204:	e0bffd17 	ldw	r2,-12(fp)
   4b208:	10800e17 	ldw	r2,56(r2)
   4b20c:	1000021e 	bne	r2,zero,4b218 <fputwc+0x44>
   4b210:	e13ffd17 	ldw	r4,-12(fp)
   4b214:	00452a00 	call	452a0 <__sinit>
  return _fputwc_r (reent, wc, fp);
   4b218:	e1bfff17 	ldw	r6,-4(fp)
   4b21c:	e17ffe17 	ldw	r5,-8(fp)
   4b220:	e13ffc17 	ldw	r4,-16(fp)
   4b224:	004b14c0 	call	4b14c <_fputwc_r>
}
   4b228:	e037883a 	mov	sp,fp
   4b22c:	dfc00117 	ldw	ra,4(sp)
   4b230:	df000017 	ldw	fp,0(sp)
   4b234:	dec00204 	addi	sp,sp,8
   4b238:	f800283a 	ret

0004b23c <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
   4b23c:	defffa04 	addi	sp,sp,-24
   4b240:	dfc00515 	stw	ra,20(sp)
   4b244:	df000415 	stw	fp,16(sp)
   4b248:	df000404 	addi	fp,sp,16
   4b24c:	e13ffd15 	stw	r4,-12(fp)
   4b250:	e17ffe15 	stw	r5,-8(fp)
   4b254:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
   4b258:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
   4b25c:	e17fff17 	ldw	r5,-4(fp)
   4b260:	e13ffe17 	ldw	r4,-8(fp)
   4b264:	00503b00 	call	503b0 <fstat>
   4b268:	e0bffc15 	stw	r2,-16(fp)
   4b26c:	e0bffc17 	ldw	r2,-16(fp)
   4b270:	10bfffd8 	cmpnei	r2,r2,-1
   4b274:	1000051e 	bne	r2,zero,4b28c <_fstat_r+0x50>
   4b278:	d0a80a17 	ldw	r2,-24536(gp)
   4b27c:	10000326 	beq	r2,zero,4b28c <_fstat_r+0x50>
    ptr->_errno = errno;
   4b280:	d0e80a17 	ldw	r3,-24536(gp)
   4b284:	e0bffd17 	ldw	r2,-12(fp)
   4b288:	10c00015 	stw	r3,0(r2)
  return ret;
   4b28c:	e0bffc17 	ldw	r2,-16(fp)
}
   4b290:	e037883a 	mov	sp,fp
   4b294:	dfc00117 	ldw	ra,4(sp)
   4b298:	df000017 	ldw	fp,0(sp)
   4b29c:	dec00204 	addi	sp,sp,8
   4b2a0:	f800283a 	ret

0004b2a4 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   4b2a4:	defff004 	addi	sp,sp,-64
   4b2a8:	dfc00f15 	stw	ra,60(sp)
   4b2ac:	df000e15 	stw	fp,56(sp)
   4b2b0:	dd800d15 	stw	r22,52(sp)
   4b2b4:	dd400c15 	stw	r21,48(sp)
   4b2b8:	dd000b15 	stw	r20,44(sp)
   4b2bc:	dcc00a15 	stw	r19,40(sp)
   4b2c0:	dc800915 	stw	r18,36(sp)
   4b2c4:	dc400815 	stw	r17,32(sp)
   4b2c8:	dc000715 	stw	r16,28(sp)
   4b2cc:	df000e04 	addi	fp,sp,56
   4b2d0:	e13ff815 	stw	r4,-32(fp)
   4b2d4:	2821883a 	mov	r16,r5
   4b2d8:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
   4b2dc:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
   4b2e0:	ac400217 	ldw	r17,8(r21)
   4b2e4:	8800021e 	bne	r17,zero,4b2f0 <__sfvwrite_r+0x4c>
    return 0;
   4b2e8:	0005883a 	mov	r2,zero
   4b2ec:	00015b06 	br	4b85c <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   4b2f0:	8080030b 	ldhu	r2,12(r16)
   4b2f4:	10bfffcc 	andi	r2,r2,65535
   4b2f8:	1080020c 	andi	r2,r2,8
   4b2fc:	10000226 	beq	r2,zero,4b308 <__sfvwrite_r+0x64>
   4b300:	80800417 	ldw	r2,16(r16)
   4b304:	1000061e 	bne	r2,zero,4b320 <__sfvwrite_r+0x7c>
   4b308:	800b883a 	mov	r5,r16
   4b30c:	e13ff817 	ldw	r4,-32(fp)
   4b310:	0042a280 	call	42a28 <__swsetup_r>
   4b314:	10000226 	beq	r2,zero,4b320 <__sfvwrite_r+0x7c>
    return EOF;
   4b318:	00bfffc4 	movi	r2,-1
   4b31c:	00014f06 	br	4b85c <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
   4b320:	ad000017 	ldw	r20,0(r21)
  len = 0;
   4b324:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   4b328:	8080030b 	ldhu	r2,12(r16)
   4b32c:	10bfffcc 	andi	r2,r2,65535
   4b330:	1080008c 	andi	r2,r2,2
   4b334:	10001f26 	beq	r2,zero,4b3b4 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   4b338:	00000306 	br	4b348 <__sfvwrite_r+0xa4>
   4b33c:	a4c00017 	ldw	r19,0(r20)
   4b340:	a4400117 	ldw	r17,4(r20)
   4b344:	a5000204 	addi	r20,r20,8
   4b348:	883ffc26 	beq	r17,zero,4b33c <_gp+0xfffee5e0>
	  w = fp->_write (ptr, fp->_cookie, p,
   4b34c:	82000917 	ldw	r8,36(r16)
   4b350:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
   4b354:	8805883a 	mov	r2,r17
   4b358:	00e00034 	movhi	r3,32768
   4b35c:	18ff0004 	addi	r3,r3,-1024
   4b360:	1880022e 	bgeu	r3,r2,4b36c <__sfvwrite_r+0xc8>
   4b364:	00a00034 	movhi	r2,32768
   4b368:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
   4b36c:	100f883a 	mov	r7,r2
   4b370:	980d883a 	mov	r6,r19
   4b374:	200b883a 	mov	r5,r4
   4b378:	e13ff817 	ldw	r4,-32(fp)
   4b37c:	403ee83a 	callr	r8
   4b380:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
   4b384:	04812c0e 	bge	zero,r18,4b838 <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
   4b388:	9005883a 	mov	r2,r18
   4b38c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4b390:	9005883a 	mov	r2,r18
   4b394:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4b398:	a8800217 	ldw	r2,8(r21)
   4b39c:	9007883a 	mov	r3,r18
   4b3a0:	10c5c83a 	sub	r2,r2,r3
   4b3a4:	a8800215 	stw	r2,8(r21)
   4b3a8:	a8800217 	ldw	r2,8(r21)
   4b3ac:	103fe61e 	bne	r2,zero,4b348 <_gp+0xfffee5ec>
   4b3b0:	00011f06 	br	4b830 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
   4b3b4:	8080030b 	ldhu	r2,12(r16)
   4b3b8:	10bfffcc 	andi	r2,r2,65535
   4b3bc:	1080004c 	andi	r2,r2,1
   4b3c0:	1000b81e 	bne	r2,zero,4b6a4 <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   4b3c4:	00000306 	br	4b3d4 <__sfvwrite_r+0x130>
   4b3c8:	a4c00017 	ldw	r19,0(r20)
   4b3cc:	a4400117 	ldw	r17,4(r20)
   4b3d0:	a5000204 	addi	r20,r20,8
   4b3d4:	883ffc26 	beq	r17,zero,4b3c8 <_gp+0xfffee66c>
	  w = fp->_w;
   4b3d8:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
   4b3dc:	8080030b 	ldhu	r2,12(r16)
   4b3e0:	10bfffcc 	andi	r2,r2,65535
   4b3e4:	1080800c 	andi	r2,r2,512
   4b3e8:	10006b26 	beq	r2,zero,4b598 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
   4b3ec:	9005883a 	mov	r2,r18
   4b3f0:	88805736 	bltu	r17,r2,4b550 <__sfvwrite_r+0x2ac>
   4b3f4:	8080030b 	ldhu	r2,12(r16)
   4b3f8:	10bfffcc 	andi	r2,r2,65535
   4b3fc:	1081200c 	andi	r2,r2,1152
   4b400:	10005326 	beq	r2,zero,4b550 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   4b404:	80800017 	ldw	r2,0(r16)
   4b408:	1007883a 	mov	r3,r2
   4b40c:	80800417 	ldw	r2,16(r16)
   4b410:	1885c83a 	sub	r2,r3,r2
   4b414:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   4b418:	80c00517 	ldw	r3,20(r16)
   4b41c:	1805883a 	mov	r2,r3
   4b420:	1085883a 	add	r2,r2,r2
   4b424:	10c5883a 	add	r2,r2,r3
   4b428:	1006d7fa 	srli	r3,r2,31
   4b42c:	1885883a 	add	r2,r3,r2
   4b430:	1005d07a 	srai	r2,r2,1
   4b434:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
   4b438:	e0bff617 	ldw	r2,-40(fp)
   4b43c:	1445883a 	add	r2,r2,r17
   4b440:	10800044 	addi	r2,r2,1
   4b444:	e0fff517 	ldw	r3,-44(fp)
   4b448:	1880042e 	bgeu	r3,r2,4b45c <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
   4b44c:	e0bff617 	ldw	r2,-40(fp)
   4b450:	1445883a 	add	r2,r2,r17
   4b454:	10800044 	addi	r2,r2,1
   4b458:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
   4b45c:	8080030b 	ldhu	r2,12(r16)
   4b460:	10bfffcc 	andi	r2,r2,65535
   4b464:	1081000c 	andi	r2,r2,1024
   4b468:	10001726 	beq	r2,zero,4b4c8 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
   4b46c:	e0bff517 	ldw	r2,-44(fp)
   4b470:	100b883a 	mov	r5,r2
   4b474:	e13ff817 	ldw	r4,-32(fp)
   4b478:	00465280 	call	46528 <_malloc_r>
   4b47c:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
   4b480:	e0bff417 	ldw	r2,-48(fp)
   4b484:	1000041e 	bne	r2,zero,4b498 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
   4b488:	e0bff817 	ldw	r2,-32(fp)
   4b48c:	00c00304 	movi	r3,12
   4b490:	10c00015 	stw	r3,0(r2)
			  goto err;
   4b494:	0000ed06 	br	4b84c <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
   4b498:	80800417 	ldw	r2,16(r16)
   4b49c:	e0fff617 	ldw	r3,-40(fp)
   4b4a0:	180d883a 	mov	r6,r3
   4b4a4:	100b883a 	mov	r5,r2
   4b4a8:	e13ff417 	ldw	r4,-48(fp)
   4b4ac:	00472600 	call	47260 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   4b4b0:	80c0030b 	ldhu	r3,12(r16)
   4b4b4:	00bedfc4 	movi	r2,-1153
   4b4b8:	1884703a 	and	r2,r3,r2
   4b4bc:	10802014 	ori	r2,r2,128
   4b4c0:	8080030d 	sth	r2,12(r16)
   4b4c4:	00001506 	br	4b51c <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   4b4c8:	80800417 	ldw	r2,16(r16)
   4b4cc:	e0fff517 	ldw	r3,-44(fp)
   4b4d0:	180d883a 	mov	r6,r3
   4b4d4:	100b883a 	mov	r5,r2
   4b4d8:	e13ff817 	ldw	r4,-32(fp)
   4b4dc:	004bbd40 	call	4bbd4 <_realloc_r>
   4b4e0:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
   4b4e4:	e0bff417 	ldw	r2,-48(fp)
   4b4e8:	10000c1e 	bne	r2,zero,4b51c <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
   4b4ec:	80800417 	ldw	r2,16(r16)
   4b4f0:	100b883a 	mov	r5,r2
   4b4f4:	e13ff817 	ldw	r4,-32(fp)
   4b4f8:	00454c00 	call	454c0 <_free_r>
			  fp->_flags &=  ~__SMBF;
   4b4fc:	80c0030b 	ldhu	r3,12(r16)
   4b500:	00bfdfc4 	movi	r2,-129
   4b504:	1884703a 	and	r2,r3,r2
   4b508:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
   4b50c:	e0bff817 	ldw	r2,-32(fp)
   4b510:	00c00304 	movi	r3,12
   4b514:	10c00015 	stw	r3,0(r2)
			  goto err;
   4b518:	0000cc06 	br	4b84c <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
   4b51c:	e0bff417 	ldw	r2,-48(fp)
   4b520:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
   4b524:	e0bff617 	ldw	r2,-40(fp)
   4b528:	e0fff417 	ldw	r3,-48(fp)
   4b52c:	1885883a 	add	r2,r3,r2
   4b530:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
   4b534:	e0bff517 	ldw	r2,-44(fp)
   4b538:	80800515 	stw	r2,20(r16)
		  w = len;
   4b53c:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
   4b540:	e0fff517 	ldw	r3,-44(fp)
   4b544:	e0bff617 	ldw	r2,-40(fp)
   4b548:	1885c83a 	sub	r2,r3,r2
   4b54c:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
   4b550:	9005883a 	mov	r2,r18
   4b554:	8880012e 	bgeu	r17,r2,4b55c <__sfvwrite_r+0x2b8>
		w = len;
   4b558:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
   4b55c:	80800017 	ldw	r2,0(r16)
   4b560:	9007883a 	mov	r3,r18
   4b564:	180d883a 	mov	r6,r3
   4b568:	980b883a 	mov	r5,r19
   4b56c:	1009883a 	mov	r4,r2
   4b570:	004b95c0 	call	4b95c <memmove>
	      fp->_w -= w;
   4b574:	80800217 	ldw	r2,8(r16)
   4b578:	1485c83a 	sub	r2,r2,r18
   4b57c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4b580:	80800017 	ldw	r2,0(r16)
   4b584:	9007883a 	mov	r3,r18
   4b588:	10c5883a 	add	r2,r2,r3
   4b58c:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
   4b590:	8825883a 	mov	r18,r17
   4b594:	00003806 	br	4b678 <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
   4b598:	80800017 	ldw	r2,0(r16)
   4b59c:	80c00417 	ldw	r3,16(r16)
   4b5a0:	18800236 	bltu	r3,r2,4b5ac <__sfvwrite_r+0x308>
   4b5a4:	80800517 	ldw	r2,20(r16)
   4b5a8:	8880182e 	bgeu	r17,r2,4b60c <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
   4b5ac:	9005883a 	mov	r2,r18
   4b5b0:	8880012e 	bgeu	r17,r2,4b5b8 <__sfvwrite_r+0x314>
   4b5b4:	8805883a 	mov	r2,r17
   4b5b8:	1025883a 	mov	r18,r2
	      COPY (w);
   4b5bc:	80800017 	ldw	r2,0(r16)
   4b5c0:	9007883a 	mov	r3,r18
   4b5c4:	180d883a 	mov	r6,r3
   4b5c8:	980b883a 	mov	r5,r19
   4b5cc:	1009883a 	mov	r4,r2
   4b5d0:	004b95c0 	call	4b95c <memmove>
	      fp->_w -= w;
   4b5d4:	80800217 	ldw	r2,8(r16)
   4b5d8:	1485c83a 	sub	r2,r2,r18
   4b5dc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4b5e0:	80800017 	ldw	r2,0(r16)
   4b5e4:	9007883a 	mov	r3,r18
   4b5e8:	10c5883a 	add	r2,r2,r3
   4b5ec:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   4b5f0:	80800217 	ldw	r2,8(r16)
   4b5f4:	10001f1e 	bne	r2,zero,4b674 <__sfvwrite_r+0x3d0>
   4b5f8:	800b883a 	mov	r5,r16
   4b5fc:	e13ff817 	ldw	r4,-32(fp)
   4b600:	0044e080 	call	44e08 <_fflush_r>
   4b604:	10001b26 	beq	r2,zero,4b674 <__sfvwrite_r+0x3d0>
		goto err;
   4b608:	00009006 	br	4b84c <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   4b60c:	8805883a 	mov	r2,r17
   4b610:	00e00034 	movhi	r3,32768
   4b614:	10c00236 	bltu	r2,r3,4b620 <__sfvwrite_r+0x37c>
   4b618:	00a00034 	movhi	r2,32768
   4b61c:	10bfffc4 	addi	r2,r2,-1
   4b620:	1007883a 	mov	r3,r2
   4b624:	80800517 	ldw	r2,20(r16)
   4b628:	100b883a 	mov	r5,r2
   4b62c:	1809883a 	mov	r4,r3
   4b630:	004d7b40 	call	4d7b4 <__divsi3>
   4b634:	1007883a 	mov	r3,r2
   4b638:	80800517 	ldw	r2,20(r16)
   4b63c:	100b883a 	mov	r5,r2
   4b640:	1809883a 	mov	r4,r3
   4b644:	004d9680 	call	4d968 <__mulsi3>
   4b648:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
   4b64c:	80800917 	ldw	r2,36(r16)
   4b650:	80c00717 	ldw	r3,28(r16)
   4b654:	900f883a 	mov	r7,r18
   4b658:	980d883a 	mov	r6,r19
   4b65c:	180b883a 	mov	r5,r3
   4b660:	e13ff817 	ldw	r4,-32(fp)
   4b664:	103ee83a 	callr	r2
   4b668:	1025883a 	mov	r18,r2
	      if (w <= 0)
   4b66c:	0480740e 	bge	zero,r18,4b840 <__sfvwrite_r+0x59c>
   4b670:	00000106 	br	4b678 <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   4b674:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
   4b678:	9005883a 	mov	r2,r18
   4b67c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4b680:	9005883a 	mov	r2,r18
   4b684:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4b688:	a8800217 	ldw	r2,8(r21)
   4b68c:	9007883a 	mov	r3,r18
   4b690:	10c5c83a 	sub	r2,r2,r3
   4b694:	a8800215 	stw	r2,8(r21)
   4b698:	a8800217 	ldw	r2,8(r21)
   4b69c:	103f4d1e 	bne	r2,zero,4b3d4 <_gp+0xfffee678>
   4b6a0:	00006306 	br	4b830 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
   4b6a4:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
   4b6a8:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
   4b6ac:	00000406 	br	4b6c0 <__sfvwrite_r+0x41c>
   4b6b0:	e03ff215 	stw	zero,-56(fp)
   4b6b4:	a4c00017 	ldw	r19,0(r20)
   4b6b8:	a4400117 	ldw	r17,4(r20)
   4b6bc:	a5000204 	addi	r20,r20,8
   4b6c0:	883ffb26 	beq	r17,zero,4b6b0 <_gp+0xfffee954>
	  if (!nlknown)
   4b6c4:	e0bff217 	ldw	r2,-56(fp)
   4b6c8:	1000111e 	bne	r2,zero,4b710 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
   4b6cc:	880d883a 	mov	r6,r17
   4b6d0:	01400284 	movi	r5,10
   4b6d4:	9809883a 	mov	r4,r19
   4b6d8:	00470a40 	call	470a4 <memchr>
   4b6dc:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
   4b6e0:	e0bff717 	ldw	r2,-36(fp)
   4b6e4:	10000626 	beq	r2,zero,4b700 <__sfvwrite_r+0x45c>
   4b6e8:	e0bff717 	ldw	r2,-36(fp)
   4b6ec:	10800044 	addi	r2,r2,1
   4b6f0:	1007883a 	mov	r3,r2
   4b6f4:	9805883a 	mov	r2,r19
   4b6f8:	1885c83a 	sub	r2,r3,r2
   4b6fc:	00000106 	br	4b704 <__sfvwrite_r+0x460>
   4b700:	88800044 	addi	r2,r17,1
   4b704:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
   4b708:	00800044 	movi	r2,1
   4b70c:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
   4b710:	e0bff317 	ldw	r2,-52(fp)
   4b714:	8880012e 	bgeu	r17,r2,4b71c <__sfvwrite_r+0x478>
   4b718:	8805883a 	mov	r2,r17
   4b71c:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
   4b720:	80c00217 	ldw	r3,8(r16)
   4b724:	80800517 	ldw	r2,20(r16)
   4b728:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
   4b72c:	80800017 	ldw	r2,0(r16)
   4b730:	80c00417 	ldw	r3,16(r16)
   4b734:	1880102e 	bgeu	r3,r2,4b778 <__sfvwrite_r+0x4d4>
   4b738:	95800f0e 	bge	r18,r22,4b778 <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
   4b73c:	80800017 	ldw	r2,0(r16)
   4b740:	9007883a 	mov	r3,r18
   4b744:	180d883a 	mov	r6,r3
   4b748:	980b883a 	mov	r5,r19
   4b74c:	1009883a 	mov	r4,r2
   4b750:	004b95c0 	call	4b95c <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
   4b754:	80800017 	ldw	r2,0(r16)
   4b758:	9007883a 	mov	r3,r18
   4b75c:	10c5883a 	add	r2,r2,r3
   4b760:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
   4b764:	800b883a 	mov	r5,r16
   4b768:	e13ff817 	ldw	r4,-32(fp)
   4b76c:	0044e080 	call	44e08 <_fflush_r>
   4b770:	10001b26 	beq	r2,zero,4b7e0 <__sfvwrite_r+0x53c>
		goto err;
   4b774:	00003506 	br	4b84c <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
   4b778:	84800517 	ldw	r18,20(r16)
   4b77c:	b4800a16 	blt	r22,r18,4b7a8 <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
   4b780:	80800917 	ldw	r2,36(r16)
   4b784:	80c00717 	ldw	r3,28(r16)
   4b788:	900f883a 	mov	r7,r18
   4b78c:	980d883a 	mov	r6,r19
   4b790:	180b883a 	mov	r5,r3
   4b794:	e13ff817 	ldw	r4,-32(fp)
   4b798:	103ee83a 	callr	r2
   4b79c:	1025883a 	mov	r18,r2
	      if (w <= 0)
   4b7a0:	04800f16 	blt	zero,r18,4b7e0 <__sfvwrite_r+0x53c>
		goto err;
   4b7a4:	00002906 	br	4b84c <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
   4b7a8:	b025883a 	mov	r18,r22
	      COPY (w);
   4b7ac:	80800017 	ldw	r2,0(r16)
   4b7b0:	9007883a 	mov	r3,r18
   4b7b4:	180d883a 	mov	r6,r3
   4b7b8:	980b883a 	mov	r5,r19
   4b7bc:	1009883a 	mov	r4,r2
   4b7c0:	004b95c0 	call	4b95c <memmove>
	      fp->_w -= w;
   4b7c4:	80800217 	ldw	r2,8(r16)
   4b7c8:	1485c83a 	sub	r2,r2,r18
   4b7cc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4b7d0:	80800017 	ldw	r2,0(r16)
   4b7d4:	9007883a 	mov	r3,r18
   4b7d8:	10c5883a 	add	r2,r2,r3
   4b7dc:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
   4b7e0:	e0bff317 	ldw	r2,-52(fp)
   4b7e4:	1485c83a 	sub	r2,r2,r18
   4b7e8:	e0bff315 	stw	r2,-52(fp)
   4b7ec:	e0bff317 	ldw	r2,-52(fp)
   4b7f0:	1000051e 	bne	r2,zero,4b808 <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
   4b7f4:	800b883a 	mov	r5,r16
   4b7f8:	e13ff817 	ldw	r4,-32(fp)
   4b7fc:	0044e080 	call	44e08 <_fflush_r>
   4b800:	1000111e 	bne	r2,zero,4b848 <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
   4b804:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
   4b808:	9005883a 	mov	r2,r18
   4b80c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4b810:	9005883a 	mov	r2,r18
   4b814:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4b818:	a8800217 	ldw	r2,8(r21)
   4b81c:	9007883a 	mov	r3,r18
   4b820:	10c5c83a 	sub	r2,r2,r3
   4b824:	a8800215 	stw	r2,8(r21)
   4b828:	a8800217 	ldw	r2,8(r21)
   4b82c:	103fa41e 	bne	r2,zero,4b6c0 <_gp+0xfffee964>
    }
  return 0;
   4b830:	0005883a 	mov	r2,zero
   4b834:	00000906 	br	4b85c <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
   4b838:	0001883a 	nop
   4b83c:	00000306 	br	4b84c <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
   4b840:	0001883a 	nop
   4b844:	00000106 	br	4b84c <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
   4b848:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
   4b84c:	8080030b 	ldhu	r2,12(r16)
   4b850:	10801014 	ori	r2,r2,64
   4b854:	8080030d 	sth	r2,12(r16)
  return EOF;
   4b858:	00bfffc4 	movi	r2,-1
}
   4b85c:	e6fff904 	addi	sp,fp,-28
   4b860:	dfc00817 	ldw	ra,32(sp)
   4b864:	df000717 	ldw	fp,28(sp)
   4b868:	dd800617 	ldw	r22,24(sp)
   4b86c:	dd400517 	ldw	r21,20(sp)
   4b870:	dd000417 	ldw	r20,16(sp)
   4b874:	dcc00317 	ldw	r19,12(sp)
   4b878:	dc800217 	ldw	r18,8(sp)
   4b87c:	dc400117 	ldw	r17,4(sp)
   4b880:	dc000017 	ldw	r16,0(sp)
   4b884:	dec00904 	addi	sp,sp,36
   4b888:	f800283a 	ret

0004b88c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   4b88c:	defffb04 	addi	sp,sp,-20
   4b890:	dfc00415 	stw	ra,16(sp)
   4b894:	df000315 	stw	fp,12(sp)
   4b898:	df000304 	addi	fp,sp,12
   4b89c:	e13ffe15 	stw	r4,-8(fp)
   4b8a0:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   4b8a4:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
   4b8a8:	e13fff17 	ldw	r4,-4(fp)
   4b8ac:	00504a40 	call	504a4 <isatty>
   4b8b0:	e0bffd15 	stw	r2,-12(fp)
   4b8b4:	e0bffd17 	ldw	r2,-12(fp)
   4b8b8:	10bfffd8 	cmpnei	r2,r2,-1
   4b8bc:	1000051e 	bne	r2,zero,4b8d4 <_isatty_r+0x48>
   4b8c0:	d0a80a17 	ldw	r2,-24536(gp)
   4b8c4:	10000326 	beq	r2,zero,4b8d4 <_isatty_r+0x48>
    ptr->_errno = errno;
   4b8c8:	d0e80a17 	ldw	r3,-24536(gp)
   4b8cc:	e0bffe17 	ldw	r2,-8(fp)
   4b8d0:	10c00015 	stw	r3,0(r2)
  return ret;
   4b8d4:	e0bffd17 	ldw	r2,-12(fp)
}
   4b8d8:	e037883a 	mov	sp,fp
   4b8dc:	dfc00117 	ldw	ra,4(sp)
   4b8e0:	df000017 	ldw	fp,0(sp)
   4b8e4:	dec00204 	addi	sp,sp,8
   4b8e8:	f800283a 	ret

0004b8ec <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
   4b8ec:	defff904 	addi	sp,sp,-28
   4b8f0:	dfc00615 	stw	ra,24(sp)
   4b8f4:	df000515 	stw	fp,20(sp)
   4b8f8:	df000504 	addi	fp,sp,20
   4b8fc:	e13ffc15 	stw	r4,-16(fp)
   4b900:	e17ffd15 	stw	r5,-12(fp)
   4b904:	e1bffe15 	stw	r6,-8(fp)
   4b908:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
   4b90c:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
   4b910:	e1bfff17 	ldw	r6,-4(fp)
   4b914:	e17ffe17 	ldw	r5,-8(fp)
   4b918:	e13ffd17 	ldw	r4,-12(fp)
   4b91c:	00506780 	call	50678 <lseek>
   4b920:	e0bffb15 	stw	r2,-20(fp)
   4b924:	e0bffb17 	ldw	r2,-20(fp)
   4b928:	10bfffd8 	cmpnei	r2,r2,-1
   4b92c:	1000051e 	bne	r2,zero,4b944 <_lseek_r+0x58>
   4b930:	d0a80a17 	ldw	r2,-24536(gp)
   4b934:	10000326 	beq	r2,zero,4b944 <_lseek_r+0x58>
    ptr->_errno = errno;
   4b938:	d0e80a17 	ldw	r3,-24536(gp)
   4b93c:	e0bffc17 	ldw	r2,-16(fp)
   4b940:	10c00015 	stw	r3,0(r2)
  return ret;
   4b944:	e0bffb17 	ldw	r2,-20(fp)
}
   4b948:	e037883a 	mov	sp,fp
   4b94c:	dfc00117 	ldw	ra,4(sp)
   4b950:	df000017 	ldw	fp,0(sp)
   4b954:	dec00204 	addi	sp,sp,8
   4b958:	f800283a 	ret

0004b95c <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
   4b95c:	defff804 	addi	sp,sp,-32
   4b960:	df000715 	stw	fp,28(sp)
   4b964:	df000704 	addi	fp,sp,28
   4b968:	e13ffd15 	stw	r4,-12(fp)
   4b96c:	e17ffe15 	stw	r5,-8(fp)
   4b970:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
   4b974:	e0bffd17 	ldw	r2,-12(fp)
   4b978:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
   4b97c:	e0bffe17 	ldw	r2,-8(fp)
   4b980:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   4b984:	e0fffa17 	ldw	r3,-24(fp)
   4b988:	e0bff917 	ldw	r2,-28(fp)
   4b98c:	18801d2e 	bgeu	r3,r2,4ba04 <memmove+0xa8>
   4b990:	e0fffa17 	ldw	r3,-24(fp)
   4b994:	e0bfff17 	ldw	r2,-4(fp)
   4b998:	1885883a 	add	r2,r3,r2
   4b99c:	e0fff917 	ldw	r3,-28(fp)
   4b9a0:	1880182e 	bgeu	r3,r2,4ba04 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
   4b9a4:	e0fffa17 	ldw	r3,-24(fp)
   4b9a8:	e0bfff17 	ldw	r2,-4(fp)
   4b9ac:	1885883a 	add	r2,r3,r2
   4b9b0:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
   4b9b4:	e0fff917 	ldw	r3,-28(fp)
   4b9b8:	e0bfff17 	ldw	r2,-4(fp)
   4b9bc:	1885883a 	add	r2,r3,r2
   4b9c0:	e0bff915 	stw	r2,-28(fp)
      while (length--)
   4b9c4:	00000a06 	br	4b9f0 <memmove+0x94>
	{
	  *--dst = *--src;
   4b9c8:	e0bff917 	ldw	r2,-28(fp)
   4b9cc:	10bfffc4 	addi	r2,r2,-1
   4b9d0:	e0bff915 	stw	r2,-28(fp)
   4b9d4:	e0bffa17 	ldw	r2,-24(fp)
   4b9d8:	10bfffc4 	addi	r2,r2,-1
   4b9dc:	e0bffa15 	stw	r2,-24(fp)
   4b9e0:	e0bffa17 	ldw	r2,-24(fp)
   4b9e4:	10c00003 	ldbu	r3,0(r2)
   4b9e8:	e0bff917 	ldw	r2,-28(fp)
   4b9ec:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
   4b9f0:	e0bfff17 	ldw	r2,-4(fp)
   4b9f4:	10ffffc4 	addi	r3,r2,-1
   4b9f8:	e0ffff15 	stw	r3,-4(fp)
   4b9fc:	103ff21e 	bne	r2,zero,4b9c8 <_gp+0xfffeec6c>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   4ba00:	00005306 	br	4bb50 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
   4ba04:	e0bfff17 	ldw	r2,-4(fp)
   4ba08:	10800430 	cmpltui	r2,r2,16
   4ba0c:	10004c1e 	bne	r2,zero,4bb40 <memmove+0x1e4>
   4ba10:	e0fffa17 	ldw	r3,-24(fp)
   4ba14:	e0bff917 	ldw	r2,-28(fp)
   4ba18:	1884b03a 	or	r2,r3,r2
   4ba1c:	108000cc 	andi	r2,r2,3
   4ba20:	1000471e 	bne	r2,zero,4bb40 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
   4ba24:	e0bff917 	ldw	r2,-28(fp)
   4ba28:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
   4ba2c:	e0bffa17 	ldw	r2,-24(fp)
   4ba30:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   4ba34:	00002306 	br	4bac4 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
   4ba38:	e0bffb17 	ldw	r2,-20(fp)
   4ba3c:	10c00104 	addi	r3,r2,4
   4ba40:	e0fffb15 	stw	r3,-20(fp)
   4ba44:	e0fffc17 	ldw	r3,-16(fp)
   4ba48:	19000104 	addi	r4,r3,4
   4ba4c:	e13ffc15 	stw	r4,-16(fp)
   4ba50:	18c00017 	ldw	r3,0(r3)
   4ba54:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4ba58:	e0bffb17 	ldw	r2,-20(fp)
   4ba5c:	10c00104 	addi	r3,r2,4
   4ba60:	e0fffb15 	stw	r3,-20(fp)
   4ba64:	e0fffc17 	ldw	r3,-16(fp)
   4ba68:	19000104 	addi	r4,r3,4
   4ba6c:	e13ffc15 	stw	r4,-16(fp)
   4ba70:	18c00017 	ldw	r3,0(r3)
   4ba74:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4ba78:	e0bffb17 	ldw	r2,-20(fp)
   4ba7c:	10c00104 	addi	r3,r2,4
   4ba80:	e0fffb15 	stw	r3,-20(fp)
   4ba84:	e0fffc17 	ldw	r3,-16(fp)
   4ba88:	19000104 	addi	r4,r3,4
   4ba8c:	e13ffc15 	stw	r4,-16(fp)
   4ba90:	18c00017 	ldw	r3,0(r3)
   4ba94:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4ba98:	e0bffb17 	ldw	r2,-20(fp)
   4ba9c:	10c00104 	addi	r3,r2,4
   4baa0:	e0fffb15 	stw	r3,-20(fp)
   4baa4:	e0fffc17 	ldw	r3,-16(fp)
   4baa8:	19000104 	addi	r4,r3,4
   4baac:	e13ffc15 	stw	r4,-16(fp)
   4bab0:	18c00017 	ldw	r3,0(r3)
   4bab4:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
   4bab8:	e0bfff17 	ldw	r2,-4(fp)
   4babc:	10bffc04 	addi	r2,r2,-16
   4bac0:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   4bac4:	e0bfff17 	ldw	r2,-4(fp)
   4bac8:	10800428 	cmpgeui	r2,r2,16
   4bacc:	103fda1e 	bne	r2,zero,4ba38 <_gp+0xfffeecdc>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   4bad0:	00000b06 	br	4bb00 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
   4bad4:	e0bffb17 	ldw	r2,-20(fp)
   4bad8:	10c00104 	addi	r3,r2,4
   4badc:	e0fffb15 	stw	r3,-20(fp)
   4bae0:	e0fffc17 	ldw	r3,-16(fp)
   4bae4:	19000104 	addi	r4,r3,4
   4bae8:	e13ffc15 	stw	r4,-16(fp)
   4baec:	18c00017 	ldw	r3,0(r3)
   4baf0:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
   4baf4:	e0bfff17 	ldw	r2,-4(fp)
   4baf8:	10bfff04 	addi	r2,r2,-4
   4bafc:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   4bb00:	e0bfff17 	ldw	r2,-4(fp)
   4bb04:	10800128 	cmpgeui	r2,r2,4
   4bb08:	103ff21e 	bne	r2,zero,4bad4 <_gp+0xfffeed78>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
   4bb0c:	e0bffb17 	ldw	r2,-20(fp)
   4bb10:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
   4bb14:	e0bffc17 	ldw	r2,-16(fp)
   4bb18:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
   4bb1c:	00000806 	br	4bb40 <memmove+0x1e4>
        {
          *dst++ = *src++;
   4bb20:	e0bff917 	ldw	r2,-28(fp)
   4bb24:	10c00044 	addi	r3,r2,1
   4bb28:	e0fff915 	stw	r3,-28(fp)
   4bb2c:	e0fffa17 	ldw	r3,-24(fp)
   4bb30:	19000044 	addi	r4,r3,1
   4bb34:	e13ffa15 	stw	r4,-24(fp)
   4bb38:	18c00003 	ldbu	r3,0(r3)
   4bb3c:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   4bb40:	e0bfff17 	ldw	r2,-4(fp)
   4bb44:	10ffffc4 	addi	r3,r2,-1
   4bb48:	e0ffff15 	stw	r3,-4(fp)
   4bb4c:	103ff41e 	bne	r2,zero,4bb20 <_gp+0xfffeedc4>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
   4bb50:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   4bb54:	e037883a 	mov	sp,fp
   4bb58:	df000017 	ldw	fp,0(sp)
   4bb5c:	dec00104 	addi	sp,sp,4
   4bb60:	f800283a 	ret

0004bb64 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
   4bb64:	defff904 	addi	sp,sp,-28
   4bb68:	dfc00615 	stw	ra,24(sp)
   4bb6c:	df000515 	stw	fp,20(sp)
   4bb70:	df000504 	addi	fp,sp,20
   4bb74:	e13ffc15 	stw	r4,-16(fp)
   4bb78:	e17ffd15 	stw	r5,-12(fp)
   4bb7c:	e1bffe15 	stw	r6,-8(fp)
   4bb80:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   4bb84:	d0280a15 	stw	zero,-24536(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
   4bb88:	e1bfff17 	ldw	r6,-4(fp)
   4bb8c:	e17ffe17 	ldw	r5,-8(fp)
   4bb90:	e13ffd17 	ldw	r4,-12(fp)
   4bb94:	00508540 	call	50854 <read>
   4bb98:	e0bffb15 	stw	r2,-20(fp)
   4bb9c:	e0bffb17 	ldw	r2,-20(fp)
   4bba0:	10bfffd8 	cmpnei	r2,r2,-1
   4bba4:	1000051e 	bne	r2,zero,4bbbc <_read_r+0x58>
   4bba8:	d0a80a17 	ldw	r2,-24536(gp)
   4bbac:	10000326 	beq	r2,zero,4bbbc <_read_r+0x58>
    ptr->_errno = errno;
   4bbb0:	d0e80a17 	ldw	r3,-24536(gp)
   4bbb4:	e0bffc17 	ldw	r2,-16(fp)
   4bbb8:	10c00015 	stw	r3,0(r2)
  return ret;
   4bbbc:	e0bffb17 	ldw	r2,-20(fp)
}
   4bbc0:	e037883a 	mov	sp,fp
   4bbc4:	dfc00117 	ldw	ra,4(sp)
   4bbc8:	df000017 	ldw	fp,0(sp)
   4bbcc:	dec00204 	addi	sp,sp,8
   4bbd0:	f800283a 	ret

0004bbd4 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
   4bbd4:	deffe104 	addi	sp,sp,-124
   4bbd8:	dfc01e15 	stw	ra,120(sp)
   4bbdc:	df001d15 	stw	fp,116(sp)
   4bbe0:	df001d04 	addi	fp,sp,116
   4bbe4:	e13ffd15 	stw	r4,-12(fp)
   4bbe8:	e17ffe15 	stw	r5,-8(fp)
   4bbec:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   4bbf0:	e0bffe17 	ldw	r2,-8(fp)
   4bbf4:	1000041e 	bne	r2,zero,4bc08 <_realloc_r+0x34>
   4bbf8:	e17fff17 	ldw	r5,-4(fp)
   4bbfc:	e13ffd17 	ldw	r4,-12(fp)
   4bc00:	00465280 	call	46528 <_malloc_r>
   4bc04:	0002ea06 	br	4c7b0 <_realloc_r+0xbdc>

  MALLOC_LOCK;
   4bc08:	e13ffd17 	ldw	r4,-12(fp)
   4bc0c:	00507d00 	call	507d0 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
   4bc10:	e0bffe17 	ldw	r2,-8(fp)
   4bc14:	10bffe04 	addi	r2,r2,-8
   4bc18:	e0bfef15 	stw	r2,-68(fp)
   4bc1c:	e0bfef17 	ldw	r2,-68(fp)
   4bc20:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
   4bc24:	e0bfef17 	ldw	r2,-68(fp)
   4bc28:	10c00117 	ldw	r3,4(r2)
   4bc2c:	00bfff04 	movi	r2,-4
   4bc30:	1884703a 	and	r2,r3,r2
   4bc34:	e0bff015 	stw	r2,-64(fp)
   4bc38:	e0bff017 	ldw	r2,-64(fp)
   4bc3c:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
   4bc40:	e0bfff17 	ldw	r2,-4(fp)
   4bc44:	108002c4 	addi	r2,r2,11
   4bc48:	108005f0 	cmpltui	r2,r2,23
   4bc4c:	1000051e 	bne	r2,zero,4bc64 <_realloc_r+0x90>
   4bc50:	e0bfff17 	ldw	r2,-4(fp)
   4bc54:	10c002c4 	addi	r3,r2,11
   4bc58:	00bffe04 	movi	r2,-8
   4bc5c:	1884703a 	and	r2,r3,r2
   4bc60:	00000106 	br	4bc68 <_realloc_r+0x94>
   4bc64:	00800404 	movi	r2,16
   4bc68:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   4bc6c:	e0bff117 	ldw	r2,-60(fp)
   4bc70:	10000316 	blt	r2,zero,4bc80 <_realloc_r+0xac>
   4bc74:	e0fff117 	ldw	r3,-60(fp)
   4bc78:	e0bfff17 	ldw	r2,-4(fp)
   4bc7c:	1880052e 	bgeu	r3,r2,4bc94 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
   4bc80:	e0bffd17 	ldw	r2,-12(fp)
   4bc84:	00c00304 	movi	r3,12
   4bc88:	10c00015 	stw	r3,0(r2)
    return 0;
   4bc8c:	0005883a 	mov	r2,zero
   4bc90:	0002c706 	br	4c7b0 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   4bc94:	e0fff017 	ldw	r3,-64(fp)
   4bc98:	e0bff117 	ldw	r2,-60(fp)
   4bc9c:	18828b0e 	bge	r3,r2,4c6cc <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
   4bca0:	e0ffef17 	ldw	r3,-68(fp)
   4bca4:	e0bff017 	ldw	r2,-64(fp)
   4bca8:	1885883a 	add	r2,r3,r2
   4bcac:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
   4bcb0:	00800174 	movhi	r2,5
   4bcb4:	108dd304 	addi	r2,r2,14156
   4bcb8:	10c00217 	ldw	r3,8(r2)
   4bcbc:	e0bfe517 	ldw	r2,-108(fp)
   4bcc0:	18800926 	beq	r3,r2,4bce8 <_realloc_r+0x114>
   4bcc4:	e0bfe517 	ldw	r2,-108(fp)
   4bcc8:	10c00117 	ldw	r3,4(r2)
   4bccc:	00bfff84 	movi	r2,-2
   4bcd0:	1884703a 	and	r2,r3,r2
   4bcd4:	e0ffe517 	ldw	r3,-108(fp)
   4bcd8:	1885883a 	add	r2,r3,r2
   4bcdc:	10800117 	ldw	r2,4(r2)
   4bce0:	1080004c 	andi	r2,r2,1
   4bce4:	1000461e 	bne	r2,zero,4be00 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
   4bce8:	e0bfe517 	ldw	r2,-108(fp)
   4bcec:	10c00117 	ldw	r3,4(r2)
   4bcf0:	00bfff04 	movi	r2,-4
   4bcf4:	1884703a 	and	r2,r3,r2
   4bcf8:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
   4bcfc:	00800174 	movhi	r2,5
   4bd00:	108dd304 	addi	r2,r2,14156
   4bd04:	10c00217 	ldw	r3,8(r2)
   4bd08:	e0bfe517 	ldw	r2,-108(fp)
   4bd0c:	1880251e 	bne	r3,r2,4bda4 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
   4bd10:	e0ffe617 	ldw	r3,-104(fp)
   4bd14:	e0bfe417 	ldw	r2,-112(fp)
   4bd18:	1885883a 	add	r2,r3,r2
   4bd1c:	1007883a 	mov	r3,r2
   4bd20:	e0bff117 	ldw	r2,-60(fp)
   4bd24:	10800404 	addi	r2,r2,16
   4bd28:	18803816 	blt	r3,r2,4be0c <_realloc_r+0x238>
        {
          newsize += nextsize;
   4bd2c:	e0ffe417 	ldw	r3,-112(fp)
   4bd30:	e0bfe617 	ldw	r2,-104(fp)
   4bd34:	1885883a 	add	r2,r3,r2
   4bd38:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
   4bd3c:	00800174 	movhi	r2,5
   4bd40:	108dd304 	addi	r2,r2,14156
   4bd44:	e13fef17 	ldw	r4,-68(fp)
   4bd48:	e0fff117 	ldw	r3,-60(fp)
   4bd4c:	20c7883a 	add	r3,r4,r3
   4bd50:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
   4bd54:	00800174 	movhi	r2,5
   4bd58:	108dd304 	addi	r2,r2,14156
   4bd5c:	10800217 	ldw	r2,8(r2)
   4bd60:	e13fe417 	ldw	r4,-112(fp)
   4bd64:	e0fff117 	ldw	r3,-60(fp)
   4bd68:	20c7c83a 	sub	r3,r4,r3
   4bd6c:	18c00054 	ori	r3,r3,1
   4bd70:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
   4bd74:	e0bfef17 	ldw	r2,-68(fp)
   4bd78:	10800117 	ldw	r2,4(r2)
   4bd7c:	10c0004c 	andi	r3,r2,1
   4bd80:	e0bff117 	ldw	r2,-60(fp)
   4bd84:	1886b03a 	or	r3,r3,r2
   4bd88:	e0bfef17 	ldw	r2,-68(fp)
   4bd8c:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
   4bd90:	e13ffd17 	ldw	r4,-12(fp)
   4bd94:	00507f40 	call	507f4 <__malloc_unlock>
          return chunk2mem(oldp);
   4bd98:	e0bfef17 	ldw	r2,-68(fp)
   4bd9c:	10800204 	addi	r2,r2,8
   4bda0:	00028306 	br	4c7b0 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
   4bda4:	e0ffe617 	ldw	r3,-104(fp)
   4bda8:	e0bfe417 	ldw	r2,-112(fp)
   4bdac:	1885883a 	add	r2,r3,r2
   4bdb0:	1007883a 	mov	r3,r2
   4bdb4:	e0bff117 	ldw	r2,-60(fp)
   4bdb8:	18801416 	blt	r3,r2,4be0c <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
   4bdbc:	e0bfe517 	ldw	r2,-108(fp)
   4bdc0:	10800317 	ldw	r2,12(r2)
   4bdc4:	e0bff215 	stw	r2,-56(fp)
   4bdc8:	e0bfe517 	ldw	r2,-108(fp)
   4bdcc:	10800217 	ldw	r2,8(r2)
   4bdd0:	e0bff315 	stw	r2,-52(fp)
   4bdd4:	e0bff317 	ldw	r2,-52(fp)
   4bdd8:	e0fff217 	ldw	r3,-56(fp)
   4bddc:	10c00315 	stw	r3,12(r2)
   4bde0:	e0bff217 	ldw	r2,-56(fp)
   4bde4:	e0fff317 	ldw	r3,-52(fp)
   4bde8:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
   4bdec:	e0ffe417 	ldw	r3,-112(fp)
   4bdf0:	e0bfe617 	ldw	r2,-104(fp)
   4bdf4:	1885883a 	add	r2,r3,r2
   4bdf8:	e0bfe415 	stw	r2,-112(fp)
        goto split;
   4bdfc:	00023306 	br	4c6cc <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
   4be00:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
   4be04:	e03fe615 	stw	zero,-104(fp)
   4be08:	00000106 	br	4be10 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
   4be0c:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   4be10:	e0bfef17 	ldw	r2,-68(fp)
   4be14:	10800117 	ldw	r2,4(r2)
   4be18:	1080004c 	andi	r2,r2,1
   4be1c:	1001a91e 	bne	r2,zero,4c4c4 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
   4be20:	e0bfef17 	ldw	r2,-68(fp)
   4be24:	10800017 	ldw	r2,0(r2)
   4be28:	0085c83a 	sub	r2,zero,r2
   4be2c:	e0ffef17 	ldw	r3,-68(fp)
   4be30:	1885883a 	add	r2,r3,r2
   4be34:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
   4be38:	e0bff417 	ldw	r2,-48(fp)
   4be3c:	10c00117 	ldw	r3,4(r2)
   4be40:	00bfff04 	movi	r2,-4
   4be44:	1884703a 	and	r2,r3,r2
   4be48:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
   4be4c:	e0bfe517 	ldw	r2,-108(fp)
   4be50:	10012226 	beq	r2,zero,4c2dc <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
   4be54:	00800174 	movhi	r2,5
   4be58:	108dd304 	addi	r2,r2,14156
   4be5c:	10c00217 	ldw	r3,8(r2)
   4be60:	e0bfe517 	ldw	r2,-108(fp)
   4be64:	1880951e 	bne	r3,r2,4c0bc <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
   4be68:	e0ffe617 	ldw	r3,-104(fp)
   4be6c:	e0bff517 	ldw	r2,-44(fp)
   4be70:	1887883a 	add	r3,r3,r2
   4be74:	e0bfe417 	ldw	r2,-112(fp)
   4be78:	1885883a 	add	r2,r3,r2
   4be7c:	1007883a 	mov	r3,r2
   4be80:	e0bff117 	ldw	r2,-60(fp)
   4be84:	10800404 	addi	r2,r2,16
   4be88:	18811416 	blt	r3,r2,4c2dc <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
   4be8c:	e0bff417 	ldw	r2,-48(fp)
   4be90:	10800317 	ldw	r2,12(r2)
   4be94:	e0bff215 	stw	r2,-56(fp)
   4be98:	e0bff417 	ldw	r2,-48(fp)
   4be9c:	10800217 	ldw	r2,8(r2)
   4bea0:	e0bff315 	stw	r2,-52(fp)
   4bea4:	e0bff317 	ldw	r2,-52(fp)
   4bea8:	e0fff217 	ldw	r3,-56(fp)
   4beac:	10c00315 	stw	r3,12(r2)
   4beb0:	e0bff217 	ldw	r2,-56(fp)
   4beb4:	e0fff317 	ldw	r3,-52(fp)
   4beb8:	10c00215 	stw	r3,8(r2)
            newp = prev;
   4bebc:	e0bff417 	ldw	r2,-48(fp)
   4bec0:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
   4bec4:	e0fff517 	ldw	r3,-44(fp)
   4bec8:	e0bfe617 	ldw	r2,-104(fp)
   4becc:	1885883a 	add	r2,r3,r2
   4bed0:	e0ffe417 	ldw	r3,-112(fp)
   4bed4:	1885883a 	add	r2,r3,r2
   4bed8:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
   4bedc:	e0bfe317 	ldw	r2,-116(fp)
   4bee0:	10800204 	addi	r2,r2,8
   4bee4:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4bee8:	e0bff017 	ldw	r2,-64(fp)
   4beec:	10bfff04 	addi	r2,r2,-4
   4bef0:	e0bff715 	stw	r2,-36(fp)
   4bef4:	e0bff717 	ldw	r2,-36(fp)
   4bef8:	10800968 	cmpgeui	r2,r2,37
   4befc:	1000521e 	bne	r2,zero,4c048 <_realloc_r+0x474>
   4bf00:	e0bffe17 	ldw	r2,-8(fp)
   4bf04:	e0bfe715 	stw	r2,-100(fp)
   4bf08:	e0bff617 	ldw	r2,-40(fp)
   4bf0c:	e0bfe815 	stw	r2,-96(fp)
   4bf10:	e0bff717 	ldw	r2,-36(fp)
   4bf14:	10800530 	cmpltui	r2,r2,20
   4bf18:	1000361e 	bne	r2,zero,4bff4 <_realloc_r+0x420>
   4bf1c:	e0bfe817 	ldw	r2,-96(fp)
   4bf20:	10c00104 	addi	r3,r2,4
   4bf24:	e0ffe815 	stw	r3,-96(fp)
   4bf28:	e0ffe717 	ldw	r3,-100(fp)
   4bf2c:	19000104 	addi	r4,r3,4
   4bf30:	e13fe715 	stw	r4,-100(fp)
   4bf34:	18c00017 	ldw	r3,0(r3)
   4bf38:	10c00015 	stw	r3,0(r2)
   4bf3c:	e0bfe817 	ldw	r2,-96(fp)
   4bf40:	10c00104 	addi	r3,r2,4
   4bf44:	e0ffe815 	stw	r3,-96(fp)
   4bf48:	e0ffe717 	ldw	r3,-100(fp)
   4bf4c:	19000104 	addi	r4,r3,4
   4bf50:	e13fe715 	stw	r4,-100(fp)
   4bf54:	18c00017 	ldw	r3,0(r3)
   4bf58:	10c00015 	stw	r3,0(r2)
   4bf5c:	e0bff717 	ldw	r2,-36(fp)
   4bf60:	10800730 	cmpltui	r2,r2,28
   4bf64:	1000231e 	bne	r2,zero,4bff4 <_realloc_r+0x420>
   4bf68:	e0bfe817 	ldw	r2,-96(fp)
   4bf6c:	10c00104 	addi	r3,r2,4
   4bf70:	e0ffe815 	stw	r3,-96(fp)
   4bf74:	e0ffe717 	ldw	r3,-100(fp)
   4bf78:	19000104 	addi	r4,r3,4
   4bf7c:	e13fe715 	stw	r4,-100(fp)
   4bf80:	18c00017 	ldw	r3,0(r3)
   4bf84:	10c00015 	stw	r3,0(r2)
   4bf88:	e0bfe817 	ldw	r2,-96(fp)
   4bf8c:	10c00104 	addi	r3,r2,4
   4bf90:	e0ffe815 	stw	r3,-96(fp)
   4bf94:	e0ffe717 	ldw	r3,-100(fp)
   4bf98:	19000104 	addi	r4,r3,4
   4bf9c:	e13fe715 	stw	r4,-100(fp)
   4bfa0:	18c00017 	ldw	r3,0(r3)
   4bfa4:	10c00015 	stw	r3,0(r2)
   4bfa8:	e0bff717 	ldw	r2,-36(fp)
   4bfac:	10800930 	cmpltui	r2,r2,36
   4bfb0:	1000101e 	bne	r2,zero,4bff4 <_realloc_r+0x420>
   4bfb4:	e0bfe817 	ldw	r2,-96(fp)
   4bfb8:	10c00104 	addi	r3,r2,4
   4bfbc:	e0ffe815 	stw	r3,-96(fp)
   4bfc0:	e0ffe717 	ldw	r3,-100(fp)
   4bfc4:	19000104 	addi	r4,r3,4
   4bfc8:	e13fe715 	stw	r4,-100(fp)
   4bfcc:	18c00017 	ldw	r3,0(r3)
   4bfd0:	10c00015 	stw	r3,0(r2)
   4bfd4:	e0bfe817 	ldw	r2,-96(fp)
   4bfd8:	10c00104 	addi	r3,r2,4
   4bfdc:	e0ffe815 	stw	r3,-96(fp)
   4bfe0:	e0ffe717 	ldw	r3,-100(fp)
   4bfe4:	19000104 	addi	r4,r3,4
   4bfe8:	e13fe715 	stw	r4,-100(fp)
   4bfec:	18c00017 	ldw	r3,0(r3)
   4bff0:	10c00015 	stw	r3,0(r2)
   4bff4:	e0bfe817 	ldw	r2,-96(fp)
   4bff8:	10c00104 	addi	r3,r2,4
   4bffc:	e0ffe815 	stw	r3,-96(fp)
   4c000:	e0ffe717 	ldw	r3,-100(fp)
   4c004:	19000104 	addi	r4,r3,4
   4c008:	e13fe715 	stw	r4,-100(fp)
   4c00c:	18c00017 	ldw	r3,0(r3)
   4c010:	10c00015 	stw	r3,0(r2)
   4c014:	e0bfe817 	ldw	r2,-96(fp)
   4c018:	10c00104 	addi	r3,r2,4
   4c01c:	e0ffe815 	stw	r3,-96(fp)
   4c020:	e0ffe717 	ldw	r3,-100(fp)
   4c024:	19000104 	addi	r4,r3,4
   4c028:	e13fe715 	stw	r4,-100(fp)
   4c02c:	18c00017 	ldw	r3,0(r3)
   4c030:	10c00015 	stw	r3,0(r2)
   4c034:	e0bfe717 	ldw	r2,-100(fp)
   4c038:	10c00017 	ldw	r3,0(r2)
   4c03c:	e0bfe817 	ldw	r2,-96(fp)
   4c040:	10c00015 	stw	r3,0(r2)
   4c044:	00000406 	br	4c058 <_realloc_r+0x484>
   4c048:	e1bff717 	ldw	r6,-36(fp)
   4c04c:	e17ffe17 	ldw	r5,-8(fp)
   4c050:	e13ff617 	ldw	r4,-40(fp)
   4c054:	004b95c0 	call	4b95c <memmove>
            top = chunk_at_offset(newp, nb);
   4c058:	00800174 	movhi	r2,5
   4c05c:	108dd304 	addi	r2,r2,14156
   4c060:	e13fe317 	ldw	r4,-116(fp)
   4c064:	e0fff117 	ldw	r3,-60(fp)
   4c068:	20c7883a 	add	r3,r4,r3
   4c06c:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
   4c070:	00800174 	movhi	r2,5
   4c074:	108dd304 	addi	r2,r2,14156
   4c078:	10800217 	ldw	r2,8(r2)
   4c07c:	e13fe417 	ldw	r4,-112(fp)
   4c080:	e0fff117 	ldw	r3,-60(fp)
   4c084:	20c7c83a 	sub	r3,r4,r3
   4c088:	18c00054 	ori	r3,r3,1
   4c08c:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
   4c090:	e0bfe317 	ldw	r2,-116(fp)
   4c094:	10800117 	ldw	r2,4(r2)
   4c098:	10c0004c 	andi	r3,r2,1
   4c09c:	e0bff117 	ldw	r2,-60(fp)
   4c0a0:	1886b03a 	or	r3,r3,r2
   4c0a4:	e0bfe317 	ldw	r2,-116(fp)
   4c0a8:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
   4c0ac:	e13ffd17 	ldw	r4,-12(fp)
   4c0b0:	00507f40 	call	507f4 <__malloc_unlock>
            return newmem;
   4c0b4:	e0bff617 	ldw	r2,-40(fp)
   4c0b8:	0001bd06 	br	4c7b0 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
   4c0bc:	e0ffe617 	ldw	r3,-104(fp)
   4c0c0:	e0bff517 	ldw	r2,-44(fp)
   4c0c4:	1887883a 	add	r3,r3,r2
   4c0c8:	e0bfe417 	ldw	r2,-112(fp)
   4c0cc:	1885883a 	add	r2,r3,r2
   4c0d0:	1007883a 	mov	r3,r2
   4c0d4:	e0bff117 	ldw	r2,-60(fp)
   4c0d8:	18808016 	blt	r3,r2,4c2dc <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
   4c0dc:	e0bfe517 	ldw	r2,-108(fp)
   4c0e0:	10800317 	ldw	r2,12(r2)
   4c0e4:	e0bff215 	stw	r2,-56(fp)
   4c0e8:	e0bfe517 	ldw	r2,-108(fp)
   4c0ec:	10800217 	ldw	r2,8(r2)
   4c0f0:	e0bff315 	stw	r2,-52(fp)
   4c0f4:	e0bff317 	ldw	r2,-52(fp)
   4c0f8:	e0fff217 	ldw	r3,-56(fp)
   4c0fc:	10c00315 	stw	r3,12(r2)
   4c100:	e0bff217 	ldw	r2,-56(fp)
   4c104:	e0fff317 	ldw	r3,-52(fp)
   4c108:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
   4c10c:	e0bff417 	ldw	r2,-48(fp)
   4c110:	10800317 	ldw	r2,12(r2)
   4c114:	e0bff215 	stw	r2,-56(fp)
   4c118:	e0bff417 	ldw	r2,-48(fp)
   4c11c:	10800217 	ldw	r2,8(r2)
   4c120:	e0bff315 	stw	r2,-52(fp)
   4c124:	e0bff317 	ldw	r2,-52(fp)
   4c128:	e0fff217 	ldw	r3,-56(fp)
   4c12c:	10c00315 	stw	r3,12(r2)
   4c130:	e0bff217 	ldw	r2,-56(fp)
   4c134:	e0fff317 	ldw	r3,-52(fp)
   4c138:	10c00215 	stw	r3,8(r2)
          newp = prev;
   4c13c:	e0bff417 	ldw	r2,-48(fp)
   4c140:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
   4c144:	e0ffe617 	ldw	r3,-104(fp)
   4c148:	e0bff517 	ldw	r2,-44(fp)
   4c14c:	1885883a 	add	r2,r3,r2
   4c150:	e0ffe417 	ldw	r3,-112(fp)
   4c154:	1885883a 	add	r2,r3,r2
   4c158:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
   4c15c:	e0bfe317 	ldw	r2,-116(fp)
   4c160:	10800204 	addi	r2,r2,8
   4c164:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4c168:	e0bff017 	ldw	r2,-64(fp)
   4c16c:	10bfff04 	addi	r2,r2,-4
   4c170:	e0bff815 	stw	r2,-32(fp)
   4c174:	e0bff817 	ldw	r2,-32(fp)
   4c178:	10800968 	cmpgeui	r2,r2,37
   4c17c:	1000521e 	bne	r2,zero,4c2c8 <_realloc_r+0x6f4>
   4c180:	e0bffe17 	ldw	r2,-8(fp)
   4c184:	e0bfe915 	stw	r2,-92(fp)
   4c188:	e0bff617 	ldw	r2,-40(fp)
   4c18c:	e0bfea15 	stw	r2,-88(fp)
   4c190:	e0bff817 	ldw	r2,-32(fp)
   4c194:	10800530 	cmpltui	r2,r2,20
   4c198:	1000361e 	bne	r2,zero,4c274 <_realloc_r+0x6a0>
   4c19c:	e0bfea17 	ldw	r2,-88(fp)
   4c1a0:	10c00104 	addi	r3,r2,4
   4c1a4:	e0ffea15 	stw	r3,-88(fp)
   4c1a8:	e0ffe917 	ldw	r3,-92(fp)
   4c1ac:	19000104 	addi	r4,r3,4
   4c1b0:	e13fe915 	stw	r4,-92(fp)
   4c1b4:	18c00017 	ldw	r3,0(r3)
   4c1b8:	10c00015 	stw	r3,0(r2)
   4c1bc:	e0bfea17 	ldw	r2,-88(fp)
   4c1c0:	10c00104 	addi	r3,r2,4
   4c1c4:	e0ffea15 	stw	r3,-88(fp)
   4c1c8:	e0ffe917 	ldw	r3,-92(fp)
   4c1cc:	19000104 	addi	r4,r3,4
   4c1d0:	e13fe915 	stw	r4,-92(fp)
   4c1d4:	18c00017 	ldw	r3,0(r3)
   4c1d8:	10c00015 	stw	r3,0(r2)
   4c1dc:	e0bff817 	ldw	r2,-32(fp)
   4c1e0:	10800730 	cmpltui	r2,r2,28
   4c1e4:	1000231e 	bne	r2,zero,4c274 <_realloc_r+0x6a0>
   4c1e8:	e0bfea17 	ldw	r2,-88(fp)
   4c1ec:	10c00104 	addi	r3,r2,4
   4c1f0:	e0ffea15 	stw	r3,-88(fp)
   4c1f4:	e0ffe917 	ldw	r3,-92(fp)
   4c1f8:	19000104 	addi	r4,r3,4
   4c1fc:	e13fe915 	stw	r4,-92(fp)
   4c200:	18c00017 	ldw	r3,0(r3)
   4c204:	10c00015 	stw	r3,0(r2)
   4c208:	e0bfea17 	ldw	r2,-88(fp)
   4c20c:	10c00104 	addi	r3,r2,4
   4c210:	e0ffea15 	stw	r3,-88(fp)
   4c214:	e0ffe917 	ldw	r3,-92(fp)
   4c218:	19000104 	addi	r4,r3,4
   4c21c:	e13fe915 	stw	r4,-92(fp)
   4c220:	18c00017 	ldw	r3,0(r3)
   4c224:	10c00015 	stw	r3,0(r2)
   4c228:	e0bff817 	ldw	r2,-32(fp)
   4c22c:	10800930 	cmpltui	r2,r2,36
   4c230:	1000101e 	bne	r2,zero,4c274 <_realloc_r+0x6a0>
   4c234:	e0bfea17 	ldw	r2,-88(fp)
   4c238:	10c00104 	addi	r3,r2,4
   4c23c:	e0ffea15 	stw	r3,-88(fp)
   4c240:	e0ffe917 	ldw	r3,-92(fp)
   4c244:	19000104 	addi	r4,r3,4
   4c248:	e13fe915 	stw	r4,-92(fp)
   4c24c:	18c00017 	ldw	r3,0(r3)
   4c250:	10c00015 	stw	r3,0(r2)
   4c254:	e0bfea17 	ldw	r2,-88(fp)
   4c258:	10c00104 	addi	r3,r2,4
   4c25c:	e0ffea15 	stw	r3,-88(fp)
   4c260:	e0ffe917 	ldw	r3,-92(fp)
   4c264:	19000104 	addi	r4,r3,4
   4c268:	e13fe915 	stw	r4,-92(fp)
   4c26c:	18c00017 	ldw	r3,0(r3)
   4c270:	10c00015 	stw	r3,0(r2)
   4c274:	e0bfea17 	ldw	r2,-88(fp)
   4c278:	10c00104 	addi	r3,r2,4
   4c27c:	e0ffea15 	stw	r3,-88(fp)
   4c280:	e0ffe917 	ldw	r3,-92(fp)
   4c284:	19000104 	addi	r4,r3,4
   4c288:	e13fe915 	stw	r4,-92(fp)
   4c28c:	18c00017 	ldw	r3,0(r3)
   4c290:	10c00015 	stw	r3,0(r2)
   4c294:	e0bfea17 	ldw	r2,-88(fp)
   4c298:	10c00104 	addi	r3,r2,4
   4c29c:	e0ffea15 	stw	r3,-88(fp)
   4c2a0:	e0ffe917 	ldw	r3,-92(fp)
   4c2a4:	19000104 	addi	r4,r3,4
   4c2a8:	e13fe915 	stw	r4,-92(fp)
   4c2ac:	18c00017 	ldw	r3,0(r3)
   4c2b0:	10c00015 	stw	r3,0(r2)
   4c2b4:	e0bfe917 	ldw	r2,-92(fp)
   4c2b8:	10c00017 	ldw	r3,0(r2)
   4c2bc:	e0bfea17 	ldw	r2,-88(fp)
   4c2c0:	10c00015 	stw	r3,0(r2)
          goto split;
   4c2c4:	00010106 	br	4c6cc <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4c2c8:	e1bff817 	ldw	r6,-32(fp)
   4c2cc:	e17ffe17 	ldw	r5,-8(fp)
   4c2d0:	e13ff617 	ldw	r4,-40(fp)
   4c2d4:	004b95c0 	call	4b95c <memmove>
          goto split;
   4c2d8:	0000fc06 	br	4c6cc <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
   4c2dc:	e0bff417 	ldw	r2,-48(fp)
   4c2e0:	10007826 	beq	r2,zero,4c4c4 <_realloc_r+0x8f0>
   4c2e4:	e0fff517 	ldw	r3,-44(fp)
   4c2e8:	e0bfe417 	ldw	r2,-112(fp)
   4c2ec:	1885883a 	add	r2,r3,r2
   4c2f0:	1007883a 	mov	r3,r2
   4c2f4:	e0bff117 	ldw	r2,-60(fp)
   4c2f8:	18807216 	blt	r3,r2,4c4c4 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
   4c2fc:	e0bff417 	ldw	r2,-48(fp)
   4c300:	10800317 	ldw	r2,12(r2)
   4c304:	e0bff215 	stw	r2,-56(fp)
   4c308:	e0bff417 	ldw	r2,-48(fp)
   4c30c:	10800217 	ldw	r2,8(r2)
   4c310:	e0bff315 	stw	r2,-52(fp)
   4c314:	e0bff317 	ldw	r2,-52(fp)
   4c318:	e0fff217 	ldw	r3,-56(fp)
   4c31c:	10c00315 	stw	r3,12(r2)
   4c320:	e0bff217 	ldw	r2,-56(fp)
   4c324:	e0fff317 	ldw	r3,-52(fp)
   4c328:	10c00215 	stw	r3,8(r2)
        newp = prev;
   4c32c:	e0bff417 	ldw	r2,-48(fp)
   4c330:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
   4c334:	e0ffe417 	ldw	r3,-112(fp)
   4c338:	e0bff517 	ldw	r2,-44(fp)
   4c33c:	1885883a 	add	r2,r3,r2
   4c340:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
   4c344:	e0bfe317 	ldw	r2,-116(fp)
   4c348:	10800204 	addi	r2,r2,8
   4c34c:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4c350:	e0bff017 	ldw	r2,-64(fp)
   4c354:	10bfff04 	addi	r2,r2,-4
   4c358:	e0bff915 	stw	r2,-28(fp)
   4c35c:	e0bff917 	ldw	r2,-28(fp)
   4c360:	10800968 	cmpgeui	r2,r2,37
   4c364:	1000521e 	bne	r2,zero,4c4b0 <_realloc_r+0x8dc>
   4c368:	e0bffe17 	ldw	r2,-8(fp)
   4c36c:	e0bfeb15 	stw	r2,-84(fp)
   4c370:	e0bff617 	ldw	r2,-40(fp)
   4c374:	e0bfec15 	stw	r2,-80(fp)
   4c378:	e0bff917 	ldw	r2,-28(fp)
   4c37c:	10800530 	cmpltui	r2,r2,20
   4c380:	1000361e 	bne	r2,zero,4c45c <_realloc_r+0x888>
   4c384:	e0bfec17 	ldw	r2,-80(fp)
   4c388:	10c00104 	addi	r3,r2,4
   4c38c:	e0ffec15 	stw	r3,-80(fp)
   4c390:	e0ffeb17 	ldw	r3,-84(fp)
   4c394:	19000104 	addi	r4,r3,4
   4c398:	e13feb15 	stw	r4,-84(fp)
   4c39c:	18c00017 	ldw	r3,0(r3)
   4c3a0:	10c00015 	stw	r3,0(r2)
   4c3a4:	e0bfec17 	ldw	r2,-80(fp)
   4c3a8:	10c00104 	addi	r3,r2,4
   4c3ac:	e0ffec15 	stw	r3,-80(fp)
   4c3b0:	e0ffeb17 	ldw	r3,-84(fp)
   4c3b4:	19000104 	addi	r4,r3,4
   4c3b8:	e13feb15 	stw	r4,-84(fp)
   4c3bc:	18c00017 	ldw	r3,0(r3)
   4c3c0:	10c00015 	stw	r3,0(r2)
   4c3c4:	e0bff917 	ldw	r2,-28(fp)
   4c3c8:	10800730 	cmpltui	r2,r2,28
   4c3cc:	1000231e 	bne	r2,zero,4c45c <_realloc_r+0x888>
   4c3d0:	e0bfec17 	ldw	r2,-80(fp)
   4c3d4:	10c00104 	addi	r3,r2,4
   4c3d8:	e0ffec15 	stw	r3,-80(fp)
   4c3dc:	e0ffeb17 	ldw	r3,-84(fp)
   4c3e0:	19000104 	addi	r4,r3,4
   4c3e4:	e13feb15 	stw	r4,-84(fp)
   4c3e8:	18c00017 	ldw	r3,0(r3)
   4c3ec:	10c00015 	stw	r3,0(r2)
   4c3f0:	e0bfec17 	ldw	r2,-80(fp)
   4c3f4:	10c00104 	addi	r3,r2,4
   4c3f8:	e0ffec15 	stw	r3,-80(fp)
   4c3fc:	e0ffeb17 	ldw	r3,-84(fp)
   4c400:	19000104 	addi	r4,r3,4
   4c404:	e13feb15 	stw	r4,-84(fp)
   4c408:	18c00017 	ldw	r3,0(r3)
   4c40c:	10c00015 	stw	r3,0(r2)
   4c410:	e0bff917 	ldw	r2,-28(fp)
   4c414:	10800930 	cmpltui	r2,r2,36
   4c418:	1000101e 	bne	r2,zero,4c45c <_realloc_r+0x888>
   4c41c:	e0bfec17 	ldw	r2,-80(fp)
   4c420:	10c00104 	addi	r3,r2,4
   4c424:	e0ffec15 	stw	r3,-80(fp)
   4c428:	e0ffeb17 	ldw	r3,-84(fp)
   4c42c:	19000104 	addi	r4,r3,4
   4c430:	e13feb15 	stw	r4,-84(fp)
   4c434:	18c00017 	ldw	r3,0(r3)
   4c438:	10c00015 	stw	r3,0(r2)
   4c43c:	e0bfec17 	ldw	r2,-80(fp)
   4c440:	10c00104 	addi	r3,r2,4
   4c444:	e0ffec15 	stw	r3,-80(fp)
   4c448:	e0ffeb17 	ldw	r3,-84(fp)
   4c44c:	19000104 	addi	r4,r3,4
   4c450:	e13feb15 	stw	r4,-84(fp)
   4c454:	18c00017 	ldw	r3,0(r3)
   4c458:	10c00015 	stw	r3,0(r2)
   4c45c:	e0bfec17 	ldw	r2,-80(fp)
   4c460:	10c00104 	addi	r3,r2,4
   4c464:	e0ffec15 	stw	r3,-80(fp)
   4c468:	e0ffeb17 	ldw	r3,-84(fp)
   4c46c:	19000104 	addi	r4,r3,4
   4c470:	e13feb15 	stw	r4,-84(fp)
   4c474:	18c00017 	ldw	r3,0(r3)
   4c478:	10c00015 	stw	r3,0(r2)
   4c47c:	e0bfec17 	ldw	r2,-80(fp)
   4c480:	10c00104 	addi	r3,r2,4
   4c484:	e0ffec15 	stw	r3,-80(fp)
   4c488:	e0ffeb17 	ldw	r3,-84(fp)
   4c48c:	19000104 	addi	r4,r3,4
   4c490:	e13feb15 	stw	r4,-84(fp)
   4c494:	18c00017 	ldw	r3,0(r3)
   4c498:	10c00015 	stw	r3,0(r2)
   4c49c:	e0bfeb17 	ldw	r2,-84(fp)
   4c4a0:	10c00017 	ldw	r3,0(r2)
   4c4a4:	e0bfec17 	ldw	r2,-80(fp)
   4c4a8:	10c00015 	stw	r3,0(r2)
        goto split;
   4c4ac:	00008706 	br	4c6cc <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4c4b0:	e1bff917 	ldw	r6,-28(fp)
   4c4b4:	e17ffe17 	ldw	r5,-8(fp)
   4c4b8:	e13ff617 	ldw	r4,-40(fp)
   4c4bc:	004b95c0 	call	4b95c <memmove>
        goto split;
   4c4c0:	00008206 	br	4c6cc <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
   4c4c4:	e17fff17 	ldw	r5,-4(fp)
   4c4c8:	e13ffd17 	ldw	r4,-12(fp)
   4c4cc:	00465280 	call	46528 <_malloc_r>
   4c4d0:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
   4c4d4:	e0bff617 	ldw	r2,-40(fp)
   4c4d8:	1000041e 	bne	r2,zero,4c4ec <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
   4c4dc:	e13ffd17 	ldw	r4,-12(fp)
   4c4e0:	00507f40 	call	507f4 <__malloc_unlock>
      return 0;
   4c4e4:	0005883a 	mov	r2,zero
   4c4e8:	0000b106 	br	4c7b0 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
   4c4ec:	e0bff617 	ldw	r2,-40(fp)
   4c4f0:	10bffe04 	addi	r2,r2,-8
   4c4f4:	e0bfe315 	stw	r2,-116(fp)
   4c4f8:	e0bfef17 	ldw	r2,-68(fp)
   4c4fc:	10c00117 	ldw	r3,4(r2)
   4c500:	00bfff84 	movi	r2,-2
   4c504:	1884703a 	and	r2,r3,r2
   4c508:	e0ffef17 	ldw	r3,-68(fp)
   4c50c:	1885883a 	add	r2,r3,r2
   4c510:	e0ffe317 	ldw	r3,-116(fp)
   4c514:	18800a1e 	bne	r3,r2,4c540 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
   4c518:	e0bfe317 	ldw	r2,-116(fp)
   4c51c:	10c00117 	ldw	r3,4(r2)
   4c520:	00bfff04 	movi	r2,-4
   4c524:	1884703a 	and	r2,r3,r2
   4c528:	e0ffe417 	ldw	r3,-112(fp)
   4c52c:	1885883a 	add	r2,r3,r2
   4c530:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
   4c534:	e0bfef17 	ldw	r2,-68(fp)
   4c538:	e0bfe315 	stw	r2,-116(fp)
      goto split;
   4c53c:	00006306 	br	4c6cc <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4c540:	e0bff017 	ldw	r2,-64(fp)
   4c544:	10bfff04 	addi	r2,r2,-4
   4c548:	e0bffa15 	stw	r2,-24(fp)
   4c54c:	e0bffa17 	ldw	r2,-24(fp)
   4c550:	10800968 	cmpgeui	r2,r2,37
   4c554:	1000521e 	bne	r2,zero,4c6a0 <_realloc_r+0xacc>
   4c558:	e0bffe17 	ldw	r2,-8(fp)
   4c55c:	e0bfed15 	stw	r2,-76(fp)
   4c560:	e0bff617 	ldw	r2,-40(fp)
   4c564:	e0bfee15 	stw	r2,-72(fp)
   4c568:	e0bffa17 	ldw	r2,-24(fp)
   4c56c:	10800530 	cmpltui	r2,r2,20
   4c570:	1000361e 	bne	r2,zero,4c64c <_realloc_r+0xa78>
   4c574:	e0bfee17 	ldw	r2,-72(fp)
   4c578:	10c00104 	addi	r3,r2,4
   4c57c:	e0ffee15 	stw	r3,-72(fp)
   4c580:	e0ffed17 	ldw	r3,-76(fp)
   4c584:	19000104 	addi	r4,r3,4
   4c588:	e13fed15 	stw	r4,-76(fp)
   4c58c:	18c00017 	ldw	r3,0(r3)
   4c590:	10c00015 	stw	r3,0(r2)
   4c594:	e0bfee17 	ldw	r2,-72(fp)
   4c598:	10c00104 	addi	r3,r2,4
   4c59c:	e0ffee15 	stw	r3,-72(fp)
   4c5a0:	e0ffed17 	ldw	r3,-76(fp)
   4c5a4:	19000104 	addi	r4,r3,4
   4c5a8:	e13fed15 	stw	r4,-76(fp)
   4c5ac:	18c00017 	ldw	r3,0(r3)
   4c5b0:	10c00015 	stw	r3,0(r2)
   4c5b4:	e0bffa17 	ldw	r2,-24(fp)
   4c5b8:	10800730 	cmpltui	r2,r2,28
   4c5bc:	1000231e 	bne	r2,zero,4c64c <_realloc_r+0xa78>
   4c5c0:	e0bfee17 	ldw	r2,-72(fp)
   4c5c4:	10c00104 	addi	r3,r2,4
   4c5c8:	e0ffee15 	stw	r3,-72(fp)
   4c5cc:	e0ffed17 	ldw	r3,-76(fp)
   4c5d0:	19000104 	addi	r4,r3,4
   4c5d4:	e13fed15 	stw	r4,-76(fp)
   4c5d8:	18c00017 	ldw	r3,0(r3)
   4c5dc:	10c00015 	stw	r3,0(r2)
   4c5e0:	e0bfee17 	ldw	r2,-72(fp)
   4c5e4:	10c00104 	addi	r3,r2,4
   4c5e8:	e0ffee15 	stw	r3,-72(fp)
   4c5ec:	e0ffed17 	ldw	r3,-76(fp)
   4c5f0:	19000104 	addi	r4,r3,4
   4c5f4:	e13fed15 	stw	r4,-76(fp)
   4c5f8:	18c00017 	ldw	r3,0(r3)
   4c5fc:	10c00015 	stw	r3,0(r2)
   4c600:	e0bffa17 	ldw	r2,-24(fp)
   4c604:	10800930 	cmpltui	r2,r2,36
   4c608:	1000101e 	bne	r2,zero,4c64c <_realloc_r+0xa78>
   4c60c:	e0bfee17 	ldw	r2,-72(fp)
   4c610:	10c00104 	addi	r3,r2,4
   4c614:	e0ffee15 	stw	r3,-72(fp)
   4c618:	e0ffed17 	ldw	r3,-76(fp)
   4c61c:	19000104 	addi	r4,r3,4
   4c620:	e13fed15 	stw	r4,-76(fp)
   4c624:	18c00017 	ldw	r3,0(r3)
   4c628:	10c00015 	stw	r3,0(r2)
   4c62c:	e0bfee17 	ldw	r2,-72(fp)
   4c630:	10c00104 	addi	r3,r2,4
   4c634:	e0ffee15 	stw	r3,-72(fp)
   4c638:	e0ffed17 	ldw	r3,-76(fp)
   4c63c:	19000104 	addi	r4,r3,4
   4c640:	e13fed15 	stw	r4,-76(fp)
   4c644:	18c00017 	ldw	r3,0(r3)
   4c648:	10c00015 	stw	r3,0(r2)
   4c64c:	e0bfee17 	ldw	r2,-72(fp)
   4c650:	10c00104 	addi	r3,r2,4
   4c654:	e0ffee15 	stw	r3,-72(fp)
   4c658:	e0ffed17 	ldw	r3,-76(fp)
   4c65c:	19000104 	addi	r4,r3,4
   4c660:	e13fed15 	stw	r4,-76(fp)
   4c664:	18c00017 	ldw	r3,0(r3)
   4c668:	10c00015 	stw	r3,0(r2)
   4c66c:	e0bfee17 	ldw	r2,-72(fp)
   4c670:	10c00104 	addi	r3,r2,4
   4c674:	e0ffee15 	stw	r3,-72(fp)
   4c678:	e0ffed17 	ldw	r3,-76(fp)
   4c67c:	19000104 	addi	r4,r3,4
   4c680:	e13fed15 	stw	r4,-76(fp)
   4c684:	18c00017 	ldw	r3,0(r3)
   4c688:	10c00015 	stw	r3,0(r2)
   4c68c:	e0bfed17 	ldw	r2,-76(fp)
   4c690:	10c00017 	ldw	r3,0(r2)
   4c694:	e0bfee17 	ldw	r2,-72(fp)
   4c698:	10c00015 	stw	r3,0(r2)
   4c69c:	00000406 	br	4c6b0 <_realloc_r+0xadc>
   4c6a0:	e1bffa17 	ldw	r6,-24(fp)
   4c6a4:	e17ffe17 	ldw	r5,-8(fp)
   4c6a8:	e13ff617 	ldw	r4,-40(fp)
   4c6ac:	004b95c0 	call	4b95c <memmove>
    fREe(RCALL oldmem);
   4c6b0:	e17ffe17 	ldw	r5,-8(fp)
   4c6b4:	e13ffd17 	ldw	r4,-12(fp)
   4c6b8:	00454c00 	call	454c0 <_free_r>
    MALLOC_UNLOCK;
   4c6bc:	e13ffd17 	ldw	r4,-12(fp)
   4c6c0:	00507f40 	call	507f4 <__malloc_unlock>
    return newmem;
   4c6c4:	e0bff617 	ldw	r2,-40(fp)
   4c6c8:	00003906 	br	4c7b0 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
   4c6cc:	e0ffe417 	ldw	r3,-112(fp)
   4c6d0:	e0bff117 	ldw	r2,-60(fp)
   4c6d4:	1885c83a 	sub	r2,r3,r2
   4c6d8:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
   4c6dc:	e0bffb17 	ldw	r2,-20(fp)
   4c6e0:	10800430 	cmpltui	r2,r2,16
   4c6e4:	10001e1e 	bne	r2,zero,4c760 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
   4c6e8:	e0ffe317 	ldw	r3,-116(fp)
   4c6ec:	e0bff117 	ldw	r2,-60(fp)
   4c6f0:	1885883a 	add	r2,r3,r2
   4c6f4:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
   4c6f8:	e0bfe317 	ldw	r2,-116(fp)
   4c6fc:	10800117 	ldw	r2,4(r2)
   4c700:	10c0004c 	andi	r3,r2,1
   4c704:	e0bff117 	ldw	r2,-60(fp)
   4c708:	1886b03a 	or	r3,r3,r2
   4c70c:	e0bfe317 	ldw	r2,-116(fp)
   4c710:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
   4c714:	e0bffb17 	ldw	r2,-20(fp)
   4c718:	10c00054 	ori	r3,r2,1
   4c71c:	e0bffc17 	ldw	r2,-16(fp)
   4c720:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
   4c724:	e0fffc17 	ldw	r3,-16(fp)
   4c728:	e0bffb17 	ldw	r2,-20(fp)
   4c72c:	1885883a 	add	r2,r3,r2
   4c730:	e13ffc17 	ldw	r4,-16(fp)
   4c734:	e0fffb17 	ldw	r3,-20(fp)
   4c738:	20c7883a 	add	r3,r4,r3
   4c73c:	18c00117 	ldw	r3,4(r3)
   4c740:	18c00054 	ori	r3,r3,1
   4c744:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   4c748:	e0bffc17 	ldw	r2,-16(fp)
   4c74c:	10800204 	addi	r2,r2,8
   4c750:	100b883a 	mov	r5,r2
   4c754:	e13ffd17 	ldw	r4,-12(fp)
   4c758:	00454c00 	call	454c0 <_free_r>
   4c75c:	00001006 	br	4c7a0 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
   4c760:	e0bfe317 	ldw	r2,-116(fp)
   4c764:	10800117 	ldw	r2,4(r2)
   4c768:	10c0004c 	andi	r3,r2,1
   4c76c:	e0bfe417 	ldw	r2,-112(fp)
   4c770:	1886b03a 	or	r3,r3,r2
   4c774:	e0bfe317 	ldw	r2,-116(fp)
   4c778:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
   4c77c:	e0ffe317 	ldw	r3,-116(fp)
   4c780:	e0bfe417 	ldw	r2,-112(fp)
   4c784:	1885883a 	add	r2,r3,r2
   4c788:	e13fe317 	ldw	r4,-116(fp)
   4c78c:	e0ffe417 	ldw	r3,-112(fp)
   4c790:	20c7883a 	add	r3,r4,r3
   4c794:	18c00117 	ldw	r3,4(r3)
   4c798:	18c00054 	ori	r3,r3,1
   4c79c:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
   4c7a0:	e13ffd17 	ldw	r4,-12(fp)
   4c7a4:	00507f40 	call	507f4 <__malloc_unlock>
  return chunk2mem(newp);
   4c7a8:	e0bfe317 	ldw	r2,-116(fp)
   4c7ac:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   4c7b0:	e037883a 	mov	sp,fp
   4c7b4:	dfc00117 	ldw	ra,4(sp)
   4c7b8:	df000017 	ldw	fp,0(sp)
   4c7bc:	dec00204 	addi	sp,sp,8
   4c7c0:	f800283a 	ret

0004c7c4 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
   4c7c4:	defff904 	addi	sp,sp,-28
   4c7c8:	dfc00615 	stw	ra,24(sp)
   4c7cc:	df000515 	stw	fp,20(sp)
   4c7d0:	dc800415 	stw	r18,16(sp)
   4c7d4:	dc400315 	stw	r17,12(sp)
   4c7d8:	dc000215 	stw	r16,8(sp)
   4c7dc:	df000504 	addi	fp,sp,20
   4c7e0:	e13ffc15 	stw	r4,-16(fp)
   4c7e4:	2825883a 	mov	r18,r5
   4c7e8:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
   4c7ec:	e0bffc17 	ldw	r2,-16(fp)
   4c7f0:	e0bffb15 	stw	r2,-20(fp)
   4c7f4:	e0bffb17 	ldw	r2,-20(fp)
   4c7f8:	10000526 	beq	r2,zero,4c810 <__swbuf_r+0x4c>
   4c7fc:	e0bffb17 	ldw	r2,-20(fp)
   4c800:	10800e17 	ldw	r2,56(r2)
   4c804:	1000021e 	bne	r2,zero,4c810 <__swbuf_r+0x4c>
   4c808:	e13ffb17 	ldw	r4,-20(fp)
   4c80c:	00452a00 	call	452a0 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
   4c810:	80800617 	ldw	r2,24(r16)
   4c814:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
   4c818:	8080030b 	ldhu	r2,12(r16)
   4c81c:	10bfffcc 	andi	r2,r2,65535
   4c820:	1080020c 	andi	r2,r2,8
   4c824:	10000226 	beq	r2,zero,4c830 <__swbuf_r+0x6c>
   4c828:	80800417 	ldw	r2,16(r16)
   4c82c:	1000061e 	bne	r2,zero,4c848 <__swbuf_r+0x84>
   4c830:	800b883a 	mov	r5,r16
   4c834:	e13ffc17 	ldw	r4,-16(fp)
   4c838:	0042a280 	call	42a28 <__swsetup_r>
   4c83c:	10000226 	beq	r2,zero,4c848 <__swbuf_r+0x84>
    return EOF;
   4c840:	00bfffc4 	movi	r2,-1
   4c844:	00003106 	br	4c90c <__swbuf_r+0x148>
  c = (unsigned char) c;
   4c848:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
   4c84c:	8080030b 	ldhu	r2,12(r16)
   4c850:	10bfffcc 	andi	r2,r2,65535
   4c854:	1088000c 	andi	r2,r2,8192
   4c858:	1000071e 	bne	r2,zero,4c878 <__swbuf_r+0xb4>
   4c85c:	8080030b 	ldhu	r2,12(r16)
   4c860:	10880014 	ori	r2,r2,8192
   4c864:	8080030d 	sth	r2,12(r16)
   4c868:	80c01917 	ldw	r3,100(r16)
   4c86c:	00b7ffc4 	movi	r2,-8193
   4c870:	1884703a 	and	r2,r3,r2
   4c874:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
   4c878:	80800017 	ldw	r2,0(r16)
   4c87c:	1007883a 	mov	r3,r2
   4c880:	80800417 	ldw	r2,16(r16)
   4c884:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
   4c888:	80800517 	ldw	r2,20(r16)
   4c88c:	88800716 	blt	r17,r2,4c8ac <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
   4c890:	800b883a 	mov	r5,r16
   4c894:	e13ffc17 	ldw	r4,-16(fp)
   4c898:	0044e080 	call	44e08 <_fflush_r>
   4c89c:	10000226 	beq	r2,zero,4c8a8 <__swbuf_r+0xe4>
	return EOF;
   4c8a0:	00bfffc4 	movi	r2,-1
   4c8a4:	00001906 	br	4c90c <__swbuf_r+0x148>
      n = 0;
   4c8a8:	0023883a 	mov	r17,zero
    }
  fp->_w--;
   4c8ac:	80800217 	ldw	r2,8(r16)
   4c8b0:	10bfffc4 	addi	r2,r2,-1
   4c8b4:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
   4c8b8:	80800017 	ldw	r2,0(r16)
   4c8bc:	10c00044 	addi	r3,r2,1
   4c8c0:	80c00015 	stw	r3,0(r16)
   4c8c4:	9007883a 	mov	r3,r18
   4c8c8:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
   4c8cc:	8c400044 	addi	r17,r17,1
   4c8d0:	80800517 	ldw	r2,20(r16)
   4c8d4:	88800626 	beq	r17,r2,4c8f0 <__swbuf_r+0x12c>
   4c8d8:	8080030b 	ldhu	r2,12(r16)
   4c8dc:	10bfffcc 	andi	r2,r2,65535
   4c8e0:	1080004c 	andi	r2,r2,1
   4c8e4:	10000826 	beq	r2,zero,4c908 <__swbuf_r+0x144>
   4c8e8:	90800298 	cmpnei	r2,r18,10
   4c8ec:	1000061e 	bne	r2,zero,4c908 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
   4c8f0:	800b883a 	mov	r5,r16
   4c8f4:	e13ffc17 	ldw	r4,-16(fp)
   4c8f8:	0044e080 	call	44e08 <_fflush_r>
   4c8fc:	10000226 	beq	r2,zero,4c908 <__swbuf_r+0x144>
      return EOF;
   4c900:	00bfffc4 	movi	r2,-1
   4c904:	00000106 	br	4c90c <__swbuf_r+0x148>
  return c;
   4c908:	9005883a 	mov	r2,r18
}
   4c90c:	e6fffd04 	addi	sp,fp,-12
   4c910:	dfc00417 	ldw	ra,16(sp)
   4c914:	df000317 	ldw	fp,12(sp)
   4c918:	dc800217 	ldw	r18,8(sp)
   4c91c:	dc400117 	ldw	r17,4(sp)
   4c920:	dc000017 	ldw	r16,0(sp)
   4c924:	dec00504 	addi	sp,sp,20
   4c928:	f800283a 	ret

0004c92c <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
   4c92c:	defffe04 	addi	sp,sp,-8
   4c930:	dfc00115 	stw	ra,4(sp)
   4c934:	df000015 	stw	fp,0(sp)
   4c938:	d839883a 	mov	fp,sp
   4c93c:	2007883a 	mov	r3,r4
   4c940:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
   4c944:	d0a00417 	ldw	r2,-32752(gp)
   4c948:	200d883a 	mov	r6,r4
   4c94c:	180b883a 	mov	r5,r3
   4c950:	1009883a 	mov	r4,r2
   4c954:	004c7c40 	call	4c7c4 <__swbuf_r>
}
   4c958:	e037883a 	mov	sp,fp
   4c95c:	dfc00117 	ldw	ra,4(sp)
   4c960:	df000017 	ldw	fp,0(sp)
   4c964:	dec00204 	addi	sp,sp,8
   4c968:	f800283a 	ret

0004c96c <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
   4c96c:	defff404 	addi	sp,sp,-48
   4c970:	dfc00b15 	stw	ra,44(sp)
   4c974:	df000a15 	stw	fp,40(sp)
   4c978:	dc000915 	stw	r16,36(sp)
   4c97c:	df000a04 	addi	fp,sp,40
   4c980:	e13ffb15 	stw	r4,-20(fp)
   4c984:	e17ffc15 	stw	r5,-16(fp)
   4c988:	e1bffd15 	stw	r6,-12(fp)
   4c98c:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
   4c990:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
   4c994:	e0bffc17 	ldw	r2,-16(fp)
   4c998:	10000d1e 	bne	r2,zero,4c9d0 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
   4c99c:	d4200917 	ldw	r16,-32732(gp)
   4c9a0:	0045e280 	call	45e28 <__locale_charset>
   4c9a4:	1009883a 	mov	r4,r2
   4c9a8:	e0fff804 	addi	r3,fp,-32
   4c9ac:	e0bffe17 	ldw	r2,-8(fp)
   4c9b0:	d8800015 	stw	r2,0(sp)
   4c9b4:	200f883a 	mov	r7,r4
   4c9b8:	000d883a 	mov	r6,zero
   4c9bc:	180b883a 	mov	r5,r3
   4c9c0:	e13ffb17 	ldw	r4,-20(fp)
   4c9c4:	803ee83a 	callr	r16
   4c9c8:	e0bff715 	stw	r2,-36(fp)
   4c9cc:	00000b06 	br	4c9fc <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
   4c9d0:	d4200917 	ldw	r16,-32732(gp)
   4c9d4:	0045e280 	call	45e28 <__locale_charset>
   4c9d8:	1007883a 	mov	r3,r2
   4c9dc:	e0bffe17 	ldw	r2,-8(fp)
   4c9e0:	d8800015 	stw	r2,0(sp)
   4c9e4:	180f883a 	mov	r7,r3
   4c9e8:	e1bffd17 	ldw	r6,-12(fp)
   4c9ec:	e17ffc17 	ldw	r5,-16(fp)
   4c9f0:	e13ffb17 	ldw	r4,-20(fp)
   4c9f4:	803ee83a 	callr	r16
   4c9f8:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   4c9fc:	e0bff717 	ldw	r2,-36(fp)
   4ca00:	10bfffd8 	cmpnei	r2,r2,-1
   4ca04:	1000071e 	bne	r2,zero,4ca24 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
   4ca08:	e0bffe17 	ldw	r2,-8(fp)
   4ca0c:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
   4ca10:	e0bffb17 	ldw	r2,-20(fp)
   4ca14:	00c02284 	movi	r3,138
   4ca18:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   4ca1c:	00bfffc4 	movi	r2,-1
   4ca20:	00000106 	br	4ca28 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
   4ca24:	e0bff717 	ldw	r2,-36(fp)
}
   4ca28:	e6ffff04 	addi	sp,fp,-4
   4ca2c:	dfc00217 	ldw	ra,8(sp)
   4ca30:	df000117 	ldw	fp,4(sp)
   4ca34:	dc000017 	ldw	r16,0(sp)
   4ca38:	dec00304 	addi	sp,sp,12
   4ca3c:	f800283a 	ret

0004ca40 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
   4ca40:	defff404 	addi	sp,sp,-48
   4ca44:	dfc00b15 	stw	ra,44(sp)
   4ca48:	df000a15 	stw	fp,40(sp)
   4ca4c:	dc000915 	stw	r16,36(sp)
   4ca50:	df000a04 	addi	fp,sp,40
   4ca54:	e13ffc15 	stw	r4,-16(fp)
   4ca58:	e17ffd15 	stw	r5,-12(fp)
   4ca5c:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
   4ca60:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
   4ca64:	d0a00417 	ldw	r2,-32752(gp)
   4ca68:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
   4ca6c:	e0bffc17 	ldw	r2,-16(fp)
   4ca70:	10000d1e 	bne	r2,zero,4caa8 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
   4ca74:	d4200917 	ldw	r16,-32732(gp)
   4ca78:	0045e280 	call	45e28 <__locale_charset>
   4ca7c:	1009883a 	mov	r4,r2
   4ca80:	e0fff904 	addi	r3,fp,-28
   4ca84:	e0bffe17 	ldw	r2,-8(fp)
   4ca88:	d8800015 	stw	r2,0(sp)
   4ca8c:	200f883a 	mov	r7,r4
   4ca90:	000d883a 	mov	r6,zero
   4ca94:	180b883a 	mov	r5,r3
   4ca98:	e13ff817 	ldw	r4,-32(fp)
   4ca9c:	803ee83a 	callr	r16
   4caa0:	e0bff715 	stw	r2,-36(fp)
   4caa4:	00000b06 	br	4cad4 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
   4caa8:	d4200917 	ldw	r16,-32732(gp)
   4caac:	0045e280 	call	45e28 <__locale_charset>
   4cab0:	1007883a 	mov	r3,r2
   4cab4:	e0bffe17 	ldw	r2,-8(fp)
   4cab8:	d8800015 	stw	r2,0(sp)
   4cabc:	180f883a 	mov	r7,r3
   4cac0:	e1bffd17 	ldw	r6,-12(fp)
   4cac4:	e17ffc17 	ldw	r5,-16(fp)
   4cac8:	e13ff817 	ldw	r4,-32(fp)
   4cacc:	803ee83a 	callr	r16
   4cad0:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   4cad4:	e0bff717 	ldw	r2,-36(fp)
   4cad8:	10bfffd8 	cmpnei	r2,r2,-1
   4cadc:	1000071e 	bne	r2,zero,4cafc <wcrtomb+0xbc>
    {
      ps->__count = 0;
   4cae0:	e0bffe17 	ldw	r2,-8(fp)
   4cae4:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
   4cae8:	e0bff817 	ldw	r2,-32(fp)
   4caec:	00c02284 	movi	r3,138
   4caf0:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   4caf4:	00bfffc4 	movi	r2,-1
   4caf8:	00000106 	br	4cb00 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
   4cafc:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   4cb00:	e6ffff04 	addi	sp,fp,-4
   4cb04:	dfc00217 	ldw	ra,8(sp)
   4cb08:	df000117 	ldw	fp,4(sp)
   4cb0c:	dc000017 	ldw	r16,0(sp)
   4cb10:	dec00304 	addi	sp,sp,12
   4cb14:	f800283a 	ret

0004cb18 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
   4cb18:	defff804 	addi	sp,sp,-32
   4cb1c:	dfc00715 	stw	ra,28(sp)
   4cb20:	df000615 	stw	fp,24(sp)
   4cb24:	dc000515 	stw	r16,20(sp)
   4cb28:	df000604 	addi	fp,sp,24
   4cb2c:	e13ffb15 	stw	r4,-20(fp)
   4cb30:	e17ffc15 	stw	r5,-16(fp)
   4cb34:	e1bffd15 	stw	r6,-12(fp)
   4cb38:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
   4cb3c:	d4200917 	ldw	r16,-32732(gp)
   4cb40:	0045e280 	call	45e28 <__locale_charset>
   4cb44:	1007883a 	mov	r3,r2
   4cb48:	e0bffe17 	ldw	r2,-8(fp)
   4cb4c:	d8800015 	stw	r2,0(sp)
   4cb50:	180f883a 	mov	r7,r3
   4cb54:	e1bffd17 	ldw	r6,-12(fp)
   4cb58:	e17ffc17 	ldw	r5,-16(fp)
   4cb5c:	e13ffb17 	ldw	r4,-20(fp)
   4cb60:	803ee83a 	callr	r16
}
   4cb64:	e6ffff04 	addi	sp,fp,-4
   4cb68:	dfc00217 	ldw	ra,8(sp)
   4cb6c:	df000117 	ldw	fp,4(sp)
   4cb70:	dc000017 	ldw	r16,0(sp)
   4cb74:	dec00304 	addi	sp,sp,12
   4cb78:	f800283a 	ret

0004cb7c <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
   4cb7c:	defffa04 	addi	sp,sp,-24
   4cb80:	df000515 	stw	fp,20(sp)
   4cb84:	df000504 	addi	fp,sp,20
   4cb88:	e13ffc15 	stw	r4,-16(fp)
   4cb8c:	e17ffd15 	stw	r5,-12(fp)
   4cb90:	e1bffe15 	stw	r6,-8(fp)
   4cb94:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
   4cb98:	e0bffe17 	ldw	r2,-8(fp)
   4cb9c:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
   4cba0:	e0bffd17 	ldw	r2,-12(fp)
   4cba4:	1000021e 	bne	r2,zero,4cbb0 <__ascii_wctomb+0x34>
    return 0;
   4cba8:	0005883a 	mov	r2,zero
   4cbac:	00000d06 	br	4cbe4 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
   4cbb0:	e0bffb17 	ldw	r2,-20(fp)
   4cbb4:	10804030 	cmpltui	r2,r2,256
   4cbb8:	1000051e 	bne	r2,zero,4cbd0 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
   4cbbc:	e0bffc17 	ldw	r2,-16(fp)
   4cbc0:	00c02284 	movi	r3,138
   4cbc4:	10c00015 	stw	r3,0(r2)
      return -1;
   4cbc8:	00bfffc4 	movi	r2,-1
   4cbcc:	00000506 	br	4cbe4 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
   4cbd0:	e0bffb17 	ldw	r2,-20(fp)
   4cbd4:	1007883a 	mov	r3,r2
   4cbd8:	e0bffd17 	ldw	r2,-12(fp)
   4cbdc:	10c00005 	stb	r3,0(r2)
  return 1;
   4cbe0:	00800044 	movi	r2,1
}
   4cbe4:	e037883a 	mov	sp,fp
   4cbe8:	df000017 	ldw	fp,0(sp)
   4cbec:	dec00104 	addi	sp,sp,4
   4cbf0:	f800283a 	ret

0004cbf4 <__udivdi3>:
   4cbf4:	defff404 	addi	sp,sp,-48
   4cbf8:	dcc00515 	stw	r19,20(sp)
   4cbfc:	dc000215 	stw	r16,8(sp)
   4cc00:	dfc00b15 	stw	ra,44(sp)
   4cc04:	df000a15 	stw	fp,40(sp)
   4cc08:	ddc00915 	stw	r23,36(sp)
   4cc0c:	dd800815 	stw	r22,32(sp)
   4cc10:	dd400715 	stw	r21,28(sp)
   4cc14:	dd000615 	stw	r20,24(sp)
   4cc18:	dc800415 	stw	r18,16(sp)
   4cc1c:	dc400315 	stw	r17,12(sp)
   4cc20:	2027883a 	mov	r19,r4
   4cc24:	2821883a 	mov	r16,r5
   4cc28:	3800461e 	bne	r7,zero,4cd44 <__udivdi3+0x150>
   4cc2c:	3023883a 	mov	r17,r6
   4cc30:	2025883a 	mov	r18,r4
   4cc34:	2980572e 	bgeu	r5,r6,4cd94 <__udivdi3+0x1a0>
   4cc38:	00bfffd4 	movui	r2,65535
   4cc3c:	282d883a 	mov	r22,r5
   4cc40:	1180b236 	bltu	r2,r6,4cf0c <__udivdi3+0x318>
   4cc44:	00803fc4 	movi	r2,255
   4cc48:	1185803a 	cmpltu	r2,r2,r6
   4cc4c:	100490fa 	slli	r2,r2,3
   4cc50:	3086d83a 	srl	r3,r6,r2
   4cc54:	01000174 	movhi	r4,5
   4cc58:	210b3284 	addi	r4,r4,11466
   4cc5c:	20c7883a 	add	r3,r4,r3
   4cc60:	18c00003 	ldbu	r3,0(r3)
   4cc64:	1885883a 	add	r2,r3,r2
   4cc68:	00c00804 	movi	r3,32
   4cc6c:	1887c83a 	sub	r3,r3,r2
   4cc70:	18000526 	beq	r3,zero,4cc88 <__udivdi3+0x94>
   4cc74:	80e0983a 	sll	r16,r16,r3
   4cc78:	9884d83a 	srl	r2,r19,r2
   4cc7c:	30e2983a 	sll	r17,r6,r3
   4cc80:	98e4983a 	sll	r18,r19,r3
   4cc84:	142cb03a 	or	r22,r2,r16
   4cc88:	882ad43a 	srli	r21,r17,16
   4cc8c:	b009883a 	mov	r4,r22
   4cc90:	8d3fffcc 	andi	r20,r17,65535
   4cc94:	a80b883a 	mov	r5,r21
   4cc98:	004d9100 	call	4d910 <__umodsi3>
   4cc9c:	b009883a 	mov	r4,r22
   4cca0:	a80b883a 	mov	r5,r21
   4cca4:	1027883a 	mov	r19,r2
   4cca8:	004d8ac0 	call	4d8ac <__udivsi3>
   4ccac:	100b883a 	mov	r5,r2
   4ccb0:	a009883a 	mov	r4,r20
   4ccb4:	102d883a 	mov	r22,r2
   4ccb8:	004d9680 	call	4d968 <__mulsi3>
   4ccbc:	9826943a 	slli	r19,r19,16
   4ccc0:	9006d43a 	srli	r3,r18,16
   4ccc4:	1cc6b03a 	or	r3,r3,r19
   4ccc8:	1880052e 	bgeu	r3,r2,4cce0 <__udivdi3+0xec>
   4cccc:	1c47883a 	add	r3,r3,r17
   4ccd0:	b13fffc4 	addi	r4,r22,-1
   4ccd4:	1c400136 	bltu	r3,r17,4ccdc <__udivdi3+0xe8>
   4ccd8:	18814236 	bltu	r3,r2,4d1e4 <__udivdi3+0x5f0>
   4ccdc:	202d883a 	mov	r22,r4
   4cce0:	18a1c83a 	sub	r16,r3,r2
   4cce4:	8009883a 	mov	r4,r16
   4cce8:	a80b883a 	mov	r5,r21
   4ccec:	004d9100 	call	4d910 <__umodsi3>
   4ccf0:	1027883a 	mov	r19,r2
   4ccf4:	8009883a 	mov	r4,r16
   4ccf8:	a80b883a 	mov	r5,r21
   4ccfc:	9826943a 	slli	r19,r19,16
   4cd00:	004d8ac0 	call	4d8ac <__udivsi3>
   4cd04:	100b883a 	mov	r5,r2
   4cd08:	a009883a 	mov	r4,r20
   4cd0c:	94bfffcc 	andi	r18,r18,65535
   4cd10:	1021883a 	mov	r16,r2
   4cd14:	94e4b03a 	or	r18,r18,r19
   4cd18:	004d9680 	call	4d968 <__mulsi3>
   4cd1c:	9080052e 	bgeu	r18,r2,4cd34 <__udivdi3+0x140>
   4cd20:	8ca5883a 	add	r18,r17,r18
   4cd24:	80ffffc4 	addi	r3,r16,-1
   4cd28:	94410c36 	bltu	r18,r17,4d15c <__udivdi3+0x568>
   4cd2c:	90810b2e 	bgeu	r18,r2,4d15c <__udivdi3+0x568>
   4cd30:	843fff84 	addi	r16,r16,-2
   4cd34:	b004943a 	slli	r2,r22,16
   4cd38:	0007883a 	mov	r3,zero
   4cd3c:	1404b03a 	or	r2,r2,r16
   4cd40:	00005e06 	br	4cebc <__udivdi3+0x2c8>
   4cd44:	29c05b36 	bltu	r5,r7,4ceb4 <__udivdi3+0x2c0>
   4cd48:	00bfffd4 	movui	r2,65535
   4cd4c:	11c0672e 	bgeu	r2,r7,4ceec <__udivdi3+0x2f8>
   4cd50:	00804034 	movhi	r2,256
   4cd54:	10bfffc4 	addi	r2,r2,-1
   4cd58:	11c10a36 	bltu	r2,r7,4d184 <__udivdi3+0x590>
   4cd5c:	00800404 	movi	r2,16
   4cd60:	3886d83a 	srl	r3,r7,r2
   4cd64:	01000174 	movhi	r4,5
   4cd68:	210b3284 	addi	r4,r4,11466
   4cd6c:	20c7883a 	add	r3,r4,r3
   4cd70:	18c00003 	ldbu	r3,0(r3)
   4cd74:	05c00804 	movi	r23,32
   4cd78:	1885883a 	add	r2,r3,r2
   4cd7c:	b8afc83a 	sub	r23,r23,r2
   4cd80:	b800671e 	bne	r23,zero,4cf20 <__udivdi3+0x32c>
   4cd84:	3c010536 	bltu	r7,r16,4d19c <__udivdi3+0x5a8>
   4cd88:	9985403a 	cmpgeu	r2,r19,r6
   4cd8c:	0007883a 	mov	r3,zero
   4cd90:	00004a06 	br	4cebc <__udivdi3+0x2c8>
   4cd94:	3000041e 	bne	r6,zero,4cda8 <__udivdi3+0x1b4>
   4cd98:	000b883a 	mov	r5,zero
   4cd9c:	01000044 	movi	r4,1
   4cda0:	004d8ac0 	call	4d8ac <__udivsi3>
   4cda4:	1023883a 	mov	r17,r2
   4cda8:	00bfffd4 	movui	r2,65535
   4cdac:	1440532e 	bgeu	r2,r17,4cefc <__udivdi3+0x308>
   4cdb0:	00804034 	movhi	r2,256
   4cdb4:	10bfffc4 	addi	r2,r2,-1
   4cdb8:	1440f436 	bltu	r2,r17,4d18c <__udivdi3+0x598>
   4cdbc:	00800404 	movi	r2,16
   4cdc0:	8886d83a 	srl	r3,r17,r2
   4cdc4:	01000174 	movhi	r4,5
   4cdc8:	210b3284 	addi	r4,r4,11466
   4cdcc:	20c7883a 	add	r3,r4,r3
   4cdd0:	18c00003 	ldbu	r3,0(r3)
   4cdd4:	1885883a 	add	r2,r3,r2
   4cdd8:	00c00804 	movi	r3,32
   4cddc:	1887c83a 	sub	r3,r3,r2
   4cde0:	1800a51e 	bne	r3,zero,4d078 <__udivdi3+0x484>
   4cde4:	882ad43a 	srli	r21,r17,16
   4cde8:	8461c83a 	sub	r16,r16,r17
   4cdec:	8d3fffcc 	andi	r20,r17,65535
   4cdf0:	00c00044 	movi	r3,1
   4cdf4:	a80b883a 	mov	r5,r21
   4cdf8:	8009883a 	mov	r4,r16
   4cdfc:	d8c00115 	stw	r3,4(sp)
   4ce00:	004d9100 	call	4d910 <__umodsi3>
   4ce04:	a80b883a 	mov	r5,r21
   4ce08:	8009883a 	mov	r4,r16
   4ce0c:	1027883a 	mov	r19,r2
   4ce10:	004d8ac0 	call	4d8ac <__udivsi3>
   4ce14:	a00b883a 	mov	r5,r20
   4ce18:	1009883a 	mov	r4,r2
   4ce1c:	102d883a 	mov	r22,r2
   4ce20:	004d9680 	call	4d968 <__mulsi3>
   4ce24:	9826943a 	slli	r19,r19,16
   4ce28:	900ed43a 	srli	r7,r18,16
   4ce2c:	d8c00117 	ldw	r3,4(sp)
   4ce30:	3cceb03a 	or	r7,r7,r19
   4ce34:	3880052e 	bgeu	r7,r2,4ce4c <__udivdi3+0x258>
   4ce38:	3c4f883a 	add	r7,r7,r17
   4ce3c:	b13fffc4 	addi	r4,r22,-1
   4ce40:	3c400136 	bltu	r7,r17,4ce48 <__udivdi3+0x254>
   4ce44:	3880e436 	bltu	r7,r2,4d1d8 <__udivdi3+0x5e4>
   4ce48:	202d883a 	mov	r22,r4
   4ce4c:	38a1c83a 	sub	r16,r7,r2
   4ce50:	8009883a 	mov	r4,r16
   4ce54:	a80b883a 	mov	r5,r21
   4ce58:	d8c00115 	stw	r3,4(sp)
   4ce5c:	004d9100 	call	4d910 <__umodsi3>
   4ce60:	1027883a 	mov	r19,r2
   4ce64:	8009883a 	mov	r4,r16
   4ce68:	a80b883a 	mov	r5,r21
   4ce6c:	9826943a 	slli	r19,r19,16
   4ce70:	004d8ac0 	call	4d8ac <__udivsi3>
   4ce74:	a00b883a 	mov	r5,r20
   4ce78:	1009883a 	mov	r4,r2
   4ce7c:	94bfffcc 	andi	r18,r18,65535
   4ce80:	1021883a 	mov	r16,r2
   4ce84:	94e4b03a 	or	r18,r18,r19
   4ce88:	004d9680 	call	4d968 <__mulsi3>
   4ce8c:	d8c00117 	ldw	r3,4(sp)
   4ce90:	9080052e 	bgeu	r18,r2,4cea8 <__udivdi3+0x2b4>
   4ce94:	8ca5883a 	add	r18,r17,r18
   4ce98:	813fffc4 	addi	r4,r16,-1
   4ce9c:	9440ad36 	bltu	r18,r17,4d154 <__udivdi3+0x560>
   4cea0:	9080ac2e 	bgeu	r18,r2,4d154 <__udivdi3+0x560>
   4cea4:	843fff84 	addi	r16,r16,-2
   4cea8:	b004943a 	slli	r2,r22,16
   4ceac:	1404b03a 	or	r2,r2,r16
   4ceb0:	00000206 	br	4cebc <__udivdi3+0x2c8>
   4ceb4:	0007883a 	mov	r3,zero
   4ceb8:	0005883a 	mov	r2,zero
   4cebc:	dfc00b17 	ldw	ra,44(sp)
   4cec0:	df000a17 	ldw	fp,40(sp)
   4cec4:	ddc00917 	ldw	r23,36(sp)
   4cec8:	dd800817 	ldw	r22,32(sp)
   4cecc:	dd400717 	ldw	r21,28(sp)
   4ced0:	dd000617 	ldw	r20,24(sp)
   4ced4:	dcc00517 	ldw	r19,20(sp)
   4ced8:	dc800417 	ldw	r18,16(sp)
   4cedc:	dc400317 	ldw	r17,12(sp)
   4cee0:	dc000217 	ldw	r16,8(sp)
   4cee4:	dec00c04 	addi	sp,sp,48
   4cee8:	f800283a 	ret
   4ceec:	00803fc4 	movi	r2,255
   4cef0:	11c5803a 	cmpltu	r2,r2,r7
   4cef4:	100490fa 	slli	r2,r2,3
   4cef8:	003f9906 	br	4cd60 <_gp+0xffff0004>
   4cefc:	00803fc4 	movi	r2,255
   4cf00:	1445803a 	cmpltu	r2,r2,r17
   4cf04:	100490fa 	slli	r2,r2,3
   4cf08:	003fad06 	br	4cdc0 <_gp+0xffff0064>
   4cf0c:	00804034 	movhi	r2,256
   4cf10:	10bfffc4 	addi	r2,r2,-1
   4cf14:	11809f36 	bltu	r2,r6,4d194 <__udivdi3+0x5a0>
   4cf18:	00800404 	movi	r2,16
   4cf1c:	003f4c06 	br	4cc50 <_gp+0xfffefef4>
   4cf20:	3dce983a 	sll	r7,r7,r23
   4cf24:	30b8d83a 	srl	fp,r6,r2
   4cf28:	80a2d83a 	srl	r17,r16,r2
   4cf2c:	35cc983a 	sll	r6,r6,r23
   4cf30:	3f38b03a 	or	fp,r7,fp
   4cf34:	e024d43a 	srli	r18,fp,16
   4cf38:	9884d83a 	srl	r2,r19,r2
   4cf3c:	85e0983a 	sll	r16,r16,r23
   4cf40:	8809883a 	mov	r4,r17
   4cf44:	900b883a 	mov	r5,r18
   4cf48:	d9800015 	stw	r6,0(sp)
   4cf4c:	1420b03a 	or	r16,r2,r16
   4cf50:	004d9100 	call	4d910 <__umodsi3>
   4cf54:	900b883a 	mov	r5,r18
   4cf58:	8809883a 	mov	r4,r17
   4cf5c:	1029883a 	mov	r20,r2
   4cf60:	e5bfffcc 	andi	r22,fp,65535
   4cf64:	004d8ac0 	call	4d8ac <__udivsi3>
   4cf68:	100b883a 	mov	r5,r2
   4cf6c:	b009883a 	mov	r4,r22
   4cf70:	102b883a 	mov	r21,r2
   4cf74:	004d9680 	call	4d968 <__mulsi3>
   4cf78:	a028943a 	slli	r20,r20,16
   4cf7c:	8006d43a 	srli	r3,r16,16
   4cf80:	1d06b03a 	or	r3,r3,r20
   4cf84:	1880042e 	bgeu	r3,r2,4cf98 <__udivdi3+0x3a4>
   4cf88:	1f07883a 	add	r3,r3,fp
   4cf8c:	a93fffc4 	addi	r4,r21,-1
   4cf90:	1f00892e 	bgeu	r3,fp,4d1b8 <__udivdi3+0x5c4>
   4cf94:	202b883a 	mov	r21,r4
   4cf98:	18a3c83a 	sub	r17,r3,r2
   4cf9c:	8809883a 	mov	r4,r17
   4cfa0:	900b883a 	mov	r5,r18
   4cfa4:	004d9100 	call	4d910 <__umodsi3>
   4cfa8:	1029883a 	mov	r20,r2
   4cfac:	8809883a 	mov	r4,r17
   4cfb0:	900b883a 	mov	r5,r18
   4cfb4:	a028943a 	slli	r20,r20,16
   4cfb8:	004d8ac0 	call	4d8ac <__udivsi3>
   4cfbc:	100b883a 	mov	r5,r2
   4cfc0:	b009883a 	mov	r4,r22
   4cfc4:	843fffcc 	andi	r16,r16,65535
   4cfc8:	1023883a 	mov	r17,r2
   4cfcc:	8520b03a 	or	r16,r16,r20
   4cfd0:	004d9680 	call	4d968 <__mulsi3>
   4cfd4:	8080042e 	bgeu	r16,r2,4cfe8 <__udivdi3+0x3f4>
   4cfd8:	8721883a 	add	r16,r16,fp
   4cfdc:	88ffffc4 	addi	r3,r17,-1
   4cfe0:	8700712e 	bgeu	r16,fp,4d1a8 <__udivdi3+0x5b4>
   4cfe4:	1823883a 	mov	r17,r3
   4cfe8:	a80e943a 	slli	r7,r21,16
   4cfec:	d8c00017 	ldw	r3,0(sp)
   4cff0:	80a1c83a 	sub	r16,r16,r2
   4cff4:	3c64b03a 	or	r18,r7,r17
   4cff8:	1d3fffcc 	andi	r20,r3,65535
   4cffc:	9022d43a 	srli	r17,r18,16
   4d000:	95bfffcc 	andi	r22,r18,65535
   4d004:	a00b883a 	mov	r5,r20
   4d008:	b009883a 	mov	r4,r22
   4d00c:	182ad43a 	srli	r21,r3,16
   4d010:	004d9680 	call	4d968 <__mulsi3>
   4d014:	a00b883a 	mov	r5,r20
   4d018:	8809883a 	mov	r4,r17
   4d01c:	1039883a 	mov	fp,r2
   4d020:	004d9680 	call	4d968 <__mulsi3>
   4d024:	8809883a 	mov	r4,r17
   4d028:	a80b883a 	mov	r5,r21
   4d02c:	1029883a 	mov	r20,r2
   4d030:	004d9680 	call	4d968 <__mulsi3>
   4d034:	a80b883a 	mov	r5,r21
   4d038:	b009883a 	mov	r4,r22
   4d03c:	1023883a 	mov	r17,r2
   4d040:	004d9680 	call	4d968 <__mulsi3>
   4d044:	e006d43a 	srli	r3,fp,16
   4d048:	1505883a 	add	r2,r2,r20
   4d04c:	1887883a 	add	r3,r3,r2
   4d050:	1d00022e 	bgeu	r3,r20,4d05c <__udivdi3+0x468>
   4d054:	00800074 	movhi	r2,1
   4d058:	88a3883a 	add	r17,r17,r2
   4d05c:	1804d43a 	srli	r2,r3,16
   4d060:	1463883a 	add	r17,r2,r17
   4d064:	84404436 	bltu	r16,r17,4d178 <__udivdi3+0x584>
   4d068:	84403e26 	beq	r16,r17,4d164 <__udivdi3+0x570>
   4d06c:	9005883a 	mov	r2,r18
   4d070:	0007883a 	mov	r3,zero
   4d074:	003f9106 	br	4cebc <_gp+0xffff0160>
   4d078:	88e2983a 	sll	r17,r17,r3
   4d07c:	80aed83a 	srl	r23,r16,r2
   4d080:	80e0983a 	sll	r16,r16,r3
   4d084:	882ad43a 	srli	r21,r17,16
   4d088:	9884d83a 	srl	r2,r19,r2
   4d08c:	b809883a 	mov	r4,r23
   4d090:	a80b883a 	mov	r5,r21
   4d094:	98e4983a 	sll	r18,r19,r3
   4d098:	142cb03a 	or	r22,r2,r16
   4d09c:	004d9100 	call	4d910 <__umodsi3>
   4d0a0:	b809883a 	mov	r4,r23
   4d0a4:	a80b883a 	mov	r5,r21
   4d0a8:	1027883a 	mov	r19,r2
   4d0ac:	8d3fffcc 	andi	r20,r17,65535
   4d0b0:	004d8ac0 	call	4d8ac <__udivsi3>
   4d0b4:	a009883a 	mov	r4,r20
   4d0b8:	100b883a 	mov	r5,r2
   4d0bc:	102f883a 	mov	r23,r2
   4d0c0:	004d9680 	call	4d968 <__mulsi3>
   4d0c4:	9826943a 	slli	r19,r19,16
   4d0c8:	b008d43a 	srli	r4,r22,16
   4d0cc:	24c8b03a 	or	r4,r4,r19
   4d0d0:	2080062e 	bgeu	r4,r2,4d0ec <__udivdi3+0x4f8>
   4d0d4:	2449883a 	add	r4,r4,r17
   4d0d8:	b8ffffc4 	addi	r3,r23,-1
   4d0dc:	24403c36 	bltu	r4,r17,4d1d0 <__udivdi3+0x5dc>
   4d0e0:	20803b2e 	bgeu	r4,r2,4d1d0 <__udivdi3+0x5dc>
   4d0e4:	bdffff84 	addi	r23,r23,-2
   4d0e8:	2449883a 	add	r4,r4,r17
   4d0ec:	20a1c83a 	sub	r16,r4,r2
   4d0f0:	a80b883a 	mov	r5,r21
   4d0f4:	8009883a 	mov	r4,r16
   4d0f8:	004d9100 	call	4d910 <__umodsi3>
   4d0fc:	a80b883a 	mov	r5,r21
   4d100:	8009883a 	mov	r4,r16
   4d104:	1027883a 	mov	r19,r2
   4d108:	004d8ac0 	call	4d8ac <__udivsi3>
   4d10c:	a009883a 	mov	r4,r20
   4d110:	100b883a 	mov	r5,r2
   4d114:	9826943a 	slli	r19,r19,16
   4d118:	1039883a 	mov	fp,r2
   4d11c:	004d9680 	call	4d968 <__mulsi3>
   4d120:	b13fffcc 	andi	r4,r22,65535
   4d124:	24c8b03a 	or	r4,r4,r19
   4d128:	2080062e 	bgeu	r4,r2,4d144 <__udivdi3+0x550>
   4d12c:	2449883a 	add	r4,r4,r17
   4d130:	e0ffffc4 	addi	r3,fp,-1
   4d134:	24402436 	bltu	r4,r17,4d1c8 <__udivdi3+0x5d4>
   4d138:	2080232e 	bgeu	r4,r2,4d1c8 <__udivdi3+0x5d4>
   4d13c:	e73fff84 	addi	fp,fp,-2
   4d140:	2449883a 	add	r4,r4,r17
   4d144:	b82e943a 	slli	r23,r23,16
   4d148:	20a1c83a 	sub	r16,r4,r2
   4d14c:	bf06b03a 	or	r3,r23,fp
   4d150:	003f2806 	br	4cdf4 <_gp+0xffff0098>
   4d154:	2021883a 	mov	r16,r4
   4d158:	003f5306 	br	4cea8 <_gp+0xffff014c>
   4d15c:	1821883a 	mov	r16,r3
   4d160:	003ef406 	br	4cd34 <_gp+0xfffeffd8>
   4d164:	1806943a 	slli	r3,r3,16
   4d168:	9de6983a 	sll	r19,r19,r23
   4d16c:	e73fffcc 	andi	fp,fp,65535
   4d170:	1f07883a 	add	r3,r3,fp
   4d174:	98ffbd2e 	bgeu	r19,r3,4d06c <_gp+0xffff0310>
   4d178:	90bfffc4 	addi	r2,r18,-1
   4d17c:	0007883a 	mov	r3,zero
   4d180:	003f4e06 	br	4cebc <_gp+0xffff0160>
   4d184:	00800604 	movi	r2,24
   4d188:	003ef506 	br	4cd60 <_gp+0xffff0004>
   4d18c:	00800604 	movi	r2,24
   4d190:	003f0b06 	br	4cdc0 <_gp+0xffff0064>
   4d194:	00800604 	movi	r2,24
   4d198:	003ead06 	br	4cc50 <_gp+0xfffefef4>
   4d19c:	0007883a 	mov	r3,zero
   4d1a0:	00800044 	movi	r2,1
   4d1a4:	003f4506 	br	4cebc <_gp+0xffff0160>
   4d1a8:	80bf8e2e 	bgeu	r16,r2,4cfe4 <_gp+0xffff0288>
   4d1ac:	8c7fff84 	addi	r17,r17,-2
   4d1b0:	8721883a 	add	r16,r16,fp
   4d1b4:	003f8c06 	br	4cfe8 <_gp+0xffff028c>
   4d1b8:	18bf762e 	bgeu	r3,r2,4cf94 <_gp+0xffff0238>
   4d1bc:	ad7fff84 	addi	r21,r21,-2
   4d1c0:	1f07883a 	add	r3,r3,fp
   4d1c4:	003f7406 	br	4cf98 <_gp+0xffff023c>
   4d1c8:	1839883a 	mov	fp,r3
   4d1cc:	003fdd06 	br	4d144 <_gp+0xffff03e8>
   4d1d0:	182f883a 	mov	r23,r3
   4d1d4:	003fc506 	br	4d0ec <_gp+0xffff0390>
   4d1d8:	b5bfff84 	addi	r22,r22,-2
   4d1dc:	3c4f883a 	add	r7,r7,r17
   4d1e0:	003f1a06 	br	4ce4c <_gp+0xffff00f0>
   4d1e4:	b5bfff84 	addi	r22,r22,-2
   4d1e8:	1c47883a 	add	r3,r3,r17
   4d1ec:	003ebc06 	br	4cce0 <_gp+0xfffeff84>

0004d1f0 <__umoddi3>:
   4d1f0:	defff304 	addi	sp,sp,-52
   4d1f4:	df000b15 	stw	fp,44(sp)
   4d1f8:	dc400415 	stw	r17,16(sp)
   4d1fc:	dc000315 	stw	r16,12(sp)
   4d200:	dfc00c15 	stw	ra,48(sp)
   4d204:	ddc00a15 	stw	r23,40(sp)
   4d208:	dd800915 	stw	r22,36(sp)
   4d20c:	dd400815 	stw	r21,32(sp)
   4d210:	dd000715 	stw	r20,28(sp)
   4d214:	dcc00615 	stw	r19,24(sp)
   4d218:	dc800515 	stw	r18,20(sp)
   4d21c:	2021883a 	mov	r16,r4
   4d220:	2823883a 	mov	r17,r5
   4d224:	2839883a 	mov	fp,r5
   4d228:	3800401e 	bne	r7,zero,4d32c <__umoddi3+0x13c>
   4d22c:	3027883a 	mov	r19,r6
   4d230:	2029883a 	mov	r20,r4
   4d234:	2980552e 	bgeu	r5,r6,4d38c <__umoddi3+0x19c>
   4d238:	00bfffd4 	movui	r2,65535
   4d23c:	1180a236 	bltu	r2,r6,4d4c8 <__umoddi3+0x2d8>
   4d240:	01003fc4 	movi	r4,255
   4d244:	2189803a 	cmpltu	r4,r4,r6
   4d248:	200890fa 	slli	r4,r4,3
   4d24c:	3104d83a 	srl	r2,r6,r4
   4d250:	00c00174 	movhi	r3,5
   4d254:	18cb3284 	addi	r3,r3,11466
   4d258:	1885883a 	add	r2,r3,r2
   4d25c:	10c00003 	ldbu	r3,0(r2)
   4d260:	00800804 	movi	r2,32
   4d264:	1909883a 	add	r4,r3,r4
   4d268:	1125c83a 	sub	r18,r2,r4
   4d26c:	90000526 	beq	r18,zero,4d284 <__umoddi3+0x94>
   4d270:	8ca2983a 	sll	r17,r17,r18
   4d274:	8108d83a 	srl	r4,r16,r4
   4d278:	34a6983a 	sll	r19,r6,r18
   4d27c:	84a8983a 	sll	r20,r16,r18
   4d280:	2478b03a 	or	fp,r4,r17
   4d284:	982cd43a 	srli	r22,r19,16
   4d288:	e009883a 	mov	r4,fp
   4d28c:	9dffffcc 	andi	r23,r19,65535
   4d290:	b00b883a 	mov	r5,r22
   4d294:	004d9100 	call	4d910 <__umodsi3>
   4d298:	b00b883a 	mov	r5,r22
   4d29c:	e009883a 	mov	r4,fp
   4d2a0:	102b883a 	mov	r21,r2
   4d2a4:	004d8ac0 	call	4d8ac <__udivsi3>
   4d2a8:	100b883a 	mov	r5,r2
   4d2ac:	b809883a 	mov	r4,r23
   4d2b0:	004d9680 	call	4d968 <__mulsi3>
   4d2b4:	a82a943a 	slli	r21,r21,16
   4d2b8:	a006d43a 	srli	r3,r20,16
   4d2bc:	1d46b03a 	or	r3,r3,r21
   4d2c0:	1880032e 	bgeu	r3,r2,4d2d0 <__umoddi3+0xe0>
   4d2c4:	1cc7883a 	add	r3,r3,r19
   4d2c8:	1cc00136 	bltu	r3,r19,4d2d0 <__umoddi3+0xe0>
   4d2cc:	18813136 	bltu	r3,r2,4d794 <__umoddi3+0x5a4>
   4d2d0:	18a1c83a 	sub	r16,r3,r2
   4d2d4:	b00b883a 	mov	r5,r22
   4d2d8:	8009883a 	mov	r4,r16
   4d2dc:	004d9100 	call	4d910 <__umodsi3>
   4d2e0:	b00b883a 	mov	r5,r22
   4d2e4:	8009883a 	mov	r4,r16
   4d2e8:	1023883a 	mov	r17,r2
   4d2ec:	004d8ac0 	call	4d8ac <__udivsi3>
   4d2f0:	100b883a 	mov	r5,r2
   4d2f4:	b809883a 	mov	r4,r23
   4d2f8:	8822943a 	slli	r17,r17,16
   4d2fc:	004d9680 	call	4d968 <__mulsi3>
   4d300:	a0ffffcc 	andi	r3,r20,65535
   4d304:	1c46b03a 	or	r3,r3,r17
   4d308:	1880042e 	bgeu	r3,r2,4d31c <__umoddi3+0x12c>
   4d30c:	1cc7883a 	add	r3,r3,r19
   4d310:	1cc00236 	bltu	r3,r19,4d31c <__umoddi3+0x12c>
   4d314:	1880012e 	bgeu	r3,r2,4d31c <__umoddi3+0x12c>
   4d318:	1cc7883a 	add	r3,r3,r19
   4d31c:	1885c83a 	sub	r2,r3,r2
   4d320:	1484d83a 	srl	r2,r2,r18
   4d324:	0007883a 	mov	r3,zero
   4d328:	00005306 	br	4d478 <__umoddi3+0x288>
   4d32c:	29c05036 	bltu	r5,r7,4d470 <__umoddi3+0x280>
   4d330:	00bfffd4 	movui	r2,65535
   4d334:	11c05c2e 	bgeu	r2,r7,4d4a8 <__umoddi3+0x2b8>
   4d338:	00804034 	movhi	r2,256
   4d33c:	10bfffc4 	addi	r2,r2,-1
   4d340:	11c10636 	bltu	r2,r7,4d75c <__umoddi3+0x56c>
   4d344:	01000404 	movi	r4,16
   4d348:	3904d83a 	srl	r2,r7,r4
   4d34c:	00c00174 	movhi	r3,5
   4d350:	18cb3284 	addi	r3,r3,11466
   4d354:	1885883a 	add	r2,r3,r2
   4d358:	14c00003 	ldbu	r19,0(r2)
   4d35c:	00c00804 	movi	r3,32
   4d360:	9927883a 	add	r19,r19,r4
   4d364:	1ce9c83a 	sub	r20,r3,r19
   4d368:	a0005c1e 	bne	r20,zero,4d4dc <__umoddi3+0x2ec>
   4d36c:	3c400136 	bltu	r7,r17,4d374 <__umoddi3+0x184>
   4d370:	81810a36 	bltu	r16,r6,4d79c <__umoddi3+0x5ac>
   4d374:	8185c83a 	sub	r2,r16,r6
   4d378:	89e3c83a 	sub	r17,r17,r7
   4d37c:	8089803a 	cmpltu	r4,r16,r2
   4d380:	8939c83a 	sub	fp,r17,r4
   4d384:	e007883a 	mov	r3,fp
   4d388:	00003b06 	br	4d478 <__umoddi3+0x288>
   4d38c:	3000041e 	bne	r6,zero,4d3a0 <__umoddi3+0x1b0>
   4d390:	000b883a 	mov	r5,zero
   4d394:	01000044 	movi	r4,1
   4d398:	004d8ac0 	call	4d8ac <__udivsi3>
   4d39c:	1027883a 	mov	r19,r2
   4d3a0:	00bfffd4 	movui	r2,65535
   4d3a4:	14c0442e 	bgeu	r2,r19,4d4b8 <__umoddi3+0x2c8>
   4d3a8:	00804034 	movhi	r2,256
   4d3ac:	10bfffc4 	addi	r2,r2,-1
   4d3b0:	14c0ec36 	bltu	r2,r19,4d764 <__umoddi3+0x574>
   4d3b4:	00800404 	movi	r2,16
   4d3b8:	9886d83a 	srl	r3,r19,r2
   4d3bc:	01000174 	movhi	r4,5
   4d3c0:	210b3284 	addi	r4,r4,11466
   4d3c4:	20c7883a 	add	r3,r4,r3
   4d3c8:	18c00003 	ldbu	r3,0(r3)
   4d3cc:	1887883a 	add	r3,r3,r2
   4d3d0:	00800804 	movi	r2,32
   4d3d4:	10e5c83a 	sub	r18,r2,r3
   4d3d8:	9000ab1e 	bne	r18,zero,4d688 <__umoddi3+0x498>
   4d3dc:	982cd43a 	srli	r22,r19,16
   4d3e0:	8ce3c83a 	sub	r17,r17,r19
   4d3e4:	9dffffcc 	andi	r23,r19,65535
   4d3e8:	b00b883a 	mov	r5,r22
   4d3ec:	8809883a 	mov	r4,r17
   4d3f0:	004d9100 	call	4d910 <__umodsi3>
   4d3f4:	b00b883a 	mov	r5,r22
   4d3f8:	8809883a 	mov	r4,r17
   4d3fc:	102b883a 	mov	r21,r2
   4d400:	004d8ac0 	call	4d8ac <__udivsi3>
   4d404:	b80b883a 	mov	r5,r23
   4d408:	1009883a 	mov	r4,r2
   4d40c:	004d9680 	call	4d968 <__mulsi3>
   4d410:	a82a943a 	slli	r21,r21,16
   4d414:	a006d43a 	srli	r3,r20,16
   4d418:	1d46b03a 	or	r3,r3,r21
   4d41c:	1880042e 	bgeu	r3,r2,4d430 <__umoddi3+0x240>
   4d420:	1cc7883a 	add	r3,r3,r19
   4d424:	1cc00236 	bltu	r3,r19,4d430 <__umoddi3+0x240>
   4d428:	1880012e 	bgeu	r3,r2,4d430 <__umoddi3+0x240>
   4d42c:	1cc7883a 	add	r3,r3,r19
   4d430:	18a1c83a 	sub	r16,r3,r2
   4d434:	b00b883a 	mov	r5,r22
   4d438:	8009883a 	mov	r4,r16
   4d43c:	004d9100 	call	4d910 <__umodsi3>
   4d440:	1023883a 	mov	r17,r2
   4d444:	b00b883a 	mov	r5,r22
   4d448:	8009883a 	mov	r4,r16
   4d44c:	004d8ac0 	call	4d8ac <__udivsi3>
   4d450:	8822943a 	slli	r17,r17,16
   4d454:	b80b883a 	mov	r5,r23
   4d458:	1009883a 	mov	r4,r2
   4d45c:	004d9680 	call	4d968 <__mulsi3>
   4d460:	a53fffcc 	andi	r20,r20,65535
   4d464:	a446b03a 	or	r3,r20,r17
   4d468:	18bfac2e 	bgeu	r3,r2,4d31c <_gp+0xffff05c0>
   4d46c:	003fa706 	br	4d30c <_gp+0xffff05b0>
   4d470:	2005883a 	mov	r2,r4
   4d474:	2807883a 	mov	r3,r5
   4d478:	dfc00c17 	ldw	ra,48(sp)
   4d47c:	df000b17 	ldw	fp,44(sp)
   4d480:	ddc00a17 	ldw	r23,40(sp)
   4d484:	dd800917 	ldw	r22,36(sp)
   4d488:	dd400817 	ldw	r21,32(sp)
   4d48c:	dd000717 	ldw	r20,28(sp)
   4d490:	dcc00617 	ldw	r19,24(sp)
   4d494:	dc800517 	ldw	r18,20(sp)
   4d498:	dc400417 	ldw	r17,16(sp)
   4d49c:	dc000317 	ldw	r16,12(sp)
   4d4a0:	dec00d04 	addi	sp,sp,52
   4d4a4:	f800283a 	ret
   4d4a8:	04c03fc4 	movi	r19,255
   4d4ac:	99c9803a 	cmpltu	r4,r19,r7
   4d4b0:	200890fa 	slli	r4,r4,3
   4d4b4:	003fa406 	br	4d348 <_gp+0xffff05ec>
   4d4b8:	00803fc4 	movi	r2,255
   4d4bc:	14c5803a 	cmpltu	r2,r2,r19
   4d4c0:	100490fa 	slli	r2,r2,3
   4d4c4:	003fbc06 	br	4d3b8 <_gp+0xffff065c>
   4d4c8:	00804034 	movhi	r2,256
   4d4cc:	10bfffc4 	addi	r2,r2,-1
   4d4d0:	1180a636 	bltu	r2,r6,4d76c <__umoddi3+0x57c>
   4d4d4:	01000404 	movi	r4,16
   4d4d8:	003f5c06 	br	4d24c <_gp+0xffff04f0>
   4d4dc:	3d0e983a 	sll	r7,r7,r20
   4d4e0:	34ead83a 	srl	r21,r6,r19
   4d4e4:	8cc6d83a 	srl	r3,r17,r19
   4d4e8:	8d10983a 	sll	r8,r17,r20
   4d4ec:	3d6ab03a 	or	r21,r7,r21
   4d4f0:	a82cd43a 	srli	r22,r21,16
   4d4f4:	84e2d83a 	srl	r17,r16,r19
   4d4f8:	1809883a 	mov	r4,r3
   4d4fc:	b00b883a 	mov	r5,r22
   4d500:	8a22b03a 	or	r17,r17,r8
   4d504:	3524983a 	sll	r18,r6,r20
   4d508:	dc400015 	stw	r17,0(sp)
   4d50c:	d8c00115 	stw	r3,4(sp)
   4d510:	004d9100 	call	4d910 <__umodsi3>
   4d514:	d8c00117 	ldw	r3,4(sp)
   4d518:	b00b883a 	mov	r5,r22
   4d51c:	1039883a 	mov	fp,r2
   4d520:	1809883a 	mov	r4,r3
   4d524:	004d8ac0 	call	4d8ac <__udivsi3>
   4d528:	adffffcc 	andi	r23,r21,65535
   4d52c:	100b883a 	mov	r5,r2
   4d530:	b809883a 	mov	r4,r23
   4d534:	1023883a 	mov	r17,r2
   4d538:	004d9680 	call	4d968 <__mulsi3>
   4d53c:	d9400017 	ldw	r5,0(sp)
   4d540:	e008943a 	slli	r4,fp,16
   4d544:	8520983a 	sll	r16,r16,r20
   4d548:	2806d43a 	srli	r3,r5,16
   4d54c:	1906b03a 	or	r3,r3,r4
   4d550:	1880042e 	bgeu	r3,r2,4d564 <__umoddi3+0x374>
   4d554:	1d47883a 	add	r3,r3,r21
   4d558:	893fffc4 	addi	r4,r17,-1
   4d55c:	1d40892e 	bgeu	r3,r21,4d784 <__umoddi3+0x594>
   4d560:	2023883a 	mov	r17,r4
   4d564:	18b9c83a 	sub	fp,r3,r2
   4d568:	b00b883a 	mov	r5,r22
   4d56c:	e009883a 	mov	r4,fp
   4d570:	004d9100 	call	4d910 <__umodsi3>
   4d574:	b00b883a 	mov	r5,r22
   4d578:	e009883a 	mov	r4,fp
   4d57c:	d8800215 	stw	r2,8(sp)
   4d580:	004d8ac0 	call	4d8ac <__udivsi3>
   4d584:	100b883a 	mov	r5,r2
   4d588:	b809883a 	mov	r4,r23
   4d58c:	102d883a 	mov	r22,r2
   4d590:	004d9680 	call	4d968 <__mulsi3>
   4d594:	d9800217 	ldw	r6,8(sp)
   4d598:	d8c00017 	ldw	r3,0(sp)
   4d59c:	300c943a 	slli	r6,r6,16
   4d5a0:	1a3fffcc 	andi	r8,r3,65535
   4d5a4:	4190b03a 	or	r8,r8,r6
   4d5a8:	4080042e 	bgeu	r8,r2,4d5bc <__umoddi3+0x3cc>
   4d5ac:	4551883a 	add	r8,r8,r21
   4d5b0:	b0ffffc4 	addi	r3,r22,-1
   4d5b4:	45406f2e 	bgeu	r8,r21,4d774 <__umoddi3+0x584>
   4d5b8:	182d883a 	mov	r22,r3
   4d5bc:	880e943a 	slli	r7,r17,16
   4d5c0:	9006d43a 	srli	r3,r18,16
   4d5c4:	91bfffcc 	andi	r6,r18,65535
   4d5c8:	3dacb03a 	or	r22,r7,r22
   4d5cc:	b02ed43a 	srli	r23,r22,16
   4d5d0:	b5bfffcc 	andi	r22,r22,65535
   4d5d4:	300b883a 	mov	r5,r6
   4d5d8:	b009883a 	mov	r4,r22
   4d5dc:	40a3c83a 	sub	r17,r8,r2
   4d5e0:	d8c00115 	stw	r3,4(sp)
   4d5e4:	d9800215 	stw	r6,8(sp)
   4d5e8:	004d9680 	call	4d968 <__mulsi3>
   4d5ec:	d9800217 	ldw	r6,8(sp)
   4d5f0:	b809883a 	mov	r4,r23
   4d5f4:	1039883a 	mov	fp,r2
   4d5f8:	300b883a 	mov	r5,r6
   4d5fc:	004d9680 	call	4d968 <__mulsi3>
   4d600:	d8c00117 	ldw	r3,4(sp)
   4d604:	b809883a 	mov	r4,r23
   4d608:	d8800215 	stw	r2,8(sp)
   4d60c:	180b883a 	mov	r5,r3
   4d610:	004d9680 	call	4d968 <__mulsi3>
   4d614:	d8c00117 	ldw	r3,4(sp)
   4d618:	b009883a 	mov	r4,r22
   4d61c:	102f883a 	mov	r23,r2
   4d620:	180b883a 	mov	r5,r3
   4d624:	004d9680 	call	4d968 <__mulsi3>
   4d628:	d9800217 	ldw	r6,8(sp)
   4d62c:	e006d43a 	srli	r3,fp,16
   4d630:	1185883a 	add	r2,r2,r6
   4d634:	1885883a 	add	r2,r3,r2
   4d638:	1180022e 	bgeu	r2,r6,4d644 <__umoddi3+0x454>
   4d63c:	00c00074 	movhi	r3,1
   4d640:	b8ef883a 	add	r23,r23,r3
   4d644:	1006d43a 	srli	r3,r2,16
   4d648:	1004943a 	slli	r2,r2,16
   4d64c:	e73fffcc 	andi	fp,fp,65535
   4d650:	1dc7883a 	add	r3,r3,r23
   4d654:	1739883a 	add	fp,r2,fp
   4d658:	88c03a36 	bltu	r17,r3,4d744 <__umoddi3+0x554>
   4d65c:	88c05126 	beq	r17,r3,4d7a4 <__umoddi3+0x5b4>
   4d660:	88c9c83a 	sub	r4,r17,r3
   4d664:	e00f883a 	mov	r7,fp
   4d668:	81cfc83a 	sub	r7,r16,r7
   4d66c:	81c7803a 	cmpltu	r3,r16,r7
   4d670:	20c7c83a 	sub	r3,r4,r3
   4d674:	1cc4983a 	sll	r2,r3,r19
   4d678:	3d0ed83a 	srl	r7,r7,r20
   4d67c:	1d06d83a 	srl	r3,r3,r20
   4d680:	11c4b03a 	or	r2,r2,r7
   4d684:	003f7c06 	br	4d478 <_gp+0xffff071c>
   4d688:	9ca6983a 	sll	r19,r19,r18
   4d68c:	88f8d83a 	srl	fp,r17,r3
   4d690:	80c4d83a 	srl	r2,r16,r3
   4d694:	982cd43a 	srli	r22,r19,16
   4d698:	8ca2983a 	sll	r17,r17,r18
   4d69c:	e009883a 	mov	r4,fp
   4d6a0:	b00b883a 	mov	r5,r22
   4d6a4:	146ab03a 	or	r21,r2,r17
   4d6a8:	004d9100 	call	4d910 <__umodsi3>
   4d6ac:	b00b883a 	mov	r5,r22
   4d6b0:	e009883a 	mov	r4,fp
   4d6b4:	1029883a 	mov	r20,r2
   4d6b8:	9dffffcc 	andi	r23,r19,65535
   4d6bc:	004d8ac0 	call	4d8ac <__udivsi3>
   4d6c0:	b809883a 	mov	r4,r23
   4d6c4:	100b883a 	mov	r5,r2
   4d6c8:	004d9680 	call	4d968 <__mulsi3>
   4d6cc:	a008943a 	slli	r4,r20,16
   4d6d0:	a806d43a 	srli	r3,r21,16
   4d6d4:	84a8983a 	sll	r20,r16,r18
   4d6d8:	1906b03a 	or	r3,r3,r4
   4d6dc:	1880042e 	bgeu	r3,r2,4d6f0 <__umoddi3+0x500>
   4d6e0:	1cc7883a 	add	r3,r3,r19
   4d6e4:	1cc00236 	bltu	r3,r19,4d6f0 <__umoddi3+0x500>
   4d6e8:	1880012e 	bgeu	r3,r2,4d6f0 <__umoddi3+0x500>
   4d6ec:	1cc7883a 	add	r3,r3,r19
   4d6f0:	18a3c83a 	sub	r17,r3,r2
   4d6f4:	b00b883a 	mov	r5,r22
   4d6f8:	8809883a 	mov	r4,r17
   4d6fc:	004d9100 	call	4d910 <__umodsi3>
   4d700:	b00b883a 	mov	r5,r22
   4d704:	8809883a 	mov	r4,r17
   4d708:	1021883a 	mov	r16,r2
   4d70c:	004d8ac0 	call	4d8ac <__udivsi3>
   4d710:	100b883a 	mov	r5,r2
   4d714:	b809883a 	mov	r4,r23
   4d718:	8020943a 	slli	r16,r16,16
   4d71c:	004d9680 	call	4d968 <__mulsi3>
   4d720:	a8ffffcc 	andi	r3,r21,65535
   4d724:	1c06b03a 	or	r3,r3,r16
   4d728:	1880042e 	bgeu	r3,r2,4d73c <__umoddi3+0x54c>
   4d72c:	1cc7883a 	add	r3,r3,r19
   4d730:	1cc00236 	bltu	r3,r19,4d73c <__umoddi3+0x54c>
   4d734:	1880012e 	bgeu	r3,r2,4d73c <__umoddi3+0x54c>
   4d738:	1cc7883a 	add	r3,r3,r19
   4d73c:	18a3c83a 	sub	r17,r3,r2
   4d740:	003f2906 	br	4d3e8 <_gp+0xffff068c>
   4d744:	e48fc83a 	sub	r7,fp,r18
   4d748:	1d49c83a 	sub	r4,r3,r21
   4d74c:	e1f9803a 	cmpltu	fp,fp,r7
   4d750:	2739c83a 	sub	fp,r4,fp
   4d754:	8f09c83a 	sub	r4,r17,fp
   4d758:	003fc306 	br	4d668 <_gp+0xffff090c>
   4d75c:	01000604 	movi	r4,24
   4d760:	003ef906 	br	4d348 <_gp+0xffff05ec>
   4d764:	00800604 	movi	r2,24
   4d768:	003f1306 	br	4d3b8 <_gp+0xffff065c>
   4d76c:	01000604 	movi	r4,24
   4d770:	003eb606 	br	4d24c <_gp+0xffff04f0>
   4d774:	40bf902e 	bgeu	r8,r2,4d5b8 <_gp+0xffff085c>
   4d778:	b5bfff84 	addi	r22,r22,-2
   4d77c:	4551883a 	add	r8,r8,r21
   4d780:	003f8e06 	br	4d5bc <_gp+0xffff0860>
   4d784:	18bf762e 	bgeu	r3,r2,4d560 <_gp+0xffff0804>
   4d788:	8c7fff84 	addi	r17,r17,-2
   4d78c:	1d47883a 	add	r3,r3,r21
   4d790:	003f7406 	br	4d564 <_gp+0xffff0808>
   4d794:	1cc7883a 	add	r3,r3,r19
   4d798:	003ecd06 	br	4d2d0 <_gp+0xffff0574>
   4d79c:	8005883a 	mov	r2,r16
   4d7a0:	003ef806 	br	4d384 <_gp+0xffff0628>
   4d7a4:	873fe736 	bltu	r16,fp,4d744 <_gp+0xffff09e8>
   4d7a8:	e00f883a 	mov	r7,fp
   4d7ac:	0009883a 	mov	r4,zero
   4d7b0:	003fad06 	br	4d668 <_gp+0xffff090c>

0004d7b4 <__divsi3>:
   4d7b4:	20001b16 	blt	r4,zero,4d824 <__divsi3+0x70>
   4d7b8:	000f883a 	mov	r7,zero
   4d7bc:	28001616 	blt	r5,zero,4d818 <__divsi3+0x64>
   4d7c0:	200d883a 	mov	r6,r4
   4d7c4:	29001a2e 	bgeu	r5,r4,4d830 <__divsi3+0x7c>
   4d7c8:	00800804 	movi	r2,32
   4d7cc:	00c00044 	movi	r3,1
   4d7d0:	00000106 	br	4d7d8 <__divsi3+0x24>
   4d7d4:	10000d26 	beq	r2,zero,4d80c <__divsi3+0x58>
   4d7d8:	294b883a 	add	r5,r5,r5
   4d7dc:	10bfffc4 	addi	r2,r2,-1
   4d7e0:	18c7883a 	add	r3,r3,r3
   4d7e4:	293ffb36 	bltu	r5,r4,4d7d4 <_gp+0xffff0a78>
   4d7e8:	0005883a 	mov	r2,zero
   4d7ec:	18000726 	beq	r3,zero,4d80c <__divsi3+0x58>
   4d7f0:	0005883a 	mov	r2,zero
   4d7f4:	31400236 	bltu	r6,r5,4d800 <__divsi3+0x4c>
   4d7f8:	314dc83a 	sub	r6,r6,r5
   4d7fc:	10c4b03a 	or	r2,r2,r3
   4d800:	1806d07a 	srli	r3,r3,1
   4d804:	280ad07a 	srli	r5,r5,1
   4d808:	183ffa1e 	bne	r3,zero,4d7f4 <_gp+0xffff0a98>
   4d80c:	38000126 	beq	r7,zero,4d814 <__divsi3+0x60>
   4d810:	0085c83a 	sub	r2,zero,r2
   4d814:	f800283a 	ret
   4d818:	014bc83a 	sub	r5,zero,r5
   4d81c:	39c0005c 	xori	r7,r7,1
   4d820:	003fe706 	br	4d7c0 <_gp+0xffff0a64>
   4d824:	0109c83a 	sub	r4,zero,r4
   4d828:	01c00044 	movi	r7,1
   4d82c:	003fe306 	br	4d7bc <_gp+0xffff0a60>
   4d830:	00c00044 	movi	r3,1
   4d834:	003fee06 	br	4d7f0 <_gp+0xffff0a94>

0004d838 <__modsi3>:
   4d838:	20001716 	blt	r4,zero,4d898 <__modsi3+0x60>
   4d83c:	000f883a 	mov	r7,zero
   4d840:	2005883a 	mov	r2,r4
   4d844:	28001216 	blt	r5,zero,4d890 <__modsi3+0x58>
   4d848:	2900162e 	bgeu	r5,r4,4d8a4 <__modsi3+0x6c>
   4d84c:	01800804 	movi	r6,32
   4d850:	00c00044 	movi	r3,1
   4d854:	00000106 	br	4d85c <__modsi3+0x24>
   4d858:	30000a26 	beq	r6,zero,4d884 <__modsi3+0x4c>
   4d85c:	294b883a 	add	r5,r5,r5
   4d860:	31bfffc4 	addi	r6,r6,-1
   4d864:	18c7883a 	add	r3,r3,r3
   4d868:	293ffb36 	bltu	r5,r4,4d858 <_gp+0xffff0afc>
   4d86c:	18000526 	beq	r3,zero,4d884 <__modsi3+0x4c>
   4d870:	1806d07a 	srli	r3,r3,1
   4d874:	11400136 	bltu	r2,r5,4d87c <__modsi3+0x44>
   4d878:	1145c83a 	sub	r2,r2,r5
   4d87c:	280ad07a 	srli	r5,r5,1
   4d880:	183ffb1e 	bne	r3,zero,4d870 <_gp+0xffff0b14>
   4d884:	38000126 	beq	r7,zero,4d88c <__modsi3+0x54>
   4d888:	0085c83a 	sub	r2,zero,r2
   4d88c:	f800283a 	ret
   4d890:	014bc83a 	sub	r5,zero,r5
   4d894:	003fec06 	br	4d848 <_gp+0xffff0aec>
   4d898:	0109c83a 	sub	r4,zero,r4
   4d89c:	01c00044 	movi	r7,1
   4d8a0:	003fe706 	br	4d840 <_gp+0xffff0ae4>
   4d8a4:	00c00044 	movi	r3,1
   4d8a8:	003ff106 	br	4d870 <_gp+0xffff0b14>

0004d8ac <__udivsi3>:
   4d8ac:	200d883a 	mov	r6,r4
   4d8b0:	2900152e 	bgeu	r5,r4,4d908 <__udivsi3+0x5c>
   4d8b4:	28001416 	blt	r5,zero,4d908 <__udivsi3+0x5c>
   4d8b8:	00800804 	movi	r2,32
   4d8bc:	00c00044 	movi	r3,1
   4d8c0:	00000206 	br	4d8cc <__udivsi3+0x20>
   4d8c4:	10000e26 	beq	r2,zero,4d900 <__udivsi3+0x54>
   4d8c8:	28000516 	blt	r5,zero,4d8e0 <__udivsi3+0x34>
   4d8cc:	294b883a 	add	r5,r5,r5
   4d8d0:	10bfffc4 	addi	r2,r2,-1
   4d8d4:	18c7883a 	add	r3,r3,r3
   4d8d8:	293ffa36 	bltu	r5,r4,4d8c4 <_gp+0xffff0b68>
   4d8dc:	18000826 	beq	r3,zero,4d900 <__udivsi3+0x54>
   4d8e0:	0005883a 	mov	r2,zero
   4d8e4:	31400236 	bltu	r6,r5,4d8f0 <__udivsi3+0x44>
   4d8e8:	314dc83a 	sub	r6,r6,r5
   4d8ec:	10c4b03a 	or	r2,r2,r3
   4d8f0:	1806d07a 	srli	r3,r3,1
   4d8f4:	280ad07a 	srli	r5,r5,1
   4d8f8:	183ffa1e 	bne	r3,zero,4d8e4 <_gp+0xffff0b88>
   4d8fc:	f800283a 	ret
   4d900:	0005883a 	mov	r2,zero
   4d904:	f800283a 	ret
   4d908:	00c00044 	movi	r3,1
   4d90c:	003ff406 	br	4d8e0 <_gp+0xffff0b84>

0004d910 <__umodsi3>:
   4d910:	2005883a 	mov	r2,r4
   4d914:	2900122e 	bgeu	r5,r4,4d960 <__umodsi3+0x50>
   4d918:	28001116 	blt	r5,zero,4d960 <__umodsi3+0x50>
   4d91c:	01800804 	movi	r6,32
   4d920:	00c00044 	movi	r3,1
   4d924:	00000206 	br	4d930 <__umodsi3+0x20>
   4d928:	30000c26 	beq	r6,zero,4d95c <__umodsi3+0x4c>
   4d92c:	28000516 	blt	r5,zero,4d944 <__umodsi3+0x34>
   4d930:	294b883a 	add	r5,r5,r5
   4d934:	31bfffc4 	addi	r6,r6,-1
   4d938:	18c7883a 	add	r3,r3,r3
   4d93c:	293ffa36 	bltu	r5,r4,4d928 <_gp+0xffff0bcc>
   4d940:	18000626 	beq	r3,zero,4d95c <__umodsi3+0x4c>
   4d944:	1806d07a 	srli	r3,r3,1
   4d948:	11400136 	bltu	r2,r5,4d950 <__umodsi3+0x40>
   4d94c:	1145c83a 	sub	r2,r2,r5
   4d950:	280ad07a 	srli	r5,r5,1
   4d954:	183ffb1e 	bne	r3,zero,4d944 <_gp+0xffff0be8>
   4d958:	f800283a 	ret
   4d95c:	f800283a 	ret
   4d960:	00c00044 	movi	r3,1
   4d964:	003ff706 	br	4d944 <_gp+0xffff0be8>

0004d968 <__mulsi3>:
   4d968:	0005883a 	mov	r2,zero
   4d96c:	20000726 	beq	r4,zero,4d98c <__mulsi3+0x24>
   4d970:	20c0004c 	andi	r3,r4,1
   4d974:	2008d07a 	srli	r4,r4,1
   4d978:	18000126 	beq	r3,zero,4d980 <__mulsi3+0x18>
   4d97c:	1145883a 	add	r2,r2,r5
   4d980:	294b883a 	add	r5,r5,r5
   4d984:	203ffa1e 	bne	r4,zero,4d970 <_gp+0xffff0c14>
   4d988:	f800283a 	ret
   4d98c:	f800283a 	ret

0004d990 <__adddf3>:
   4d990:	02c00434 	movhi	r11,16
   4d994:	5affffc4 	addi	r11,r11,-1
   4d998:	2806d7fa 	srli	r3,r5,31
   4d99c:	2ad4703a 	and	r10,r5,r11
   4d9a0:	3ad2703a 	and	r9,r7,r11
   4d9a4:	3804d53a 	srli	r2,r7,20
   4d9a8:	3018d77a 	srli	r12,r6,29
   4d9ac:	280ad53a 	srli	r5,r5,20
   4d9b0:	501490fa 	slli	r10,r10,3
   4d9b4:	2010d77a 	srli	r8,r4,29
   4d9b8:	481290fa 	slli	r9,r9,3
   4d9bc:	380ed7fa 	srli	r7,r7,31
   4d9c0:	defffb04 	addi	sp,sp,-20
   4d9c4:	dc800215 	stw	r18,8(sp)
   4d9c8:	dc400115 	stw	r17,4(sp)
   4d9cc:	dc000015 	stw	r16,0(sp)
   4d9d0:	dfc00415 	stw	ra,16(sp)
   4d9d4:	dcc00315 	stw	r19,12(sp)
   4d9d8:	1c803fcc 	andi	r18,r3,255
   4d9dc:	2c01ffcc 	andi	r16,r5,2047
   4d9e0:	5210b03a 	or	r8,r10,r8
   4d9e4:	202290fa 	slli	r17,r4,3
   4d9e8:	1081ffcc 	andi	r2,r2,2047
   4d9ec:	4b12b03a 	or	r9,r9,r12
   4d9f0:	300c90fa 	slli	r6,r6,3
   4d9f4:	91c07526 	beq	r18,r7,4dbcc <__adddf3+0x23c>
   4d9f8:	8087c83a 	sub	r3,r16,r2
   4d9fc:	00c0ab0e 	bge	zero,r3,4dcac <__adddf3+0x31c>
   4da00:	10002a1e 	bne	r2,zero,4daac <__adddf3+0x11c>
   4da04:	4984b03a 	or	r2,r9,r6
   4da08:	1000961e 	bne	r2,zero,4dc64 <__adddf3+0x2d4>
   4da0c:	888001cc 	andi	r2,r17,7
   4da10:	10000726 	beq	r2,zero,4da30 <__adddf3+0xa0>
   4da14:	888003cc 	andi	r2,r17,15
   4da18:	00c00104 	movi	r3,4
   4da1c:	10c00426 	beq	r2,r3,4da30 <__adddf3+0xa0>
   4da20:	88c7883a 	add	r3,r17,r3
   4da24:	1c63803a 	cmpltu	r17,r3,r17
   4da28:	4451883a 	add	r8,r8,r17
   4da2c:	1823883a 	mov	r17,r3
   4da30:	4080202c 	andhi	r2,r8,128
   4da34:	10005926 	beq	r2,zero,4db9c <__adddf3+0x20c>
   4da38:	84000044 	addi	r16,r16,1
   4da3c:	0081ffc4 	movi	r2,2047
   4da40:	8080ba26 	beq	r16,r2,4dd2c <__adddf3+0x39c>
   4da44:	00bfe034 	movhi	r2,65408
   4da48:	10bfffc4 	addi	r2,r2,-1
   4da4c:	4090703a 	and	r8,r8,r2
   4da50:	4004977a 	slli	r2,r8,29
   4da54:	4010927a 	slli	r8,r8,9
   4da58:	8822d0fa 	srli	r17,r17,3
   4da5c:	8401ffcc 	andi	r16,r16,2047
   4da60:	4010d33a 	srli	r8,r8,12
   4da64:	9007883a 	mov	r3,r18
   4da68:	1444b03a 	or	r2,r2,r17
   4da6c:	8401ffcc 	andi	r16,r16,2047
   4da70:	8020953a 	slli	r16,r16,20
   4da74:	18c03fcc 	andi	r3,r3,255
   4da78:	01000434 	movhi	r4,16
   4da7c:	213fffc4 	addi	r4,r4,-1
   4da80:	180697fa 	slli	r3,r3,31
   4da84:	4110703a 	and	r8,r8,r4
   4da88:	4410b03a 	or	r8,r8,r16
   4da8c:	40c6b03a 	or	r3,r8,r3
   4da90:	dfc00417 	ldw	ra,16(sp)
   4da94:	dcc00317 	ldw	r19,12(sp)
   4da98:	dc800217 	ldw	r18,8(sp)
   4da9c:	dc400117 	ldw	r17,4(sp)
   4daa0:	dc000017 	ldw	r16,0(sp)
   4daa4:	dec00504 	addi	sp,sp,20
   4daa8:	f800283a 	ret
   4daac:	0081ffc4 	movi	r2,2047
   4dab0:	80bfd626 	beq	r16,r2,4da0c <_gp+0xffff0cb0>
   4dab4:	4a402034 	orhi	r9,r9,128
   4dab8:	00800e04 	movi	r2,56
   4dabc:	10c09f16 	blt	r2,r3,4dd3c <__adddf3+0x3ac>
   4dac0:	008007c4 	movi	r2,31
   4dac4:	10c0c216 	blt	r2,r3,4ddd0 <__adddf3+0x440>
   4dac8:	00800804 	movi	r2,32
   4dacc:	10c5c83a 	sub	r2,r2,r3
   4dad0:	488a983a 	sll	r5,r9,r2
   4dad4:	30c8d83a 	srl	r4,r6,r3
   4dad8:	3084983a 	sll	r2,r6,r2
   4dadc:	48c6d83a 	srl	r3,r9,r3
   4dae0:	290cb03a 	or	r6,r5,r4
   4dae4:	1004c03a 	cmpne	r2,r2,zero
   4dae8:	308cb03a 	or	r6,r6,r2
   4daec:	898dc83a 	sub	r6,r17,r6
   4daf0:	89a3803a 	cmpltu	r17,r17,r6
   4daf4:	40d1c83a 	sub	r8,r8,r3
   4daf8:	4451c83a 	sub	r8,r8,r17
   4dafc:	3023883a 	mov	r17,r6
   4db00:	4080202c 	andhi	r2,r8,128
   4db04:	10002326 	beq	r2,zero,4db94 <__adddf3+0x204>
   4db08:	04c02034 	movhi	r19,128
   4db0c:	9cffffc4 	addi	r19,r19,-1
   4db10:	44e6703a 	and	r19,r8,r19
   4db14:	98007626 	beq	r19,zero,4dcf0 <__adddf3+0x360>
   4db18:	9809883a 	mov	r4,r19
   4db1c:	00501d00 	call	501d0 <__clzsi2>
   4db20:	10fffe04 	addi	r3,r2,-8
   4db24:	010007c4 	movi	r4,31
   4db28:	20c07716 	blt	r4,r3,4dd08 <__adddf3+0x378>
   4db2c:	00800804 	movi	r2,32
   4db30:	10c5c83a 	sub	r2,r2,r3
   4db34:	8884d83a 	srl	r2,r17,r2
   4db38:	98d0983a 	sll	r8,r19,r3
   4db3c:	88e2983a 	sll	r17,r17,r3
   4db40:	1204b03a 	or	r2,r2,r8
   4db44:	1c007416 	blt	r3,r16,4dd18 <__adddf3+0x388>
   4db48:	1c21c83a 	sub	r16,r3,r16
   4db4c:	82000044 	addi	r8,r16,1
   4db50:	00c007c4 	movi	r3,31
   4db54:	1a009116 	blt	r3,r8,4dd9c <__adddf3+0x40c>
   4db58:	00c00804 	movi	r3,32
   4db5c:	1a07c83a 	sub	r3,r3,r8
   4db60:	8a08d83a 	srl	r4,r17,r8
   4db64:	88e2983a 	sll	r17,r17,r3
   4db68:	10c6983a 	sll	r3,r2,r3
   4db6c:	1210d83a 	srl	r8,r2,r8
   4db70:	8804c03a 	cmpne	r2,r17,zero
   4db74:	1906b03a 	or	r3,r3,r4
   4db78:	18a2b03a 	or	r17,r3,r2
   4db7c:	0021883a 	mov	r16,zero
   4db80:	003fa206 	br	4da0c <_gp+0xffff0cb0>
   4db84:	1890b03a 	or	r8,r3,r2
   4db88:	40017d26 	beq	r8,zero,4e180 <__adddf3+0x7f0>
   4db8c:	1011883a 	mov	r8,r2
   4db90:	1823883a 	mov	r17,r3
   4db94:	888001cc 	andi	r2,r17,7
   4db98:	103f9e1e 	bne	r2,zero,4da14 <_gp+0xffff0cb8>
   4db9c:	4004977a 	slli	r2,r8,29
   4dba0:	8822d0fa 	srli	r17,r17,3
   4dba4:	4010d0fa 	srli	r8,r8,3
   4dba8:	9007883a 	mov	r3,r18
   4dbac:	1444b03a 	or	r2,r2,r17
   4dbb0:	0101ffc4 	movi	r4,2047
   4dbb4:	81002426 	beq	r16,r4,4dc48 <__adddf3+0x2b8>
   4dbb8:	8120703a 	and	r16,r16,r4
   4dbbc:	01000434 	movhi	r4,16
   4dbc0:	213fffc4 	addi	r4,r4,-1
   4dbc4:	4110703a 	and	r8,r8,r4
   4dbc8:	003fa806 	br	4da6c <_gp+0xffff0d10>
   4dbcc:	8089c83a 	sub	r4,r16,r2
   4dbd0:	01005e0e 	bge	zero,r4,4dd4c <__adddf3+0x3bc>
   4dbd4:	10002b26 	beq	r2,zero,4dc84 <__adddf3+0x2f4>
   4dbd8:	0081ffc4 	movi	r2,2047
   4dbdc:	80bf8b26 	beq	r16,r2,4da0c <_gp+0xffff0cb0>
   4dbe0:	4a402034 	orhi	r9,r9,128
   4dbe4:	00800e04 	movi	r2,56
   4dbe8:	1100a40e 	bge	r2,r4,4de7c <__adddf3+0x4ec>
   4dbec:	498cb03a 	or	r6,r9,r6
   4dbf0:	300ac03a 	cmpne	r5,r6,zero
   4dbf4:	0013883a 	mov	r9,zero
   4dbf8:	2c4b883a 	add	r5,r5,r17
   4dbfc:	2c63803a 	cmpltu	r17,r5,r17
   4dc00:	4a11883a 	add	r8,r9,r8
   4dc04:	8a11883a 	add	r8,r17,r8
   4dc08:	2823883a 	mov	r17,r5
   4dc0c:	4080202c 	andhi	r2,r8,128
   4dc10:	103fe026 	beq	r2,zero,4db94 <_gp+0xffff0e38>
   4dc14:	84000044 	addi	r16,r16,1
   4dc18:	0081ffc4 	movi	r2,2047
   4dc1c:	8080d226 	beq	r16,r2,4df68 <__adddf3+0x5d8>
   4dc20:	00bfe034 	movhi	r2,65408
   4dc24:	10bfffc4 	addi	r2,r2,-1
   4dc28:	4090703a 	and	r8,r8,r2
   4dc2c:	880ad07a 	srli	r5,r17,1
   4dc30:	400897fa 	slli	r4,r8,31
   4dc34:	88c0004c 	andi	r3,r17,1
   4dc38:	28e2b03a 	or	r17,r5,r3
   4dc3c:	4010d07a 	srli	r8,r8,1
   4dc40:	2462b03a 	or	r17,r4,r17
   4dc44:	003f7106 	br	4da0c <_gp+0xffff0cb0>
   4dc48:	4088b03a 	or	r4,r8,r2
   4dc4c:	20014526 	beq	r4,zero,4e164 <__adddf3+0x7d4>
   4dc50:	01000434 	movhi	r4,16
   4dc54:	42000234 	orhi	r8,r8,8
   4dc58:	213fffc4 	addi	r4,r4,-1
   4dc5c:	4110703a 	and	r8,r8,r4
   4dc60:	003f8206 	br	4da6c <_gp+0xffff0d10>
   4dc64:	18ffffc4 	addi	r3,r3,-1
   4dc68:	1800491e 	bne	r3,zero,4dd90 <__adddf3+0x400>
   4dc6c:	898bc83a 	sub	r5,r17,r6
   4dc70:	8963803a 	cmpltu	r17,r17,r5
   4dc74:	4251c83a 	sub	r8,r8,r9
   4dc78:	4451c83a 	sub	r8,r8,r17
   4dc7c:	2823883a 	mov	r17,r5
   4dc80:	003f9f06 	br	4db00 <_gp+0xffff0da4>
   4dc84:	4984b03a 	or	r2,r9,r6
   4dc88:	103f6026 	beq	r2,zero,4da0c <_gp+0xffff0cb0>
   4dc8c:	213fffc4 	addi	r4,r4,-1
   4dc90:	2000931e 	bne	r4,zero,4dee0 <__adddf3+0x550>
   4dc94:	898d883a 	add	r6,r17,r6
   4dc98:	3463803a 	cmpltu	r17,r6,r17
   4dc9c:	4251883a 	add	r8,r8,r9
   4dca0:	8a11883a 	add	r8,r17,r8
   4dca4:	3023883a 	mov	r17,r6
   4dca8:	003fd806 	br	4dc0c <_gp+0xffff0eb0>
   4dcac:	1800541e 	bne	r3,zero,4de00 <__adddf3+0x470>
   4dcb0:	80800044 	addi	r2,r16,1
   4dcb4:	1081ffcc 	andi	r2,r2,2047
   4dcb8:	00c00044 	movi	r3,1
   4dcbc:	1880a00e 	bge	r3,r2,4df40 <__adddf3+0x5b0>
   4dcc0:	8989c83a 	sub	r4,r17,r6
   4dcc4:	8905803a 	cmpltu	r2,r17,r4
   4dcc8:	4267c83a 	sub	r19,r8,r9
   4dccc:	98a7c83a 	sub	r19,r19,r2
   4dcd0:	9880202c 	andhi	r2,r19,128
   4dcd4:	10006326 	beq	r2,zero,4de64 <__adddf3+0x4d4>
   4dcd8:	3463c83a 	sub	r17,r6,r17
   4dcdc:	4a07c83a 	sub	r3,r9,r8
   4dce0:	344d803a 	cmpltu	r6,r6,r17
   4dce4:	19a7c83a 	sub	r19,r3,r6
   4dce8:	3825883a 	mov	r18,r7
   4dcec:	983f8a1e 	bne	r19,zero,4db18 <_gp+0xffff0dbc>
   4dcf0:	8809883a 	mov	r4,r17
   4dcf4:	00501d00 	call	501d0 <__clzsi2>
   4dcf8:	10800804 	addi	r2,r2,32
   4dcfc:	10fffe04 	addi	r3,r2,-8
   4dd00:	010007c4 	movi	r4,31
   4dd04:	20ff890e 	bge	r4,r3,4db2c <_gp+0xffff0dd0>
   4dd08:	10bff604 	addi	r2,r2,-40
   4dd0c:	8884983a 	sll	r2,r17,r2
   4dd10:	0023883a 	mov	r17,zero
   4dd14:	1c3f8c0e 	bge	r3,r16,4db48 <_gp+0xffff0dec>
   4dd18:	023fe034 	movhi	r8,65408
   4dd1c:	423fffc4 	addi	r8,r8,-1
   4dd20:	80e1c83a 	sub	r16,r16,r3
   4dd24:	1210703a 	and	r8,r2,r8
   4dd28:	003f3806 	br	4da0c <_gp+0xffff0cb0>
   4dd2c:	9007883a 	mov	r3,r18
   4dd30:	0011883a 	mov	r8,zero
   4dd34:	0005883a 	mov	r2,zero
   4dd38:	003f4c06 	br	4da6c <_gp+0xffff0d10>
   4dd3c:	498cb03a 	or	r6,r9,r6
   4dd40:	300cc03a 	cmpne	r6,r6,zero
   4dd44:	0007883a 	mov	r3,zero
   4dd48:	003f6806 	br	4daec <_gp+0xffff0d90>
   4dd4c:	20009c1e 	bne	r4,zero,4dfc0 <__adddf3+0x630>
   4dd50:	80800044 	addi	r2,r16,1
   4dd54:	1141ffcc 	andi	r5,r2,2047
   4dd58:	01000044 	movi	r4,1
   4dd5c:	2140670e 	bge	r4,r5,4defc <__adddf3+0x56c>
   4dd60:	0101ffc4 	movi	r4,2047
   4dd64:	11007f26 	beq	r2,r4,4df64 <__adddf3+0x5d4>
   4dd68:	898d883a 	add	r6,r17,r6
   4dd6c:	4247883a 	add	r3,r8,r9
   4dd70:	3451803a 	cmpltu	r8,r6,r17
   4dd74:	40d1883a 	add	r8,r8,r3
   4dd78:	402297fa 	slli	r17,r8,31
   4dd7c:	300cd07a 	srli	r6,r6,1
   4dd80:	4010d07a 	srli	r8,r8,1
   4dd84:	1021883a 	mov	r16,r2
   4dd88:	89a2b03a 	or	r17,r17,r6
   4dd8c:	003f1f06 	br	4da0c <_gp+0xffff0cb0>
   4dd90:	0081ffc4 	movi	r2,2047
   4dd94:	80bf481e 	bne	r16,r2,4dab8 <_gp+0xffff0d5c>
   4dd98:	003f1c06 	br	4da0c <_gp+0xffff0cb0>
   4dd9c:	843ff844 	addi	r16,r16,-31
   4dda0:	01000804 	movi	r4,32
   4dda4:	1406d83a 	srl	r3,r2,r16
   4dda8:	41005026 	beq	r8,r4,4deec <__adddf3+0x55c>
   4ddac:	01001004 	movi	r4,64
   4ddb0:	2211c83a 	sub	r8,r4,r8
   4ddb4:	1204983a 	sll	r2,r2,r8
   4ddb8:	88a2b03a 	or	r17,r17,r2
   4ddbc:	8822c03a 	cmpne	r17,r17,zero
   4ddc0:	1c62b03a 	or	r17,r3,r17
   4ddc4:	0011883a 	mov	r8,zero
   4ddc8:	0021883a 	mov	r16,zero
   4ddcc:	003f7106 	br	4db94 <_gp+0xffff0e38>
   4ddd0:	193ff804 	addi	r4,r3,-32
   4ddd4:	00800804 	movi	r2,32
   4ddd8:	4908d83a 	srl	r4,r9,r4
   4dddc:	18804526 	beq	r3,r2,4def4 <__adddf3+0x564>
   4dde0:	00801004 	movi	r2,64
   4dde4:	10c5c83a 	sub	r2,r2,r3
   4dde8:	4886983a 	sll	r3,r9,r2
   4ddec:	198cb03a 	or	r6,r3,r6
   4ddf0:	300cc03a 	cmpne	r6,r6,zero
   4ddf4:	218cb03a 	or	r6,r4,r6
   4ddf8:	0007883a 	mov	r3,zero
   4ddfc:	003f3b06 	br	4daec <_gp+0xffff0d90>
   4de00:	80002a26 	beq	r16,zero,4deac <__adddf3+0x51c>
   4de04:	0101ffc4 	movi	r4,2047
   4de08:	11006826 	beq	r2,r4,4dfac <__adddf3+0x61c>
   4de0c:	00c7c83a 	sub	r3,zero,r3
   4de10:	42002034 	orhi	r8,r8,128
   4de14:	01000e04 	movi	r4,56
   4de18:	20c07c16 	blt	r4,r3,4e00c <__adddf3+0x67c>
   4de1c:	010007c4 	movi	r4,31
   4de20:	20c0da16 	blt	r4,r3,4e18c <__adddf3+0x7fc>
   4de24:	01000804 	movi	r4,32
   4de28:	20c9c83a 	sub	r4,r4,r3
   4de2c:	4114983a 	sll	r10,r8,r4
   4de30:	88cad83a 	srl	r5,r17,r3
   4de34:	8908983a 	sll	r4,r17,r4
   4de38:	40c6d83a 	srl	r3,r8,r3
   4de3c:	5162b03a 	or	r17,r10,r5
   4de40:	2008c03a 	cmpne	r4,r4,zero
   4de44:	8922b03a 	or	r17,r17,r4
   4de48:	3463c83a 	sub	r17,r6,r17
   4de4c:	48c7c83a 	sub	r3,r9,r3
   4de50:	344d803a 	cmpltu	r6,r6,r17
   4de54:	1991c83a 	sub	r8,r3,r6
   4de58:	1021883a 	mov	r16,r2
   4de5c:	3825883a 	mov	r18,r7
   4de60:	003f2706 	br	4db00 <_gp+0xffff0da4>
   4de64:	24d0b03a 	or	r8,r4,r19
   4de68:	40001b1e 	bne	r8,zero,4ded8 <__adddf3+0x548>
   4de6c:	0005883a 	mov	r2,zero
   4de70:	0007883a 	mov	r3,zero
   4de74:	0021883a 	mov	r16,zero
   4de78:	003f4d06 	br	4dbb0 <_gp+0xffff0e54>
   4de7c:	008007c4 	movi	r2,31
   4de80:	11003c16 	blt	r2,r4,4df74 <__adddf3+0x5e4>
   4de84:	00800804 	movi	r2,32
   4de88:	1105c83a 	sub	r2,r2,r4
   4de8c:	488e983a 	sll	r7,r9,r2
   4de90:	310ad83a 	srl	r5,r6,r4
   4de94:	3084983a 	sll	r2,r6,r2
   4de98:	4912d83a 	srl	r9,r9,r4
   4de9c:	394ab03a 	or	r5,r7,r5
   4dea0:	1004c03a 	cmpne	r2,r2,zero
   4dea4:	288ab03a 	or	r5,r5,r2
   4dea8:	003f5306 	br	4dbf8 <_gp+0xffff0e9c>
   4deac:	4448b03a 	or	r4,r8,r17
   4deb0:	20003e26 	beq	r4,zero,4dfac <__adddf3+0x61c>
   4deb4:	00c6303a 	nor	r3,zero,r3
   4deb8:	18003a1e 	bne	r3,zero,4dfa4 <__adddf3+0x614>
   4debc:	3463c83a 	sub	r17,r6,r17
   4dec0:	4a07c83a 	sub	r3,r9,r8
   4dec4:	344d803a 	cmpltu	r6,r6,r17
   4dec8:	1991c83a 	sub	r8,r3,r6
   4decc:	1021883a 	mov	r16,r2
   4ded0:	3825883a 	mov	r18,r7
   4ded4:	003f0a06 	br	4db00 <_gp+0xffff0da4>
   4ded8:	2023883a 	mov	r17,r4
   4dedc:	003f0d06 	br	4db14 <_gp+0xffff0db8>
   4dee0:	0081ffc4 	movi	r2,2047
   4dee4:	80bf3f1e 	bne	r16,r2,4dbe4 <_gp+0xffff0e88>
   4dee8:	003ec806 	br	4da0c <_gp+0xffff0cb0>
   4deec:	0005883a 	mov	r2,zero
   4def0:	003fb106 	br	4ddb8 <_gp+0xffff105c>
   4def4:	0007883a 	mov	r3,zero
   4def8:	003fbc06 	br	4ddec <_gp+0xffff1090>
   4defc:	4444b03a 	or	r2,r8,r17
   4df00:	8000871e 	bne	r16,zero,4e120 <__adddf3+0x790>
   4df04:	1000ba26 	beq	r2,zero,4e1f0 <__adddf3+0x860>
   4df08:	4984b03a 	or	r2,r9,r6
   4df0c:	103ebf26 	beq	r2,zero,4da0c <_gp+0xffff0cb0>
   4df10:	8985883a 	add	r2,r17,r6
   4df14:	4247883a 	add	r3,r8,r9
   4df18:	1451803a 	cmpltu	r8,r2,r17
   4df1c:	40d1883a 	add	r8,r8,r3
   4df20:	40c0202c 	andhi	r3,r8,128
   4df24:	1023883a 	mov	r17,r2
   4df28:	183f1a26 	beq	r3,zero,4db94 <_gp+0xffff0e38>
   4df2c:	00bfe034 	movhi	r2,65408
   4df30:	10bfffc4 	addi	r2,r2,-1
   4df34:	2021883a 	mov	r16,r4
   4df38:	4090703a 	and	r8,r8,r2
   4df3c:	003eb306 	br	4da0c <_gp+0xffff0cb0>
   4df40:	4444b03a 	or	r2,r8,r17
   4df44:	8000291e 	bne	r16,zero,4dfec <__adddf3+0x65c>
   4df48:	10004b1e 	bne	r2,zero,4e078 <__adddf3+0x6e8>
   4df4c:	4990b03a 	or	r8,r9,r6
   4df50:	40008b26 	beq	r8,zero,4e180 <__adddf3+0x7f0>
   4df54:	4811883a 	mov	r8,r9
   4df58:	3023883a 	mov	r17,r6
   4df5c:	3825883a 	mov	r18,r7
   4df60:	003eaa06 	br	4da0c <_gp+0xffff0cb0>
   4df64:	1021883a 	mov	r16,r2
   4df68:	0011883a 	mov	r8,zero
   4df6c:	0005883a 	mov	r2,zero
   4df70:	003f0f06 	br	4dbb0 <_gp+0xffff0e54>
   4df74:	217ff804 	addi	r5,r4,-32
   4df78:	00800804 	movi	r2,32
   4df7c:	494ad83a 	srl	r5,r9,r5
   4df80:	20807d26 	beq	r4,r2,4e178 <__adddf3+0x7e8>
   4df84:	00801004 	movi	r2,64
   4df88:	1109c83a 	sub	r4,r2,r4
   4df8c:	4912983a 	sll	r9,r9,r4
   4df90:	498cb03a 	or	r6,r9,r6
   4df94:	300cc03a 	cmpne	r6,r6,zero
   4df98:	298ab03a 	or	r5,r5,r6
   4df9c:	0013883a 	mov	r9,zero
   4dfa0:	003f1506 	br	4dbf8 <_gp+0xffff0e9c>
   4dfa4:	0101ffc4 	movi	r4,2047
   4dfa8:	113f9a1e 	bne	r2,r4,4de14 <_gp+0xffff10b8>
   4dfac:	4811883a 	mov	r8,r9
   4dfb0:	3023883a 	mov	r17,r6
   4dfb4:	1021883a 	mov	r16,r2
   4dfb8:	3825883a 	mov	r18,r7
   4dfbc:	003e9306 	br	4da0c <_gp+0xffff0cb0>
   4dfc0:	8000161e 	bne	r16,zero,4e01c <__adddf3+0x68c>
   4dfc4:	444ab03a 	or	r5,r8,r17
   4dfc8:	28005126 	beq	r5,zero,4e110 <__adddf3+0x780>
   4dfcc:	0108303a 	nor	r4,zero,r4
   4dfd0:	20004d1e 	bne	r4,zero,4e108 <__adddf3+0x778>
   4dfd4:	89a3883a 	add	r17,r17,r6
   4dfd8:	4253883a 	add	r9,r8,r9
   4dfdc:	898d803a 	cmpltu	r6,r17,r6
   4dfe0:	3251883a 	add	r8,r6,r9
   4dfe4:	1021883a 	mov	r16,r2
   4dfe8:	003f0806 	br	4dc0c <_gp+0xffff0eb0>
   4dfec:	1000301e 	bne	r2,zero,4e0b0 <__adddf3+0x720>
   4dff0:	4984b03a 	or	r2,r9,r6
   4dff4:	10007126 	beq	r2,zero,4e1bc <__adddf3+0x82c>
   4dff8:	4811883a 	mov	r8,r9
   4dffc:	3023883a 	mov	r17,r6
   4e000:	3825883a 	mov	r18,r7
   4e004:	0401ffc4 	movi	r16,2047
   4e008:	003e8006 	br	4da0c <_gp+0xffff0cb0>
   4e00c:	4462b03a 	or	r17,r8,r17
   4e010:	8822c03a 	cmpne	r17,r17,zero
   4e014:	0007883a 	mov	r3,zero
   4e018:	003f8b06 	br	4de48 <_gp+0xffff10ec>
   4e01c:	0141ffc4 	movi	r5,2047
   4e020:	11403b26 	beq	r2,r5,4e110 <__adddf3+0x780>
   4e024:	0109c83a 	sub	r4,zero,r4
   4e028:	42002034 	orhi	r8,r8,128
   4e02c:	01400e04 	movi	r5,56
   4e030:	29006716 	blt	r5,r4,4e1d0 <__adddf3+0x840>
   4e034:	014007c4 	movi	r5,31
   4e038:	29007016 	blt	r5,r4,4e1fc <__adddf3+0x86c>
   4e03c:	01400804 	movi	r5,32
   4e040:	290bc83a 	sub	r5,r5,r4
   4e044:	4154983a 	sll	r10,r8,r5
   4e048:	890ed83a 	srl	r7,r17,r4
   4e04c:	894a983a 	sll	r5,r17,r5
   4e050:	4108d83a 	srl	r4,r8,r4
   4e054:	51e2b03a 	or	r17,r10,r7
   4e058:	280ac03a 	cmpne	r5,r5,zero
   4e05c:	8962b03a 	or	r17,r17,r5
   4e060:	89a3883a 	add	r17,r17,r6
   4e064:	2253883a 	add	r9,r4,r9
   4e068:	898d803a 	cmpltu	r6,r17,r6
   4e06c:	3251883a 	add	r8,r6,r9
   4e070:	1021883a 	mov	r16,r2
   4e074:	003ee506 	br	4dc0c <_gp+0xffff0eb0>
   4e078:	4984b03a 	or	r2,r9,r6
   4e07c:	103e6326 	beq	r2,zero,4da0c <_gp+0xffff0cb0>
   4e080:	8987c83a 	sub	r3,r17,r6
   4e084:	88c9803a 	cmpltu	r4,r17,r3
   4e088:	4245c83a 	sub	r2,r8,r9
   4e08c:	1105c83a 	sub	r2,r2,r4
   4e090:	1100202c 	andhi	r4,r2,128
   4e094:	203ebb26 	beq	r4,zero,4db84 <_gp+0xffff0e28>
   4e098:	3463c83a 	sub	r17,r6,r17
   4e09c:	4a07c83a 	sub	r3,r9,r8
   4e0a0:	344d803a 	cmpltu	r6,r6,r17
   4e0a4:	1991c83a 	sub	r8,r3,r6
   4e0a8:	3825883a 	mov	r18,r7
   4e0ac:	003e5706 	br	4da0c <_gp+0xffff0cb0>
   4e0b0:	4984b03a 	or	r2,r9,r6
   4e0b4:	10002e26 	beq	r2,zero,4e170 <__adddf3+0x7e0>
   4e0b8:	4004d0fa 	srli	r2,r8,3
   4e0bc:	8822d0fa 	srli	r17,r17,3
   4e0c0:	4010977a 	slli	r8,r8,29
   4e0c4:	10c0022c 	andhi	r3,r2,8
   4e0c8:	4462b03a 	or	r17,r8,r17
   4e0cc:	18000826 	beq	r3,zero,4e0f0 <__adddf3+0x760>
   4e0d0:	4808d0fa 	srli	r4,r9,3
   4e0d4:	20c0022c 	andhi	r3,r4,8
   4e0d8:	1800051e 	bne	r3,zero,4e0f0 <__adddf3+0x760>
   4e0dc:	300cd0fa 	srli	r6,r6,3
   4e0e0:	4806977a 	slli	r3,r9,29
   4e0e4:	2005883a 	mov	r2,r4
   4e0e8:	3825883a 	mov	r18,r7
   4e0ec:	19a2b03a 	or	r17,r3,r6
   4e0f0:	8810d77a 	srli	r8,r17,29
   4e0f4:	100490fa 	slli	r2,r2,3
   4e0f8:	882290fa 	slli	r17,r17,3
   4e0fc:	0401ffc4 	movi	r16,2047
   4e100:	4090b03a 	or	r8,r8,r2
   4e104:	003e4106 	br	4da0c <_gp+0xffff0cb0>
   4e108:	0141ffc4 	movi	r5,2047
   4e10c:	117fc71e 	bne	r2,r5,4e02c <_gp+0xffff12d0>
   4e110:	4811883a 	mov	r8,r9
   4e114:	3023883a 	mov	r17,r6
   4e118:	1021883a 	mov	r16,r2
   4e11c:	003e3b06 	br	4da0c <_gp+0xffff0cb0>
   4e120:	10002f26 	beq	r2,zero,4e1e0 <__adddf3+0x850>
   4e124:	4984b03a 	or	r2,r9,r6
   4e128:	10001126 	beq	r2,zero,4e170 <__adddf3+0x7e0>
   4e12c:	4004d0fa 	srli	r2,r8,3
   4e130:	8822d0fa 	srli	r17,r17,3
   4e134:	4010977a 	slli	r8,r8,29
   4e138:	10c0022c 	andhi	r3,r2,8
   4e13c:	4462b03a 	or	r17,r8,r17
   4e140:	183feb26 	beq	r3,zero,4e0f0 <_gp+0xffff1394>
   4e144:	4808d0fa 	srli	r4,r9,3
   4e148:	20c0022c 	andhi	r3,r4,8
   4e14c:	183fe81e 	bne	r3,zero,4e0f0 <_gp+0xffff1394>
   4e150:	300cd0fa 	srli	r6,r6,3
   4e154:	4806977a 	slli	r3,r9,29
   4e158:	2005883a 	mov	r2,r4
   4e15c:	19a2b03a 	or	r17,r3,r6
   4e160:	003fe306 	br	4e0f0 <_gp+0xffff1394>
   4e164:	0011883a 	mov	r8,zero
   4e168:	0005883a 	mov	r2,zero
   4e16c:	003e3f06 	br	4da6c <_gp+0xffff0d10>
   4e170:	0401ffc4 	movi	r16,2047
   4e174:	003e2506 	br	4da0c <_gp+0xffff0cb0>
   4e178:	0013883a 	mov	r9,zero
   4e17c:	003f8406 	br	4df90 <_gp+0xffff1234>
   4e180:	0005883a 	mov	r2,zero
   4e184:	0007883a 	mov	r3,zero
   4e188:	003e8906 	br	4dbb0 <_gp+0xffff0e54>
   4e18c:	197ff804 	addi	r5,r3,-32
   4e190:	01000804 	movi	r4,32
   4e194:	414ad83a 	srl	r5,r8,r5
   4e198:	19002426 	beq	r3,r4,4e22c <__adddf3+0x89c>
   4e19c:	01001004 	movi	r4,64
   4e1a0:	20c7c83a 	sub	r3,r4,r3
   4e1a4:	40c6983a 	sll	r3,r8,r3
   4e1a8:	1c46b03a 	or	r3,r3,r17
   4e1ac:	1806c03a 	cmpne	r3,r3,zero
   4e1b0:	28e2b03a 	or	r17,r5,r3
   4e1b4:	0007883a 	mov	r3,zero
   4e1b8:	003f2306 	br	4de48 <_gp+0xffff10ec>
   4e1bc:	0007883a 	mov	r3,zero
   4e1c0:	5811883a 	mov	r8,r11
   4e1c4:	00bfffc4 	movi	r2,-1
   4e1c8:	0401ffc4 	movi	r16,2047
   4e1cc:	003e7806 	br	4dbb0 <_gp+0xffff0e54>
   4e1d0:	4462b03a 	or	r17,r8,r17
   4e1d4:	8822c03a 	cmpne	r17,r17,zero
   4e1d8:	0009883a 	mov	r4,zero
   4e1dc:	003fa006 	br	4e060 <_gp+0xffff1304>
   4e1e0:	4811883a 	mov	r8,r9
   4e1e4:	3023883a 	mov	r17,r6
   4e1e8:	0401ffc4 	movi	r16,2047
   4e1ec:	003e0706 	br	4da0c <_gp+0xffff0cb0>
   4e1f0:	4811883a 	mov	r8,r9
   4e1f4:	3023883a 	mov	r17,r6
   4e1f8:	003e0406 	br	4da0c <_gp+0xffff0cb0>
   4e1fc:	21fff804 	addi	r7,r4,-32
   4e200:	01400804 	movi	r5,32
   4e204:	41ced83a 	srl	r7,r8,r7
   4e208:	21400a26 	beq	r4,r5,4e234 <__adddf3+0x8a4>
   4e20c:	01401004 	movi	r5,64
   4e210:	2909c83a 	sub	r4,r5,r4
   4e214:	4108983a 	sll	r4,r8,r4
   4e218:	2448b03a 	or	r4,r4,r17
   4e21c:	2008c03a 	cmpne	r4,r4,zero
   4e220:	3922b03a 	or	r17,r7,r4
   4e224:	0009883a 	mov	r4,zero
   4e228:	003f8d06 	br	4e060 <_gp+0xffff1304>
   4e22c:	0007883a 	mov	r3,zero
   4e230:	003fdd06 	br	4e1a8 <_gp+0xffff144c>
   4e234:	0009883a 	mov	r4,zero
   4e238:	003ff706 	br	4e218 <_gp+0xffff14bc>

0004e23c <__divdf3>:
   4e23c:	defff004 	addi	sp,sp,-64
   4e240:	dc800815 	stw	r18,32(sp)
   4e244:	2824d53a 	srli	r18,r5,20
   4e248:	dd800c15 	stw	r22,48(sp)
   4e24c:	282cd7fa 	srli	r22,r5,31
   4e250:	dc000615 	stw	r16,24(sp)
   4e254:	04000434 	movhi	r16,16
   4e258:	843fffc4 	addi	r16,r16,-1
   4e25c:	dfc00f15 	stw	ra,60(sp)
   4e260:	df000e15 	stw	fp,56(sp)
   4e264:	ddc00d15 	stw	r23,52(sp)
   4e268:	dd400b15 	stw	r21,44(sp)
   4e26c:	dd000a15 	stw	r20,40(sp)
   4e270:	dcc00915 	stw	r19,36(sp)
   4e274:	dc400715 	stw	r17,28(sp)
   4e278:	9481ffcc 	andi	r18,r18,2047
   4e27c:	2c20703a 	and	r16,r5,r16
   4e280:	b2003fcc 	andi	r8,r22,255
   4e284:	90006126 	beq	r18,zero,4e40c <__divdf3+0x1d0>
   4e288:	0081ffc4 	movi	r2,2047
   4e28c:	202b883a 	mov	r21,r4
   4e290:	90803726 	beq	r18,r2,4e370 <__divdf3+0x134>
   4e294:	80800434 	orhi	r2,r16,16
   4e298:	100490fa 	slli	r2,r2,3
   4e29c:	2020d77a 	srli	r16,r4,29
   4e2a0:	202a90fa 	slli	r21,r4,3
   4e2a4:	94bf0044 	addi	r18,r18,-1023
   4e2a8:	80a0b03a 	or	r16,r16,r2
   4e2ac:	0013883a 	mov	r9,zero
   4e2b0:	000b883a 	mov	r5,zero
   4e2b4:	3806d53a 	srli	r3,r7,20
   4e2b8:	382ed7fa 	srli	r23,r7,31
   4e2bc:	04400434 	movhi	r17,16
   4e2c0:	8c7fffc4 	addi	r17,r17,-1
   4e2c4:	18c1ffcc 	andi	r3,r3,2047
   4e2c8:	3029883a 	mov	r20,r6
   4e2cc:	3c62703a 	and	r17,r7,r17
   4e2d0:	bf003fcc 	andi	fp,r23,255
   4e2d4:	18006e26 	beq	r3,zero,4e490 <__divdf3+0x254>
   4e2d8:	0081ffc4 	movi	r2,2047
   4e2dc:	18806626 	beq	r3,r2,4e478 <__divdf3+0x23c>
   4e2e0:	88800434 	orhi	r2,r17,16
   4e2e4:	100490fa 	slli	r2,r2,3
   4e2e8:	3022d77a 	srli	r17,r6,29
   4e2ec:	302890fa 	slli	r20,r6,3
   4e2f0:	18ff0044 	addi	r3,r3,-1023
   4e2f4:	88a2b03a 	or	r17,r17,r2
   4e2f8:	000f883a 	mov	r7,zero
   4e2fc:	b5e6f03a 	xor	r19,r22,r23
   4e300:	3a4cb03a 	or	r6,r7,r9
   4e304:	008003c4 	movi	r2,15
   4e308:	9809883a 	mov	r4,r19
   4e30c:	90c7c83a 	sub	r3,r18,r3
   4e310:	9cc03fcc 	andi	r19,r19,255
   4e314:	11809636 	bltu	r2,r6,4e570 <__divdf3+0x334>
   4e318:	300c90ba 	slli	r6,r6,2
   4e31c:	00800174 	movhi	r2,5
   4e320:	10b8cc04 	addi	r2,r2,-7376
   4e324:	308d883a 	add	r6,r6,r2
   4e328:	30800017 	ldw	r2,0(r6)
   4e32c:	1000683a 	jmp	r2
   4e330:	0004e570 	cmpltui	zero,zero,5013
   4e334:	0004e3a8 	cmpgeui	zero,zero,5006
   4e338:	0004e560 	cmpeqi	zero,zero,5013
   4e33c:	0004e39c 	xori	zero,zero,5006
   4e340:	0004e560 	cmpeqi	zero,zero,5013
   4e344:	0004e534 	movhi	zero,5012
   4e348:	0004e560 	cmpeqi	zero,zero,5013
   4e34c:	0004e39c 	xori	zero,zero,5006
   4e350:	0004e3a8 	cmpgeui	zero,zero,5006
   4e354:	0004e3a8 	cmpgeui	zero,zero,5006
   4e358:	0004e534 	movhi	zero,5012
   4e35c:	0004e39c 	xori	zero,zero,5006
   4e360:	0004e38c 	andi	zero,zero,5006
   4e364:	0004e38c 	andi	zero,zero,5006
   4e368:	0004e38c 	andi	zero,zero,5006
   4e36c:	0004e8f8 	rdprs	zero,zero,5027
   4e370:	2404b03a 	or	r2,r4,r16
   4e374:	10006c1e 	bne	r2,zero,4e528 <__divdf3+0x2ec>
   4e378:	02400204 	movi	r9,8
   4e37c:	0021883a 	mov	r16,zero
   4e380:	002b883a 	mov	r21,zero
   4e384:	01400084 	movi	r5,2
   4e388:	003fca06 	br	4e2b4 <_gp+0xffff1558>
   4e38c:	8023883a 	mov	r17,r16
   4e390:	a829883a 	mov	r20,r21
   4e394:	4039883a 	mov	fp,r8
   4e398:	280f883a 	mov	r7,r5
   4e39c:	00800084 	movi	r2,2
   4e3a0:	3881601e 	bne	r7,r2,4e924 <__divdf3+0x6e8>
   4e3a4:	e027883a 	mov	r19,fp
   4e3a8:	9900004c 	andi	r4,r19,1
   4e3ac:	0081ffc4 	movi	r2,2047
   4e3b0:	0021883a 	mov	r16,zero
   4e3b4:	002b883a 	mov	r21,zero
   4e3b8:	1004953a 	slli	r2,r2,20
   4e3bc:	20c03fcc 	andi	r3,r4,255
   4e3c0:	01400434 	movhi	r5,16
   4e3c4:	297fffc4 	addi	r5,r5,-1
   4e3c8:	180697fa 	slli	r3,r3,31
   4e3cc:	8160703a 	and	r16,r16,r5
   4e3d0:	80a0b03a 	or	r16,r16,r2
   4e3d4:	80c6b03a 	or	r3,r16,r3
   4e3d8:	a805883a 	mov	r2,r21
   4e3dc:	dfc00f17 	ldw	ra,60(sp)
   4e3e0:	df000e17 	ldw	fp,56(sp)
   4e3e4:	ddc00d17 	ldw	r23,52(sp)
   4e3e8:	dd800c17 	ldw	r22,48(sp)
   4e3ec:	dd400b17 	ldw	r21,44(sp)
   4e3f0:	dd000a17 	ldw	r20,40(sp)
   4e3f4:	dcc00917 	ldw	r19,36(sp)
   4e3f8:	dc800817 	ldw	r18,32(sp)
   4e3fc:	dc400717 	ldw	r17,28(sp)
   4e400:	dc000617 	ldw	r16,24(sp)
   4e404:	dec01004 	addi	sp,sp,64
   4e408:	f800283a 	ret
   4e40c:	2404b03a 	or	r2,r4,r16
   4e410:	2023883a 	mov	r17,r4
   4e414:	10003f26 	beq	r2,zero,4e514 <__divdf3+0x2d8>
   4e418:	80015e26 	beq	r16,zero,4e994 <__divdf3+0x758>
   4e41c:	8009883a 	mov	r4,r16
   4e420:	d9800215 	stw	r6,8(sp)
   4e424:	d9c00515 	stw	r7,20(sp)
   4e428:	da000415 	stw	r8,16(sp)
   4e42c:	00501d00 	call	501d0 <__clzsi2>
   4e430:	d9800217 	ldw	r6,8(sp)
   4e434:	d9c00517 	ldw	r7,20(sp)
   4e438:	da000417 	ldw	r8,16(sp)
   4e43c:	113ffd44 	addi	r4,r2,-11
   4e440:	00c00704 	movi	r3,28
   4e444:	19014f16 	blt	r3,r4,4e984 <__divdf3+0x748>
   4e448:	00c00744 	movi	r3,29
   4e44c:	157ffe04 	addi	r21,r2,-8
   4e450:	1907c83a 	sub	r3,r3,r4
   4e454:	8560983a 	sll	r16,r16,r21
   4e458:	88c6d83a 	srl	r3,r17,r3
   4e45c:	8d6a983a 	sll	r21,r17,r21
   4e460:	1c20b03a 	or	r16,r3,r16
   4e464:	1080fcc4 	addi	r2,r2,1011
   4e468:	00a5c83a 	sub	r18,zero,r2
   4e46c:	0013883a 	mov	r9,zero
   4e470:	000b883a 	mov	r5,zero
   4e474:	003f8f06 	br	4e2b4 <_gp+0xffff1558>
   4e478:	3444b03a 	or	r2,r6,r17
   4e47c:	1000231e 	bne	r2,zero,4e50c <__divdf3+0x2d0>
   4e480:	0023883a 	mov	r17,zero
   4e484:	0029883a 	mov	r20,zero
   4e488:	01c00084 	movi	r7,2
   4e48c:	003f9b06 	br	4e2fc <_gp+0xffff15a0>
   4e490:	3444b03a 	or	r2,r6,r17
   4e494:	10001926 	beq	r2,zero,4e4fc <__divdf3+0x2c0>
   4e498:	88014b26 	beq	r17,zero,4e9c8 <__divdf3+0x78c>
   4e49c:	8809883a 	mov	r4,r17
   4e4a0:	d9400115 	stw	r5,4(sp)
   4e4a4:	d9800215 	stw	r6,8(sp)
   4e4a8:	da000415 	stw	r8,16(sp)
   4e4ac:	da400315 	stw	r9,12(sp)
   4e4b0:	00501d00 	call	501d0 <__clzsi2>
   4e4b4:	d9400117 	ldw	r5,4(sp)
   4e4b8:	d9800217 	ldw	r6,8(sp)
   4e4bc:	da000417 	ldw	r8,16(sp)
   4e4c0:	da400317 	ldw	r9,12(sp)
   4e4c4:	113ffd44 	addi	r4,r2,-11
   4e4c8:	00c00704 	movi	r3,28
   4e4cc:	19013a16 	blt	r3,r4,4e9b8 <__divdf3+0x77c>
   4e4d0:	00c00744 	movi	r3,29
   4e4d4:	153ffe04 	addi	r20,r2,-8
   4e4d8:	1907c83a 	sub	r3,r3,r4
   4e4dc:	8d22983a 	sll	r17,r17,r20
   4e4e0:	30c6d83a 	srl	r3,r6,r3
   4e4e4:	3528983a 	sll	r20,r6,r20
   4e4e8:	1c62b03a 	or	r17,r3,r17
   4e4ec:	1080fcc4 	addi	r2,r2,1011
   4e4f0:	0087c83a 	sub	r3,zero,r2
   4e4f4:	000f883a 	mov	r7,zero
   4e4f8:	003f8006 	br	4e2fc <_gp+0xffff15a0>
   4e4fc:	0023883a 	mov	r17,zero
   4e500:	0029883a 	mov	r20,zero
   4e504:	01c00044 	movi	r7,1
   4e508:	003f7c06 	br	4e2fc <_gp+0xffff15a0>
   4e50c:	01c000c4 	movi	r7,3
   4e510:	003f7a06 	br	4e2fc <_gp+0xffff15a0>
   4e514:	02400104 	movi	r9,4
   4e518:	0021883a 	mov	r16,zero
   4e51c:	002b883a 	mov	r21,zero
   4e520:	01400044 	movi	r5,1
   4e524:	003f6306 	br	4e2b4 <_gp+0xffff1558>
   4e528:	02400304 	movi	r9,12
   4e52c:	014000c4 	movi	r5,3
   4e530:	003f6006 	br	4e2b4 <_gp+0xffff1558>
   4e534:	04000434 	movhi	r16,16
   4e538:	0009883a 	mov	r4,zero
   4e53c:	843fffc4 	addi	r16,r16,-1
   4e540:	057fffc4 	movi	r21,-1
   4e544:	0081ffc4 	movi	r2,2047
   4e548:	003f9b06 	br	4e3b8 <_gp+0xffff165c>
   4e54c:	00c00044 	movi	r3,1
   4e550:	1887c83a 	sub	r3,r3,r2
   4e554:	01000e04 	movi	r4,56
   4e558:	20c1530e 	bge	r4,r3,4eaa8 <__divdf3+0x86c>
   4e55c:	9900004c 	andi	r4,r19,1
   4e560:	0005883a 	mov	r2,zero
   4e564:	0021883a 	mov	r16,zero
   4e568:	002b883a 	mov	r21,zero
   4e56c:	003f9206 	br	4e3b8 <_gp+0xffff165c>
   4e570:	8c012e36 	bltu	r17,r16,4ea2c <__divdf3+0x7f0>
   4e574:	84412c26 	beq	r16,r17,4ea28 <__divdf3+0x7ec>
   4e578:	a82f883a 	mov	r23,r21
   4e57c:	18ffffc4 	addi	r3,r3,-1
   4e580:	002b883a 	mov	r21,zero
   4e584:	a004d63a 	srli	r2,r20,24
   4e588:	8822923a 	slli	r17,r17,8
   4e58c:	a028923a 	slli	r20,r20,8
   4e590:	8009883a 	mov	r4,r16
   4e594:	88acb03a 	or	r22,r17,r2
   4e598:	dd000015 	stw	r20,0(sp)
   4e59c:	b028d43a 	srli	r20,r22,16
   4e5a0:	d8c00215 	stw	r3,8(sp)
   4e5a4:	b4bfffcc 	andi	r18,r22,65535
   4e5a8:	a00b883a 	mov	r5,r20
   4e5ac:	004d8ac0 	call	4d8ac <__udivsi3>
   4e5b0:	100b883a 	mov	r5,r2
   4e5b4:	9009883a 	mov	r4,r18
   4e5b8:	1023883a 	mov	r17,r2
   4e5bc:	004d9680 	call	4d968 <__mulsi3>
   4e5c0:	8009883a 	mov	r4,r16
   4e5c4:	a00b883a 	mov	r5,r20
   4e5c8:	1039883a 	mov	fp,r2
   4e5cc:	004d9100 	call	4d910 <__umodsi3>
   4e5d0:	1004943a 	slli	r2,r2,16
   4e5d4:	b808d43a 	srli	r4,r23,16
   4e5d8:	d8c00217 	ldw	r3,8(sp)
   4e5dc:	2084b03a 	or	r2,r4,r2
   4e5e0:	1700062e 	bgeu	r2,fp,4e5fc <__divdf3+0x3c0>
   4e5e4:	1585883a 	add	r2,r2,r22
   4e5e8:	893fffc4 	addi	r4,r17,-1
   4e5ec:	15811d36 	bltu	r2,r22,4ea64 <__divdf3+0x828>
   4e5f0:	17011c2e 	bgeu	r2,fp,4ea64 <__divdf3+0x828>
   4e5f4:	8c7fff84 	addi	r17,r17,-2
   4e5f8:	1585883a 	add	r2,r2,r22
   4e5fc:	1739c83a 	sub	fp,r2,fp
   4e600:	a00b883a 	mov	r5,r20
   4e604:	e009883a 	mov	r4,fp
   4e608:	d8c00215 	stw	r3,8(sp)
   4e60c:	004d8ac0 	call	4d8ac <__udivsi3>
   4e610:	100b883a 	mov	r5,r2
   4e614:	9009883a 	mov	r4,r18
   4e618:	1021883a 	mov	r16,r2
   4e61c:	004d9680 	call	4d968 <__mulsi3>
   4e620:	a00b883a 	mov	r5,r20
   4e624:	e009883a 	mov	r4,fp
   4e628:	d8800415 	stw	r2,16(sp)
   4e62c:	004d9100 	call	4d910 <__umodsi3>
   4e630:	1004943a 	slli	r2,r2,16
   4e634:	da000417 	ldw	r8,16(sp)
   4e638:	bdffffcc 	andi	r23,r23,65535
   4e63c:	b884b03a 	or	r2,r23,r2
   4e640:	d8c00217 	ldw	r3,8(sp)
   4e644:	1200062e 	bgeu	r2,r8,4e660 <__divdf3+0x424>
   4e648:	1585883a 	add	r2,r2,r22
   4e64c:	813fffc4 	addi	r4,r16,-1
   4e650:	15810236 	bltu	r2,r22,4ea5c <__divdf3+0x820>
   4e654:	1201012e 	bgeu	r2,r8,4ea5c <__divdf3+0x820>
   4e658:	843fff84 	addi	r16,r16,-2
   4e65c:	1585883a 	add	r2,r2,r22
   4e660:	8822943a 	slli	r17,r17,16
   4e664:	d9800017 	ldw	r6,0(sp)
   4e668:	1211c83a 	sub	r8,r2,r8
   4e66c:	8c22b03a 	or	r17,r17,r16
   4e670:	373fffcc 	andi	fp,r6,65535
   4e674:	8abfffcc 	andi	r10,r17,65535
   4e678:	8820d43a 	srli	r16,r17,16
   4e67c:	5009883a 	mov	r4,r10
   4e680:	e00b883a 	mov	r5,fp
   4e684:	302ed43a 	srli	r23,r6,16
   4e688:	d8c00215 	stw	r3,8(sp)
   4e68c:	da000415 	stw	r8,16(sp)
   4e690:	da800115 	stw	r10,4(sp)
   4e694:	004d9680 	call	4d968 <__mulsi3>
   4e698:	800b883a 	mov	r5,r16
   4e69c:	e009883a 	mov	r4,fp
   4e6a0:	d8800515 	stw	r2,20(sp)
   4e6a4:	004d9680 	call	4d968 <__mulsi3>
   4e6a8:	8009883a 	mov	r4,r16
   4e6ac:	b80b883a 	mov	r5,r23
   4e6b0:	d8800315 	stw	r2,12(sp)
   4e6b4:	004d9680 	call	4d968 <__mulsi3>
   4e6b8:	da800117 	ldw	r10,4(sp)
   4e6bc:	b80b883a 	mov	r5,r23
   4e6c0:	1021883a 	mov	r16,r2
   4e6c4:	5009883a 	mov	r4,r10
   4e6c8:	004d9680 	call	4d968 <__mulsi3>
   4e6cc:	d9c00517 	ldw	r7,20(sp)
   4e6d0:	da400317 	ldw	r9,12(sp)
   4e6d4:	d8c00217 	ldw	r3,8(sp)
   4e6d8:	3808d43a 	srli	r4,r7,16
   4e6dc:	1245883a 	add	r2,r2,r9
   4e6e0:	da000417 	ldw	r8,16(sp)
   4e6e4:	2085883a 	add	r2,r4,r2
   4e6e8:	1240022e 	bgeu	r2,r9,4e6f4 <__divdf3+0x4b8>
   4e6ec:	01000074 	movhi	r4,1
   4e6f0:	8121883a 	add	r16,r16,r4
   4e6f4:	1008d43a 	srli	r4,r2,16
   4e6f8:	1004943a 	slli	r2,r2,16
   4e6fc:	39ffffcc 	andi	r7,r7,65535
   4e700:	2409883a 	add	r4,r4,r16
   4e704:	11c5883a 	add	r2,r2,r7
   4e708:	4100bb36 	bltu	r8,r4,4e9f8 <__divdf3+0x7bc>
   4e70c:	4100d726 	beq	r8,r4,4ea6c <__divdf3+0x830>
   4e710:	4109c83a 	sub	r4,r8,r4
   4e714:	a8a1c83a 	sub	r16,r21,r2
   4e718:	ac2b803a 	cmpltu	r21,r21,r16
   4e71c:	256bc83a 	sub	r21,r4,r21
   4e720:	b540d926 	beq	r22,r21,4ea88 <__divdf3+0x84c>
   4e724:	a00b883a 	mov	r5,r20
   4e728:	a809883a 	mov	r4,r21
   4e72c:	d8c00215 	stw	r3,8(sp)
   4e730:	004d8ac0 	call	4d8ac <__udivsi3>
   4e734:	100b883a 	mov	r5,r2
   4e738:	9009883a 	mov	r4,r18
   4e73c:	d8800515 	stw	r2,20(sp)
   4e740:	004d9680 	call	4d968 <__mulsi3>
   4e744:	a809883a 	mov	r4,r21
   4e748:	a00b883a 	mov	r5,r20
   4e74c:	d8800415 	stw	r2,16(sp)
   4e750:	004d9100 	call	4d910 <__umodsi3>
   4e754:	1004943a 	slli	r2,r2,16
   4e758:	8008d43a 	srli	r4,r16,16
   4e75c:	da000417 	ldw	r8,16(sp)
   4e760:	d8c00217 	ldw	r3,8(sp)
   4e764:	2084b03a 	or	r2,r4,r2
   4e768:	d9c00517 	ldw	r7,20(sp)
   4e76c:	1200062e 	bgeu	r2,r8,4e788 <__divdf3+0x54c>
   4e770:	1585883a 	add	r2,r2,r22
   4e774:	393fffc4 	addi	r4,r7,-1
   4e778:	1580c536 	bltu	r2,r22,4ea90 <__divdf3+0x854>
   4e77c:	1200c42e 	bgeu	r2,r8,4ea90 <__divdf3+0x854>
   4e780:	39ffff84 	addi	r7,r7,-2
   4e784:	1585883a 	add	r2,r2,r22
   4e788:	122bc83a 	sub	r21,r2,r8
   4e78c:	a00b883a 	mov	r5,r20
   4e790:	a809883a 	mov	r4,r21
   4e794:	d8c00215 	stw	r3,8(sp)
   4e798:	d9c00515 	stw	r7,20(sp)
   4e79c:	004d8ac0 	call	4d8ac <__udivsi3>
   4e7a0:	9009883a 	mov	r4,r18
   4e7a4:	100b883a 	mov	r5,r2
   4e7a8:	d8800415 	stw	r2,16(sp)
   4e7ac:	004d9680 	call	4d968 <__mulsi3>
   4e7b0:	a809883a 	mov	r4,r21
   4e7b4:	a00b883a 	mov	r5,r20
   4e7b8:	1025883a 	mov	r18,r2
   4e7bc:	004d9100 	call	4d910 <__umodsi3>
   4e7c0:	1004943a 	slli	r2,r2,16
   4e7c4:	813fffcc 	andi	r4,r16,65535
   4e7c8:	d8c00217 	ldw	r3,8(sp)
   4e7cc:	20a0b03a 	or	r16,r4,r2
   4e7d0:	d9c00517 	ldw	r7,20(sp)
   4e7d4:	da000417 	ldw	r8,16(sp)
   4e7d8:	8480062e 	bgeu	r16,r18,4e7f4 <__divdf3+0x5b8>
   4e7dc:	85a1883a 	add	r16,r16,r22
   4e7e0:	40bfffc4 	addi	r2,r8,-1
   4e7e4:	8580ac36 	bltu	r16,r22,4ea98 <__divdf3+0x85c>
   4e7e8:	8480ab2e 	bgeu	r16,r18,4ea98 <__divdf3+0x85c>
   4e7ec:	423fff84 	addi	r8,r8,-2
   4e7f0:	85a1883a 	add	r16,r16,r22
   4e7f4:	3804943a 	slli	r2,r7,16
   4e7f8:	84a1c83a 	sub	r16,r16,r18
   4e7fc:	e009883a 	mov	r4,fp
   4e800:	1228b03a 	or	r20,r2,r8
   4e804:	a1ffffcc 	andi	r7,r20,65535
   4e808:	a024d43a 	srli	r18,r20,16
   4e80c:	380b883a 	mov	r5,r7
   4e810:	d8c00215 	stw	r3,8(sp)
   4e814:	d9c00515 	stw	r7,20(sp)
   4e818:	004d9680 	call	4d968 <__mulsi3>
   4e81c:	900b883a 	mov	r5,r18
   4e820:	e009883a 	mov	r4,fp
   4e824:	102b883a 	mov	r21,r2
   4e828:	004d9680 	call	4d968 <__mulsi3>
   4e82c:	900b883a 	mov	r5,r18
   4e830:	b809883a 	mov	r4,r23
   4e834:	1039883a 	mov	fp,r2
   4e838:	004d9680 	call	4d968 <__mulsi3>
   4e83c:	d9c00517 	ldw	r7,20(sp)
   4e840:	b80b883a 	mov	r5,r23
   4e844:	1025883a 	mov	r18,r2
   4e848:	3809883a 	mov	r4,r7
   4e84c:	004d9680 	call	4d968 <__mulsi3>
   4e850:	a808d43a 	srli	r4,r21,16
   4e854:	1705883a 	add	r2,r2,fp
   4e858:	d8c00217 	ldw	r3,8(sp)
   4e85c:	2085883a 	add	r2,r4,r2
   4e860:	1700022e 	bgeu	r2,fp,4e86c <__divdf3+0x630>
   4e864:	01000074 	movhi	r4,1
   4e868:	9125883a 	add	r18,r18,r4
   4e86c:	1008d43a 	srli	r4,r2,16
   4e870:	1004943a 	slli	r2,r2,16
   4e874:	ad7fffcc 	andi	r21,r21,65535
   4e878:	2489883a 	add	r4,r4,r18
   4e87c:	1545883a 	add	r2,r2,r21
   4e880:	81003836 	bltu	r16,r4,4e964 <__divdf3+0x728>
   4e884:	81003626 	beq	r16,r4,4e960 <__divdf3+0x724>
   4e888:	a5000054 	ori	r20,r20,1
   4e88c:	1880ffc4 	addi	r2,r3,1023
   4e890:	00bf2e0e 	bge	zero,r2,4e54c <_gp+0xffff17f0>
   4e894:	a10001cc 	andi	r4,r20,7
   4e898:	20000726 	beq	r4,zero,4e8b8 <__divdf3+0x67c>
   4e89c:	a10003cc 	andi	r4,r20,15
   4e8a0:	01400104 	movi	r5,4
   4e8a4:	21400426 	beq	r4,r5,4e8b8 <__divdf3+0x67c>
   4e8a8:	a149883a 	add	r4,r20,r5
   4e8ac:	2529803a 	cmpltu	r20,r4,r20
   4e8b0:	8d23883a 	add	r17,r17,r20
   4e8b4:	2029883a 	mov	r20,r4
   4e8b8:	8900402c 	andhi	r4,r17,256
   4e8bc:	20000426 	beq	r4,zero,4e8d0 <__divdf3+0x694>
   4e8c0:	18810004 	addi	r2,r3,1024
   4e8c4:	00ffc034 	movhi	r3,65280
   4e8c8:	18ffffc4 	addi	r3,r3,-1
   4e8cc:	88e2703a 	and	r17,r17,r3
   4e8d0:	00c1ff84 	movi	r3,2046
   4e8d4:	18beb416 	blt	r3,r2,4e3a8 <_gp+0xffff164c>
   4e8d8:	a028d0fa 	srli	r20,r20,3
   4e8dc:	882a977a 	slli	r21,r17,29
   4e8e0:	8820927a 	slli	r16,r17,9
   4e8e4:	1081ffcc 	andi	r2,r2,2047
   4e8e8:	ad2ab03a 	or	r21,r21,r20
   4e8ec:	8020d33a 	srli	r16,r16,12
   4e8f0:	9900004c 	andi	r4,r19,1
   4e8f4:	003eb006 	br	4e3b8 <_gp+0xffff165c>
   4e8f8:	8080022c 	andhi	r2,r16,8
   4e8fc:	10001226 	beq	r2,zero,4e948 <__divdf3+0x70c>
   4e900:	8880022c 	andhi	r2,r17,8
   4e904:	1000101e 	bne	r2,zero,4e948 <__divdf3+0x70c>
   4e908:	00800434 	movhi	r2,16
   4e90c:	8c000234 	orhi	r16,r17,8
   4e910:	10bfffc4 	addi	r2,r2,-1
   4e914:	b809883a 	mov	r4,r23
   4e918:	80a0703a 	and	r16,r16,r2
   4e91c:	a02b883a 	mov	r21,r20
   4e920:	003f0806 	br	4e544 <_gp+0xffff17e8>
   4e924:	008000c4 	movi	r2,3
   4e928:	3880b126 	beq	r7,r2,4ebf0 <__divdf3+0x9b4>
   4e92c:	00800044 	movi	r2,1
   4e930:	38805b1e 	bne	r7,r2,4eaa0 <__divdf3+0x864>
   4e934:	e009883a 	mov	r4,fp
   4e938:	0005883a 	mov	r2,zero
   4e93c:	0021883a 	mov	r16,zero
   4e940:	002b883a 	mov	r21,zero
   4e944:	003e9c06 	br	4e3b8 <_gp+0xffff165c>
   4e948:	00800434 	movhi	r2,16
   4e94c:	84000234 	orhi	r16,r16,8
   4e950:	10bfffc4 	addi	r2,r2,-1
   4e954:	b009883a 	mov	r4,r22
   4e958:	80a0703a 	and	r16,r16,r2
   4e95c:	003ef906 	br	4e544 <_gp+0xffff17e8>
   4e960:	103fca26 	beq	r2,zero,4e88c <_gp+0xffff1b30>
   4e964:	b421883a 	add	r16,r22,r16
   4e968:	a17fffc4 	addi	r5,r20,-1
   4e96c:	8580422e 	bgeu	r16,r22,4ea78 <__divdf3+0x83c>
   4e970:	2829883a 	mov	r20,r5
   4e974:	813fc41e 	bne	r16,r4,4e888 <_gp+0xffff1b2c>
   4e978:	d9800017 	ldw	r6,0(sp)
   4e97c:	30bfc21e 	bne	r6,r2,4e888 <_gp+0xffff1b2c>
   4e980:	003fc206 	br	4e88c <_gp+0xffff1b30>
   4e984:	143ff604 	addi	r16,r2,-40
   4e988:	8c20983a 	sll	r16,r17,r16
   4e98c:	002b883a 	mov	r21,zero
   4e990:	003eb406 	br	4e464 <_gp+0xffff1708>
   4e994:	d9800215 	stw	r6,8(sp)
   4e998:	d9c00515 	stw	r7,20(sp)
   4e99c:	da000415 	stw	r8,16(sp)
   4e9a0:	00501d00 	call	501d0 <__clzsi2>
   4e9a4:	10800804 	addi	r2,r2,32
   4e9a8:	da000417 	ldw	r8,16(sp)
   4e9ac:	d9c00517 	ldw	r7,20(sp)
   4e9b0:	d9800217 	ldw	r6,8(sp)
   4e9b4:	003ea106 	br	4e43c <_gp+0xffff16e0>
   4e9b8:	147ff604 	addi	r17,r2,-40
   4e9bc:	3462983a 	sll	r17,r6,r17
   4e9c0:	0029883a 	mov	r20,zero
   4e9c4:	003ec906 	br	4e4ec <_gp+0xffff1790>
   4e9c8:	3009883a 	mov	r4,r6
   4e9cc:	d9400115 	stw	r5,4(sp)
   4e9d0:	d9800215 	stw	r6,8(sp)
   4e9d4:	da000415 	stw	r8,16(sp)
   4e9d8:	da400315 	stw	r9,12(sp)
   4e9dc:	00501d00 	call	501d0 <__clzsi2>
   4e9e0:	10800804 	addi	r2,r2,32
   4e9e4:	da400317 	ldw	r9,12(sp)
   4e9e8:	da000417 	ldw	r8,16(sp)
   4e9ec:	d9800217 	ldw	r6,8(sp)
   4e9f0:	d9400117 	ldw	r5,4(sp)
   4e9f4:	003eb306 	br	4e4c4 <_gp+0xffff1768>
   4e9f8:	d9800017 	ldw	r6,0(sp)
   4e9fc:	a9ab883a 	add	r21,r21,r6
   4ea00:	a98b803a 	cmpltu	r5,r21,r6
   4ea04:	2d8b883a 	add	r5,r5,r22
   4ea08:	2a11883a 	add	r8,r5,r8
   4ea0c:	897fffc4 	addi	r5,r17,-1
   4ea10:	b2000c2e 	bgeu	r22,r8,4ea44 <__divdf3+0x808>
   4ea14:	41003f36 	bltu	r8,r4,4eb14 <__divdf3+0x8d8>
   4ea18:	22006c26 	beq	r4,r8,4ebcc <__divdf3+0x990>
   4ea1c:	4109c83a 	sub	r4,r8,r4
   4ea20:	2823883a 	mov	r17,r5
   4ea24:	003f3b06 	br	4e714 <_gp+0xffff19b8>
   4ea28:	ad3ed336 	bltu	r21,r20,4e578 <_gp+0xffff181c>
   4ea2c:	a804d07a 	srli	r2,r21,1
   4ea30:	802e97fa 	slli	r23,r16,31
   4ea34:	a82a97fa 	slli	r21,r21,31
   4ea38:	8020d07a 	srli	r16,r16,1
   4ea3c:	b8aeb03a 	or	r23,r23,r2
   4ea40:	003ed006 	br	4e584 <_gp+0xffff1828>
   4ea44:	b23ff51e 	bne	r22,r8,4ea1c <_gp+0xffff1cc0>
   4ea48:	d9800017 	ldw	r6,0(sp)
   4ea4c:	a9bff12e 	bgeu	r21,r6,4ea14 <_gp+0xffff1cb8>
   4ea50:	b109c83a 	sub	r4,r22,r4
   4ea54:	2823883a 	mov	r17,r5
   4ea58:	003f2e06 	br	4e714 <_gp+0xffff19b8>
   4ea5c:	2021883a 	mov	r16,r4
   4ea60:	003eff06 	br	4e660 <_gp+0xffff1904>
   4ea64:	2023883a 	mov	r17,r4
   4ea68:	003ee406 	br	4e5fc <_gp+0xffff18a0>
   4ea6c:	a8bfe236 	bltu	r21,r2,4e9f8 <_gp+0xffff1c9c>
   4ea70:	0009883a 	mov	r4,zero
   4ea74:	003f2706 	br	4e714 <_gp+0xffff19b8>
   4ea78:	81002d36 	bltu	r16,r4,4eb30 <__divdf3+0x8f4>
   4ea7c:	24005626 	beq	r4,r16,4ebd8 <__divdf3+0x99c>
   4ea80:	2829883a 	mov	r20,r5
   4ea84:	003f8006 	br	4e888 <_gp+0xffff1b2c>
   4ea88:	053fffc4 	movi	r20,-1
   4ea8c:	003f7f06 	br	4e88c <_gp+0xffff1b30>
   4ea90:	200f883a 	mov	r7,r4
   4ea94:	003f3c06 	br	4e788 <_gp+0xffff1a2c>
   4ea98:	1011883a 	mov	r8,r2
   4ea9c:	003f5506 	br	4e7f4 <_gp+0xffff1a98>
   4eaa0:	e027883a 	mov	r19,fp
   4eaa4:	003f7906 	br	4e88c <_gp+0xffff1b30>
   4eaa8:	010007c4 	movi	r4,31
   4eaac:	20c02816 	blt	r4,r3,4eb50 <__divdf3+0x914>
   4eab0:	00800804 	movi	r2,32
   4eab4:	10c5c83a 	sub	r2,r2,r3
   4eab8:	888a983a 	sll	r5,r17,r2
   4eabc:	a0c8d83a 	srl	r4,r20,r3
   4eac0:	a084983a 	sll	r2,r20,r2
   4eac4:	88e2d83a 	srl	r17,r17,r3
   4eac8:	2906b03a 	or	r3,r5,r4
   4eacc:	1004c03a 	cmpne	r2,r2,zero
   4ead0:	1886b03a 	or	r3,r3,r2
   4ead4:	188001cc 	andi	r2,r3,7
   4ead8:	10000726 	beq	r2,zero,4eaf8 <__divdf3+0x8bc>
   4eadc:	188003cc 	andi	r2,r3,15
   4eae0:	01000104 	movi	r4,4
   4eae4:	11000426 	beq	r2,r4,4eaf8 <__divdf3+0x8bc>
   4eae8:	1805883a 	mov	r2,r3
   4eaec:	10c00104 	addi	r3,r2,4
   4eaf0:	1885803a 	cmpltu	r2,r3,r2
   4eaf4:	88a3883a 	add	r17,r17,r2
   4eaf8:	8880202c 	andhi	r2,r17,128
   4eafc:	10002926 	beq	r2,zero,4eba4 <__divdf3+0x968>
   4eb00:	9900004c 	andi	r4,r19,1
   4eb04:	00800044 	movi	r2,1
   4eb08:	0021883a 	mov	r16,zero
   4eb0c:	002b883a 	mov	r21,zero
   4eb10:	003e2906 	br	4e3b8 <_gp+0xffff165c>
   4eb14:	d9800017 	ldw	r6,0(sp)
   4eb18:	8c7fff84 	addi	r17,r17,-2
   4eb1c:	a9ab883a 	add	r21,r21,r6
   4eb20:	a98b803a 	cmpltu	r5,r21,r6
   4eb24:	2d8b883a 	add	r5,r5,r22
   4eb28:	2a11883a 	add	r8,r5,r8
   4eb2c:	003ef806 	br	4e710 <_gp+0xffff19b4>
   4eb30:	d9800017 	ldw	r6,0(sp)
   4eb34:	318f883a 	add	r7,r6,r6
   4eb38:	398b803a 	cmpltu	r5,r7,r6
   4eb3c:	2d8d883a 	add	r6,r5,r22
   4eb40:	81a1883a 	add	r16,r16,r6
   4eb44:	a17fff84 	addi	r5,r20,-2
   4eb48:	d9c00015 	stw	r7,0(sp)
   4eb4c:	003f8806 	br	4e970 <_gp+0xffff1c14>
   4eb50:	013ff844 	movi	r4,-31
   4eb54:	2085c83a 	sub	r2,r4,r2
   4eb58:	8888d83a 	srl	r4,r17,r2
   4eb5c:	00800804 	movi	r2,32
   4eb60:	18802126 	beq	r3,r2,4ebe8 <__divdf3+0x9ac>
   4eb64:	04001004 	movi	r16,64
   4eb68:	80c7c83a 	sub	r3,r16,r3
   4eb6c:	88e0983a 	sll	r16,r17,r3
   4eb70:	8504b03a 	or	r2,r16,r20
   4eb74:	1004c03a 	cmpne	r2,r2,zero
   4eb78:	2084b03a 	or	r2,r4,r2
   4eb7c:	144001cc 	andi	r17,r2,7
   4eb80:	88000d1e 	bne	r17,zero,4ebb8 <__divdf3+0x97c>
   4eb84:	0021883a 	mov	r16,zero
   4eb88:	102ad0fa 	srli	r21,r2,3
   4eb8c:	9900004c 	andi	r4,r19,1
   4eb90:	0005883a 	mov	r2,zero
   4eb94:	ac6ab03a 	or	r21,r21,r17
   4eb98:	003e0706 	br	4e3b8 <_gp+0xffff165c>
   4eb9c:	1007883a 	mov	r3,r2
   4eba0:	0023883a 	mov	r17,zero
   4eba4:	8820927a 	slli	r16,r17,9
   4eba8:	1805883a 	mov	r2,r3
   4ebac:	8822977a 	slli	r17,r17,29
   4ebb0:	8020d33a 	srli	r16,r16,12
   4ebb4:	003ff406 	br	4eb88 <_gp+0xffff1e2c>
   4ebb8:	10c003cc 	andi	r3,r2,15
   4ebbc:	01000104 	movi	r4,4
   4ebc0:	193ff626 	beq	r3,r4,4eb9c <_gp+0xffff1e40>
   4ebc4:	0023883a 	mov	r17,zero
   4ebc8:	003fc806 	br	4eaec <_gp+0xffff1d90>
   4ebcc:	a8bfd136 	bltu	r21,r2,4eb14 <_gp+0xffff1db8>
   4ebd0:	2823883a 	mov	r17,r5
   4ebd4:	003fa606 	br	4ea70 <_gp+0xffff1d14>
   4ebd8:	d9800017 	ldw	r6,0(sp)
   4ebdc:	30bfd436 	bltu	r6,r2,4eb30 <_gp+0xffff1dd4>
   4ebe0:	2829883a 	mov	r20,r5
   4ebe4:	003f6406 	br	4e978 <_gp+0xffff1c1c>
   4ebe8:	0021883a 	mov	r16,zero
   4ebec:	003fe006 	br	4eb70 <_gp+0xffff1e14>
   4ebf0:	00800434 	movhi	r2,16
   4ebf4:	8c000234 	orhi	r16,r17,8
   4ebf8:	10bfffc4 	addi	r2,r2,-1
   4ebfc:	e009883a 	mov	r4,fp
   4ec00:	80a0703a 	and	r16,r16,r2
   4ec04:	a02b883a 	mov	r21,r20
   4ec08:	003e4e06 	br	4e544 <_gp+0xffff17e8>

0004ec0c <__eqdf2>:
   4ec0c:	2804d53a 	srli	r2,r5,20
   4ec10:	3806d53a 	srli	r3,r7,20
   4ec14:	02000434 	movhi	r8,16
   4ec18:	423fffc4 	addi	r8,r8,-1
   4ec1c:	1081ffcc 	andi	r2,r2,2047
   4ec20:	0281ffc4 	movi	r10,2047
   4ec24:	2a12703a 	and	r9,r5,r8
   4ec28:	18c1ffcc 	andi	r3,r3,2047
   4ec2c:	3a10703a 	and	r8,r7,r8
   4ec30:	280ad7fa 	srli	r5,r5,31
   4ec34:	380ed7fa 	srli	r7,r7,31
   4ec38:	12801026 	beq	r2,r10,4ec7c <__eqdf2+0x70>
   4ec3c:	0281ffc4 	movi	r10,2047
   4ec40:	1a800a26 	beq	r3,r10,4ec6c <__eqdf2+0x60>
   4ec44:	10c00226 	beq	r2,r3,4ec50 <__eqdf2+0x44>
   4ec48:	00800044 	movi	r2,1
   4ec4c:	f800283a 	ret
   4ec50:	4a3ffd1e 	bne	r9,r8,4ec48 <_gp+0xffff1eec>
   4ec54:	21bffc1e 	bne	r4,r6,4ec48 <_gp+0xffff1eec>
   4ec58:	29c00c26 	beq	r5,r7,4ec8c <__eqdf2+0x80>
   4ec5c:	103ffa1e 	bne	r2,zero,4ec48 <_gp+0xffff1eec>
   4ec60:	2244b03a 	or	r2,r4,r9
   4ec64:	1004c03a 	cmpne	r2,r2,zero
   4ec68:	f800283a 	ret
   4ec6c:	3214b03a 	or	r10,r6,r8
   4ec70:	503ff426 	beq	r10,zero,4ec44 <_gp+0xffff1ee8>
   4ec74:	00800044 	movi	r2,1
   4ec78:	f800283a 	ret
   4ec7c:	2254b03a 	or	r10,r4,r9
   4ec80:	503fee26 	beq	r10,zero,4ec3c <_gp+0xffff1ee0>
   4ec84:	00800044 	movi	r2,1
   4ec88:	f800283a 	ret
   4ec8c:	0005883a 	mov	r2,zero
   4ec90:	f800283a 	ret

0004ec94 <__gedf2>:
   4ec94:	2804d53a 	srli	r2,r5,20
   4ec98:	3806d53a 	srli	r3,r7,20
   4ec9c:	02000434 	movhi	r8,16
   4eca0:	423fffc4 	addi	r8,r8,-1
   4eca4:	1081ffcc 	andi	r2,r2,2047
   4eca8:	0241ffc4 	movi	r9,2047
   4ecac:	2a14703a 	and	r10,r5,r8
   4ecb0:	18c1ffcc 	andi	r3,r3,2047
   4ecb4:	3a10703a 	and	r8,r7,r8
   4ecb8:	280ad7fa 	srli	r5,r5,31
   4ecbc:	380ed7fa 	srli	r7,r7,31
   4ecc0:	12401d26 	beq	r2,r9,4ed38 <__gedf2+0xa4>
   4ecc4:	0241ffc4 	movi	r9,2047
   4ecc8:	1a401226 	beq	r3,r9,4ed14 <__gedf2+0x80>
   4eccc:	1000081e 	bne	r2,zero,4ecf0 <__gedf2+0x5c>
   4ecd0:	2296b03a 	or	r11,r4,r10
   4ecd4:	5813003a 	cmpeq	r9,r11,zero
   4ecd8:	1800091e 	bne	r3,zero,4ed00 <__gedf2+0x6c>
   4ecdc:	3218b03a 	or	r12,r6,r8
   4ece0:	6000071e 	bne	r12,zero,4ed00 <__gedf2+0x6c>
   4ece4:	0005883a 	mov	r2,zero
   4ece8:	5800101e 	bne	r11,zero,4ed2c <__gedf2+0x98>
   4ecec:	f800283a 	ret
   4ecf0:	18000c1e 	bne	r3,zero,4ed24 <__gedf2+0x90>
   4ecf4:	3212b03a 	or	r9,r6,r8
   4ecf8:	48000c26 	beq	r9,zero,4ed2c <__gedf2+0x98>
   4ecfc:	0013883a 	mov	r9,zero
   4ed00:	39c03fcc 	andi	r7,r7,255
   4ed04:	48000826 	beq	r9,zero,4ed28 <__gedf2+0x94>
   4ed08:	38000926 	beq	r7,zero,4ed30 <__gedf2+0x9c>
   4ed0c:	00800044 	movi	r2,1
   4ed10:	f800283a 	ret
   4ed14:	3212b03a 	or	r9,r6,r8
   4ed18:	483fec26 	beq	r9,zero,4eccc <_gp+0xffff1f70>
   4ed1c:	00bfff84 	movi	r2,-2
   4ed20:	f800283a 	ret
   4ed24:	39c03fcc 	andi	r7,r7,255
   4ed28:	29c00626 	beq	r5,r7,4ed44 <__gedf2+0xb0>
   4ed2c:	283ff726 	beq	r5,zero,4ed0c <_gp+0xffff1fb0>
   4ed30:	00bfffc4 	movi	r2,-1
   4ed34:	f800283a 	ret
   4ed38:	2292b03a 	or	r9,r4,r10
   4ed3c:	483fe126 	beq	r9,zero,4ecc4 <_gp+0xffff1f68>
   4ed40:	003ff606 	br	4ed1c <_gp+0xffff1fc0>
   4ed44:	18bff916 	blt	r3,r2,4ed2c <_gp+0xffff1fd0>
   4ed48:	10c00316 	blt	r2,r3,4ed58 <__gedf2+0xc4>
   4ed4c:	42bff736 	bltu	r8,r10,4ed2c <_gp+0xffff1fd0>
   4ed50:	52000326 	beq	r10,r8,4ed60 <__gedf2+0xcc>
   4ed54:	5200042e 	bgeu	r10,r8,4ed68 <__gedf2+0xd4>
   4ed58:	283fec1e 	bne	r5,zero,4ed0c <_gp+0xffff1fb0>
   4ed5c:	003ff406 	br	4ed30 <_gp+0xffff1fd4>
   4ed60:	313ff236 	bltu	r6,r4,4ed2c <_gp+0xffff1fd0>
   4ed64:	21bffc36 	bltu	r4,r6,4ed58 <_gp+0xffff1ffc>
   4ed68:	0005883a 	mov	r2,zero
   4ed6c:	f800283a 	ret

0004ed70 <__ledf2>:
   4ed70:	2804d53a 	srli	r2,r5,20
   4ed74:	3810d53a 	srli	r8,r7,20
   4ed78:	00c00434 	movhi	r3,16
   4ed7c:	18ffffc4 	addi	r3,r3,-1
   4ed80:	1081ffcc 	andi	r2,r2,2047
   4ed84:	0241ffc4 	movi	r9,2047
   4ed88:	28d4703a 	and	r10,r5,r3
   4ed8c:	4201ffcc 	andi	r8,r8,2047
   4ed90:	38c6703a 	and	r3,r7,r3
   4ed94:	280ad7fa 	srli	r5,r5,31
   4ed98:	380ed7fa 	srli	r7,r7,31
   4ed9c:	12401f26 	beq	r2,r9,4ee1c <__ledf2+0xac>
   4eda0:	0241ffc4 	movi	r9,2047
   4eda4:	42401426 	beq	r8,r9,4edf8 <__ledf2+0x88>
   4eda8:	1000091e 	bne	r2,zero,4edd0 <__ledf2+0x60>
   4edac:	2296b03a 	or	r11,r4,r10
   4edb0:	5813003a 	cmpeq	r9,r11,zero
   4edb4:	29403fcc 	andi	r5,r5,255
   4edb8:	40000a1e 	bne	r8,zero,4ede4 <__ledf2+0x74>
   4edbc:	30d8b03a 	or	r12,r6,r3
   4edc0:	6000081e 	bne	r12,zero,4ede4 <__ledf2+0x74>
   4edc4:	0005883a 	mov	r2,zero
   4edc8:	5800111e 	bne	r11,zero,4ee10 <__ledf2+0xa0>
   4edcc:	f800283a 	ret
   4edd0:	29403fcc 	andi	r5,r5,255
   4edd4:	40000c1e 	bne	r8,zero,4ee08 <__ledf2+0x98>
   4edd8:	30d2b03a 	or	r9,r6,r3
   4eddc:	48000c26 	beq	r9,zero,4ee10 <__ledf2+0xa0>
   4ede0:	0013883a 	mov	r9,zero
   4ede4:	39c03fcc 	andi	r7,r7,255
   4ede8:	48000826 	beq	r9,zero,4ee0c <__ledf2+0x9c>
   4edec:	38001126 	beq	r7,zero,4ee34 <__ledf2+0xc4>
   4edf0:	00800044 	movi	r2,1
   4edf4:	f800283a 	ret
   4edf8:	30d2b03a 	or	r9,r6,r3
   4edfc:	483fea26 	beq	r9,zero,4eda8 <_gp+0xffff204c>
   4ee00:	00800084 	movi	r2,2
   4ee04:	f800283a 	ret
   4ee08:	39c03fcc 	andi	r7,r7,255
   4ee0c:	39400726 	beq	r7,r5,4ee2c <__ledf2+0xbc>
   4ee10:	2800081e 	bne	r5,zero,4ee34 <__ledf2+0xc4>
   4ee14:	00800044 	movi	r2,1
   4ee18:	f800283a 	ret
   4ee1c:	2292b03a 	or	r9,r4,r10
   4ee20:	483fdf26 	beq	r9,zero,4eda0 <_gp+0xffff2044>
   4ee24:	00800084 	movi	r2,2
   4ee28:	f800283a 	ret
   4ee2c:	4080030e 	bge	r8,r2,4ee3c <__ledf2+0xcc>
   4ee30:	383fef26 	beq	r7,zero,4edf0 <_gp+0xffff2094>
   4ee34:	00bfffc4 	movi	r2,-1
   4ee38:	f800283a 	ret
   4ee3c:	123feb16 	blt	r2,r8,4edec <_gp+0xffff2090>
   4ee40:	1abff336 	bltu	r3,r10,4ee10 <_gp+0xffff20b4>
   4ee44:	50c00326 	beq	r10,r3,4ee54 <__ledf2+0xe4>
   4ee48:	50c0042e 	bgeu	r10,r3,4ee5c <__ledf2+0xec>
   4ee4c:	283fe81e 	bne	r5,zero,4edf0 <_gp+0xffff2094>
   4ee50:	003ff806 	br	4ee34 <_gp+0xffff20d8>
   4ee54:	313fee36 	bltu	r6,r4,4ee10 <_gp+0xffff20b4>
   4ee58:	21bffc36 	bltu	r4,r6,4ee4c <_gp+0xffff20f0>
   4ee5c:	0005883a 	mov	r2,zero
   4ee60:	f800283a 	ret

0004ee64 <__muldf3>:
   4ee64:	deffee04 	addi	sp,sp,-72
   4ee68:	dd000c15 	stw	r20,48(sp)
   4ee6c:	2828d53a 	srli	r20,r5,20
   4ee70:	ddc00f15 	stw	r23,60(sp)
   4ee74:	282ed7fa 	srli	r23,r5,31
   4ee78:	dc000815 	stw	r16,32(sp)
   4ee7c:	04000434 	movhi	r16,16
   4ee80:	dcc00b15 	stw	r19,44(sp)
   4ee84:	843fffc4 	addi	r16,r16,-1
   4ee88:	dfc01115 	stw	ra,68(sp)
   4ee8c:	df001015 	stw	fp,64(sp)
   4ee90:	dd800e15 	stw	r22,56(sp)
   4ee94:	dd400d15 	stw	r21,52(sp)
   4ee98:	dc800a15 	stw	r18,40(sp)
   4ee9c:	dc400915 	stw	r17,36(sp)
   4eea0:	a501ffcc 	andi	r20,r20,2047
   4eea4:	2c20703a 	and	r16,r5,r16
   4eea8:	b827883a 	mov	r19,r23
   4eeac:	ba403fcc 	andi	r9,r23,255
   4eeb0:	a0006026 	beq	r20,zero,4f034 <__muldf3+0x1d0>
   4eeb4:	0081ffc4 	movi	r2,2047
   4eeb8:	202d883a 	mov	r22,r4
   4eebc:	a0803626 	beq	r20,r2,4ef98 <__muldf3+0x134>
   4eec0:	84000434 	orhi	r16,r16,16
   4eec4:	200ad77a 	srli	r5,r4,29
   4eec8:	800490fa 	slli	r2,r16,3
   4eecc:	202c90fa 	slli	r22,r4,3
   4eed0:	a53f0044 	addi	r20,r20,-1023
   4eed4:	28a0b03a 	or	r16,r5,r2
   4eed8:	002b883a 	mov	r21,zero
   4eedc:	000b883a 	mov	r5,zero
   4eee0:	3804d53a 	srli	r2,r7,20
   4eee4:	3838d7fa 	srli	fp,r7,31
   4eee8:	04400434 	movhi	r17,16
   4eeec:	8c7fffc4 	addi	r17,r17,-1
   4eef0:	1081ffcc 	andi	r2,r2,2047
   4eef4:	3025883a 	mov	r18,r6
   4eef8:	3c62703a 	and	r17,r7,r17
   4eefc:	e2803fcc 	andi	r10,fp,255
   4ef00:	10006d26 	beq	r2,zero,4f0b8 <__muldf3+0x254>
   4ef04:	00c1ffc4 	movi	r3,2047
   4ef08:	10c06526 	beq	r2,r3,4f0a0 <__muldf3+0x23c>
   4ef0c:	8c400434 	orhi	r17,r17,16
   4ef10:	300ed77a 	srli	r7,r6,29
   4ef14:	880690fa 	slli	r3,r17,3
   4ef18:	302490fa 	slli	r18,r6,3
   4ef1c:	10bf0044 	addi	r2,r2,-1023
   4ef20:	38e2b03a 	or	r17,r7,r3
   4ef24:	000f883a 	mov	r7,zero
   4ef28:	a087883a 	add	r3,r20,r2
   4ef2c:	010003c4 	movi	r4,15
   4ef30:	3d44b03a 	or	r2,r7,r21
   4ef34:	e5ccf03a 	xor	r6,fp,r23
   4ef38:	1a000044 	addi	r8,r3,1
   4ef3c:	20809b36 	bltu	r4,r2,4f1ac <__muldf3+0x348>
   4ef40:	100490ba 	slli	r2,r2,2
   4ef44:	01000174 	movhi	r4,5
   4ef48:	213bd604 	addi	r4,r4,-4264
   4ef4c:	1105883a 	add	r2,r2,r4
   4ef50:	10800017 	ldw	r2,0(r2)
   4ef54:	1000683a 	jmp	r2
   4ef58:	0004f1ac 	andhi	zero,zero,5062
   4ef5c:	0004efb8 	rdprs	zero,zero,5054
   4ef60:	0004efb8 	rdprs	zero,zero,5054
   4ef64:	0004efb4 	movhi	zero,5054
   4ef68:	0004f188 	cmpgei	zero,zero,5062
   4ef6c:	0004f188 	cmpgei	zero,zero,5062
   4ef70:	0004f170 	cmpltui	zero,zero,5061
   4ef74:	0004efb4 	movhi	zero,5054
   4ef78:	0004f188 	cmpgei	zero,zero,5062
   4ef7c:	0004f170 	cmpltui	zero,zero,5061
   4ef80:	0004f188 	cmpgei	zero,zero,5062
   4ef84:	0004efb4 	movhi	zero,5054
   4ef88:	0004f198 	cmpnei	zero,zero,5062
   4ef8c:	0004f198 	cmpnei	zero,zero,5062
   4ef90:	0004f198 	cmpnei	zero,zero,5062
   4ef94:	0004f4f8 	rdprs	zero,zero,5075
   4ef98:	2404b03a 	or	r2,r4,r16
   4ef9c:	1000711e 	bne	r2,zero,4f164 <__muldf3+0x300>
   4efa0:	05400204 	movi	r21,8
   4efa4:	0021883a 	mov	r16,zero
   4efa8:	002d883a 	mov	r22,zero
   4efac:	01400084 	movi	r5,2
   4efb0:	003fcb06 	br	4eee0 <_gp+0xffff2184>
   4efb4:	500d883a 	mov	r6,r10
   4efb8:	00800084 	movi	r2,2
   4efbc:	38805926 	beq	r7,r2,4f124 <__muldf3+0x2c0>
   4efc0:	008000c4 	movi	r2,3
   4efc4:	3881bb26 	beq	r7,r2,4f6b4 <__muldf3+0x850>
   4efc8:	00800044 	movi	r2,1
   4efcc:	3881961e 	bne	r7,r2,4f628 <__muldf3+0x7c4>
   4efd0:	3027883a 	mov	r19,r6
   4efd4:	0005883a 	mov	r2,zero
   4efd8:	0021883a 	mov	r16,zero
   4efdc:	002d883a 	mov	r22,zero
   4efe0:	1004953a 	slli	r2,r2,20
   4efe4:	98c03fcc 	andi	r3,r19,255
   4efe8:	04400434 	movhi	r17,16
   4efec:	8c7fffc4 	addi	r17,r17,-1
   4eff0:	180697fa 	slli	r3,r3,31
   4eff4:	8460703a 	and	r16,r16,r17
   4eff8:	80a0b03a 	or	r16,r16,r2
   4effc:	80c6b03a 	or	r3,r16,r3
   4f000:	b005883a 	mov	r2,r22
   4f004:	dfc01117 	ldw	ra,68(sp)
   4f008:	df001017 	ldw	fp,64(sp)
   4f00c:	ddc00f17 	ldw	r23,60(sp)
   4f010:	dd800e17 	ldw	r22,56(sp)
   4f014:	dd400d17 	ldw	r21,52(sp)
   4f018:	dd000c17 	ldw	r20,48(sp)
   4f01c:	dcc00b17 	ldw	r19,44(sp)
   4f020:	dc800a17 	ldw	r18,40(sp)
   4f024:	dc400917 	ldw	r17,36(sp)
   4f028:	dc000817 	ldw	r16,32(sp)
   4f02c:	dec01204 	addi	sp,sp,72
   4f030:	f800283a 	ret
   4f034:	2404b03a 	or	r2,r4,r16
   4f038:	202b883a 	mov	r21,r4
   4f03c:	10004426 	beq	r2,zero,4f150 <__muldf3+0x2ec>
   4f040:	80015126 	beq	r16,zero,4f588 <__muldf3+0x724>
   4f044:	8009883a 	mov	r4,r16
   4f048:	d9800715 	stw	r6,28(sp)
   4f04c:	d9c00215 	stw	r7,8(sp)
   4f050:	da400415 	stw	r9,16(sp)
   4f054:	00501d00 	call	501d0 <__clzsi2>
   4f058:	d9800717 	ldw	r6,28(sp)
   4f05c:	d9c00217 	ldw	r7,8(sp)
   4f060:	da400417 	ldw	r9,16(sp)
   4f064:	113ffd44 	addi	r4,r2,-11
   4f068:	00c00704 	movi	r3,28
   4f06c:	19014216 	blt	r3,r4,4f578 <__muldf3+0x714>
   4f070:	00c00744 	movi	r3,29
   4f074:	15bffe04 	addi	r22,r2,-8
   4f078:	1907c83a 	sub	r3,r3,r4
   4f07c:	85a0983a 	sll	r16,r16,r22
   4f080:	a8c6d83a 	srl	r3,r21,r3
   4f084:	adac983a 	sll	r22,r21,r22
   4f088:	1c20b03a 	or	r16,r3,r16
   4f08c:	1080fcc4 	addi	r2,r2,1011
   4f090:	00a9c83a 	sub	r20,zero,r2
   4f094:	002b883a 	mov	r21,zero
   4f098:	000b883a 	mov	r5,zero
   4f09c:	003f9006 	br	4eee0 <_gp+0xffff2184>
   4f0a0:	3446b03a 	or	r3,r6,r17
   4f0a4:	1800281e 	bne	r3,zero,4f148 <__muldf3+0x2e4>
   4f0a8:	0023883a 	mov	r17,zero
   4f0ac:	0025883a 	mov	r18,zero
   4f0b0:	01c00084 	movi	r7,2
   4f0b4:	003f9c06 	br	4ef28 <_gp+0xffff21cc>
   4f0b8:	3446b03a 	or	r3,r6,r17
   4f0bc:	18001e26 	beq	r3,zero,4f138 <__muldf3+0x2d4>
   4f0c0:	88012126 	beq	r17,zero,4f548 <__muldf3+0x6e4>
   4f0c4:	8809883a 	mov	r4,r17
   4f0c8:	d9400215 	stw	r5,8(sp)
   4f0cc:	d9800715 	stw	r6,28(sp)
   4f0d0:	da400415 	stw	r9,16(sp)
   4f0d4:	da800315 	stw	r10,12(sp)
   4f0d8:	00501d00 	call	501d0 <__clzsi2>
   4f0dc:	d9400217 	ldw	r5,8(sp)
   4f0e0:	d9800717 	ldw	r6,28(sp)
   4f0e4:	da400417 	ldw	r9,16(sp)
   4f0e8:	da800317 	ldw	r10,12(sp)
   4f0ec:	113ffd44 	addi	r4,r2,-11
   4f0f0:	00c00704 	movi	r3,28
   4f0f4:	19011016 	blt	r3,r4,4f538 <__muldf3+0x6d4>
   4f0f8:	00c00744 	movi	r3,29
   4f0fc:	14bffe04 	addi	r18,r2,-8
   4f100:	1907c83a 	sub	r3,r3,r4
   4f104:	8ca2983a 	sll	r17,r17,r18
   4f108:	30c6d83a 	srl	r3,r6,r3
   4f10c:	34a4983a 	sll	r18,r6,r18
   4f110:	1c62b03a 	or	r17,r3,r17
   4f114:	1080fcc4 	addi	r2,r2,1011
   4f118:	0085c83a 	sub	r2,zero,r2
   4f11c:	000f883a 	mov	r7,zero
   4f120:	003f8106 	br	4ef28 <_gp+0xffff21cc>
   4f124:	3027883a 	mov	r19,r6
   4f128:	0081ffc4 	movi	r2,2047
   4f12c:	0021883a 	mov	r16,zero
   4f130:	002d883a 	mov	r22,zero
   4f134:	003faa06 	br	4efe0 <_gp+0xffff2284>
   4f138:	0023883a 	mov	r17,zero
   4f13c:	0025883a 	mov	r18,zero
   4f140:	01c00044 	movi	r7,1
   4f144:	003f7806 	br	4ef28 <_gp+0xffff21cc>
   4f148:	01c000c4 	movi	r7,3
   4f14c:	003f7606 	br	4ef28 <_gp+0xffff21cc>
   4f150:	05400104 	movi	r21,4
   4f154:	0021883a 	mov	r16,zero
   4f158:	002d883a 	mov	r22,zero
   4f15c:	01400044 	movi	r5,1
   4f160:	003f5f06 	br	4eee0 <_gp+0xffff2184>
   4f164:	05400304 	movi	r21,12
   4f168:	014000c4 	movi	r5,3
   4f16c:	003f5c06 	br	4eee0 <_gp+0xffff2184>
   4f170:	04000434 	movhi	r16,16
   4f174:	0027883a 	mov	r19,zero
   4f178:	843fffc4 	addi	r16,r16,-1
   4f17c:	05bfffc4 	movi	r22,-1
   4f180:	0081ffc4 	movi	r2,2047
   4f184:	003f9606 	br	4efe0 <_gp+0xffff2284>
   4f188:	8023883a 	mov	r17,r16
   4f18c:	b025883a 	mov	r18,r22
   4f190:	280f883a 	mov	r7,r5
   4f194:	003f8806 	br	4efb8 <_gp+0xffff225c>
   4f198:	8023883a 	mov	r17,r16
   4f19c:	b025883a 	mov	r18,r22
   4f1a0:	480d883a 	mov	r6,r9
   4f1a4:	280f883a 	mov	r7,r5
   4f1a8:	003f8306 	br	4efb8 <_gp+0xffff225c>
   4f1ac:	b026d43a 	srli	r19,r22,16
   4f1b0:	902ed43a 	srli	r23,r18,16
   4f1b4:	b5bfffcc 	andi	r22,r22,65535
   4f1b8:	94bfffcc 	andi	r18,r18,65535
   4f1bc:	b00b883a 	mov	r5,r22
   4f1c0:	9009883a 	mov	r4,r18
   4f1c4:	d8c00515 	stw	r3,20(sp)
   4f1c8:	d9800715 	stw	r6,28(sp)
   4f1cc:	da000615 	stw	r8,24(sp)
   4f1d0:	004d9680 	call	4d968 <__mulsi3>
   4f1d4:	980b883a 	mov	r5,r19
   4f1d8:	9009883a 	mov	r4,r18
   4f1dc:	1029883a 	mov	r20,r2
   4f1e0:	004d9680 	call	4d968 <__mulsi3>
   4f1e4:	b80b883a 	mov	r5,r23
   4f1e8:	9809883a 	mov	r4,r19
   4f1ec:	102b883a 	mov	r21,r2
   4f1f0:	004d9680 	call	4d968 <__mulsi3>
   4f1f4:	b809883a 	mov	r4,r23
   4f1f8:	b00b883a 	mov	r5,r22
   4f1fc:	1039883a 	mov	fp,r2
   4f200:	004d9680 	call	4d968 <__mulsi3>
   4f204:	a008d43a 	srli	r4,r20,16
   4f208:	1545883a 	add	r2,r2,r21
   4f20c:	d8c00517 	ldw	r3,20(sp)
   4f210:	2085883a 	add	r2,r4,r2
   4f214:	d9800717 	ldw	r6,28(sp)
   4f218:	da000617 	ldw	r8,24(sp)
   4f21c:	1540022e 	bgeu	r2,r21,4f228 <__muldf3+0x3c4>
   4f220:	01000074 	movhi	r4,1
   4f224:	e139883a 	add	fp,fp,r4
   4f228:	100e943a 	slli	r7,r2,16
   4f22c:	1004d43a 	srli	r2,r2,16
   4f230:	882ad43a 	srli	r21,r17,16
   4f234:	a53fffcc 	andi	r20,r20,65535
   4f238:	8c7fffcc 	andi	r17,r17,65535
   4f23c:	3d29883a 	add	r20,r7,r20
   4f240:	b00b883a 	mov	r5,r22
   4f244:	8809883a 	mov	r4,r17
   4f248:	d8c00515 	stw	r3,20(sp)
   4f24c:	d9800715 	stw	r6,28(sp)
   4f250:	da000615 	stw	r8,24(sp)
   4f254:	dd000115 	stw	r20,4(sp)
   4f258:	d8800015 	stw	r2,0(sp)
   4f25c:	004d9680 	call	4d968 <__mulsi3>
   4f260:	980b883a 	mov	r5,r19
   4f264:	8809883a 	mov	r4,r17
   4f268:	d8800215 	stw	r2,8(sp)
   4f26c:	004d9680 	call	4d968 <__mulsi3>
   4f270:	9809883a 	mov	r4,r19
   4f274:	a80b883a 	mov	r5,r21
   4f278:	1029883a 	mov	r20,r2
   4f27c:	004d9680 	call	4d968 <__mulsi3>
   4f280:	b00b883a 	mov	r5,r22
   4f284:	a809883a 	mov	r4,r21
   4f288:	d8800415 	stw	r2,16(sp)
   4f28c:	004d9680 	call	4d968 <__mulsi3>
   4f290:	d9c00217 	ldw	r7,8(sp)
   4f294:	1505883a 	add	r2,r2,r20
   4f298:	d8c00517 	ldw	r3,20(sp)
   4f29c:	3826d43a 	srli	r19,r7,16
   4f2a0:	d9800717 	ldw	r6,28(sp)
   4f2a4:	da000617 	ldw	r8,24(sp)
   4f2a8:	9885883a 	add	r2,r19,r2
   4f2ac:	da400417 	ldw	r9,16(sp)
   4f2b0:	1500022e 	bgeu	r2,r20,4f2bc <__muldf3+0x458>
   4f2b4:	01000074 	movhi	r4,1
   4f2b8:	4913883a 	add	r9,r9,r4
   4f2bc:	1028d43a 	srli	r20,r2,16
   4f2c0:	1004943a 	slli	r2,r2,16
   4f2c4:	802cd43a 	srli	r22,r16,16
   4f2c8:	843fffcc 	andi	r16,r16,65535
   4f2cc:	3cffffcc 	andi	r19,r7,65535
   4f2d0:	9009883a 	mov	r4,r18
   4f2d4:	800b883a 	mov	r5,r16
   4f2d8:	a269883a 	add	r20,r20,r9
   4f2dc:	d8c00515 	stw	r3,20(sp)
   4f2e0:	d9800715 	stw	r6,28(sp)
   4f2e4:	da000615 	stw	r8,24(sp)
   4f2e8:	14e7883a 	add	r19,r2,r19
   4f2ec:	004d9680 	call	4d968 <__mulsi3>
   4f2f0:	9009883a 	mov	r4,r18
   4f2f4:	b00b883a 	mov	r5,r22
   4f2f8:	d8800315 	stw	r2,12(sp)
   4f2fc:	004d9680 	call	4d968 <__mulsi3>
   4f300:	b809883a 	mov	r4,r23
   4f304:	b00b883a 	mov	r5,r22
   4f308:	d8800215 	stw	r2,8(sp)
   4f30c:	004d9680 	call	4d968 <__mulsi3>
   4f310:	b80b883a 	mov	r5,r23
   4f314:	8009883a 	mov	r4,r16
   4f318:	d8800415 	stw	r2,16(sp)
   4f31c:	004d9680 	call	4d968 <__mulsi3>
   4f320:	da800317 	ldw	r10,12(sp)
   4f324:	d9c00217 	ldw	r7,8(sp)
   4f328:	d9000017 	ldw	r4,0(sp)
   4f32c:	502ed43a 	srli	r23,r10,16
   4f330:	11c5883a 	add	r2,r2,r7
   4f334:	24e5883a 	add	r18,r4,r19
   4f338:	b885883a 	add	r2,r23,r2
   4f33c:	d8c00517 	ldw	r3,20(sp)
   4f340:	d9800717 	ldw	r6,28(sp)
   4f344:	da000617 	ldw	r8,24(sp)
   4f348:	da400417 	ldw	r9,16(sp)
   4f34c:	11c0022e 	bgeu	r2,r7,4f358 <__muldf3+0x4f4>
   4f350:	01000074 	movhi	r4,1
   4f354:	4913883a 	add	r9,r9,r4
   4f358:	100ed43a 	srli	r7,r2,16
   4f35c:	1004943a 	slli	r2,r2,16
   4f360:	55ffffcc 	andi	r23,r10,65535
   4f364:	3a53883a 	add	r9,r7,r9
   4f368:	8809883a 	mov	r4,r17
   4f36c:	800b883a 	mov	r5,r16
   4f370:	d8c00515 	stw	r3,20(sp)
   4f374:	d9800715 	stw	r6,28(sp)
   4f378:	da000615 	stw	r8,24(sp)
   4f37c:	da400415 	stw	r9,16(sp)
   4f380:	15ef883a 	add	r23,r2,r23
   4f384:	004d9680 	call	4d968 <__mulsi3>
   4f388:	8809883a 	mov	r4,r17
   4f38c:	b00b883a 	mov	r5,r22
   4f390:	d8800215 	stw	r2,8(sp)
   4f394:	004d9680 	call	4d968 <__mulsi3>
   4f398:	b00b883a 	mov	r5,r22
   4f39c:	a809883a 	mov	r4,r21
   4f3a0:	d8800315 	stw	r2,12(sp)
   4f3a4:	004d9680 	call	4d968 <__mulsi3>
   4f3a8:	8009883a 	mov	r4,r16
   4f3ac:	a80b883a 	mov	r5,r21
   4f3b0:	1023883a 	mov	r17,r2
   4f3b4:	004d9680 	call	4d968 <__mulsi3>
   4f3b8:	d9c00217 	ldw	r7,8(sp)
   4f3bc:	da800317 	ldw	r10,12(sp)
   4f3c0:	d8c00517 	ldw	r3,20(sp)
   4f3c4:	3808d43a 	srli	r4,r7,16
   4f3c8:	1285883a 	add	r2,r2,r10
   4f3cc:	d9800717 	ldw	r6,28(sp)
   4f3d0:	2085883a 	add	r2,r4,r2
   4f3d4:	da000617 	ldw	r8,24(sp)
   4f3d8:	da400417 	ldw	r9,16(sp)
   4f3dc:	1280022e 	bgeu	r2,r10,4f3e8 <__muldf3+0x584>
   4f3e0:	01000074 	movhi	r4,1
   4f3e4:	8923883a 	add	r17,r17,r4
   4f3e8:	1008943a 	slli	r4,r2,16
   4f3ec:	39ffffcc 	andi	r7,r7,65535
   4f3f0:	e4b9883a 	add	fp,fp,r18
   4f3f4:	21cf883a 	add	r7,r4,r7
   4f3f8:	e4e7803a 	cmpltu	r19,fp,r19
   4f3fc:	3d0f883a 	add	r7,r7,r20
   4f400:	bf39883a 	add	fp,r23,fp
   4f404:	99c9883a 	add	r4,r19,r7
   4f408:	e5ef803a 	cmpltu	r23,fp,r23
   4f40c:	490b883a 	add	r5,r9,r4
   4f410:	1004d43a 	srli	r2,r2,16
   4f414:	b965883a 	add	r18,r23,r5
   4f418:	24c9803a 	cmpltu	r4,r4,r19
   4f41c:	3d29803a 	cmpltu	r20,r7,r20
   4f420:	a128b03a 	or	r20,r20,r4
   4f424:	95ef803a 	cmpltu	r23,r18,r23
   4f428:	2a53803a 	cmpltu	r9,r5,r9
   4f42c:	a0a9883a 	add	r20,r20,r2
   4f430:	4deeb03a 	or	r23,r9,r23
   4f434:	a5ef883a 	add	r23,r20,r23
   4f438:	bc63883a 	add	r17,r23,r17
   4f43c:	e004927a 	slli	r2,fp,9
   4f440:	d9000117 	ldw	r4,4(sp)
   4f444:	882e927a 	slli	r23,r17,9
   4f448:	9022d5fa 	srli	r17,r18,23
   4f44c:	e038d5fa 	srli	fp,fp,23
   4f450:	1104b03a 	or	r2,r2,r4
   4f454:	9024927a 	slli	r18,r18,9
   4f458:	1004c03a 	cmpne	r2,r2,zero
   4f45c:	bc62b03a 	or	r17,r23,r17
   4f460:	1738b03a 	or	fp,r2,fp
   4f464:	8880402c 	andhi	r2,r17,256
   4f468:	e4a4b03a 	or	r18,fp,r18
   4f46c:	10000726 	beq	r2,zero,4f48c <__muldf3+0x628>
   4f470:	9006d07a 	srli	r3,r18,1
   4f474:	880497fa 	slli	r2,r17,31
   4f478:	9480004c 	andi	r18,r18,1
   4f47c:	8822d07a 	srli	r17,r17,1
   4f480:	1ca4b03a 	or	r18,r3,r18
   4f484:	14a4b03a 	or	r18,r2,r18
   4f488:	4007883a 	mov	r3,r8
   4f48c:	1880ffc4 	addi	r2,r3,1023
   4f490:	0080460e 	bge	zero,r2,4f5ac <__muldf3+0x748>
   4f494:	910001cc 	andi	r4,r18,7
   4f498:	20000726 	beq	r4,zero,4f4b8 <__muldf3+0x654>
   4f49c:	910003cc 	andi	r4,r18,15
   4f4a0:	01400104 	movi	r5,4
   4f4a4:	21400426 	beq	r4,r5,4f4b8 <__muldf3+0x654>
   4f4a8:	9149883a 	add	r4,r18,r5
   4f4ac:	24a5803a 	cmpltu	r18,r4,r18
   4f4b0:	8ca3883a 	add	r17,r17,r18
   4f4b4:	2025883a 	mov	r18,r4
   4f4b8:	8900402c 	andhi	r4,r17,256
   4f4bc:	20000426 	beq	r4,zero,4f4d0 <__muldf3+0x66c>
   4f4c0:	18810004 	addi	r2,r3,1024
   4f4c4:	00ffc034 	movhi	r3,65280
   4f4c8:	18ffffc4 	addi	r3,r3,-1
   4f4cc:	88e2703a 	and	r17,r17,r3
   4f4d0:	00c1ff84 	movi	r3,2046
   4f4d4:	18bf1316 	blt	r3,r2,4f124 <_gp+0xffff23c8>
   4f4d8:	882c977a 	slli	r22,r17,29
   4f4dc:	9024d0fa 	srli	r18,r18,3
   4f4e0:	8822927a 	slli	r17,r17,9
   4f4e4:	1081ffcc 	andi	r2,r2,2047
   4f4e8:	b4acb03a 	or	r22,r22,r18
   4f4ec:	8820d33a 	srli	r16,r17,12
   4f4f0:	3027883a 	mov	r19,r6
   4f4f4:	003eba06 	br	4efe0 <_gp+0xffff2284>
   4f4f8:	8080022c 	andhi	r2,r16,8
   4f4fc:	10000926 	beq	r2,zero,4f524 <__muldf3+0x6c0>
   4f500:	8880022c 	andhi	r2,r17,8
   4f504:	1000071e 	bne	r2,zero,4f524 <__muldf3+0x6c0>
   4f508:	00800434 	movhi	r2,16
   4f50c:	8c000234 	orhi	r16,r17,8
   4f510:	10bfffc4 	addi	r2,r2,-1
   4f514:	e027883a 	mov	r19,fp
   4f518:	80a0703a 	and	r16,r16,r2
   4f51c:	902d883a 	mov	r22,r18
   4f520:	003f1706 	br	4f180 <_gp+0xffff2424>
   4f524:	00800434 	movhi	r2,16
   4f528:	84000234 	orhi	r16,r16,8
   4f52c:	10bfffc4 	addi	r2,r2,-1
   4f530:	80a0703a 	and	r16,r16,r2
   4f534:	003f1206 	br	4f180 <_gp+0xffff2424>
   4f538:	147ff604 	addi	r17,r2,-40
   4f53c:	3462983a 	sll	r17,r6,r17
   4f540:	0025883a 	mov	r18,zero
   4f544:	003ef306 	br	4f114 <_gp+0xffff23b8>
   4f548:	3009883a 	mov	r4,r6
   4f54c:	d9400215 	stw	r5,8(sp)
   4f550:	d9800715 	stw	r6,28(sp)
   4f554:	da400415 	stw	r9,16(sp)
   4f558:	da800315 	stw	r10,12(sp)
   4f55c:	00501d00 	call	501d0 <__clzsi2>
   4f560:	10800804 	addi	r2,r2,32
   4f564:	da800317 	ldw	r10,12(sp)
   4f568:	da400417 	ldw	r9,16(sp)
   4f56c:	d9800717 	ldw	r6,28(sp)
   4f570:	d9400217 	ldw	r5,8(sp)
   4f574:	003edd06 	br	4f0ec <_gp+0xffff2390>
   4f578:	143ff604 	addi	r16,r2,-40
   4f57c:	ac20983a 	sll	r16,r21,r16
   4f580:	002d883a 	mov	r22,zero
   4f584:	003ec106 	br	4f08c <_gp+0xffff2330>
   4f588:	d9800715 	stw	r6,28(sp)
   4f58c:	d9c00215 	stw	r7,8(sp)
   4f590:	da400415 	stw	r9,16(sp)
   4f594:	00501d00 	call	501d0 <__clzsi2>
   4f598:	10800804 	addi	r2,r2,32
   4f59c:	da400417 	ldw	r9,16(sp)
   4f5a0:	d9c00217 	ldw	r7,8(sp)
   4f5a4:	d9800717 	ldw	r6,28(sp)
   4f5a8:	003eae06 	br	4f064 <_gp+0xffff2308>
   4f5ac:	00c00044 	movi	r3,1
   4f5b0:	1887c83a 	sub	r3,r3,r2
   4f5b4:	01000e04 	movi	r4,56
   4f5b8:	20fe8516 	blt	r4,r3,4efd0 <_gp+0xffff2274>
   4f5bc:	010007c4 	movi	r4,31
   4f5c0:	20c01b16 	blt	r4,r3,4f630 <__muldf3+0x7cc>
   4f5c4:	00800804 	movi	r2,32
   4f5c8:	10c5c83a 	sub	r2,r2,r3
   4f5cc:	888a983a 	sll	r5,r17,r2
   4f5d0:	90c8d83a 	srl	r4,r18,r3
   4f5d4:	9084983a 	sll	r2,r18,r2
   4f5d8:	88e2d83a 	srl	r17,r17,r3
   4f5dc:	2906b03a 	or	r3,r5,r4
   4f5e0:	1004c03a 	cmpne	r2,r2,zero
   4f5e4:	1886b03a 	or	r3,r3,r2
   4f5e8:	188001cc 	andi	r2,r3,7
   4f5ec:	10000726 	beq	r2,zero,4f60c <__muldf3+0x7a8>
   4f5f0:	188003cc 	andi	r2,r3,15
   4f5f4:	01000104 	movi	r4,4
   4f5f8:	11000426 	beq	r2,r4,4f60c <__muldf3+0x7a8>
   4f5fc:	1805883a 	mov	r2,r3
   4f600:	10c00104 	addi	r3,r2,4
   4f604:	1885803a 	cmpltu	r2,r3,r2
   4f608:	88a3883a 	add	r17,r17,r2
   4f60c:	8880202c 	andhi	r2,r17,128
   4f610:	10001c26 	beq	r2,zero,4f684 <__muldf3+0x820>
   4f614:	3027883a 	mov	r19,r6
   4f618:	00800044 	movi	r2,1
   4f61c:	0021883a 	mov	r16,zero
   4f620:	002d883a 	mov	r22,zero
   4f624:	003e6e06 	br	4efe0 <_gp+0xffff2284>
   4f628:	4007883a 	mov	r3,r8
   4f62c:	003f9706 	br	4f48c <_gp+0xffff2730>
   4f630:	017ff844 	movi	r5,-31
   4f634:	2885c83a 	sub	r2,r5,r2
   4f638:	888ad83a 	srl	r5,r17,r2
   4f63c:	00800804 	movi	r2,32
   4f640:	18801a26 	beq	r3,r2,4f6ac <__muldf3+0x848>
   4f644:	01001004 	movi	r4,64
   4f648:	20c7c83a 	sub	r3,r4,r3
   4f64c:	88e2983a 	sll	r17,r17,r3
   4f650:	8ca4b03a 	or	r18,r17,r18
   4f654:	9004c03a 	cmpne	r2,r18,zero
   4f658:	2884b03a 	or	r2,r5,r2
   4f65c:	144001cc 	andi	r17,r2,7
   4f660:	88000d1e 	bne	r17,zero,4f698 <__muldf3+0x834>
   4f664:	0021883a 	mov	r16,zero
   4f668:	102cd0fa 	srli	r22,r2,3
   4f66c:	3027883a 	mov	r19,r6
   4f670:	0005883a 	mov	r2,zero
   4f674:	b46cb03a 	or	r22,r22,r17
   4f678:	003e5906 	br	4efe0 <_gp+0xffff2284>
   4f67c:	1007883a 	mov	r3,r2
   4f680:	0023883a 	mov	r17,zero
   4f684:	8820927a 	slli	r16,r17,9
   4f688:	1805883a 	mov	r2,r3
   4f68c:	8822977a 	slli	r17,r17,29
   4f690:	8020d33a 	srli	r16,r16,12
   4f694:	003ff406 	br	4f668 <_gp+0xffff290c>
   4f698:	10c003cc 	andi	r3,r2,15
   4f69c:	01000104 	movi	r4,4
   4f6a0:	193ff626 	beq	r3,r4,4f67c <_gp+0xffff2920>
   4f6a4:	0023883a 	mov	r17,zero
   4f6a8:	003fd506 	br	4f600 <_gp+0xffff28a4>
   4f6ac:	0023883a 	mov	r17,zero
   4f6b0:	003fe706 	br	4f650 <_gp+0xffff28f4>
   4f6b4:	00800434 	movhi	r2,16
   4f6b8:	8c000234 	orhi	r16,r17,8
   4f6bc:	10bfffc4 	addi	r2,r2,-1
   4f6c0:	3027883a 	mov	r19,r6
   4f6c4:	80a0703a 	and	r16,r16,r2
   4f6c8:	902d883a 	mov	r22,r18
   4f6cc:	003eac06 	br	4f180 <_gp+0xffff2424>

0004f6d0 <__subdf3>:
   4f6d0:	02000434 	movhi	r8,16
   4f6d4:	423fffc4 	addi	r8,r8,-1
   4f6d8:	defffb04 	addi	sp,sp,-20
   4f6dc:	2a14703a 	and	r10,r5,r8
   4f6e0:	3812d53a 	srli	r9,r7,20
   4f6e4:	3a10703a 	and	r8,r7,r8
   4f6e8:	2006d77a 	srli	r3,r4,29
   4f6ec:	3004d77a 	srli	r2,r6,29
   4f6f0:	dc000015 	stw	r16,0(sp)
   4f6f4:	501490fa 	slli	r10,r10,3
   4f6f8:	2820d53a 	srli	r16,r5,20
   4f6fc:	401090fa 	slli	r8,r8,3
   4f700:	dc800215 	stw	r18,8(sp)
   4f704:	dc400115 	stw	r17,4(sp)
   4f708:	dfc00415 	stw	ra,16(sp)
   4f70c:	202290fa 	slli	r17,r4,3
   4f710:	dcc00315 	stw	r19,12(sp)
   4f714:	4a41ffcc 	andi	r9,r9,2047
   4f718:	0101ffc4 	movi	r4,2047
   4f71c:	2824d7fa 	srli	r18,r5,31
   4f720:	8401ffcc 	andi	r16,r16,2047
   4f724:	50c6b03a 	or	r3,r10,r3
   4f728:	380ed7fa 	srli	r7,r7,31
   4f72c:	408ab03a 	or	r5,r8,r2
   4f730:	300c90fa 	slli	r6,r6,3
   4f734:	49009626 	beq	r9,r4,4f990 <__subdf3+0x2c0>
   4f738:	39c0005c 	xori	r7,r7,1
   4f73c:	8245c83a 	sub	r2,r16,r9
   4f740:	3c807426 	beq	r7,r18,4f914 <__subdf3+0x244>
   4f744:	0080af0e 	bge	zero,r2,4fa04 <__subdf3+0x334>
   4f748:	48002a1e 	bne	r9,zero,4f7f4 <__subdf3+0x124>
   4f74c:	2988b03a 	or	r4,r5,r6
   4f750:	20009a1e 	bne	r4,zero,4f9bc <__subdf3+0x2ec>
   4f754:	888001cc 	andi	r2,r17,7
   4f758:	10000726 	beq	r2,zero,4f778 <__subdf3+0xa8>
   4f75c:	888003cc 	andi	r2,r17,15
   4f760:	01000104 	movi	r4,4
   4f764:	11000426 	beq	r2,r4,4f778 <__subdf3+0xa8>
   4f768:	890b883a 	add	r5,r17,r4
   4f76c:	2c63803a 	cmpltu	r17,r5,r17
   4f770:	1c47883a 	add	r3,r3,r17
   4f774:	2823883a 	mov	r17,r5
   4f778:	1880202c 	andhi	r2,r3,128
   4f77c:	10005926 	beq	r2,zero,4f8e4 <__subdf3+0x214>
   4f780:	84000044 	addi	r16,r16,1
   4f784:	0081ffc4 	movi	r2,2047
   4f788:	8080be26 	beq	r16,r2,4fa84 <__subdf3+0x3b4>
   4f78c:	017fe034 	movhi	r5,65408
   4f790:	297fffc4 	addi	r5,r5,-1
   4f794:	1946703a 	and	r3,r3,r5
   4f798:	1804977a 	slli	r2,r3,29
   4f79c:	1806927a 	slli	r3,r3,9
   4f7a0:	8822d0fa 	srli	r17,r17,3
   4f7a4:	8401ffcc 	andi	r16,r16,2047
   4f7a8:	180ad33a 	srli	r5,r3,12
   4f7ac:	9100004c 	andi	r4,r18,1
   4f7b0:	1444b03a 	or	r2,r2,r17
   4f7b4:	80c1ffcc 	andi	r3,r16,2047
   4f7b8:	1820953a 	slli	r16,r3,20
   4f7bc:	20c03fcc 	andi	r3,r4,255
   4f7c0:	180897fa 	slli	r4,r3,31
   4f7c4:	00c00434 	movhi	r3,16
   4f7c8:	18ffffc4 	addi	r3,r3,-1
   4f7cc:	28c6703a 	and	r3,r5,r3
   4f7d0:	1c06b03a 	or	r3,r3,r16
   4f7d4:	1906b03a 	or	r3,r3,r4
   4f7d8:	dfc00417 	ldw	ra,16(sp)
   4f7dc:	dcc00317 	ldw	r19,12(sp)
   4f7e0:	dc800217 	ldw	r18,8(sp)
   4f7e4:	dc400117 	ldw	r17,4(sp)
   4f7e8:	dc000017 	ldw	r16,0(sp)
   4f7ec:	dec00504 	addi	sp,sp,20
   4f7f0:	f800283a 	ret
   4f7f4:	0101ffc4 	movi	r4,2047
   4f7f8:	813fd626 	beq	r16,r4,4f754 <_gp+0xffff29f8>
   4f7fc:	29402034 	orhi	r5,r5,128
   4f800:	01000e04 	movi	r4,56
   4f804:	2080a316 	blt	r4,r2,4fa94 <__subdf3+0x3c4>
   4f808:	010007c4 	movi	r4,31
   4f80c:	2080c616 	blt	r4,r2,4fb28 <__subdf3+0x458>
   4f810:	01000804 	movi	r4,32
   4f814:	2089c83a 	sub	r4,r4,r2
   4f818:	2910983a 	sll	r8,r5,r4
   4f81c:	308ed83a 	srl	r7,r6,r2
   4f820:	3108983a 	sll	r4,r6,r4
   4f824:	2884d83a 	srl	r2,r5,r2
   4f828:	41ccb03a 	or	r6,r8,r7
   4f82c:	2008c03a 	cmpne	r4,r4,zero
   4f830:	310cb03a 	or	r6,r6,r4
   4f834:	898dc83a 	sub	r6,r17,r6
   4f838:	89a3803a 	cmpltu	r17,r17,r6
   4f83c:	1887c83a 	sub	r3,r3,r2
   4f840:	1c47c83a 	sub	r3,r3,r17
   4f844:	3023883a 	mov	r17,r6
   4f848:	1880202c 	andhi	r2,r3,128
   4f84c:	10002326 	beq	r2,zero,4f8dc <__subdf3+0x20c>
   4f850:	04c02034 	movhi	r19,128
   4f854:	9cffffc4 	addi	r19,r19,-1
   4f858:	1ce6703a 	and	r19,r3,r19
   4f85c:	98007a26 	beq	r19,zero,4fa48 <__subdf3+0x378>
   4f860:	9809883a 	mov	r4,r19
   4f864:	00501d00 	call	501d0 <__clzsi2>
   4f868:	113ffe04 	addi	r4,r2,-8
   4f86c:	00c007c4 	movi	r3,31
   4f870:	19007b16 	blt	r3,r4,4fa60 <__subdf3+0x390>
   4f874:	00800804 	movi	r2,32
   4f878:	1105c83a 	sub	r2,r2,r4
   4f87c:	8884d83a 	srl	r2,r17,r2
   4f880:	9906983a 	sll	r3,r19,r4
   4f884:	8922983a 	sll	r17,r17,r4
   4f888:	10c4b03a 	or	r2,r2,r3
   4f88c:	24007816 	blt	r4,r16,4fa70 <__subdf3+0x3a0>
   4f890:	2421c83a 	sub	r16,r4,r16
   4f894:	80c00044 	addi	r3,r16,1
   4f898:	010007c4 	movi	r4,31
   4f89c:	20c09516 	blt	r4,r3,4faf4 <__subdf3+0x424>
   4f8a0:	01400804 	movi	r5,32
   4f8a4:	28cbc83a 	sub	r5,r5,r3
   4f8a8:	88c8d83a 	srl	r4,r17,r3
   4f8ac:	8962983a 	sll	r17,r17,r5
   4f8b0:	114a983a 	sll	r5,r2,r5
   4f8b4:	10c6d83a 	srl	r3,r2,r3
   4f8b8:	8804c03a 	cmpne	r2,r17,zero
   4f8bc:	290ab03a 	or	r5,r5,r4
   4f8c0:	28a2b03a 	or	r17,r5,r2
   4f8c4:	0021883a 	mov	r16,zero
   4f8c8:	003fa206 	br	4f754 <_gp+0xffff29f8>
   4f8cc:	2090b03a 	or	r8,r4,r2
   4f8d0:	40018e26 	beq	r8,zero,4ff0c <__subdf3+0x83c>
   4f8d4:	1007883a 	mov	r3,r2
   4f8d8:	2023883a 	mov	r17,r4
   4f8dc:	888001cc 	andi	r2,r17,7
   4f8e0:	103f9e1e 	bne	r2,zero,4f75c <_gp+0xffff2a00>
   4f8e4:	1804977a 	slli	r2,r3,29
   4f8e8:	8822d0fa 	srli	r17,r17,3
   4f8ec:	1810d0fa 	srli	r8,r3,3
   4f8f0:	9100004c 	andi	r4,r18,1
   4f8f4:	1444b03a 	or	r2,r2,r17
   4f8f8:	00c1ffc4 	movi	r3,2047
   4f8fc:	80c02826 	beq	r16,r3,4f9a0 <__subdf3+0x2d0>
   4f900:	01400434 	movhi	r5,16
   4f904:	297fffc4 	addi	r5,r5,-1
   4f908:	80e0703a 	and	r16,r16,r3
   4f90c:	414a703a 	and	r5,r8,r5
   4f910:	003fa806 	br	4f7b4 <_gp+0xffff2a58>
   4f914:	0080630e 	bge	zero,r2,4faa4 <__subdf3+0x3d4>
   4f918:	48003026 	beq	r9,zero,4f9dc <__subdf3+0x30c>
   4f91c:	0101ffc4 	movi	r4,2047
   4f920:	813f8c26 	beq	r16,r4,4f754 <_gp+0xffff29f8>
   4f924:	29402034 	orhi	r5,r5,128
   4f928:	01000e04 	movi	r4,56
   4f92c:	2080a90e 	bge	r4,r2,4fbd4 <__subdf3+0x504>
   4f930:	298cb03a 	or	r6,r5,r6
   4f934:	3012c03a 	cmpne	r9,r6,zero
   4f938:	0005883a 	mov	r2,zero
   4f93c:	4c53883a 	add	r9,r9,r17
   4f940:	4c63803a 	cmpltu	r17,r9,r17
   4f944:	10c7883a 	add	r3,r2,r3
   4f948:	88c7883a 	add	r3,r17,r3
   4f94c:	4823883a 	mov	r17,r9
   4f950:	1880202c 	andhi	r2,r3,128
   4f954:	1000d026 	beq	r2,zero,4fc98 <__subdf3+0x5c8>
   4f958:	84000044 	addi	r16,r16,1
   4f95c:	0081ffc4 	movi	r2,2047
   4f960:	8080fe26 	beq	r16,r2,4fd5c <__subdf3+0x68c>
   4f964:	00bfe034 	movhi	r2,65408
   4f968:	10bfffc4 	addi	r2,r2,-1
   4f96c:	1886703a 	and	r3,r3,r2
   4f970:	880ad07a 	srli	r5,r17,1
   4f974:	180497fa 	slli	r2,r3,31
   4f978:	8900004c 	andi	r4,r17,1
   4f97c:	2922b03a 	or	r17,r5,r4
   4f980:	1806d07a 	srli	r3,r3,1
   4f984:	1462b03a 	or	r17,r2,r17
   4f988:	3825883a 	mov	r18,r7
   4f98c:	003f7106 	br	4f754 <_gp+0xffff29f8>
   4f990:	2984b03a 	or	r2,r5,r6
   4f994:	103f6826 	beq	r2,zero,4f738 <_gp+0xffff29dc>
   4f998:	39c03fcc 	andi	r7,r7,255
   4f99c:	003f6706 	br	4f73c <_gp+0xffff29e0>
   4f9a0:	4086b03a 	or	r3,r8,r2
   4f9a4:	18015226 	beq	r3,zero,4fef0 <__subdf3+0x820>
   4f9a8:	00c00434 	movhi	r3,16
   4f9ac:	41400234 	orhi	r5,r8,8
   4f9b0:	18ffffc4 	addi	r3,r3,-1
   4f9b4:	28ca703a 	and	r5,r5,r3
   4f9b8:	003f7e06 	br	4f7b4 <_gp+0xffff2a58>
   4f9bc:	10bfffc4 	addi	r2,r2,-1
   4f9c0:	1000491e 	bne	r2,zero,4fae8 <__subdf3+0x418>
   4f9c4:	898fc83a 	sub	r7,r17,r6
   4f9c8:	89e3803a 	cmpltu	r17,r17,r7
   4f9cc:	1947c83a 	sub	r3,r3,r5
   4f9d0:	1c47c83a 	sub	r3,r3,r17
   4f9d4:	3823883a 	mov	r17,r7
   4f9d8:	003f9b06 	br	4f848 <_gp+0xffff2aec>
   4f9dc:	2988b03a 	or	r4,r5,r6
   4f9e0:	203f5c26 	beq	r4,zero,4f754 <_gp+0xffff29f8>
   4f9e4:	10bfffc4 	addi	r2,r2,-1
   4f9e8:	1000931e 	bne	r2,zero,4fc38 <__subdf3+0x568>
   4f9ec:	898d883a 	add	r6,r17,r6
   4f9f0:	3463803a 	cmpltu	r17,r6,r17
   4f9f4:	1947883a 	add	r3,r3,r5
   4f9f8:	88c7883a 	add	r3,r17,r3
   4f9fc:	3023883a 	mov	r17,r6
   4fa00:	003fd306 	br	4f950 <_gp+0xffff2bf4>
   4fa04:	1000541e 	bne	r2,zero,4fb58 <__subdf3+0x488>
   4fa08:	80800044 	addi	r2,r16,1
   4fa0c:	1081ffcc 	andi	r2,r2,2047
   4fa10:	01000044 	movi	r4,1
   4fa14:	2080a20e 	bge	r4,r2,4fca0 <__subdf3+0x5d0>
   4fa18:	8989c83a 	sub	r4,r17,r6
   4fa1c:	8905803a 	cmpltu	r2,r17,r4
   4fa20:	1967c83a 	sub	r19,r3,r5
   4fa24:	98a7c83a 	sub	r19,r19,r2
   4fa28:	9880202c 	andhi	r2,r19,128
   4fa2c:	10006326 	beq	r2,zero,4fbbc <__subdf3+0x4ec>
   4fa30:	3463c83a 	sub	r17,r6,r17
   4fa34:	28c7c83a 	sub	r3,r5,r3
   4fa38:	344d803a 	cmpltu	r6,r6,r17
   4fa3c:	19a7c83a 	sub	r19,r3,r6
   4fa40:	3825883a 	mov	r18,r7
   4fa44:	983f861e 	bne	r19,zero,4f860 <_gp+0xffff2b04>
   4fa48:	8809883a 	mov	r4,r17
   4fa4c:	00501d00 	call	501d0 <__clzsi2>
   4fa50:	10800804 	addi	r2,r2,32
   4fa54:	113ffe04 	addi	r4,r2,-8
   4fa58:	00c007c4 	movi	r3,31
   4fa5c:	193f850e 	bge	r3,r4,4f874 <_gp+0xffff2b18>
   4fa60:	10bff604 	addi	r2,r2,-40
   4fa64:	8884983a 	sll	r2,r17,r2
   4fa68:	0023883a 	mov	r17,zero
   4fa6c:	243f880e 	bge	r4,r16,4f890 <_gp+0xffff2b34>
   4fa70:	00ffe034 	movhi	r3,65408
   4fa74:	18ffffc4 	addi	r3,r3,-1
   4fa78:	8121c83a 	sub	r16,r16,r4
   4fa7c:	10c6703a 	and	r3,r2,r3
   4fa80:	003f3406 	br	4f754 <_gp+0xffff29f8>
   4fa84:	9100004c 	andi	r4,r18,1
   4fa88:	000b883a 	mov	r5,zero
   4fa8c:	0005883a 	mov	r2,zero
   4fa90:	003f4806 	br	4f7b4 <_gp+0xffff2a58>
   4fa94:	298cb03a 	or	r6,r5,r6
   4fa98:	300cc03a 	cmpne	r6,r6,zero
   4fa9c:	0005883a 	mov	r2,zero
   4faa0:	003f6406 	br	4f834 <_gp+0xffff2ad8>
   4faa4:	10009a1e 	bne	r2,zero,4fd10 <__subdf3+0x640>
   4faa8:	82400044 	addi	r9,r16,1
   4faac:	4881ffcc 	andi	r2,r9,2047
   4fab0:	02800044 	movi	r10,1
   4fab4:	5080670e 	bge	r10,r2,4fc54 <__subdf3+0x584>
   4fab8:	0081ffc4 	movi	r2,2047
   4fabc:	4880af26 	beq	r9,r2,4fd7c <__subdf3+0x6ac>
   4fac0:	898d883a 	add	r6,r17,r6
   4fac4:	1945883a 	add	r2,r3,r5
   4fac8:	3447803a 	cmpltu	r3,r6,r17
   4facc:	1887883a 	add	r3,r3,r2
   4fad0:	182297fa 	slli	r17,r3,31
   4fad4:	300cd07a 	srli	r6,r6,1
   4fad8:	1806d07a 	srli	r3,r3,1
   4fadc:	4821883a 	mov	r16,r9
   4fae0:	89a2b03a 	or	r17,r17,r6
   4fae4:	003f1b06 	br	4f754 <_gp+0xffff29f8>
   4fae8:	0101ffc4 	movi	r4,2047
   4faec:	813f441e 	bne	r16,r4,4f800 <_gp+0xffff2aa4>
   4faf0:	003f1806 	br	4f754 <_gp+0xffff29f8>
   4faf4:	843ff844 	addi	r16,r16,-31
   4faf8:	01400804 	movi	r5,32
   4fafc:	1408d83a 	srl	r4,r2,r16
   4fb00:	19405026 	beq	r3,r5,4fc44 <__subdf3+0x574>
   4fb04:	01401004 	movi	r5,64
   4fb08:	28c7c83a 	sub	r3,r5,r3
   4fb0c:	10c4983a 	sll	r2,r2,r3
   4fb10:	88a2b03a 	or	r17,r17,r2
   4fb14:	8822c03a 	cmpne	r17,r17,zero
   4fb18:	2462b03a 	or	r17,r4,r17
   4fb1c:	0007883a 	mov	r3,zero
   4fb20:	0021883a 	mov	r16,zero
   4fb24:	003f6d06 	br	4f8dc <_gp+0xffff2b80>
   4fb28:	11fff804 	addi	r7,r2,-32
   4fb2c:	01000804 	movi	r4,32
   4fb30:	29ced83a 	srl	r7,r5,r7
   4fb34:	11004526 	beq	r2,r4,4fc4c <__subdf3+0x57c>
   4fb38:	01001004 	movi	r4,64
   4fb3c:	2089c83a 	sub	r4,r4,r2
   4fb40:	2904983a 	sll	r2,r5,r4
   4fb44:	118cb03a 	or	r6,r2,r6
   4fb48:	300cc03a 	cmpne	r6,r6,zero
   4fb4c:	398cb03a 	or	r6,r7,r6
   4fb50:	0005883a 	mov	r2,zero
   4fb54:	003f3706 	br	4f834 <_gp+0xffff2ad8>
   4fb58:	80002a26 	beq	r16,zero,4fc04 <__subdf3+0x534>
   4fb5c:	0101ffc4 	movi	r4,2047
   4fb60:	49006626 	beq	r9,r4,4fcfc <__subdf3+0x62c>
   4fb64:	0085c83a 	sub	r2,zero,r2
   4fb68:	18c02034 	orhi	r3,r3,128
   4fb6c:	01000e04 	movi	r4,56
   4fb70:	20807e16 	blt	r4,r2,4fd6c <__subdf3+0x69c>
   4fb74:	010007c4 	movi	r4,31
   4fb78:	2080e716 	blt	r4,r2,4ff18 <__subdf3+0x848>
   4fb7c:	01000804 	movi	r4,32
   4fb80:	2089c83a 	sub	r4,r4,r2
   4fb84:	1914983a 	sll	r10,r3,r4
   4fb88:	8890d83a 	srl	r8,r17,r2
   4fb8c:	8908983a 	sll	r4,r17,r4
   4fb90:	1884d83a 	srl	r2,r3,r2
   4fb94:	5222b03a 	or	r17,r10,r8
   4fb98:	2006c03a 	cmpne	r3,r4,zero
   4fb9c:	88e2b03a 	or	r17,r17,r3
   4fba0:	3463c83a 	sub	r17,r6,r17
   4fba4:	2885c83a 	sub	r2,r5,r2
   4fba8:	344d803a 	cmpltu	r6,r6,r17
   4fbac:	1187c83a 	sub	r3,r2,r6
   4fbb0:	4821883a 	mov	r16,r9
   4fbb4:	3825883a 	mov	r18,r7
   4fbb8:	003f2306 	br	4f848 <_gp+0xffff2aec>
   4fbbc:	24d0b03a 	or	r8,r4,r19
   4fbc0:	40001b1e 	bne	r8,zero,4fc30 <__subdf3+0x560>
   4fbc4:	0005883a 	mov	r2,zero
   4fbc8:	0009883a 	mov	r4,zero
   4fbcc:	0021883a 	mov	r16,zero
   4fbd0:	003f4906 	br	4f8f8 <_gp+0xffff2b9c>
   4fbd4:	010007c4 	movi	r4,31
   4fbd8:	20803a16 	blt	r4,r2,4fcc4 <__subdf3+0x5f4>
   4fbdc:	01000804 	movi	r4,32
   4fbe0:	2089c83a 	sub	r4,r4,r2
   4fbe4:	2912983a 	sll	r9,r5,r4
   4fbe8:	3090d83a 	srl	r8,r6,r2
   4fbec:	3108983a 	sll	r4,r6,r4
   4fbf0:	2884d83a 	srl	r2,r5,r2
   4fbf4:	4a12b03a 	or	r9,r9,r8
   4fbf8:	2008c03a 	cmpne	r4,r4,zero
   4fbfc:	4912b03a 	or	r9,r9,r4
   4fc00:	003f4e06 	br	4f93c <_gp+0xffff2be0>
   4fc04:	1c48b03a 	or	r4,r3,r17
   4fc08:	20003c26 	beq	r4,zero,4fcfc <__subdf3+0x62c>
   4fc0c:	0084303a 	nor	r2,zero,r2
   4fc10:	1000381e 	bne	r2,zero,4fcf4 <__subdf3+0x624>
   4fc14:	3463c83a 	sub	r17,r6,r17
   4fc18:	28c5c83a 	sub	r2,r5,r3
   4fc1c:	344d803a 	cmpltu	r6,r6,r17
   4fc20:	1187c83a 	sub	r3,r2,r6
   4fc24:	4821883a 	mov	r16,r9
   4fc28:	3825883a 	mov	r18,r7
   4fc2c:	003f0606 	br	4f848 <_gp+0xffff2aec>
   4fc30:	2023883a 	mov	r17,r4
   4fc34:	003f0906 	br	4f85c <_gp+0xffff2b00>
   4fc38:	0101ffc4 	movi	r4,2047
   4fc3c:	813f3a1e 	bne	r16,r4,4f928 <_gp+0xffff2bcc>
   4fc40:	003ec406 	br	4f754 <_gp+0xffff29f8>
   4fc44:	0005883a 	mov	r2,zero
   4fc48:	003fb106 	br	4fb10 <_gp+0xffff2db4>
   4fc4c:	0005883a 	mov	r2,zero
   4fc50:	003fbc06 	br	4fb44 <_gp+0xffff2de8>
   4fc54:	1c44b03a 	or	r2,r3,r17
   4fc58:	80008e1e 	bne	r16,zero,4fe94 <__subdf3+0x7c4>
   4fc5c:	1000c826 	beq	r2,zero,4ff80 <__subdf3+0x8b0>
   4fc60:	2984b03a 	or	r2,r5,r6
   4fc64:	103ebb26 	beq	r2,zero,4f754 <_gp+0xffff29f8>
   4fc68:	8989883a 	add	r4,r17,r6
   4fc6c:	1945883a 	add	r2,r3,r5
   4fc70:	2447803a 	cmpltu	r3,r4,r17
   4fc74:	1887883a 	add	r3,r3,r2
   4fc78:	1880202c 	andhi	r2,r3,128
   4fc7c:	2023883a 	mov	r17,r4
   4fc80:	103f1626 	beq	r2,zero,4f8dc <_gp+0xffff2b80>
   4fc84:	00bfe034 	movhi	r2,65408
   4fc88:	10bfffc4 	addi	r2,r2,-1
   4fc8c:	5021883a 	mov	r16,r10
   4fc90:	1886703a 	and	r3,r3,r2
   4fc94:	003eaf06 	br	4f754 <_gp+0xffff29f8>
   4fc98:	3825883a 	mov	r18,r7
   4fc9c:	003f0f06 	br	4f8dc <_gp+0xffff2b80>
   4fca0:	1c44b03a 	or	r2,r3,r17
   4fca4:	8000251e 	bne	r16,zero,4fd3c <__subdf3+0x66c>
   4fca8:	1000661e 	bne	r2,zero,4fe44 <__subdf3+0x774>
   4fcac:	2990b03a 	or	r8,r5,r6
   4fcb0:	40009626 	beq	r8,zero,4ff0c <__subdf3+0x83c>
   4fcb4:	2807883a 	mov	r3,r5
   4fcb8:	3023883a 	mov	r17,r6
   4fcbc:	3825883a 	mov	r18,r7
   4fcc0:	003ea406 	br	4f754 <_gp+0xffff29f8>
   4fcc4:	127ff804 	addi	r9,r2,-32
   4fcc8:	01000804 	movi	r4,32
   4fccc:	2a52d83a 	srl	r9,r5,r9
   4fcd0:	11008c26 	beq	r2,r4,4ff04 <__subdf3+0x834>
   4fcd4:	01001004 	movi	r4,64
   4fcd8:	2085c83a 	sub	r2,r4,r2
   4fcdc:	2884983a 	sll	r2,r5,r2
   4fce0:	118cb03a 	or	r6,r2,r6
   4fce4:	300cc03a 	cmpne	r6,r6,zero
   4fce8:	4992b03a 	or	r9,r9,r6
   4fcec:	0005883a 	mov	r2,zero
   4fcf0:	003f1206 	br	4f93c <_gp+0xffff2be0>
   4fcf4:	0101ffc4 	movi	r4,2047
   4fcf8:	493f9c1e 	bne	r9,r4,4fb6c <_gp+0xffff2e10>
   4fcfc:	2807883a 	mov	r3,r5
   4fd00:	3023883a 	mov	r17,r6
   4fd04:	4821883a 	mov	r16,r9
   4fd08:	3825883a 	mov	r18,r7
   4fd0c:	003e9106 	br	4f754 <_gp+0xffff29f8>
   4fd10:	80001f1e 	bne	r16,zero,4fd90 <__subdf3+0x6c0>
   4fd14:	1c48b03a 	or	r4,r3,r17
   4fd18:	20005a26 	beq	r4,zero,4fe84 <__subdf3+0x7b4>
   4fd1c:	0084303a 	nor	r2,zero,r2
   4fd20:	1000561e 	bne	r2,zero,4fe7c <__subdf3+0x7ac>
   4fd24:	89a3883a 	add	r17,r17,r6
   4fd28:	1945883a 	add	r2,r3,r5
   4fd2c:	898d803a 	cmpltu	r6,r17,r6
   4fd30:	3087883a 	add	r3,r6,r2
   4fd34:	4821883a 	mov	r16,r9
   4fd38:	003f0506 	br	4f950 <_gp+0xffff2bf4>
   4fd3c:	10002b1e 	bne	r2,zero,4fdec <__subdf3+0x71c>
   4fd40:	2984b03a 	or	r2,r5,r6
   4fd44:	10008026 	beq	r2,zero,4ff48 <__subdf3+0x878>
   4fd48:	2807883a 	mov	r3,r5
   4fd4c:	3023883a 	mov	r17,r6
   4fd50:	3825883a 	mov	r18,r7
   4fd54:	0401ffc4 	movi	r16,2047
   4fd58:	003e7e06 	br	4f754 <_gp+0xffff29f8>
   4fd5c:	3809883a 	mov	r4,r7
   4fd60:	0011883a 	mov	r8,zero
   4fd64:	0005883a 	mov	r2,zero
   4fd68:	003ee306 	br	4f8f8 <_gp+0xffff2b9c>
   4fd6c:	1c62b03a 	or	r17,r3,r17
   4fd70:	8822c03a 	cmpne	r17,r17,zero
   4fd74:	0005883a 	mov	r2,zero
   4fd78:	003f8906 	br	4fba0 <_gp+0xffff2e44>
   4fd7c:	3809883a 	mov	r4,r7
   4fd80:	4821883a 	mov	r16,r9
   4fd84:	0011883a 	mov	r8,zero
   4fd88:	0005883a 	mov	r2,zero
   4fd8c:	003eda06 	br	4f8f8 <_gp+0xffff2b9c>
   4fd90:	0101ffc4 	movi	r4,2047
   4fd94:	49003b26 	beq	r9,r4,4fe84 <__subdf3+0x7b4>
   4fd98:	0085c83a 	sub	r2,zero,r2
   4fd9c:	18c02034 	orhi	r3,r3,128
   4fda0:	01000e04 	movi	r4,56
   4fda4:	20806e16 	blt	r4,r2,4ff60 <__subdf3+0x890>
   4fda8:	010007c4 	movi	r4,31
   4fdac:	20807716 	blt	r4,r2,4ff8c <__subdf3+0x8bc>
   4fdb0:	01000804 	movi	r4,32
   4fdb4:	2089c83a 	sub	r4,r4,r2
   4fdb8:	1914983a 	sll	r10,r3,r4
   4fdbc:	8890d83a 	srl	r8,r17,r2
   4fdc0:	8908983a 	sll	r4,r17,r4
   4fdc4:	1884d83a 	srl	r2,r3,r2
   4fdc8:	5222b03a 	or	r17,r10,r8
   4fdcc:	2006c03a 	cmpne	r3,r4,zero
   4fdd0:	88e2b03a 	or	r17,r17,r3
   4fdd4:	89a3883a 	add	r17,r17,r6
   4fdd8:	1145883a 	add	r2,r2,r5
   4fddc:	898d803a 	cmpltu	r6,r17,r6
   4fde0:	3087883a 	add	r3,r6,r2
   4fde4:	4821883a 	mov	r16,r9
   4fde8:	003ed906 	br	4f950 <_gp+0xffff2bf4>
   4fdec:	2984b03a 	or	r2,r5,r6
   4fdf0:	10004226 	beq	r2,zero,4fefc <__subdf3+0x82c>
   4fdf4:	1808d0fa 	srli	r4,r3,3
   4fdf8:	8822d0fa 	srli	r17,r17,3
   4fdfc:	1806977a 	slli	r3,r3,29
   4fe00:	2080022c 	andhi	r2,r4,8
   4fe04:	1c62b03a 	or	r17,r3,r17
   4fe08:	10000826 	beq	r2,zero,4fe2c <__subdf3+0x75c>
   4fe0c:	2812d0fa 	srli	r9,r5,3
   4fe10:	4880022c 	andhi	r2,r9,8
   4fe14:	1000051e 	bne	r2,zero,4fe2c <__subdf3+0x75c>
   4fe18:	300cd0fa 	srli	r6,r6,3
   4fe1c:	2804977a 	slli	r2,r5,29
   4fe20:	4809883a 	mov	r4,r9
   4fe24:	3825883a 	mov	r18,r7
   4fe28:	11a2b03a 	or	r17,r2,r6
   4fe2c:	8806d77a 	srli	r3,r17,29
   4fe30:	200890fa 	slli	r4,r4,3
   4fe34:	882290fa 	slli	r17,r17,3
   4fe38:	0401ffc4 	movi	r16,2047
   4fe3c:	1906b03a 	or	r3,r3,r4
   4fe40:	003e4406 	br	4f754 <_gp+0xffff29f8>
   4fe44:	2984b03a 	or	r2,r5,r6
   4fe48:	103e4226 	beq	r2,zero,4f754 <_gp+0xffff29f8>
   4fe4c:	8989c83a 	sub	r4,r17,r6
   4fe50:	8911803a 	cmpltu	r8,r17,r4
   4fe54:	1945c83a 	sub	r2,r3,r5
   4fe58:	1205c83a 	sub	r2,r2,r8
   4fe5c:	1200202c 	andhi	r8,r2,128
   4fe60:	403e9a26 	beq	r8,zero,4f8cc <_gp+0xffff2b70>
   4fe64:	3463c83a 	sub	r17,r6,r17
   4fe68:	28c5c83a 	sub	r2,r5,r3
   4fe6c:	344d803a 	cmpltu	r6,r6,r17
   4fe70:	1187c83a 	sub	r3,r2,r6
   4fe74:	3825883a 	mov	r18,r7
   4fe78:	003e3606 	br	4f754 <_gp+0xffff29f8>
   4fe7c:	0101ffc4 	movi	r4,2047
   4fe80:	493fc71e 	bne	r9,r4,4fda0 <_gp+0xffff3044>
   4fe84:	2807883a 	mov	r3,r5
   4fe88:	3023883a 	mov	r17,r6
   4fe8c:	4821883a 	mov	r16,r9
   4fe90:	003e3006 	br	4f754 <_gp+0xffff29f8>
   4fe94:	10003626 	beq	r2,zero,4ff70 <__subdf3+0x8a0>
   4fe98:	2984b03a 	or	r2,r5,r6
   4fe9c:	10001726 	beq	r2,zero,4fefc <__subdf3+0x82c>
   4fea0:	1808d0fa 	srli	r4,r3,3
   4fea4:	8822d0fa 	srli	r17,r17,3
   4fea8:	1806977a 	slli	r3,r3,29
   4feac:	2080022c 	andhi	r2,r4,8
   4feb0:	1c62b03a 	or	r17,r3,r17
   4feb4:	10000726 	beq	r2,zero,4fed4 <__subdf3+0x804>
   4feb8:	2812d0fa 	srli	r9,r5,3
   4febc:	4880022c 	andhi	r2,r9,8
   4fec0:	1000041e 	bne	r2,zero,4fed4 <__subdf3+0x804>
   4fec4:	300cd0fa 	srli	r6,r6,3
   4fec8:	2804977a 	slli	r2,r5,29
   4fecc:	4809883a 	mov	r4,r9
   4fed0:	11a2b03a 	or	r17,r2,r6
   4fed4:	8806d77a 	srli	r3,r17,29
   4fed8:	200890fa 	slli	r4,r4,3
   4fedc:	882290fa 	slli	r17,r17,3
   4fee0:	3825883a 	mov	r18,r7
   4fee4:	1906b03a 	or	r3,r3,r4
   4fee8:	0401ffc4 	movi	r16,2047
   4feec:	003e1906 	br	4f754 <_gp+0xffff29f8>
   4fef0:	000b883a 	mov	r5,zero
   4fef4:	0005883a 	mov	r2,zero
   4fef8:	003e2e06 	br	4f7b4 <_gp+0xffff2a58>
   4fefc:	0401ffc4 	movi	r16,2047
   4ff00:	003e1406 	br	4f754 <_gp+0xffff29f8>
   4ff04:	0005883a 	mov	r2,zero
   4ff08:	003f7506 	br	4fce0 <_gp+0xffff2f84>
   4ff0c:	0005883a 	mov	r2,zero
   4ff10:	0009883a 	mov	r4,zero
   4ff14:	003e7806 	br	4f8f8 <_gp+0xffff2b9c>
   4ff18:	123ff804 	addi	r8,r2,-32
   4ff1c:	01000804 	movi	r4,32
   4ff20:	1a10d83a 	srl	r8,r3,r8
   4ff24:	11002526 	beq	r2,r4,4ffbc <__subdf3+0x8ec>
   4ff28:	01001004 	movi	r4,64
   4ff2c:	2085c83a 	sub	r2,r4,r2
   4ff30:	1884983a 	sll	r2,r3,r2
   4ff34:	1444b03a 	or	r2,r2,r17
   4ff38:	1004c03a 	cmpne	r2,r2,zero
   4ff3c:	40a2b03a 	or	r17,r8,r2
   4ff40:	0005883a 	mov	r2,zero
   4ff44:	003f1606 	br	4fba0 <_gp+0xffff2e44>
   4ff48:	02000434 	movhi	r8,16
   4ff4c:	0009883a 	mov	r4,zero
   4ff50:	423fffc4 	addi	r8,r8,-1
   4ff54:	00bfffc4 	movi	r2,-1
   4ff58:	0401ffc4 	movi	r16,2047
   4ff5c:	003e6606 	br	4f8f8 <_gp+0xffff2b9c>
   4ff60:	1c62b03a 	or	r17,r3,r17
   4ff64:	8822c03a 	cmpne	r17,r17,zero
   4ff68:	0005883a 	mov	r2,zero
   4ff6c:	003f9906 	br	4fdd4 <_gp+0xffff3078>
   4ff70:	2807883a 	mov	r3,r5
   4ff74:	3023883a 	mov	r17,r6
   4ff78:	0401ffc4 	movi	r16,2047
   4ff7c:	003df506 	br	4f754 <_gp+0xffff29f8>
   4ff80:	2807883a 	mov	r3,r5
   4ff84:	3023883a 	mov	r17,r6
   4ff88:	003df206 	br	4f754 <_gp+0xffff29f8>
   4ff8c:	123ff804 	addi	r8,r2,-32
   4ff90:	01000804 	movi	r4,32
   4ff94:	1a10d83a 	srl	r8,r3,r8
   4ff98:	11000a26 	beq	r2,r4,4ffc4 <__subdf3+0x8f4>
   4ff9c:	01001004 	movi	r4,64
   4ffa0:	2085c83a 	sub	r2,r4,r2
   4ffa4:	1884983a 	sll	r2,r3,r2
   4ffa8:	1444b03a 	or	r2,r2,r17
   4ffac:	1004c03a 	cmpne	r2,r2,zero
   4ffb0:	40a2b03a 	or	r17,r8,r2
   4ffb4:	0005883a 	mov	r2,zero
   4ffb8:	003f8606 	br	4fdd4 <_gp+0xffff3078>
   4ffbc:	0005883a 	mov	r2,zero
   4ffc0:	003fdc06 	br	4ff34 <_gp+0xffff31d8>
   4ffc4:	0005883a 	mov	r2,zero
   4ffc8:	003ff706 	br	4ffa8 <_gp+0xffff324c>

0004ffcc <__fixdfsi>:
   4ffcc:	280cd53a 	srli	r6,r5,20
   4ffd0:	00c00434 	movhi	r3,16
   4ffd4:	18ffffc4 	addi	r3,r3,-1
   4ffd8:	3181ffcc 	andi	r6,r6,2047
   4ffdc:	01c0ff84 	movi	r7,1022
   4ffe0:	28c6703a 	and	r3,r5,r3
   4ffe4:	280ad7fa 	srli	r5,r5,31
   4ffe8:	3980120e 	bge	r7,r6,50034 <__fixdfsi+0x68>
   4ffec:	00810744 	movi	r2,1053
   4fff0:	11800c16 	blt	r2,r6,50024 <__fixdfsi+0x58>
   4fff4:	00810cc4 	movi	r2,1075
   4fff8:	1185c83a 	sub	r2,r2,r6
   4fffc:	01c007c4 	movi	r7,31
   50000:	18c00434 	orhi	r3,r3,16
   50004:	38800d16 	blt	r7,r2,5003c <__fixdfsi+0x70>
   50008:	31befb44 	addi	r6,r6,-1043
   5000c:	2084d83a 	srl	r2,r4,r2
   50010:	1986983a 	sll	r3,r3,r6
   50014:	1884b03a 	or	r2,r3,r2
   50018:	28000726 	beq	r5,zero,50038 <__fixdfsi+0x6c>
   5001c:	0085c83a 	sub	r2,zero,r2
   50020:	f800283a 	ret
   50024:	00a00034 	movhi	r2,32768
   50028:	10bfffc4 	addi	r2,r2,-1
   5002c:	2885883a 	add	r2,r5,r2
   50030:	f800283a 	ret
   50034:	0005883a 	mov	r2,zero
   50038:	f800283a 	ret
   5003c:	008104c4 	movi	r2,1043
   50040:	1185c83a 	sub	r2,r2,r6
   50044:	1884d83a 	srl	r2,r3,r2
   50048:	003ff306 	br	50018 <_gp+0xffff32bc>

0005004c <__floatsidf>:
   5004c:	defffd04 	addi	sp,sp,-12
   50050:	dfc00215 	stw	ra,8(sp)
   50054:	dc400115 	stw	r17,4(sp)
   50058:	dc000015 	stw	r16,0(sp)
   5005c:	20002b26 	beq	r4,zero,5010c <__floatsidf+0xc0>
   50060:	2023883a 	mov	r17,r4
   50064:	2020d7fa 	srli	r16,r4,31
   50068:	20002d16 	blt	r4,zero,50120 <__floatsidf+0xd4>
   5006c:	8809883a 	mov	r4,r17
   50070:	00501d00 	call	501d0 <__clzsi2>
   50074:	01410784 	movi	r5,1054
   50078:	288bc83a 	sub	r5,r5,r2
   5007c:	01010cc4 	movi	r4,1075
   50080:	2149c83a 	sub	r4,r4,r5
   50084:	00c007c4 	movi	r3,31
   50088:	1900160e 	bge	r3,r4,500e4 <__floatsidf+0x98>
   5008c:	00c104c4 	movi	r3,1043
   50090:	1947c83a 	sub	r3,r3,r5
   50094:	88c6983a 	sll	r3,r17,r3
   50098:	00800434 	movhi	r2,16
   5009c:	10bfffc4 	addi	r2,r2,-1
   500a0:	1886703a 	and	r3,r3,r2
   500a4:	2941ffcc 	andi	r5,r5,2047
   500a8:	800d883a 	mov	r6,r16
   500ac:	0005883a 	mov	r2,zero
   500b0:	280a953a 	slli	r5,r5,20
   500b4:	31803fcc 	andi	r6,r6,255
   500b8:	01000434 	movhi	r4,16
   500bc:	300c97fa 	slli	r6,r6,31
   500c0:	213fffc4 	addi	r4,r4,-1
   500c4:	1906703a 	and	r3,r3,r4
   500c8:	1946b03a 	or	r3,r3,r5
   500cc:	1986b03a 	or	r3,r3,r6
   500d0:	dfc00217 	ldw	ra,8(sp)
   500d4:	dc400117 	ldw	r17,4(sp)
   500d8:	dc000017 	ldw	r16,0(sp)
   500dc:	dec00304 	addi	sp,sp,12
   500e0:	f800283a 	ret
   500e4:	00c002c4 	movi	r3,11
   500e8:	1887c83a 	sub	r3,r3,r2
   500ec:	88c6d83a 	srl	r3,r17,r3
   500f0:	8904983a 	sll	r2,r17,r4
   500f4:	01000434 	movhi	r4,16
   500f8:	213fffc4 	addi	r4,r4,-1
   500fc:	2941ffcc 	andi	r5,r5,2047
   50100:	1906703a 	and	r3,r3,r4
   50104:	800d883a 	mov	r6,r16
   50108:	003fe906 	br	500b0 <_gp+0xffff3354>
   5010c:	000d883a 	mov	r6,zero
   50110:	000b883a 	mov	r5,zero
   50114:	0007883a 	mov	r3,zero
   50118:	0005883a 	mov	r2,zero
   5011c:	003fe406 	br	500b0 <_gp+0xffff3354>
   50120:	0123c83a 	sub	r17,zero,r4
   50124:	003fd106 	br	5006c <_gp+0xffff3310>

00050128 <__floatunsidf>:
   50128:	defffe04 	addi	sp,sp,-8
   5012c:	dc000015 	stw	r16,0(sp)
   50130:	dfc00115 	stw	ra,4(sp)
   50134:	2021883a 	mov	r16,r4
   50138:	20002226 	beq	r4,zero,501c4 <__floatunsidf+0x9c>
   5013c:	00501d00 	call	501d0 <__clzsi2>
   50140:	01010784 	movi	r4,1054
   50144:	2089c83a 	sub	r4,r4,r2
   50148:	01810cc4 	movi	r6,1075
   5014c:	310dc83a 	sub	r6,r6,r4
   50150:	00c007c4 	movi	r3,31
   50154:	1980120e 	bge	r3,r6,501a0 <__floatunsidf+0x78>
   50158:	00c104c4 	movi	r3,1043
   5015c:	1907c83a 	sub	r3,r3,r4
   50160:	80ca983a 	sll	r5,r16,r3
   50164:	00800434 	movhi	r2,16
   50168:	10bfffc4 	addi	r2,r2,-1
   5016c:	2101ffcc 	andi	r4,r4,2047
   50170:	0021883a 	mov	r16,zero
   50174:	288a703a 	and	r5,r5,r2
   50178:	2008953a 	slli	r4,r4,20
   5017c:	00c00434 	movhi	r3,16
   50180:	18ffffc4 	addi	r3,r3,-1
   50184:	28c6703a 	and	r3,r5,r3
   50188:	8005883a 	mov	r2,r16
   5018c:	1906b03a 	or	r3,r3,r4
   50190:	dfc00117 	ldw	ra,4(sp)
   50194:	dc000017 	ldw	r16,0(sp)
   50198:	dec00204 	addi	sp,sp,8
   5019c:	f800283a 	ret
   501a0:	00c002c4 	movi	r3,11
   501a4:	188bc83a 	sub	r5,r3,r2
   501a8:	814ad83a 	srl	r5,r16,r5
   501ac:	00c00434 	movhi	r3,16
   501b0:	18ffffc4 	addi	r3,r3,-1
   501b4:	81a0983a 	sll	r16,r16,r6
   501b8:	2101ffcc 	andi	r4,r4,2047
   501bc:	28ca703a 	and	r5,r5,r3
   501c0:	003fed06 	br	50178 <_gp+0xffff341c>
   501c4:	0009883a 	mov	r4,zero
   501c8:	000b883a 	mov	r5,zero
   501cc:	003fea06 	br	50178 <_gp+0xffff341c>

000501d0 <__clzsi2>:
   501d0:	00bfffd4 	movui	r2,65535
   501d4:	11000536 	bltu	r2,r4,501ec <__clzsi2+0x1c>
   501d8:	00803fc4 	movi	r2,255
   501dc:	11000f36 	bltu	r2,r4,5021c <__clzsi2+0x4c>
   501e0:	00800804 	movi	r2,32
   501e4:	0007883a 	mov	r3,zero
   501e8:	00000506 	br	50200 <__clzsi2+0x30>
   501ec:	00804034 	movhi	r2,256
   501f0:	10bfffc4 	addi	r2,r2,-1
   501f4:	11000c2e 	bgeu	r2,r4,50228 <__clzsi2+0x58>
   501f8:	00800204 	movi	r2,8
   501fc:	00c00604 	movi	r3,24
   50200:	20c8d83a 	srl	r4,r4,r3
   50204:	00c00174 	movhi	r3,5
   50208:	18cb3284 	addi	r3,r3,11466
   5020c:	1909883a 	add	r4,r3,r4
   50210:	20c00003 	ldbu	r3,0(r4)
   50214:	10c5c83a 	sub	r2,r2,r3
   50218:	f800283a 	ret
   5021c:	00800604 	movi	r2,24
   50220:	00c00204 	movi	r3,8
   50224:	003ff606 	br	50200 <_gp+0xffff34a4>
   50228:	00800404 	movi	r2,16
   5022c:	1007883a 	mov	r3,r2
   50230:	003ff306 	br	50200 <_gp+0xffff34a4>

00050234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50234:	defffe04 	addi	sp,sp,-8
   50238:	dfc00115 	stw	ra,4(sp)
   5023c:	df000015 	stw	fp,0(sp)
   50240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50244:	d0a00f17 	ldw	r2,-32708(gp)
   50248:	10000326 	beq	r2,zero,50258 <alt_get_errno+0x24>
   5024c:	d0a00f17 	ldw	r2,-32708(gp)
   50250:	103ee83a 	callr	r2
   50254:	00000106 	br	5025c <alt_get_errno+0x28>
   50258:	d0a80a04 	addi	r2,gp,-24536
}
   5025c:	e037883a 	mov	sp,fp
   50260:	dfc00117 	ldw	ra,4(sp)
   50264:	df000017 	ldw	fp,0(sp)
   50268:	dec00204 	addi	sp,sp,8
   5026c:	f800283a 	ret

00050270 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   50270:	defffb04 	addi	sp,sp,-20
   50274:	dfc00415 	stw	ra,16(sp)
   50278:	df000315 	stw	fp,12(sp)
   5027c:	df000304 	addi	fp,sp,12
   50280:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   50284:	e0bfff17 	ldw	r2,-4(fp)
   50288:	10000816 	blt	r2,zero,502ac <close+0x3c>
   5028c:	01400304 	movi	r5,12
   50290:	e13fff17 	ldw	r4,-4(fp)
   50294:	004d9680 	call	4d968 <__mulsi3>
   50298:	1007883a 	mov	r3,r2
   5029c:	00800174 	movhi	r2,5
   502a0:	108edf04 	addi	r2,r2,15228
   502a4:	1885883a 	add	r2,r3,r2
   502a8:	00000106 	br	502b0 <close+0x40>
   502ac:	0005883a 	mov	r2,zero
   502b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   502b4:	e0bffd17 	ldw	r2,-12(fp)
   502b8:	10001926 	beq	r2,zero,50320 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   502bc:	e0bffd17 	ldw	r2,-12(fp)
   502c0:	10800017 	ldw	r2,0(r2)
   502c4:	10800417 	ldw	r2,16(r2)
   502c8:	10000626 	beq	r2,zero,502e4 <close+0x74>
   502cc:	e0bffd17 	ldw	r2,-12(fp)
   502d0:	10800017 	ldw	r2,0(r2)
   502d4:	10800417 	ldw	r2,16(r2)
   502d8:	e13ffd17 	ldw	r4,-12(fp)
   502dc:	103ee83a 	callr	r2
   502e0:	00000106 	br	502e8 <close+0x78>
   502e4:	0005883a 	mov	r2,zero
   502e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   502ec:	e13fff17 	ldw	r4,-4(fp)
   502f0:	00509580 	call	50958 <alt_release_fd>
    if (rval < 0)
   502f4:	e0bffe17 	ldw	r2,-8(fp)
   502f8:	1000070e 	bge	r2,zero,50318 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   502fc:	00502340 	call	50234 <alt_get_errno>
   50300:	1007883a 	mov	r3,r2
   50304:	e0bffe17 	ldw	r2,-8(fp)
   50308:	0085c83a 	sub	r2,zero,r2
   5030c:	18800015 	stw	r2,0(r3)
      return -1;
   50310:	00bfffc4 	movi	r2,-1
   50314:	00000706 	br	50334 <close+0xc4>
    }
    return 0;
   50318:	0005883a 	mov	r2,zero
   5031c:	00000506 	br	50334 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   50320:	00502340 	call	50234 <alt_get_errno>
   50324:	1007883a 	mov	r3,r2
   50328:	00801444 	movi	r2,81
   5032c:	18800015 	stw	r2,0(r3)
    return -1;
   50330:	00bfffc4 	movi	r2,-1
  }
}
   50334:	e037883a 	mov	sp,fp
   50338:	dfc00117 	ldw	ra,4(sp)
   5033c:	df000017 	ldw	fp,0(sp)
   50340:	dec00204 	addi	sp,sp,8
   50344:	f800283a 	ret

00050348 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   50348:	defffc04 	addi	sp,sp,-16
   5034c:	df000315 	stw	fp,12(sp)
   50350:	df000304 	addi	fp,sp,12
   50354:	e13ffd15 	stw	r4,-12(fp)
   50358:	e17ffe15 	stw	r5,-8(fp)
   5035c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   50360:	e0bfff17 	ldw	r2,-4(fp)
}
   50364:	e037883a 	mov	sp,fp
   50368:	df000017 	ldw	fp,0(sp)
   5036c:	dec00104 	addi	sp,sp,4
   50370:	f800283a 	ret

00050374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50374:	defffe04 	addi	sp,sp,-8
   50378:	dfc00115 	stw	ra,4(sp)
   5037c:	df000015 	stw	fp,0(sp)
   50380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50384:	d0a00f17 	ldw	r2,-32708(gp)
   50388:	10000326 	beq	r2,zero,50398 <alt_get_errno+0x24>
   5038c:	d0a00f17 	ldw	r2,-32708(gp)
   50390:	103ee83a 	callr	r2
   50394:	00000106 	br	5039c <alt_get_errno+0x28>
   50398:	d0a80a04 	addi	r2,gp,-24536
}
   5039c:	e037883a 	mov	sp,fp
   503a0:	dfc00117 	ldw	ra,4(sp)
   503a4:	df000017 	ldw	fp,0(sp)
   503a8:	dec00204 	addi	sp,sp,8
   503ac:	f800283a 	ret

000503b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   503b0:	defffb04 	addi	sp,sp,-20
   503b4:	dfc00415 	stw	ra,16(sp)
   503b8:	df000315 	stw	fp,12(sp)
   503bc:	df000304 	addi	fp,sp,12
   503c0:	e13ffe15 	stw	r4,-8(fp)
   503c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   503c8:	e0bffe17 	ldw	r2,-8(fp)
   503cc:	10000816 	blt	r2,zero,503f0 <fstat+0x40>
   503d0:	01400304 	movi	r5,12
   503d4:	e13ffe17 	ldw	r4,-8(fp)
   503d8:	004d9680 	call	4d968 <__mulsi3>
   503dc:	1007883a 	mov	r3,r2
   503e0:	00800174 	movhi	r2,5
   503e4:	108edf04 	addi	r2,r2,15228
   503e8:	1885883a 	add	r2,r3,r2
   503ec:	00000106 	br	503f4 <fstat+0x44>
   503f0:	0005883a 	mov	r2,zero
   503f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   503f8:	e0bffd17 	ldw	r2,-12(fp)
   503fc:	10001026 	beq	r2,zero,50440 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   50400:	e0bffd17 	ldw	r2,-12(fp)
   50404:	10800017 	ldw	r2,0(r2)
   50408:	10800817 	ldw	r2,32(r2)
   5040c:	10000726 	beq	r2,zero,5042c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   50410:	e0bffd17 	ldw	r2,-12(fp)
   50414:	10800017 	ldw	r2,0(r2)
   50418:	10800817 	ldw	r2,32(r2)
   5041c:	e17fff17 	ldw	r5,-4(fp)
   50420:	e13ffd17 	ldw	r4,-12(fp)
   50424:	103ee83a 	callr	r2
   50428:	00000a06 	br	50454 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   5042c:	e0bfff17 	ldw	r2,-4(fp)
   50430:	00c80004 	movi	r3,8192
   50434:	10c00115 	stw	r3,4(r2)
      return 0;
   50438:	0005883a 	mov	r2,zero
   5043c:	00000506 	br	50454 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   50440:	00503740 	call	50374 <alt_get_errno>
   50444:	1007883a 	mov	r3,r2
   50448:	00801444 	movi	r2,81
   5044c:	18800015 	stw	r2,0(r3)
    return -1;
   50450:	00bfffc4 	movi	r2,-1
  }
}
   50454:	e037883a 	mov	sp,fp
   50458:	dfc00117 	ldw	ra,4(sp)
   5045c:	df000017 	ldw	fp,0(sp)
   50460:	dec00204 	addi	sp,sp,8
   50464:	f800283a 	ret

00050468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50468:	defffe04 	addi	sp,sp,-8
   5046c:	dfc00115 	stw	ra,4(sp)
   50470:	df000015 	stw	fp,0(sp)
   50474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50478:	d0a00f17 	ldw	r2,-32708(gp)
   5047c:	10000326 	beq	r2,zero,5048c <alt_get_errno+0x24>
   50480:	d0a00f17 	ldw	r2,-32708(gp)
   50484:	103ee83a 	callr	r2
   50488:	00000106 	br	50490 <alt_get_errno+0x28>
   5048c:	d0a80a04 	addi	r2,gp,-24536
}
   50490:	e037883a 	mov	sp,fp
   50494:	dfc00117 	ldw	ra,4(sp)
   50498:	df000017 	ldw	fp,0(sp)
   5049c:	dec00204 	addi	sp,sp,8
   504a0:	f800283a 	ret

000504a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   504a4:	deffed04 	addi	sp,sp,-76
   504a8:	dfc01215 	stw	ra,72(sp)
   504ac:	df001115 	stw	fp,68(sp)
   504b0:	df001104 	addi	fp,sp,68
   504b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   504b8:	e0bfff17 	ldw	r2,-4(fp)
   504bc:	10000816 	blt	r2,zero,504e0 <isatty+0x3c>
   504c0:	01400304 	movi	r5,12
   504c4:	e13fff17 	ldw	r4,-4(fp)
   504c8:	004d9680 	call	4d968 <__mulsi3>
   504cc:	1007883a 	mov	r3,r2
   504d0:	00800174 	movhi	r2,5
   504d4:	108edf04 	addi	r2,r2,15228
   504d8:	1885883a 	add	r2,r3,r2
   504dc:	00000106 	br	504e4 <isatty+0x40>
   504e0:	0005883a 	mov	r2,zero
   504e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   504e8:	e0bfef17 	ldw	r2,-68(fp)
   504ec:	10000e26 	beq	r2,zero,50528 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   504f0:	e0bfef17 	ldw	r2,-68(fp)
   504f4:	10800017 	ldw	r2,0(r2)
   504f8:	10800817 	ldw	r2,32(r2)
   504fc:	1000021e 	bne	r2,zero,50508 <isatty+0x64>
    {
      return 1;
   50500:	00800044 	movi	r2,1
   50504:	00000d06 	br	5053c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   50508:	e0bff004 	addi	r2,fp,-64
   5050c:	100b883a 	mov	r5,r2
   50510:	e13fff17 	ldw	r4,-4(fp)
   50514:	00503b00 	call	503b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   50518:	e0bff117 	ldw	r2,-60(fp)
   5051c:	10880020 	cmpeqi	r2,r2,8192
   50520:	10803fcc 	andi	r2,r2,255
   50524:	00000506 	br	5053c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   50528:	00504680 	call	50468 <alt_get_errno>
   5052c:	1007883a 	mov	r3,r2
   50530:	00801444 	movi	r2,81
   50534:	18800015 	stw	r2,0(r3)
    return 0;
   50538:	0005883a 	mov	r2,zero
  }
}
   5053c:	e037883a 	mov	sp,fp
   50540:	dfc00117 	ldw	ra,4(sp)
   50544:	df000017 	ldw	fp,0(sp)
   50548:	dec00204 	addi	sp,sp,8
   5054c:	f800283a 	ret

00050550 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   50550:	defffc04 	addi	sp,sp,-16
   50554:	df000315 	stw	fp,12(sp)
   50558:	df000304 	addi	fp,sp,12
   5055c:	e13ffd15 	stw	r4,-12(fp)
   50560:	e17ffe15 	stw	r5,-8(fp)
   50564:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   50568:	e0fffe17 	ldw	r3,-8(fp)
   5056c:	e0bffd17 	ldw	r2,-12(fp)
   50570:	18800c26 	beq	r3,r2,505a4 <alt_load_section+0x54>
  {
    while( to != end )
   50574:	00000806 	br	50598 <alt_load_section+0x48>
    {
      *to++ = *from++;
   50578:	e0bffe17 	ldw	r2,-8(fp)
   5057c:	10c00104 	addi	r3,r2,4
   50580:	e0fffe15 	stw	r3,-8(fp)
   50584:	e0fffd17 	ldw	r3,-12(fp)
   50588:	19000104 	addi	r4,r3,4
   5058c:	e13ffd15 	stw	r4,-12(fp)
   50590:	18c00017 	ldw	r3,0(r3)
   50594:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   50598:	e0fffe17 	ldw	r3,-8(fp)
   5059c:	e0bfff17 	ldw	r2,-4(fp)
   505a0:	18bff51e 	bne	r3,r2,50578 <_gp+0xffff381c>
    {
      *to++ = *from++;
    }
  }
}
   505a4:	0001883a 	nop
   505a8:	e037883a 	mov	sp,fp
   505ac:	df000017 	ldw	fp,0(sp)
   505b0:	dec00104 	addi	sp,sp,4
   505b4:	f800283a 	ret

000505b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   505b8:	defffe04 	addi	sp,sp,-8
   505bc:	dfc00115 	stw	ra,4(sp)
   505c0:	df000015 	stw	fp,0(sp)
   505c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   505c8:	01800174 	movhi	r6,5
   505cc:	31936b04 	addi	r6,r6,19884
   505d0:	01400174 	movhi	r5,5
   505d4:	294b7e04 	addi	r5,r5,11768
   505d8:	01000174 	movhi	r4,5
   505dc:	21136b04 	addi	r4,r4,19884
   505e0:	00505500 	call	50550 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   505e4:	01800134 	movhi	r6,4
   505e8:	31808c04 	addi	r6,r6,560
   505ec:	01400134 	movhi	r5,4
   505f0:	29400804 	addi	r5,r5,32
   505f4:	01000134 	movhi	r4,4
   505f8:	21000804 	addi	r4,r4,32
   505fc:	00505500 	call	50550 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   50600:	01800174 	movhi	r6,5
   50604:	318b7e04 	addi	r6,r6,11768
   50608:	01400174 	movhi	r5,5
   5060c:	294a9f04 	addi	r5,r5,10876
   50610:	01000174 	movhi	r4,5
   50614:	210a9f04 	addi	r4,r4,10876
   50618:	00505500 	call	50550 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   5061c:	00518100 	call	51810 <alt_dcache_flush_all>
  alt_icache_flush_all();
   50620:	00519d00 	call	519d0 <alt_icache_flush_all>
}
   50624:	0001883a 	nop
   50628:	e037883a 	mov	sp,fp
   5062c:	dfc00117 	ldw	ra,4(sp)
   50630:	df000017 	ldw	fp,0(sp)
   50634:	dec00204 	addi	sp,sp,8
   50638:	f800283a 	ret

0005063c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5063c:	defffe04 	addi	sp,sp,-8
   50640:	dfc00115 	stw	ra,4(sp)
   50644:	df000015 	stw	fp,0(sp)
   50648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5064c:	d0a00f17 	ldw	r2,-32708(gp)
   50650:	10000326 	beq	r2,zero,50660 <alt_get_errno+0x24>
   50654:	d0a00f17 	ldw	r2,-32708(gp)
   50658:	103ee83a 	callr	r2
   5065c:	00000106 	br	50664 <alt_get_errno+0x28>
   50660:	d0a80a04 	addi	r2,gp,-24536
}
   50664:	e037883a 	mov	sp,fp
   50668:	dfc00117 	ldw	ra,4(sp)
   5066c:	df000017 	ldw	fp,0(sp)
   50670:	dec00204 	addi	sp,sp,8
   50674:	f800283a 	ret

00050678 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   50678:	defff904 	addi	sp,sp,-28
   5067c:	dfc00615 	stw	ra,24(sp)
   50680:	df000515 	stw	fp,20(sp)
   50684:	df000504 	addi	fp,sp,20
   50688:	e13ffd15 	stw	r4,-12(fp)
   5068c:	e17ffe15 	stw	r5,-8(fp)
   50690:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   50694:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50698:	e0bffd17 	ldw	r2,-12(fp)
   5069c:	10000816 	blt	r2,zero,506c0 <lseek+0x48>
   506a0:	01400304 	movi	r5,12
   506a4:	e13ffd17 	ldw	r4,-12(fp)
   506a8:	004d9680 	call	4d968 <__mulsi3>
   506ac:	1007883a 	mov	r3,r2
   506b0:	00800174 	movhi	r2,5
   506b4:	108edf04 	addi	r2,r2,15228
   506b8:	1885883a 	add	r2,r3,r2
   506bc:	00000106 	br	506c4 <lseek+0x4c>
   506c0:	0005883a 	mov	r2,zero
   506c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   506c8:	e0bffc17 	ldw	r2,-16(fp)
   506cc:	10001026 	beq	r2,zero,50710 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   506d0:	e0bffc17 	ldw	r2,-16(fp)
   506d4:	10800017 	ldw	r2,0(r2)
   506d8:	10800717 	ldw	r2,28(r2)
   506dc:	10000926 	beq	r2,zero,50704 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   506e0:	e0bffc17 	ldw	r2,-16(fp)
   506e4:	10800017 	ldw	r2,0(r2)
   506e8:	10800717 	ldw	r2,28(r2)
   506ec:	e1bfff17 	ldw	r6,-4(fp)
   506f0:	e17ffe17 	ldw	r5,-8(fp)
   506f4:	e13ffc17 	ldw	r4,-16(fp)
   506f8:	103ee83a 	callr	r2
   506fc:	e0bffb15 	stw	r2,-20(fp)
   50700:	00000506 	br	50718 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   50704:	00bfde84 	movi	r2,-134
   50708:	e0bffb15 	stw	r2,-20(fp)
   5070c:	00000206 	br	50718 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   50710:	00bfebc4 	movi	r2,-81
   50714:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   50718:	e0bffb17 	ldw	r2,-20(fp)
   5071c:	1000070e 	bge	r2,zero,5073c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   50720:	005063c0 	call	5063c <alt_get_errno>
   50724:	1007883a 	mov	r3,r2
   50728:	e0bffb17 	ldw	r2,-20(fp)
   5072c:	0085c83a 	sub	r2,zero,r2
   50730:	18800015 	stw	r2,0(r3)
    rc = -1;
   50734:	00bfffc4 	movi	r2,-1
   50738:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   5073c:	e0bffb17 	ldw	r2,-20(fp)
}
   50740:	e037883a 	mov	sp,fp
   50744:	dfc00117 	ldw	ra,4(sp)
   50748:	df000017 	ldw	fp,0(sp)
   5074c:	dec00204 	addi	sp,sp,8
   50750:	f800283a 	ret

00050754 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   50754:	defffd04 	addi	sp,sp,-12
   50758:	dfc00215 	stw	ra,8(sp)
   5075c:	df000115 	stw	fp,4(sp)
   50760:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   50764:	0009883a 	mov	r4,zero
   50768:	0050bfc0 	call	50bfc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   5076c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   50770:	0050c340 	call	50c34 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   50774:	01800174 	movhi	r6,5
   50778:	318b7604 	addi	r6,r6,11736
   5077c:	01400174 	movhi	r5,5
   50780:	294b7604 	addi	r5,r5,11736
   50784:	01000174 	movhi	r4,5
   50788:	210b7604 	addi	r4,r4,11736
   5078c:	0051d740 	call	51d74 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   50790:	00519100 	call	51910 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   50794:	01000174 	movhi	r4,5
   50798:	21065c04 	addi	r4,r4,6512
   5079c:	00525340 	call	52534 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   507a0:	d0a80b17 	ldw	r2,-24532(gp)
   507a4:	d0e80c17 	ldw	r3,-24528(gp)
   507a8:	d1280d17 	ldw	r4,-24524(gp)
   507ac:	200d883a 	mov	r6,r4
   507b0:	180b883a 	mov	r5,r3
   507b4:	1009883a 	mov	r4,r2
   507b8:	004026c0 	call	4026c <main>
   507bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   507c0:	01000044 	movi	r4,1
   507c4:	00502700 	call	50270 <close>
  exit (result);
   507c8:	e13fff17 	ldw	r4,-4(fp)
   507cc:	00525700 	call	52570 <exit>

000507d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   507d0:	defffe04 	addi	sp,sp,-8
   507d4:	df000115 	stw	fp,4(sp)
   507d8:	df000104 	addi	fp,sp,4
   507dc:	e13fff15 	stw	r4,-4(fp)
}
   507e0:	0001883a 	nop
   507e4:	e037883a 	mov	sp,fp
   507e8:	df000017 	ldw	fp,0(sp)
   507ec:	dec00104 	addi	sp,sp,4
   507f0:	f800283a 	ret

000507f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   507f4:	defffe04 	addi	sp,sp,-8
   507f8:	df000115 	stw	fp,4(sp)
   507fc:	df000104 	addi	fp,sp,4
   50800:	e13fff15 	stw	r4,-4(fp)
}
   50804:	0001883a 	nop
   50808:	e037883a 	mov	sp,fp
   5080c:	df000017 	ldw	fp,0(sp)
   50810:	dec00104 	addi	sp,sp,4
   50814:	f800283a 	ret

00050818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50818:	defffe04 	addi	sp,sp,-8
   5081c:	dfc00115 	stw	ra,4(sp)
   50820:	df000015 	stw	fp,0(sp)
   50824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50828:	d0a00f17 	ldw	r2,-32708(gp)
   5082c:	10000326 	beq	r2,zero,5083c <alt_get_errno+0x24>
   50830:	d0a00f17 	ldw	r2,-32708(gp)
   50834:	103ee83a 	callr	r2
   50838:	00000106 	br	50840 <alt_get_errno+0x28>
   5083c:	d0a80a04 	addi	r2,gp,-24536
}
   50840:	e037883a 	mov	sp,fp
   50844:	dfc00117 	ldw	ra,4(sp)
   50848:	df000017 	ldw	fp,0(sp)
   5084c:	dec00204 	addi	sp,sp,8
   50850:	f800283a 	ret

00050854 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   50854:	defff904 	addi	sp,sp,-28
   50858:	dfc00615 	stw	ra,24(sp)
   5085c:	df000515 	stw	fp,20(sp)
   50860:	df000504 	addi	fp,sp,20
   50864:	e13ffd15 	stw	r4,-12(fp)
   50868:	e17ffe15 	stw	r5,-8(fp)
   5086c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50870:	e0bffd17 	ldw	r2,-12(fp)
   50874:	10000816 	blt	r2,zero,50898 <read+0x44>
   50878:	01400304 	movi	r5,12
   5087c:	e13ffd17 	ldw	r4,-12(fp)
   50880:	004d9680 	call	4d968 <__mulsi3>
   50884:	1007883a 	mov	r3,r2
   50888:	00800174 	movhi	r2,5
   5088c:	108edf04 	addi	r2,r2,15228
   50890:	1885883a 	add	r2,r3,r2
   50894:	00000106 	br	5089c <read+0x48>
   50898:	0005883a 	mov	r2,zero
   5089c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   508a0:	e0bffb17 	ldw	r2,-20(fp)
   508a4:	10002226 	beq	r2,zero,50930 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   508a8:	e0bffb17 	ldw	r2,-20(fp)
   508ac:	10800217 	ldw	r2,8(r2)
   508b0:	108000cc 	andi	r2,r2,3
   508b4:	10800060 	cmpeqi	r2,r2,1
   508b8:	1000181e 	bne	r2,zero,5091c <read+0xc8>
        (fd->dev->read))
   508bc:	e0bffb17 	ldw	r2,-20(fp)
   508c0:	10800017 	ldw	r2,0(r2)
   508c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   508c8:	10001426 	beq	r2,zero,5091c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   508cc:	e0bffb17 	ldw	r2,-20(fp)
   508d0:	10800017 	ldw	r2,0(r2)
   508d4:	10800517 	ldw	r2,20(r2)
   508d8:	e0ffff17 	ldw	r3,-4(fp)
   508dc:	180d883a 	mov	r6,r3
   508e0:	e17ffe17 	ldw	r5,-8(fp)
   508e4:	e13ffb17 	ldw	r4,-20(fp)
   508e8:	103ee83a 	callr	r2
   508ec:	e0bffc15 	stw	r2,-16(fp)
   508f0:	e0bffc17 	ldw	r2,-16(fp)
   508f4:	1000070e 	bge	r2,zero,50914 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   508f8:	00508180 	call	50818 <alt_get_errno>
   508fc:	1007883a 	mov	r3,r2
   50900:	e0bffc17 	ldw	r2,-16(fp)
   50904:	0085c83a 	sub	r2,zero,r2
   50908:	18800015 	stw	r2,0(r3)
          return -1;
   5090c:	00bfffc4 	movi	r2,-1
   50910:	00000c06 	br	50944 <read+0xf0>
        }
        return rval;
   50914:	e0bffc17 	ldw	r2,-16(fp)
   50918:	00000a06 	br	50944 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   5091c:	00508180 	call	50818 <alt_get_errno>
   50920:	1007883a 	mov	r3,r2
   50924:	00800344 	movi	r2,13
   50928:	18800015 	stw	r2,0(r3)
   5092c:	00000406 	br	50940 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   50930:	00508180 	call	50818 <alt_get_errno>
   50934:	1007883a 	mov	r3,r2
   50938:	00801444 	movi	r2,81
   5093c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   50940:	00bfffc4 	movi	r2,-1
}
   50944:	e037883a 	mov	sp,fp
   50948:	dfc00117 	ldw	ra,4(sp)
   5094c:	df000017 	ldw	fp,0(sp)
   50950:	dec00204 	addi	sp,sp,8
   50954:	f800283a 	ret

00050958 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   50958:	defffc04 	addi	sp,sp,-16
   5095c:	dfc00315 	stw	ra,12(sp)
   50960:	df000215 	stw	fp,8(sp)
   50964:	dc000115 	stw	r16,4(sp)
   50968:	df000204 	addi	fp,sp,8
   5096c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   50970:	e0bffe17 	ldw	r2,-8(fp)
   50974:	108000d0 	cmplti	r2,r2,3
   50978:	1000111e 	bne	r2,zero,509c0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   5097c:	04000174 	movhi	r16,5
   50980:	840edf04 	addi	r16,r16,15228
   50984:	e0bffe17 	ldw	r2,-8(fp)
   50988:	01400304 	movi	r5,12
   5098c:	1009883a 	mov	r4,r2
   50990:	004d9680 	call	4d968 <__mulsi3>
   50994:	8085883a 	add	r2,r16,r2
   50998:	10800204 	addi	r2,r2,8
   5099c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   509a0:	04000174 	movhi	r16,5
   509a4:	840edf04 	addi	r16,r16,15228
   509a8:	e0bffe17 	ldw	r2,-8(fp)
   509ac:	01400304 	movi	r5,12
   509b0:	1009883a 	mov	r4,r2
   509b4:	004d9680 	call	4d968 <__mulsi3>
   509b8:	8085883a 	add	r2,r16,r2
   509bc:	10000015 	stw	zero,0(r2)
  }
}
   509c0:	0001883a 	nop
   509c4:	e6ffff04 	addi	sp,fp,-4
   509c8:	dfc00217 	ldw	ra,8(sp)
   509cc:	df000117 	ldw	fp,4(sp)
   509d0:	dc000017 	ldw	r16,0(sp)
   509d4:	dec00304 	addi	sp,sp,12
   509d8:	f800283a 	ret

000509dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   509dc:	defff904 	addi	sp,sp,-28
   509e0:	df000615 	stw	fp,24(sp)
   509e4:	df000604 	addi	fp,sp,24
   509e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   509ec:	0005303a 	rdctl	r2,status
   509f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   509f4:	e0fffe17 	ldw	r3,-8(fp)
   509f8:	00bfff84 	movi	r2,-2
   509fc:	1884703a 	and	r2,r3,r2
   50a00:	1001703a 	wrctl	status,r2
  
  return context;
   50a04:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   50a08:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   50a0c:	d0a01017 	ldw	r2,-32704(gp)
   50a10:	10c000c4 	addi	r3,r2,3
   50a14:	00bfff04 	movi	r2,-4
   50a18:	1884703a 	and	r2,r3,r2
   50a1c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   50a20:	d0e01017 	ldw	r3,-32704(gp)
   50a24:	e0bfff17 	ldw	r2,-4(fp)
   50a28:	1887883a 	add	r3,r3,r2
   50a2c:	008001b4 	movhi	r2,6
   50a30:	10b0f004 	addi	r2,r2,-15424
   50a34:	10c0062e 	bgeu	r2,r3,50a50 <sbrk+0x74>
   50a38:	e0bffb17 	ldw	r2,-20(fp)
   50a3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50a40:	e0bffa17 	ldw	r2,-24(fp)
   50a44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   50a48:	00bfffc4 	movi	r2,-1
   50a4c:	00000b06 	br	50a7c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   50a50:	d0a01017 	ldw	r2,-32704(gp)
   50a54:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   50a58:	d0e01017 	ldw	r3,-32704(gp)
   50a5c:	e0bfff17 	ldw	r2,-4(fp)
   50a60:	1885883a 	add	r2,r3,r2
   50a64:	d0a01015 	stw	r2,-32704(gp)
   50a68:	e0bffb17 	ldw	r2,-20(fp)
   50a6c:	e0bffc15 	stw	r2,-16(fp)
   50a70:	e0bffc17 	ldw	r2,-16(fp)
   50a74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   50a78:	e0bffd17 	ldw	r2,-12(fp)
} 
   50a7c:	e037883a 	mov	sp,fp
   50a80:	df000017 	ldw	fp,0(sp)
   50a84:	dec00104 	addi	sp,sp,4
   50a88:	f800283a 	ret

00050a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50a8c:	defffe04 	addi	sp,sp,-8
   50a90:	dfc00115 	stw	ra,4(sp)
   50a94:	df000015 	stw	fp,0(sp)
   50a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50a9c:	d0a00f17 	ldw	r2,-32708(gp)
   50aa0:	10000326 	beq	r2,zero,50ab0 <alt_get_errno+0x24>
   50aa4:	d0a00f17 	ldw	r2,-32708(gp)
   50aa8:	103ee83a 	callr	r2
   50aac:	00000106 	br	50ab4 <alt_get_errno+0x28>
   50ab0:	d0a80a04 	addi	r2,gp,-24536
}
   50ab4:	e037883a 	mov	sp,fp
   50ab8:	dfc00117 	ldw	ra,4(sp)
   50abc:	df000017 	ldw	fp,0(sp)
   50ac0:	dec00204 	addi	sp,sp,8
   50ac4:	f800283a 	ret

00050ac8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   50ac8:	defff904 	addi	sp,sp,-28
   50acc:	dfc00615 	stw	ra,24(sp)
   50ad0:	df000515 	stw	fp,20(sp)
   50ad4:	df000504 	addi	fp,sp,20
   50ad8:	e13ffd15 	stw	r4,-12(fp)
   50adc:	e17ffe15 	stw	r5,-8(fp)
   50ae0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50ae4:	e0bffd17 	ldw	r2,-12(fp)
   50ae8:	10000816 	blt	r2,zero,50b0c <write+0x44>
   50aec:	01400304 	movi	r5,12
   50af0:	e13ffd17 	ldw	r4,-12(fp)
   50af4:	004d9680 	call	4d968 <__mulsi3>
   50af8:	1007883a 	mov	r3,r2
   50afc:	00800174 	movhi	r2,5
   50b00:	108edf04 	addi	r2,r2,15228
   50b04:	1885883a 	add	r2,r3,r2
   50b08:	00000106 	br	50b10 <write+0x48>
   50b0c:	0005883a 	mov	r2,zero
   50b10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   50b14:	e0bffb17 	ldw	r2,-20(fp)
   50b18:	10002126 	beq	r2,zero,50ba0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   50b1c:	e0bffb17 	ldw	r2,-20(fp)
   50b20:	10800217 	ldw	r2,8(r2)
   50b24:	108000cc 	andi	r2,r2,3
   50b28:	10001826 	beq	r2,zero,50b8c <write+0xc4>
   50b2c:	e0bffb17 	ldw	r2,-20(fp)
   50b30:	10800017 	ldw	r2,0(r2)
   50b34:	10800617 	ldw	r2,24(r2)
   50b38:	10001426 	beq	r2,zero,50b8c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   50b3c:	e0bffb17 	ldw	r2,-20(fp)
   50b40:	10800017 	ldw	r2,0(r2)
   50b44:	10800617 	ldw	r2,24(r2)
   50b48:	e0ffff17 	ldw	r3,-4(fp)
   50b4c:	180d883a 	mov	r6,r3
   50b50:	e17ffe17 	ldw	r5,-8(fp)
   50b54:	e13ffb17 	ldw	r4,-20(fp)
   50b58:	103ee83a 	callr	r2
   50b5c:	e0bffc15 	stw	r2,-16(fp)
   50b60:	e0bffc17 	ldw	r2,-16(fp)
   50b64:	1000070e 	bge	r2,zero,50b84 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   50b68:	0050a8c0 	call	50a8c <alt_get_errno>
   50b6c:	1007883a 	mov	r3,r2
   50b70:	e0bffc17 	ldw	r2,-16(fp)
   50b74:	0085c83a 	sub	r2,zero,r2
   50b78:	18800015 	stw	r2,0(r3)
        return -1;
   50b7c:	00bfffc4 	movi	r2,-1
   50b80:	00000c06 	br	50bb4 <write+0xec>
      }
      return rval;
   50b84:	e0bffc17 	ldw	r2,-16(fp)
   50b88:	00000a06 	br	50bb4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   50b8c:	0050a8c0 	call	50a8c <alt_get_errno>
   50b90:	1007883a 	mov	r3,r2
   50b94:	00800344 	movi	r2,13
   50b98:	18800015 	stw	r2,0(r3)
   50b9c:	00000406 	br	50bb0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   50ba0:	0050a8c0 	call	50a8c <alt_get_errno>
   50ba4:	1007883a 	mov	r3,r2
   50ba8:	00801444 	movi	r2,81
   50bac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   50bb0:	00bfffc4 	movi	r2,-1
}
   50bb4:	e037883a 	mov	sp,fp
   50bb8:	dfc00117 	ldw	ra,4(sp)
   50bbc:	df000017 	ldw	fp,0(sp)
   50bc0:	dec00204 	addi	sp,sp,8
   50bc4:	f800283a 	ret

00050bc8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   50bc8:	defffd04 	addi	sp,sp,-12
   50bcc:	dfc00215 	stw	ra,8(sp)
   50bd0:	df000115 	stw	fp,4(sp)
   50bd4:	df000104 	addi	fp,sp,4
   50bd8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   50bdc:	d1600c04 	addi	r5,gp,-32720
   50be0:	e13fff17 	ldw	r4,-4(fp)
   50be4:	005186c0 	call	5186c <alt_dev_llist_insert>
}
   50be8:	e037883a 	mov	sp,fp
   50bec:	dfc00117 	ldw	ra,4(sp)
   50bf0:	df000017 	ldw	fp,0(sp)
   50bf4:	dec00204 	addi	sp,sp,8
   50bf8:	f800283a 	ret

00050bfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   50bfc:	defffd04 	addi	sp,sp,-12
   50c00:	dfc00215 	stw	ra,8(sp)
   50c04:	df000115 	stw	fp,4(sp)
   50c08:	df000104 	addi	fp,sp,4
   50c0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
   50c10:	00522180 	call	52218 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   50c14:	00800044 	movi	r2,1
   50c18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   50c1c:	0001883a 	nop
   50c20:	e037883a 	mov	sp,fp
   50c24:	dfc00117 	ldw	ra,4(sp)
   50c28:	df000017 	ldw	fp,0(sp)
   50c2c:	dec00204 	addi	sp,sp,8
   50c30:	f800283a 	ret

00050c34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   50c34:	defffe04 	addi	sp,sp,-8
   50c38:	dfc00115 	stw	ra,4(sp)
   50c3c:	df000015 	stw	fp,0(sp)
   50c40:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   50c44:	01800184 	movi	r6,6
   50c48:	000b883a 	mov	r5,zero
   50c4c:	01000174 	movhi	r4,5
   50c50:	210f4904 	addi	r4,r4,15652
   50c54:	0050de00 	call	50de0 <altera_avalon_jtag_uart_init>
   50c58:	01000174 	movhi	r4,5
   50c5c:	210f3f04 	addi	r4,r4,15612
   50c60:	0050bc80 	call	50bc8 <alt_dev_reg>
}
   50c64:	0001883a 	nop
   50c68:	e037883a 	mov	sp,fp
   50c6c:	dfc00117 	ldw	ra,4(sp)
   50c70:	df000017 	ldw	fp,0(sp)
   50c74:	dec00204 	addi	sp,sp,8
   50c78:	f800283a 	ret

00050c7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   50c7c:	defffa04 	addi	sp,sp,-24
   50c80:	dfc00515 	stw	ra,20(sp)
   50c84:	df000415 	stw	fp,16(sp)
   50c88:	df000404 	addi	fp,sp,16
   50c8c:	e13ffd15 	stw	r4,-12(fp)
   50c90:	e17ffe15 	stw	r5,-8(fp)
   50c94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50c98:	e0bffd17 	ldw	r2,-12(fp)
   50c9c:	10800017 	ldw	r2,0(r2)
   50ca0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   50ca4:	e0bffc17 	ldw	r2,-16(fp)
   50ca8:	10c00a04 	addi	r3,r2,40
   50cac:	e0bffd17 	ldw	r2,-12(fp)
   50cb0:	10800217 	ldw	r2,8(r2)
   50cb4:	100f883a 	mov	r7,r2
   50cb8:	e1bfff17 	ldw	r6,-4(fp)
   50cbc:	e17ffe17 	ldw	r5,-8(fp)
   50cc0:	1809883a 	mov	r4,r3
   50cc4:	00512a40 	call	512a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   50cc8:	e037883a 	mov	sp,fp
   50ccc:	dfc00117 	ldw	ra,4(sp)
   50cd0:	df000017 	ldw	fp,0(sp)
   50cd4:	dec00204 	addi	sp,sp,8
   50cd8:	f800283a 	ret

00050cdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   50cdc:	defffa04 	addi	sp,sp,-24
   50ce0:	dfc00515 	stw	ra,20(sp)
   50ce4:	df000415 	stw	fp,16(sp)
   50ce8:	df000404 	addi	fp,sp,16
   50cec:	e13ffd15 	stw	r4,-12(fp)
   50cf0:	e17ffe15 	stw	r5,-8(fp)
   50cf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50cf8:	e0bffd17 	ldw	r2,-12(fp)
   50cfc:	10800017 	ldw	r2,0(r2)
   50d00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   50d04:	e0bffc17 	ldw	r2,-16(fp)
   50d08:	10c00a04 	addi	r3,r2,40
   50d0c:	e0bffd17 	ldw	r2,-12(fp)
   50d10:	10800217 	ldw	r2,8(r2)
   50d14:	100f883a 	mov	r7,r2
   50d18:	e1bfff17 	ldw	r6,-4(fp)
   50d1c:	e17ffe17 	ldw	r5,-8(fp)
   50d20:	1809883a 	mov	r4,r3
   50d24:	00514c00 	call	514c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   50d28:	e037883a 	mov	sp,fp
   50d2c:	dfc00117 	ldw	ra,4(sp)
   50d30:	df000017 	ldw	fp,0(sp)
   50d34:	dec00204 	addi	sp,sp,8
   50d38:	f800283a 	ret

00050d3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   50d3c:	defffc04 	addi	sp,sp,-16
   50d40:	dfc00315 	stw	ra,12(sp)
   50d44:	df000215 	stw	fp,8(sp)
   50d48:	df000204 	addi	fp,sp,8
   50d4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50d50:	e0bfff17 	ldw	r2,-4(fp)
   50d54:	10800017 	ldw	r2,0(r2)
   50d58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   50d5c:	e0bffe17 	ldw	r2,-8(fp)
   50d60:	10c00a04 	addi	r3,r2,40
   50d64:	e0bfff17 	ldw	r2,-4(fp)
   50d68:	10800217 	ldw	r2,8(r2)
   50d6c:	100b883a 	mov	r5,r2
   50d70:	1809883a 	mov	r4,r3
   50d74:	005114c0 	call	5114c <altera_avalon_jtag_uart_close>
}
   50d78:	e037883a 	mov	sp,fp
   50d7c:	dfc00117 	ldw	ra,4(sp)
   50d80:	df000017 	ldw	fp,0(sp)
   50d84:	dec00204 	addi	sp,sp,8
   50d88:	f800283a 	ret

00050d8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   50d8c:	defffa04 	addi	sp,sp,-24
   50d90:	dfc00515 	stw	ra,20(sp)
   50d94:	df000415 	stw	fp,16(sp)
   50d98:	df000404 	addi	fp,sp,16
   50d9c:	e13ffd15 	stw	r4,-12(fp)
   50da0:	e17ffe15 	stw	r5,-8(fp)
   50da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   50da8:	e0bffd17 	ldw	r2,-12(fp)
   50dac:	10800017 	ldw	r2,0(r2)
   50db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   50db4:	e0bffc17 	ldw	r2,-16(fp)
   50db8:	10800a04 	addi	r2,r2,40
   50dbc:	e1bfff17 	ldw	r6,-4(fp)
   50dc0:	e17ffe17 	ldw	r5,-8(fp)
   50dc4:	1009883a 	mov	r4,r2
   50dc8:	00511b40 	call	511b4 <altera_avalon_jtag_uart_ioctl>
}
   50dcc:	e037883a 	mov	sp,fp
   50dd0:	dfc00117 	ldw	ra,4(sp)
   50dd4:	df000017 	ldw	fp,0(sp)
   50dd8:	dec00204 	addi	sp,sp,8
   50ddc:	f800283a 	ret

00050de0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   50de0:	defffa04 	addi	sp,sp,-24
   50de4:	dfc00515 	stw	ra,20(sp)
   50de8:	df000415 	stw	fp,16(sp)
   50dec:	df000404 	addi	fp,sp,16
   50df0:	e13ffd15 	stw	r4,-12(fp)
   50df4:	e17ffe15 	stw	r5,-8(fp)
   50df8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50dfc:	e0bffd17 	ldw	r2,-12(fp)
   50e00:	00c00044 	movi	r3,1
   50e04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   50e08:	e0bffd17 	ldw	r2,-12(fp)
   50e0c:	10800017 	ldw	r2,0(r2)
   50e10:	10800104 	addi	r2,r2,4
   50e14:	1007883a 	mov	r3,r2
   50e18:	e0bffd17 	ldw	r2,-12(fp)
   50e1c:	10800817 	ldw	r2,32(r2)
   50e20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   50e24:	e0bffe17 	ldw	r2,-8(fp)
   50e28:	e0ffff17 	ldw	r3,-4(fp)
   50e2c:	d8000015 	stw	zero,0(sp)
   50e30:	e1fffd17 	ldw	r7,-12(fp)
   50e34:	01800174 	movhi	r6,5
   50e38:	3183a804 	addi	r6,r6,3744
   50e3c:	180b883a 	mov	r5,r3
   50e40:	1009883a 	mov	r4,r2
   50e44:	00519f00 	call	519f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   50e48:	e0bffd17 	ldw	r2,-12(fp)
   50e4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   50e50:	e0bffd17 	ldw	r2,-12(fp)
   50e54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   50e58:	d0e80f17 	ldw	r3,-24516(gp)
   50e5c:	e1fffd17 	ldw	r7,-12(fp)
   50e60:	01800174 	movhi	r6,5
   50e64:	31842b04 	addi	r6,r6,4268
   50e68:	180b883a 	mov	r5,r3
   50e6c:	1009883a 	mov	r4,r2
   50e70:	00516e40 	call	516e4 <alt_alarm_start>
   50e74:	1000040e 	bge	r2,zero,50e88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   50e78:	e0fffd17 	ldw	r3,-12(fp)
   50e7c:	00a00034 	movhi	r2,32768
   50e80:	10bfffc4 	addi	r2,r2,-1
   50e84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   50e88:	0001883a 	nop
   50e8c:	e037883a 	mov	sp,fp
   50e90:	dfc00117 	ldw	ra,4(sp)
   50e94:	df000017 	ldw	fp,0(sp)
   50e98:	dec00204 	addi	sp,sp,8
   50e9c:	f800283a 	ret

00050ea0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   50ea0:	defff804 	addi	sp,sp,-32
   50ea4:	df000715 	stw	fp,28(sp)
   50ea8:	df000704 	addi	fp,sp,28
   50eac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   50eb0:	e0bfff17 	ldw	r2,-4(fp)
   50eb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   50eb8:	e0bffb17 	ldw	r2,-20(fp)
   50ebc:	10800017 	ldw	r2,0(r2)
   50ec0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50ec4:	e0bffc17 	ldw	r2,-16(fp)
   50ec8:	10800104 	addi	r2,r2,4
   50ecc:	10800037 	ldwio	r2,0(r2)
   50ed0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   50ed4:	e0bffd17 	ldw	r2,-12(fp)
   50ed8:	1080c00c 	andi	r2,r2,768
   50edc:	10006d26 	beq	r2,zero,51094 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   50ee0:	e0bffd17 	ldw	r2,-12(fp)
   50ee4:	1080400c 	andi	r2,r2,256
   50ee8:	10003526 	beq	r2,zero,50fc0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   50eec:	00800074 	movhi	r2,1
   50ef0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50ef4:	e0bffb17 	ldw	r2,-20(fp)
   50ef8:	10800a17 	ldw	r2,40(r2)
   50efc:	10800044 	addi	r2,r2,1
   50f00:	1081ffcc 	andi	r2,r2,2047
   50f04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   50f08:	e0bffb17 	ldw	r2,-20(fp)
   50f0c:	10c00b17 	ldw	r3,44(r2)
   50f10:	e0bffe17 	ldw	r2,-8(fp)
   50f14:	18801526 	beq	r3,r2,50f6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   50f18:	e0bffc17 	ldw	r2,-16(fp)
   50f1c:	10800037 	ldwio	r2,0(r2)
   50f20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   50f24:	e0bff917 	ldw	r2,-28(fp)
   50f28:	10a0000c 	andi	r2,r2,32768
   50f2c:	10001126 	beq	r2,zero,50f74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   50f30:	e0bffb17 	ldw	r2,-20(fp)
   50f34:	10800a17 	ldw	r2,40(r2)
   50f38:	e0fff917 	ldw	r3,-28(fp)
   50f3c:	1809883a 	mov	r4,r3
   50f40:	e0fffb17 	ldw	r3,-20(fp)
   50f44:	1885883a 	add	r2,r3,r2
   50f48:	10800e04 	addi	r2,r2,56
   50f4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50f50:	e0bffb17 	ldw	r2,-20(fp)
   50f54:	10800a17 	ldw	r2,40(r2)
   50f58:	10800044 	addi	r2,r2,1
   50f5c:	10c1ffcc 	andi	r3,r2,2047
   50f60:	e0bffb17 	ldw	r2,-20(fp)
   50f64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   50f68:	003fe206 	br	50ef4 <_gp+0xffff4198>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   50f6c:	0001883a 	nop
   50f70:	00000106 	br	50f78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   50f74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   50f78:	e0bff917 	ldw	r2,-28(fp)
   50f7c:	10bfffec 	andhi	r2,r2,65535
   50f80:	10000f26 	beq	r2,zero,50fc0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   50f84:	e0bffb17 	ldw	r2,-20(fp)
   50f88:	10c00817 	ldw	r3,32(r2)
   50f8c:	00bfff84 	movi	r2,-2
   50f90:	1886703a 	and	r3,r3,r2
   50f94:	e0bffb17 	ldw	r2,-20(fp)
   50f98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   50f9c:	e0bffc17 	ldw	r2,-16(fp)
   50fa0:	10800104 	addi	r2,r2,4
   50fa4:	1007883a 	mov	r3,r2
   50fa8:	e0bffb17 	ldw	r2,-20(fp)
   50fac:	10800817 	ldw	r2,32(r2)
   50fb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   50fb4:	e0bffc17 	ldw	r2,-16(fp)
   50fb8:	10800104 	addi	r2,r2,4
   50fbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   50fc0:	e0bffd17 	ldw	r2,-12(fp)
   50fc4:	1080800c 	andi	r2,r2,512
   50fc8:	103fbe26 	beq	r2,zero,50ec4 <_gp+0xffff4168>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   50fcc:	e0bffd17 	ldw	r2,-12(fp)
   50fd0:	1004d43a 	srli	r2,r2,16
   50fd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   50fd8:	00001406 	br	5102c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   50fdc:	e0bffc17 	ldw	r2,-16(fp)
   50fe0:	e0fffb17 	ldw	r3,-20(fp)
   50fe4:	18c00d17 	ldw	r3,52(r3)
   50fe8:	e13ffb17 	ldw	r4,-20(fp)
   50fec:	20c7883a 	add	r3,r4,r3
   50ff0:	18c20e04 	addi	r3,r3,2104
   50ff4:	18c00003 	ldbu	r3,0(r3)
   50ff8:	18c03fcc 	andi	r3,r3,255
   50ffc:	18c0201c 	xori	r3,r3,128
   51000:	18ffe004 	addi	r3,r3,-128
   51004:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   51008:	e0bffb17 	ldw	r2,-20(fp)
   5100c:	10800d17 	ldw	r2,52(r2)
   51010:	10800044 	addi	r2,r2,1
   51014:	10c1ffcc 	andi	r3,r2,2047
   51018:	e0bffb17 	ldw	r2,-20(fp)
   5101c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   51020:	e0bffa17 	ldw	r2,-24(fp)
   51024:	10bfffc4 	addi	r2,r2,-1
   51028:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5102c:	e0bffa17 	ldw	r2,-24(fp)
   51030:	10000526 	beq	r2,zero,51048 <altera_avalon_jtag_uart_irq+0x1a8>
   51034:	e0bffb17 	ldw	r2,-20(fp)
   51038:	10c00d17 	ldw	r3,52(r2)
   5103c:	e0bffb17 	ldw	r2,-20(fp)
   51040:	10800c17 	ldw	r2,48(r2)
   51044:	18bfe51e 	bne	r3,r2,50fdc <_gp+0xffff4280>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   51048:	e0bffa17 	ldw	r2,-24(fp)
   5104c:	103f9d26 	beq	r2,zero,50ec4 <_gp+0xffff4168>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   51050:	e0bffb17 	ldw	r2,-20(fp)
   51054:	10c00817 	ldw	r3,32(r2)
   51058:	00bfff44 	movi	r2,-3
   5105c:	1886703a 	and	r3,r3,r2
   51060:	e0bffb17 	ldw	r2,-20(fp)
   51064:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51068:	e0bffb17 	ldw	r2,-20(fp)
   5106c:	10800017 	ldw	r2,0(r2)
   51070:	10800104 	addi	r2,r2,4
   51074:	1007883a 	mov	r3,r2
   51078:	e0bffb17 	ldw	r2,-20(fp)
   5107c:	10800817 	ldw	r2,32(r2)
   51080:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   51084:	e0bffc17 	ldw	r2,-16(fp)
   51088:	10800104 	addi	r2,r2,4
   5108c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   51090:	003f8c06 	br	50ec4 <_gp+0xffff4168>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   51094:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   51098:	0001883a 	nop
   5109c:	e037883a 	mov	sp,fp
   510a0:	df000017 	ldw	fp,0(sp)
   510a4:	dec00104 	addi	sp,sp,4
   510a8:	f800283a 	ret

000510ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   510ac:	defff804 	addi	sp,sp,-32
   510b0:	df000715 	stw	fp,28(sp)
   510b4:	df000704 	addi	fp,sp,28
   510b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   510bc:	e0bffb17 	ldw	r2,-20(fp)
   510c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   510c4:	e0bff917 	ldw	r2,-28(fp)
   510c8:	10800017 	ldw	r2,0(r2)
   510cc:	10800104 	addi	r2,r2,4
   510d0:	10800037 	ldwio	r2,0(r2)
   510d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   510d8:	e0bffa17 	ldw	r2,-24(fp)
   510dc:	1081000c 	andi	r2,r2,1024
   510e0:	10000b26 	beq	r2,zero,51110 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   510e4:	e0bff917 	ldw	r2,-28(fp)
   510e8:	10800017 	ldw	r2,0(r2)
   510ec:	10800104 	addi	r2,r2,4
   510f0:	1007883a 	mov	r3,r2
   510f4:	e0bff917 	ldw	r2,-28(fp)
   510f8:	10800817 	ldw	r2,32(r2)
   510fc:	10810014 	ori	r2,r2,1024
   51100:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   51104:	e0bff917 	ldw	r2,-28(fp)
   51108:	10000915 	stw	zero,36(r2)
   5110c:	00000a06 	br	51138 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   51110:	e0bff917 	ldw	r2,-28(fp)
   51114:	10c00917 	ldw	r3,36(r2)
   51118:	00a00034 	movhi	r2,32768
   5111c:	10bfff04 	addi	r2,r2,-4
   51120:	10c00536 	bltu	r2,r3,51138 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   51124:	e0bff917 	ldw	r2,-28(fp)
   51128:	10800917 	ldw	r2,36(r2)
   5112c:	10c00044 	addi	r3,r2,1
   51130:	e0bff917 	ldw	r2,-28(fp)
   51134:	10c00915 	stw	r3,36(r2)
   51138:	d0a80f17 	ldw	r2,-24516(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   5113c:	e037883a 	mov	sp,fp
   51140:	df000017 	ldw	fp,0(sp)
   51144:	dec00104 	addi	sp,sp,4
   51148:	f800283a 	ret

0005114c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   5114c:	defffd04 	addi	sp,sp,-12
   51150:	df000215 	stw	fp,8(sp)
   51154:	df000204 	addi	fp,sp,8
   51158:	e13ffe15 	stw	r4,-8(fp)
   5115c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   51160:	00000506 	br	51178 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   51164:	e0bfff17 	ldw	r2,-4(fp)
   51168:	1090000c 	andi	r2,r2,16384
   5116c:	10000226 	beq	r2,zero,51178 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   51170:	00bffd44 	movi	r2,-11
   51174:	00000b06 	br	511a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   51178:	e0bffe17 	ldw	r2,-8(fp)
   5117c:	10c00d17 	ldw	r3,52(r2)
   51180:	e0bffe17 	ldw	r2,-8(fp)
   51184:	10800c17 	ldw	r2,48(r2)
   51188:	18800526 	beq	r3,r2,511a0 <altera_avalon_jtag_uart_close+0x54>
   5118c:	e0bffe17 	ldw	r2,-8(fp)
   51190:	10c00917 	ldw	r3,36(r2)
   51194:	e0bffe17 	ldw	r2,-8(fp)
   51198:	10800117 	ldw	r2,4(r2)
   5119c:	18bff136 	bltu	r3,r2,51164 <_gp+0xffff4408>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   511a0:	0005883a 	mov	r2,zero
}
   511a4:	e037883a 	mov	sp,fp
   511a8:	df000017 	ldw	fp,0(sp)
   511ac:	dec00104 	addi	sp,sp,4
   511b0:	f800283a 	ret

000511b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   511b4:	defffa04 	addi	sp,sp,-24
   511b8:	df000515 	stw	fp,20(sp)
   511bc:	df000504 	addi	fp,sp,20
   511c0:	e13ffd15 	stw	r4,-12(fp)
   511c4:	e17ffe15 	stw	r5,-8(fp)
   511c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   511cc:	00bff9c4 	movi	r2,-25
   511d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   511d4:	e0bffe17 	ldw	r2,-8(fp)
   511d8:	10da8060 	cmpeqi	r3,r2,27137
   511dc:	1800031e 	bne	r3,zero,511ec <altera_avalon_jtag_uart_ioctl+0x38>
   511e0:	109a80a0 	cmpeqi	r2,r2,27138
   511e4:	1000181e 	bne	r2,zero,51248 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   511e8:	00002906 	br	51290 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   511ec:	e0bffd17 	ldw	r2,-12(fp)
   511f0:	10c00117 	ldw	r3,4(r2)
   511f4:	00a00034 	movhi	r2,32768
   511f8:	10bfffc4 	addi	r2,r2,-1
   511fc:	18802126 	beq	r3,r2,51284 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   51200:	e0bfff17 	ldw	r2,-4(fp)
   51204:	10800017 	ldw	r2,0(r2)
   51208:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   5120c:	e0bffc17 	ldw	r2,-16(fp)
   51210:	10800090 	cmplti	r2,r2,2
   51214:	1000061e 	bne	r2,zero,51230 <altera_avalon_jtag_uart_ioctl+0x7c>
   51218:	e0fffc17 	ldw	r3,-16(fp)
   5121c:	00a00034 	movhi	r2,32768
   51220:	10bfffc4 	addi	r2,r2,-1
   51224:	18800226 	beq	r3,r2,51230 <altera_avalon_jtag_uart_ioctl+0x7c>
   51228:	e0bffc17 	ldw	r2,-16(fp)
   5122c:	00000206 	br	51238 <altera_avalon_jtag_uart_ioctl+0x84>
   51230:	00a00034 	movhi	r2,32768
   51234:	10bfff84 	addi	r2,r2,-2
   51238:	e0fffd17 	ldw	r3,-12(fp)
   5123c:	18800115 	stw	r2,4(r3)
      rc = 0;
   51240:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   51244:	00000f06 	br	51284 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   51248:	e0bffd17 	ldw	r2,-12(fp)
   5124c:	10c00117 	ldw	r3,4(r2)
   51250:	00a00034 	movhi	r2,32768
   51254:	10bfffc4 	addi	r2,r2,-1
   51258:	18800c26 	beq	r3,r2,5128c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   5125c:	e0bffd17 	ldw	r2,-12(fp)
   51260:	10c00917 	ldw	r3,36(r2)
   51264:	e0bffd17 	ldw	r2,-12(fp)
   51268:	10800117 	ldw	r2,4(r2)
   5126c:	1885803a 	cmpltu	r2,r3,r2
   51270:	10c03fcc 	andi	r3,r2,255
   51274:	e0bfff17 	ldw	r2,-4(fp)
   51278:	10c00015 	stw	r3,0(r2)
      rc = 0;
   5127c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   51280:	00000206 	br	5128c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   51284:	0001883a 	nop
   51288:	00000106 	br	51290 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   5128c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   51290:	e0bffb17 	ldw	r2,-20(fp)
}
   51294:	e037883a 	mov	sp,fp
   51298:	df000017 	ldw	fp,0(sp)
   5129c:	dec00104 	addi	sp,sp,4
   512a0:	f800283a 	ret

000512a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   512a4:	defff304 	addi	sp,sp,-52
   512a8:	dfc00c15 	stw	ra,48(sp)
   512ac:	df000b15 	stw	fp,44(sp)
   512b0:	df000b04 	addi	fp,sp,44
   512b4:	e13ffc15 	stw	r4,-16(fp)
   512b8:	e17ffd15 	stw	r5,-12(fp)
   512bc:	e1bffe15 	stw	r6,-8(fp)
   512c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   512c4:	e0bffd17 	ldw	r2,-12(fp)
   512c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   512cc:	00004706 	br	513ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   512d0:	e0bffc17 	ldw	r2,-16(fp)
   512d4:	10800a17 	ldw	r2,40(r2)
   512d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   512dc:	e0bffc17 	ldw	r2,-16(fp)
   512e0:	10800b17 	ldw	r2,44(r2)
   512e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   512e8:	e0fff717 	ldw	r3,-36(fp)
   512ec:	e0bff817 	ldw	r2,-32(fp)
   512f0:	18800536 	bltu	r3,r2,51308 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   512f4:	e0fff717 	ldw	r3,-36(fp)
   512f8:	e0bff817 	ldw	r2,-32(fp)
   512fc:	1885c83a 	sub	r2,r3,r2
   51300:	e0bff615 	stw	r2,-40(fp)
   51304:	00000406 	br	51318 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   51308:	00c20004 	movi	r3,2048
   5130c:	e0bff817 	ldw	r2,-32(fp)
   51310:	1885c83a 	sub	r2,r3,r2
   51314:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   51318:	e0bff617 	ldw	r2,-40(fp)
   5131c:	10001e26 	beq	r2,zero,51398 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   51320:	e0fffe17 	ldw	r3,-8(fp)
   51324:	e0bff617 	ldw	r2,-40(fp)
   51328:	1880022e 	bgeu	r3,r2,51334 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   5132c:	e0bffe17 	ldw	r2,-8(fp)
   51330:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   51334:	e0bffc17 	ldw	r2,-16(fp)
   51338:	10c00e04 	addi	r3,r2,56
   5133c:	e0bff817 	ldw	r2,-32(fp)
   51340:	1885883a 	add	r2,r3,r2
   51344:	e1bff617 	ldw	r6,-40(fp)
   51348:	100b883a 	mov	r5,r2
   5134c:	e13ff517 	ldw	r4,-44(fp)
   51350:	00472600 	call	47260 <memcpy>
      ptr   += n;
   51354:	e0fff517 	ldw	r3,-44(fp)
   51358:	e0bff617 	ldw	r2,-40(fp)
   5135c:	1885883a 	add	r2,r3,r2
   51360:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   51364:	e0fffe17 	ldw	r3,-8(fp)
   51368:	e0bff617 	ldw	r2,-40(fp)
   5136c:	1885c83a 	sub	r2,r3,r2
   51370:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   51374:	e0fff817 	ldw	r3,-32(fp)
   51378:	e0bff617 	ldw	r2,-40(fp)
   5137c:	1885883a 	add	r2,r3,r2
   51380:	10c1ffcc 	andi	r3,r2,2047
   51384:	e0bffc17 	ldw	r2,-16(fp)
   51388:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   5138c:	e0bffe17 	ldw	r2,-8(fp)
   51390:	00bfcf16 	blt	zero,r2,512d0 <_gp+0xffff4574>
   51394:	00000106 	br	5139c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   51398:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   5139c:	e0fff517 	ldw	r3,-44(fp)
   513a0:	e0bffd17 	ldw	r2,-12(fp)
   513a4:	1880141e 	bne	r3,r2,513f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   513a8:	e0bfff17 	ldw	r2,-4(fp)
   513ac:	1090000c 	andi	r2,r2,16384
   513b0:	1000131e 	bne	r2,zero,51400 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   513b4:	0001883a 	nop
   513b8:	e0bffc17 	ldw	r2,-16(fp)
   513bc:	10c00a17 	ldw	r3,40(r2)
   513c0:	e0bff717 	ldw	r2,-36(fp)
   513c4:	1880051e 	bne	r3,r2,513dc <altera_avalon_jtag_uart_read+0x138>
   513c8:	e0bffc17 	ldw	r2,-16(fp)
   513cc:	10c00917 	ldw	r3,36(r2)
   513d0:	e0bffc17 	ldw	r2,-16(fp)
   513d4:	10800117 	ldw	r2,4(r2)
   513d8:	18bff736 	bltu	r3,r2,513b8 <_gp+0xffff465c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   513dc:	e0bffc17 	ldw	r2,-16(fp)
   513e0:	10c00a17 	ldw	r3,40(r2)
   513e4:	e0bff717 	ldw	r2,-36(fp)
   513e8:	18800726 	beq	r3,r2,51408 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   513ec:	e0bffe17 	ldw	r2,-8(fp)
   513f0:	00bfb716 	blt	zero,r2,512d0 <_gp+0xffff4574>
   513f4:	00000506 	br	5140c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   513f8:	0001883a 	nop
   513fc:	00000306 	br	5140c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   51400:	0001883a 	nop
   51404:	00000106 	br	5140c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   51408:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   5140c:	e0fff517 	ldw	r3,-44(fp)
   51410:	e0bffd17 	ldw	r2,-12(fp)
   51414:	18801826 	beq	r3,r2,51478 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51418:	0005303a 	rdctl	r2,status
   5141c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51420:	e0fffb17 	ldw	r3,-20(fp)
   51424:	00bfff84 	movi	r2,-2
   51428:	1884703a 	and	r2,r3,r2
   5142c:	1001703a 	wrctl	status,r2
  
  return context;
   51430:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   51434:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   51438:	e0bffc17 	ldw	r2,-16(fp)
   5143c:	10800817 	ldw	r2,32(r2)
   51440:	10c00054 	ori	r3,r2,1
   51444:	e0bffc17 	ldw	r2,-16(fp)
   51448:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5144c:	e0bffc17 	ldw	r2,-16(fp)
   51450:	10800017 	ldw	r2,0(r2)
   51454:	10800104 	addi	r2,r2,4
   51458:	1007883a 	mov	r3,r2
   5145c:	e0bffc17 	ldw	r2,-16(fp)
   51460:	10800817 	ldw	r2,32(r2)
   51464:	18800035 	stwio	r2,0(r3)
   51468:	e0bffa17 	ldw	r2,-24(fp)
   5146c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51470:	e0bff917 	ldw	r2,-28(fp)
   51474:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   51478:	e0fff517 	ldw	r3,-44(fp)
   5147c:	e0bffd17 	ldw	r2,-12(fp)
   51480:	18800426 	beq	r3,r2,51494 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   51484:	e0fff517 	ldw	r3,-44(fp)
   51488:	e0bffd17 	ldw	r2,-12(fp)
   5148c:	1885c83a 	sub	r2,r3,r2
   51490:	00000606 	br	514ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   51494:	e0bfff17 	ldw	r2,-4(fp)
   51498:	1090000c 	andi	r2,r2,16384
   5149c:	10000226 	beq	r2,zero,514a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   514a0:	00bffd44 	movi	r2,-11
   514a4:	00000106 	br	514ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   514a8:	00bffec4 	movi	r2,-5
}
   514ac:	e037883a 	mov	sp,fp
   514b0:	dfc00117 	ldw	ra,4(sp)
   514b4:	df000017 	ldw	fp,0(sp)
   514b8:	dec00204 	addi	sp,sp,8
   514bc:	f800283a 	ret

000514c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   514c0:	defff304 	addi	sp,sp,-52
   514c4:	dfc00c15 	stw	ra,48(sp)
   514c8:	df000b15 	stw	fp,44(sp)
   514cc:	df000b04 	addi	fp,sp,44
   514d0:	e13ffc15 	stw	r4,-16(fp)
   514d4:	e17ffd15 	stw	r5,-12(fp)
   514d8:	e1bffe15 	stw	r6,-8(fp)
   514dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   514e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   514e4:	e0bffd17 	ldw	r2,-12(fp)
   514e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   514ec:	00003706 	br	515cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   514f0:	e0bffc17 	ldw	r2,-16(fp)
   514f4:	10800c17 	ldw	r2,48(r2)
   514f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   514fc:	e0bffc17 	ldw	r2,-16(fp)
   51500:	10800d17 	ldw	r2,52(r2)
   51504:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   51508:	e0fff917 	ldw	r3,-28(fp)
   5150c:	e0bff517 	ldw	r2,-44(fp)
   51510:	1880062e 	bgeu	r3,r2,5152c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   51514:	e0fff517 	ldw	r3,-44(fp)
   51518:	e0bff917 	ldw	r2,-28(fp)
   5151c:	1885c83a 	sub	r2,r3,r2
   51520:	10bfffc4 	addi	r2,r2,-1
   51524:	e0bff615 	stw	r2,-40(fp)
   51528:	00000b06 	br	51558 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   5152c:	e0bff517 	ldw	r2,-44(fp)
   51530:	10000526 	beq	r2,zero,51548 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   51534:	00c20004 	movi	r3,2048
   51538:	e0bff917 	ldw	r2,-28(fp)
   5153c:	1885c83a 	sub	r2,r3,r2
   51540:	e0bff615 	stw	r2,-40(fp)
   51544:	00000406 	br	51558 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   51548:	00c1ffc4 	movi	r3,2047
   5154c:	e0bff917 	ldw	r2,-28(fp)
   51550:	1885c83a 	sub	r2,r3,r2
   51554:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   51558:	e0bff617 	ldw	r2,-40(fp)
   5155c:	10001e26 	beq	r2,zero,515d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   51560:	e0fffe17 	ldw	r3,-8(fp)
   51564:	e0bff617 	ldw	r2,-40(fp)
   51568:	1880022e 	bgeu	r3,r2,51574 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   5156c:	e0bffe17 	ldw	r2,-8(fp)
   51570:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   51574:	e0bffc17 	ldw	r2,-16(fp)
   51578:	10c20e04 	addi	r3,r2,2104
   5157c:	e0bff917 	ldw	r2,-28(fp)
   51580:	1885883a 	add	r2,r3,r2
   51584:	e1bff617 	ldw	r6,-40(fp)
   51588:	e17ffd17 	ldw	r5,-12(fp)
   5158c:	1009883a 	mov	r4,r2
   51590:	00472600 	call	47260 <memcpy>
      ptr   += n;
   51594:	e0fffd17 	ldw	r3,-12(fp)
   51598:	e0bff617 	ldw	r2,-40(fp)
   5159c:	1885883a 	add	r2,r3,r2
   515a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   515a4:	e0fffe17 	ldw	r3,-8(fp)
   515a8:	e0bff617 	ldw	r2,-40(fp)
   515ac:	1885c83a 	sub	r2,r3,r2
   515b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   515b4:	e0fff917 	ldw	r3,-28(fp)
   515b8:	e0bff617 	ldw	r2,-40(fp)
   515bc:	1885883a 	add	r2,r3,r2
   515c0:	10c1ffcc 	andi	r3,r2,2047
   515c4:	e0bffc17 	ldw	r2,-16(fp)
   515c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   515cc:	e0bffe17 	ldw	r2,-8(fp)
   515d0:	00bfc716 	blt	zero,r2,514f0 <_gp+0xffff4794>
   515d4:	00000106 	br	515dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   515d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   515dc:	0005303a 	rdctl	r2,status
   515e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   515e4:	e0fffb17 	ldw	r3,-20(fp)
   515e8:	00bfff84 	movi	r2,-2
   515ec:	1884703a 	and	r2,r3,r2
   515f0:	1001703a 	wrctl	status,r2
  
  return context;
   515f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   515f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   515fc:	e0bffc17 	ldw	r2,-16(fp)
   51600:	10800817 	ldw	r2,32(r2)
   51604:	10c00094 	ori	r3,r2,2
   51608:	e0bffc17 	ldw	r2,-16(fp)
   5160c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51610:	e0bffc17 	ldw	r2,-16(fp)
   51614:	10800017 	ldw	r2,0(r2)
   51618:	10800104 	addi	r2,r2,4
   5161c:	1007883a 	mov	r3,r2
   51620:	e0bffc17 	ldw	r2,-16(fp)
   51624:	10800817 	ldw	r2,32(r2)
   51628:	18800035 	stwio	r2,0(r3)
   5162c:	e0bffa17 	ldw	r2,-24(fp)
   51630:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51634:	e0bff817 	ldw	r2,-32(fp)
   51638:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   5163c:	e0bffe17 	ldw	r2,-8(fp)
   51640:	0080100e 	bge	zero,r2,51684 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   51644:	e0bfff17 	ldw	r2,-4(fp)
   51648:	1090000c 	andi	r2,r2,16384
   5164c:	1000101e 	bne	r2,zero,51690 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   51650:	0001883a 	nop
   51654:	e0bffc17 	ldw	r2,-16(fp)
   51658:	10c00d17 	ldw	r3,52(r2)
   5165c:	e0bff517 	ldw	r2,-44(fp)
   51660:	1880051e 	bne	r3,r2,51678 <altera_avalon_jtag_uart_write+0x1b8>
   51664:	e0bffc17 	ldw	r2,-16(fp)
   51668:	10c00917 	ldw	r3,36(r2)
   5166c:	e0bffc17 	ldw	r2,-16(fp)
   51670:	10800117 	ldw	r2,4(r2)
   51674:	18bff736 	bltu	r3,r2,51654 <_gp+0xffff48f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   51678:	e0bffc17 	ldw	r2,-16(fp)
   5167c:	10800917 	ldw	r2,36(r2)
   51680:	1000051e 	bne	r2,zero,51698 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   51684:	e0bffe17 	ldw	r2,-8(fp)
   51688:	00bfd016 	blt	zero,r2,515cc <_gp+0xffff4870>
   5168c:	00000306 	br	5169c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   51690:	0001883a 	nop
   51694:	00000106 	br	5169c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   51698:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   5169c:	e0fffd17 	ldw	r3,-12(fp)
   516a0:	e0bff717 	ldw	r2,-36(fp)
   516a4:	18800426 	beq	r3,r2,516b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   516a8:	e0fffd17 	ldw	r3,-12(fp)
   516ac:	e0bff717 	ldw	r2,-36(fp)
   516b0:	1885c83a 	sub	r2,r3,r2
   516b4:	00000606 	br	516d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   516b8:	e0bfff17 	ldw	r2,-4(fp)
   516bc:	1090000c 	andi	r2,r2,16384
   516c0:	10000226 	beq	r2,zero,516cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   516c4:	00bffd44 	movi	r2,-11
   516c8:	00000106 	br	516d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   516cc:	00bffec4 	movi	r2,-5
}
   516d0:	e037883a 	mov	sp,fp
   516d4:	dfc00117 	ldw	ra,4(sp)
   516d8:	df000017 	ldw	fp,0(sp)
   516dc:	dec00204 	addi	sp,sp,8
   516e0:	f800283a 	ret

000516e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   516e4:	defff504 	addi	sp,sp,-44
   516e8:	df000a15 	stw	fp,40(sp)
   516ec:	df000a04 	addi	fp,sp,40
   516f0:	e13ffc15 	stw	r4,-16(fp)
   516f4:	e17ffd15 	stw	r5,-12(fp)
   516f8:	e1bffe15 	stw	r6,-8(fp)
   516fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   51700:	e03ff615 	stw	zero,-40(fp)
   51704:	d0a80f17 	ldw	r2,-24516(gp)
  
  if (alt_ticks_per_second ())
   51708:	10003c26 	beq	r2,zero,517fc <alt_alarm_start+0x118>
  {
    if (alarm)
   5170c:	e0bffc17 	ldw	r2,-16(fp)
   51710:	10003826 	beq	r2,zero,517f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   51714:	e0bffc17 	ldw	r2,-16(fp)
   51718:	e0fffe17 	ldw	r3,-8(fp)
   5171c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   51720:	e0bffc17 	ldw	r2,-16(fp)
   51724:	e0ffff17 	ldw	r3,-4(fp)
   51728:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5172c:	0005303a 	rdctl	r2,status
   51730:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51734:	e0fff917 	ldw	r3,-28(fp)
   51738:	00bfff84 	movi	r2,-2
   5173c:	1884703a 	and	r2,r3,r2
   51740:	1001703a 	wrctl	status,r2
  
  return context;
   51744:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   51748:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5174c:	d0a81017 	ldw	r2,-24512(gp)
      
      current_nticks = alt_nticks();
   51750:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   51754:	e0fffd17 	ldw	r3,-12(fp)
   51758:	e0bff617 	ldw	r2,-40(fp)
   5175c:	1885883a 	add	r2,r3,r2
   51760:	10c00044 	addi	r3,r2,1
   51764:	e0bffc17 	ldw	r2,-16(fp)
   51768:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   5176c:	e0bffc17 	ldw	r2,-16(fp)
   51770:	10c00217 	ldw	r3,8(r2)
   51774:	e0bff617 	ldw	r2,-40(fp)
   51778:	1880042e 	bgeu	r3,r2,5178c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   5177c:	e0bffc17 	ldw	r2,-16(fp)
   51780:	00c00044 	movi	r3,1
   51784:	10c00405 	stb	r3,16(r2)
   51788:	00000206 	br	51794 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   5178c:	e0bffc17 	ldw	r2,-16(fp)
   51790:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   51794:	e0bffc17 	ldw	r2,-16(fp)
   51798:	d0e01204 	addi	r3,gp,-32696
   5179c:	e0fffa15 	stw	r3,-24(fp)
   517a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   517a4:	e0bffb17 	ldw	r2,-20(fp)
   517a8:	e0fffa17 	ldw	r3,-24(fp)
   517ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   517b0:	e0bffa17 	ldw	r2,-24(fp)
   517b4:	10c00017 	ldw	r3,0(r2)
   517b8:	e0bffb17 	ldw	r2,-20(fp)
   517bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   517c0:	e0bffa17 	ldw	r2,-24(fp)
   517c4:	10800017 	ldw	r2,0(r2)
   517c8:	e0fffb17 	ldw	r3,-20(fp)
   517cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   517d0:	e0bffa17 	ldw	r2,-24(fp)
   517d4:	e0fffb17 	ldw	r3,-20(fp)
   517d8:	10c00015 	stw	r3,0(r2)
   517dc:	e0bff817 	ldw	r2,-32(fp)
   517e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   517e4:	e0bff717 	ldw	r2,-36(fp)
   517e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   517ec:	0005883a 	mov	r2,zero
   517f0:	00000306 	br	51800 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   517f4:	00bffa84 	movi	r2,-22
   517f8:	00000106 	br	51800 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   517fc:	00bfde84 	movi	r2,-134
  }
}
   51800:	e037883a 	mov	sp,fp
   51804:	df000017 	ldw	fp,0(sp)
   51808:	dec00104 	addi	sp,sp,4
   5180c:	f800283a 	ret

00051810 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   51810:	deffff04 	addi	sp,sp,-4
   51814:	df000015 	stw	fp,0(sp)
   51818:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5181c:	0001883a 	nop
   51820:	e037883a 	mov	sp,fp
   51824:	df000017 	ldw	fp,0(sp)
   51828:	dec00104 	addi	sp,sp,4
   5182c:	f800283a 	ret

00051830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51830:	defffe04 	addi	sp,sp,-8
   51834:	dfc00115 	stw	ra,4(sp)
   51838:	df000015 	stw	fp,0(sp)
   5183c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51840:	d0a00f17 	ldw	r2,-32708(gp)
   51844:	10000326 	beq	r2,zero,51854 <alt_get_errno+0x24>
   51848:	d0a00f17 	ldw	r2,-32708(gp)
   5184c:	103ee83a 	callr	r2
   51850:	00000106 	br	51858 <alt_get_errno+0x28>
   51854:	d0a80a04 	addi	r2,gp,-24536
}
   51858:	e037883a 	mov	sp,fp
   5185c:	dfc00117 	ldw	ra,4(sp)
   51860:	df000017 	ldw	fp,0(sp)
   51864:	dec00204 	addi	sp,sp,8
   51868:	f800283a 	ret

0005186c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   5186c:	defffa04 	addi	sp,sp,-24
   51870:	dfc00515 	stw	ra,20(sp)
   51874:	df000415 	stw	fp,16(sp)
   51878:	df000404 	addi	fp,sp,16
   5187c:	e13ffe15 	stw	r4,-8(fp)
   51880:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   51884:	e0bffe17 	ldw	r2,-8(fp)
   51888:	10000326 	beq	r2,zero,51898 <alt_dev_llist_insert+0x2c>
   5188c:	e0bffe17 	ldw	r2,-8(fp)
   51890:	10800217 	ldw	r2,8(r2)
   51894:	1000061e 	bne	r2,zero,518b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   51898:	00518300 	call	51830 <alt_get_errno>
   5189c:	1007883a 	mov	r3,r2
   518a0:	00800584 	movi	r2,22
   518a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   518a8:	00bffa84 	movi	r2,-22
   518ac:	00001306 	br	518fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   518b0:	e0bffe17 	ldw	r2,-8(fp)
   518b4:	e0ffff17 	ldw	r3,-4(fp)
   518b8:	e0fffc15 	stw	r3,-16(fp)
   518bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   518c0:	e0bffd17 	ldw	r2,-12(fp)
   518c4:	e0fffc17 	ldw	r3,-16(fp)
   518c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   518cc:	e0bffc17 	ldw	r2,-16(fp)
   518d0:	10c00017 	ldw	r3,0(r2)
   518d4:	e0bffd17 	ldw	r2,-12(fp)
   518d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   518dc:	e0bffc17 	ldw	r2,-16(fp)
   518e0:	10800017 	ldw	r2,0(r2)
   518e4:	e0fffd17 	ldw	r3,-12(fp)
   518e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   518ec:	e0bffc17 	ldw	r2,-16(fp)
   518f0:	e0fffd17 	ldw	r3,-12(fp)
   518f4:	10c00015 	stw	r3,0(r2)

  return 0;  
   518f8:	0005883a 	mov	r2,zero
}
   518fc:	e037883a 	mov	sp,fp
   51900:	dfc00117 	ldw	ra,4(sp)
   51904:	df000017 	ldw	fp,0(sp)
   51908:	dec00204 	addi	sp,sp,8
   5190c:	f800283a 	ret

00051910 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   51910:	defffd04 	addi	sp,sp,-12
   51914:	dfc00215 	stw	ra,8(sp)
   51918:	df000115 	stw	fp,4(sp)
   5191c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   51920:	00800174 	movhi	r2,5
   51924:	108a9e04 	addi	r2,r2,10872
   51928:	e0bfff15 	stw	r2,-4(fp)
   5192c:	00000606 	br	51948 <_do_ctors+0x38>
        (*ctor) (); 
   51930:	e0bfff17 	ldw	r2,-4(fp)
   51934:	10800017 	ldw	r2,0(r2)
   51938:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5193c:	e0bfff17 	ldw	r2,-4(fp)
   51940:	10bfff04 	addi	r2,r2,-4
   51944:	e0bfff15 	stw	r2,-4(fp)
   51948:	e0ffff17 	ldw	r3,-4(fp)
   5194c:	00800174 	movhi	r2,5
   51950:	108a9f04 	addi	r2,r2,10876
   51954:	18bff62e 	bgeu	r3,r2,51930 <_gp+0xffff4bd4>
        (*ctor) (); 
}
   51958:	0001883a 	nop
   5195c:	e037883a 	mov	sp,fp
   51960:	dfc00117 	ldw	ra,4(sp)
   51964:	df000017 	ldw	fp,0(sp)
   51968:	dec00204 	addi	sp,sp,8
   5196c:	f800283a 	ret

00051970 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   51970:	defffd04 	addi	sp,sp,-12
   51974:	dfc00215 	stw	ra,8(sp)
   51978:	df000115 	stw	fp,4(sp)
   5197c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   51980:	00800174 	movhi	r2,5
   51984:	108a9e04 	addi	r2,r2,10872
   51988:	e0bfff15 	stw	r2,-4(fp)
   5198c:	00000606 	br	519a8 <_do_dtors+0x38>
        (*dtor) (); 
   51990:	e0bfff17 	ldw	r2,-4(fp)
   51994:	10800017 	ldw	r2,0(r2)
   51998:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5199c:	e0bfff17 	ldw	r2,-4(fp)
   519a0:	10bfff04 	addi	r2,r2,-4
   519a4:	e0bfff15 	stw	r2,-4(fp)
   519a8:	e0ffff17 	ldw	r3,-4(fp)
   519ac:	00800174 	movhi	r2,5
   519b0:	108a9f04 	addi	r2,r2,10876
   519b4:	18bff62e 	bgeu	r3,r2,51990 <_gp+0xffff4c34>
        (*dtor) (); 
}
   519b8:	0001883a 	nop
   519bc:	e037883a 	mov	sp,fp
   519c0:	dfc00117 	ldw	ra,4(sp)
   519c4:	df000017 	ldw	fp,0(sp)
   519c8:	dec00204 	addi	sp,sp,8
   519cc:	f800283a 	ret

000519d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   519d0:	deffff04 	addi	sp,sp,-4
   519d4:	df000015 	stw	fp,0(sp)
   519d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   519dc:	0001883a 	nop
   519e0:	e037883a 	mov	sp,fp
   519e4:	df000017 	ldw	fp,0(sp)
   519e8:	dec00104 	addi	sp,sp,4
   519ec:	f800283a 	ret

000519f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   519f0:	defff904 	addi	sp,sp,-28
   519f4:	dfc00615 	stw	ra,24(sp)
   519f8:	df000515 	stw	fp,20(sp)
   519fc:	df000504 	addi	fp,sp,20
   51a00:	e13ffc15 	stw	r4,-16(fp)
   51a04:	e17ffd15 	stw	r5,-12(fp)
   51a08:	e1bffe15 	stw	r6,-8(fp)
   51a0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   51a10:	e0800217 	ldw	r2,8(fp)
   51a14:	d8800015 	stw	r2,0(sp)
   51a18:	e1ffff17 	ldw	r7,-4(fp)
   51a1c:	e1bffe17 	ldw	r6,-8(fp)
   51a20:	e17ffd17 	ldw	r5,-12(fp)
   51a24:	e13ffc17 	ldw	r4,-16(fp)
   51a28:	0051ba00 	call	51ba0 <alt_iic_isr_register>
}  
   51a2c:	e037883a 	mov	sp,fp
   51a30:	dfc00117 	ldw	ra,4(sp)
   51a34:	df000017 	ldw	fp,0(sp)
   51a38:	dec00204 	addi	sp,sp,8
   51a3c:	f800283a 	ret

00051a40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   51a40:	defff904 	addi	sp,sp,-28
   51a44:	df000615 	stw	fp,24(sp)
   51a48:	df000604 	addi	fp,sp,24
   51a4c:	e13ffe15 	stw	r4,-8(fp)
   51a50:	e17fff15 	stw	r5,-4(fp)
   51a54:	e0bfff17 	ldw	r2,-4(fp)
   51a58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51a5c:	0005303a 	rdctl	r2,status
   51a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51a64:	e0fffb17 	ldw	r3,-20(fp)
   51a68:	00bfff84 	movi	r2,-2
   51a6c:	1884703a 	and	r2,r3,r2
   51a70:	1001703a 	wrctl	status,r2
  
  return context;
   51a74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   51a78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   51a7c:	00c00044 	movi	r3,1
   51a80:	e0bffa17 	ldw	r2,-24(fp)
   51a84:	1884983a 	sll	r2,r3,r2
   51a88:	1007883a 	mov	r3,r2
   51a8c:	d0a80e17 	ldw	r2,-24520(gp)
   51a90:	1884b03a 	or	r2,r3,r2
   51a94:	d0a80e15 	stw	r2,-24520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   51a98:	d0a80e17 	ldw	r2,-24520(gp)
   51a9c:	100170fa 	wrctl	ienable,r2
   51aa0:	e0bffc17 	ldw	r2,-16(fp)
   51aa4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51aa8:	e0bffd17 	ldw	r2,-12(fp)
   51aac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   51ab0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   51ab4:	0001883a 	nop
}
   51ab8:	e037883a 	mov	sp,fp
   51abc:	df000017 	ldw	fp,0(sp)
   51ac0:	dec00104 	addi	sp,sp,4
   51ac4:	f800283a 	ret

00051ac8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   51ac8:	defff904 	addi	sp,sp,-28
   51acc:	df000615 	stw	fp,24(sp)
   51ad0:	df000604 	addi	fp,sp,24
   51ad4:	e13ffe15 	stw	r4,-8(fp)
   51ad8:	e17fff15 	stw	r5,-4(fp)
   51adc:	e0bfff17 	ldw	r2,-4(fp)
   51ae0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51ae4:	0005303a 	rdctl	r2,status
   51ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51aec:	e0fffb17 	ldw	r3,-20(fp)
   51af0:	00bfff84 	movi	r2,-2
   51af4:	1884703a 	and	r2,r3,r2
   51af8:	1001703a 	wrctl	status,r2
  
  return context;
   51afc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   51b00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   51b04:	00c00044 	movi	r3,1
   51b08:	e0bffa17 	ldw	r2,-24(fp)
   51b0c:	1884983a 	sll	r2,r3,r2
   51b10:	0084303a 	nor	r2,zero,r2
   51b14:	1007883a 	mov	r3,r2
   51b18:	d0a80e17 	ldw	r2,-24520(gp)
   51b1c:	1884703a 	and	r2,r3,r2
   51b20:	d0a80e15 	stw	r2,-24520(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   51b24:	d0a80e17 	ldw	r2,-24520(gp)
   51b28:	100170fa 	wrctl	ienable,r2
   51b2c:	e0bffc17 	ldw	r2,-16(fp)
   51b30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51b34:	e0bffd17 	ldw	r2,-12(fp)
   51b38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   51b3c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   51b40:	0001883a 	nop
}
   51b44:	e037883a 	mov	sp,fp
   51b48:	df000017 	ldw	fp,0(sp)
   51b4c:	dec00104 	addi	sp,sp,4
   51b50:	f800283a 	ret

00051b54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   51b54:	defffc04 	addi	sp,sp,-16
   51b58:	df000315 	stw	fp,12(sp)
   51b5c:	df000304 	addi	fp,sp,12
   51b60:	e13ffe15 	stw	r4,-8(fp)
   51b64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   51b68:	000530fa 	rdctl	r2,ienable
   51b6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   51b70:	00c00044 	movi	r3,1
   51b74:	e0bfff17 	ldw	r2,-4(fp)
   51b78:	1884983a 	sll	r2,r3,r2
   51b7c:	1007883a 	mov	r3,r2
   51b80:	e0bffd17 	ldw	r2,-12(fp)
   51b84:	1884703a 	and	r2,r3,r2
   51b88:	1004c03a 	cmpne	r2,r2,zero
   51b8c:	10803fcc 	andi	r2,r2,255
}
   51b90:	e037883a 	mov	sp,fp
   51b94:	df000017 	ldw	fp,0(sp)
   51b98:	dec00104 	addi	sp,sp,4
   51b9c:	f800283a 	ret

00051ba0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   51ba0:	defff504 	addi	sp,sp,-44
   51ba4:	dfc00a15 	stw	ra,40(sp)
   51ba8:	df000915 	stw	fp,36(sp)
   51bac:	df000904 	addi	fp,sp,36
   51bb0:	e13ffc15 	stw	r4,-16(fp)
   51bb4:	e17ffd15 	stw	r5,-12(fp)
   51bb8:	e1bffe15 	stw	r6,-8(fp)
   51bbc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   51bc0:	00bffa84 	movi	r2,-22
   51bc4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   51bc8:	e0bffd17 	ldw	r2,-12(fp)
   51bcc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   51bd0:	e0bff817 	ldw	r2,-32(fp)
   51bd4:	10800808 	cmpgei	r2,r2,32
   51bd8:	1000271e 	bne	r2,zero,51c78 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51bdc:	0005303a 	rdctl	r2,status
   51be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51be4:	e0fffb17 	ldw	r3,-20(fp)
   51be8:	00bfff84 	movi	r2,-2
   51bec:	1884703a 	and	r2,r3,r2
   51bf0:	1001703a 	wrctl	status,r2
  
  return context;
   51bf4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   51bf8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   51bfc:	00800174 	movhi	r2,5
   51c00:	109b7404 	addi	r2,r2,28112
   51c04:	e0fff817 	ldw	r3,-32(fp)
   51c08:	180690fa 	slli	r3,r3,3
   51c0c:	10c5883a 	add	r2,r2,r3
   51c10:	e0fffe17 	ldw	r3,-8(fp)
   51c14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   51c18:	00800174 	movhi	r2,5
   51c1c:	109b7404 	addi	r2,r2,28112
   51c20:	e0fff817 	ldw	r3,-32(fp)
   51c24:	180690fa 	slli	r3,r3,3
   51c28:	10c5883a 	add	r2,r2,r3
   51c2c:	10800104 	addi	r2,r2,4
   51c30:	e0ffff17 	ldw	r3,-4(fp)
   51c34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   51c38:	e0bffe17 	ldw	r2,-8(fp)
   51c3c:	10000526 	beq	r2,zero,51c54 <alt_iic_isr_register+0xb4>
   51c40:	e0bff817 	ldw	r2,-32(fp)
   51c44:	100b883a 	mov	r5,r2
   51c48:	e13ffc17 	ldw	r4,-16(fp)
   51c4c:	0051a400 	call	51a40 <alt_ic_irq_enable>
   51c50:	00000406 	br	51c64 <alt_iic_isr_register+0xc4>
   51c54:	e0bff817 	ldw	r2,-32(fp)
   51c58:	100b883a 	mov	r5,r2
   51c5c:	e13ffc17 	ldw	r4,-16(fp)
   51c60:	0051ac80 	call	51ac8 <alt_ic_irq_disable>
   51c64:	e0bff715 	stw	r2,-36(fp)
   51c68:	e0bffa17 	ldw	r2,-24(fp)
   51c6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51c70:	e0bff917 	ldw	r2,-28(fp)
   51c74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   51c78:	e0bff717 	ldw	r2,-36(fp)
}
   51c7c:	e037883a 	mov	sp,fp
   51c80:	dfc00117 	ldw	ra,4(sp)
   51c84:	df000017 	ldw	fp,0(sp)
   51c88:	dec00204 	addi	sp,sp,8
   51c8c:	f800283a 	ret

00051c90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   51c90:	defff804 	addi	sp,sp,-32
   51c94:	dfc00715 	stw	ra,28(sp)
   51c98:	df000615 	stw	fp,24(sp)
   51c9c:	dc000515 	stw	r16,20(sp)
   51ca0:	df000604 	addi	fp,sp,24
   51ca4:	e13ffb15 	stw	r4,-20(fp)
   51ca8:	e17ffc15 	stw	r5,-16(fp)
   51cac:	e1bffd15 	stw	r6,-12(fp)
   51cb0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   51cb4:	e1bffe17 	ldw	r6,-8(fp)
   51cb8:	e17ffd17 	ldw	r5,-12(fp)
   51cbc:	e13ffc17 	ldw	r4,-16(fp)
   51cc0:	0051f180 	call	51f18 <open>
   51cc4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   51cc8:	e0bffa17 	ldw	r2,-24(fp)
   51ccc:	10002216 	blt	r2,zero,51d58 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   51cd0:	04000174 	movhi	r16,5
   51cd4:	840edf04 	addi	r16,r16,15228
   51cd8:	e0bffa17 	ldw	r2,-24(fp)
   51cdc:	01400304 	movi	r5,12
   51ce0:	1009883a 	mov	r4,r2
   51ce4:	004d9680 	call	4d968 <__mulsi3>
   51ce8:	8085883a 	add	r2,r16,r2
   51cec:	10c00017 	ldw	r3,0(r2)
   51cf0:	e0bffb17 	ldw	r2,-20(fp)
   51cf4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   51cf8:	04000174 	movhi	r16,5
   51cfc:	840edf04 	addi	r16,r16,15228
   51d00:	e0bffa17 	ldw	r2,-24(fp)
   51d04:	01400304 	movi	r5,12
   51d08:	1009883a 	mov	r4,r2
   51d0c:	004d9680 	call	4d968 <__mulsi3>
   51d10:	8085883a 	add	r2,r16,r2
   51d14:	10800104 	addi	r2,r2,4
   51d18:	10c00017 	ldw	r3,0(r2)
   51d1c:	e0bffb17 	ldw	r2,-20(fp)
   51d20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   51d24:	04000174 	movhi	r16,5
   51d28:	840edf04 	addi	r16,r16,15228
   51d2c:	e0bffa17 	ldw	r2,-24(fp)
   51d30:	01400304 	movi	r5,12
   51d34:	1009883a 	mov	r4,r2
   51d38:	004d9680 	call	4d968 <__mulsi3>
   51d3c:	8085883a 	add	r2,r16,r2
   51d40:	10800204 	addi	r2,r2,8
   51d44:	10c00017 	ldw	r3,0(r2)
   51d48:	e0bffb17 	ldw	r2,-20(fp)
   51d4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   51d50:	e13ffa17 	ldw	r4,-24(fp)
   51d54:	00509580 	call	50958 <alt_release_fd>
  }
} 
   51d58:	0001883a 	nop
   51d5c:	e6ffff04 	addi	sp,fp,-4
   51d60:	dfc00217 	ldw	ra,8(sp)
   51d64:	df000117 	ldw	fp,4(sp)
   51d68:	dc000017 	ldw	r16,0(sp)
   51d6c:	dec00304 	addi	sp,sp,12
   51d70:	f800283a 	ret

00051d74 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   51d74:	defffb04 	addi	sp,sp,-20
   51d78:	dfc00415 	stw	ra,16(sp)
   51d7c:	df000315 	stw	fp,12(sp)
   51d80:	df000304 	addi	fp,sp,12
   51d84:	e13ffd15 	stw	r4,-12(fp)
   51d88:	e17ffe15 	stw	r5,-8(fp)
   51d8c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   51d90:	01c07fc4 	movi	r7,511
   51d94:	01800044 	movi	r6,1
   51d98:	e17ffd17 	ldw	r5,-12(fp)
   51d9c:	01000174 	movhi	r4,5
   51da0:	210ee204 	addi	r4,r4,15240
   51da4:	0051c900 	call	51c90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   51da8:	01c07fc4 	movi	r7,511
   51dac:	000d883a 	mov	r6,zero
   51db0:	e17ffe17 	ldw	r5,-8(fp)
   51db4:	01000174 	movhi	r4,5
   51db8:	210edf04 	addi	r4,r4,15228
   51dbc:	0051c900 	call	51c90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   51dc0:	01c07fc4 	movi	r7,511
   51dc4:	01800044 	movi	r6,1
   51dc8:	e17fff17 	ldw	r5,-4(fp)
   51dcc:	01000174 	movhi	r4,5
   51dd0:	210ee504 	addi	r4,r4,15252
   51dd4:	0051c900 	call	51c90 <alt_open_fd>
}  
   51dd8:	0001883a 	nop
   51ddc:	e037883a 	mov	sp,fp
   51de0:	dfc00117 	ldw	ra,4(sp)
   51de4:	df000017 	ldw	fp,0(sp)
   51de8:	dec00204 	addi	sp,sp,8
   51dec:	f800283a 	ret

00051df0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51df0:	defffe04 	addi	sp,sp,-8
   51df4:	dfc00115 	stw	ra,4(sp)
   51df8:	df000015 	stw	fp,0(sp)
   51dfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51e00:	d0a00f17 	ldw	r2,-32708(gp)
   51e04:	10000326 	beq	r2,zero,51e14 <alt_get_errno+0x24>
   51e08:	d0a00f17 	ldw	r2,-32708(gp)
   51e0c:	103ee83a 	callr	r2
   51e10:	00000106 	br	51e18 <alt_get_errno+0x28>
   51e14:	d0a80a04 	addi	r2,gp,-24536
}
   51e18:	e037883a 	mov	sp,fp
   51e1c:	dfc00117 	ldw	ra,4(sp)
   51e20:	df000017 	ldw	fp,0(sp)
   51e24:	dec00204 	addi	sp,sp,8
   51e28:	f800283a 	ret

00051e2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   51e2c:	defffb04 	addi	sp,sp,-20
   51e30:	dfc00415 	stw	ra,16(sp)
   51e34:	df000315 	stw	fp,12(sp)
   51e38:	dc000215 	stw	r16,8(sp)
   51e3c:	df000304 	addi	fp,sp,12
   51e40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   51e44:	e0bffe17 	ldw	r2,-8(fp)
   51e48:	10800217 	ldw	r2,8(r2)
   51e4c:	10d00034 	orhi	r3,r2,16384
   51e50:	e0bffe17 	ldw	r2,-8(fp)
   51e54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51e58:	e03ffd15 	stw	zero,-12(fp)
   51e5c:	00002306 	br	51eec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51e60:	04000174 	movhi	r16,5
   51e64:	840edf04 	addi	r16,r16,15228
   51e68:	e0bffd17 	ldw	r2,-12(fp)
   51e6c:	01400304 	movi	r5,12
   51e70:	1009883a 	mov	r4,r2
   51e74:	004d9680 	call	4d968 <__mulsi3>
   51e78:	8085883a 	add	r2,r16,r2
   51e7c:	10c00017 	ldw	r3,0(r2)
   51e80:	e0bffe17 	ldw	r2,-8(fp)
   51e84:	10800017 	ldw	r2,0(r2)
   51e88:	1880151e 	bne	r3,r2,51ee0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51e8c:	04000174 	movhi	r16,5
   51e90:	840edf04 	addi	r16,r16,15228
   51e94:	e0bffd17 	ldw	r2,-12(fp)
   51e98:	01400304 	movi	r5,12
   51e9c:	1009883a 	mov	r4,r2
   51ea0:	004d9680 	call	4d968 <__mulsi3>
   51ea4:	8085883a 	add	r2,r16,r2
   51ea8:	10800204 	addi	r2,r2,8
   51eac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   51eb0:	10000b0e 	bge	r2,zero,51ee0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   51eb4:	01400304 	movi	r5,12
   51eb8:	e13ffd17 	ldw	r4,-12(fp)
   51ebc:	004d9680 	call	4d968 <__mulsi3>
   51ec0:	1007883a 	mov	r3,r2
   51ec4:	00800174 	movhi	r2,5
   51ec8:	108edf04 	addi	r2,r2,15228
   51ecc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   51ed0:	e0bffe17 	ldw	r2,-8(fp)
   51ed4:	18800226 	beq	r3,r2,51ee0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   51ed8:	00bffcc4 	movi	r2,-13
   51edc:	00000806 	br	51f00 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   51ee0:	e0bffd17 	ldw	r2,-12(fp)
   51ee4:	10800044 	addi	r2,r2,1
   51ee8:	e0bffd15 	stw	r2,-12(fp)
   51eec:	d0a00e17 	ldw	r2,-32712(gp)
   51ef0:	1007883a 	mov	r3,r2
   51ef4:	e0bffd17 	ldw	r2,-12(fp)
   51ef8:	18bfd92e 	bgeu	r3,r2,51e60 <_gp+0xffff5104>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   51efc:	0005883a 	mov	r2,zero
}
   51f00:	e6ffff04 	addi	sp,fp,-4
   51f04:	dfc00217 	ldw	ra,8(sp)
   51f08:	df000117 	ldw	fp,4(sp)
   51f0c:	dc000017 	ldw	r16,0(sp)
   51f10:	dec00304 	addi	sp,sp,12
   51f14:	f800283a 	ret

00051f18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   51f18:	defff604 	addi	sp,sp,-40
   51f1c:	dfc00915 	stw	ra,36(sp)
   51f20:	df000815 	stw	fp,32(sp)
   51f24:	df000804 	addi	fp,sp,32
   51f28:	e13ffd15 	stw	r4,-12(fp)
   51f2c:	e17ffe15 	stw	r5,-8(fp)
   51f30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   51f34:	00bfffc4 	movi	r2,-1
   51f38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   51f3c:	00bffb44 	movi	r2,-19
   51f40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   51f44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   51f48:	d1600c04 	addi	r5,gp,-32720
   51f4c:	e13ffd17 	ldw	r4,-12(fp)
   51f50:	005223c0 	call	5223c <alt_find_dev>
   51f54:	e0bff815 	stw	r2,-32(fp)
   51f58:	e0bff817 	ldw	r2,-32(fp)
   51f5c:	1000051e 	bne	r2,zero,51f74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   51f60:	e13ffd17 	ldw	r4,-12(fp)
   51f64:	00522cc0 	call	522cc <alt_find_file>
   51f68:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   51f6c:	00800044 	movi	r2,1
   51f70:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   51f74:	e0bff817 	ldw	r2,-32(fp)
   51f78:	10002b26 	beq	r2,zero,52028 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   51f7c:	e13ff817 	ldw	r4,-32(fp)
   51f80:	00523d40 	call	523d4 <alt_get_fd>
   51f84:	e0bff915 	stw	r2,-28(fp)
   51f88:	e0bff917 	ldw	r2,-28(fp)
   51f8c:	1000030e 	bge	r2,zero,51f9c <open+0x84>
    {
      status = index;
   51f90:	e0bff917 	ldw	r2,-28(fp)
   51f94:	e0bffa15 	stw	r2,-24(fp)
   51f98:	00002506 	br	52030 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   51f9c:	01400304 	movi	r5,12
   51fa0:	e13ff917 	ldw	r4,-28(fp)
   51fa4:	004d9680 	call	4d968 <__mulsi3>
   51fa8:	1007883a 	mov	r3,r2
   51fac:	00800174 	movhi	r2,5
   51fb0:	108edf04 	addi	r2,r2,15228
   51fb4:	1885883a 	add	r2,r3,r2
   51fb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   51fbc:	e0fffe17 	ldw	r3,-8(fp)
   51fc0:	00900034 	movhi	r2,16384
   51fc4:	10bfffc4 	addi	r2,r2,-1
   51fc8:	1886703a 	and	r3,r3,r2
   51fcc:	e0bffc17 	ldw	r2,-16(fp)
   51fd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   51fd4:	e0bffb17 	ldw	r2,-20(fp)
   51fd8:	1000051e 	bne	r2,zero,51ff0 <open+0xd8>
   51fdc:	e13ffc17 	ldw	r4,-16(fp)
   51fe0:	0051e2c0 	call	51e2c <alt_file_locked>
   51fe4:	e0bffa15 	stw	r2,-24(fp)
   51fe8:	e0bffa17 	ldw	r2,-24(fp)
   51fec:	10001016 	blt	r2,zero,52030 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   51ff0:	e0bff817 	ldw	r2,-32(fp)
   51ff4:	10800317 	ldw	r2,12(r2)
   51ff8:	10000826 	beq	r2,zero,5201c <open+0x104>
   51ffc:	e0bff817 	ldw	r2,-32(fp)
   52000:	10800317 	ldw	r2,12(r2)
   52004:	e1ffff17 	ldw	r7,-4(fp)
   52008:	e1bffe17 	ldw	r6,-8(fp)
   5200c:	e17ffd17 	ldw	r5,-12(fp)
   52010:	e13ffc17 	ldw	r4,-16(fp)
   52014:	103ee83a 	callr	r2
   52018:	00000106 	br	52020 <open+0x108>
   5201c:	0005883a 	mov	r2,zero
   52020:	e0bffa15 	stw	r2,-24(fp)
   52024:	00000206 	br	52030 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   52028:	00bffb44 	movi	r2,-19
   5202c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   52030:	e0bffa17 	ldw	r2,-24(fp)
   52034:	1000090e 	bge	r2,zero,5205c <open+0x144>
  {
    alt_release_fd (index);  
   52038:	e13ff917 	ldw	r4,-28(fp)
   5203c:	00509580 	call	50958 <alt_release_fd>
    ALT_ERRNO = -status;
   52040:	0051df00 	call	51df0 <alt_get_errno>
   52044:	1007883a 	mov	r3,r2
   52048:	e0bffa17 	ldw	r2,-24(fp)
   5204c:	0085c83a 	sub	r2,zero,r2
   52050:	18800015 	stw	r2,0(r3)
    return -1;
   52054:	00bfffc4 	movi	r2,-1
   52058:	00000106 	br	52060 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   5205c:	e0bff917 	ldw	r2,-28(fp)
}
   52060:	e037883a 	mov	sp,fp
   52064:	dfc00117 	ldw	ra,4(sp)
   52068:	df000017 	ldw	fp,0(sp)
   5206c:	dec00204 	addi	sp,sp,8
   52070:	f800283a 	ret

00052074 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   52074:	defffa04 	addi	sp,sp,-24
   52078:	df000515 	stw	fp,20(sp)
   5207c:	df000504 	addi	fp,sp,20
   52080:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52084:	0005303a 	rdctl	r2,status
   52088:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5208c:	e0fffc17 	ldw	r3,-16(fp)
   52090:	00bfff84 	movi	r2,-2
   52094:	1884703a 	and	r2,r3,r2
   52098:	1001703a 	wrctl	status,r2
  
  return context;
   5209c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   520a0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   520a4:	e0bfff17 	ldw	r2,-4(fp)
   520a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   520ac:	e0bffd17 	ldw	r2,-12(fp)
   520b0:	10800017 	ldw	r2,0(r2)
   520b4:	e0fffd17 	ldw	r3,-12(fp)
   520b8:	18c00117 	ldw	r3,4(r3)
   520bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   520c0:	e0bffd17 	ldw	r2,-12(fp)
   520c4:	10800117 	ldw	r2,4(r2)
   520c8:	e0fffd17 	ldw	r3,-12(fp)
   520cc:	18c00017 	ldw	r3,0(r3)
   520d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   520d4:	e0bffd17 	ldw	r2,-12(fp)
   520d8:	e0fffd17 	ldw	r3,-12(fp)
   520dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   520e0:	e0bffd17 	ldw	r2,-12(fp)
   520e4:	e0fffd17 	ldw	r3,-12(fp)
   520e8:	10c00015 	stw	r3,0(r2)
   520ec:	e0bffb17 	ldw	r2,-20(fp)
   520f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   520f4:	e0bffe17 	ldw	r2,-8(fp)
   520f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   520fc:	0001883a 	nop
   52100:	e037883a 	mov	sp,fp
   52104:	df000017 	ldw	fp,0(sp)
   52108:	dec00104 	addi	sp,sp,4
   5210c:	f800283a 	ret

00052110 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   52110:	defffb04 	addi	sp,sp,-20
   52114:	dfc00415 	stw	ra,16(sp)
   52118:	df000315 	stw	fp,12(sp)
   5211c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   52120:	d0a01217 	ldw	r2,-32696(gp)
   52124:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   52128:	d0a81017 	ldw	r2,-24512(gp)
   5212c:	10800044 	addi	r2,r2,1
   52130:	d0a81015 	stw	r2,-24512(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   52134:	00002e06 	br	521f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   52138:	e0bffd17 	ldw	r2,-12(fp)
   5213c:	10800017 	ldw	r2,0(r2)
   52140:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   52144:	e0bffd17 	ldw	r2,-12(fp)
   52148:	10800403 	ldbu	r2,16(r2)
   5214c:	10803fcc 	andi	r2,r2,255
   52150:	10000426 	beq	r2,zero,52164 <alt_tick+0x54>
   52154:	d0a81017 	ldw	r2,-24512(gp)
   52158:	1000021e 	bne	r2,zero,52164 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   5215c:	e0bffd17 	ldw	r2,-12(fp)
   52160:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   52164:	e0bffd17 	ldw	r2,-12(fp)
   52168:	10800217 	ldw	r2,8(r2)
   5216c:	d0e81017 	ldw	r3,-24512(gp)
   52170:	18801d36 	bltu	r3,r2,521e8 <alt_tick+0xd8>
   52174:	e0bffd17 	ldw	r2,-12(fp)
   52178:	10800403 	ldbu	r2,16(r2)
   5217c:	10803fcc 	andi	r2,r2,255
   52180:	1000191e 	bne	r2,zero,521e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   52184:	e0bffd17 	ldw	r2,-12(fp)
   52188:	10800317 	ldw	r2,12(r2)
   5218c:	e0fffd17 	ldw	r3,-12(fp)
   52190:	18c00517 	ldw	r3,20(r3)
   52194:	1809883a 	mov	r4,r3
   52198:	103ee83a 	callr	r2
   5219c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   521a0:	e0bfff17 	ldw	r2,-4(fp)
   521a4:	1000031e 	bne	r2,zero,521b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   521a8:	e13ffd17 	ldw	r4,-12(fp)
   521ac:	00520740 	call	52074 <alt_alarm_stop>
   521b0:	00000d06 	br	521e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   521b4:	e0bffd17 	ldw	r2,-12(fp)
   521b8:	10c00217 	ldw	r3,8(r2)
   521bc:	e0bfff17 	ldw	r2,-4(fp)
   521c0:	1887883a 	add	r3,r3,r2
   521c4:	e0bffd17 	ldw	r2,-12(fp)
   521c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   521cc:	e0bffd17 	ldw	r2,-12(fp)
   521d0:	10c00217 	ldw	r3,8(r2)
   521d4:	d0a81017 	ldw	r2,-24512(gp)
   521d8:	1880032e 	bgeu	r3,r2,521e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   521dc:	e0bffd17 	ldw	r2,-12(fp)
   521e0:	00c00044 	movi	r3,1
   521e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   521e8:	e0bffe17 	ldw	r2,-8(fp)
   521ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   521f0:	e0fffd17 	ldw	r3,-12(fp)
   521f4:	d0a01204 	addi	r2,gp,-32696
   521f8:	18bfcf1e 	bne	r3,r2,52138 <_gp+0xffff53dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   521fc:	0001883a 	nop
}
   52200:	0001883a 	nop
   52204:	e037883a 	mov	sp,fp
   52208:	dfc00117 	ldw	ra,4(sp)
   5220c:	df000017 	ldw	fp,0(sp)
   52210:	dec00204 	addi	sp,sp,8
   52214:	f800283a 	ret

00052218 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   52218:	deffff04 	addi	sp,sp,-4
   5221c:	df000015 	stw	fp,0(sp)
   52220:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   52224:	000170fa 	wrctl	ienable,zero
}
   52228:	0001883a 	nop
   5222c:	e037883a 	mov	sp,fp
   52230:	df000017 	ldw	fp,0(sp)
   52234:	dec00104 	addi	sp,sp,4
   52238:	f800283a 	ret

0005223c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   5223c:	defffa04 	addi	sp,sp,-24
   52240:	dfc00515 	stw	ra,20(sp)
   52244:	df000415 	stw	fp,16(sp)
   52248:	df000404 	addi	fp,sp,16
   5224c:	e13ffe15 	stw	r4,-8(fp)
   52250:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   52254:	e0bfff17 	ldw	r2,-4(fp)
   52258:	10800017 	ldw	r2,0(r2)
   5225c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   52260:	e13ffe17 	ldw	r4,-8(fp)
   52264:	00495740 	call	49574 <strlen>
   52268:	10800044 	addi	r2,r2,1
   5226c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   52270:	00000d06 	br	522a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   52274:	e0bffc17 	ldw	r2,-16(fp)
   52278:	10800217 	ldw	r2,8(r2)
   5227c:	e0fffd17 	ldw	r3,-12(fp)
   52280:	180d883a 	mov	r6,r3
   52284:	e17ffe17 	ldw	r5,-8(fp)
   52288:	1009883a 	mov	r4,r2
   5228c:	00525b80 	call	525b8 <memcmp>
   52290:	1000021e 	bne	r2,zero,5229c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   52294:	e0bffc17 	ldw	r2,-16(fp)
   52298:	00000706 	br	522b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   5229c:	e0bffc17 	ldw	r2,-16(fp)
   522a0:	10800017 	ldw	r2,0(r2)
   522a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   522a8:	e0fffc17 	ldw	r3,-16(fp)
   522ac:	e0bfff17 	ldw	r2,-4(fp)
   522b0:	18bff01e 	bne	r3,r2,52274 <_gp+0xffff5518>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   522b4:	0005883a 	mov	r2,zero
}
   522b8:	e037883a 	mov	sp,fp
   522bc:	dfc00117 	ldw	ra,4(sp)
   522c0:	df000017 	ldw	fp,0(sp)
   522c4:	dec00204 	addi	sp,sp,8
   522c8:	f800283a 	ret

000522cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   522cc:	defffb04 	addi	sp,sp,-20
   522d0:	dfc00415 	stw	ra,16(sp)
   522d4:	df000315 	stw	fp,12(sp)
   522d8:	df000304 	addi	fp,sp,12
   522dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   522e0:	d0a00a17 	ldw	r2,-32728(gp)
   522e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   522e8:	00003106 	br	523b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   522ec:	e0bffd17 	ldw	r2,-12(fp)
   522f0:	10800217 	ldw	r2,8(r2)
   522f4:	1009883a 	mov	r4,r2
   522f8:	00495740 	call	49574 <strlen>
   522fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   52300:	e0bffd17 	ldw	r2,-12(fp)
   52304:	10c00217 	ldw	r3,8(r2)
   52308:	e0bffe17 	ldw	r2,-8(fp)
   5230c:	10bfffc4 	addi	r2,r2,-1
   52310:	1885883a 	add	r2,r3,r2
   52314:	10800003 	ldbu	r2,0(r2)
   52318:	10803fcc 	andi	r2,r2,255
   5231c:	1080201c 	xori	r2,r2,128
   52320:	10bfe004 	addi	r2,r2,-128
   52324:	10800bd8 	cmpnei	r2,r2,47
   52328:	1000031e 	bne	r2,zero,52338 <alt_find_file+0x6c>
    {
      len -= 1;
   5232c:	e0bffe17 	ldw	r2,-8(fp)
   52330:	10bfffc4 	addi	r2,r2,-1
   52334:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   52338:	e0bffe17 	ldw	r2,-8(fp)
   5233c:	e0ffff17 	ldw	r3,-4(fp)
   52340:	1885883a 	add	r2,r3,r2
   52344:	10800003 	ldbu	r2,0(r2)
   52348:	10803fcc 	andi	r2,r2,255
   5234c:	1080201c 	xori	r2,r2,128
   52350:	10bfe004 	addi	r2,r2,-128
   52354:	10800be0 	cmpeqi	r2,r2,47
   52358:	1000081e 	bne	r2,zero,5237c <alt_find_file+0xb0>
   5235c:	e0bffe17 	ldw	r2,-8(fp)
   52360:	e0ffff17 	ldw	r3,-4(fp)
   52364:	1885883a 	add	r2,r3,r2
   52368:	10800003 	ldbu	r2,0(r2)
   5236c:	10803fcc 	andi	r2,r2,255
   52370:	1080201c 	xori	r2,r2,128
   52374:	10bfe004 	addi	r2,r2,-128
   52378:	10000a1e 	bne	r2,zero,523a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   5237c:	e0bffd17 	ldw	r2,-12(fp)
   52380:	10800217 	ldw	r2,8(r2)
   52384:	e0fffe17 	ldw	r3,-8(fp)
   52388:	180d883a 	mov	r6,r3
   5238c:	e17fff17 	ldw	r5,-4(fp)
   52390:	1009883a 	mov	r4,r2
   52394:	00525b80 	call	525b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   52398:	1000021e 	bne	r2,zero,523a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   5239c:	e0bffd17 	ldw	r2,-12(fp)
   523a0:	00000706 	br	523c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   523a4:	e0bffd17 	ldw	r2,-12(fp)
   523a8:	10800017 	ldw	r2,0(r2)
   523ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   523b0:	e0fffd17 	ldw	r3,-12(fp)
   523b4:	d0a00a04 	addi	r2,gp,-32728
   523b8:	18bfcc1e 	bne	r3,r2,522ec <_gp+0xffff5590>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   523bc:	0005883a 	mov	r2,zero
}
   523c0:	e037883a 	mov	sp,fp
   523c4:	dfc00117 	ldw	ra,4(sp)
   523c8:	df000017 	ldw	fp,0(sp)
   523cc:	dec00204 	addi	sp,sp,8
   523d0:	f800283a 	ret

000523d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   523d4:	defffa04 	addi	sp,sp,-24
   523d8:	dfc00515 	stw	ra,20(sp)
   523dc:	df000415 	stw	fp,16(sp)
   523e0:	dc000315 	stw	r16,12(sp)
   523e4:	df000404 	addi	fp,sp,16
   523e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   523ec:	00bffa04 	movi	r2,-24
   523f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   523f4:	e03ffc15 	stw	zero,-16(fp)
   523f8:	00001d06 	br	52470 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   523fc:	04000174 	movhi	r16,5
   52400:	840edf04 	addi	r16,r16,15228
   52404:	e0bffc17 	ldw	r2,-16(fp)
   52408:	01400304 	movi	r5,12
   5240c:	1009883a 	mov	r4,r2
   52410:	004d9680 	call	4d968 <__mulsi3>
   52414:	8085883a 	add	r2,r16,r2
   52418:	10800017 	ldw	r2,0(r2)
   5241c:	1000111e 	bne	r2,zero,52464 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   52420:	04000174 	movhi	r16,5
   52424:	840edf04 	addi	r16,r16,15228
   52428:	e0bffc17 	ldw	r2,-16(fp)
   5242c:	01400304 	movi	r5,12
   52430:	1009883a 	mov	r4,r2
   52434:	004d9680 	call	4d968 <__mulsi3>
   52438:	8085883a 	add	r2,r16,r2
   5243c:	e0fffe17 	ldw	r3,-8(fp)
   52440:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   52444:	d0e00e17 	ldw	r3,-32712(gp)
   52448:	e0bffc17 	ldw	r2,-16(fp)
   5244c:	1880020e 	bge	r3,r2,52458 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   52450:	e0bffc17 	ldw	r2,-16(fp)
   52454:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   52458:	e0bffc17 	ldw	r2,-16(fp)
   5245c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   52460:	00000606 	br	5247c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   52464:	e0bffc17 	ldw	r2,-16(fp)
   52468:	10800044 	addi	r2,r2,1
   5246c:	e0bffc15 	stw	r2,-16(fp)
   52470:	e0bffc17 	ldw	r2,-16(fp)
   52474:	10800810 	cmplti	r2,r2,32
   52478:	103fe01e 	bne	r2,zero,523fc <_gp+0xffff56a0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5247c:	e0bffd17 	ldw	r2,-12(fp)
}
   52480:	e6ffff04 	addi	sp,fp,-4
   52484:	dfc00217 	ldw	ra,8(sp)
   52488:	df000117 	ldw	fp,4(sp)
   5248c:	dc000017 	ldw	r16,0(sp)
   52490:	dec00304 	addi	sp,sp,12
   52494:	f800283a 	ret

00052498 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   52498:	defffe04 	addi	sp,sp,-8
   5249c:	df000115 	stw	fp,4(sp)
   524a0:	df000104 	addi	fp,sp,4
   524a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   524a8:	e0bfff17 	ldw	r2,-4(fp)
   524ac:	10bffe84 	addi	r2,r2,-6
   524b0:	10c00428 	cmpgeui	r3,r2,16
   524b4:	18001a1e 	bne	r3,zero,52520 <alt_exception_cause_generated_bad_addr+0x88>
   524b8:	100690ba 	slli	r3,r2,2
   524bc:	00800174 	movhi	r2,5
   524c0:	10893404 	addi	r2,r2,9424
   524c4:	1885883a 	add	r2,r3,r2
   524c8:	10800017 	ldw	r2,0(r2)
   524cc:	1000683a 	jmp	r2
   524d0:	00052510 	cmplti	zero,zero,5268
   524d4:	00052510 	cmplti	zero,zero,5268
   524d8:	00052520 	cmpeqi	zero,zero,5268
   524dc:	00052520 	cmpeqi	zero,zero,5268
   524e0:	00052520 	cmpeqi	zero,zero,5268
   524e4:	00052510 	cmplti	zero,zero,5268
   524e8:	00052518 	cmpnei	zero,zero,5268
   524ec:	00052520 	cmpeqi	zero,zero,5268
   524f0:	00052510 	cmplti	zero,zero,5268
   524f4:	00052510 	cmplti	zero,zero,5268
   524f8:	00052520 	cmpeqi	zero,zero,5268
   524fc:	00052510 	cmplti	zero,zero,5268
   52500:	00052518 	cmpnei	zero,zero,5268
   52504:	00052520 	cmpeqi	zero,zero,5268
   52508:	00052520 	cmpeqi	zero,zero,5268
   5250c:	00052510 	cmplti	zero,zero,5268
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   52510:	00800044 	movi	r2,1
   52514:	00000306 	br	52524 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   52518:	0005883a 	mov	r2,zero
   5251c:	00000106 	br	52524 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   52520:	0005883a 	mov	r2,zero
  }
}
   52524:	e037883a 	mov	sp,fp
   52528:	df000017 	ldw	fp,0(sp)
   5252c:	dec00104 	addi	sp,sp,4
   52530:	f800283a 	ret

00052534 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
   52534:	defffd04 	addi	sp,sp,-12
   52538:	dfc00215 	stw	ra,8(sp)
   5253c:	df000115 	stw	fp,4(sp)
   52540:	df000104 	addi	fp,sp,4
   52544:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
   52548:	000f883a 	mov	r7,zero
   5254c:	000d883a 	mov	r6,zero
   52550:	e17fff17 	ldw	r5,-4(fp)
   52554:	0009883a 	mov	r4,zero
   52558:	00526ec0 	call	526ec <__register_exitproc>
}
   5255c:	e037883a 	mov	sp,fp
   52560:	dfc00117 	ldw	ra,4(sp)
   52564:	df000017 	ldw	fp,0(sp)
   52568:	dec00204 	addi	sp,sp,8
   5256c:	f800283a 	ret

00052570 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
   52570:	defffd04 	addi	sp,sp,-12
   52574:	dfc00215 	stw	ra,8(sp)
   52578:	df000115 	stw	fp,4(sp)
   5257c:	df000104 	addi	fp,sp,4
   52580:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
   52584:	000b883a 	mov	r5,zero
   52588:	e13fff17 	ldw	r4,-4(fp)
   5258c:	005285c0 	call	5285c <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
   52590:	d0a00517 	ldw	r2,-32748(gp)
   52594:	10800f17 	ldw	r2,60(r2)
   52598:	10000526 	beq	r2,zero,525b0 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
   5259c:	d0a00517 	ldw	r2,-32748(gp)
   525a0:	10800f17 	ldw	r2,60(r2)
   525a4:	d0e00517 	ldw	r3,-32748(gp)
   525a8:	1809883a 	mov	r4,r3
   525ac:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
   525b0:	e13fff17 	ldw	r4,-4(fp)
   525b4:	0052a480 	call	52a48 <_exit>

000525b8 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
   525b8:	defff804 	addi	sp,sp,-32
   525bc:	df000715 	stw	fp,28(sp)
   525c0:	df000704 	addi	fp,sp,28
   525c4:	e13ffd15 	stw	r4,-12(fp)
   525c8:	e17ffe15 	stw	r5,-8(fp)
   525cc:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
   525d0:	e0bffd17 	ldw	r2,-12(fp)
   525d4:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
   525d8:	e0bffe17 	ldw	r2,-8(fp)
   525dc:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
   525e0:	e0bfff17 	ldw	r2,-4(fp)
   525e4:	10800130 	cmpltui	r2,r2,4
   525e8:	1000371e 	bne	r2,zero,526c8 <memcmp+0x110>
   525ec:	e0fff917 	ldw	r3,-28(fp)
   525f0:	e0bffa17 	ldw	r2,-24(fp)
   525f4:	1884b03a 	or	r2,r3,r2
   525f8:	108000cc 	andi	r2,r2,3
   525fc:	1000321e 	bne	r2,zero,526c8 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
   52600:	e0bff917 	ldw	r2,-28(fp)
   52604:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
   52608:	e0bffa17 	ldw	r2,-24(fp)
   5260c:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
   52610:	00000e06 	br	5264c <memcmp+0x94>
        {
          if (*a1 != *a2) 
   52614:	e0bffb17 	ldw	r2,-20(fp)
   52618:	10c00017 	ldw	r3,0(r2)
   5261c:	e0bffc17 	ldw	r2,-16(fp)
   52620:	10800017 	ldw	r2,0(r2)
   52624:	18800d1e 	bne	r3,r2,5265c <memcmp+0xa4>
   	    break;
          a1++;
   52628:	e0bffb17 	ldw	r2,-20(fp)
   5262c:	10800104 	addi	r2,r2,4
   52630:	e0bffb15 	stw	r2,-20(fp)
          a2++;
   52634:	e0bffc17 	ldw	r2,-16(fp)
   52638:	10800104 	addi	r2,r2,4
   5263c:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
   52640:	e0bfff17 	ldw	r2,-4(fp)
   52644:	10bfff04 	addi	r2,r2,-4
   52648:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
   5264c:	e0bfff17 	ldw	r2,-4(fp)
   52650:	10800128 	cmpgeui	r2,r2,4
   52654:	103fef1e 	bne	r2,zero,52614 <_gp+0xffff58b8>
   52658:	00000106 	br	52660 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
   5265c:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
   52660:	e0bffb17 	ldw	r2,-20(fp)
   52664:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
   52668:	e0bffc17 	ldw	r2,-16(fp)
   5266c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
   52670:	00001506 	br	526c8 <memcmp+0x110>
    {
      if (*s1 != *s2)
   52674:	e0bff917 	ldw	r2,-28(fp)
   52678:	10c00003 	ldbu	r3,0(r2)
   5267c:	e0bffa17 	ldw	r2,-24(fp)
   52680:	10800003 	ldbu	r2,0(r2)
   52684:	18c03fcc 	andi	r3,r3,255
   52688:	10803fcc 	andi	r2,r2,255
   5268c:	18800826 	beq	r3,r2,526b0 <memcmp+0xf8>
	return *s1 - *s2;
   52690:	e0bff917 	ldw	r2,-28(fp)
   52694:	10800003 	ldbu	r2,0(r2)
   52698:	10c03fcc 	andi	r3,r2,255
   5269c:	e0bffa17 	ldw	r2,-24(fp)
   526a0:	10800003 	ldbu	r2,0(r2)
   526a4:	10803fcc 	andi	r2,r2,255
   526a8:	1885c83a 	sub	r2,r3,r2
   526ac:	00000b06 	br	526dc <memcmp+0x124>
      s1++;
   526b0:	e0bff917 	ldw	r2,-28(fp)
   526b4:	10800044 	addi	r2,r2,1
   526b8:	e0bff915 	stw	r2,-28(fp)
      s2++;
   526bc:	e0bffa17 	ldw	r2,-24(fp)
   526c0:	10800044 	addi	r2,r2,1
   526c4:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
   526c8:	e0bfff17 	ldw	r2,-4(fp)
   526cc:	10ffffc4 	addi	r3,r2,-1
   526d0:	e0ffff15 	stw	r3,-4(fp)
   526d4:	103fe71e 	bne	r2,zero,52674 <_gp+0xffff5918>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
   526d8:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   526dc:	e037883a 	mov	sp,fp
   526e0:	df000017 	ldw	fp,0(sp)
   526e4:	dec00104 	addi	sp,sp,4
   526e8:	f800283a 	ret

000526ec <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   526ec:	defff804 	addi	sp,sp,-32
   526f0:	dfc00715 	stw	ra,28(sp)
   526f4:	df000615 	stw	fp,24(sp)
   526f8:	dc000515 	stw	r16,20(sp)
   526fc:	df000604 	addi	fp,sp,24
   52700:	e13ffb15 	stw	r4,-20(fp)
   52704:	e17ffc15 	stw	r5,-16(fp)
   52708:	e1bffd15 	stw	r6,-12(fp)
   5270c:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   52710:	d0a00517 	ldw	r2,-32748(gp)
   52714:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
   52718:	8000041e 	bne	r16,zero,5272c <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
   5271c:	d0a00517 	ldw	r2,-32748(gp)
   52720:	d0e00517 	ldw	r3,-32748(gp)
   52724:	1c005304 	addi	r16,r3,332
   52728:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
   5272c:	80800117 	ldw	r2,4(r16)
   52730:	10800810 	cmplti	r2,r2,32
   52734:	1000131e 	bne	r2,zero,52784 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
   52738:	00800034 	movhi	r2,0
   5273c:	10800004 	addi	r2,r2,0
   52740:	1000021e 	bne	r2,zero,5274c <__register_exitproc+0x60>
	return -1;
   52744:	00bfffc4 	movi	r2,-1
   52748:	00003e06 	br	52844 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
   5274c:	01006404 	movi	r4,400
   52750:	00000000 	call	0 <__alt_mem_MemoriaDados>
   52754:	1021883a 	mov	r16,r2
      if (p == NULL)
   52758:	8000021e 	bne	r16,zero,52764 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
   5275c:	00bfffc4 	movi	r2,-1
   52760:	00003806 	br	52844 <__register_exitproc+0x158>
	}
      p->_ind = 0;
   52764:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
   52768:	d0a00517 	ldw	r2,-32748(gp)
   5276c:	10805217 	ldw	r2,328(r2)
   52770:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
   52774:	d0a00517 	ldw	r2,-32748(gp)
   52778:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
   5277c:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
   52780:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
   52784:	e0bffb17 	ldw	r2,-20(fp)
   52788:	10002426 	beq	r2,zero,5281c <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
   5278c:	80802204 	addi	r2,r16,136
   52790:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
   52794:	80800117 	ldw	r2,4(r16)
   52798:	e0fffa17 	ldw	r3,-24(fp)
   5279c:	1085883a 	add	r2,r2,r2
   527a0:	1085883a 	add	r2,r2,r2
   527a4:	1885883a 	add	r2,r3,r2
   527a8:	e0fffd17 	ldw	r3,-12(fp)
   527ac:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
   527b0:	e0bffa17 	ldw	r2,-24(fp)
   527b4:	10804017 	ldw	r2,256(r2)
   527b8:	80c00117 	ldw	r3,4(r16)
   527bc:	01000044 	movi	r4,1
   527c0:	20c6983a 	sll	r3,r4,r3
   527c4:	10c6b03a 	or	r3,r2,r3
   527c8:	e0bffa17 	ldw	r2,-24(fp)
   527cc:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
   527d0:	80800117 	ldw	r2,4(r16)
   527d4:	e0fffa17 	ldw	r3,-24(fp)
   527d8:	10800804 	addi	r2,r2,32
   527dc:	1085883a 	add	r2,r2,r2
   527e0:	1085883a 	add	r2,r2,r2
   527e4:	1885883a 	add	r2,r3,r2
   527e8:	e0fffe17 	ldw	r3,-8(fp)
   527ec:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
   527f0:	e0bffb17 	ldw	r2,-20(fp)
   527f4:	10800098 	cmpnei	r2,r2,2
   527f8:	1000081e 	bne	r2,zero,5281c <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
   527fc:	e0bffa17 	ldw	r2,-24(fp)
   52800:	10804117 	ldw	r2,260(r2)
   52804:	80c00117 	ldw	r3,4(r16)
   52808:	01000044 	movi	r4,1
   5280c:	20c6983a 	sll	r3,r4,r3
   52810:	10c6b03a 	or	r3,r2,r3
   52814:	e0bffa17 	ldw	r2,-24(fp)
   52818:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
   5281c:	80800117 	ldw	r2,4(r16)
   52820:	10c00044 	addi	r3,r2,1
   52824:	80c00115 	stw	r3,4(r16)
   52828:	10800084 	addi	r2,r2,2
   5282c:	1085883a 	add	r2,r2,r2
   52830:	1085883a 	add	r2,r2,r2
   52834:	8085883a 	add	r2,r16,r2
   52838:	e0fffc17 	ldw	r3,-16(fp)
   5283c:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
   52840:	0005883a 	mov	r2,zero
}
   52844:	e6ffff04 	addi	sp,fp,-4
   52848:	dfc00217 	ldw	ra,8(sp)
   5284c:	df000117 	ldw	fp,4(sp)
   52850:	dc000017 	ldw	r16,0(sp)
   52854:	dec00304 	addi	sp,sp,12
   52858:	f800283a 	ret

0005285c <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
   5285c:	defff504 	addi	sp,sp,-44
   52860:	dfc00a15 	stw	ra,40(sp)
   52864:	df000915 	stw	fp,36(sp)
   52868:	dc800815 	stw	r18,32(sp)
   5286c:	dc400715 	stw	r17,28(sp)
   52870:	dc000615 	stw	r16,24(sp)
   52874:	df000904 	addi	fp,sp,36
   52878:	e13ffb15 	stw	r4,-20(fp)
   5287c:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
   52880:	d0a00517 	ldw	r2,-32748(gp)
   52884:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
   52888:	d0a00517 	ldw	r2,-32748(gp)
   5288c:	10805204 	addi	r2,r2,328
   52890:	e0bff715 	stw	r2,-36(fp)
  while (p)
   52894:	00006006 	br	52a18 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
   52898:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   5289c:	80800117 	ldw	r2,4(r16)
   528a0:	147fffc4 	addi	r17,r2,-1
   528a4:	00004a06 	br	529d0 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
   528a8:	00800044 	movi	r2,1
   528ac:	1444983a 	sll	r2,r2,r17
   528b0:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
   528b4:	e0bffc17 	ldw	r2,-16(fp)
   528b8:	10000826 	beq	r2,zero,528dc <__call_exitprocs+0x80>
   528bc:	90004026 	beq	r18,zero,529c0 <__call_exitprocs+0x164>
   528c0:	88800804 	addi	r2,r17,32
   528c4:	1085883a 	add	r2,r2,r2
   528c8:	1085883a 	add	r2,r2,r2
   528cc:	9085883a 	add	r2,r18,r2
   528d0:	10c00017 	ldw	r3,0(r2)
   528d4:	e0bffc17 	ldw	r2,-16(fp)
   528d8:	1880391e 	bne	r3,r2,529c0 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
   528dc:	88800084 	addi	r2,r17,2
   528e0:	1085883a 	add	r2,r2,r2
   528e4:	1085883a 	add	r2,r2,r2
   528e8:	8085883a 	add	r2,r16,r2
   528ec:	10800017 	ldw	r2,0(r2)
   528f0:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
   528f4:	80800117 	ldw	r2,4(r16)
   528f8:	10bfffc4 	addi	r2,r2,-1
   528fc:	1440041e 	bne	r2,r17,52910 <__call_exitprocs+0xb4>
	    p->_ind--;
   52900:	80800117 	ldw	r2,4(r16)
   52904:	10bfffc4 	addi	r2,r2,-1
   52908:	80800115 	stw	r2,4(r16)
   5290c:	00000506 	br	52924 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
   52910:	88800084 	addi	r2,r17,2
   52914:	1085883a 	add	r2,r2,r2
   52918:	1085883a 	add	r2,r2,r2
   5291c:	8085883a 	add	r2,r16,r2
   52920:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
   52924:	e0bff917 	ldw	r2,-28(fp)
   52928:	10002726 	beq	r2,zero,529c8 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
   5292c:	80800117 	ldw	r2,4(r16)
   52930:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
   52934:	90000426 	beq	r18,zero,52948 <__call_exitprocs+0xec>
   52938:	90c04017 	ldw	r3,256(r18)
   5293c:	e0bff817 	ldw	r2,-32(fp)
   52940:	1884703a 	and	r2,r3,r2
   52944:	1000031e 	bne	r2,zero,52954 <__call_exitprocs+0xf8>
	    fn ();
   52948:	e0bff917 	ldw	r2,-28(fp)
   5294c:	103ee83a 	callr	r2
   52950:	00001406 	br	529a4 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
   52954:	90c04117 	ldw	r3,260(r18)
   52958:	e0bff817 	ldw	r2,-32(fp)
   5295c:	1884703a 	and	r2,r3,r2
   52960:	1000091e 	bne	r2,zero,52988 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
   52964:	8c45883a 	add	r2,r17,r17
   52968:	1085883a 	add	r2,r2,r2
   5296c:	9085883a 	add	r2,r18,r2
   52970:	10c00017 	ldw	r3,0(r2)
   52974:	e0bff917 	ldw	r2,-28(fp)
   52978:	180b883a 	mov	r5,r3
   5297c:	e13ffb17 	ldw	r4,-20(fp)
   52980:	103ee83a 	callr	r2
   52984:	00000706 	br	529a4 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
   52988:	8c45883a 	add	r2,r17,r17
   5298c:	1085883a 	add	r2,r2,r2
   52990:	9085883a 	add	r2,r18,r2
   52994:	10c00017 	ldw	r3,0(r2)
   52998:	e0bff917 	ldw	r2,-28(fp)
   5299c:	1809883a 	mov	r4,r3
   529a0:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
   529a4:	80c00117 	ldw	r3,4(r16)
   529a8:	e0bffa17 	ldw	r2,-24(fp)
   529ac:	18bfb41e 	bne	r3,r2,52880 <_gp+0xffff5b24>
   529b0:	e0bff717 	ldw	r2,-36(fp)
   529b4:	10800017 	ldw	r2,0(r2)
   529b8:	143fb11e 	bne	r2,r16,52880 <_gp+0xffff5b24>
   529bc:	00000306 	br	529cc <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
   529c0:	0001883a 	nop
   529c4:	00000106 	br	529cc <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
   529c8:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   529cc:	8c7fffc4 	addi	r17,r17,-1
   529d0:	883fb50e 	bge	r17,zero,528a8 <_gp+0xffff5b4c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
   529d4:	00800034 	movhi	r2,0
   529d8:	10800004 	addi	r2,r2,0
   529dc:	10001026 	beq	r2,zero,52a20 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
   529e0:	80800117 	ldw	r2,4(r16)
   529e4:	10000a1e 	bne	r2,zero,52a10 <__call_exitprocs+0x1b4>
   529e8:	80800017 	ldw	r2,0(r16)
   529ec:	10000826 	beq	r2,zero,52a10 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
   529f0:	80c00017 	ldw	r3,0(r16)
   529f4:	e0bff717 	ldw	r2,-36(fp)
   529f8:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
   529fc:	8009883a 	mov	r4,r16
   52a00:	00000000 	call	0 <__alt_mem_MemoriaDados>
	  p = *lastp;
   52a04:	e0bff717 	ldw	r2,-36(fp)
   52a08:	14000017 	ldw	r16,0(r2)
   52a0c:	00000206 	br	52a18 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
   52a10:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
   52a14:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
   52a18:	803f9f1e 	bne	r16,zero,52898 <_gp+0xffff5b3c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   52a1c:	00000106 	br	52a24 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
   52a20:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   52a24:	0001883a 	nop
   52a28:	e6fffd04 	addi	sp,fp,-12
   52a2c:	dfc00417 	ldw	ra,16(sp)
   52a30:	df000317 	ldw	fp,12(sp)
   52a34:	dc800217 	ldw	r18,8(sp)
   52a38:	dc400117 	ldw	r17,4(sp)
   52a3c:	dc000017 	ldw	r16,0(sp)
   52a40:	dec00504 	addi	sp,sp,20
   52a44:	f800283a 	ret

00052a48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   52a48:	defffd04 	addi	sp,sp,-12
   52a4c:	df000215 	stw	fp,8(sp)
   52a50:	df000204 	addi	fp,sp,8
   52a54:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   52a58:	0001883a 	nop
   52a5c:	e0bfff17 	ldw	r2,-4(fp)
   52a60:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   52a64:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   52a68:	10000226 	beq	r2,zero,52a74 <_exit+0x2c>
    ALT_SIM_FAIL();
   52a6c:	002af070 	cmpltui	zero,zero,43969
   52a70:	00000106 	br	52a78 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   52a74:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   52a78:	003fff06 	br	52a78 <_gp+0xffff5d1c>

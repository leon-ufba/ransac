
RansacSoftware.elf:     file format elf32-littlenios2
RansacSoftware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000215d4 memsz 0x000215d4 flags r-x
    LOAD off    0x000225f4 vaddr 0x000a15f4 paddr 0x000a3168 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x00024cdc vaddr 0x000a4cdc paddr 0x000a4cdc align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002080c  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bb8  000a0a3c  000a0a3c  00021a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  000a15f4  000a3168  000225f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  000a4cdc  000a4cdc  00024cdc  2**2
                  ALLOC, SMALL_DATA
  6 .MemoriaDados 00000000  00000000  00000000  00024168  2**0
                  CONTENTS
  7 .MemoriaPrograma 00000000  000a4e6c  000a4e6c  00024168  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000014b8  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00033cc7  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c0da  00000000  00000000  0005930f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ffae  00000000  00000000  000653e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003460  00000000  00000000  00075398  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005149  00000000  00000000  000787f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008fb8  00000000  00000000  0007d941  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000868fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017d8  00000000  00000000  00086910  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008c1e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0008c1e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008c1f4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008c1f5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0008c1f6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0008c1ff  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0008c208  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000010  00000000  00000000  0008c211  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0008c221  2**0
                  CONTENTS, READONLY
 27 .jdi          0000561e  00000000  00000000  0008c249  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00048992  00000000  00000000  00091867  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
000a0a3c l    d  .rodata	00000000 .rodata
000a15f4 l    d  .rwdata	00000000 .rwdata
000a4cdc l    d  .bss	00000000 .bss
00000000 l    d  .MemoriaDados	00000000 .MemoriaDados
000a4e6c l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RansacSoftware_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 ransac.c
00000000 l    df *ABS*	00000000 s_atan.c
000a0ce8 l     O .rodata	00000020 atanhi
000a0d08 l     O .rodata	00000020 atanlo
000a0d28 l     O .rodata	00000058 aT
000a30c8 l     O .rwdata	00000008 one
000a30d0 l     O .rwdata	00000008 huge
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085380 l     F .text	000000f4 std
000a4cfc l     O .bss	00000004 __sfp_lock
000a4d00 l     O .bss	00000004 __sinit_lock
00085894 l     F .text	00000024 __fp_lock
000858b8 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
000a15f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
000870f0 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
000886bc l     F .text	00000050 lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00088d28 l     F .text	000000f0 __sbprintf
0008af50 l     F .text	0000020c cvt
0008b15c l     F .text	00000140 exponent
000a0ee6 l     O .rodata	00000010 blanks.4403
000a0ef6 l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 vfscanf.c
000a0f0e l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000a4d14 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 ctype_.c
000a0f30 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0008d584 l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
000a1e20 l     O .rwdata	00000038 lconv
000a1e58 l     O .rwdata	00000020 lc_ctype_charset
000a1e78 l     O .rwdata	00000020 lc_message_charset
000a4d24 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000a12f8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
000a1304 l     O .rodata	00000028 tinytens
0009361c l     F .text	000000d8 sulp
000936f4 l     F .text	00000164 ULtod
00093858 l     F .text	000000cc match
000a133c l     O .rodata	00000014 fpi.2737
000a1350 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0009856c l     F .text	0000020c cvt
00098778 l     F .text	00000140 exponent
000a13c2 l     O .rodata	00000010 blanks.4388
000a13d2 l     O .rodata	00000010 zeroes.4389
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00098d54 l     F .text	000000f0 __sbprintf
000a142e l     O .rodata	00000010 blanks.4348
000a143e l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0009a5b8 l     F .text	000001b0 rshift
0009a768 l     F .text	0000014c increment
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0009b358 l     F .text	000000bc L_shift
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000a159a l     O .rodata	00000010 blanks.4332
000a15aa l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0009df18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0009e02c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0009e08c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0009e180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0009e268 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0009e354 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0009e530 l     F .text	0000003c alt_get_errno
0009e56c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0009e7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000a3110 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0009ea28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009eb64 l     F .text	00000034 alt_dev_reg
000a2040 l     O .rwdata	00001060 jtag_uart
000a30a0 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0009ee48 l     F .text	0000020c altera_avalon_jtag_uart_irq
0009f054 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
000a3114 l     O .rwdata	00000009 hcinfo.2538
000a3120 l     O .rwdata	0000000a hcinfo.2551
000a312c l     O .rwdata	00000009 hcinfo.2560
000a3138 l     O .rwdata	0000000a hcinfo.2573
000a3144 l     O .rwdata	0000000a hcinfo.2586
000a3150 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009fc5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000a0398 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000a4d40 g     O .bss	00000004 alt_instruction_exception_handler
00092228 g     F .text	000000b0 _mprec_log10
000923a8 g     F .text	00000134 __any_on
0008ff60 g     F .text	00000060 _isatty_r
000a12d0 g     O .rodata	00000028 __mprec_tinytens
0009e46c g     F .text	0000007c alt_main
00088460 g     F .text	00000118 _puts_r
000a4d6c g     O .bss	00000100 alt_irq
00082164 g     F .text	00000088 fabs
000901b4 g     F .text	00000070 _lseek_r
000a4cdc g     O .bss	00000004 getAngleFromModel_counter
000a3168 g       *ABS*	00000000 __flash_rwdata_start
0008f4c0 g     F .text	0000012c __sflags
0009dde8 g     F .text	00000088 .hidden __eqdf2
000a4e6c g       *ABS*	00000000 __alt_heap_start
0009ce20 g     F .text	000000d4 _wcrtomb_r
00088b40 g     F .text	000000a0 __sseek
0008573c g     F .text	000000d8 __sinit
0008cf80 g     F .text	00000168 __swbuf_r
00090010 g     F .text	00000084 _setlocale_r
00085474 g     F .text	000000bc __sfmoreglue
00098bd8 g     F .text	00000040 ungetc
0009e50c g     F .text	00000024 __malloc_unlock
0009f68c g     F .text	0000011c alt_hostfs_open
00093924 g     F .text	00001d08 _strtod_r
00080c60 g     F .text	00000160 coefficientOfDetermination
00090824 g     F .text	00000208 memmove
00085708 g     F .text	00000034 _cleanup
00090a2c g     F .text	00000130 _Balloc
00083644 g     F .text	000000dc .hidden __gtdf2
000a069c g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00086b48 g     F .text	00000068 _fstat_r
000a4d04 g     O .bss	00000004 errno
0008b314 g     F .text	00000048 __svfscanf
00088a5c g     F .text	00000030 __seofread
0009bbb8 g     F .text	00001268 ___svfiprintf_internal_r
000a4d2c g     O .bss	00000004 alt_argv
000ab0c8 g       *ABS*	00000000 _gp
00086378 g     F .text	00000060 fscanf
000a1ec0 g     O .rwdata	00000180 alt_fd_list
0009f8c4 g     F .text	00000068 alt_hostfs_seek
0009fdfc g     F .text	00000090 alt_find_dev
0009069c g     F .text	00000188 memcpy
0009b414 g     F .text	0000033c __hexnan
000856c4 g     F .text	00000044 _cleanup_r
000849fc g     F .text	000000dc .hidden __floatsidf
00080898 g     F .text	000000e4 calculateIntersection
0009ff94 g     F .text	00000080 alt_fs_reg
000a047c g     F .text	0000007c alt_io_redirect
00083720 g     F .text	000000f4 .hidden __ltdf2
000a0a3c g       *ABS*	00000000 __DTOR_END__
00088578 g     F .text	00000038 puts
000a06c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00090300 g     F .text	000000e4 mbrtowc
0009313c g     F .text	00000104 __fpclassifyd
0008b35c g     F .text	00000074 _vfscanf_r
0009210c g     F .text	0000011c __ratio
00098e44 g     F .text	00000050 __vfiprintf_internal
0009f24c g     F .text	0000021c altera_avalon_jtag_uart_read
000822e4 g     F .text	00000064 .hidden __udivsi3
0009e1bc g     F .text	000000ac isatty
0008ffc0 g     F .text	00000050 iswspace
000a11e0 g     O .rodata	000000c8 __mprec_tens
00090094 g     F .text	00000024 __locale_charset
0009d1b4 g     F .text	00000074 .hidden __fixunsdfsi
000a4d08 g     O .bss	00000004 __malloc_top_pad
00096128 g     F .text	00000048 strtoul
000a30ec g     O .rwdata	00000004 __mb_cur_max
0009011c g     F .text	00000028 _localeconv_r
00096170 g     F .text	00000388 _strtoull_r
0009108c g     F .text	00000058 __i2b
0008f978 g     F .text	000005e8 __sfvwrite_r
00080dc0 g     F .text	00000200 inliersOutliersMemory
00088960 g     F .text	00000060 _sbrk_r
0009f7ec g     F .text	0000006c alt_hostfs_read
000a4ce0 g     O .bss	00000004 inliersOutliers_counter
000813a8 g     F .text	000000d0 squareDistanceBetweenPoints
000924dc g     F .text	00000070 _read_r
000a3108 g     O .rwdata	00000004 alt_max_fd
00084e3c g     F .text	0000012c _fclose_r
0008532c g     F .text	00000054 fflush
000a4d0c g     O .bss	00000004 __malloc_max_sbrked_mem
00084ad8 g     F .text	00000110 .hidden __extendsfdf2
000823c8 g     F .text	000008ac .hidden __adddf3
00091cc8 g     F .text	00000204 __b2d
0009d824 g     F .text	000005c4 .hidden __umoddi3
0009e390 g     F .text	000000dc lseek
000a30dc g     O .rwdata	00000004 _global_impure_ptr
0009254c g     F .text	00000bf0 _realloc_r
000a4e6c g       *ABS*	00000000 __bss_end
000a02a8 g     F .text	000000f0 alt_iic_isr_register
00081478 g     F .text	000002d8 RANSAC
000a0594 g     F .text	00000108 alt_tick
000a144e g     O .rodata	00000100 __hexdig
0009d228 g     F .text	000005fc .hidden __udivdi3
0009a4c8 g     F .text	00000088 _fputwc_r
000a12a8 g     O .rodata	00000028 __mprec_bigtens
00090d84 g     F .text	0000018c __s2b
0009de70 g     F .text	000000a8 .hidden __floatunsidf
00091844 g     F .text	00000114 __mcmp
000858dc g     F .text	00000040 __fp_lock_all
000a025c g     F .text	0000004c alt_ic_irq_enabled
000a04f8 g     F .text	0000009c alt_alarm_stop
00095a7c g     F .text	00000048 strtol
000a4d34 g     O .bss	00000004 alt_irq_active
000864c4 g     F .text	0000063c _fseeko_r
0009f7a8 g     F .text	00000044 alt_hostfs_close
000800fc g     F .exceptions	000000d4 alt_irq_handler
000a1e98 g     O .rwdata	00000028 alt_dev_null
00000000 g       *ABS*	00000000 __alt_mem_MemoriaDados
0009fc3c g     F .text	00000020 alt_dcache_flush_all
00090f10 g     F .text	00000090 __hi0bits
0008497c g     F .text	00000080 .hidden __fixdfsi
0009562c g     F .text	00000058 strtod
000a3168 g       *ABS*	00000000 __ram_rwdata_end
000a3100 g     O .rwdata	00000008 alt_dev_list
00085b6c g     F .text	0000006c _fputc_r
0009ea64 g     F .text	00000100 write
00088254 g     F .text	00000104 _putc_r
000a15f4 g       *ABS*	00000000 __ram_rodata_end
0009e0c8 g     F .text	000000b8 fstat
00085b14 g     F .text	00000058 fprintf
00083720 g     F .text	000000f4 .hidden __ledf2
000914d4 g     F .text	00000178 __pow5mult
00098e94 g     F .text	000012dc ___vfiprintf_internal_r
000a4d18 g     O .bss	00000004 __nlocale_changed
00082348 g     F .text	00000058 .hidden __umodsi3
000a4e6c g       *ABS*	00000000 end
00086b00 g     F .text	00000048 fseeko
00080000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
0008647c g     F .text	00000048 fseek
0009ed88 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000a0a3c g       *ABS*	00000000 __CTOR_LIST__
000b2000 g       *ABS*	00000000 __alt_stack_pointer
00084d90 g     F .text	00000064 .hidden __clzsi2
000a4ce4 g     O .bss	00000004 calculateIntersection_counter
0009f468 g     F .text	00000224 altera_avalon_jtag_uart_write
00085814 g     F .text	00000020 __sfp_lock_acquire
000904e0 g     F .text	000001bc memchr
00088e68 g     F .text	000020e8 ___vfprintf_internal_r
000933a0 g     F .text	0000009c _sprintf_r
00085c48 g     F .text	00000560 _free_r
000900b8 g     F .text	00000020 __locale_mb_cur_max
0008d398 g     F .text	000001ec __call_exitprocs
000a4d1c g     O .bss	00000004 __mlocale_changed
000a30e4 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
000a4d38 g     O .bss	00000004 _alt_tick_rate
00095ac4 g     F .text	000003c0 _strtoll_r
000885f4 g     F .text	000000c8 rand
0009164c g     F .text	000001f8 __lshift
000a4d3c g     O .bss	00000004 _alt_nticks
0009e7f0 g     F .text	00000104 read
0009ebd0 g     F .text	00000054 alt_sys_init
0009b8e4 g     F .text	000002d4 __ssprint_r
000881e4 g     F .text	00000070 _open_r
000a08cc g     F .text	00000170 __register_exitproc
0009b750 g     F .text	00000194 strncmp
000910e4 g     F .text	000003f0 __multiply
0009f0f4 g     F .text	00000068 altera_avalon_jtag_uart_close
000823a0 g     F .text	00000028 .hidden __mulsi3
000a15f4 g       *ABS*	00000000 __ram_rwdata_start
000a0a3c g       *ABS*	00000000 __ram_rodata_start
000a4d44 g     O .bss	00000028 __malloc_current_mallinfo
00091ecc g     F .text	00000240 __d2b
0009ec24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00095e84 g     F .text	000002a4 _strtoul_r
000a0014 g     F .text	000000c4 alt_get_fd
0008d338 g     F .text	00000060 _close_r
000a0798 g     F .text	00000134 memcmp
0009ece4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a4e6c g       *ABS*	00000000 __alt_stack_base
0009ed34 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00086d64 g     F .text	0000010c _fwrite_r
0008097c g     F .text	000000b4 getAngleFromModel
0008d198 g     F .text	000001a0 __swsetup_r
00082c74 g     F .text	000009d0 .hidden __divdf3
00085530 g     F .text	00000194 __sfp
000922d8 g     F .text	000000d0 __copybits
000a1a18 g     O .rwdata	00000408 __malloc_av_
00085874 g     F .text	00000020 __sinit_lock_release
00083814 g     F .text	0000086c .hidden __muldf3
000889c0 g     F .text	0000009c __sread
0008f924 g     F .text	00000054 fread
0009fe8c g     F .text	00000108 alt_find_file
0009fc98 g     F .text	000000a4 alt_dev_llist_insert
0009e4e8 g     F .text	00000024 __malloc_lock
00085abc g     F .text	00000058 _fprintf_r
0009e978 g     F .text	000000b0 sbrk
000964f8 g     F .text	00002074 ___svfprintf_internal_r
000852a4 g     F .text	00000088 _fflush_r
0009a170 g     F .text	00000164 _calloc_r
00085a7c g     F .text	00000040 fopen
000a4cdc g       *ABS*	00000000 __bss_start
000863d8 g     F .text	0000005c _fscanf_r
00088020 g     F .text	000001c4 memset
0008026c g     F .text	0000055c main
000a4d30 g     O .bss	00000004 alt_envp
000a4d10 g     O .bss	00000004 __malloc_max_total_mem
0009ec84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008d0e8 g     F .text	00000040 __swbuf
000885b0 g     F .text	00000044 srand
0008f5ec g     F .text	00000338 _fread_r
00088be0 g     F .text	00000054 __sclose
000b2000 g       *ABS*	00000000 __alt_heap_limit
00084f68 g     F .text	00000038 fclose
000957b0 g     F .text	000002cc _strtol_r
00084be8 g     F .text	000001a8 .hidden __truncdfsf2
0008d948 g     F .text	00001b78 _dtoa_r
000874a4 g     F .text	00000b7c _malloc_r
0009d030 g     F .text	00000078 __ascii_wctomb
00080a30 g     F .text	00000230 leastSquare
000a310c g     O .rwdata	00000004 alt_errno
000988b8 g     F .text	00000114 __submore
00086bb0 g     F .text	000000d8 _fwalk
000903e4 g     F .text	00000068 _mbtowc_r
00088358 g     F .text	00000108 putc
000821ec g     F .text	00000084 .hidden __divsi3
000861a8 g     F .text	000001d0 _malloc_trim_r
000a0a3c g       *ABS*	00000000 __CTOR_END__
000934dc g     F .text	00000140 strcmp
000a0a3c g       *ABS*	00000000 __flash_rodata_start
000a0a3c g       *ABS*	00000000 __DTOR_LIST__
0009dde8 g     F .text	00000088 .hidden __nedf2
0009eb98 g     F .text	00000038 alt_irq_init
0009e8f4 g     F .text	00000084 alt_release_fd
00081750 g     F .text	00000a14 atan
0009343c g     F .text	000000a0 sprintf
000a0d80 g     O .rodata	00000100 .hidden __clz_tab
000a4d20 g     O .bss	00000004 _PathLocale
00095684 g     F .text	0000012c strtof
000a075c g     F .text	0000003c atexit
0008d128 g     F .text	00000070 _write_r
00090144 g     F .text	00000040 setlocale
0009336c g     F .text	00000034 nanf
000a30d8 g     O .rwdata	00000004 _impure_ptr
000a4d28 g     O .bss	00000004 alt_argc
00084fa0 g     F .text	00000304 __sflush_r
00090224 g     F .text	000000dc _mbrtowc_r
0009fd9c g     F .text	00000060 _do_dtors
000900fc g     F .text	00000020 __locale_cjk_lang
00086434 g     F .text	00000048 _fseek_r
0008870c g     F .text	00000254 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
0009044c g     F .text	00000094 __ascii_mbtowc
00091bfc g     F .text	000000cc __ulp
0008591c g     F .text	00000040 __fp_unlock_all
00085bd8 g     F .text	00000070 fputc
000a30f8 g     O .rwdata	00000008 alt_fs_list
0009f858 g     F .text	0000006c alt_hostfs_write
000a4ce8 g     O .bss	00000004 square_root_counter
00080fc0 g     F .text	00000208 inliersOutliers
00080020 g       *ABS*	00000000 __ram_exceptions_start
00090184 g     F .text	00000030 localeconv
000a00f8 g     F .text	00000050 alt_ic_isr_register
00086e70 g     F .text	00000054 fwrite
000a3168 g       *ABS*	00000000 _edata
000a4e6c g       *ABS*	00000000 _end
0009a2d4 g     F .text	000001f4 __fputwc
00080230 g       *ABS*	00000000 __ram_exceptions_end
0008b29c g     F .text	00000078 vfscanf
0009f15c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000807c8 g     F .text	000000d0 square_root
000811c8 g     F .text	000001e0 checkModel
000a01d0 g     F .text	0000008c alt_ic_irq_disable
00088a8c g     F .text	000000b4 __swrite
000a30e0 g     O .rwdata	00000004 __malloc_trim_threshold
000900d8 g     F .text	00000024 __locale_msgcharset
00084df4 g     F .text	00000048 exit
00086c88 g     F .text	000000dc _fwalk_reent
00091958 g     F .text	000002a4 __mdiff
00082270 g     F .text	00000074 .hidden __modsi3
000a30e8 g     O .rwdata	00000004 __ctype_ptr__
000b2000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085834 g     F .text	00000020 __sfp_lock_release
00093240 g     F .text	0000012c __sccl
000a10b0 g     O .rodata	00000101 _ctype_
000a30f0 g     O .rwdata	00000004 __mbtowc
0008595c g     F .text	00000120 _fopen_r
0009e058 g     F .text	00000034 _exit
0009fb10 g     F .text	0000012c alt_alarm_start
0009d0a8 g     F .text	0000010c .hidden __muldi3
00086ec4 g     F .text	0000022c __smakebuf_r
00088c34 g     F .text	000000f4 strlen
0009e658 g     F .text	0000015c open
00083644 g     F .text	000000dc .hidden __gedf2
000a4cec g     O .bss	00000004 coefficientOfDetermination_counter
0009a8b4 g     F .text	00000aa4 __gethex
000a30f4 g     O .rwdata	00000004 __wctomb
00098c18 g     F .text	0000013c __sprint_r
000a00d8 g     F .text	00000020 alt_icache_flush_all
000a315c g     O .rwdata	00000004 alt_priority_mask
000a0148 g     F .text	00000088 alt_ic_irq_enable
00088e18 g     F .text	00000050 __vfprintf_internal
0009cfcc g     F .text	00000064 _wctomb_r
00084080 g     F .text	000008fc .hidden __subdf3
000a4cf0 g     O .bss	00000004 inliersOutliersMemory_counter
00090fa0 g     F .text	000000ec __lo0bits
000a4cf4 g     O .bss	00000004 leastSquare_counter
0008b3d0 g     F .text	00001bb0 __svfscanf_r
000a3160 g     O .rwdata	00000008 alt_alarm_list
000989cc g     F .text	0000020c _ungetc_r
0009fd3c g     F .text	00000060 _do_ctors
0009cef4 g     F .text	000000d8 wcrtomb
0009df54 g     F .text	000000d8 close
000a4cf8 g     O .bss	00000004 squareDistanceBetweenPoints_counter
0009e2d0 g     F .text	00000084 alt_load
0009a550 g     F .text	00000068 fputwc
00085854 g     F .text	00000020 __sinit_lock_acquire
00090bd8 g     F .text	000001ac __multadd
00090b5c g     F .text	0000007c _Bfree
0009f92c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	008002b4 	movhi	r2,10
   80140:	10935b04 	addi	r2,r2,19820
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	008002b4 	movhi	r2,10
   80158:	10935b04 	addi	r2,r2,19820
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a71e17 	ldw	r2,-25480(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a71e17 	ldw	r2,-25480(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   80238:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   8023c:	d6ac3214 	ori	gp,gp,45256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   80244:	10933714 	ori	r2,r2,19676

    movhi r3, %hi(__bss_end)
   80248:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   8024c:	18d39b14 	ori	r3,r3,20076

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	009e2d00 	call	9e2d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	009e46c0 	call	9e46c <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <__alt_data_end+0xfffce268>

0008026c <main>:
#include <stdlib.h>
#include <math.h>
#include "ransac.h"


int main() {
   8026c:	defeb004 	addi	sp,sp,-1344
   80270:	dfc14f15 	stw	ra,1340(sp)
   80274:	df014e15 	stw	fp,1336(sp)
   80278:	dc414d15 	stw	r17,1332(sp)
   8027c:	dc014c15 	stw	r16,1328(sp)
   80280:	df014e04 	addi	fp,sp,1336

	int *data = END_BASE_DATA;
   80284:	e03ebc15 	stw	zero,-1296(fp)
	int step;
	int data_size;
	int x, y;
	int outliers[MAX_POINTS];

	entrada = fopen("/mnt/host/resultados/FPGAin.txt", "r");
   80288:	014002b4 	movhi	r5,10
   8028c:	29428f04 	addi	r5,r5,2620
   80290:	010002b4 	movhi	r4,10
   80294:	21029004 	addi	r4,r4,2624
   80298:	0085a7c0 	call	85a7c <fopen>
   8029c:	e0bebd15 	stw	r2,-1292(fp)
	saida = fopen("/mnt/host/resultados/FPGAout_InliersOutliers.txt", "w");
   802a0:	014002b4 	movhi	r5,10
   802a4:	29429804 	addi	r5,r5,2656
   802a8:	010002b4 	movhi	r4,10
   802ac:	21029904 	addi	r4,r4,2660
   802b0:	0085a7c0 	call	85a7c <fopen>
   802b4:	e0bebe15 	stw	r2,-1288(fp)
	profiling = fopen("/mnt/host/resultados/Profiling_InliersOutliers.txt", "w");
   802b8:	014002b4 	movhi	r5,10
   802bc:	29429804 	addi	r5,r5,2656
   802c0:	010002b4 	movhi	r4,10
   802c4:	2102a604 	addi	r4,r4,2712
   802c8:	0085a7c0 	call	85a7c <fopen>
   802cc:	e0bebf15 	stw	r2,-1284(fp)
	profilingCSV = fopen("/mnt/host/resultados/Profiling_InliersOutliers.csv", "w");
   802d0:	014002b4 	movhi	r5,10
   802d4:	29429804 	addi	r5,r5,2656
   802d8:	010002b4 	movhi	r4,10
   802dc:	2102b304 	addi	r4,r4,2764
   802e0:	0085a7c0 	call	85a7c <fopen>
   802e4:	e0bec015 	stw	r2,-1280(fp)

	if (entrada == NULL)
   802e8:	e0bebd17 	ldw	r2,-1292(fp)
   802ec:	1000051e 	bne	r2,zero,80304 <main+0x98>
	{
		printf ("Cannot open file.\n");
   802f0:	010002b4 	movhi	r4,10
   802f4:	2102c004 	addi	r4,r4,2816
   802f8:	00885780 	call	88578 <puts>
		exit (1);
   802fc:	01000044 	movi	r4,1
   80300:	0084df40 	call	84df4 <exit>
	}

	//Plot CSV
	fprintf(profilingCSV, "step,square_root,calculateIntersection,getAngleFromModel,leastSquare,coefficientOfDetermination,inliersOutliersMemory,inliersOutliers,squareDistanceBetweenPoints\n");
   80304:	e1fec017 	ldw	r7,-1280(fp)
   80308:	01802884 	movi	r6,162
   8030c:	01400044 	movi	r5,1
   80310:	010002b4 	movhi	r4,10
   80314:	2102c504 	addi	r4,r4,2836
   80318:	0086e700 	call	86e70 <fwrite>

	while (!(feof(entrada))) {
   8031c:	00011506 	br	80774 <main+0x508>
		fscanf(entrada, "%d", &step);
   80320:	e0bec404 	addi	r2,fp,-1264
   80324:	100d883a 	mov	r6,r2
   80328:	014002b4 	movhi	r5,10
   8032c:	2942ee04 	addi	r5,r5,3000
   80330:	e13ebd17 	ldw	r4,-1292(fp)
   80334:	00863780 	call	86378 <fscanf>
		fscanf(entrada, "%d", &data_size);
   80338:	e0bec504 	addi	r2,fp,-1260
   8033c:	100d883a 	mov	r6,r2
   80340:	014002b4 	movhi	r5,10
   80344:	2942ee04 	addi	r5,r5,3000
   80348:	e13ebd17 	ldw	r4,-1292(fp)
   8034c:	00863780 	call	86378 <fscanf>
		for (int i = 0; i < data_size; i++) {
   80350:	e03eb915 	stw	zero,-1308(fp)
   80354:	00001806 	br	803b8 <main+0x14c>
			fscanf(entrada, "%d %d", &x, &y);
   80358:	e0fec704 	addi	r3,fp,-1252
   8035c:	e0bec604 	addi	r2,fp,-1256
   80360:	180f883a 	mov	r7,r3
   80364:	100d883a 	mov	r6,r2
   80368:	014002b4 	movhi	r5,10
   8036c:	2942ef04 	addi	r5,r5,3004
   80370:	e13ebd17 	ldw	r4,-1292(fp)
   80374:	00863780 	call	86378 <fscanf>
			data[i] = PACKING_COORD(x,y);
   80378:	e0beb917 	ldw	r2,-1308(fp)
   8037c:	1085883a 	add	r2,r2,r2
   80380:	1085883a 	add	r2,r2,r2
   80384:	1007883a 	mov	r3,r2
   80388:	e0bebc17 	ldw	r2,-1296(fp)
   8038c:	10c5883a 	add	r2,r2,r3
   80390:	e0fec617 	ldw	r3,-1256(fp)
   80394:	19003fcc 	andi	r4,r3,255
   80398:	e0fec717 	ldw	r3,-1252(fp)
   8039c:	1806923a 	slli	r3,r3,8
   803a0:	18ffffcc 	andi	r3,r3,65535
   803a4:	20c6b03a 	or	r3,r4,r3
   803a8:	10c00015 	stw	r3,0(r2)
	fprintf(profilingCSV, "step,square_root,calculateIntersection,getAngleFromModel,leastSquare,coefficientOfDetermination,inliersOutliersMemory,inliersOutliers,squareDistanceBetweenPoints\n");

	while (!(feof(entrada))) {
		fscanf(entrada, "%d", &step);
		fscanf(entrada, "%d", &data_size);
		for (int i = 0; i < data_size; i++) {
   803ac:	e0beb917 	ldw	r2,-1308(fp)
   803b0:	10800044 	addi	r2,r2,1
   803b4:	e0beb915 	stw	r2,-1308(fp)
   803b8:	e0bec517 	ldw	r2,-1260(fp)
   803bc:	e0feb917 	ldw	r3,-1308(fp)
   803c0:	18bfe516 	blt	r3,r2,80358 <__alt_data_end+0xfffce358>
			fscanf(entrada, "%d %d", &x, &y);
			data[i] = PACKING_COORD(x,y);
		}
		fscanf(entrada, "%c", &next_line);
   803c4:	e0bec304 	addi	r2,fp,-1268
   803c8:	100d883a 	mov	r6,r2
   803cc:	014002b4 	movhi	r5,10
   803d0:	2942f104 	addi	r5,r5,3012
   803d4:	e13ebd17 	ldw	r4,-1292(fp)
   803d8:	00863780 	call	86378 <fscanf>


	if(data_size > MAX_POINTS) data_size = MAX_POINTS;
   803dc:	e0bec517 	ldw	r2,-1260(fp)
   803e0:	10804b50 	cmplti	r2,r2,301
   803e4:	1000021e 	bne	r2,zero,803f0 <main+0x184>
   803e8:	00804b04 	movi	r2,300
   803ec:	e0bec515 	stw	r2,-1260(fp)

	// ------------ Variaveis para modelo de linha ------------//
	//Posicao inical do robo
	int start;
	start = PACKING_COORD(0,25);
   803f0:	00864004 	movi	r2,6400
   803f4:	e0bec115 	stw	r2,-1276(fp)
	RansacResult model;
	Line reference;
	reference.a = 0;
   803f8:	e03ff815 	stw	zero,-32(fp)
	reference.b = 25;
   803fc:	00907234 	movhi	r2,16840
   80400:	e0bff915 	stw	r2,-28(fp)

	// ------------ Inicializa Variaveis para profiling ------------//
	square_root_counter = 0;
   80404:	d0270815 	stw	zero,-25568(gp)
	calculateIntersection_counter = 0;
   80408:	d0270715 	stw	zero,-25572(gp)
	getAngleFromModel_counter = 0;
   8040c:	d0270515 	stw	zero,-25580(gp)
	leastSquare_counter = 0;
   80410:	d0270b15 	stw	zero,-25556(gp)
	coefficientOfDetermination_counter = 0;
   80414:	d0270915 	stw	zero,-25564(gp)
	inliersOutliersMemory_counter = 0;
   80418:	d0270a15 	stw	zero,-25560(gp)
	inliersOutliers_counter = 0;
   8041c:	d0270615 	stw	zero,-25576(gp)
	squareDistanceBetweenPoints_counter = 0;
   80420:	d0270c15 	stw	zero,-25552(gp)

	model = RANSAC(data, start, outliers, data_size);
   80424:	e0bec517 	ldw	r2,-1260(fp)
   80428:	e0fffa04 	addi	r3,fp,-24
   8042c:	e13ec804 	addi	r4,fp,-1248
   80430:	d8800015 	stw	r2,0(sp)
   80434:	200f883a 	mov	r7,r4
   80438:	e1bec117 	ldw	r6,-1276(fp)
   8043c:	e17ebc17 	ldw	r5,-1296(fp)
   80440:	1809883a 	mov	r4,r3
   80444:	00814780 	call	81478 <RANSAC>
   80448:	e0bffa17 	ldw	r2,-24(fp)
   8044c:	e0bff415 	stw	r2,-48(fp)
   80450:	e0bffb17 	ldw	r2,-20(fp)
   80454:	e0bff515 	stw	r2,-44(fp)
   80458:	e0bffc17 	ldw	r2,-16(fp)
   8045c:	e0bff615 	stw	r2,-40(fp)
   80460:	e0bffd17 	ldw	r2,-12(fp)
   80464:	e0bff715 	stw	r2,-36(fp)

	// ------------ Variaveis para resultado final -------------//
	int intersection;
	float distance = 0;
   80468:	e03eba15 	stw	zero,-1304(fp)
	float angle = 0.0;
   8046c:	e03ebb15 	stw	zero,-1300(fp)

	if  ((model.bestModel.a < 0.1)&&(model.bestModel.a > -0.1)){
   80470:	e0bff417 	ldw	r2,-48(fp)
   80474:	1009883a 	mov	r4,r2
   80478:	0084ad80 	call	84ad8 <__extendsfdf2>
   8047c:	1011883a 	mov	r8,r2
   80480:	1813883a 	mov	r9,r3
   80484:	01a666b4 	movhi	r6,39322
   80488:	31a66684 	addi	r6,r6,-26214
   8048c:	01cfeeb4 	movhi	r7,16314
   80490:	39e66644 	addi	r7,r7,-26215
   80494:	4009883a 	mov	r4,r8
   80498:	480b883a 	mov	r5,r9
   8049c:	00837200 	call	83720 <__ledf2>
   804a0:	1000140e 	bge	r2,zero,804f4 <main+0x288>
   804a4:	e0bff417 	ldw	r2,-48(fp)
   804a8:	1009883a 	mov	r4,r2
   804ac:	0084ad80 	call	84ad8 <__extendsfdf2>
   804b0:	1011883a 	mov	r8,r2
   804b4:	1813883a 	mov	r9,r3
   804b8:	01a666b4 	movhi	r6,39322
   804bc:	31a66684 	addi	r6,r6,-26214
   804c0:	01efeeb4 	movhi	r7,49082
   804c4:	39e66644 	addi	r7,r7,-26215
   804c8:	4009883a 	mov	r4,r8
   804cc:	480b883a 	mov	r5,r9
   804d0:	00836440 	call	83644 <__gedf2>
   804d4:	0080070e 	bge	zero,r2,804f4 <main+0x288>
		distance = 50;
   804d8:	00909234 	movhi	r2,16968
   804dc:	e0beba15 	stw	r2,-1304(fp)
		angle = getAngleFromModel (model.bestModel.a);
   804e0:	e0bff417 	ldw	r2,-48(fp)
   804e4:	1009883a 	mov	r4,r2
   804e8:	008097c0 	call	8097c <getAngleFromModel>
   804ec:	e0bebb15 	stw	r2,-1300(fp)
   804f0:	00001106 	br	80538 <main+0x2cc>
	}
	else
	{
		intersection = calculateIntersection(&model.bestModel,  &reference);
   804f4:	e0fff804 	addi	r3,fp,-32
   804f8:	e0bff404 	addi	r2,fp,-48
   804fc:	180b883a 	mov	r5,r3
   80500:	1009883a 	mov	r4,r2
   80504:	00808980 	call	80898 <calculateIntersection>
   80508:	e0bec215 	stw	r2,-1272(fp)
		distance = square_root(squareDistanceBetweenPoints(intersection, start));
   8050c:	e17ec117 	ldw	r5,-1276(fp)
   80510:	e13ec217 	ldw	r4,-1272(fp)
   80514:	00813a80 	call	813a8 <squareDistanceBetweenPoints>
   80518:	1005feb2 	custom	250,r2,r2,zero
   8051c:	1009883a 	mov	r4,r2
   80520:	00807c80 	call	807c8 <square_root>
   80524:	e0beba15 	stw	r2,-1304(fp)
		angle = getAngleFromModel (model.bestModel.a);
   80528:	e0bff417 	ldw	r2,-48(fp)
   8052c:	1009883a 	mov	r4,r2
   80530:	008097c0 	call	8097c <getAngleFromModel>
   80534:	e0bebb15 	stw	r2,-1300(fp)
	}

	fprintf(saida, "%d\n", step);
   80538:	e0bec417 	ldw	r2,-1264(fp)
   8053c:	100d883a 	mov	r6,r2
   80540:	014002b4 	movhi	r5,10
   80544:	2942f204 	addi	r5,r5,3016
   80548:	e13ebe17 	ldw	r4,-1288(fp)
   8054c:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "[%f, %f]\n", model.bestModel.a, model.bestModel.b );
   80550:	e0bff417 	ldw	r2,-48(fp)
   80554:	1009883a 	mov	r4,r2
   80558:	0084ad80 	call	84ad8 <__extendsfdf2>
   8055c:	1021883a 	mov	r16,r2
   80560:	1823883a 	mov	r17,r3
   80564:	e0bff517 	ldw	r2,-44(fp)
   80568:	1009883a 	mov	r4,r2
   8056c:	0084ad80 	call	84ad8 <__extendsfdf2>
   80570:	1009883a 	mov	r4,r2
   80574:	180b883a 	mov	r5,r3
   80578:	d9000015 	stw	r4,0(sp)
   8057c:	d9400115 	stw	r5,4(sp)
   80580:	800d883a 	mov	r6,r16
   80584:	880f883a 	mov	r7,r17
   80588:	014002b4 	movhi	r5,10
   8058c:	2942f304 	addi	r5,r5,3020
   80590:	e13ebe17 	ldw	r4,-1288(fp)
   80594:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "%f\n", model.bestFit);
   80598:	e0bff617 	ldw	r2,-40(fp)
   8059c:	1009883a 	mov	r4,r2
   805a0:	0084ad80 	call	84ad8 <__extendsfdf2>
   805a4:	1009883a 	mov	r4,r2
   805a8:	180b883a 	mov	r5,r3
   805ac:	200d883a 	mov	r6,r4
   805b0:	280f883a 	mov	r7,r5
   805b4:	014002b4 	movhi	r5,10
   805b8:	2942f604 	addi	r5,r5,3032
   805bc:	e13ebe17 	ldw	r4,-1288(fp)
   805c0:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "%d\n", model.bestQty);
   805c4:	e0bff717 	ldw	r2,-36(fp)
   805c8:	100d883a 	mov	r6,r2
   805cc:	014002b4 	movhi	r5,10
   805d0:	2942f204 	addi	r5,r5,3016
   805d4:	e13ebe17 	ldw	r4,-1288(fp)
   805d8:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "%f\n", angle);
   805dc:	e13ebb17 	ldw	r4,-1300(fp)
   805e0:	0084ad80 	call	84ad8 <__extendsfdf2>
   805e4:	1009883a 	mov	r4,r2
   805e8:	180b883a 	mov	r5,r3
   805ec:	200d883a 	mov	r6,r4
   805f0:	280f883a 	mov	r7,r5
   805f4:	014002b4 	movhi	r5,10
   805f8:	2942f604 	addi	r5,r5,3032
   805fc:	e13ebe17 	ldw	r4,-1288(fp)
   80600:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "%f", distance);
   80604:	e13eba17 	ldw	r4,-1304(fp)
   80608:	0084ad80 	call	84ad8 <__extendsfdf2>
   8060c:	1009883a 	mov	r4,r2
   80610:	180b883a 	mov	r5,r3
   80614:	200d883a 	mov	r6,r4
   80618:	280f883a 	mov	r7,r5
   8061c:	014002b4 	movhi	r5,10
   80620:	2942f704 	addi	r5,r5,3036
   80624:	e13ebe17 	ldw	r4,-1288(fp)
   80628:	0085b140 	call	85b14 <fprintf>
	fprintf(saida, "%c", '\n');
   8062c:	e17ebe17 	ldw	r5,-1288(fp)
   80630:	01000284 	movi	r4,10
   80634:	0085bd80 	call	85bd8 <fputc>
	fprintf(saida, "%c", '\n');
   80638:	e17ebe17 	ldw	r5,-1288(fp)
   8063c:	01000284 	movi	r4,10
   80640:	0085bd80 	call	85bd8 <fputc>

	//Plot txt
	fprintf(profiling, "\n--Profiling STEP %d--\n", step);
   80644:	e0bec417 	ldw	r2,-1264(fp)
   80648:	100d883a 	mov	r6,r2
   8064c:	014002b4 	movhi	r5,10
   80650:	2942f804 	addi	r5,r5,3040
   80654:	e13ebf17 	ldw	r4,-1284(fp)
   80658:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "square_root \t%d\n", square_root_counter);
   8065c:	d0a70817 	ldw	r2,-25568(gp)
   80660:	100d883a 	mov	r6,r2
   80664:	014002b4 	movhi	r5,10
   80668:	2942fe04 	addi	r5,r5,3064
   8066c:	e13ebf17 	ldw	r4,-1284(fp)
   80670:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "calculateIntersection \t%d\n", calculateIntersection_counter);
   80674:	d0a70717 	ldw	r2,-25572(gp)
   80678:	100d883a 	mov	r6,r2
   8067c:	014002b4 	movhi	r5,10
   80680:	29430304 	addi	r5,r5,3084
   80684:	e13ebf17 	ldw	r4,-1284(fp)
   80688:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "getAngleFromModel \t%d\n", getAngleFromModel_counter);
   8068c:	d0a70517 	ldw	r2,-25580(gp)
   80690:	100d883a 	mov	r6,r2
   80694:	014002b4 	movhi	r5,10
   80698:	29430a04 	addi	r5,r5,3112
   8069c:	e13ebf17 	ldw	r4,-1284(fp)
   806a0:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "leastSquare \t%d\n", leastSquare_counter);
   806a4:	d0a70b17 	ldw	r2,-25556(gp)
   806a8:	100d883a 	mov	r6,r2
   806ac:	014002b4 	movhi	r5,10
   806b0:	29431004 	addi	r5,r5,3136
   806b4:	e13ebf17 	ldw	r4,-1284(fp)
   806b8:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "coefficientOfDetermination \t%d\n", coefficientOfDetermination_counter);
   806bc:	d0a70917 	ldw	r2,-25564(gp)
   806c0:	100d883a 	mov	r6,r2
   806c4:	014002b4 	movhi	r5,10
   806c8:	29431504 	addi	r5,r5,3156
   806cc:	e13ebf17 	ldw	r4,-1284(fp)
   806d0:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "inliersOutliersMemory \t%d\n", inliersOutliersMemory_counter);
   806d4:	d0a70a17 	ldw	r2,-25560(gp)
   806d8:	100d883a 	mov	r6,r2
   806dc:	014002b4 	movhi	r5,10
   806e0:	29431d04 	addi	r5,r5,3188
   806e4:	e13ebf17 	ldw	r4,-1284(fp)
   806e8:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "inliersOutliers \t%d\n", inliersOutliers_counter);
   806ec:	d0a70617 	ldw	r2,-25576(gp)
   806f0:	100d883a 	mov	r6,r2
   806f4:	014002b4 	movhi	r5,10
   806f8:	29432404 	addi	r5,r5,3216
   806fc:	e13ebf17 	ldw	r4,-1284(fp)
   80700:	0085b140 	call	85b14 <fprintf>
	fprintf(profiling, "squareDistanceBetweenPoints \t%d\n", squareDistanceBetweenPoints_counter);
   80704:	d0a70c17 	ldw	r2,-25552(gp)
   80708:	100d883a 	mov	r6,r2
   8070c:	014002b4 	movhi	r5,10
   80710:	29432a04 	addi	r5,r5,3240
   80714:	e13ebf17 	ldw	r4,-1284(fp)
   80718:	0085b140 	call	85b14 <fprintf>
	//CSV
	fprintf(profilingCSV, "%d,%d,%d,%d,%d,%d,%d,%d,%d\n", step, square_root_counter, calculateIntersection_counter, getAngleFromModel_counter, leastSquare_counter, coefficientOfDetermination_counter, inliersOutliersMemory_counter, inliersOutliers_counter, squareDistanceBetweenPoints_counter);
   8071c:	e27ec417 	ldw	r9,-1264(fp)
   80720:	d2a70817 	ldw	r10,-25568(gp)
   80724:	d0a70717 	ldw	r2,-25572(gp)
   80728:	d0e70517 	ldw	r3,-25580(gp)
   8072c:	d1270b17 	ldw	r4,-25556(gp)
   80730:	d1670917 	ldw	r5,-25564(gp)
   80734:	d1a70a17 	ldw	r6,-25560(gp)
   80738:	d1e70617 	ldw	r7,-25576(gp)
   8073c:	d2270c17 	ldw	r8,-25552(gp)
   80740:	da000615 	stw	r8,24(sp)
   80744:	d9c00515 	stw	r7,20(sp)
   80748:	d9800415 	stw	r6,16(sp)
   8074c:	d9400315 	stw	r5,12(sp)
   80750:	d9000215 	stw	r4,8(sp)
   80754:	d8c00115 	stw	r3,4(sp)
   80758:	d8800015 	stw	r2,0(sp)
   8075c:	500f883a 	mov	r7,r10
   80760:	480d883a 	mov	r6,r9
   80764:	014002b4 	movhi	r5,10
   80768:	29433304 	addi	r5,r5,3276
   8076c:	e13ec017 	ldw	r4,-1280(fp)
   80770:	0085b140 	call	85b14 <fprintf>
	}

	//Plot CSV
	fprintf(profilingCSV, "step,square_root,calculateIntersection,getAngleFromModel,leastSquare,coefficientOfDetermination,inliersOutliersMemory,inliersOutliers,squareDistanceBetweenPoints\n");

	while (!(feof(entrada))) {
   80774:	e0bebd17 	ldw	r2,-1292(fp)
   80778:	1080030b 	ldhu	r2,12(r2)
   8077c:	10bfffcc 	andi	r2,r2,65535
   80780:	1080080c 	andi	r2,r2,32
   80784:	103ee626 	beq	r2,zero,80320 <__alt_data_end+0xfffce320>
	//CSV
	fprintf(profilingCSV, "%d,%d,%d,%d,%d,%d,%d,%d,%d\n", step, square_root_counter, calculateIntersection_counter, getAngleFromModel_counter, leastSquare_counter, coefficientOfDetermination_counter, inliersOutliersMemory_counter, inliersOutliers_counter, squareDistanceBetweenPoints_counter);

	}

	fclose(entrada);
   80788:	e13ebd17 	ldw	r4,-1292(fp)
   8078c:	0084f680 	call	84f68 <fclose>
	fclose(saida);
   80790:	e13ebe17 	ldw	r4,-1288(fp)
   80794:	0084f680 	call	84f68 <fclose>
	fclose(profiling);
   80798:	e13ebf17 	ldw	r4,-1284(fp)
   8079c:	0084f680 	call	84f68 <fclose>
	fclose(profilingCSV);
   807a0:	e13ec017 	ldw	r4,-1280(fp)
   807a4:	0084f680 	call	84f68 <fclose>

	return 0;
   807a8:	0005883a 	mov	r2,zero

}
   807ac:	e6fffe04 	addi	sp,fp,-8
   807b0:	dfc00317 	ldw	ra,12(sp)
   807b4:	df000217 	ldw	fp,8(sp)
   807b8:	dc400117 	ldw	r17,4(sp)
   807bc:	dc000017 	ldw	r16,0(sp)
   807c0:	dec00404 	addi	sp,sp,16
   807c4:	f800283a 	ret

000807c8 <square_root>:
#define E 5              	// - A threshold value to determine data points that are fit well by the model (inlier).
#define N 10                // - Number of iterations required
#define MIN_DIST_POINTS 25  // - The minimum square distance of points required to select the sample


float square_root(float number) {
   807c8:	defffb04 	addi	sp,sp,-20
   807cc:	df000415 	stw	fp,16(sp)
   807d0:	df000404 	addi	fp,sp,16
   807d4:	e13fff15 	stw	r4,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   807d8:	00800074 	movhi	r2,1
   807dc:	10840c04 	addi	r2,r2,4144
   807e0:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   807e4:	00800074 	movhi	r2,1
   807e8:	10840c04 	addi	r2,r2,4144
   807ec:	00c00044 	movi	r3,1
   807f0:	10c00015 	stw	r3,0(r2)
	float x = number;
   807f4:	e0bfff17 	ldw	r2,-4(fp)
   807f8:	e0bffc15 	stw	r2,-16(fp)
	float y = 1;
   807fc:	008fe034 	movhi	r2,16256
   80800:	e0bffd15 	stw	r2,-12(fp)
    float precision = 0.1;
   80804:	008f7374 	movhi	r2,15821
   80808:	10b33344 	addi	r2,r2,-13107
   8080c:	e0bffe15 	stw	r2,-8(fp)
    while (x - y > precision) {
   80810:	00000a06 	br	8083c <square_root+0x74>
        x = (x + y) / 2;
   80814:	e0fffc17 	ldw	r3,-16(fp)
   80818:	e0bffd17 	ldw	r2,-12(fp)
   8081c:	1887ff72 	custom	253,r3,r3,r2
   80820:	00900034 	movhi	r2,16384
   80824:	1885fff2 	custom	255,r2,r3,r2
   80828:	e0bffc15 	stw	r2,-16(fp)
        y = number / x;
   8082c:	e0ffff17 	ldw	r3,-4(fp)
   80830:	e0bffc17 	ldw	r2,-16(fp)
   80834:	1885fff2 	custom	255,r2,r3,r2
   80838:	e0bffd15 	stw	r2,-12(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
	float x = number;
	float y = 1;
    float precision = 0.1;
    while (x - y > precision) {
   8083c:	e0fffc17 	ldw	r3,-16(fp)
   80840:	e0bffd17 	ldw	r2,-12(fp)
   80844:	1887ffb2 	custom	254,r3,r3,r2
   80848:	e0bffe17 	ldw	r2,-8(fp)
   8084c:	1885f972 	custom	229,r2,r3,r2
   80850:	103ff01e 	bne	r2,zero,80814 <__alt_data_end+0xfffce814>
        x = (x + y) / 2;
        y = number / x;
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   80854:	00800074 	movhi	r2,1
   80858:	10840c04 	addi	r2,r2,4144
   8085c:	00c00084 	movi	r3,2
   80860:	10c00015 	stw	r3,0(r2)
    square_root_counter+=*MEDIDOR_LEITURA;
   80864:	00800074 	movhi	r2,1
   80868:	10840b04 	addi	r2,r2,4140
   8086c:	10c00017 	ldw	r3,0(r2)
   80870:	d0a70817 	ldw	r2,-25568(gp)
   80874:	1885883a 	add	r2,r3,r2
   80878:	d0a70815 	stw	r2,-25568(gp)
    //printf("square_root = %d\n", *MEDIDOR_LEITURA);
    return x;
   8087c:	e0bffc17 	ldw	r2,-16(fp)
   80880:	1007883a 	mov	r3,r2
}
   80884:	1805883a 	mov	r2,r3
   80888:	e037883a 	mov	sp,fp
   8088c:	df000017 	ldw	fp,0(sp)
   80890:	dec00104 	addi	sp,sp,4
   80894:	f800283a 	ret

00080898 <calculateIntersection>:

int calculateIntersection(Line* k, Line* l) {
   80898:	defffa04 	addi	sp,sp,-24
   8089c:	df000515 	stw	fp,20(sp)
   808a0:	df000504 	addi	fp,sp,20
   808a4:	e13ffe15 	stw	r4,-8(fp)
   808a8:	e17fff15 	stw	r5,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   808ac:	00800074 	movhi	r2,1
   808b0:	10840c04 	addi	r2,r2,4144
   808b4:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   808b8:	00800074 	movhi	r2,1
   808bc:	10840c04 	addi	r2,r2,4144
   808c0:	00c00044 	movi	r3,1
   808c4:	10c00015 	stw	r3,0(r2)
    int intersection;
    int x = (l->b - k->b) / (k->a - l->a);
   808c8:	e0bfff17 	ldw	r2,-4(fp)
   808cc:	10c00117 	ldw	r3,4(r2)
   808d0:	e13ffe17 	ldw	r4,-8(fp)
   808d4:	20800117 	ldw	r2,4(r4)
   808d8:	1887ffb2 	custom	254,r3,r3,r2
   808dc:	e0bffe17 	ldw	r2,-8(fp)
   808e0:	11000017 	ldw	r4,0(r2)
   808e4:	e17fff17 	ldw	r5,-4(fp)
   808e8:	28800017 	ldw	r2,0(r5)
   808ec:	2085ffb2 	custom	254,r2,r4,r2
   808f0:	1885fff2 	custom	255,r2,r3,r2
   808f4:	1005fe72 	custom	249,r2,r2,zero
   808f8:	e0bffb15 	stw	r2,-20(fp)
    int y = (k->a * x + k->b);
   808fc:	e0bffe17 	ldw	r2,-8(fp)
   80900:	10c00017 	ldw	r3,0(r2)
   80904:	e0bffb17 	ldw	r2,-20(fp)
   80908:	1005feb2 	custom	250,r2,r2,zero
   8090c:	1887ff32 	custom	252,r3,r3,r2
   80910:	e13ffe17 	ldw	r4,-8(fp)
   80914:	20800117 	ldw	r2,4(r4)
   80918:	1885ff72 	custom	253,r2,r3,r2
   8091c:	1005fe72 	custom	249,r2,r2,zero
   80920:	e0bffc15 	stw	r2,-16(fp)
    intersection = PACKING_COORD(x,y);
   80924:	e0bffb17 	ldw	r2,-20(fp)
   80928:	10c03fcc 	andi	r3,r2,255
   8092c:	e0bffc17 	ldw	r2,-16(fp)
   80930:	1004923a 	slli	r2,r2,8
   80934:	10bfffcc 	andi	r2,r2,65535
   80938:	1884b03a 	or	r2,r3,r2
   8093c:	e0bffd15 	stw	r2,-12(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   80940:	00800074 	movhi	r2,1
   80944:	10840c04 	addi	r2,r2,4144
   80948:	00c00084 	movi	r3,2
   8094c:	10c00015 	stw	r3,0(r2)
    //printf("calculateIntersection = %d\n", *MEDIDOR_LEITURA);
    calculateIntersection_counter+=*MEDIDOR_LEITURA;
   80950:	00800074 	movhi	r2,1
   80954:	10840b04 	addi	r2,r2,4140
   80958:	10c00017 	ldw	r3,0(r2)
   8095c:	d0a70717 	ldw	r2,-25572(gp)
   80960:	1885883a 	add	r2,r3,r2
   80964:	d0a70715 	stw	r2,-25572(gp)
    return intersection;
   80968:	e0bffd17 	ldw	r2,-12(fp)
}
   8096c:	e037883a 	mov	sp,fp
   80970:	df000017 	ldw	fp,0(sp)
   80974:	dec00104 	addi	sp,sp,4
   80978:	f800283a 	ret

0008097c <getAngleFromModel>:

float getAngleFromModel(float a) {
   8097c:	defffc04 	addi	sp,sp,-16
   80980:	dfc00315 	stw	ra,12(sp)
   80984:	df000215 	stw	fp,8(sp)
   80988:	df000204 	addi	fp,sp,8
   8098c:	e13fff15 	stw	r4,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   80990:	00800074 	movhi	r2,1
   80994:	10840c04 	addi	r2,r2,4144
   80998:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   8099c:	00800074 	movhi	r2,1
   809a0:	10840c04 	addi	r2,r2,4144
   809a4:	00c00044 	movi	r3,1
   809a8:	10c00015 	stw	r3,0(r2)
    float radian = -atan(a);
   809ac:	e13fff17 	ldw	r4,-4(fp)
   809b0:	0084ad80 	call	84ad8 <__extendsfdf2>
   809b4:	100b883a 	mov	r5,r2
   809b8:	180d883a 	mov	r6,r3
   809bc:	2809883a 	mov	r4,r5
   809c0:	300b883a 	mov	r5,r6
   809c4:	00817500 	call	81750 <atan>
   809c8:	100b883a 	mov	r5,r2
   809cc:	180d883a 	mov	r6,r3
   809d0:	2809883a 	mov	r4,r5
   809d4:	300b883a 	mov	r5,r6
   809d8:	0084be80 	call	84be8 <__truncdfsf2>
   809dc:	1007883a 	mov	r3,r2
   809e0:	1805f872 	custom	225,r2,r3,zero
   809e4:	e0bffe15 	stw	r2,-8(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   809e8:	00800074 	movhi	r2,1
   809ec:	10840c04 	addi	r2,r2,4144
   809f0:	00c00084 	movi	r3,2
   809f4:	10c00015 	stw	r3,0(r2)
    getAngleFromModel_counter+=*MEDIDOR_LEITURA;
   809f8:	00800074 	movhi	r2,1
   809fc:	10840b04 	addi	r2,r2,4140
   80a00:	10c00017 	ldw	r3,0(r2)
   80a04:	d0a70517 	ldw	r2,-25580(gp)
   80a08:	1885883a 	add	r2,r3,r2
   80a0c:	d0a70515 	stw	r2,-25580(gp)
    //printf("getAngleFromModel = %d\n", *MEDIDOR_LEITURA);
    return radian;
   80a10:	e0bffe17 	ldw	r2,-8(fp)
   80a14:	1007883a 	mov	r3,r2
}
   80a18:	1805883a 	mov	r2,r3
   80a1c:	e037883a 	mov	sp,fp
   80a20:	dfc00117 	ldw	ra,4(sp)
   80a24:	df000017 	ldw	fp,0(sp)
   80a28:	dec00204 	addi	sp,sp,8
   80a2c:	f800283a 	ret

00080a30 <leastSquare>:

Line leastSquare(int* data, int size) {
   80a30:	deffeb04 	addi	sp,sp,-84
   80a34:	df001415 	stw	fp,80(sp)
   80a38:	df001404 	addi	fp,sp,80
   80a3c:	e13ffe15 	stw	r4,-8(fp)
   80a40:	e17fff15 	stw	r5,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   80a44:	00800074 	movhi	r2,1
   80a48:	10840c04 	addi	r2,r2,4144
   80a4c:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   80a50:	00800074 	movhi	r2,1
   80a54:	10840c04 	addi	r2,r2,4144
   80a58:	00c00044 	movi	r3,1
   80a5c:	10c00015 	stw	r3,0(r2)

	if (size == 0) {
   80a60:	e0bfff17 	ldw	r2,-4(fp)
   80a64:	1000061e 	bne	r2,zero,80a80 <leastSquare+0x50>
        Line line = {INFINITY, 0};
   80a68:	009fe034 	movhi	r2,32640
   80a6c:	e0bffa15 	stw	r2,-24(fp)
   80a70:	e03ffb15 	stw	zero,-20(fp)
        return line;
   80a74:	e0bffa17 	ldw	r2,-24(fp)
   80a78:	e0fffb17 	ldw	r3,-20(fp)
   80a7c:	00007006 	br	80c40 <leastSquare+0x210>
    }

	float sx = 0.0;
   80a80:	e03fec15 	stw	zero,-80(fp)
    float sy = 0.0;
   80a84:	e03fed15 	stw	zero,-76(fp)
	float sxy = 0.0;
   80a88:	e03fee15 	stw	zero,-72(fp)
	float sx2 = 0.0;
   80a8c:	e03fef15 	stw	zero,-68(fp)

    for (int i = 0; i < size; i++) {
   80a90:	e03ff015 	stw	zero,-64(fp)
   80a94:	00002706 	br	80b34 <leastSquare+0x104>
    	int coord = data[i];
   80a98:	e0bff017 	ldw	r2,-64(fp)
   80a9c:	1085883a 	add	r2,r2,r2
   80aa0:	1085883a 	add	r2,r2,r2
   80aa4:	1007883a 	mov	r3,r2
   80aa8:	e0bffe17 	ldw	r2,-8(fp)
   80aac:	10c5883a 	add	r2,r2,r3
   80ab0:	10800017 	ldw	r2,0(r2)
   80ab4:	e0bff115 	stw	r2,-60(fp)
    	float x = GET_X(coord);
   80ab8:	e0bff117 	ldw	r2,-60(fp)
   80abc:	10803fcc 	andi	r2,r2,255
   80ac0:	1005feb2 	custom	250,r2,r2,zero
   80ac4:	e0bff215 	stw	r2,-56(fp)
    	float y = GET_Y(coord);
   80ac8:	e0bff117 	ldw	r2,-60(fp)
   80acc:	1005d23a 	srai	r2,r2,8
   80ad0:	1005feb2 	custom	250,r2,r2,zero
   80ad4:	e0bff315 	stw	r2,-52(fp)
		sx += x;
   80ad8:	e0ffec17 	ldw	r3,-80(fp)
   80adc:	e0bff217 	ldw	r2,-56(fp)
   80ae0:	1885ff72 	custom	253,r2,r3,r2
   80ae4:	e0bfec15 	stw	r2,-80(fp)
		sy += y;
   80ae8:	e0ffed17 	ldw	r3,-76(fp)
   80aec:	e0bff317 	ldw	r2,-52(fp)
   80af0:	1885ff72 	custom	253,r2,r3,r2
   80af4:	e0bfed15 	stw	r2,-76(fp)
		sxy += x * y;
   80af8:	e0fff217 	ldw	r3,-56(fp)
   80afc:	e0bff317 	ldw	r2,-52(fp)
   80b00:	1885ff32 	custom	252,r2,r3,r2
   80b04:	e0ffee17 	ldw	r3,-72(fp)
   80b08:	1885ff72 	custom	253,r2,r3,r2
   80b0c:	e0bfee15 	stw	r2,-72(fp)
		sx2 += x * x;
   80b10:	e0fff217 	ldw	r3,-56(fp)
   80b14:	e0bff217 	ldw	r2,-56(fp)
   80b18:	1885ff32 	custom	252,r2,r3,r2
   80b1c:	e0ffef17 	ldw	r3,-68(fp)
   80b20:	1885ff72 	custom	253,r2,r3,r2
   80b24:	e0bfef15 	stw	r2,-68(fp)
	float sx = 0.0;
    float sy = 0.0;
	float sxy = 0.0;
	float sx2 = 0.0;

    for (int i = 0; i < size; i++) {
   80b28:	e0bff017 	ldw	r2,-64(fp)
   80b2c:	10800044 	addi	r2,r2,1
   80b30:	e0bff015 	stw	r2,-64(fp)
   80b34:	e0fff017 	ldw	r3,-64(fp)
   80b38:	e0bfff17 	ldw	r2,-4(fp)
   80b3c:	18bfd616 	blt	r3,r2,80a98 <__alt_data_end+0xfffcea98>
		sy += y;
		sxy += x * y;
		sx2 += x * x;
    }

    float avg_y = sy / size;
   80b40:	e0bfff17 	ldw	r2,-4(fp)
   80b44:	1005feb2 	custom	250,r2,r2,zero
   80b48:	e0ffed17 	ldw	r3,-76(fp)
   80b4c:	1885fff2 	custom	255,r2,r3,r2
   80b50:	e0bff415 	stw	r2,-48(fp)
    float den = size * sx2 - sx * sx;
   80b54:	e0bfff17 	ldw	r2,-4(fp)
   80b58:	1007feb2 	custom	250,r3,r2,zero
   80b5c:	e0bfef17 	ldw	r2,-68(fp)
   80b60:	1887ff32 	custom	252,r3,r3,r2
   80b64:	e13fec17 	ldw	r4,-80(fp)
   80b68:	e0bfec17 	ldw	r2,-80(fp)
   80b6c:	2085ff32 	custom	252,r2,r4,r2
   80b70:	1885ffb2 	custom	254,r2,r3,r2
   80b74:	e0bff515 	stw	r2,-44(fp)

    if (den == 0) {
   80b78:	e0bff517 	ldw	r2,-44(fp)
   80b7c:	0007883a 	mov	r3,zero
   80b80:	10c5f8b2 	custom	226,r2,r2,r3
   80b84:	1000071e 	bne	r2,zero,80ba4 <leastSquare+0x174>
        Line line = {INFINITY, avg_y};
   80b88:	009fe034 	movhi	r2,32640
   80b8c:	e0bffc15 	stw	r2,-16(fp)
   80b90:	e0bff417 	ldw	r2,-48(fp)
   80b94:	e0bffd15 	stw	r2,-12(fp)
        return line;
   80b98:	e0bffc17 	ldw	r2,-16(fp)
   80b9c:	e0fffd17 	ldw	r3,-12(fp)
   80ba0:	00002706 	br	80c40 <leastSquare+0x210>
    }

    float a = (size * sxy - sx * sy) / den;
   80ba4:	e0bfff17 	ldw	r2,-4(fp)
   80ba8:	1007feb2 	custom	250,r3,r2,zero
   80bac:	e0bfee17 	ldw	r2,-72(fp)
   80bb0:	1887ff32 	custom	252,r3,r3,r2
   80bb4:	e13fec17 	ldw	r4,-80(fp)
   80bb8:	e0bfed17 	ldw	r2,-76(fp)
   80bbc:	2085ff32 	custom	252,r2,r4,r2
   80bc0:	1887ffb2 	custom	254,r3,r3,r2
   80bc4:	e0bff517 	ldw	r2,-44(fp)
   80bc8:	1885fff2 	custom	255,r2,r3,r2
   80bcc:	e0bff615 	stw	r2,-40(fp)
    float b = (sy / size) - a * (sx / size);
   80bd0:	e0bfff17 	ldw	r2,-4(fp)
   80bd4:	1005feb2 	custom	250,r2,r2,zero
   80bd8:	e0ffed17 	ldw	r3,-76(fp)
   80bdc:	1887fff2 	custom	255,r3,r3,r2
   80be0:	e0bfff17 	ldw	r2,-4(fp)
   80be4:	1005feb2 	custom	250,r2,r2,zero
   80be8:	e13fec17 	ldw	r4,-80(fp)
   80bec:	2089fff2 	custom	255,r4,r4,r2
   80bf0:	e0bff617 	ldw	r2,-40(fp)
   80bf4:	2085ff32 	custom	252,r2,r4,r2
   80bf8:	1885ffb2 	custom	254,r2,r3,r2
   80bfc:	e0bff715 	stw	r2,-36(fp)

    Line line = {a, b};
   80c00:	e0bff617 	ldw	r2,-40(fp)
   80c04:	e0bff815 	stw	r2,-32(fp)
   80c08:	e0bff717 	ldw	r2,-36(fp)
   80c0c:	e0bff915 	stw	r2,-28(fp)

    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   80c10:	00800074 	movhi	r2,1
   80c14:	10840c04 	addi	r2,r2,4144
   80c18:	00c00084 	movi	r3,2
   80c1c:	10c00015 	stw	r3,0(r2)
    leastSquare_counter+=*MEDIDOR_LEITURA;
   80c20:	00800074 	movhi	r2,1
   80c24:	10840b04 	addi	r2,r2,4140
   80c28:	10c00017 	ldw	r3,0(r2)
   80c2c:	d0a70b17 	ldw	r2,-25556(gp)
   80c30:	1885883a 	add	r2,r3,r2
   80c34:	d0a70b15 	stw	r2,-25556(gp)
    //printf("leastSquare = %d\n", *MEDIDOR_LEITURA);
    return line;
   80c38:	e0bff817 	ldw	r2,-32(fp)
   80c3c:	e0fff917 	ldw	r3,-28(fp)
   80c40:	1009883a 	mov	r4,r2
   80c44:	180b883a 	mov	r5,r3
}
   80c48:	2005883a 	mov	r2,r4
   80c4c:	2807883a 	mov	r3,r5
   80c50:	e037883a 	mov	sp,fp
   80c54:	df000017 	ldw	fp,0(sp)
   80c58:	dec00104 	addi	sp,sp,4
   80c5c:	f800283a 	ret

00080c60 <coefficientOfDetermination>:

float coefficientOfDetermination(int* data, Line model, int avg_y, int data_size) {
   80c60:	defff104 	addi	sp,sp,-60
   80c64:	df000e15 	stw	fp,56(sp)
   80c68:	df000e04 	addi	fp,sp,56
   80c6c:	e13ffc15 	stw	r4,-16(fp)
   80c70:	e17ffd15 	stw	r5,-12(fp)
   80c74:	e1bffe15 	stw	r6,-8(fp)
   80c78:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   80c7c:	00800074 	movhi	r2,1
   80c80:	10840c04 	addi	r2,r2,4144
   80c84:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   80c88:	00800074 	movhi	r2,1
   80c8c:	10840c04 	addi	r2,r2,4144
   80c90:	00c00044 	movi	r3,1
   80c94:	10c00015 	stw	r3,0(r2)

	float ss_res = 0.0;
   80c98:	e03ff215 	stw	zero,-56(fp)
	float ss_tot = 0.0;
   80c9c:	e03ff315 	stw	zero,-52(fp)

	for (int i = 0; i < data_size; i++) {
   80ca0:	e03ff415 	stw	zero,-48(fp)
   80ca4:	00002e06 	br	80d60 <coefficientOfDetermination+0x100>
		int coord = data[i];
   80ca8:	e0bff417 	ldw	r2,-48(fp)
   80cac:	1085883a 	add	r2,r2,r2
   80cb0:	1085883a 	add	r2,r2,r2
   80cb4:	1007883a 	mov	r3,r2
   80cb8:	e0bffc17 	ldw	r2,-16(fp)
   80cbc:	10c5883a 	add	r2,r2,r3
   80cc0:	10800017 	ldw	r2,0(r2)
   80cc4:	e0bff515 	stw	r2,-44(fp)
		float x = GET_X(coord);
   80cc8:	e0bff517 	ldw	r2,-44(fp)
   80ccc:	10803fcc 	andi	r2,r2,255
   80cd0:	1005feb2 	custom	250,r2,r2,zero
   80cd4:	e0bff615 	stw	r2,-40(fp)
		float y = GET_Y(coord);
   80cd8:	e0bff517 	ldw	r2,-44(fp)
   80cdc:	1005d23a 	srai	r2,r2,8
   80ce0:	1005feb2 	custom	250,r2,r2,zero
   80ce4:	e0bff715 	stw	r2,-36(fp)
		float f = model.a * x + model.b;
   80ce8:	e0fffd17 	ldw	r3,-12(fp)
   80cec:	e0bff617 	ldw	r2,-40(fp)
   80cf0:	1887ff32 	custom	252,r3,r3,r2
   80cf4:	e0bffe17 	ldw	r2,-8(fp)
   80cf8:	1885ff72 	custom	253,r2,r3,r2
   80cfc:	e0bff815 	stw	r2,-32(fp)
		float y_f = y - f;
   80d00:	e0fff717 	ldw	r3,-36(fp)
   80d04:	e0bff817 	ldw	r2,-32(fp)
   80d08:	1885ffb2 	custom	254,r2,r3,r2
   80d0c:	e0bff915 	stw	r2,-28(fp)
		float y_y = y - avg_y;
   80d10:	e0bfff17 	ldw	r2,-4(fp)
   80d14:	1005feb2 	custom	250,r2,r2,zero
   80d18:	e0fff717 	ldw	r3,-36(fp)
   80d1c:	1885ffb2 	custom	254,r2,r3,r2
   80d20:	e0bffa15 	stw	r2,-24(fp)
		ss_res += y_f * y_f;
   80d24:	e0fff917 	ldw	r3,-28(fp)
   80d28:	e0bff917 	ldw	r2,-28(fp)
   80d2c:	1885ff32 	custom	252,r2,r3,r2
   80d30:	e0fff217 	ldw	r3,-56(fp)
   80d34:	1885ff72 	custom	253,r2,r3,r2
   80d38:	e0bff215 	stw	r2,-56(fp)
		ss_tot += y_y * y_y;
   80d3c:	e0fffa17 	ldw	r3,-24(fp)
   80d40:	e0bffa17 	ldw	r2,-24(fp)
   80d44:	1885ff32 	custom	252,r2,r3,r2
   80d48:	e0fff317 	ldw	r3,-52(fp)
   80d4c:	1885ff72 	custom	253,r2,r3,r2
   80d50:	e0bff315 	stw	r2,-52(fp)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem

	float ss_res = 0.0;
	float ss_tot = 0.0;

	for (int i = 0; i < data_size; i++) {
   80d54:	e0bff417 	ldw	r2,-48(fp)
   80d58:	10800044 	addi	r2,r2,1
   80d5c:	e0bff415 	stw	r2,-48(fp)
   80d60:	e0fff417 	ldw	r3,-48(fp)
   80d64:	e0800117 	ldw	r2,4(fp)
   80d68:	18bfcf16 	blt	r3,r2,80ca8 <__alt_data_end+0xfffceca8>
		float y_y = y - avg_y;
		ss_res += y_f * y_f;
		ss_tot += y_y * y_y;
	}

    float r = (ss_res / ss_tot);
   80d6c:	e0fff217 	ldw	r3,-56(fp)
   80d70:	e0bff317 	ldw	r2,-52(fp)
   80d74:	1885fff2 	custom	255,r2,r3,r2
   80d78:	e0bffb15 	stw	r2,-20(fp)

    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   80d7c:	00800074 	movhi	r2,1
   80d80:	10840c04 	addi	r2,r2,4144
   80d84:	00c00084 	movi	r3,2
   80d88:	10c00015 	stw	r3,0(r2)
    coefficientOfDetermination_counter+=*MEDIDOR_LEITURA;
   80d8c:	00800074 	movhi	r2,1
   80d90:	10840b04 	addi	r2,r2,4140
   80d94:	10c00017 	ldw	r3,0(r2)
   80d98:	d0a70917 	ldw	r2,-25564(gp)
   80d9c:	1885883a 	add	r2,r3,r2
   80da0:	d0a70915 	stw	r2,-25564(gp)
    //printf("coefficientOfDetermination = %d\n", *MEDIDOR_LEITURA);
    return r;
   80da4:	e0bffb17 	ldw	r2,-20(fp)
   80da8:	1007883a 	mov	r3,r2
}
   80dac:	1805883a 	mov	r2,r3
   80db0:	e037883a 	mov	sp,fp
   80db4:	df000017 	ldw	fp,0(sp)
   80db8:	dec00104 	addi	sp,sp,4
   80dbc:	f800283a 	ret

00080dc0 <inliersOutliersMemory>:

void inliersOutliersMemory(int* data, Line model, int* inliers, int* outliers, int dataSize, int* inlierSize, int* outlierSize) {
   80dc0:	defff404 	addi	sp,sp,-48
   80dc4:	dfc00b15 	stw	ra,44(sp)
   80dc8:	df000a15 	stw	fp,40(sp)
   80dcc:	df000a04 	addi	fp,sp,40
   80dd0:	e13ffc15 	stw	r4,-16(fp)
   80dd4:	e17ffd15 	stw	r5,-12(fp)
   80dd8:	e1bffe15 	stw	r6,-8(fp)
   80ddc:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   80de0:	00800074 	movhi	r2,1
   80de4:	10840c04 	addi	r2,r2,4144
   80de8:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   80dec:	00800074 	movhi	r2,1
   80df0:	10840c04 	addi	r2,r2,4144
   80df4:	00c00044 	movi	r3,1
   80df8:	10c00015 	stw	r3,0(r2)

	const float square2 = E * E * (model.a * model.a + 1.0);
   80dfc:	e0fffd17 	ldw	r3,-12(fp)
   80e00:	e0bffd17 	ldw	r2,-12(fp)
   80e04:	1885ff32 	custom	252,r2,r3,r2
   80e08:	1009883a 	mov	r4,r2
   80e0c:	0084ad80 	call	84ad8 <__extendsfdf2>
   80e10:	1011883a 	mov	r8,r2
   80e14:	1813883a 	mov	r9,r3
   80e18:	000d883a 	mov	r6,zero
   80e1c:	01cffc34 	movhi	r7,16368
   80e20:	4009883a 	mov	r4,r8
   80e24:	480b883a 	mov	r5,r9
   80e28:	00823c80 	call	823c8 <__adddf3>
   80e2c:	1009883a 	mov	r4,r2
   80e30:	180b883a 	mov	r5,r3
   80e34:	2005883a 	mov	r2,r4
   80e38:	2807883a 	mov	r3,r5
   80e3c:	000d883a 	mov	r6,zero
   80e40:	01d00e74 	movhi	r7,16441
   80e44:	1009883a 	mov	r4,r2
   80e48:	180b883a 	mov	r5,r3
   80e4c:	00838140 	call	83814 <__muldf3>
   80e50:	1009883a 	mov	r4,r2
   80e54:	180b883a 	mov	r5,r3
   80e58:	2005883a 	mov	r2,r4
   80e5c:	2807883a 	mov	r3,r5
   80e60:	1009883a 	mov	r4,r2
   80e64:	180b883a 	mov	r5,r3
   80e68:	0084be80 	call	84be8 <__truncdfsf2>
   80e6c:	1007883a 	mov	r3,r2
   80e70:	e0fff715 	stw	r3,-36(fp)
    int tempX, tempY, coord;
    float dist;

    for (int k = 0; k < dataSize; k++) {
   80e74:	e03ff615 	stw	zero,-40(fp)
   80e78:	00003e06 	br	80f74 <inliersOutliersMemory+0x1b4>
    	coord = data[k];
   80e7c:	e0bff617 	ldw	r2,-40(fp)
   80e80:	1085883a 	add	r2,r2,r2
   80e84:	1085883a 	add	r2,r2,r2
   80e88:	1007883a 	mov	r3,r2
   80e8c:	e0bffc17 	ldw	r2,-16(fp)
   80e90:	10c5883a 	add	r2,r2,r3
   80e94:	10800017 	ldw	r2,0(r2)
   80e98:	e0bff815 	stw	r2,-32(fp)
    	tempX = GET_X(coord);
   80e9c:	e0bff817 	ldw	r2,-32(fp)
   80ea0:	10803fcc 	andi	r2,r2,255
   80ea4:	e0bff915 	stw	r2,-28(fp)
    	tempY = GET_Y(coord);
   80ea8:	e0bff817 	ldw	r2,-32(fp)
   80eac:	1005d23a 	srai	r2,r2,8
   80eb0:	e0bffa15 	stw	r2,-24(fp)

        dist = (model.a * tempX - tempY + model.b);
   80eb4:	e0fffd17 	ldw	r3,-12(fp)
   80eb8:	e0bff917 	ldw	r2,-28(fp)
   80ebc:	1005feb2 	custom	250,r2,r2,zero
   80ec0:	1887ff32 	custom	252,r3,r3,r2
   80ec4:	e0bffa17 	ldw	r2,-24(fp)
   80ec8:	1005feb2 	custom	250,r2,r2,zero
   80ecc:	1887ffb2 	custom	254,r3,r3,r2
   80ed0:	e0bffe17 	ldw	r2,-8(fp)
   80ed4:	1885ff72 	custom	253,r2,r3,r2
   80ed8:	e0bffb15 	stw	r2,-20(fp)

        if (dist * dist <= square2) {
   80edc:	e0fffb17 	ldw	r3,-20(fp)
   80ee0:	e0bffb17 	ldw	r2,-20(fp)
   80ee4:	1887ff32 	custom	252,r3,r3,r2
   80ee8:	e0bff717 	ldw	r2,-36(fp)
   80eec:	1885f9b2 	custom	230,r2,r3,r2
   80ef0:	10000f26 	beq	r2,zero,80f30 <inliersOutliersMemory+0x170>
        	inliers[*inlierSize] = coord;
   80ef4:	e0800417 	ldw	r2,16(fp)
   80ef8:	10800017 	ldw	r2,0(r2)
   80efc:	1085883a 	add	r2,r2,r2
   80f00:	1085883a 	add	r2,r2,r2
   80f04:	1007883a 	mov	r3,r2
   80f08:	e0bfff17 	ldw	r2,-4(fp)
   80f0c:	10c5883a 	add	r2,r2,r3
   80f10:	e0fff817 	ldw	r3,-32(fp)
   80f14:	10c00015 	stw	r3,0(r2)
            (*inlierSize)++;
   80f18:	e0800417 	ldw	r2,16(fp)
   80f1c:	10800017 	ldw	r2,0(r2)
   80f20:	10c00044 	addi	r3,r2,1
   80f24:	e0800417 	ldw	r2,16(fp)
   80f28:	10c00015 	stw	r3,0(r2)
   80f2c:	00000e06 	br	80f68 <inliersOutliersMemory+0x1a8>
        } else {
        	outliers[*outlierSize] = coord;
   80f30:	e0800517 	ldw	r2,20(fp)
   80f34:	10800017 	ldw	r2,0(r2)
   80f38:	1085883a 	add	r2,r2,r2
   80f3c:	1085883a 	add	r2,r2,r2
   80f40:	1007883a 	mov	r3,r2
   80f44:	e0800217 	ldw	r2,8(fp)
   80f48:	10c5883a 	add	r2,r2,r3
   80f4c:	e0fff817 	ldw	r3,-32(fp)
   80f50:	10c00015 	stw	r3,0(r2)
            (*outlierSize)++;
   80f54:	e0800517 	ldw	r2,20(fp)
   80f58:	10800017 	ldw	r2,0(r2)
   80f5c:	10c00044 	addi	r3,r2,1
   80f60:	e0800517 	ldw	r2,20(fp)
   80f64:	10c00015 	stw	r3,0(r2)

	const float square2 = E * E * (model.a * model.a + 1.0);
    int tempX, tempY, coord;
    float dist;

    for (int k = 0; k < dataSize; k++) {
   80f68:	e0bff617 	ldw	r2,-40(fp)
   80f6c:	10800044 	addi	r2,r2,1
   80f70:	e0bff615 	stw	r2,-40(fp)
   80f74:	e0fff617 	ldw	r3,-40(fp)
   80f78:	e0800317 	ldw	r2,12(fp)
   80f7c:	18bfbf16 	blt	r3,r2,80e7c <__alt_data_end+0xfffcee7c>
        } else {
        	outliers[*outlierSize] = coord;
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   80f80:	00800074 	movhi	r2,1
   80f84:	10840c04 	addi	r2,r2,4144
   80f88:	00c00084 	movi	r3,2
   80f8c:	10c00015 	stw	r3,0(r2)
    inliersOutliersMemory_counter+=*MEDIDOR_LEITURA;
   80f90:	00800074 	movhi	r2,1
   80f94:	10840b04 	addi	r2,r2,4140
   80f98:	10c00017 	ldw	r3,0(r2)
   80f9c:	d0a70a17 	ldw	r2,-25560(gp)
   80fa0:	1885883a 	add	r2,r3,r2
   80fa4:	d0a70a15 	stw	r2,-25560(gp)
    //printf("inliersOutliersMemory = %d\n", *MEDIDOR_LEITURA);
}
   80fa8:	0001883a 	nop
   80fac:	e037883a 	mov	sp,fp
   80fb0:	dfc00117 	ldw	ra,4(sp)
   80fb4:	df000017 	ldw	fp,0(sp)
   80fb8:	dec00204 	addi	sp,sp,8
   80fbc:	f800283a 	ret

00080fc0 <inliersOutliers>:

void inliersOutliers(int* data, Line model, int* inliers, int* outliers, int dataSize, int* inlierSize, int* outlierSize) {
   80fc0:	defff204 	addi	sp,sp,-56
   80fc4:	dfc00d15 	stw	ra,52(sp)
   80fc8:	df000c15 	stw	fp,48(sp)
   80fcc:	df000c04 	addi	fp,sp,48
   80fd0:	e13ffc15 	stw	r4,-16(fp)
   80fd4:	e17ffd15 	stw	r5,-12(fp)
   80fd8:	e1bffe15 	stw	r6,-8(fp)
   80fdc:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   80fe0:	00800074 	movhi	r2,1
   80fe4:	10840c04 	addi	r2,r2,4144
   80fe8:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   80fec:	00800074 	movhi	r2,1
   80ff0:	10840c04 	addi	r2,r2,4144
   80ff4:	00c00044 	movi	r3,1
   80ff8:	10c00015 	stw	r3,0(r2)
	int a, b, px, py, coord;

	int threshold_fixed = (int)(E * SCALE_FACTOR) * (int)(E * SCALE_FACTOR);
   80ffc:	00827104 	movi	r2,2500
   81000:	e0bff515 	stw	r2,-44(fp)
	int * ponteiro = INLIERS_ESCRITA;
   81004:	00800074 	movhi	r2,1
   81008:	10840004 	addi	r2,r2,4096
   8100c:	e0bff615 	stw	r2,-40(fp)

	a = (int)(model.a * SCALE_FACTOR);   // slope of the line
   81010:	e0fffd17 	ldw	r3,-12(fp)
   81014:	00904834 	movhi	r2,16672
   81018:	1885ff32 	custom	252,r2,r3,r2
   8101c:	1005fe72 	custom	249,r2,r2,zero
   81020:	e0bff715 	stw	r2,-36(fp)
	b = (int)(model.b * SCALE_FACTOR);   // y-intercept of the line
   81024:	e0fffe17 	ldw	r3,-8(fp)
   81028:	00904834 	movhi	r2,16672
   8102c:	1885ff32 	custom	252,r2,r3,r2
   81030:	1005fe72 	custom	249,r2,r2,zero
   81034:	e0bff815 	stw	r2,-32(fp)
	ponteiro[0] = SCALE_FACTOR;
   81038:	e0bff617 	ldw	r2,-40(fp)
   8103c:	00c00284 	movi	r3,10
   81040:	10c00015 	stw	r3,0(r2)
	ponteiro[1]  = a;
   81044:	e0bff617 	ldw	r2,-40(fp)
   81048:	10800104 	addi	r2,r2,4
   8104c:	e0fff717 	ldw	r3,-36(fp)
   81050:	10c00015 	stw	r3,0(r2)
	ponteiro[2]  = b;
   81054:	e0bff617 	ldw	r2,-40(fp)
   81058:	10800204 	addi	r2,r2,8
   8105c:	e0fff817 	ldw	r3,-32(fp)
   81060:	10c00015 	stw	r3,0(r2)
	ponteiro[5] = threshold_fixed;
   81064:	e0bff617 	ldw	r2,-40(fp)
   81068:	10800504 	addi	r2,r2,20
   8106c:	e0fff517 	ldw	r3,-44(fp)
   81070:	10c00015 	stw	r3,0(r2)
    for (int k = 0; k < dataSize; k++) {
   81074:	e03ff415 	stw	zero,-48(fp)
   81078:	00004006 	br	8117c <inliersOutliers+0x1bc>
    	coord = data[k];
   8107c:	e0bff417 	ldw	r2,-48(fp)
   81080:	1085883a 	add	r2,r2,r2
   81084:	1085883a 	add	r2,r2,r2
   81088:	1007883a 	mov	r3,r2
   8108c:	e0bffc17 	ldw	r2,-16(fp)
   81090:	10c5883a 	add	r2,r2,r3
   81094:	10800017 	ldw	r2,0(r2)
   81098:	e0bff915 	stw	r2,-28(fp)
		px = (GET_X(coord) * SCALE_FACTOR);  // x-coordinate of the point
   8109c:	e0bff917 	ldw	r2,-28(fp)
   810a0:	10803fcc 	andi	r2,r2,255
   810a4:	01400284 	movi	r5,10
   810a8:	1009883a 	mov	r4,r2
   810ac:	00823a00 	call	823a0 <__mulsi3>
   810b0:	e0bffa15 	stw	r2,-24(fp)
		py = (GET_Y(coord) * SCALE_FACTOR);  // y-coordinate of the point
   810b4:	e0bff917 	ldw	r2,-28(fp)
   810b8:	1005d23a 	srai	r2,r2,8
   810bc:	01400284 	movi	r5,10
   810c0:	1009883a 	mov	r4,r2
   810c4:	00823a00 	call	823a0 <__mulsi3>
   810c8:	e0bffb15 	stw	r2,-20(fp)
		ponteiro[3]  = px;
   810cc:	e0bff617 	ldw	r2,-40(fp)
   810d0:	10800304 	addi	r2,r2,12
   810d4:	e0fffa17 	ldw	r3,-24(fp)
   810d8:	10c00015 	stw	r3,0(r2)
		ponteiro[4] = py;
   810dc:	e0bff617 	ldw	r2,-40(fp)
   810e0:	10800404 	addi	r2,r2,16
   810e4:	e0fffb17 	ldw	r3,-20(fp)
   810e8:	10c00015 	stw	r3,0(r2)

        if (*INLIERS_LEITURA) {
   810ec:	00800074 	movhi	r2,1
   810f0:	10840a04 	addi	r2,r2,4136
   810f4:	10800017 	ldw	r2,0(r2)
   810f8:	10000f26 	beq	r2,zero,81138 <inliersOutliers+0x178>
            inliers[*inlierSize] = coord;
   810fc:	e0800417 	ldw	r2,16(fp)
   81100:	10800017 	ldw	r2,0(r2)
   81104:	1085883a 	add	r2,r2,r2
   81108:	1085883a 	add	r2,r2,r2
   8110c:	1007883a 	mov	r3,r2
   81110:	e0bfff17 	ldw	r2,-4(fp)
   81114:	10c5883a 	add	r2,r2,r3
   81118:	e0fff917 	ldw	r3,-28(fp)
   8111c:	10c00015 	stw	r3,0(r2)
            (*inlierSize)++;
   81120:	e0800417 	ldw	r2,16(fp)
   81124:	10800017 	ldw	r2,0(r2)
   81128:	10c00044 	addi	r3,r2,1
   8112c:	e0800417 	ldw	r2,16(fp)
   81130:	10c00015 	stw	r3,0(r2)
   81134:	00000e06 	br	81170 <inliersOutliers+0x1b0>
        } else {
            outliers[*outlierSize] = coord;
   81138:	e0800517 	ldw	r2,20(fp)
   8113c:	10800017 	ldw	r2,0(r2)
   81140:	1085883a 	add	r2,r2,r2
   81144:	1085883a 	add	r2,r2,r2
   81148:	1007883a 	mov	r3,r2
   8114c:	e0800217 	ldw	r2,8(fp)
   81150:	10c5883a 	add	r2,r2,r3
   81154:	e0fff917 	ldw	r3,-28(fp)
   81158:	10c00015 	stw	r3,0(r2)
            (*outlierSize)++;
   8115c:	e0800517 	ldw	r2,20(fp)
   81160:	10800017 	ldw	r2,0(r2)
   81164:	10c00044 	addi	r3,r2,1
   81168:	e0800517 	ldw	r2,20(fp)
   8116c:	10c00015 	stw	r3,0(r2)
	b = (int)(model.b * SCALE_FACTOR);   // y-intercept of the line
	ponteiro[0] = SCALE_FACTOR;
	ponteiro[1]  = a;
	ponteiro[2]  = b;
	ponteiro[5] = threshold_fixed;
    for (int k = 0; k < dataSize; k++) {
   81170:	e0bff417 	ldw	r2,-48(fp)
   81174:	10800044 	addi	r2,r2,1
   81178:	e0bff415 	stw	r2,-48(fp)
   8117c:	e0fff417 	ldw	r3,-48(fp)
   81180:	e0800317 	ldw	r2,12(fp)
   81184:	18bfbd16 	blt	r3,r2,8107c <__alt_data_end+0xfffcf07c>
        } else {
            outliers[*outlierSize] = coord;
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   81188:	00800074 	movhi	r2,1
   8118c:	10840c04 	addi	r2,r2,4144
   81190:	00c00084 	movi	r3,2
   81194:	10c00015 	stw	r3,0(r2)
    inliersOutliers_counter+=*MEDIDOR_LEITURA;
   81198:	00800074 	movhi	r2,1
   8119c:	10840b04 	addi	r2,r2,4140
   811a0:	10c00017 	ldw	r3,0(r2)
   811a4:	d0a70617 	ldw	r2,-25576(gp)
   811a8:	1885883a 	add	r2,r3,r2
   811ac:	d0a70615 	stw	r2,-25576(gp)
    //printf("inliersOutliers = %d\n", *MEDIDOR_LEITURA);
}
   811b0:	0001883a 	nop
   811b4:	e037883a 	mov	sp,fp
   811b8:	dfc00117 	ldw	ra,4(sp)
   811bc:	df000017 	ldw	fp,0(sp)
   811c0:	dec00204 	addi	sp,sp,8
   811c4:	f800283a 	ret

000811c8 <checkModel>:

void checkModel(int* data, int* temp, RansacResult* rs, int data_size, int temp_size) {
   811c8:	defd9504 	addi	sp,sp,-2476
   811cc:	dfc26a15 	stw	ra,2472(sp)
   811d0:	df026915 	stw	fp,2468(sp)
   811d4:	df026904 	addi	fp,sp,2468
   811d8:	e13ffc15 	stw	r4,-16(fp)
   811dc:	e17ffd15 	stw	r5,-12(fp)
   811e0:	e1bffe15 	stw	r6,-8(fp)
   811e4:	e1ffff15 	stw	r7,-4(fp)
    int inliers[MAX_POINTS];
    int outliers[MAX_POINTS];
    int inlinersSize = 0;
   811e8:	e03ff615 	stw	zero,-40(fp)
    int outlierSize = 0;
   811ec:	e03ff715 	stw	zero,-36(fp)
    Line model = leastSquare(temp, temp_size);
   811f0:	e1400217 	ldw	r5,8(fp)
   811f4:	e13ffd17 	ldw	r4,-12(fp)
   811f8:	0080a300 	call	80a30 <leastSquare>
   811fc:	1009883a 	mov	r4,r2
   81200:	180b883a 	mov	r5,r3
   81204:	e13ff815 	stw	r4,-32(fp)
   81208:	e17ff915 	stw	r5,-28(fp)

    inliersOutliers(data, model, inliers, outliers, data_size, &inlinersSize, &outlierSize);
   8120c:	e0fd9e04 	addi	r3,fp,-2440
   81210:	e0bff704 	addi	r2,fp,-36
   81214:	d8800315 	stw	r2,12(sp)
   81218:	e0bff604 	addi	r2,fp,-40
   8121c:	d8800215 	stw	r2,8(sp)
   81220:	e0bfff17 	ldw	r2,-4(fp)
   81224:	d8800115 	stw	r2,4(sp)
   81228:	e0beca04 	addi	r2,fp,-1240
   8122c:	d8800015 	stw	r2,0(sp)
   81230:	180f883a 	mov	r7,r3
   81234:	e17ff817 	ldw	r5,-32(fp)
   81238:	e1bff917 	ldw	r6,-28(fp)
   8123c:	e13ffc17 	ldw	r4,-16(fp)
   81240:	0080fc00 	call	80fc0 <inliersOutliers>

    if(inlinersSize >= rs->bestQty && inlinersSize >= (int)(data_size * C)){
   81244:	e0bffe17 	ldw	r2,-8(fp)
   81248:	10800317 	ldw	r2,12(r2)
   8124c:	e0fff617 	ldw	r3,-40(fp)
   81250:	18804f16 	blt	r3,r2,81390 <checkModel+0x1c8>
   81254:	e13fff17 	ldw	r4,-4(fp)
   81258:	00849fc0 	call	849fc <__floatsidf>
   8125c:	1011883a 	mov	r8,r2
   81260:	1813883a 	mov	r9,r3
   81264:	000d883a 	mov	r6,zero
   81268:	01cff834 	movhi	r7,16352
   8126c:	4009883a 	mov	r4,r8
   81270:	480b883a 	mov	r5,r9
   81274:	00838140 	call	83814 <__muldf3>
   81278:	1009883a 	mov	r4,r2
   8127c:	180b883a 	mov	r5,r3
   81280:	2005883a 	mov	r2,r4
   81284:	2807883a 	mov	r3,r5
   81288:	1009883a 	mov	r4,r2
   8128c:	180b883a 	mov	r5,r3
   81290:	008497c0 	call	8497c <__fixdfsi>
   81294:	1007883a 	mov	r3,r2
   81298:	e0bff617 	ldw	r2,-40(fp)
   8129c:	10c03c16 	blt	r2,r3,81390 <checkModel+0x1c8>
        Line inliersModel = leastSquare(inliers, inlinersSize);
   812a0:	e0fff617 	ldw	r3,-40(fp)
   812a4:	e0bd9e04 	addi	r2,fp,-2440
   812a8:	180b883a 	mov	r5,r3
   812ac:	1009883a 	mov	r4,r2
   812b0:	0080a300 	call	80a30 <leastSquare>
   812b4:	1009883a 	mov	r4,r2
   812b8:	180b883a 	mov	r5,r3
   812bc:	e13ffa15 	stw	r4,-24(fp)
   812c0:	e17ffb15 	stw	r5,-20(fp)
        int inliersAvg_y = 0;
   812c4:	e03d9b15 	stw	zero,-2452(fp)
        for (int i = 0; i < inlinersSize; i++) {
   812c8:	e03d9c15 	stw	zero,-2448(fp)
   812cc:	00000e06 	br	81308 <checkModel+0x140>
            inliersAvg_y += GET_Y(inliers[i]);
   812d0:	e0bd9c17 	ldw	r2,-2448(fp)
   812d4:	1085883a 	add	r2,r2,r2
   812d8:	1085883a 	add	r2,r2,r2
   812dc:	e0fd9b04 	addi	r3,fp,-2452
   812e0:	1885883a 	add	r2,r3,r2
   812e4:	10800304 	addi	r2,r2,12
   812e8:	10800017 	ldw	r2,0(r2)
   812ec:	1005d23a 	srai	r2,r2,8
   812f0:	e0fd9b17 	ldw	r3,-2452(fp)
   812f4:	1885883a 	add	r2,r3,r2
   812f8:	e0bd9b15 	stw	r2,-2452(fp)
    inliersOutliers(data, model, inliers, outliers, data_size, &inlinersSize, &outlierSize);

    if(inlinersSize >= rs->bestQty && inlinersSize >= (int)(data_size * C)){
        Line inliersModel = leastSquare(inliers, inlinersSize);
        int inliersAvg_y = 0;
        for (int i = 0; i < inlinersSize; i++) {
   812fc:	e0bd9c17 	ldw	r2,-2448(fp)
   81300:	10800044 	addi	r2,r2,1
   81304:	e0bd9c15 	stw	r2,-2448(fp)
   81308:	e0bff617 	ldw	r2,-40(fp)
   8130c:	e0fd9c17 	ldw	r3,-2448(fp)
   81310:	18bfef16 	blt	r3,r2,812d0 <__alt_data_end+0xfffcf2d0>
            inliersAvg_y += GET_Y(inliers[i]);
        }
        inliersAvg_y /= inlinersSize;
   81314:	e0bff617 	ldw	r2,-40(fp)
   81318:	100b883a 	mov	r5,r2
   8131c:	e13d9b17 	ldw	r4,-2452(fp)
   81320:	00821ec0 	call	821ec <__divsi3>
   81324:	e0bd9b15 	stw	r2,-2452(fp)
        float  inliersFit = coefficientOfDetermination(inliers, inliersModel, inliersAvg_y, data_size);
   81328:	e0fd9e04 	addi	r3,fp,-2440
   8132c:	e0bfff17 	ldw	r2,-4(fp)
   81330:	d8800015 	stw	r2,0(sp)
   81334:	e1fd9b17 	ldw	r7,-2452(fp)
   81338:	e17ffa17 	ldw	r5,-24(fp)
   8133c:	e1bffb17 	ldw	r6,-20(fp)
   81340:	1809883a 	mov	r4,r3
   81344:	0080c600 	call	80c60 <coefficientOfDetermination>
   81348:	e0bd9d15 	stw	r2,-2444(fp)
        if (inliersFit < rs->bestFit) {
   8134c:	e0bffe17 	ldw	r2,-8(fp)
   81350:	10c00217 	ldw	r3,8(r2)
   81354:	e0bd9d17 	ldw	r2,-2444(fp)
   81358:	1885f972 	custom	229,r2,r3,r2
   8135c:	1000011e 	bne	r2,zero,81364 <checkModel+0x19c>
        rs->bestModel = inliersModel;
        rs->bestFit = inliersFit;
        rs->bestQty = inlinersSize;
        }
    }
}
   81360:	00000b06 	br	81390 <checkModel+0x1c8>
            inliersAvg_y += GET_Y(inliers[i]);
        }
        inliersAvg_y /= inlinersSize;
        float  inliersFit = coefficientOfDetermination(inliers, inliersModel, inliersAvg_y, data_size);
        if (inliersFit < rs->bestFit) {
        rs->bestModel = inliersModel;
   81364:	e0bffe17 	ldw	r2,-8(fp)
   81368:	e0fffa17 	ldw	r3,-24(fp)
   8136c:	10c00015 	stw	r3,0(r2)
   81370:	e0fffb17 	ldw	r3,-20(fp)
   81374:	10c00115 	stw	r3,4(r2)
        rs->bestFit = inliersFit;
   81378:	e0bffe17 	ldw	r2,-8(fp)
   8137c:	e0fd9d17 	ldw	r3,-2444(fp)
   81380:	10c00215 	stw	r3,8(r2)
        rs->bestQty = inlinersSize;
   81384:	e0fff617 	ldw	r3,-40(fp)
   81388:	e0bffe17 	ldw	r2,-8(fp)
   8138c:	10c00315 	stw	r3,12(r2)
        }
    }
}
   81390:	0001883a 	nop
   81394:	e037883a 	mov	sp,fp
   81398:	dfc00117 	ldw	ra,4(sp)
   8139c:	df000017 	ldw	fp,0(sp)
   813a0:	dec00204 	addi	sp,sp,8
   813a4:	f800283a 	ret

000813a8 <squareDistanceBetweenPoints>:

int squareDistanceBetweenPoints (int a, int b){
   813a8:	defff804 	addi	sp,sp,-32
   813ac:	dfc00715 	stw	ra,28(sp)
   813b0:	df000615 	stw	fp,24(sp)
   813b4:	dc000515 	stw	r16,20(sp)
   813b8:	df000604 	addi	fp,sp,24
   813bc:	e13ffd15 	stw	r4,-12(fp)
   813c0:	e17ffe15 	stw	r5,-8(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   813c4:	00800074 	movhi	r2,1
   813c8:	10840c04 	addi	r2,r2,4144
   813cc:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   813d0:	00800074 	movhi	r2,1
   813d4:	10840c04 	addi	r2,r2,4144
   813d8:	00c00044 	movi	r3,1
   813dc:	10c00015 	stw	r3,0(r2)
	int dx = GET_X(a) - GET_X(b);
   813e0:	e0bffd17 	ldw	r2,-12(fp)
   813e4:	10c03fcc 	andi	r3,r2,255
   813e8:	e0bffe17 	ldw	r2,-8(fp)
   813ec:	10803fcc 	andi	r2,r2,255
   813f0:	1885c83a 	sub	r2,r3,r2
   813f4:	e0bffa15 	stw	r2,-24(fp)
    int dy = GET_Y(a) - GET_Y(b);
   813f8:	e0bffd17 	ldw	r2,-12(fp)
   813fc:	1007d23a 	srai	r3,r2,8
   81400:	e0bffe17 	ldw	r2,-8(fp)
   81404:	1005d23a 	srai	r2,r2,8
   81408:	1885c83a 	sub	r2,r3,r2
   8140c:	e0bffb15 	stw	r2,-20(fp)
    int resultado = (dx * dx) + (dy * dy);
   81410:	e17ffa17 	ldw	r5,-24(fp)
   81414:	e13ffa17 	ldw	r4,-24(fp)
   81418:	00823a00 	call	823a0 <__mulsi3>
   8141c:	1021883a 	mov	r16,r2
   81420:	e17ffb17 	ldw	r5,-20(fp)
   81424:	e13ffb17 	ldw	r4,-20(fp)
   81428:	00823a00 	call	823a0 <__mulsi3>
   8142c:	8085883a 	add	r2,r16,r2
   81430:	e0bffc15 	stw	r2,-16(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   81434:	00800074 	movhi	r2,1
   81438:	10840c04 	addi	r2,r2,4144
   8143c:	00c00084 	movi	r3,2
   81440:	10c00015 	stw	r3,0(r2)
    squareDistanceBetweenPoints_counter+=*MEDIDOR_LEITURA;
   81444:	00800074 	movhi	r2,1
   81448:	10840b04 	addi	r2,r2,4140
   8144c:	10c00017 	ldw	r3,0(r2)
   81450:	d0a70c17 	ldw	r2,-25552(gp)
   81454:	1885883a 	add	r2,r3,r2
   81458:	d0a70c15 	stw	r2,-25552(gp)
    //printf("squareDistanceBetweenPoints = %d\n", *MEDIDOR_LEITURA);
    return resultado;
   8145c:	e0bffc17 	ldw	r2,-16(fp)
}
   81460:	e6ffff04 	addi	sp,fp,-4
   81464:	dfc00217 	ldw	ra,8(sp)
   81468:	df000117 	ldw	fp,4(sp)
   8146c:	dc000017 	ldw	r16,0(sp)
   81470:	dec00304 	addi	sp,sp,12
   81474:	f800283a 	ret

00081478 <RANSAC>:

RansacResult RANSAC(int* data, int botPos, int* outliers, int data_size) {
   81478:	defeb404 	addi	sp,sp,-1328
   8147c:	dfc14b15 	stw	ra,1324(sp)
   81480:	df014a15 	stw	fp,1320(sp)
   81484:	ddc14915 	stw	r23,1316(sp)
   81488:	dd814815 	stw	r22,1312(sp)
   8148c:	dd414715 	stw	r21,1308(sp)
   81490:	dd014615 	stw	r20,1304(sp)
   81494:	dcc14515 	stw	r19,1300(sp)
   81498:	dc814415 	stw	r18,1296(sp)
   8149c:	dc414315 	stw	r17,1292(sp)
   814a0:	dc014215 	stw	r16,1288(sp)
   814a4:	df014a04 	addi	fp,sp,1320
   814a8:	e13ff315 	stw	r4,-52(fp)
   814ac:	e17ff415 	stw	r5,-48(fp)
   814b0:	e1bff515 	stw	r6,-44(fp)
   814b4:	e1fff615 	stw	r7,-40(fp)
   814b8:	d805883a 	mov	r2,sp
   814bc:	e0bff715 	stw	r2,-36(fp)
    RansacResult rs;

    rs.bestModel.a = 0.0;
   814c0:	e03ec115 	stw	zero,-1276(fp)
    rs.bestModel.b = (float)GET_Y(botPos);
   814c4:	e0bff517 	ldw	r2,-44(fp)
   814c8:	1005d23a 	srai	r2,r2,8
   814cc:	1005feb2 	custom	250,r2,r2,zero
   814d0:	e0bec215 	stw	r2,-1272(fp)
    rs.bestFit = INFINITY;
   814d4:	009fe034 	movhi	r2,32640
   814d8:	e0bec315 	stw	r2,-1268(fp)
    rs.bestQty = 0;
   814dc:	e03ec415 	stw	zero,-1264(fp)

    int inliers[MAX_POINTS];

    int temp_dist_points = 0;
   814e0:	e03eba15 	stw	zero,-1304(fp)
    int temp_index = 0;
   814e4:	e03ebd15 	stw	zero,-1292(fp)
    int loopCounter = 0;
   814e8:	e03ebb15 	stw	zero,-1300(fp)
    int inlinersSize = 0;
   814ec:	e03ff115 	stw	zero,-60(fp)
    int outlierSize = 0;
   814f0:	e03ff215 	stw	zero,-56(fp)

    inliersOutliersMemory(data, rs.bestModel, inliers, outliers, data_size, &inlinersSize, &outlierSize);
   814f4:	e0fec504 	addi	r3,fp,-1260
   814f8:	e0bff204 	addi	r2,fp,-56
   814fc:	d8800315 	stw	r2,12(sp)
   81500:	e0bff104 	addi	r2,fp,-60
   81504:	d8800215 	stw	r2,8(sp)
   81508:	e0800217 	ldw	r2,8(fp)
   8150c:	d8800115 	stw	r2,4(sp)
   81510:	e0bff617 	ldw	r2,-40(fp)
   81514:	d8800015 	stw	r2,0(sp)
   81518:	180f883a 	mov	r7,r3
   8151c:	e17ec117 	ldw	r5,-1276(fp)
   81520:	e1bec217 	ldw	r6,-1272(fp)
   81524:	e13ff417 	ldw	r4,-48(fp)
   81528:	0080dc00 	call	80dc0 <inliersOutliersMemory>

    if (outlierSize <= 15) {
   8152c:	e0bff217 	ldw	r2,-56(fp)
   81530:	10800408 	cmpgei	r2,r2,16
   81534:	10000e1e 	bne	r2,zero,81570 <RANSAC+0xf8>
        rs.bestFit = INFINITY;
   81538:	009fe034 	movhi	r2,32640
   8153c:	e0bec315 	stw	r2,-1268(fp)
        rs.bestQty = data_size;
   81540:	e0800217 	ldw	r2,8(fp)
   81544:	e0bec415 	stw	r2,-1264(fp)
        return rs;
   81548:	e0bff317 	ldw	r2,-52(fp)
   8154c:	e0fec117 	ldw	r3,-1276(fp)
   81550:	10c00015 	stw	r3,0(r2)
   81554:	e0fec217 	ldw	r3,-1272(fp)
   81558:	10c00115 	stw	r3,4(r2)
   8155c:	e0fec317 	ldw	r3,-1268(fp)
   81560:	10c00215 	stw	r3,8(r2)
   81564:	e0fec417 	ldw	r3,-1264(fp)
   81568:	10c00315 	stw	r3,12(r2)
   8156c:	00006906 	br	81714 <RANSAC+0x29c>
    }

    int temp_size = MIN_POINTS;
   81570:	00800084 	movi	r2,2
   81574:	e0bebe15 	stw	r2,-1288(fp)
    int temp[temp_size]; // alocacaoo tamanho P
   81578:	e0bebe17 	ldw	r2,-1288(fp)
   8157c:	10ffffc4 	addi	r3,r2,-1
   81580:	e0febf15 	stw	r3,-1284(fp)
   81584:	1007883a 	mov	r3,r2
   81588:	182d883a 	mov	r22,r3
   8158c:	002f883a 	mov	r23,zero
   81590:	b006d6fa 	srli	r3,r22,27
   81594:	b826917a 	slli	r19,r23,5
   81598:	1ce6b03a 	or	r19,r3,r19
   8159c:	b024917a 	slli	r18,r22,5
   815a0:	1007883a 	mov	r3,r2
   815a4:	1829883a 	mov	r20,r3
   815a8:	002b883a 	mov	r21,zero
   815ac:	a006d6fa 	srli	r3,r20,27
   815b0:	a822917a 	slli	r17,r21,5
   815b4:	1c62b03a 	or	r17,r3,r17
   815b8:	a020917a 	slli	r16,r20,5
   815bc:	1085883a 	add	r2,r2,r2
   815c0:	1085883a 	add	r2,r2,r2
   815c4:	108000c4 	addi	r2,r2,3
   815c8:	108000c4 	addi	r2,r2,3
   815cc:	1004d0ba 	srli	r2,r2,2
   815d0:	1085883a 	add	r2,r2,r2
   815d4:	1085883a 	add	r2,r2,r2
   815d8:	d8b7c83a 	sub	sp,sp,r2
   815dc:	d8800404 	addi	r2,sp,16
   815e0:	108000c4 	addi	r2,r2,3
   815e4:	1004d0ba 	srli	r2,r2,2
   815e8:	1085883a 	add	r2,r2,r2
   815ec:	1085883a 	add	r2,r2,r2
   815f0:	e0bec015 	stw	r2,-1280(fp)

    //Posicaoo inicial do robo
    temp[0] = outliers[0];
   815f4:	e0bff617 	ldw	r2,-40(fp)
   815f8:	10c00017 	ldw	r3,0(r2)
   815fc:	e0bec017 	ldw	r2,-1280(fp)
   81600:	10c00015 	stw	r3,0(r2)
    //Execute for N iterations
    while(loopCounter < N) {
   81604:	00003706 	br	816e4 <RANSAC+0x26c>
		//Sorteia 2 coordenadas que tenham uma distancia minima entre si
		if(temp_dist_points < MIN_DIST_POINTS) {
   81608:	e0beba17 	ldw	r2,-1304(fp)
   8160c:	10800648 	cmpgei	r2,r2,25
   81610:	1000261e 	bne	r2,zero,816ac <RANSAC+0x234>
		for (int j = 1; j < temp_size; j++) {
   81614:	00800044 	movi	r2,1
   81618:	e0bebc15 	stw	r2,-1296(fp)
   8161c:	00001f06 	br	8169c <RANSAC+0x224>
			temp_index = rand() % outlierSize;
   81620:	00885f40 	call	885f4 <rand>
   81624:	1007883a 	mov	r3,r2
   81628:	e0bff217 	ldw	r2,-56(fp)
   8162c:	100b883a 	mov	r5,r2
   81630:	1809883a 	mov	r4,r3
   81634:	00822700 	call	82270 <__modsi3>
   81638:	e0bebd15 	stw	r2,-1292(fp)
			temp[j] = outliers[temp_index];
   8163c:	e0bebd17 	ldw	r2,-1292(fp)
   81640:	1085883a 	add	r2,r2,r2
   81644:	1085883a 	add	r2,r2,r2
   81648:	1007883a 	mov	r3,r2
   8164c:	e0bff617 	ldw	r2,-40(fp)
   81650:	10c5883a 	add	r2,r2,r3
   81654:	10c00017 	ldw	r3,0(r2)
   81658:	e13ec017 	ldw	r4,-1280(fp)
   8165c:	e0bebc17 	ldw	r2,-1296(fp)
   81660:	1085883a 	add	r2,r2,r2
   81664:	1085883a 	add	r2,r2,r2
   81668:	2085883a 	add	r2,r4,r2
   8166c:	10c00015 	stw	r3,0(r2)
			temp_dist_points = squareDistanceBetweenPoints(temp[0], temp[1]);
   81670:	e0bec017 	ldw	r2,-1280(fp)
   81674:	10c00017 	ldw	r3,0(r2)
   81678:	e0bec017 	ldw	r2,-1280(fp)
   8167c:	10800117 	ldw	r2,4(r2)
   81680:	100b883a 	mov	r5,r2
   81684:	1809883a 	mov	r4,r3
   81688:	00813a80 	call	813a8 <squareDistanceBetweenPoints>
   8168c:	e0beba15 	stw	r2,-1304(fp)
    temp[0] = outliers[0];
    //Execute for N iterations
    while(loopCounter < N) {
		//Sorteia 2 coordenadas que tenham uma distancia minima entre si
		if(temp_dist_points < MIN_DIST_POINTS) {
		for (int j = 1; j < temp_size; j++) {
   81690:	e0bebc17 	ldw	r2,-1296(fp)
   81694:	10800044 	addi	r2,r2,1
   81698:	e0bebc15 	stw	r2,-1296(fp)
   8169c:	e0febc17 	ldw	r3,-1296(fp)
   816a0:	e0bebe17 	ldw	r2,-1288(fp)
   816a4:	18bfde16 	blt	r3,r2,81620 <__alt_data_end+0xfffcf620>
   816a8:	00000e06 	br	816e4 <RANSAC+0x26c>
			temp[j] = outliers[temp_index];
			temp_dist_points = squareDistanceBetweenPoints(temp[0], temp[1]);
		}
        }
        else {
        	checkModel(outliers, temp, &rs, outlierSize, temp_size);
   816ac:	e0fec017 	ldw	r3,-1280(fp)
   816b0:	e17ff217 	ldw	r5,-56(fp)
   816b4:	e13ec104 	addi	r4,fp,-1276
   816b8:	e0bebe17 	ldw	r2,-1288(fp)
   816bc:	d8800015 	stw	r2,0(sp)
   816c0:	280f883a 	mov	r7,r5
   816c4:	200d883a 	mov	r6,r4
   816c8:	180b883a 	mov	r5,r3
   816cc:	e13ff617 	ldw	r4,-40(fp)
   816d0:	00811c80 	call	811c8 <checkModel>
            temp_dist_points = 0;
   816d4:	e03eba15 	stw	zero,-1304(fp)
            loopCounter++;
   816d8:	e0bebb17 	ldw	r2,-1300(fp)
   816dc:	10800044 	addi	r2,r2,1
   816e0:	e0bebb15 	stw	r2,-1300(fp)
    int temp[temp_size]; // alocacaoo tamanho P

    //Posicaoo inicial do robo
    temp[0] = outliers[0];
    //Execute for N iterations
    while(loopCounter < N) {
   816e4:	e0bebb17 	ldw	r2,-1300(fp)
   816e8:	10800290 	cmplti	r2,r2,10
   816ec:	103fc61e 	bne	r2,zero,81608 <__alt_data_end+0xfffcf608>
            temp_dist_points = 0;
            loopCounter++;
        }
    }

    return rs;
   816f0:	e0bff317 	ldw	r2,-52(fp)
   816f4:	e0fec117 	ldw	r3,-1276(fp)
   816f8:	10c00015 	stw	r3,0(r2)
   816fc:	e0fec217 	ldw	r3,-1272(fp)
   81700:	10c00115 	stw	r3,4(r2)
   81704:	e0fec317 	ldw	r3,-1268(fp)
   81708:	10c00215 	stw	r3,8(r2)
   8170c:	e0fec417 	ldw	r3,-1264(fp)
   81710:	10c00315 	stw	r3,12(r2)
   81714:	e6fff717 	ldw	sp,-36(fp)
}
   81718:	e0bff317 	ldw	r2,-52(fp)
   8171c:	e6fff804 	addi	sp,fp,-32
   81720:	dfc00917 	ldw	ra,36(sp)
   81724:	df000817 	ldw	fp,32(sp)
   81728:	ddc00717 	ldw	r23,28(sp)
   8172c:	dd800617 	ldw	r22,24(sp)
   81730:	dd400517 	ldw	r21,20(sp)
   81734:	dd000417 	ldw	r20,16(sp)
   81738:	dcc00317 	ldw	r19,12(sp)
   8173c:	dc800217 	ldw	r18,8(sp)
   81740:	dc400117 	ldw	r17,4(sp)
   81744:	dc000017 	ldw	r16,0(sp)
   81748:	dec00a04 	addi	sp,sp,40
   8174c:	f800283a 	ret

00081750 <atan>:
	double atan(double x)
#else
	double atan(x)
	double x;
#endif
{
   81750:	deffde04 	addi	sp,sp,-136
   81754:	dfc02115 	stw	ra,132(sp)
   81758:	df002015 	stw	fp,128(sp)
   8175c:	ddc01f15 	stw	r23,124(sp)
   81760:	dd801e15 	stw	r22,120(sp)
   81764:	dd401d15 	stw	r21,116(sp)
   81768:	dd001c15 	stw	r20,112(sp)
   8176c:	dcc01b15 	stw	r19,108(sp)
   81770:	dc801a15 	stw	r18,104(sp)
   81774:	dc401915 	stw	r17,100(sp)
   81778:	dc001815 	stw	r16,96(sp)
   8177c:	df002004 	addi	fp,sp,128
   81780:	e13ff015 	stw	r4,-64(fp)
   81784:	e17ff115 	stw	r5,-60(fp)
	double w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_HIGH_WORD(hx,x);
   81788:	e0bff017 	ldw	r2,-64(fp)
   8178c:	e0bfec15 	stw	r2,-80(fp)
   81790:	e0bff117 	ldw	r2,-60(fp)
   81794:	e0bfed15 	stw	r2,-76(fp)
   81798:	e0bfed17 	ldw	r2,-76(fp)
   8179c:	e0bfe115 	stw	r2,-124(fp)
	ix = hx&0x7fffffff;
   817a0:	e0ffe117 	ldw	r3,-124(fp)
   817a4:	00a00034 	movhi	r2,32768
   817a8:	10bfffc4 	addi	r2,r2,-1
   817ac:	1884703a 	and	r2,r3,r2
   817b0:	e0bfe215 	stw	r2,-120(fp)
	if(ix>=0x44100000) {	/* if |x| >= 2^66 */
   817b4:	e0ffe217 	ldw	r3,-120(fp)
   817b8:	00910434 	movhi	r2,17424
   817bc:	18804216 	blt	r3,r2,818c8 <atan+0x178>
	    __uint32_t low;
	    GET_LOW_WORD(low,x);
   817c0:	e0bff017 	ldw	r2,-64(fp)
   817c4:	e0bfee15 	stw	r2,-72(fp)
   817c8:	e0bff117 	ldw	r2,-60(fp)
   817cc:	e0bfef15 	stw	r2,-68(fp)
   817d0:	e0bfee17 	ldw	r2,-72(fp)
   817d4:	e0bfe315 	stw	r2,-116(fp)
	    if(ix>0x7ff00000||
   817d8:	e0bfe217 	ldw	r2,-120(fp)
   817dc:	00dffc34 	movhi	r3,32752
   817e0:	18800516 	blt	r3,r2,817f8 <atan+0xa8>
   817e4:	e0ffe217 	ldw	r3,-120(fp)
   817e8:	009ffc34 	movhi	r2,32752
   817ec:	18800e1e 	bne	r3,r2,81828 <atan+0xd8>
		(ix==0x7ff00000&&(low!=0)))
   817f0:	e0bfe317 	ldw	r2,-116(fp)
   817f4:	10000c26 	beq	r2,zero,81828 <atan+0xd8>
		return x+x;		/* NaN */
   817f8:	e0bff017 	ldw	r2,-64(fp)
   817fc:	e0fff117 	ldw	r3,-60(fp)
   81800:	100d883a 	mov	r6,r2
   81804:	180f883a 	mov	r7,r3
   81808:	1009883a 	mov	r4,r2
   8180c:	180b883a 	mov	r5,r3
   81810:	00823c80 	call	823c8 <__adddf3>
   81814:	1009883a 	mov	r4,r2
   81818:	180b883a 	mov	r5,r3
   8181c:	2021883a 	mov	r16,r4
   81820:	2823883a 	mov	r17,r5
   81824:	00023e06 	br	82120 <atan+0x9d0>
	    if(hx>0) return  atanhi[3]+atanlo[3];
   81828:	e0bfe117 	ldw	r2,-124(fp)
   8182c:	0080120e 	bge	zero,r2,81878 <atan+0x128>
   81830:	00951134 	movhi	r2,21572
   81834:	108b4604 	addi	r2,r2,11544
   81838:	00cffe74 	movhi	r3,16377
   8183c:	18c87ec4 	addi	r3,r3,8699
   81840:	010cc534 	movhi	r4,13076
   81844:	211701c4 	addi	r4,r4,23559
   81848:	014f24b4 	movhi	r5,15506
   8184c:	29698984 	addi	r5,r5,-23002
   81850:	200d883a 	mov	r6,r4
   81854:	280f883a 	mov	r7,r5
   81858:	1009883a 	mov	r4,r2
   8185c:	180b883a 	mov	r5,r3
   81860:	00823c80 	call	823c8 <__adddf3>
   81864:	1009883a 	mov	r4,r2
   81868:	180b883a 	mov	r5,r3
   8186c:	2021883a 	mov	r16,r4
   81870:	2823883a 	mov	r17,r5
   81874:	00022a06 	br	82120 <atan+0x9d0>
	    else     return -atanhi[3]-atanlo[3];
   81878:	00951134 	movhi	r2,21572
   8187c:	108b4604 	addi	r2,r2,11544
   81880:	00cffe74 	movhi	r3,16377
   81884:	18c87ec4 	addi	r3,r3,8699
   81888:	1011883a 	mov	r8,r2
   8188c:	1a60003c 	xorhi	r9,r3,32768
   81890:	008cc534 	movhi	r2,13076
   81894:	109701c4 	addi	r2,r2,23559
   81898:	00cf24b4 	movhi	r3,15506
   8189c:	18e98984 	addi	r3,r3,-23002
   818a0:	100d883a 	mov	r6,r2
   818a4:	180f883a 	mov	r7,r3
   818a8:	4009883a 	mov	r4,r8
   818ac:	480b883a 	mov	r5,r9
   818b0:	00840800 	call	84080 <__subdf3>
   818b4:	1009883a 	mov	r4,r2
   818b8:	180b883a 	mov	r5,r3
   818bc:	2021883a 	mov	r16,r4
   818c0:	2823883a 	mov	r17,r5
   818c4:	00021606 	br	82120 <atan+0x9d0>
	} if (ix < 0x3fdc0000) {	/* |x| < 0.4375 */
   818c8:	e0ffe217 	ldw	r3,-120(fp)
   818cc:	008ff734 	movhi	r2,16348
   818d0:	18801e0e 	bge	r3,r2,8194c <atan+0x1fc>
	    if (ix < 0x3e200000) {	/* |x| < 2^-29 */
   818d4:	e0ffe217 	ldw	r3,-120(fp)
   818d8:	008f8834 	movhi	r2,15904
   818dc:	1880180e 	bge	r3,r2,81940 <atan+0x1f0>
		if(huge+x>one) return x;	/* raise inexact */
   818e0:	00a20034 	movhi	r2,34816
   818e4:	109d6704 	addi	r2,r2,30108
   818e8:	00df8e34 	movhi	r3,32312
   818ec:	18f90f04 	addi	r3,r3,-7108
   818f0:	e1bff017 	ldw	r6,-64(fp)
   818f4:	e1fff117 	ldw	r7,-60(fp)
   818f8:	1009883a 	mov	r4,r2
   818fc:	180b883a 	mov	r5,r3
   81900:	00823c80 	call	823c8 <__adddf3>
   81904:	1009883a 	mov	r4,r2
   81908:	180b883a 	mov	r5,r3
   8190c:	2011883a 	mov	r8,r4
   81910:	2813883a 	mov	r9,r5
   81914:	0005883a 	mov	r2,zero
   81918:	00cffc34 	movhi	r3,16368
   8191c:	100d883a 	mov	r6,r2
   81920:	180f883a 	mov	r7,r3
   81924:	4009883a 	mov	r4,r8
   81928:	480b883a 	mov	r5,r9
   8192c:	00836440 	call	83644 <__gedf2>
   81930:	0080030e 	bge	zero,r2,81940 <atan+0x1f0>
   81934:	e43ff017 	ldw	r16,-64(fp)
   81938:	e47ff117 	ldw	r17,-60(fp)
   8193c:	0001f806 	br	82120 <atan+0x9d0>
	    }
	    id = -1;
   81940:	00bfffc4 	movi	r2,-1
   81944:	e0bfe015 	stw	r2,-128(fp)
   81948:	00008f06 	br	81b88 <atan+0x438>
	} else {
	x = fabs(x);
   8194c:	e13ff017 	ldw	r4,-64(fp)
   81950:	e17ff117 	ldw	r5,-60(fp)
   81954:	00821640 	call	82164 <fabs>
   81958:	e0bff015 	stw	r2,-64(fp)
   8195c:	e0fff115 	stw	r3,-60(fp)
	if (ix < 0x3ff30000) {		/* |x| < 1.1875 */
   81960:	e0ffe217 	ldw	r3,-120(fp)
   81964:	008ffcf4 	movhi	r2,16371
   81968:	18804f0e 	bge	r3,r2,81aa8 <atan+0x358>
	    if (ix < 0x3fe60000) {	/* 7/16 <=|x|<11/16 */
   8196c:	e0ffe217 	ldw	r3,-120(fp)
   81970:	008ff9b4 	movhi	r2,16358
   81974:	18802a0e 	bge	r3,r2,81a20 <atan+0x2d0>
		id = 0; x = (2.0*x-one)/(2.0+x); 
   81978:	e03fe015 	stw	zero,-128(fp)
   8197c:	e0bff017 	ldw	r2,-64(fp)
   81980:	e0fff117 	ldw	r3,-60(fp)
   81984:	100d883a 	mov	r6,r2
   81988:	180f883a 	mov	r7,r3
   8198c:	1009883a 	mov	r4,r2
   81990:	180b883a 	mov	r5,r3
   81994:	00823c80 	call	823c8 <__adddf3>
   81998:	1009883a 	mov	r4,r2
   8199c:	180b883a 	mov	r5,r3
   819a0:	2011883a 	mov	r8,r4
   819a4:	2813883a 	mov	r9,r5
   819a8:	0005883a 	mov	r2,zero
   819ac:	00cffc34 	movhi	r3,16368
   819b0:	100d883a 	mov	r6,r2
   819b4:	180f883a 	mov	r7,r3
   819b8:	4009883a 	mov	r4,r8
   819bc:	480b883a 	mov	r5,r9
   819c0:	00840800 	call	84080 <__subdf3>
   819c4:	1009883a 	mov	r4,r2
   819c8:	180b883a 	mov	r5,r3
   819cc:	2025883a 	mov	r18,r4
   819d0:	2827883a 	mov	r19,r5
   819d4:	000d883a 	mov	r6,zero
   819d8:	01d00034 	movhi	r7,16384
   819dc:	e13ff017 	ldw	r4,-64(fp)
   819e0:	e17ff117 	ldw	r5,-60(fp)
   819e4:	00823c80 	call	823c8 <__adddf3>
   819e8:	1009883a 	mov	r4,r2
   819ec:	180b883a 	mov	r5,r3
   819f0:	2005883a 	mov	r2,r4
   819f4:	2807883a 	mov	r3,r5
   819f8:	100d883a 	mov	r6,r2
   819fc:	180f883a 	mov	r7,r3
   81a00:	9009883a 	mov	r4,r18
   81a04:	980b883a 	mov	r5,r19
   81a08:	0082c740 	call	82c74 <__divdf3>
   81a0c:	1009883a 	mov	r4,r2
   81a10:	180b883a 	mov	r5,r3
   81a14:	e13ff015 	stw	r4,-64(fp)
   81a18:	e17ff115 	stw	r5,-60(fp)
   81a1c:	00005a06 	br	81b88 <atan+0x438>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
   81a20:	00800044 	movi	r2,1
   81a24:	e0bfe015 	stw	r2,-128(fp)
   81a28:	0005883a 	mov	r2,zero
   81a2c:	00cffc34 	movhi	r3,16368
   81a30:	100d883a 	mov	r6,r2
   81a34:	180f883a 	mov	r7,r3
   81a38:	e13ff017 	ldw	r4,-64(fp)
   81a3c:	e17ff117 	ldw	r5,-60(fp)
   81a40:	00840800 	call	84080 <__subdf3>
   81a44:	1009883a 	mov	r4,r2
   81a48:	180b883a 	mov	r5,r3
   81a4c:	2025883a 	mov	r18,r4
   81a50:	2827883a 	mov	r19,r5
   81a54:	0005883a 	mov	r2,zero
   81a58:	00cffc34 	movhi	r3,16368
   81a5c:	e1bff017 	ldw	r6,-64(fp)
   81a60:	e1fff117 	ldw	r7,-60(fp)
   81a64:	1009883a 	mov	r4,r2
   81a68:	180b883a 	mov	r5,r3
   81a6c:	00823c80 	call	823c8 <__adddf3>
   81a70:	1009883a 	mov	r4,r2
   81a74:	180b883a 	mov	r5,r3
   81a78:	2005883a 	mov	r2,r4
   81a7c:	2807883a 	mov	r3,r5
   81a80:	100d883a 	mov	r6,r2
   81a84:	180f883a 	mov	r7,r3
   81a88:	9009883a 	mov	r4,r18
   81a8c:	980b883a 	mov	r5,r19
   81a90:	0082c740 	call	82c74 <__divdf3>
   81a94:	1009883a 	mov	r4,r2
   81a98:	180b883a 	mov	r5,r3
   81a9c:	e13ff015 	stw	r4,-64(fp)
   81aa0:	e17ff115 	stw	r5,-60(fp)
   81aa4:	00003806 	br	81b88 <atan+0x438>
	    }
	} else {
	    if (ix < 0x40038000) {	/* |x| < 2.4375 */
   81aa8:	e0ffe217 	ldw	r3,-120(fp)
   81aac:	009000f4 	movhi	r2,16387
   81ab0:	109fffc4 	addi	r2,r2,32767
   81ab4:	10c02916 	blt	r2,r3,81b5c <atan+0x40c>
		id = 2; x  = (x-1.5)/(one+1.5*x);
   81ab8:	00800084 	movi	r2,2
   81abc:	e0bfe015 	stw	r2,-128(fp)
   81ac0:	000d883a 	mov	r6,zero
   81ac4:	01cffe34 	movhi	r7,16376
   81ac8:	e13ff017 	ldw	r4,-64(fp)
   81acc:	e17ff117 	ldw	r5,-60(fp)
   81ad0:	00840800 	call	84080 <__subdf3>
   81ad4:	1009883a 	mov	r4,r2
   81ad8:	180b883a 	mov	r5,r3
   81adc:	2025883a 	mov	r18,r4
   81ae0:	2827883a 	mov	r19,r5
   81ae4:	000d883a 	mov	r6,zero
   81ae8:	01cffe34 	movhi	r7,16376
   81aec:	e13ff017 	ldw	r4,-64(fp)
   81af0:	e17ff117 	ldw	r5,-60(fp)
   81af4:	00838140 	call	83814 <__muldf3>
   81af8:	1009883a 	mov	r4,r2
   81afc:	180b883a 	mov	r5,r3
   81b00:	2011883a 	mov	r8,r4
   81b04:	2813883a 	mov	r9,r5
   81b08:	0005883a 	mov	r2,zero
   81b0c:	00cffc34 	movhi	r3,16368
   81b10:	100d883a 	mov	r6,r2
   81b14:	180f883a 	mov	r7,r3
   81b18:	4009883a 	mov	r4,r8
   81b1c:	480b883a 	mov	r5,r9
   81b20:	00823c80 	call	823c8 <__adddf3>
   81b24:	1009883a 	mov	r4,r2
   81b28:	180b883a 	mov	r5,r3
   81b2c:	2005883a 	mov	r2,r4
   81b30:	2807883a 	mov	r3,r5
   81b34:	100d883a 	mov	r6,r2
   81b38:	180f883a 	mov	r7,r3
   81b3c:	9009883a 	mov	r4,r18
   81b40:	980b883a 	mov	r5,r19
   81b44:	0082c740 	call	82c74 <__divdf3>
   81b48:	1009883a 	mov	r4,r2
   81b4c:	180b883a 	mov	r5,r3
   81b50:	e13ff015 	stw	r4,-64(fp)
   81b54:	e17ff115 	stw	r5,-60(fp)
   81b58:	00000b06 	br	81b88 <atan+0x438>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -1.0/x;
   81b5c:	008000c4 	movi	r2,3
   81b60:	e0bfe015 	stw	r2,-128(fp)
   81b64:	e1bff017 	ldw	r6,-64(fp)
   81b68:	e1fff117 	ldw	r7,-60(fp)
   81b6c:	0009883a 	mov	r4,zero
   81b70:	016ffc34 	movhi	r5,49136
   81b74:	0082c740 	call	82c74 <__divdf3>
   81b78:	1009883a 	mov	r4,r2
   81b7c:	180b883a 	mov	r5,r3
   81b80:	e13ff015 	stw	r4,-64(fp)
   81b84:	e17ff115 	stw	r5,-60(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
   81b88:	e1bff017 	ldw	r6,-64(fp)
   81b8c:	e1fff117 	ldw	r7,-60(fp)
   81b90:	e13ff017 	ldw	r4,-64(fp)
   81b94:	e17ff117 	ldw	r5,-60(fp)
   81b98:	00838140 	call	83814 <__muldf3>
   81b9c:	1009883a 	mov	r4,r2
   81ba0:	180b883a 	mov	r5,r3
   81ba4:	e13fe415 	stw	r4,-112(fp)
   81ba8:	e17fe515 	stw	r5,-108(fp)
	w = z*z;
   81bac:	e1bfe417 	ldw	r6,-112(fp)
   81bb0:	e1ffe517 	ldw	r7,-108(fp)
   81bb4:	e13fe417 	ldw	r4,-112(fp)
   81bb8:	e17fe517 	ldw	r5,-108(fp)
   81bbc:	00838140 	call	83814 <__muldf3>
   81bc0:	1009883a 	mov	r4,r2
   81bc4:	180b883a 	mov	r5,r3
   81bc8:	e13fe615 	stw	r4,-104(fp)
   81bcc:	e17fe715 	stw	r5,-100(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
   81bd0:	04955574 	movhi	r18,21845
   81bd4:	94954344 	addi	r18,r18,21773
   81bd8:	04cff574 	movhi	r19,16341
   81bdc:	9cd55544 	addi	r19,r19,21845
   81be0:	05248074 	movhi	r20,37377
   81be4:	a520ffc4 	addi	r20,r20,-31745
   81be8:	054ff0b4 	movhi	r21,16322
   81bec:	ad524904 	addi	r21,r21,18724
   81bf0:	05b15334 	movhi	r22,50508
   81bf4:	b5881b84 	addi	r22,r22,8302
   81bf8:	05cfedf4 	movhi	r23,16311
   81bfc:	bdd17344 	addi	r23,r23,17869
   81c00:	00a83434 	movhi	r2,41168
   81c04:	e0bff215 	stw	r2,-56(fp)
   81c08:	e0bff217 	ldw	r2,-56(fp)
   81c0c:	108f5444 	addi	r2,r2,15697
   81c10:	e0bff215 	stw	r2,-56(fp)
   81c14:	008fec74 	movhi	r2,16305
   81c18:	e0bff315 	stw	r2,-52(fp)
   81c1c:	e0bff317 	ldw	r2,-52(fp)
   81c20:	10835984 	addi	r2,r2,3430
   81c24:	e0bff315 	stw	r2,-52(fp)
   81c28:	00891db4 	movhi	r2,9334
   81c2c:	e0bff415 	stw	r2,-48(fp)
   81c30:	e0bff417 	ldw	r2,-48(fp)
   81c34:	10837ac4 	addi	r2,r2,3563
   81c38:	e0bff415 	stw	r2,-48(fp)
   81c3c:	008fea74 	movhi	r2,16297
   81c40:	e0bff515 	stw	r2,-44(fp)
   81c44:	e0bff517 	ldw	r2,-44(fp)
   81c48:	109ed2c4 	addi	r2,r2,31563
   81c4c:	e0bff515 	stw	r2,-44(fp)
   81c50:	00b8c8f4 	movhi	r2,58147
   81c54:	10b68444 	addi	r2,r2,-9711
   81c58:	00cfe474 	movhi	r3,16273
   81c5c:	18eb4e84 	addi	r3,r3,-21190
   81c60:	e1bfe617 	ldw	r6,-104(fp)
   81c64:	e1ffe717 	ldw	r7,-100(fp)
   81c68:	1009883a 	mov	r4,r2
   81c6c:	180b883a 	mov	r5,r3
   81c70:	00838140 	call	83814 <__muldf3>
   81c74:	1009883a 	mov	r4,r2
   81c78:	180b883a 	mov	r5,r3
   81c7c:	2005883a 	mov	r2,r4
   81c80:	2807883a 	mov	r3,r5
   81c84:	100d883a 	mov	r6,r2
   81c88:	180f883a 	mov	r7,r3
   81c8c:	e13ff417 	ldw	r4,-48(fp)
   81c90:	e17ff517 	ldw	r5,-44(fp)
   81c94:	00823c80 	call	823c8 <__adddf3>
   81c98:	1009883a 	mov	r4,r2
   81c9c:	180b883a 	mov	r5,r3
   81ca0:	2005883a 	mov	r2,r4
   81ca4:	2807883a 	mov	r3,r5
   81ca8:	e1bfe617 	ldw	r6,-104(fp)
   81cac:	e1ffe717 	ldw	r7,-100(fp)
   81cb0:	1009883a 	mov	r4,r2
   81cb4:	180b883a 	mov	r5,r3
   81cb8:	00838140 	call	83814 <__muldf3>
   81cbc:	1009883a 	mov	r4,r2
   81cc0:	180b883a 	mov	r5,r3
   81cc4:	2005883a 	mov	r2,r4
   81cc8:	2807883a 	mov	r3,r5
   81ccc:	100d883a 	mov	r6,r2
   81cd0:	180f883a 	mov	r7,r3
   81cd4:	e13ff217 	ldw	r4,-56(fp)
   81cd8:	e17ff317 	ldw	r5,-52(fp)
   81cdc:	00823c80 	call	823c8 <__adddf3>
   81ce0:	1009883a 	mov	r4,r2
   81ce4:	180b883a 	mov	r5,r3
   81ce8:	2005883a 	mov	r2,r4
   81cec:	2807883a 	mov	r3,r5
   81cf0:	e1bfe617 	ldw	r6,-104(fp)
   81cf4:	e1ffe717 	ldw	r7,-100(fp)
   81cf8:	1009883a 	mov	r4,r2
   81cfc:	180b883a 	mov	r5,r3
   81d00:	00838140 	call	83814 <__muldf3>
   81d04:	1009883a 	mov	r4,r2
   81d08:	180b883a 	mov	r5,r3
   81d0c:	2005883a 	mov	r2,r4
   81d10:	2807883a 	mov	r3,r5
   81d14:	100d883a 	mov	r6,r2
   81d18:	180f883a 	mov	r7,r3
   81d1c:	b009883a 	mov	r4,r22
   81d20:	b80b883a 	mov	r5,r23
   81d24:	00823c80 	call	823c8 <__adddf3>
   81d28:	1009883a 	mov	r4,r2
   81d2c:	180b883a 	mov	r5,r3
   81d30:	2005883a 	mov	r2,r4
   81d34:	2807883a 	mov	r3,r5
   81d38:	e1bfe617 	ldw	r6,-104(fp)
   81d3c:	e1ffe717 	ldw	r7,-100(fp)
   81d40:	1009883a 	mov	r4,r2
   81d44:	180b883a 	mov	r5,r3
   81d48:	00838140 	call	83814 <__muldf3>
   81d4c:	1009883a 	mov	r4,r2
   81d50:	180b883a 	mov	r5,r3
   81d54:	2005883a 	mov	r2,r4
   81d58:	2807883a 	mov	r3,r5
   81d5c:	100d883a 	mov	r6,r2
   81d60:	180f883a 	mov	r7,r3
   81d64:	a009883a 	mov	r4,r20
   81d68:	a80b883a 	mov	r5,r21
   81d6c:	00823c80 	call	823c8 <__adddf3>
   81d70:	1009883a 	mov	r4,r2
   81d74:	180b883a 	mov	r5,r3
   81d78:	2005883a 	mov	r2,r4
   81d7c:	2807883a 	mov	r3,r5
   81d80:	e1bfe617 	ldw	r6,-104(fp)
   81d84:	e1ffe717 	ldw	r7,-100(fp)
   81d88:	1009883a 	mov	r4,r2
   81d8c:	180b883a 	mov	r5,r3
   81d90:	00838140 	call	83814 <__muldf3>
   81d94:	1009883a 	mov	r4,r2
   81d98:	180b883a 	mov	r5,r3
   81d9c:	2005883a 	mov	r2,r4
   81da0:	2807883a 	mov	r3,r5
   81da4:	100d883a 	mov	r6,r2
   81da8:	180f883a 	mov	r7,r3
   81dac:	9009883a 	mov	r4,r18
   81db0:	980b883a 	mov	r5,r19
   81db4:	00823c80 	call	823c8 <__adddf3>
   81db8:	1009883a 	mov	r4,r2
   81dbc:	180b883a 	mov	r5,r3
   81dc0:	2005883a 	mov	r2,r4
   81dc4:	2807883a 	mov	r3,r5
   81dc8:	e1bfe417 	ldw	r6,-112(fp)
   81dcc:	e1ffe517 	ldw	r7,-108(fp)
   81dd0:	1009883a 	mov	r4,r2
   81dd4:	180b883a 	mov	r5,r3
   81dd8:	00838140 	call	83814 <__muldf3>
   81ddc:	1009883a 	mov	r4,r2
   81de0:	180b883a 	mov	r5,r3
   81de4:	e13fe815 	stw	r4,-96(fp)
   81de8:	e17fe915 	stw	r5,-92(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
   81dec:	04a66674 	movhi	r18,39321
   81df0:	94baf104 	addi	r18,r18,-5180
   81df4:	04eff2b4 	movhi	r19,49098
   81df8:	9ce66644 	addi	r19,r19,-26215
   81dfc:	053f88f4 	movhi	r20,65059
   81e00:	a5059c44 	addi	r20,r20,5745
   81e04:	056fef34 	movhi	r21,49084
   81e08:	ad5c7184 	addi	r21,r21,29126
   81e0c:	05abdd74 	movhi	r22,44917
   81e10:	b5a69b44 	addi	r22,r22,-26003
   81e14:	05efed34 	movhi	r23,49076
   81e18:	bdec3c84 	addi	r23,r23,-20238
   81e1c:	0094b7f4 	movhi	r2,21215
   81e20:	e0bff615 	stw	r2,-40(fp)
   81e24:	e0bff617 	ldw	r2,-40(fp)
   81e28:	10bf6684 	addi	r2,r2,-614
   81e2c:	e0bff615 	stw	r2,-40(fp)
   81e30:	00afebb4 	movhi	r2,49070
   81e34:	e0bff715 	stw	r2,-36(fp)
   81e38:	e0bff717 	ldw	r2,-36(fp)
   81e3c:	10b78b44 	addi	r2,r2,-8659
   81e40:	e0bff715 	stw	r2,-36(fp)
   81e44:	008b1ab4 	movhi	r2,11370
   81e48:	109b0bc4 	addi	r2,r2,27695
   81e4c:	00efe8f4 	movhi	r3,49059
   81e50:	18ed1104 	addi	r3,r3,-19388
   81e54:	e1bfe617 	ldw	r6,-104(fp)
   81e58:	e1ffe717 	ldw	r7,-100(fp)
   81e5c:	1009883a 	mov	r4,r2
   81e60:	180b883a 	mov	r5,r3
   81e64:	00838140 	call	83814 <__muldf3>
   81e68:	1009883a 	mov	r4,r2
   81e6c:	180b883a 	mov	r5,r3
   81e70:	2005883a 	mov	r2,r4
   81e74:	2807883a 	mov	r3,r5
   81e78:	100d883a 	mov	r6,r2
   81e7c:	180f883a 	mov	r7,r3
   81e80:	e13ff617 	ldw	r4,-40(fp)
   81e84:	e17ff717 	ldw	r5,-36(fp)
   81e88:	00823c80 	call	823c8 <__adddf3>
   81e8c:	1009883a 	mov	r4,r2
   81e90:	180b883a 	mov	r5,r3
   81e94:	2005883a 	mov	r2,r4
   81e98:	2807883a 	mov	r3,r5
   81e9c:	e1bfe617 	ldw	r6,-104(fp)
   81ea0:	e1ffe717 	ldw	r7,-100(fp)
   81ea4:	1009883a 	mov	r4,r2
   81ea8:	180b883a 	mov	r5,r3
   81eac:	00838140 	call	83814 <__muldf3>
   81eb0:	1009883a 	mov	r4,r2
   81eb4:	180b883a 	mov	r5,r3
   81eb8:	2005883a 	mov	r2,r4
   81ebc:	2807883a 	mov	r3,r5
   81ec0:	100d883a 	mov	r6,r2
   81ec4:	180f883a 	mov	r7,r3
   81ec8:	b009883a 	mov	r4,r22
   81ecc:	b80b883a 	mov	r5,r23
   81ed0:	00823c80 	call	823c8 <__adddf3>
   81ed4:	1009883a 	mov	r4,r2
   81ed8:	180b883a 	mov	r5,r3
   81edc:	2005883a 	mov	r2,r4
   81ee0:	2807883a 	mov	r3,r5
   81ee4:	e1bfe617 	ldw	r6,-104(fp)
   81ee8:	e1ffe717 	ldw	r7,-100(fp)
   81eec:	1009883a 	mov	r4,r2
   81ef0:	180b883a 	mov	r5,r3
   81ef4:	00838140 	call	83814 <__muldf3>
   81ef8:	1009883a 	mov	r4,r2
   81efc:	180b883a 	mov	r5,r3
   81f00:	2005883a 	mov	r2,r4
   81f04:	2807883a 	mov	r3,r5
   81f08:	100d883a 	mov	r6,r2
   81f0c:	180f883a 	mov	r7,r3
   81f10:	a009883a 	mov	r4,r20
   81f14:	a80b883a 	mov	r5,r21
   81f18:	00823c80 	call	823c8 <__adddf3>
   81f1c:	1009883a 	mov	r4,r2
   81f20:	180b883a 	mov	r5,r3
   81f24:	2005883a 	mov	r2,r4
   81f28:	2807883a 	mov	r3,r5
   81f2c:	e1bfe617 	ldw	r6,-104(fp)
   81f30:	e1ffe717 	ldw	r7,-100(fp)
   81f34:	1009883a 	mov	r4,r2
   81f38:	180b883a 	mov	r5,r3
   81f3c:	00838140 	call	83814 <__muldf3>
   81f40:	1009883a 	mov	r4,r2
   81f44:	180b883a 	mov	r5,r3
   81f48:	2005883a 	mov	r2,r4
   81f4c:	2807883a 	mov	r3,r5
   81f50:	100d883a 	mov	r6,r2
   81f54:	180f883a 	mov	r7,r3
   81f58:	9009883a 	mov	r4,r18
   81f5c:	980b883a 	mov	r5,r19
   81f60:	00823c80 	call	823c8 <__adddf3>
   81f64:	1009883a 	mov	r4,r2
   81f68:	180b883a 	mov	r5,r3
   81f6c:	2005883a 	mov	r2,r4
   81f70:	2807883a 	mov	r3,r5
   81f74:	e1bfe617 	ldw	r6,-104(fp)
   81f78:	e1ffe717 	ldw	r7,-100(fp)
   81f7c:	1009883a 	mov	r4,r2
   81f80:	180b883a 	mov	r5,r3
   81f84:	00838140 	call	83814 <__muldf3>
   81f88:	1009883a 	mov	r4,r2
   81f8c:	180b883a 	mov	r5,r3
   81f90:	e13fea15 	stw	r4,-88(fp)
   81f94:	e17feb15 	stw	r5,-84(fp)
	if (id<0) return x - x*(s1+s2);
   81f98:	e0bfe017 	ldw	r2,-128(fp)
   81f9c:	10001c0e 	bge	r2,zero,82010 <atan+0x8c0>
   81fa0:	e1bfea17 	ldw	r6,-88(fp)
   81fa4:	e1ffeb17 	ldw	r7,-84(fp)
   81fa8:	e13fe817 	ldw	r4,-96(fp)
   81fac:	e17fe917 	ldw	r5,-92(fp)
   81fb0:	00823c80 	call	823c8 <__adddf3>
   81fb4:	1009883a 	mov	r4,r2
   81fb8:	180b883a 	mov	r5,r3
   81fbc:	2005883a 	mov	r2,r4
   81fc0:	2807883a 	mov	r3,r5
   81fc4:	e1bff017 	ldw	r6,-64(fp)
   81fc8:	e1fff117 	ldw	r7,-60(fp)
   81fcc:	1009883a 	mov	r4,r2
   81fd0:	180b883a 	mov	r5,r3
   81fd4:	00838140 	call	83814 <__muldf3>
   81fd8:	1009883a 	mov	r4,r2
   81fdc:	180b883a 	mov	r5,r3
   81fe0:	2005883a 	mov	r2,r4
   81fe4:	2807883a 	mov	r3,r5
   81fe8:	100d883a 	mov	r6,r2
   81fec:	180f883a 	mov	r7,r3
   81ff0:	e13ff017 	ldw	r4,-64(fp)
   81ff4:	e17ff117 	ldw	r5,-60(fp)
   81ff8:	00840800 	call	84080 <__subdf3>
   81ffc:	1009883a 	mov	r4,r2
   82000:	180b883a 	mov	r5,r3
   82004:	2021883a 	mov	r16,r4
   82008:	2823883a 	mov	r17,r5
   8200c:	00004406 	br	82120 <atan+0x9d0>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
   82010:	008002b4 	movhi	r2,10
   82014:	10833a04 	addi	r2,r2,3304
   82018:	e0ffe017 	ldw	r3,-128(fp)
   8201c:	180690fa 	slli	r3,r3,3
   82020:	10c5883a 	add	r2,r2,r3
   82024:	14800017 	ldw	r18,0(r2)
   82028:	14c00117 	ldw	r19,4(r2)
   8202c:	e1bfea17 	ldw	r6,-88(fp)
   82030:	e1ffeb17 	ldw	r7,-84(fp)
   82034:	e13fe817 	ldw	r4,-96(fp)
   82038:	e17fe917 	ldw	r5,-92(fp)
   8203c:	00823c80 	call	823c8 <__adddf3>
   82040:	1009883a 	mov	r4,r2
   82044:	180b883a 	mov	r5,r3
   82048:	2005883a 	mov	r2,r4
   8204c:	2807883a 	mov	r3,r5
   82050:	e1bff017 	ldw	r6,-64(fp)
   82054:	e1fff117 	ldw	r7,-60(fp)
   82058:	1009883a 	mov	r4,r2
   8205c:	180b883a 	mov	r5,r3
   82060:	00838140 	call	83814 <__muldf3>
   82064:	1009883a 	mov	r4,r2
   82068:	180b883a 	mov	r5,r3
   8206c:	2011883a 	mov	r8,r4
   82070:	2813883a 	mov	r9,r5
   82074:	008002b4 	movhi	r2,10
   82078:	10834204 	addi	r2,r2,3336
   8207c:	e0ffe017 	ldw	r3,-128(fp)
   82080:	180690fa 	slli	r3,r3,3
   82084:	10c9883a 	add	r4,r2,r3
   82088:	20800017 	ldw	r2,0(r4)
   8208c:	20c00117 	ldw	r3,4(r4)
   82090:	100d883a 	mov	r6,r2
   82094:	180f883a 	mov	r7,r3
   82098:	4009883a 	mov	r4,r8
   8209c:	480b883a 	mov	r5,r9
   820a0:	00840800 	call	84080 <__subdf3>
   820a4:	1009883a 	mov	r4,r2
   820a8:	180b883a 	mov	r5,r3
   820ac:	2005883a 	mov	r2,r4
   820b0:	2807883a 	mov	r3,r5
   820b4:	e1bff017 	ldw	r6,-64(fp)
   820b8:	e1fff117 	ldw	r7,-60(fp)
   820bc:	1009883a 	mov	r4,r2
   820c0:	180b883a 	mov	r5,r3
   820c4:	00840800 	call	84080 <__subdf3>
   820c8:	1009883a 	mov	r4,r2
   820cc:	180b883a 	mov	r5,r3
   820d0:	2005883a 	mov	r2,r4
   820d4:	2807883a 	mov	r3,r5
   820d8:	100d883a 	mov	r6,r2
   820dc:	180f883a 	mov	r7,r3
   820e0:	9009883a 	mov	r4,r18
   820e4:	980b883a 	mov	r5,r19
   820e8:	00840800 	call	84080 <__subdf3>
   820ec:	1009883a 	mov	r4,r2
   820f0:	180b883a 	mov	r5,r3
   820f4:	e13fe415 	stw	r4,-112(fp)
   820f8:	e17fe515 	stw	r5,-108(fp)
	    return (hx<0)? -z:z;
   820fc:	e0bfe117 	ldw	r2,-124(fp)
   82100:	1000040e 	bge	r2,zero,82114 <atan+0x9c4>
   82104:	e43fe417 	ldw	r16,-112(fp)
   82108:	e0bfe517 	ldw	r2,-108(fp)
   8210c:	1460003c 	xorhi	r17,r2,32768
   82110:	00000206 	br	8211c <atan+0x9cc>
   82114:	e43fe417 	ldw	r16,-112(fp)
   82118:	e47fe517 	ldw	r17,-108(fp)
   8211c:	0001883a 	nop
   82120:	8007883a 	mov	r3,r16
   82124:	8809883a 	mov	r4,r17
	}
}
   82128:	1805883a 	mov	r2,r3
   8212c:	2007883a 	mov	r3,r4
   82130:	e6fff804 	addi	sp,fp,-32
   82134:	dfc00917 	ldw	ra,36(sp)
   82138:	df000817 	ldw	fp,32(sp)
   8213c:	ddc00717 	ldw	r23,28(sp)
   82140:	dd800617 	ldw	r22,24(sp)
   82144:	dd400517 	ldw	r21,20(sp)
   82148:	dd000417 	ldw	r20,16(sp)
   8214c:	dcc00317 	ldw	r19,12(sp)
   82150:	dc800217 	ldw	r18,8(sp)
   82154:	dc400117 	ldw	r17,4(sp)
   82158:	dc000017 	ldw	r16,0(sp)
   8215c:	dec00a04 	addi	sp,sp,40
   82160:	f800283a 	ret

00082164 <fabs>:
	double fabs(double x)
#else
	double fabs(x)
	double x;
#endif
{
   82164:	defff804 	addi	sp,sp,-32
   82168:	df000715 	stw	fp,28(sp)
   8216c:	df000704 	addi	fp,sp,28
   82170:	e13ffe15 	stw	r4,-8(fp)
   82174:	e17fff15 	stw	r5,-4(fp)
	__uint32_t high;
	GET_HIGH_WORD(high,x);
   82178:	e0bffe17 	ldw	r2,-8(fp)
   8217c:	e0bffa15 	stw	r2,-24(fp)
   82180:	e0bfff17 	ldw	r2,-4(fp)
   82184:	e0bffb15 	stw	r2,-20(fp)
   82188:	e0bffb17 	ldw	r2,-20(fp)
   8218c:	e0bff915 	stw	r2,-28(fp)
	SET_HIGH_WORD(x,high&0x7fffffff);
   82190:	e0bffe17 	ldw	r2,-8(fp)
   82194:	e0bffc15 	stw	r2,-16(fp)
   82198:	e0bfff17 	ldw	r2,-4(fp)
   8219c:	e0bffd15 	stw	r2,-12(fp)
   821a0:	e0fff917 	ldw	r3,-28(fp)
   821a4:	00a00034 	movhi	r2,32768
   821a8:	10bfffc4 	addi	r2,r2,-1
   821ac:	1884703a 	and	r2,r3,r2
   821b0:	e0bffd15 	stw	r2,-12(fp)
   821b4:	e0bffc17 	ldw	r2,-16(fp)
   821b8:	e0bffe15 	stw	r2,-8(fp)
   821bc:	e0bffd17 	ldw	r2,-12(fp)
   821c0:	e0bfff15 	stw	r2,-4(fp)
        return x;
   821c4:	e0bffe17 	ldw	r2,-8(fp)
   821c8:	e0ffff17 	ldw	r3,-4(fp)
   821cc:	1009883a 	mov	r4,r2
   821d0:	180b883a 	mov	r5,r3
}
   821d4:	2005883a 	mov	r2,r4
   821d8:	2807883a 	mov	r3,r5
   821dc:	e037883a 	mov	sp,fp
   821e0:	df000017 	ldw	fp,0(sp)
   821e4:	dec00104 	addi	sp,sp,4
   821e8:	f800283a 	ret

000821ec <__divsi3>:
   821ec:	20001b16 	blt	r4,zero,8225c <__divsi3+0x70>
   821f0:	000f883a 	mov	r7,zero
   821f4:	28001616 	blt	r5,zero,82250 <__divsi3+0x64>
   821f8:	200d883a 	mov	r6,r4
   821fc:	29001a2e 	bgeu	r5,r4,82268 <__divsi3+0x7c>
   82200:	00800804 	movi	r2,32
   82204:	00c00044 	movi	r3,1
   82208:	00000106 	br	82210 <__divsi3+0x24>
   8220c:	10000d26 	beq	r2,zero,82244 <__divsi3+0x58>
   82210:	294b883a 	add	r5,r5,r5
   82214:	10bfffc4 	addi	r2,r2,-1
   82218:	18c7883a 	add	r3,r3,r3
   8221c:	293ffb36 	bltu	r5,r4,8220c <__alt_data_end+0xfffd020c>
   82220:	0005883a 	mov	r2,zero
   82224:	18000726 	beq	r3,zero,82244 <__divsi3+0x58>
   82228:	0005883a 	mov	r2,zero
   8222c:	31400236 	bltu	r6,r5,82238 <__divsi3+0x4c>
   82230:	314dc83a 	sub	r6,r6,r5
   82234:	10c4b03a 	or	r2,r2,r3
   82238:	1806d07a 	srli	r3,r3,1
   8223c:	280ad07a 	srli	r5,r5,1
   82240:	183ffa1e 	bne	r3,zero,8222c <__alt_data_end+0xfffd022c>
   82244:	38000126 	beq	r7,zero,8224c <__divsi3+0x60>
   82248:	0085c83a 	sub	r2,zero,r2
   8224c:	f800283a 	ret
   82250:	014bc83a 	sub	r5,zero,r5
   82254:	39c0005c 	xori	r7,r7,1
   82258:	003fe706 	br	821f8 <__alt_data_end+0xfffd01f8>
   8225c:	0109c83a 	sub	r4,zero,r4
   82260:	01c00044 	movi	r7,1
   82264:	003fe306 	br	821f4 <__alt_data_end+0xfffd01f4>
   82268:	00c00044 	movi	r3,1
   8226c:	003fee06 	br	82228 <__alt_data_end+0xfffd0228>

00082270 <__modsi3>:
   82270:	20001716 	blt	r4,zero,822d0 <__modsi3+0x60>
   82274:	000f883a 	mov	r7,zero
   82278:	2005883a 	mov	r2,r4
   8227c:	28001216 	blt	r5,zero,822c8 <__modsi3+0x58>
   82280:	2900162e 	bgeu	r5,r4,822dc <__modsi3+0x6c>
   82284:	01800804 	movi	r6,32
   82288:	00c00044 	movi	r3,1
   8228c:	00000106 	br	82294 <__modsi3+0x24>
   82290:	30000a26 	beq	r6,zero,822bc <__modsi3+0x4c>
   82294:	294b883a 	add	r5,r5,r5
   82298:	31bfffc4 	addi	r6,r6,-1
   8229c:	18c7883a 	add	r3,r3,r3
   822a0:	293ffb36 	bltu	r5,r4,82290 <__alt_data_end+0xfffd0290>
   822a4:	18000526 	beq	r3,zero,822bc <__modsi3+0x4c>
   822a8:	1806d07a 	srli	r3,r3,1
   822ac:	11400136 	bltu	r2,r5,822b4 <__modsi3+0x44>
   822b0:	1145c83a 	sub	r2,r2,r5
   822b4:	280ad07a 	srli	r5,r5,1
   822b8:	183ffb1e 	bne	r3,zero,822a8 <__alt_data_end+0xfffd02a8>
   822bc:	38000126 	beq	r7,zero,822c4 <__modsi3+0x54>
   822c0:	0085c83a 	sub	r2,zero,r2
   822c4:	f800283a 	ret
   822c8:	014bc83a 	sub	r5,zero,r5
   822cc:	003fec06 	br	82280 <__alt_data_end+0xfffd0280>
   822d0:	0109c83a 	sub	r4,zero,r4
   822d4:	01c00044 	movi	r7,1
   822d8:	003fe706 	br	82278 <__alt_data_end+0xfffd0278>
   822dc:	00c00044 	movi	r3,1
   822e0:	003ff106 	br	822a8 <__alt_data_end+0xfffd02a8>

000822e4 <__udivsi3>:
   822e4:	200d883a 	mov	r6,r4
   822e8:	2900152e 	bgeu	r5,r4,82340 <__udivsi3+0x5c>
   822ec:	28001416 	blt	r5,zero,82340 <__udivsi3+0x5c>
   822f0:	00800804 	movi	r2,32
   822f4:	00c00044 	movi	r3,1
   822f8:	00000206 	br	82304 <__udivsi3+0x20>
   822fc:	10000e26 	beq	r2,zero,82338 <__udivsi3+0x54>
   82300:	28000516 	blt	r5,zero,82318 <__udivsi3+0x34>
   82304:	294b883a 	add	r5,r5,r5
   82308:	10bfffc4 	addi	r2,r2,-1
   8230c:	18c7883a 	add	r3,r3,r3
   82310:	293ffa36 	bltu	r5,r4,822fc <__alt_data_end+0xfffd02fc>
   82314:	18000826 	beq	r3,zero,82338 <__udivsi3+0x54>
   82318:	0005883a 	mov	r2,zero
   8231c:	31400236 	bltu	r6,r5,82328 <__udivsi3+0x44>
   82320:	314dc83a 	sub	r6,r6,r5
   82324:	10c4b03a 	or	r2,r2,r3
   82328:	1806d07a 	srli	r3,r3,1
   8232c:	280ad07a 	srli	r5,r5,1
   82330:	183ffa1e 	bne	r3,zero,8231c <__alt_data_end+0xfffd031c>
   82334:	f800283a 	ret
   82338:	0005883a 	mov	r2,zero
   8233c:	f800283a 	ret
   82340:	00c00044 	movi	r3,1
   82344:	003ff406 	br	82318 <__alt_data_end+0xfffd0318>

00082348 <__umodsi3>:
   82348:	2005883a 	mov	r2,r4
   8234c:	2900122e 	bgeu	r5,r4,82398 <__umodsi3+0x50>
   82350:	28001116 	blt	r5,zero,82398 <__umodsi3+0x50>
   82354:	01800804 	movi	r6,32
   82358:	00c00044 	movi	r3,1
   8235c:	00000206 	br	82368 <__umodsi3+0x20>
   82360:	30000c26 	beq	r6,zero,82394 <__umodsi3+0x4c>
   82364:	28000516 	blt	r5,zero,8237c <__umodsi3+0x34>
   82368:	294b883a 	add	r5,r5,r5
   8236c:	31bfffc4 	addi	r6,r6,-1
   82370:	18c7883a 	add	r3,r3,r3
   82374:	293ffa36 	bltu	r5,r4,82360 <__alt_data_end+0xfffd0360>
   82378:	18000626 	beq	r3,zero,82394 <__umodsi3+0x4c>
   8237c:	1806d07a 	srli	r3,r3,1
   82380:	11400136 	bltu	r2,r5,82388 <__umodsi3+0x40>
   82384:	1145c83a 	sub	r2,r2,r5
   82388:	280ad07a 	srli	r5,r5,1
   8238c:	183ffb1e 	bne	r3,zero,8237c <__alt_data_end+0xfffd037c>
   82390:	f800283a 	ret
   82394:	f800283a 	ret
   82398:	00c00044 	movi	r3,1
   8239c:	003ff706 	br	8237c <__alt_data_end+0xfffd037c>

000823a0 <__mulsi3>:
   823a0:	0005883a 	mov	r2,zero
   823a4:	20000726 	beq	r4,zero,823c4 <__mulsi3+0x24>
   823a8:	20c0004c 	andi	r3,r4,1
   823ac:	2008d07a 	srli	r4,r4,1
   823b0:	18000126 	beq	r3,zero,823b8 <__mulsi3+0x18>
   823b4:	1145883a 	add	r2,r2,r5
   823b8:	294b883a 	add	r5,r5,r5
   823bc:	203ffa1e 	bne	r4,zero,823a8 <__alt_data_end+0xfffd03a8>
   823c0:	f800283a 	ret
   823c4:	f800283a 	ret

000823c8 <__adddf3>:
   823c8:	02c00434 	movhi	r11,16
   823cc:	5affffc4 	addi	r11,r11,-1
   823d0:	2806d7fa 	srli	r3,r5,31
   823d4:	2ad4703a 	and	r10,r5,r11
   823d8:	3ad2703a 	and	r9,r7,r11
   823dc:	3804d53a 	srli	r2,r7,20
   823e0:	3018d77a 	srli	r12,r6,29
   823e4:	280ad53a 	srli	r5,r5,20
   823e8:	501490fa 	slli	r10,r10,3
   823ec:	2010d77a 	srli	r8,r4,29
   823f0:	481290fa 	slli	r9,r9,3
   823f4:	380ed7fa 	srli	r7,r7,31
   823f8:	defffb04 	addi	sp,sp,-20
   823fc:	dc800215 	stw	r18,8(sp)
   82400:	dc400115 	stw	r17,4(sp)
   82404:	dc000015 	stw	r16,0(sp)
   82408:	dfc00415 	stw	ra,16(sp)
   8240c:	dcc00315 	stw	r19,12(sp)
   82410:	1c803fcc 	andi	r18,r3,255
   82414:	2c01ffcc 	andi	r16,r5,2047
   82418:	5210b03a 	or	r8,r10,r8
   8241c:	202290fa 	slli	r17,r4,3
   82420:	1081ffcc 	andi	r2,r2,2047
   82424:	4b12b03a 	or	r9,r9,r12
   82428:	300c90fa 	slli	r6,r6,3
   8242c:	91c07526 	beq	r18,r7,82604 <__adddf3+0x23c>
   82430:	8087c83a 	sub	r3,r16,r2
   82434:	00c0ab0e 	bge	zero,r3,826e4 <__adddf3+0x31c>
   82438:	10002a1e 	bne	r2,zero,824e4 <__adddf3+0x11c>
   8243c:	4984b03a 	or	r2,r9,r6
   82440:	1000961e 	bne	r2,zero,8269c <__adddf3+0x2d4>
   82444:	888001cc 	andi	r2,r17,7
   82448:	10000726 	beq	r2,zero,82468 <__adddf3+0xa0>
   8244c:	888003cc 	andi	r2,r17,15
   82450:	00c00104 	movi	r3,4
   82454:	10c00426 	beq	r2,r3,82468 <__adddf3+0xa0>
   82458:	88c7883a 	add	r3,r17,r3
   8245c:	1c63803a 	cmpltu	r17,r3,r17
   82460:	4451883a 	add	r8,r8,r17
   82464:	1823883a 	mov	r17,r3
   82468:	4080202c 	andhi	r2,r8,128
   8246c:	10005926 	beq	r2,zero,825d4 <__adddf3+0x20c>
   82470:	84000044 	addi	r16,r16,1
   82474:	0081ffc4 	movi	r2,2047
   82478:	8080ba26 	beq	r16,r2,82764 <__adddf3+0x39c>
   8247c:	00bfe034 	movhi	r2,65408
   82480:	10bfffc4 	addi	r2,r2,-1
   82484:	4090703a 	and	r8,r8,r2
   82488:	4004977a 	slli	r2,r8,29
   8248c:	4010927a 	slli	r8,r8,9
   82490:	8822d0fa 	srli	r17,r17,3
   82494:	8401ffcc 	andi	r16,r16,2047
   82498:	4010d33a 	srli	r8,r8,12
   8249c:	9007883a 	mov	r3,r18
   824a0:	1444b03a 	or	r2,r2,r17
   824a4:	8401ffcc 	andi	r16,r16,2047
   824a8:	8020953a 	slli	r16,r16,20
   824ac:	18c03fcc 	andi	r3,r3,255
   824b0:	01000434 	movhi	r4,16
   824b4:	213fffc4 	addi	r4,r4,-1
   824b8:	180697fa 	slli	r3,r3,31
   824bc:	4110703a 	and	r8,r8,r4
   824c0:	4410b03a 	or	r8,r8,r16
   824c4:	40c6b03a 	or	r3,r8,r3
   824c8:	dfc00417 	ldw	ra,16(sp)
   824cc:	dcc00317 	ldw	r19,12(sp)
   824d0:	dc800217 	ldw	r18,8(sp)
   824d4:	dc400117 	ldw	r17,4(sp)
   824d8:	dc000017 	ldw	r16,0(sp)
   824dc:	dec00504 	addi	sp,sp,20
   824e0:	f800283a 	ret
   824e4:	0081ffc4 	movi	r2,2047
   824e8:	80bfd626 	beq	r16,r2,82444 <__alt_data_end+0xfffd0444>
   824ec:	4a402034 	orhi	r9,r9,128
   824f0:	00800e04 	movi	r2,56
   824f4:	10c09f16 	blt	r2,r3,82774 <__adddf3+0x3ac>
   824f8:	008007c4 	movi	r2,31
   824fc:	10c0c216 	blt	r2,r3,82808 <__adddf3+0x440>
   82500:	00800804 	movi	r2,32
   82504:	10c5c83a 	sub	r2,r2,r3
   82508:	488a983a 	sll	r5,r9,r2
   8250c:	30c8d83a 	srl	r4,r6,r3
   82510:	3084983a 	sll	r2,r6,r2
   82514:	48c6d83a 	srl	r3,r9,r3
   82518:	290cb03a 	or	r6,r5,r4
   8251c:	1004c03a 	cmpne	r2,r2,zero
   82520:	308cb03a 	or	r6,r6,r2
   82524:	898dc83a 	sub	r6,r17,r6
   82528:	89a3803a 	cmpltu	r17,r17,r6
   8252c:	40d1c83a 	sub	r8,r8,r3
   82530:	4451c83a 	sub	r8,r8,r17
   82534:	3023883a 	mov	r17,r6
   82538:	4080202c 	andhi	r2,r8,128
   8253c:	10002326 	beq	r2,zero,825cc <__adddf3+0x204>
   82540:	04c02034 	movhi	r19,128
   82544:	9cffffc4 	addi	r19,r19,-1
   82548:	44e6703a 	and	r19,r8,r19
   8254c:	98007626 	beq	r19,zero,82728 <__adddf3+0x360>
   82550:	9809883a 	mov	r4,r19
   82554:	0084d900 	call	84d90 <__clzsi2>
   82558:	10fffe04 	addi	r3,r2,-8
   8255c:	010007c4 	movi	r4,31
   82560:	20c07716 	blt	r4,r3,82740 <__adddf3+0x378>
   82564:	00800804 	movi	r2,32
   82568:	10c5c83a 	sub	r2,r2,r3
   8256c:	8884d83a 	srl	r2,r17,r2
   82570:	98d0983a 	sll	r8,r19,r3
   82574:	88e2983a 	sll	r17,r17,r3
   82578:	1204b03a 	or	r2,r2,r8
   8257c:	1c007416 	blt	r3,r16,82750 <__adddf3+0x388>
   82580:	1c21c83a 	sub	r16,r3,r16
   82584:	82000044 	addi	r8,r16,1
   82588:	00c007c4 	movi	r3,31
   8258c:	1a009116 	blt	r3,r8,827d4 <__adddf3+0x40c>
   82590:	00c00804 	movi	r3,32
   82594:	1a07c83a 	sub	r3,r3,r8
   82598:	8a08d83a 	srl	r4,r17,r8
   8259c:	88e2983a 	sll	r17,r17,r3
   825a0:	10c6983a 	sll	r3,r2,r3
   825a4:	1210d83a 	srl	r8,r2,r8
   825a8:	8804c03a 	cmpne	r2,r17,zero
   825ac:	1906b03a 	or	r3,r3,r4
   825b0:	18a2b03a 	or	r17,r3,r2
   825b4:	0021883a 	mov	r16,zero
   825b8:	003fa206 	br	82444 <__alt_data_end+0xfffd0444>
   825bc:	1890b03a 	or	r8,r3,r2
   825c0:	40017d26 	beq	r8,zero,82bb8 <__adddf3+0x7f0>
   825c4:	1011883a 	mov	r8,r2
   825c8:	1823883a 	mov	r17,r3
   825cc:	888001cc 	andi	r2,r17,7
   825d0:	103f9e1e 	bne	r2,zero,8244c <__alt_data_end+0xfffd044c>
   825d4:	4004977a 	slli	r2,r8,29
   825d8:	8822d0fa 	srli	r17,r17,3
   825dc:	4010d0fa 	srli	r8,r8,3
   825e0:	9007883a 	mov	r3,r18
   825e4:	1444b03a 	or	r2,r2,r17
   825e8:	0101ffc4 	movi	r4,2047
   825ec:	81002426 	beq	r16,r4,82680 <__adddf3+0x2b8>
   825f0:	8120703a 	and	r16,r16,r4
   825f4:	01000434 	movhi	r4,16
   825f8:	213fffc4 	addi	r4,r4,-1
   825fc:	4110703a 	and	r8,r8,r4
   82600:	003fa806 	br	824a4 <__alt_data_end+0xfffd04a4>
   82604:	8089c83a 	sub	r4,r16,r2
   82608:	01005e0e 	bge	zero,r4,82784 <__adddf3+0x3bc>
   8260c:	10002b26 	beq	r2,zero,826bc <__adddf3+0x2f4>
   82610:	0081ffc4 	movi	r2,2047
   82614:	80bf8b26 	beq	r16,r2,82444 <__alt_data_end+0xfffd0444>
   82618:	4a402034 	orhi	r9,r9,128
   8261c:	00800e04 	movi	r2,56
   82620:	1100a40e 	bge	r2,r4,828b4 <__adddf3+0x4ec>
   82624:	498cb03a 	or	r6,r9,r6
   82628:	300ac03a 	cmpne	r5,r6,zero
   8262c:	0013883a 	mov	r9,zero
   82630:	2c4b883a 	add	r5,r5,r17
   82634:	2c63803a 	cmpltu	r17,r5,r17
   82638:	4a11883a 	add	r8,r9,r8
   8263c:	8a11883a 	add	r8,r17,r8
   82640:	2823883a 	mov	r17,r5
   82644:	4080202c 	andhi	r2,r8,128
   82648:	103fe026 	beq	r2,zero,825cc <__alt_data_end+0xfffd05cc>
   8264c:	84000044 	addi	r16,r16,1
   82650:	0081ffc4 	movi	r2,2047
   82654:	8080d226 	beq	r16,r2,829a0 <__adddf3+0x5d8>
   82658:	00bfe034 	movhi	r2,65408
   8265c:	10bfffc4 	addi	r2,r2,-1
   82660:	4090703a 	and	r8,r8,r2
   82664:	880ad07a 	srli	r5,r17,1
   82668:	400897fa 	slli	r4,r8,31
   8266c:	88c0004c 	andi	r3,r17,1
   82670:	28e2b03a 	or	r17,r5,r3
   82674:	4010d07a 	srli	r8,r8,1
   82678:	2462b03a 	or	r17,r4,r17
   8267c:	003f7106 	br	82444 <__alt_data_end+0xfffd0444>
   82680:	4088b03a 	or	r4,r8,r2
   82684:	20014526 	beq	r4,zero,82b9c <__adddf3+0x7d4>
   82688:	01000434 	movhi	r4,16
   8268c:	42000234 	orhi	r8,r8,8
   82690:	213fffc4 	addi	r4,r4,-1
   82694:	4110703a 	and	r8,r8,r4
   82698:	003f8206 	br	824a4 <__alt_data_end+0xfffd04a4>
   8269c:	18ffffc4 	addi	r3,r3,-1
   826a0:	1800491e 	bne	r3,zero,827c8 <__adddf3+0x400>
   826a4:	898bc83a 	sub	r5,r17,r6
   826a8:	8963803a 	cmpltu	r17,r17,r5
   826ac:	4251c83a 	sub	r8,r8,r9
   826b0:	4451c83a 	sub	r8,r8,r17
   826b4:	2823883a 	mov	r17,r5
   826b8:	003f9f06 	br	82538 <__alt_data_end+0xfffd0538>
   826bc:	4984b03a 	or	r2,r9,r6
   826c0:	103f6026 	beq	r2,zero,82444 <__alt_data_end+0xfffd0444>
   826c4:	213fffc4 	addi	r4,r4,-1
   826c8:	2000931e 	bne	r4,zero,82918 <__adddf3+0x550>
   826cc:	898d883a 	add	r6,r17,r6
   826d0:	3463803a 	cmpltu	r17,r6,r17
   826d4:	4251883a 	add	r8,r8,r9
   826d8:	8a11883a 	add	r8,r17,r8
   826dc:	3023883a 	mov	r17,r6
   826e0:	003fd806 	br	82644 <__alt_data_end+0xfffd0644>
   826e4:	1800541e 	bne	r3,zero,82838 <__adddf3+0x470>
   826e8:	80800044 	addi	r2,r16,1
   826ec:	1081ffcc 	andi	r2,r2,2047
   826f0:	00c00044 	movi	r3,1
   826f4:	1880a00e 	bge	r3,r2,82978 <__adddf3+0x5b0>
   826f8:	8989c83a 	sub	r4,r17,r6
   826fc:	8905803a 	cmpltu	r2,r17,r4
   82700:	4267c83a 	sub	r19,r8,r9
   82704:	98a7c83a 	sub	r19,r19,r2
   82708:	9880202c 	andhi	r2,r19,128
   8270c:	10006326 	beq	r2,zero,8289c <__adddf3+0x4d4>
   82710:	3463c83a 	sub	r17,r6,r17
   82714:	4a07c83a 	sub	r3,r9,r8
   82718:	344d803a 	cmpltu	r6,r6,r17
   8271c:	19a7c83a 	sub	r19,r3,r6
   82720:	3825883a 	mov	r18,r7
   82724:	983f8a1e 	bne	r19,zero,82550 <__alt_data_end+0xfffd0550>
   82728:	8809883a 	mov	r4,r17
   8272c:	0084d900 	call	84d90 <__clzsi2>
   82730:	10800804 	addi	r2,r2,32
   82734:	10fffe04 	addi	r3,r2,-8
   82738:	010007c4 	movi	r4,31
   8273c:	20ff890e 	bge	r4,r3,82564 <__alt_data_end+0xfffd0564>
   82740:	10bff604 	addi	r2,r2,-40
   82744:	8884983a 	sll	r2,r17,r2
   82748:	0023883a 	mov	r17,zero
   8274c:	1c3f8c0e 	bge	r3,r16,82580 <__alt_data_end+0xfffd0580>
   82750:	023fe034 	movhi	r8,65408
   82754:	423fffc4 	addi	r8,r8,-1
   82758:	80e1c83a 	sub	r16,r16,r3
   8275c:	1210703a 	and	r8,r2,r8
   82760:	003f3806 	br	82444 <__alt_data_end+0xfffd0444>
   82764:	9007883a 	mov	r3,r18
   82768:	0011883a 	mov	r8,zero
   8276c:	0005883a 	mov	r2,zero
   82770:	003f4c06 	br	824a4 <__alt_data_end+0xfffd04a4>
   82774:	498cb03a 	or	r6,r9,r6
   82778:	300cc03a 	cmpne	r6,r6,zero
   8277c:	0007883a 	mov	r3,zero
   82780:	003f6806 	br	82524 <__alt_data_end+0xfffd0524>
   82784:	20009c1e 	bne	r4,zero,829f8 <__adddf3+0x630>
   82788:	80800044 	addi	r2,r16,1
   8278c:	1141ffcc 	andi	r5,r2,2047
   82790:	01000044 	movi	r4,1
   82794:	2140670e 	bge	r4,r5,82934 <__adddf3+0x56c>
   82798:	0101ffc4 	movi	r4,2047
   8279c:	11007f26 	beq	r2,r4,8299c <__adddf3+0x5d4>
   827a0:	898d883a 	add	r6,r17,r6
   827a4:	4247883a 	add	r3,r8,r9
   827a8:	3451803a 	cmpltu	r8,r6,r17
   827ac:	40d1883a 	add	r8,r8,r3
   827b0:	402297fa 	slli	r17,r8,31
   827b4:	300cd07a 	srli	r6,r6,1
   827b8:	4010d07a 	srli	r8,r8,1
   827bc:	1021883a 	mov	r16,r2
   827c0:	89a2b03a 	or	r17,r17,r6
   827c4:	003f1f06 	br	82444 <__alt_data_end+0xfffd0444>
   827c8:	0081ffc4 	movi	r2,2047
   827cc:	80bf481e 	bne	r16,r2,824f0 <__alt_data_end+0xfffd04f0>
   827d0:	003f1c06 	br	82444 <__alt_data_end+0xfffd0444>
   827d4:	843ff844 	addi	r16,r16,-31
   827d8:	01000804 	movi	r4,32
   827dc:	1406d83a 	srl	r3,r2,r16
   827e0:	41005026 	beq	r8,r4,82924 <__adddf3+0x55c>
   827e4:	01001004 	movi	r4,64
   827e8:	2211c83a 	sub	r8,r4,r8
   827ec:	1204983a 	sll	r2,r2,r8
   827f0:	88a2b03a 	or	r17,r17,r2
   827f4:	8822c03a 	cmpne	r17,r17,zero
   827f8:	1c62b03a 	or	r17,r3,r17
   827fc:	0011883a 	mov	r8,zero
   82800:	0021883a 	mov	r16,zero
   82804:	003f7106 	br	825cc <__alt_data_end+0xfffd05cc>
   82808:	193ff804 	addi	r4,r3,-32
   8280c:	00800804 	movi	r2,32
   82810:	4908d83a 	srl	r4,r9,r4
   82814:	18804526 	beq	r3,r2,8292c <__adddf3+0x564>
   82818:	00801004 	movi	r2,64
   8281c:	10c5c83a 	sub	r2,r2,r3
   82820:	4886983a 	sll	r3,r9,r2
   82824:	198cb03a 	or	r6,r3,r6
   82828:	300cc03a 	cmpne	r6,r6,zero
   8282c:	218cb03a 	or	r6,r4,r6
   82830:	0007883a 	mov	r3,zero
   82834:	003f3b06 	br	82524 <__alt_data_end+0xfffd0524>
   82838:	80002a26 	beq	r16,zero,828e4 <__adddf3+0x51c>
   8283c:	0101ffc4 	movi	r4,2047
   82840:	11006826 	beq	r2,r4,829e4 <__adddf3+0x61c>
   82844:	00c7c83a 	sub	r3,zero,r3
   82848:	42002034 	orhi	r8,r8,128
   8284c:	01000e04 	movi	r4,56
   82850:	20c07c16 	blt	r4,r3,82a44 <__adddf3+0x67c>
   82854:	010007c4 	movi	r4,31
   82858:	20c0da16 	blt	r4,r3,82bc4 <__adddf3+0x7fc>
   8285c:	01000804 	movi	r4,32
   82860:	20c9c83a 	sub	r4,r4,r3
   82864:	4114983a 	sll	r10,r8,r4
   82868:	88cad83a 	srl	r5,r17,r3
   8286c:	8908983a 	sll	r4,r17,r4
   82870:	40c6d83a 	srl	r3,r8,r3
   82874:	5162b03a 	or	r17,r10,r5
   82878:	2008c03a 	cmpne	r4,r4,zero
   8287c:	8922b03a 	or	r17,r17,r4
   82880:	3463c83a 	sub	r17,r6,r17
   82884:	48c7c83a 	sub	r3,r9,r3
   82888:	344d803a 	cmpltu	r6,r6,r17
   8288c:	1991c83a 	sub	r8,r3,r6
   82890:	1021883a 	mov	r16,r2
   82894:	3825883a 	mov	r18,r7
   82898:	003f2706 	br	82538 <__alt_data_end+0xfffd0538>
   8289c:	24d0b03a 	or	r8,r4,r19
   828a0:	40001b1e 	bne	r8,zero,82910 <__adddf3+0x548>
   828a4:	0005883a 	mov	r2,zero
   828a8:	0007883a 	mov	r3,zero
   828ac:	0021883a 	mov	r16,zero
   828b0:	003f4d06 	br	825e8 <__alt_data_end+0xfffd05e8>
   828b4:	008007c4 	movi	r2,31
   828b8:	11003c16 	blt	r2,r4,829ac <__adddf3+0x5e4>
   828bc:	00800804 	movi	r2,32
   828c0:	1105c83a 	sub	r2,r2,r4
   828c4:	488e983a 	sll	r7,r9,r2
   828c8:	310ad83a 	srl	r5,r6,r4
   828cc:	3084983a 	sll	r2,r6,r2
   828d0:	4912d83a 	srl	r9,r9,r4
   828d4:	394ab03a 	or	r5,r7,r5
   828d8:	1004c03a 	cmpne	r2,r2,zero
   828dc:	288ab03a 	or	r5,r5,r2
   828e0:	003f5306 	br	82630 <__alt_data_end+0xfffd0630>
   828e4:	4448b03a 	or	r4,r8,r17
   828e8:	20003e26 	beq	r4,zero,829e4 <__adddf3+0x61c>
   828ec:	00c6303a 	nor	r3,zero,r3
   828f0:	18003a1e 	bne	r3,zero,829dc <__adddf3+0x614>
   828f4:	3463c83a 	sub	r17,r6,r17
   828f8:	4a07c83a 	sub	r3,r9,r8
   828fc:	344d803a 	cmpltu	r6,r6,r17
   82900:	1991c83a 	sub	r8,r3,r6
   82904:	1021883a 	mov	r16,r2
   82908:	3825883a 	mov	r18,r7
   8290c:	003f0a06 	br	82538 <__alt_data_end+0xfffd0538>
   82910:	2023883a 	mov	r17,r4
   82914:	003f0d06 	br	8254c <__alt_data_end+0xfffd054c>
   82918:	0081ffc4 	movi	r2,2047
   8291c:	80bf3f1e 	bne	r16,r2,8261c <__alt_data_end+0xfffd061c>
   82920:	003ec806 	br	82444 <__alt_data_end+0xfffd0444>
   82924:	0005883a 	mov	r2,zero
   82928:	003fb106 	br	827f0 <__alt_data_end+0xfffd07f0>
   8292c:	0007883a 	mov	r3,zero
   82930:	003fbc06 	br	82824 <__alt_data_end+0xfffd0824>
   82934:	4444b03a 	or	r2,r8,r17
   82938:	8000871e 	bne	r16,zero,82b58 <__adddf3+0x790>
   8293c:	1000ba26 	beq	r2,zero,82c28 <__adddf3+0x860>
   82940:	4984b03a 	or	r2,r9,r6
   82944:	103ebf26 	beq	r2,zero,82444 <__alt_data_end+0xfffd0444>
   82948:	8985883a 	add	r2,r17,r6
   8294c:	4247883a 	add	r3,r8,r9
   82950:	1451803a 	cmpltu	r8,r2,r17
   82954:	40d1883a 	add	r8,r8,r3
   82958:	40c0202c 	andhi	r3,r8,128
   8295c:	1023883a 	mov	r17,r2
   82960:	183f1a26 	beq	r3,zero,825cc <__alt_data_end+0xfffd05cc>
   82964:	00bfe034 	movhi	r2,65408
   82968:	10bfffc4 	addi	r2,r2,-1
   8296c:	2021883a 	mov	r16,r4
   82970:	4090703a 	and	r8,r8,r2
   82974:	003eb306 	br	82444 <__alt_data_end+0xfffd0444>
   82978:	4444b03a 	or	r2,r8,r17
   8297c:	8000291e 	bne	r16,zero,82a24 <__adddf3+0x65c>
   82980:	10004b1e 	bne	r2,zero,82ab0 <__adddf3+0x6e8>
   82984:	4990b03a 	or	r8,r9,r6
   82988:	40008b26 	beq	r8,zero,82bb8 <__adddf3+0x7f0>
   8298c:	4811883a 	mov	r8,r9
   82990:	3023883a 	mov	r17,r6
   82994:	3825883a 	mov	r18,r7
   82998:	003eaa06 	br	82444 <__alt_data_end+0xfffd0444>
   8299c:	1021883a 	mov	r16,r2
   829a0:	0011883a 	mov	r8,zero
   829a4:	0005883a 	mov	r2,zero
   829a8:	003f0f06 	br	825e8 <__alt_data_end+0xfffd05e8>
   829ac:	217ff804 	addi	r5,r4,-32
   829b0:	00800804 	movi	r2,32
   829b4:	494ad83a 	srl	r5,r9,r5
   829b8:	20807d26 	beq	r4,r2,82bb0 <__adddf3+0x7e8>
   829bc:	00801004 	movi	r2,64
   829c0:	1109c83a 	sub	r4,r2,r4
   829c4:	4912983a 	sll	r9,r9,r4
   829c8:	498cb03a 	or	r6,r9,r6
   829cc:	300cc03a 	cmpne	r6,r6,zero
   829d0:	298ab03a 	or	r5,r5,r6
   829d4:	0013883a 	mov	r9,zero
   829d8:	003f1506 	br	82630 <__alt_data_end+0xfffd0630>
   829dc:	0101ffc4 	movi	r4,2047
   829e0:	113f9a1e 	bne	r2,r4,8284c <__alt_data_end+0xfffd084c>
   829e4:	4811883a 	mov	r8,r9
   829e8:	3023883a 	mov	r17,r6
   829ec:	1021883a 	mov	r16,r2
   829f0:	3825883a 	mov	r18,r7
   829f4:	003e9306 	br	82444 <__alt_data_end+0xfffd0444>
   829f8:	8000161e 	bne	r16,zero,82a54 <__adddf3+0x68c>
   829fc:	444ab03a 	or	r5,r8,r17
   82a00:	28005126 	beq	r5,zero,82b48 <__adddf3+0x780>
   82a04:	0108303a 	nor	r4,zero,r4
   82a08:	20004d1e 	bne	r4,zero,82b40 <__adddf3+0x778>
   82a0c:	89a3883a 	add	r17,r17,r6
   82a10:	4253883a 	add	r9,r8,r9
   82a14:	898d803a 	cmpltu	r6,r17,r6
   82a18:	3251883a 	add	r8,r6,r9
   82a1c:	1021883a 	mov	r16,r2
   82a20:	003f0806 	br	82644 <__alt_data_end+0xfffd0644>
   82a24:	1000301e 	bne	r2,zero,82ae8 <__adddf3+0x720>
   82a28:	4984b03a 	or	r2,r9,r6
   82a2c:	10007126 	beq	r2,zero,82bf4 <__adddf3+0x82c>
   82a30:	4811883a 	mov	r8,r9
   82a34:	3023883a 	mov	r17,r6
   82a38:	3825883a 	mov	r18,r7
   82a3c:	0401ffc4 	movi	r16,2047
   82a40:	003e8006 	br	82444 <__alt_data_end+0xfffd0444>
   82a44:	4462b03a 	or	r17,r8,r17
   82a48:	8822c03a 	cmpne	r17,r17,zero
   82a4c:	0007883a 	mov	r3,zero
   82a50:	003f8b06 	br	82880 <__alt_data_end+0xfffd0880>
   82a54:	0141ffc4 	movi	r5,2047
   82a58:	11403b26 	beq	r2,r5,82b48 <__adddf3+0x780>
   82a5c:	0109c83a 	sub	r4,zero,r4
   82a60:	42002034 	orhi	r8,r8,128
   82a64:	01400e04 	movi	r5,56
   82a68:	29006716 	blt	r5,r4,82c08 <__adddf3+0x840>
   82a6c:	014007c4 	movi	r5,31
   82a70:	29007016 	blt	r5,r4,82c34 <__adddf3+0x86c>
   82a74:	01400804 	movi	r5,32
   82a78:	290bc83a 	sub	r5,r5,r4
   82a7c:	4154983a 	sll	r10,r8,r5
   82a80:	890ed83a 	srl	r7,r17,r4
   82a84:	894a983a 	sll	r5,r17,r5
   82a88:	4108d83a 	srl	r4,r8,r4
   82a8c:	51e2b03a 	or	r17,r10,r7
   82a90:	280ac03a 	cmpne	r5,r5,zero
   82a94:	8962b03a 	or	r17,r17,r5
   82a98:	89a3883a 	add	r17,r17,r6
   82a9c:	2253883a 	add	r9,r4,r9
   82aa0:	898d803a 	cmpltu	r6,r17,r6
   82aa4:	3251883a 	add	r8,r6,r9
   82aa8:	1021883a 	mov	r16,r2
   82aac:	003ee506 	br	82644 <__alt_data_end+0xfffd0644>
   82ab0:	4984b03a 	or	r2,r9,r6
   82ab4:	103e6326 	beq	r2,zero,82444 <__alt_data_end+0xfffd0444>
   82ab8:	8987c83a 	sub	r3,r17,r6
   82abc:	88c9803a 	cmpltu	r4,r17,r3
   82ac0:	4245c83a 	sub	r2,r8,r9
   82ac4:	1105c83a 	sub	r2,r2,r4
   82ac8:	1100202c 	andhi	r4,r2,128
   82acc:	203ebb26 	beq	r4,zero,825bc <__alt_data_end+0xfffd05bc>
   82ad0:	3463c83a 	sub	r17,r6,r17
   82ad4:	4a07c83a 	sub	r3,r9,r8
   82ad8:	344d803a 	cmpltu	r6,r6,r17
   82adc:	1991c83a 	sub	r8,r3,r6
   82ae0:	3825883a 	mov	r18,r7
   82ae4:	003e5706 	br	82444 <__alt_data_end+0xfffd0444>
   82ae8:	4984b03a 	or	r2,r9,r6
   82aec:	10002e26 	beq	r2,zero,82ba8 <__adddf3+0x7e0>
   82af0:	4004d0fa 	srli	r2,r8,3
   82af4:	8822d0fa 	srli	r17,r17,3
   82af8:	4010977a 	slli	r8,r8,29
   82afc:	10c0022c 	andhi	r3,r2,8
   82b00:	4462b03a 	or	r17,r8,r17
   82b04:	18000826 	beq	r3,zero,82b28 <__adddf3+0x760>
   82b08:	4808d0fa 	srli	r4,r9,3
   82b0c:	20c0022c 	andhi	r3,r4,8
   82b10:	1800051e 	bne	r3,zero,82b28 <__adddf3+0x760>
   82b14:	300cd0fa 	srli	r6,r6,3
   82b18:	4806977a 	slli	r3,r9,29
   82b1c:	2005883a 	mov	r2,r4
   82b20:	3825883a 	mov	r18,r7
   82b24:	19a2b03a 	or	r17,r3,r6
   82b28:	8810d77a 	srli	r8,r17,29
   82b2c:	100490fa 	slli	r2,r2,3
   82b30:	882290fa 	slli	r17,r17,3
   82b34:	0401ffc4 	movi	r16,2047
   82b38:	4090b03a 	or	r8,r8,r2
   82b3c:	003e4106 	br	82444 <__alt_data_end+0xfffd0444>
   82b40:	0141ffc4 	movi	r5,2047
   82b44:	117fc71e 	bne	r2,r5,82a64 <__alt_data_end+0xfffd0a64>
   82b48:	4811883a 	mov	r8,r9
   82b4c:	3023883a 	mov	r17,r6
   82b50:	1021883a 	mov	r16,r2
   82b54:	003e3b06 	br	82444 <__alt_data_end+0xfffd0444>
   82b58:	10002f26 	beq	r2,zero,82c18 <__adddf3+0x850>
   82b5c:	4984b03a 	or	r2,r9,r6
   82b60:	10001126 	beq	r2,zero,82ba8 <__adddf3+0x7e0>
   82b64:	4004d0fa 	srli	r2,r8,3
   82b68:	8822d0fa 	srli	r17,r17,3
   82b6c:	4010977a 	slli	r8,r8,29
   82b70:	10c0022c 	andhi	r3,r2,8
   82b74:	4462b03a 	or	r17,r8,r17
   82b78:	183feb26 	beq	r3,zero,82b28 <__alt_data_end+0xfffd0b28>
   82b7c:	4808d0fa 	srli	r4,r9,3
   82b80:	20c0022c 	andhi	r3,r4,8
   82b84:	183fe81e 	bne	r3,zero,82b28 <__alt_data_end+0xfffd0b28>
   82b88:	300cd0fa 	srli	r6,r6,3
   82b8c:	4806977a 	slli	r3,r9,29
   82b90:	2005883a 	mov	r2,r4
   82b94:	19a2b03a 	or	r17,r3,r6
   82b98:	003fe306 	br	82b28 <__alt_data_end+0xfffd0b28>
   82b9c:	0011883a 	mov	r8,zero
   82ba0:	0005883a 	mov	r2,zero
   82ba4:	003e3f06 	br	824a4 <__alt_data_end+0xfffd04a4>
   82ba8:	0401ffc4 	movi	r16,2047
   82bac:	003e2506 	br	82444 <__alt_data_end+0xfffd0444>
   82bb0:	0013883a 	mov	r9,zero
   82bb4:	003f8406 	br	829c8 <__alt_data_end+0xfffd09c8>
   82bb8:	0005883a 	mov	r2,zero
   82bbc:	0007883a 	mov	r3,zero
   82bc0:	003e8906 	br	825e8 <__alt_data_end+0xfffd05e8>
   82bc4:	197ff804 	addi	r5,r3,-32
   82bc8:	01000804 	movi	r4,32
   82bcc:	414ad83a 	srl	r5,r8,r5
   82bd0:	19002426 	beq	r3,r4,82c64 <__adddf3+0x89c>
   82bd4:	01001004 	movi	r4,64
   82bd8:	20c7c83a 	sub	r3,r4,r3
   82bdc:	40c6983a 	sll	r3,r8,r3
   82be0:	1c46b03a 	or	r3,r3,r17
   82be4:	1806c03a 	cmpne	r3,r3,zero
   82be8:	28e2b03a 	or	r17,r5,r3
   82bec:	0007883a 	mov	r3,zero
   82bf0:	003f2306 	br	82880 <__alt_data_end+0xfffd0880>
   82bf4:	0007883a 	mov	r3,zero
   82bf8:	5811883a 	mov	r8,r11
   82bfc:	00bfffc4 	movi	r2,-1
   82c00:	0401ffc4 	movi	r16,2047
   82c04:	003e7806 	br	825e8 <__alt_data_end+0xfffd05e8>
   82c08:	4462b03a 	or	r17,r8,r17
   82c0c:	8822c03a 	cmpne	r17,r17,zero
   82c10:	0009883a 	mov	r4,zero
   82c14:	003fa006 	br	82a98 <__alt_data_end+0xfffd0a98>
   82c18:	4811883a 	mov	r8,r9
   82c1c:	3023883a 	mov	r17,r6
   82c20:	0401ffc4 	movi	r16,2047
   82c24:	003e0706 	br	82444 <__alt_data_end+0xfffd0444>
   82c28:	4811883a 	mov	r8,r9
   82c2c:	3023883a 	mov	r17,r6
   82c30:	003e0406 	br	82444 <__alt_data_end+0xfffd0444>
   82c34:	21fff804 	addi	r7,r4,-32
   82c38:	01400804 	movi	r5,32
   82c3c:	41ced83a 	srl	r7,r8,r7
   82c40:	21400a26 	beq	r4,r5,82c6c <__adddf3+0x8a4>
   82c44:	01401004 	movi	r5,64
   82c48:	2909c83a 	sub	r4,r5,r4
   82c4c:	4108983a 	sll	r4,r8,r4
   82c50:	2448b03a 	or	r4,r4,r17
   82c54:	2008c03a 	cmpne	r4,r4,zero
   82c58:	3922b03a 	or	r17,r7,r4
   82c5c:	0009883a 	mov	r4,zero
   82c60:	003f8d06 	br	82a98 <__alt_data_end+0xfffd0a98>
   82c64:	0007883a 	mov	r3,zero
   82c68:	003fdd06 	br	82be0 <__alt_data_end+0xfffd0be0>
   82c6c:	0009883a 	mov	r4,zero
   82c70:	003ff706 	br	82c50 <__alt_data_end+0xfffd0c50>

00082c74 <__divdf3>:
   82c74:	defff004 	addi	sp,sp,-64
   82c78:	dc800815 	stw	r18,32(sp)
   82c7c:	2824d53a 	srli	r18,r5,20
   82c80:	dd800c15 	stw	r22,48(sp)
   82c84:	282cd7fa 	srli	r22,r5,31
   82c88:	dc000615 	stw	r16,24(sp)
   82c8c:	04000434 	movhi	r16,16
   82c90:	843fffc4 	addi	r16,r16,-1
   82c94:	dfc00f15 	stw	ra,60(sp)
   82c98:	df000e15 	stw	fp,56(sp)
   82c9c:	ddc00d15 	stw	r23,52(sp)
   82ca0:	dd400b15 	stw	r21,44(sp)
   82ca4:	dd000a15 	stw	r20,40(sp)
   82ca8:	dcc00915 	stw	r19,36(sp)
   82cac:	dc400715 	stw	r17,28(sp)
   82cb0:	9481ffcc 	andi	r18,r18,2047
   82cb4:	2c20703a 	and	r16,r5,r16
   82cb8:	b2003fcc 	andi	r8,r22,255
   82cbc:	90006126 	beq	r18,zero,82e44 <__divdf3+0x1d0>
   82cc0:	0081ffc4 	movi	r2,2047
   82cc4:	202b883a 	mov	r21,r4
   82cc8:	90803726 	beq	r18,r2,82da8 <__divdf3+0x134>
   82ccc:	80800434 	orhi	r2,r16,16
   82cd0:	100490fa 	slli	r2,r2,3
   82cd4:	2020d77a 	srli	r16,r4,29
   82cd8:	202a90fa 	slli	r21,r4,3
   82cdc:	94bf0044 	addi	r18,r18,-1023
   82ce0:	80a0b03a 	or	r16,r16,r2
   82ce4:	0013883a 	mov	r9,zero
   82ce8:	000b883a 	mov	r5,zero
   82cec:	3806d53a 	srli	r3,r7,20
   82cf0:	382ed7fa 	srli	r23,r7,31
   82cf4:	04400434 	movhi	r17,16
   82cf8:	8c7fffc4 	addi	r17,r17,-1
   82cfc:	18c1ffcc 	andi	r3,r3,2047
   82d00:	3029883a 	mov	r20,r6
   82d04:	3c62703a 	and	r17,r7,r17
   82d08:	bf003fcc 	andi	fp,r23,255
   82d0c:	18006e26 	beq	r3,zero,82ec8 <__divdf3+0x254>
   82d10:	0081ffc4 	movi	r2,2047
   82d14:	18806626 	beq	r3,r2,82eb0 <__divdf3+0x23c>
   82d18:	88800434 	orhi	r2,r17,16
   82d1c:	100490fa 	slli	r2,r2,3
   82d20:	3022d77a 	srli	r17,r6,29
   82d24:	302890fa 	slli	r20,r6,3
   82d28:	18ff0044 	addi	r3,r3,-1023
   82d2c:	88a2b03a 	or	r17,r17,r2
   82d30:	000f883a 	mov	r7,zero
   82d34:	b5e6f03a 	xor	r19,r22,r23
   82d38:	3a4cb03a 	or	r6,r7,r9
   82d3c:	008003c4 	movi	r2,15
   82d40:	9809883a 	mov	r4,r19
   82d44:	90c7c83a 	sub	r3,r18,r3
   82d48:	9cc03fcc 	andi	r19,r19,255
   82d4c:	11809636 	bltu	r2,r6,82fa8 <__divdf3+0x334>
   82d50:	300c90ba 	slli	r6,r6,2
   82d54:	00800234 	movhi	r2,8
   82d58:	108b5a04 	addi	r2,r2,11624
   82d5c:	308d883a 	add	r6,r6,r2
   82d60:	30800017 	ldw	r2,0(r6)
   82d64:	1000683a 	jmp	r2
   82d68:	00082fa8 	cmpgeui	zero,zero,8382
   82d6c:	00082de0 	cmpeqi	zero,zero,8375
   82d70:	00082f98 	cmpnei	zero,zero,8382
   82d74:	00082dd4 	movui	zero,8375
   82d78:	00082f98 	cmpnei	zero,zero,8382
   82d7c:	00082f6c 	andhi	zero,zero,8381
   82d80:	00082f98 	cmpnei	zero,zero,8382
   82d84:	00082dd4 	movui	zero,8375
   82d88:	00082de0 	cmpeqi	zero,zero,8375
   82d8c:	00082de0 	cmpeqi	zero,zero,8375
   82d90:	00082f6c 	andhi	zero,zero,8381
   82d94:	00082dd4 	movui	zero,8375
   82d98:	00082dc4 	movi	zero,8375
   82d9c:	00082dc4 	movi	zero,8375
   82da0:	00082dc4 	movi	zero,8375
   82da4:	00083330 	cmpltui	zero,zero,8396
   82da8:	2404b03a 	or	r2,r4,r16
   82dac:	10006c1e 	bne	r2,zero,82f60 <__divdf3+0x2ec>
   82db0:	02400204 	movi	r9,8
   82db4:	0021883a 	mov	r16,zero
   82db8:	002b883a 	mov	r21,zero
   82dbc:	01400084 	movi	r5,2
   82dc0:	003fca06 	br	82cec <__alt_data_end+0xfffd0cec>
   82dc4:	8023883a 	mov	r17,r16
   82dc8:	a829883a 	mov	r20,r21
   82dcc:	4039883a 	mov	fp,r8
   82dd0:	280f883a 	mov	r7,r5
   82dd4:	00800084 	movi	r2,2
   82dd8:	3881601e 	bne	r7,r2,8335c <__divdf3+0x6e8>
   82ddc:	e027883a 	mov	r19,fp
   82de0:	9900004c 	andi	r4,r19,1
   82de4:	0081ffc4 	movi	r2,2047
   82de8:	0021883a 	mov	r16,zero
   82dec:	002b883a 	mov	r21,zero
   82df0:	1004953a 	slli	r2,r2,20
   82df4:	20c03fcc 	andi	r3,r4,255
   82df8:	01400434 	movhi	r5,16
   82dfc:	297fffc4 	addi	r5,r5,-1
   82e00:	180697fa 	slli	r3,r3,31
   82e04:	8160703a 	and	r16,r16,r5
   82e08:	80a0b03a 	or	r16,r16,r2
   82e0c:	80c6b03a 	or	r3,r16,r3
   82e10:	a805883a 	mov	r2,r21
   82e14:	dfc00f17 	ldw	ra,60(sp)
   82e18:	df000e17 	ldw	fp,56(sp)
   82e1c:	ddc00d17 	ldw	r23,52(sp)
   82e20:	dd800c17 	ldw	r22,48(sp)
   82e24:	dd400b17 	ldw	r21,44(sp)
   82e28:	dd000a17 	ldw	r20,40(sp)
   82e2c:	dcc00917 	ldw	r19,36(sp)
   82e30:	dc800817 	ldw	r18,32(sp)
   82e34:	dc400717 	ldw	r17,28(sp)
   82e38:	dc000617 	ldw	r16,24(sp)
   82e3c:	dec01004 	addi	sp,sp,64
   82e40:	f800283a 	ret
   82e44:	2404b03a 	or	r2,r4,r16
   82e48:	2023883a 	mov	r17,r4
   82e4c:	10003f26 	beq	r2,zero,82f4c <__divdf3+0x2d8>
   82e50:	80015e26 	beq	r16,zero,833cc <__divdf3+0x758>
   82e54:	8009883a 	mov	r4,r16
   82e58:	d9800215 	stw	r6,8(sp)
   82e5c:	d9c00515 	stw	r7,20(sp)
   82e60:	da000415 	stw	r8,16(sp)
   82e64:	0084d900 	call	84d90 <__clzsi2>
   82e68:	d9800217 	ldw	r6,8(sp)
   82e6c:	d9c00517 	ldw	r7,20(sp)
   82e70:	da000417 	ldw	r8,16(sp)
   82e74:	113ffd44 	addi	r4,r2,-11
   82e78:	00c00704 	movi	r3,28
   82e7c:	19014f16 	blt	r3,r4,833bc <__divdf3+0x748>
   82e80:	00c00744 	movi	r3,29
   82e84:	157ffe04 	addi	r21,r2,-8
   82e88:	1907c83a 	sub	r3,r3,r4
   82e8c:	8560983a 	sll	r16,r16,r21
   82e90:	88c6d83a 	srl	r3,r17,r3
   82e94:	8d6a983a 	sll	r21,r17,r21
   82e98:	1c20b03a 	or	r16,r3,r16
   82e9c:	1080fcc4 	addi	r2,r2,1011
   82ea0:	00a5c83a 	sub	r18,zero,r2
   82ea4:	0013883a 	mov	r9,zero
   82ea8:	000b883a 	mov	r5,zero
   82eac:	003f8f06 	br	82cec <__alt_data_end+0xfffd0cec>
   82eb0:	3444b03a 	or	r2,r6,r17
   82eb4:	1000231e 	bne	r2,zero,82f44 <__divdf3+0x2d0>
   82eb8:	0023883a 	mov	r17,zero
   82ebc:	0029883a 	mov	r20,zero
   82ec0:	01c00084 	movi	r7,2
   82ec4:	003f9b06 	br	82d34 <__alt_data_end+0xfffd0d34>
   82ec8:	3444b03a 	or	r2,r6,r17
   82ecc:	10001926 	beq	r2,zero,82f34 <__divdf3+0x2c0>
   82ed0:	88014b26 	beq	r17,zero,83400 <__divdf3+0x78c>
   82ed4:	8809883a 	mov	r4,r17
   82ed8:	d9400115 	stw	r5,4(sp)
   82edc:	d9800215 	stw	r6,8(sp)
   82ee0:	da000415 	stw	r8,16(sp)
   82ee4:	da400315 	stw	r9,12(sp)
   82ee8:	0084d900 	call	84d90 <__clzsi2>
   82eec:	d9400117 	ldw	r5,4(sp)
   82ef0:	d9800217 	ldw	r6,8(sp)
   82ef4:	da000417 	ldw	r8,16(sp)
   82ef8:	da400317 	ldw	r9,12(sp)
   82efc:	113ffd44 	addi	r4,r2,-11
   82f00:	00c00704 	movi	r3,28
   82f04:	19013a16 	blt	r3,r4,833f0 <__divdf3+0x77c>
   82f08:	00c00744 	movi	r3,29
   82f0c:	153ffe04 	addi	r20,r2,-8
   82f10:	1907c83a 	sub	r3,r3,r4
   82f14:	8d22983a 	sll	r17,r17,r20
   82f18:	30c6d83a 	srl	r3,r6,r3
   82f1c:	3528983a 	sll	r20,r6,r20
   82f20:	1c62b03a 	or	r17,r3,r17
   82f24:	1080fcc4 	addi	r2,r2,1011
   82f28:	0087c83a 	sub	r3,zero,r2
   82f2c:	000f883a 	mov	r7,zero
   82f30:	003f8006 	br	82d34 <__alt_data_end+0xfffd0d34>
   82f34:	0023883a 	mov	r17,zero
   82f38:	0029883a 	mov	r20,zero
   82f3c:	01c00044 	movi	r7,1
   82f40:	003f7c06 	br	82d34 <__alt_data_end+0xfffd0d34>
   82f44:	01c000c4 	movi	r7,3
   82f48:	003f7a06 	br	82d34 <__alt_data_end+0xfffd0d34>
   82f4c:	02400104 	movi	r9,4
   82f50:	0021883a 	mov	r16,zero
   82f54:	002b883a 	mov	r21,zero
   82f58:	01400044 	movi	r5,1
   82f5c:	003f6306 	br	82cec <__alt_data_end+0xfffd0cec>
   82f60:	02400304 	movi	r9,12
   82f64:	014000c4 	movi	r5,3
   82f68:	003f6006 	br	82cec <__alt_data_end+0xfffd0cec>
   82f6c:	04000434 	movhi	r16,16
   82f70:	0009883a 	mov	r4,zero
   82f74:	843fffc4 	addi	r16,r16,-1
   82f78:	057fffc4 	movi	r21,-1
   82f7c:	0081ffc4 	movi	r2,2047
   82f80:	003f9b06 	br	82df0 <__alt_data_end+0xfffd0df0>
   82f84:	00c00044 	movi	r3,1
   82f88:	1887c83a 	sub	r3,r3,r2
   82f8c:	01000e04 	movi	r4,56
   82f90:	20c1530e 	bge	r4,r3,834e0 <__divdf3+0x86c>
   82f94:	9900004c 	andi	r4,r19,1
   82f98:	0005883a 	mov	r2,zero
   82f9c:	0021883a 	mov	r16,zero
   82fa0:	002b883a 	mov	r21,zero
   82fa4:	003f9206 	br	82df0 <__alt_data_end+0xfffd0df0>
   82fa8:	8c012e36 	bltu	r17,r16,83464 <__divdf3+0x7f0>
   82fac:	84412c26 	beq	r16,r17,83460 <__divdf3+0x7ec>
   82fb0:	a82f883a 	mov	r23,r21
   82fb4:	18ffffc4 	addi	r3,r3,-1
   82fb8:	002b883a 	mov	r21,zero
   82fbc:	a004d63a 	srli	r2,r20,24
   82fc0:	8822923a 	slli	r17,r17,8
   82fc4:	a028923a 	slli	r20,r20,8
   82fc8:	8009883a 	mov	r4,r16
   82fcc:	88acb03a 	or	r22,r17,r2
   82fd0:	dd000015 	stw	r20,0(sp)
   82fd4:	b028d43a 	srli	r20,r22,16
   82fd8:	d8c00215 	stw	r3,8(sp)
   82fdc:	b4bfffcc 	andi	r18,r22,65535
   82fe0:	a00b883a 	mov	r5,r20
   82fe4:	00822e40 	call	822e4 <__udivsi3>
   82fe8:	100b883a 	mov	r5,r2
   82fec:	9009883a 	mov	r4,r18
   82ff0:	1023883a 	mov	r17,r2
   82ff4:	00823a00 	call	823a0 <__mulsi3>
   82ff8:	8009883a 	mov	r4,r16
   82ffc:	a00b883a 	mov	r5,r20
   83000:	1039883a 	mov	fp,r2
   83004:	00823480 	call	82348 <__umodsi3>
   83008:	1004943a 	slli	r2,r2,16
   8300c:	b808d43a 	srli	r4,r23,16
   83010:	d8c00217 	ldw	r3,8(sp)
   83014:	2084b03a 	or	r2,r4,r2
   83018:	1700062e 	bgeu	r2,fp,83034 <__divdf3+0x3c0>
   8301c:	1585883a 	add	r2,r2,r22
   83020:	893fffc4 	addi	r4,r17,-1
   83024:	15811d36 	bltu	r2,r22,8349c <__divdf3+0x828>
   83028:	17011c2e 	bgeu	r2,fp,8349c <__divdf3+0x828>
   8302c:	8c7fff84 	addi	r17,r17,-2
   83030:	1585883a 	add	r2,r2,r22
   83034:	1739c83a 	sub	fp,r2,fp
   83038:	a00b883a 	mov	r5,r20
   8303c:	e009883a 	mov	r4,fp
   83040:	d8c00215 	stw	r3,8(sp)
   83044:	00822e40 	call	822e4 <__udivsi3>
   83048:	100b883a 	mov	r5,r2
   8304c:	9009883a 	mov	r4,r18
   83050:	1021883a 	mov	r16,r2
   83054:	00823a00 	call	823a0 <__mulsi3>
   83058:	a00b883a 	mov	r5,r20
   8305c:	e009883a 	mov	r4,fp
   83060:	d8800415 	stw	r2,16(sp)
   83064:	00823480 	call	82348 <__umodsi3>
   83068:	1004943a 	slli	r2,r2,16
   8306c:	da000417 	ldw	r8,16(sp)
   83070:	bdffffcc 	andi	r23,r23,65535
   83074:	b884b03a 	or	r2,r23,r2
   83078:	d8c00217 	ldw	r3,8(sp)
   8307c:	1200062e 	bgeu	r2,r8,83098 <__divdf3+0x424>
   83080:	1585883a 	add	r2,r2,r22
   83084:	813fffc4 	addi	r4,r16,-1
   83088:	15810236 	bltu	r2,r22,83494 <__divdf3+0x820>
   8308c:	1201012e 	bgeu	r2,r8,83494 <__divdf3+0x820>
   83090:	843fff84 	addi	r16,r16,-2
   83094:	1585883a 	add	r2,r2,r22
   83098:	8822943a 	slli	r17,r17,16
   8309c:	d9800017 	ldw	r6,0(sp)
   830a0:	1211c83a 	sub	r8,r2,r8
   830a4:	8c22b03a 	or	r17,r17,r16
   830a8:	373fffcc 	andi	fp,r6,65535
   830ac:	8abfffcc 	andi	r10,r17,65535
   830b0:	8820d43a 	srli	r16,r17,16
   830b4:	5009883a 	mov	r4,r10
   830b8:	e00b883a 	mov	r5,fp
   830bc:	302ed43a 	srli	r23,r6,16
   830c0:	d8c00215 	stw	r3,8(sp)
   830c4:	da000415 	stw	r8,16(sp)
   830c8:	da800115 	stw	r10,4(sp)
   830cc:	00823a00 	call	823a0 <__mulsi3>
   830d0:	800b883a 	mov	r5,r16
   830d4:	e009883a 	mov	r4,fp
   830d8:	d8800515 	stw	r2,20(sp)
   830dc:	00823a00 	call	823a0 <__mulsi3>
   830e0:	8009883a 	mov	r4,r16
   830e4:	b80b883a 	mov	r5,r23
   830e8:	d8800315 	stw	r2,12(sp)
   830ec:	00823a00 	call	823a0 <__mulsi3>
   830f0:	da800117 	ldw	r10,4(sp)
   830f4:	b80b883a 	mov	r5,r23
   830f8:	1021883a 	mov	r16,r2
   830fc:	5009883a 	mov	r4,r10
   83100:	00823a00 	call	823a0 <__mulsi3>
   83104:	d9c00517 	ldw	r7,20(sp)
   83108:	da400317 	ldw	r9,12(sp)
   8310c:	d8c00217 	ldw	r3,8(sp)
   83110:	3808d43a 	srli	r4,r7,16
   83114:	1245883a 	add	r2,r2,r9
   83118:	da000417 	ldw	r8,16(sp)
   8311c:	2085883a 	add	r2,r4,r2
   83120:	1240022e 	bgeu	r2,r9,8312c <__divdf3+0x4b8>
   83124:	01000074 	movhi	r4,1
   83128:	8121883a 	add	r16,r16,r4
   8312c:	1008d43a 	srli	r4,r2,16
   83130:	1004943a 	slli	r2,r2,16
   83134:	39ffffcc 	andi	r7,r7,65535
   83138:	2409883a 	add	r4,r4,r16
   8313c:	11c5883a 	add	r2,r2,r7
   83140:	4100bb36 	bltu	r8,r4,83430 <__divdf3+0x7bc>
   83144:	4100d726 	beq	r8,r4,834a4 <__divdf3+0x830>
   83148:	4109c83a 	sub	r4,r8,r4
   8314c:	a8a1c83a 	sub	r16,r21,r2
   83150:	ac2b803a 	cmpltu	r21,r21,r16
   83154:	256bc83a 	sub	r21,r4,r21
   83158:	b540d926 	beq	r22,r21,834c0 <__divdf3+0x84c>
   8315c:	a00b883a 	mov	r5,r20
   83160:	a809883a 	mov	r4,r21
   83164:	d8c00215 	stw	r3,8(sp)
   83168:	00822e40 	call	822e4 <__udivsi3>
   8316c:	100b883a 	mov	r5,r2
   83170:	9009883a 	mov	r4,r18
   83174:	d8800515 	stw	r2,20(sp)
   83178:	00823a00 	call	823a0 <__mulsi3>
   8317c:	a809883a 	mov	r4,r21
   83180:	a00b883a 	mov	r5,r20
   83184:	d8800415 	stw	r2,16(sp)
   83188:	00823480 	call	82348 <__umodsi3>
   8318c:	1004943a 	slli	r2,r2,16
   83190:	8008d43a 	srli	r4,r16,16
   83194:	da000417 	ldw	r8,16(sp)
   83198:	d8c00217 	ldw	r3,8(sp)
   8319c:	2084b03a 	or	r2,r4,r2
   831a0:	d9c00517 	ldw	r7,20(sp)
   831a4:	1200062e 	bgeu	r2,r8,831c0 <__divdf3+0x54c>
   831a8:	1585883a 	add	r2,r2,r22
   831ac:	393fffc4 	addi	r4,r7,-1
   831b0:	1580c536 	bltu	r2,r22,834c8 <__divdf3+0x854>
   831b4:	1200c42e 	bgeu	r2,r8,834c8 <__divdf3+0x854>
   831b8:	39ffff84 	addi	r7,r7,-2
   831bc:	1585883a 	add	r2,r2,r22
   831c0:	122bc83a 	sub	r21,r2,r8
   831c4:	a00b883a 	mov	r5,r20
   831c8:	a809883a 	mov	r4,r21
   831cc:	d8c00215 	stw	r3,8(sp)
   831d0:	d9c00515 	stw	r7,20(sp)
   831d4:	00822e40 	call	822e4 <__udivsi3>
   831d8:	9009883a 	mov	r4,r18
   831dc:	100b883a 	mov	r5,r2
   831e0:	d8800415 	stw	r2,16(sp)
   831e4:	00823a00 	call	823a0 <__mulsi3>
   831e8:	a809883a 	mov	r4,r21
   831ec:	a00b883a 	mov	r5,r20
   831f0:	1025883a 	mov	r18,r2
   831f4:	00823480 	call	82348 <__umodsi3>
   831f8:	1004943a 	slli	r2,r2,16
   831fc:	813fffcc 	andi	r4,r16,65535
   83200:	d8c00217 	ldw	r3,8(sp)
   83204:	20a0b03a 	or	r16,r4,r2
   83208:	d9c00517 	ldw	r7,20(sp)
   8320c:	da000417 	ldw	r8,16(sp)
   83210:	8480062e 	bgeu	r16,r18,8322c <__divdf3+0x5b8>
   83214:	85a1883a 	add	r16,r16,r22
   83218:	40bfffc4 	addi	r2,r8,-1
   8321c:	8580ac36 	bltu	r16,r22,834d0 <__divdf3+0x85c>
   83220:	8480ab2e 	bgeu	r16,r18,834d0 <__divdf3+0x85c>
   83224:	423fff84 	addi	r8,r8,-2
   83228:	85a1883a 	add	r16,r16,r22
   8322c:	3804943a 	slli	r2,r7,16
   83230:	84a1c83a 	sub	r16,r16,r18
   83234:	e009883a 	mov	r4,fp
   83238:	1228b03a 	or	r20,r2,r8
   8323c:	a1ffffcc 	andi	r7,r20,65535
   83240:	a024d43a 	srli	r18,r20,16
   83244:	380b883a 	mov	r5,r7
   83248:	d8c00215 	stw	r3,8(sp)
   8324c:	d9c00515 	stw	r7,20(sp)
   83250:	00823a00 	call	823a0 <__mulsi3>
   83254:	900b883a 	mov	r5,r18
   83258:	e009883a 	mov	r4,fp
   8325c:	102b883a 	mov	r21,r2
   83260:	00823a00 	call	823a0 <__mulsi3>
   83264:	900b883a 	mov	r5,r18
   83268:	b809883a 	mov	r4,r23
   8326c:	1039883a 	mov	fp,r2
   83270:	00823a00 	call	823a0 <__mulsi3>
   83274:	d9c00517 	ldw	r7,20(sp)
   83278:	b80b883a 	mov	r5,r23
   8327c:	1025883a 	mov	r18,r2
   83280:	3809883a 	mov	r4,r7
   83284:	00823a00 	call	823a0 <__mulsi3>
   83288:	a808d43a 	srli	r4,r21,16
   8328c:	1705883a 	add	r2,r2,fp
   83290:	d8c00217 	ldw	r3,8(sp)
   83294:	2085883a 	add	r2,r4,r2
   83298:	1700022e 	bgeu	r2,fp,832a4 <__divdf3+0x630>
   8329c:	01000074 	movhi	r4,1
   832a0:	9125883a 	add	r18,r18,r4
   832a4:	1008d43a 	srli	r4,r2,16
   832a8:	1004943a 	slli	r2,r2,16
   832ac:	ad7fffcc 	andi	r21,r21,65535
   832b0:	2489883a 	add	r4,r4,r18
   832b4:	1545883a 	add	r2,r2,r21
   832b8:	81003836 	bltu	r16,r4,8339c <__divdf3+0x728>
   832bc:	81003626 	beq	r16,r4,83398 <__divdf3+0x724>
   832c0:	a5000054 	ori	r20,r20,1
   832c4:	1880ffc4 	addi	r2,r3,1023
   832c8:	00bf2e0e 	bge	zero,r2,82f84 <__alt_data_end+0xfffd0f84>
   832cc:	a10001cc 	andi	r4,r20,7
   832d0:	20000726 	beq	r4,zero,832f0 <__divdf3+0x67c>
   832d4:	a10003cc 	andi	r4,r20,15
   832d8:	01400104 	movi	r5,4
   832dc:	21400426 	beq	r4,r5,832f0 <__divdf3+0x67c>
   832e0:	a149883a 	add	r4,r20,r5
   832e4:	2529803a 	cmpltu	r20,r4,r20
   832e8:	8d23883a 	add	r17,r17,r20
   832ec:	2029883a 	mov	r20,r4
   832f0:	8900402c 	andhi	r4,r17,256
   832f4:	20000426 	beq	r4,zero,83308 <__divdf3+0x694>
   832f8:	18810004 	addi	r2,r3,1024
   832fc:	00ffc034 	movhi	r3,65280
   83300:	18ffffc4 	addi	r3,r3,-1
   83304:	88e2703a 	and	r17,r17,r3
   83308:	00c1ff84 	movi	r3,2046
   8330c:	18beb416 	blt	r3,r2,82de0 <__alt_data_end+0xfffd0de0>
   83310:	a028d0fa 	srli	r20,r20,3
   83314:	882a977a 	slli	r21,r17,29
   83318:	8820927a 	slli	r16,r17,9
   8331c:	1081ffcc 	andi	r2,r2,2047
   83320:	ad2ab03a 	or	r21,r21,r20
   83324:	8020d33a 	srli	r16,r16,12
   83328:	9900004c 	andi	r4,r19,1
   8332c:	003eb006 	br	82df0 <__alt_data_end+0xfffd0df0>
   83330:	8080022c 	andhi	r2,r16,8
   83334:	10001226 	beq	r2,zero,83380 <__divdf3+0x70c>
   83338:	8880022c 	andhi	r2,r17,8
   8333c:	1000101e 	bne	r2,zero,83380 <__divdf3+0x70c>
   83340:	00800434 	movhi	r2,16
   83344:	8c000234 	orhi	r16,r17,8
   83348:	10bfffc4 	addi	r2,r2,-1
   8334c:	b809883a 	mov	r4,r23
   83350:	80a0703a 	and	r16,r16,r2
   83354:	a02b883a 	mov	r21,r20
   83358:	003f0806 	br	82f7c <__alt_data_end+0xfffd0f7c>
   8335c:	008000c4 	movi	r2,3
   83360:	3880b126 	beq	r7,r2,83628 <__divdf3+0x9b4>
   83364:	00800044 	movi	r2,1
   83368:	38805b1e 	bne	r7,r2,834d8 <__divdf3+0x864>
   8336c:	e009883a 	mov	r4,fp
   83370:	0005883a 	mov	r2,zero
   83374:	0021883a 	mov	r16,zero
   83378:	002b883a 	mov	r21,zero
   8337c:	003e9c06 	br	82df0 <__alt_data_end+0xfffd0df0>
   83380:	00800434 	movhi	r2,16
   83384:	84000234 	orhi	r16,r16,8
   83388:	10bfffc4 	addi	r2,r2,-1
   8338c:	b009883a 	mov	r4,r22
   83390:	80a0703a 	and	r16,r16,r2
   83394:	003ef906 	br	82f7c <__alt_data_end+0xfffd0f7c>
   83398:	103fca26 	beq	r2,zero,832c4 <__alt_data_end+0xfffd12c4>
   8339c:	b421883a 	add	r16,r22,r16
   833a0:	a17fffc4 	addi	r5,r20,-1
   833a4:	8580422e 	bgeu	r16,r22,834b0 <__divdf3+0x83c>
   833a8:	2829883a 	mov	r20,r5
   833ac:	813fc41e 	bne	r16,r4,832c0 <__alt_data_end+0xfffd12c0>
   833b0:	d9800017 	ldw	r6,0(sp)
   833b4:	30bfc21e 	bne	r6,r2,832c0 <__alt_data_end+0xfffd12c0>
   833b8:	003fc206 	br	832c4 <__alt_data_end+0xfffd12c4>
   833bc:	143ff604 	addi	r16,r2,-40
   833c0:	8c20983a 	sll	r16,r17,r16
   833c4:	002b883a 	mov	r21,zero
   833c8:	003eb406 	br	82e9c <__alt_data_end+0xfffd0e9c>
   833cc:	d9800215 	stw	r6,8(sp)
   833d0:	d9c00515 	stw	r7,20(sp)
   833d4:	da000415 	stw	r8,16(sp)
   833d8:	0084d900 	call	84d90 <__clzsi2>
   833dc:	10800804 	addi	r2,r2,32
   833e0:	da000417 	ldw	r8,16(sp)
   833e4:	d9c00517 	ldw	r7,20(sp)
   833e8:	d9800217 	ldw	r6,8(sp)
   833ec:	003ea106 	br	82e74 <__alt_data_end+0xfffd0e74>
   833f0:	147ff604 	addi	r17,r2,-40
   833f4:	3462983a 	sll	r17,r6,r17
   833f8:	0029883a 	mov	r20,zero
   833fc:	003ec906 	br	82f24 <__alt_data_end+0xfffd0f24>
   83400:	3009883a 	mov	r4,r6
   83404:	d9400115 	stw	r5,4(sp)
   83408:	d9800215 	stw	r6,8(sp)
   8340c:	da000415 	stw	r8,16(sp)
   83410:	da400315 	stw	r9,12(sp)
   83414:	0084d900 	call	84d90 <__clzsi2>
   83418:	10800804 	addi	r2,r2,32
   8341c:	da400317 	ldw	r9,12(sp)
   83420:	da000417 	ldw	r8,16(sp)
   83424:	d9800217 	ldw	r6,8(sp)
   83428:	d9400117 	ldw	r5,4(sp)
   8342c:	003eb306 	br	82efc <__alt_data_end+0xfffd0efc>
   83430:	d9800017 	ldw	r6,0(sp)
   83434:	a9ab883a 	add	r21,r21,r6
   83438:	a98b803a 	cmpltu	r5,r21,r6
   8343c:	2d8b883a 	add	r5,r5,r22
   83440:	2a11883a 	add	r8,r5,r8
   83444:	897fffc4 	addi	r5,r17,-1
   83448:	b2000c2e 	bgeu	r22,r8,8347c <__divdf3+0x808>
   8344c:	41003f36 	bltu	r8,r4,8354c <__divdf3+0x8d8>
   83450:	22006c26 	beq	r4,r8,83604 <__divdf3+0x990>
   83454:	4109c83a 	sub	r4,r8,r4
   83458:	2823883a 	mov	r17,r5
   8345c:	003f3b06 	br	8314c <__alt_data_end+0xfffd114c>
   83460:	ad3ed336 	bltu	r21,r20,82fb0 <__alt_data_end+0xfffd0fb0>
   83464:	a804d07a 	srli	r2,r21,1
   83468:	802e97fa 	slli	r23,r16,31
   8346c:	a82a97fa 	slli	r21,r21,31
   83470:	8020d07a 	srli	r16,r16,1
   83474:	b8aeb03a 	or	r23,r23,r2
   83478:	003ed006 	br	82fbc <__alt_data_end+0xfffd0fbc>
   8347c:	b23ff51e 	bne	r22,r8,83454 <__alt_data_end+0xfffd1454>
   83480:	d9800017 	ldw	r6,0(sp)
   83484:	a9bff12e 	bgeu	r21,r6,8344c <__alt_data_end+0xfffd144c>
   83488:	b109c83a 	sub	r4,r22,r4
   8348c:	2823883a 	mov	r17,r5
   83490:	003f2e06 	br	8314c <__alt_data_end+0xfffd114c>
   83494:	2021883a 	mov	r16,r4
   83498:	003eff06 	br	83098 <__alt_data_end+0xfffd1098>
   8349c:	2023883a 	mov	r17,r4
   834a0:	003ee406 	br	83034 <__alt_data_end+0xfffd1034>
   834a4:	a8bfe236 	bltu	r21,r2,83430 <__alt_data_end+0xfffd1430>
   834a8:	0009883a 	mov	r4,zero
   834ac:	003f2706 	br	8314c <__alt_data_end+0xfffd114c>
   834b0:	81002d36 	bltu	r16,r4,83568 <__divdf3+0x8f4>
   834b4:	24005626 	beq	r4,r16,83610 <__divdf3+0x99c>
   834b8:	2829883a 	mov	r20,r5
   834bc:	003f8006 	br	832c0 <__alt_data_end+0xfffd12c0>
   834c0:	053fffc4 	movi	r20,-1
   834c4:	003f7f06 	br	832c4 <__alt_data_end+0xfffd12c4>
   834c8:	200f883a 	mov	r7,r4
   834cc:	003f3c06 	br	831c0 <__alt_data_end+0xfffd11c0>
   834d0:	1011883a 	mov	r8,r2
   834d4:	003f5506 	br	8322c <__alt_data_end+0xfffd122c>
   834d8:	e027883a 	mov	r19,fp
   834dc:	003f7906 	br	832c4 <__alt_data_end+0xfffd12c4>
   834e0:	010007c4 	movi	r4,31
   834e4:	20c02816 	blt	r4,r3,83588 <__divdf3+0x914>
   834e8:	00800804 	movi	r2,32
   834ec:	10c5c83a 	sub	r2,r2,r3
   834f0:	888a983a 	sll	r5,r17,r2
   834f4:	a0c8d83a 	srl	r4,r20,r3
   834f8:	a084983a 	sll	r2,r20,r2
   834fc:	88e2d83a 	srl	r17,r17,r3
   83500:	2906b03a 	or	r3,r5,r4
   83504:	1004c03a 	cmpne	r2,r2,zero
   83508:	1886b03a 	or	r3,r3,r2
   8350c:	188001cc 	andi	r2,r3,7
   83510:	10000726 	beq	r2,zero,83530 <__divdf3+0x8bc>
   83514:	188003cc 	andi	r2,r3,15
   83518:	01000104 	movi	r4,4
   8351c:	11000426 	beq	r2,r4,83530 <__divdf3+0x8bc>
   83520:	1805883a 	mov	r2,r3
   83524:	10c00104 	addi	r3,r2,4
   83528:	1885803a 	cmpltu	r2,r3,r2
   8352c:	88a3883a 	add	r17,r17,r2
   83530:	8880202c 	andhi	r2,r17,128
   83534:	10002926 	beq	r2,zero,835dc <__divdf3+0x968>
   83538:	9900004c 	andi	r4,r19,1
   8353c:	00800044 	movi	r2,1
   83540:	0021883a 	mov	r16,zero
   83544:	002b883a 	mov	r21,zero
   83548:	003e2906 	br	82df0 <__alt_data_end+0xfffd0df0>
   8354c:	d9800017 	ldw	r6,0(sp)
   83550:	8c7fff84 	addi	r17,r17,-2
   83554:	a9ab883a 	add	r21,r21,r6
   83558:	a98b803a 	cmpltu	r5,r21,r6
   8355c:	2d8b883a 	add	r5,r5,r22
   83560:	2a11883a 	add	r8,r5,r8
   83564:	003ef806 	br	83148 <__alt_data_end+0xfffd1148>
   83568:	d9800017 	ldw	r6,0(sp)
   8356c:	318f883a 	add	r7,r6,r6
   83570:	398b803a 	cmpltu	r5,r7,r6
   83574:	2d8d883a 	add	r6,r5,r22
   83578:	81a1883a 	add	r16,r16,r6
   8357c:	a17fff84 	addi	r5,r20,-2
   83580:	d9c00015 	stw	r7,0(sp)
   83584:	003f8806 	br	833a8 <__alt_data_end+0xfffd13a8>
   83588:	013ff844 	movi	r4,-31
   8358c:	2085c83a 	sub	r2,r4,r2
   83590:	8888d83a 	srl	r4,r17,r2
   83594:	00800804 	movi	r2,32
   83598:	18802126 	beq	r3,r2,83620 <__divdf3+0x9ac>
   8359c:	04001004 	movi	r16,64
   835a0:	80c7c83a 	sub	r3,r16,r3
   835a4:	88e0983a 	sll	r16,r17,r3
   835a8:	8504b03a 	or	r2,r16,r20
   835ac:	1004c03a 	cmpne	r2,r2,zero
   835b0:	2084b03a 	or	r2,r4,r2
   835b4:	144001cc 	andi	r17,r2,7
   835b8:	88000d1e 	bne	r17,zero,835f0 <__divdf3+0x97c>
   835bc:	0021883a 	mov	r16,zero
   835c0:	102ad0fa 	srli	r21,r2,3
   835c4:	9900004c 	andi	r4,r19,1
   835c8:	0005883a 	mov	r2,zero
   835cc:	ac6ab03a 	or	r21,r21,r17
   835d0:	003e0706 	br	82df0 <__alt_data_end+0xfffd0df0>
   835d4:	1007883a 	mov	r3,r2
   835d8:	0023883a 	mov	r17,zero
   835dc:	8820927a 	slli	r16,r17,9
   835e0:	1805883a 	mov	r2,r3
   835e4:	8822977a 	slli	r17,r17,29
   835e8:	8020d33a 	srli	r16,r16,12
   835ec:	003ff406 	br	835c0 <__alt_data_end+0xfffd15c0>
   835f0:	10c003cc 	andi	r3,r2,15
   835f4:	01000104 	movi	r4,4
   835f8:	193ff626 	beq	r3,r4,835d4 <__alt_data_end+0xfffd15d4>
   835fc:	0023883a 	mov	r17,zero
   83600:	003fc806 	br	83524 <__alt_data_end+0xfffd1524>
   83604:	a8bfd136 	bltu	r21,r2,8354c <__alt_data_end+0xfffd154c>
   83608:	2823883a 	mov	r17,r5
   8360c:	003fa606 	br	834a8 <__alt_data_end+0xfffd14a8>
   83610:	d9800017 	ldw	r6,0(sp)
   83614:	30bfd436 	bltu	r6,r2,83568 <__alt_data_end+0xfffd1568>
   83618:	2829883a 	mov	r20,r5
   8361c:	003f6406 	br	833b0 <__alt_data_end+0xfffd13b0>
   83620:	0021883a 	mov	r16,zero
   83624:	003fe006 	br	835a8 <__alt_data_end+0xfffd15a8>
   83628:	00800434 	movhi	r2,16
   8362c:	8c000234 	orhi	r16,r17,8
   83630:	10bfffc4 	addi	r2,r2,-1
   83634:	e009883a 	mov	r4,fp
   83638:	80a0703a 	and	r16,r16,r2
   8363c:	a02b883a 	mov	r21,r20
   83640:	003e4e06 	br	82f7c <__alt_data_end+0xfffd0f7c>

00083644 <__gedf2>:
   83644:	2804d53a 	srli	r2,r5,20
   83648:	3806d53a 	srli	r3,r7,20
   8364c:	02000434 	movhi	r8,16
   83650:	423fffc4 	addi	r8,r8,-1
   83654:	1081ffcc 	andi	r2,r2,2047
   83658:	0241ffc4 	movi	r9,2047
   8365c:	2a14703a 	and	r10,r5,r8
   83660:	18c1ffcc 	andi	r3,r3,2047
   83664:	3a10703a 	and	r8,r7,r8
   83668:	280ad7fa 	srli	r5,r5,31
   8366c:	380ed7fa 	srli	r7,r7,31
   83670:	12401d26 	beq	r2,r9,836e8 <__gedf2+0xa4>
   83674:	0241ffc4 	movi	r9,2047
   83678:	1a401226 	beq	r3,r9,836c4 <__gedf2+0x80>
   8367c:	1000081e 	bne	r2,zero,836a0 <__gedf2+0x5c>
   83680:	2296b03a 	or	r11,r4,r10
   83684:	5813003a 	cmpeq	r9,r11,zero
   83688:	1800091e 	bne	r3,zero,836b0 <__gedf2+0x6c>
   8368c:	3218b03a 	or	r12,r6,r8
   83690:	6000071e 	bne	r12,zero,836b0 <__gedf2+0x6c>
   83694:	0005883a 	mov	r2,zero
   83698:	5800101e 	bne	r11,zero,836dc <__gedf2+0x98>
   8369c:	f800283a 	ret
   836a0:	18000c1e 	bne	r3,zero,836d4 <__gedf2+0x90>
   836a4:	3212b03a 	or	r9,r6,r8
   836a8:	48000c26 	beq	r9,zero,836dc <__gedf2+0x98>
   836ac:	0013883a 	mov	r9,zero
   836b0:	39c03fcc 	andi	r7,r7,255
   836b4:	48000826 	beq	r9,zero,836d8 <__gedf2+0x94>
   836b8:	38000926 	beq	r7,zero,836e0 <__gedf2+0x9c>
   836bc:	00800044 	movi	r2,1
   836c0:	f800283a 	ret
   836c4:	3212b03a 	or	r9,r6,r8
   836c8:	483fec26 	beq	r9,zero,8367c <__alt_data_end+0xfffd167c>
   836cc:	00bfff84 	movi	r2,-2
   836d0:	f800283a 	ret
   836d4:	39c03fcc 	andi	r7,r7,255
   836d8:	29c00626 	beq	r5,r7,836f4 <__gedf2+0xb0>
   836dc:	283ff726 	beq	r5,zero,836bc <__alt_data_end+0xfffd16bc>
   836e0:	00bfffc4 	movi	r2,-1
   836e4:	f800283a 	ret
   836e8:	2292b03a 	or	r9,r4,r10
   836ec:	483fe126 	beq	r9,zero,83674 <__alt_data_end+0xfffd1674>
   836f0:	003ff606 	br	836cc <__alt_data_end+0xfffd16cc>
   836f4:	18bff916 	blt	r3,r2,836dc <__alt_data_end+0xfffd16dc>
   836f8:	10c00316 	blt	r2,r3,83708 <__gedf2+0xc4>
   836fc:	42bff736 	bltu	r8,r10,836dc <__alt_data_end+0xfffd16dc>
   83700:	52000326 	beq	r10,r8,83710 <__gedf2+0xcc>
   83704:	5200042e 	bgeu	r10,r8,83718 <__gedf2+0xd4>
   83708:	283fec1e 	bne	r5,zero,836bc <__alt_data_end+0xfffd16bc>
   8370c:	003ff406 	br	836e0 <__alt_data_end+0xfffd16e0>
   83710:	313ff236 	bltu	r6,r4,836dc <__alt_data_end+0xfffd16dc>
   83714:	21bffc36 	bltu	r4,r6,83708 <__alt_data_end+0xfffd1708>
   83718:	0005883a 	mov	r2,zero
   8371c:	f800283a 	ret

00083720 <__ledf2>:
   83720:	2804d53a 	srli	r2,r5,20
   83724:	3810d53a 	srli	r8,r7,20
   83728:	00c00434 	movhi	r3,16
   8372c:	18ffffc4 	addi	r3,r3,-1
   83730:	1081ffcc 	andi	r2,r2,2047
   83734:	0241ffc4 	movi	r9,2047
   83738:	28d4703a 	and	r10,r5,r3
   8373c:	4201ffcc 	andi	r8,r8,2047
   83740:	38c6703a 	and	r3,r7,r3
   83744:	280ad7fa 	srli	r5,r5,31
   83748:	380ed7fa 	srli	r7,r7,31
   8374c:	12401f26 	beq	r2,r9,837cc <__ledf2+0xac>
   83750:	0241ffc4 	movi	r9,2047
   83754:	42401426 	beq	r8,r9,837a8 <__ledf2+0x88>
   83758:	1000091e 	bne	r2,zero,83780 <__ledf2+0x60>
   8375c:	2296b03a 	or	r11,r4,r10
   83760:	5813003a 	cmpeq	r9,r11,zero
   83764:	29403fcc 	andi	r5,r5,255
   83768:	40000a1e 	bne	r8,zero,83794 <__ledf2+0x74>
   8376c:	30d8b03a 	or	r12,r6,r3
   83770:	6000081e 	bne	r12,zero,83794 <__ledf2+0x74>
   83774:	0005883a 	mov	r2,zero
   83778:	5800111e 	bne	r11,zero,837c0 <__ledf2+0xa0>
   8377c:	f800283a 	ret
   83780:	29403fcc 	andi	r5,r5,255
   83784:	40000c1e 	bne	r8,zero,837b8 <__ledf2+0x98>
   83788:	30d2b03a 	or	r9,r6,r3
   8378c:	48000c26 	beq	r9,zero,837c0 <__ledf2+0xa0>
   83790:	0013883a 	mov	r9,zero
   83794:	39c03fcc 	andi	r7,r7,255
   83798:	48000826 	beq	r9,zero,837bc <__ledf2+0x9c>
   8379c:	38001126 	beq	r7,zero,837e4 <__ledf2+0xc4>
   837a0:	00800044 	movi	r2,1
   837a4:	f800283a 	ret
   837a8:	30d2b03a 	or	r9,r6,r3
   837ac:	483fea26 	beq	r9,zero,83758 <__alt_data_end+0xfffd1758>
   837b0:	00800084 	movi	r2,2
   837b4:	f800283a 	ret
   837b8:	39c03fcc 	andi	r7,r7,255
   837bc:	39400726 	beq	r7,r5,837dc <__ledf2+0xbc>
   837c0:	2800081e 	bne	r5,zero,837e4 <__ledf2+0xc4>
   837c4:	00800044 	movi	r2,1
   837c8:	f800283a 	ret
   837cc:	2292b03a 	or	r9,r4,r10
   837d0:	483fdf26 	beq	r9,zero,83750 <__alt_data_end+0xfffd1750>
   837d4:	00800084 	movi	r2,2
   837d8:	f800283a 	ret
   837dc:	4080030e 	bge	r8,r2,837ec <__ledf2+0xcc>
   837e0:	383fef26 	beq	r7,zero,837a0 <__alt_data_end+0xfffd17a0>
   837e4:	00bfffc4 	movi	r2,-1
   837e8:	f800283a 	ret
   837ec:	123feb16 	blt	r2,r8,8379c <__alt_data_end+0xfffd179c>
   837f0:	1abff336 	bltu	r3,r10,837c0 <__alt_data_end+0xfffd17c0>
   837f4:	50c00326 	beq	r10,r3,83804 <__ledf2+0xe4>
   837f8:	50c0042e 	bgeu	r10,r3,8380c <__ledf2+0xec>
   837fc:	283fe81e 	bne	r5,zero,837a0 <__alt_data_end+0xfffd17a0>
   83800:	003ff806 	br	837e4 <__alt_data_end+0xfffd17e4>
   83804:	313fee36 	bltu	r6,r4,837c0 <__alt_data_end+0xfffd17c0>
   83808:	21bffc36 	bltu	r4,r6,837fc <__alt_data_end+0xfffd17fc>
   8380c:	0005883a 	mov	r2,zero
   83810:	f800283a 	ret

00083814 <__muldf3>:
   83814:	deffee04 	addi	sp,sp,-72
   83818:	dd000c15 	stw	r20,48(sp)
   8381c:	2828d53a 	srli	r20,r5,20
   83820:	ddc00f15 	stw	r23,60(sp)
   83824:	282ed7fa 	srli	r23,r5,31
   83828:	dc000815 	stw	r16,32(sp)
   8382c:	04000434 	movhi	r16,16
   83830:	dcc00b15 	stw	r19,44(sp)
   83834:	843fffc4 	addi	r16,r16,-1
   83838:	dfc01115 	stw	ra,68(sp)
   8383c:	df001015 	stw	fp,64(sp)
   83840:	dd800e15 	stw	r22,56(sp)
   83844:	dd400d15 	stw	r21,52(sp)
   83848:	dc800a15 	stw	r18,40(sp)
   8384c:	dc400915 	stw	r17,36(sp)
   83850:	a501ffcc 	andi	r20,r20,2047
   83854:	2c20703a 	and	r16,r5,r16
   83858:	b827883a 	mov	r19,r23
   8385c:	ba403fcc 	andi	r9,r23,255
   83860:	a0006026 	beq	r20,zero,839e4 <__muldf3+0x1d0>
   83864:	0081ffc4 	movi	r2,2047
   83868:	202d883a 	mov	r22,r4
   8386c:	a0803626 	beq	r20,r2,83948 <__muldf3+0x134>
   83870:	84000434 	orhi	r16,r16,16
   83874:	200ad77a 	srli	r5,r4,29
   83878:	800490fa 	slli	r2,r16,3
   8387c:	202c90fa 	slli	r22,r4,3
   83880:	a53f0044 	addi	r20,r20,-1023
   83884:	28a0b03a 	or	r16,r5,r2
   83888:	002b883a 	mov	r21,zero
   8388c:	000b883a 	mov	r5,zero
   83890:	3804d53a 	srli	r2,r7,20
   83894:	3838d7fa 	srli	fp,r7,31
   83898:	04400434 	movhi	r17,16
   8389c:	8c7fffc4 	addi	r17,r17,-1
   838a0:	1081ffcc 	andi	r2,r2,2047
   838a4:	3025883a 	mov	r18,r6
   838a8:	3c62703a 	and	r17,r7,r17
   838ac:	e2803fcc 	andi	r10,fp,255
   838b0:	10006d26 	beq	r2,zero,83a68 <__muldf3+0x254>
   838b4:	00c1ffc4 	movi	r3,2047
   838b8:	10c06526 	beq	r2,r3,83a50 <__muldf3+0x23c>
   838bc:	8c400434 	orhi	r17,r17,16
   838c0:	300ed77a 	srli	r7,r6,29
   838c4:	880690fa 	slli	r3,r17,3
   838c8:	302490fa 	slli	r18,r6,3
   838cc:	10bf0044 	addi	r2,r2,-1023
   838d0:	38e2b03a 	or	r17,r7,r3
   838d4:	000f883a 	mov	r7,zero
   838d8:	a087883a 	add	r3,r20,r2
   838dc:	010003c4 	movi	r4,15
   838e0:	3d44b03a 	or	r2,r7,r21
   838e4:	e5ccf03a 	xor	r6,fp,r23
   838e8:	1a000044 	addi	r8,r3,1
   838ec:	20809b36 	bltu	r4,r2,83b5c <__muldf3+0x348>
   838f0:	100490ba 	slli	r2,r2,2
   838f4:	01000234 	movhi	r4,8
   838f8:	210e4204 	addi	r4,r4,14600
   838fc:	1105883a 	add	r2,r2,r4
   83900:	10800017 	ldw	r2,0(r2)
   83904:	1000683a 	jmp	r2
   83908:	00083b5c 	xori	zero,zero,8429
   8390c:	00083968 	cmpgeui	zero,zero,8421
   83910:	00083968 	cmpgeui	zero,zero,8421
   83914:	00083964 	muli	zero,zero,8421
   83918:	00083b38 	rdprs	zero,zero,8428
   8391c:	00083b38 	rdprs	zero,zero,8428
   83920:	00083b20 	cmpeqi	zero,zero,8428
   83924:	00083964 	muli	zero,zero,8421
   83928:	00083b38 	rdprs	zero,zero,8428
   8392c:	00083b20 	cmpeqi	zero,zero,8428
   83930:	00083b38 	rdprs	zero,zero,8428
   83934:	00083964 	muli	zero,zero,8421
   83938:	00083b48 	cmpgei	zero,zero,8429
   8393c:	00083b48 	cmpgei	zero,zero,8429
   83940:	00083b48 	cmpgei	zero,zero,8429
   83944:	00083ea8 	cmpgeui	zero,zero,8442
   83948:	2404b03a 	or	r2,r4,r16
   8394c:	1000711e 	bne	r2,zero,83b14 <__muldf3+0x300>
   83950:	05400204 	movi	r21,8
   83954:	0021883a 	mov	r16,zero
   83958:	002d883a 	mov	r22,zero
   8395c:	01400084 	movi	r5,2
   83960:	003fcb06 	br	83890 <__alt_data_end+0xfffd1890>
   83964:	500d883a 	mov	r6,r10
   83968:	00800084 	movi	r2,2
   8396c:	38805926 	beq	r7,r2,83ad4 <__muldf3+0x2c0>
   83970:	008000c4 	movi	r2,3
   83974:	3881bb26 	beq	r7,r2,84064 <__muldf3+0x850>
   83978:	00800044 	movi	r2,1
   8397c:	3881961e 	bne	r7,r2,83fd8 <__muldf3+0x7c4>
   83980:	3027883a 	mov	r19,r6
   83984:	0005883a 	mov	r2,zero
   83988:	0021883a 	mov	r16,zero
   8398c:	002d883a 	mov	r22,zero
   83990:	1004953a 	slli	r2,r2,20
   83994:	98c03fcc 	andi	r3,r19,255
   83998:	04400434 	movhi	r17,16
   8399c:	8c7fffc4 	addi	r17,r17,-1
   839a0:	180697fa 	slli	r3,r3,31
   839a4:	8460703a 	and	r16,r16,r17
   839a8:	80a0b03a 	or	r16,r16,r2
   839ac:	80c6b03a 	or	r3,r16,r3
   839b0:	b005883a 	mov	r2,r22
   839b4:	dfc01117 	ldw	ra,68(sp)
   839b8:	df001017 	ldw	fp,64(sp)
   839bc:	ddc00f17 	ldw	r23,60(sp)
   839c0:	dd800e17 	ldw	r22,56(sp)
   839c4:	dd400d17 	ldw	r21,52(sp)
   839c8:	dd000c17 	ldw	r20,48(sp)
   839cc:	dcc00b17 	ldw	r19,44(sp)
   839d0:	dc800a17 	ldw	r18,40(sp)
   839d4:	dc400917 	ldw	r17,36(sp)
   839d8:	dc000817 	ldw	r16,32(sp)
   839dc:	dec01204 	addi	sp,sp,72
   839e0:	f800283a 	ret
   839e4:	2404b03a 	or	r2,r4,r16
   839e8:	202b883a 	mov	r21,r4
   839ec:	10004426 	beq	r2,zero,83b00 <__muldf3+0x2ec>
   839f0:	80015126 	beq	r16,zero,83f38 <__muldf3+0x724>
   839f4:	8009883a 	mov	r4,r16
   839f8:	d9800715 	stw	r6,28(sp)
   839fc:	d9c00215 	stw	r7,8(sp)
   83a00:	da400415 	stw	r9,16(sp)
   83a04:	0084d900 	call	84d90 <__clzsi2>
   83a08:	d9800717 	ldw	r6,28(sp)
   83a0c:	d9c00217 	ldw	r7,8(sp)
   83a10:	da400417 	ldw	r9,16(sp)
   83a14:	113ffd44 	addi	r4,r2,-11
   83a18:	00c00704 	movi	r3,28
   83a1c:	19014216 	blt	r3,r4,83f28 <__muldf3+0x714>
   83a20:	00c00744 	movi	r3,29
   83a24:	15bffe04 	addi	r22,r2,-8
   83a28:	1907c83a 	sub	r3,r3,r4
   83a2c:	85a0983a 	sll	r16,r16,r22
   83a30:	a8c6d83a 	srl	r3,r21,r3
   83a34:	adac983a 	sll	r22,r21,r22
   83a38:	1c20b03a 	or	r16,r3,r16
   83a3c:	1080fcc4 	addi	r2,r2,1011
   83a40:	00a9c83a 	sub	r20,zero,r2
   83a44:	002b883a 	mov	r21,zero
   83a48:	000b883a 	mov	r5,zero
   83a4c:	003f9006 	br	83890 <__alt_data_end+0xfffd1890>
   83a50:	3446b03a 	or	r3,r6,r17
   83a54:	1800281e 	bne	r3,zero,83af8 <__muldf3+0x2e4>
   83a58:	0023883a 	mov	r17,zero
   83a5c:	0025883a 	mov	r18,zero
   83a60:	01c00084 	movi	r7,2
   83a64:	003f9c06 	br	838d8 <__alt_data_end+0xfffd18d8>
   83a68:	3446b03a 	or	r3,r6,r17
   83a6c:	18001e26 	beq	r3,zero,83ae8 <__muldf3+0x2d4>
   83a70:	88012126 	beq	r17,zero,83ef8 <__muldf3+0x6e4>
   83a74:	8809883a 	mov	r4,r17
   83a78:	d9400215 	stw	r5,8(sp)
   83a7c:	d9800715 	stw	r6,28(sp)
   83a80:	da400415 	stw	r9,16(sp)
   83a84:	da800315 	stw	r10,12(sp)
   83a88:	0084d900 	call	84d90 <__clzsi2>
   83a8c:	d9400217 	ldw	r5,8(sp)
   83a90:	d9800717 	ldw	r6,28(sp)
   83a94:	da400417 	ldw	r9,16(sp)
   83a98:	da800317 	ldw	r10,12(sp)
   83a9c:	113ffd44 	addi	r4,r2,-11
   83aa0:	00c00704 	movi	r3,28
   83aa4:	19011016 	blt	r3,r4,83ee8 <__muldf3+0x6d4>
   83aa8:	00c00744 	movi	r3,29
   83aac:	14bffe04 	addi	r18,r2,-8
   83ab0:	1907c83a 	sub	r3,r3,r4
   83ab4:	8ca2983a 	sll	r17,r17,r18
   83ab8:	30c6d83a 	srl	r3,r6,r3
   83abc:	34a4983a 	sll	r18,r6,r18
   83ac0:	1c62b03a 	or	r17,r3,r17
   83ac4:	1080fcc4 	addi	r2,r2,1011
   83ac8:	0085c83a 	sub	r2,zero,r2
   83acc:	000f883a 	mov	r7,zero
   83ad0:	003f8106 	br	838d8 <__alt_data_end+0xfffd18d8>
   83ad4:	3027883a 	mov	r19,r6
   83ad8:	0081ffc4 	movi	r2,2047
   83adc:	0021883a 	mov	r16,zero
   83ae0:	002d883a 	mov	r22,zero
   83ae4:	003faa06 	br	83990 <__alt_data_end+0xfffd1990>
   83ae8:	0023883a 	mov	r17,zero
   83aec:	0025883a 	mov	r18,zero
   83af0:	01c00044 	movi	r7,1
   83af4:	003f7806 	br	838d8 <__alt_data_end+0xfffd18d8>
   83af8:	01c000c4 	movi	r7,3
   83afc:	003f7606 	br	838d8 <__alt_data_end+0xfffd18d8>
   83b00:	05400104 	movi	r21,4
   83b04:	0021883a 	mov	r16,zero
   83b08:	002d883a 	mov	r22,zero
   83b0c:	01400044 	movi	r5,1
   83b10:	003f5f06 	br	83890 <__alt_data_end+0xfffd1890>
   83b14:	05400304 	movi	r21,12
   83b18:	014000c4 	movi	r5,3
   83b1c:	003f5c06 	br	83890 <__alt_data_end+0xfffd1890>
   83b20:	04000434 	movhi	r16,16
   83b24:	0027883a 	mov	r19,zero
   83b28:	843fffc4 	addi	r16,r16,-1
   83b2c:	05bfffc4 	movi	r22,-1
   83b30:	0081ffc4 	movi	r2,2047
   83b34:	003f9606 	br	83990 <__alt_data_end+0xfffd1990>
   83b38:	8023883a 	mov	r17,r16
   83b3c:	b025883a 	mov	r18,r22
   83b40:	280f883a 	mov	r7,r5
   83b44:	003f8806 	br	83968 <__alt_data_end+0xfffd1968>
   83b48:	8023883a 	mov	r17,r16
   83b4c:	b025883a 	mov	r18,r22
   83b50:	480d883a 	mov	r6,r9
   83b54:	280f883a 	mov	r7,r5
   83b58:	003f8306 	br	83968 <__alt_data_end+0xfffd1968>
   83b5c:	b026d43a 	srli	r19,r22,16
   83b60:	902ed43a 	srli	r23,r18,16
   83b64:	b5bfffcc 	andi	r22,r22,65535
   83b68:	94bfffcc 	andi	r18,r18,65535
   83b6c:	b00b883a 	mov	r5,r22
   83b70:	9009883a 	mov	r4,r18
   83b74:	d8c00515 	stw	r3,20(sp)
   83b78:	d9800715 	stw	r6,28(sp)
   83b7c:	da000615 	stw	r8,24(sp)
   83b80:	00823a00 	call	823a0 <__mulsi3>
   83b84:	980b883a 	mov	r5,r19
   83b88:	9009883a 	mov	r4,r18
   83b8c:	1029883a 	mov	r20,r2
   83b90:	00823a00 	call	823a0 <__mulsi3>
   83b94:	b80b883a 	mov	r5,r23
   83b98:	9809883a 	mov	r4,r19
   83b9c:	102b883a 	mov	r21,r2
   83ba0:	00823a00 	call	823a0 <__mulsi3>
   83ba4:	b809883a 	mov	r4,r23
   83ba8:	b00b883a 	mov	r5,r22
   83bac:	1039883a 	mov	fp,r2
   83bb0:	00823a00 	call	823a0 <__mulsi3>
   83bb4:	a008d43a 	srli	r4,r20,16
   83bb8:	1545883a 	add	r2,r2,r21
   83bbc:	d8c00517 	ldw	r3,20(sp)
   83bc0:	2085883a 	add	r2,r4,r2
   83bc4:	d9800717 	ldw	r6,28(sp)
   83bc8:	da000617 	ldw	r8,24(sp)
   83bcc:	1540022e 	bgeu	r2,r21,83bd8 <__muldf3+0x3c4>
   83bd0:	01000074 	movhi	r4,1
   83bd4:	e139883a 	add	fp,fp,r4
   83bd8:	100e943a 	slli	r7,r2,16
   83bdc:	1004d43a 	srli	r2,r2,16
   83be0:	882ad43a 	srli	r21,r17,16
   83be4:	a53fffcc 	andi	r20,r20,65535
   83be8:	8c7fffcc 	andi	r17,r17,65535
   83bec:	3d29883a 	add	r20,r7,r20
   83bf0:	b00b883a 	mov	r5,r22
   83bf4:	8809883a 	mov	r4,r17
   83bf8:	d8c00515 	stw	r3,20(sp)
   83bfc:	d9800715 	stw	r6,28(sp)
   83c00:	da000615 	stw	r8,24(sp)
   83c04:	dd000115 	stw	r20,4(sp)
   83c08:	d8800015 	stw	r2,0(sp)
   83c0c:	00823a00 	call	823a0 <__mulsi3>
   83c10:	980b883a 	mov	r5,r19
   83c14:	8809883a 	mov	r4,r17
   83c18:	d8800215 	stw	r2,8(sp)
   83c1c:	00823a00 	call	823a0 <__mulsi3>
   83c20:	9809883a 	mov	r4,r19
   83c24:	a80b883a 	mov	r5,r21
   83c28:	1029883a 	mov	r20,r2
   83c2c:	00823a00 	call	823a0 <__mulsi3>
   83c30:	b00b883a 	mov	r5,r22
   83c34:	a809883a 	mov	r4,r21
   83c38:	d8800415 	stw	r2,16(sp)
   83c3c:	00823a00 	call	823a0 <__mulsi3>
   83c40:	d9c00217 	ldw	r7,8(sp)
   83c44:	1505883a 	add	r2,r2,r20
   83c48:	d8c00517 	ldw	r3,20(sp)
   83c4c:	3826d43a 	srli	r19,r7,16
   83c50:	d9800717 	ldw	r6,28(sp)
   83c54:	da000617 	ldw	r8,24(sp)
   83c58:	9885883a 	add	r2,r19,r2
   83c5c:	da400417 	ldw	r9,16(sp)
   83c60:	1500022e 	bgeu	r2,r20,83c6c <__muldf3+0x458>
   83c64:	01000074 	movhi	r4,1
   83c68:	4913883a 	add	r9,r9,r4
   83c6c:	1028d43a 	srli	r20,r2,16
   83c70:	1004943a 	slli	r2,r2,16
   83c74:	802cd43a 	srli	r22,r16,16
   83c78:	843fffcc 	andi	r16,r16,65535
   83c7c:	3cffffcc 	andi	r19,r7,65535
   83c80:	9009883a 	mov	r4,r18
   83c84:	800b883a 	mov	r5,r16
   83c88:	a269883a 	add	r20,r20,r9
   83c8c:	d8c00515 	stw	r3,20(sp)
   83c90:	d9800715 	stw	r6,28(sp)
   83c94:	da000615 	stw	r8,24(sp)
   83c98:	14e7883a 	add	r19,r2,r19
   83c9c:	00823a00 	call	823a0 <__mulsi3>
   83ca0:	9009883a 	mov	r4,r18
   83ca4:	b00b883a 	mov	r5,r22
   83ca8:	d8800315 	stw	r2,12(sp)
   83cac:	00823a00 	call	823a0 <__mulsi3>
   83cb0:	b809883a 	mov	r4,r23
   83cb4:	b00b883a 	mov	r5,r22
   83cb8:	d8800215 	stw	r2,8(sp)
   83cbc:	00823a00 	call	823a0 <__mulsi3>
   83cc0:	b80b883a 	mov	r5,r23
   83cc4:	8009883a 	mov	r4,r16
   83cc8:	d8800415 	stw	r2,16(sp)
   83ccc:	00823a00 	call	823a0 <__mulsi3>
   83cd0:	da800317 	ldw	r10,12(sp)
   83cd4:	d9c00217 	ldw	r7,8(sp)
   83cd8:	d9000017 	ldw	r4,0(sp)
   83cdc:	502ed43a 	srli	r23,r10,16
   83ce0:	11c5883a 	add	r2,r2,r7
   83ce4:	24e5883a 	add	r18,r4,r19
   83ce8:	b885883a 	add	r2,r23,r2
   83cec:	d8c00517 	ldw	r3,20(sp)
   83cf0:	d9800717 	ldw	r6,28(sp)
   83cf4:	da000617 	ldw	r8,24(sp)
   83cf8:	da400417 	ldw	r9,16(sp)
   83cfc:	11c0022e 	bgeu	r2,r7,83d08 <__muldf3+0x4f4>
   83d00:	01000074 	movhi	r4,1
   83d04:	4913883a 	add	r9,r9,r4
   83d08:	100ed43a 	srli	r7,r2,16
   83d0c:	1004943a 	slli	r2,r2,16
   83d10:	55ffffcc 	andi	r23,r10,65535
   83d14:	3a53883a 	add	r9,r7,r9
   83d18:	8809883a 	mov	r4,r17
   83d1c:	800b883a 	mov	r5,r16
   83d20:	d8c00515 	stw	r3,20(sp)
   83d24:	d9800715 	stw	r6,28(sp)
   83d28:	da000615 	stw	r8,24(sp)
   83d2c:	da400415 	stw	r9,16(sp)
   83d30:	15ef883a 	add	r23,r2,r23
   83d34:	00823a00 	call	823a0 <__mulsi3>
   83d38:	8809883a 	mov	r4,r17
   83d3c:	b00b883a 	mov	r5,r22
   83d40:	d8800215 	stw	r2,8(sp)
   83d44:	00823a00 	call	823a0 <__mulsi3>
   83d48:	b00b883a 	mov	r5,r22
   83d4c:	a809883a 	mov	r4,r21
   83d50:	d8800315 	stw	r2,12(sp)
   83d54:	00823a00 	call	823a0 <__mulsi3>
   83d58:	8009883a 	mov	r4,r16
   83d5c:	a80b883a 	mov	r5,r21
   83d60:	1023883a 	mov	r17,r2
   83d64:	00823a00 	call	823a0 <__mulsi3>
   83d68:	d9c00217 	ldw	r7,8(sp)
   83d6c:	da800317 	ldw	r10,12(sp)
   83d70:	d8c00517 	ldw	r3,20(sp)
   83d74:	3808d43a 	srli	r4,r7,16
   83d78:	1285883a 	add	r2,r2,r10
   83d7c:	d9800717 	ldw	r6,28(sp)
   83d80:	2085883a 	add	r2,r4,r2
   83d84:	da000617 	ldw	r8,24(sp)
   83d88:	da400417 	ldw	r9,16(sp)
   83d8c:	1280022e 	bgeu	r2,r10,83d98 <__muldf3+0x584>
   83d90:	01000074 	movhi	r4,1
   83d94:	8923883a 	add	r17,r17,r4
   83d98:	1008943a 	slli	r4,r2,16
   83d9c:	39ffffcc 	andi	r7,r7,65535
   83da0:	e4b9883a 	add	fp,fp,r18
   83da4:	21cf883a 	add	r7,r4,r7
   83da8:	e4e7803a 	cmpltu	r19,fp,r19
   83dac:	3d0f883a 	add	r7,r7,r20
   83db0:	bf39883a 	add	fp,r23,fp
   83db4:	99c9883a 	add	r4,r19,r7
   83db8:	e5ef803a 	cmpltu	r23,fp,r23
   83dbc:	490b883a 	add	r5,r9,r4
   83dc0:	1004d43a 	srli	r2,r2,16
   83dc4:	b965883a 	add	r18,r23,r5
   83dc8:	24c9803a 	cmpltu	r4,r4,r19
   83dcc:	3d29803a 	cmpltu	r20,r7,r20
   83dd0:	a128b03a 	or	r20,r20,r4
   83dd4:	95ef803a 	cmpltu	r23,r18,r23
   83dd8:	2a53803a 	cmpltu	r9,r5,r9
   83ddc:	a0a9883a 	add	r20,r20,r2
   83de0:	4deeb03a 	or	r23,r9,r23
   83de4:	a5ef883a 	add	r23,r20,r23
   83de8:	bc63883a 	add	r17,r23,r17
   83dec:	e004927a 	slli	r2,fp,9
   83df0:	d9000117 	ldw	r4,4(sp)
   83df4:	882e927a 	slli	r23,r17,9
   83df8:	9022d5fa 	srli	r17,r18,23
   83dfc:	e038d5fa 	srli	fp,fp,23
   83e00:	1104b03a 	or	r2,r2,r4
   83e04:	9024927a 	slli	r18,r18,9
   83e08:	1004c03a 	cmpne	r2,r2,zero
   83e0c:	bc62b03a 	or	r17,r23,r17
   83e10:	1738b03a 	or	fp,r2,fp
   83e14:	8880402c 	andhi	r2,r17,256
   83e18:	e4a4b03a 	or	r18,fp,r18
   83e1c:	10000726 	beq	r2,zero,83e3c <__muldf3+0x628>
   83e20:	9006d07a 	srli	r3,r18,1
   83e24:	880497fa 	slli	r2,r17,31
   83e28:	9480004c 	andi	r18,r18,1
   83e2c:	8822d07a 	srli	r17,r17,1
   83e30:	1ca4b03a 	or	r18,r3,r18
   83e34:	14a4b03a 	or	r18,r2,r18
   83e38:	4007883a 	mov	r3,r8
   83e3c:	1880ffc4 	addi	r2,r3,1023
   83e40:	0080460e 	bge	zero,r2,83f5c <__muldf3+0x748>
   83e44:	910001cc 	andi	r4,r18,7
   83e48:	20000726 	beq	r4,zero,83e68 <__muldf3+0x654>
   83e4c:	910003cc 	andi	r4,r18,15
   83e50:	01400104 	movi	r5,4
   83e54:	21400426 	beq	r4,r5,83e68 <__muldf3+0x654>
   83e58:	9149883a 	add	r4,r18,r5
   83e5c:	24a5803a 	cmpltu	r18,r4,r18
   83e60:	8ca3883a 	add	r17,r17,r18
   83e64:	2025883a 	mov	r18,r4
   83e68:	8900402c 	andhi	r4,r17,256
   83e6c:	20000426 	beq	r4,zero,83e80 <__muldf3+0x66c>
   83e70:	18810004 	addi	r2,r3,1024
   83e74:	00ffc034 	movhi	r3,65280
   83e78:	18ffffc4 	addi	r3,r3,-1
   83e7c:	88e2703a 	and	r17,r17,r3
   83e80:	00c1ff84 	movi	r3,2046
   83e84:	18bf1316 	blt	r3,r2,83ad4 <__alt_data_end+0xfffd1ad4>
   83e88:	882c977a 	slli	r22,r17,29
   83e8c:	9024d0fa 	srli	r18,r18,3
   83e90:	8822927a 	slli	r17,r17,9
   83e94:	1081ffcc 	andi	r2,r2,2047
   83e98:	b4acb03a 	or	r22,r22,r18
   83e9c:	8820d33a 	srli	r16,r17,12
   83ea0:	3027883a 	mov	r19,r6
   83ea4:	003eba06 	br	83990 <__alt_data_end+0xfffd1990>
   83ea8:	8080022c 	andhi	r2,r16,8
   83eac:	10000926 	beq	r2,zero,83ed4 <__muldf3+0x6c0>
   83eb0:	8880022c 	andhi	r2,r17,8
   83eb4:	1000071e 	bne	r2,zero,83ed4 <__muldf3+0x6c0>
   83eb8:	00800434 	movhi	r2,16
   83ebc:	8c000234 	orhi	r16,r17,8
   83ec0:	10bfffc4 	addi	r2,r2,-1
   83ec4:	e027883a 	mov	r19,fp
   83ec8:	80a0703a 	and	r16,r16,r2
   83ecc:	902d883a 	mov	r22,r18
   83ed0:	003f1706 	br	83b30 <__alt_data_end+0xfffd1b30>
   83ed4:	00800434 	movhi	r2,16
   83ed8:	84000234 	orhi	r16,r16,8
   83edc:	10bfffc4 	addi	r2,r2,-1
   83ee0:	80a0703a 	and	r16,r16,r2
   83ee4:	003f1206 	br	83b30 <__alt_data_end+0xfffd1b30>
   83ee8:	147ff604 	addi	r17,r2,-40
   83eec:	3462983a 	sll	r17,r6,r17
   83ef0:	0025883a 	mov	r18,zero
   83ef4:	003ef306 	br	83ac4 <__alt_data_end+0xfffd1ac4>
   83ef8:	3009883a 	mov	r4,r6
   83efc:	d9400215 	stw	r5,8(sp)
   83f00:	d9800715 	stw	r6,28(sp)
   83f04:	da400415 	stw	r9,16(sp)
   83f08:	da800315 	stw	r10,12(sp)
   83f0c:	0084d900 	call	84d90 <__clzsi2>
   83f10:	10800804 	addi	r2,r2,32
   83f14:	da800317 	ldw	r10,12(sp)
   83f18:	da400417 	ldw	r9,16(sp)
   83f1c:	d9800717 	ldw	r6,28(sp)
   83f20:	d9400217 	ldw	r5,8(sp)
   83f24:	003edd06 	br	83a9c <__alt_data_end+0xfffd1a9c>
   83f28:	143ff604 	addi	r16,r2,-40
   83f2c:	ac20983a 	sll	r16,r21,r16
   83f30:	002d883a 	mov	r22,zero
   83f34:	003ec106 	br	83a3c <__alt_data_end+0xfffd1a3c>
   83f38:	d9800715 	stw	r6,28(sp)
   83f3c:	d9c00215 	stw	r7,8(sp)
   83f40:	da400415 	stw	r9,16(sp)
   83f44:	0084d900 	call	84d90 <__clzsi2>
   83f48:	10800804 	addi	r2,r2,32
   83f4c:	da400417 	ldw	r9,16(sp)
   83f50:	d9c00217 	ldw	r7,8(sp)
   83f54:	d9800717 	ldw	r6,28(sp)
   83f58:	003eae06 	br	83a14 <__alt_data_end+0xfffd1a14>
   83f5c:	00c00044 	movi	r3,1
   83f60:	1887c83a 	sub	r3,r3,r2
   83f64:	01000e04 	movi	r4,56
   83f68:	20fe8516 	blt	r4,r3,83980 <__alt_data_end+0xfffd1980>
   83f6c:	010007c4 	movi	r4,31
   83f70:	20c01b16 	blt	r4,r3,83fe0 <__muldf3+0x7cc>
   83f74:	00800804 	movi	r2,32
   83f78:	10c5c83a 	sub	r2,r2,r3
   83f7c:	888a983a 	sll	r5,r17,r2
   83f80:	90c8d83a 	srl	r4,r18,r3
   83f84:	9084983a 	sll	r2,r18,r2
   83f88:	88e2d83a 	srl	r17,r17,r3
   83f8c:	2906b03a 	or	r3,r5,r4
   83f90:	1004c03a 	cmpne	r2,r2,zero
   83f94:	1886b03a 	or	r3,r3,r2
   83f98:	188001cc 	andi	r2,r3,7
   83f9c:	10000726 	beq	r2,zero,83fbc <__muldf3+0x7a8>
   83fa0:	188003cc 	andi	r2,r3,15
   83fa4:	01000104 	movi	r4,4
   83fa8:	11000426 	beq	r2,r4,83fbc <__muldf3+0x7a8>
   83fac:	1805883a 	mov	r2,r3
   83fb0:	10c00104 	addi	r3,r2,4
   83fb4:	1885803a 	cmpltu	r2,r3,r2
   83fb8:	88a3883a 	add	r17,r17,r2
   83fbc:	8880202c 	andhi	r2,r17,128
   83fc0:	10001c26 	beq	r2,zero,84034 <__muldf3+0x820>
   83fc4:	3027883a 	mov	r19,r6
   83fc8:	00800044 	movi	r2,1
   83fcc:	0021883a 	mov	r16,zero
   83fd0:	002d883a 	mov	r22,zero
   83fd4:	003e6e06 	br	83990 <__alt_data_end+0xfffd1990>
   83fd8:	4007883a 	mov	r3,r8
   83fdc:	003f9706 	br	83e3c <__alt_data_end+0xfffd1e3c>
   83fe0:	017ff844 	movi	r5,-31
   83fe4:	2885c83a 	sub	r2,r5,r2
   83fe8:	888ad83a 	srl	r5,r17,r2
   83fec:	00800804 	movi	r2,32
   83ff0:	18801a26 	beq	r3,r2,8405c <__muldf3+0x848>
   83ff4:	01001004 	movi	r4,64
   83ff8:	20c7c83a 	sub	r3,r4,r3
   83ffc:	88e2983a 	sll	r17,r17,r3
   84000:	8ca4b03a 	or	r18,r17,r18
   84004:	9004c03a 	cmpne	r2,r18,zero
   84008:	2884b03a 	or	r2,r5,r2
   8400c:	144001cc 	andi	r17,r2,7
   84010:	88000d1e 	bne	r17,zero,84048 <__muldf3+0x834>
   84014:	0021883a 	mov	r16,zero
   84018:	102cd0fa 	srli	r22,r2,3
   8401c:	3027883a 	mov	r19,r6
   84020:	0005883a 	mov	r2,zero
   84024:	b46cb03a 	or	r22,r22,r17
   84028:	003e5906 	br	83990 <__alt_data_end+0xfffd1990>
   8402c:	1007883a 	mov	r3,r2
   84030:	0023883a 	mov	r17,zero
   84034:	8820927a 	slli	r16,r17,9
   84038:	1805883a 	mov	r2,r3
   8403c:	8822977a 	slli	r17,r17,29
   84040:	8020d33a 	srli	r16,r16,12
   84044:	003ff406 	br	84018 <__alt_data_end+0xfffd2018>
   84048:	10c003cc 	andi	r3,r2,15
   8404c:	01000104 	movi	r4,4
   84050:	193ff626 	beq	r3,r4,8402c <__alt_data_end+0xfffd202c>
   84054:	0023883a 	mov	r17,zero
   84058:	003fd506 	br	83fb0 <__alt_data_end+0xfffd1fb0>
   8405c:	0023883a 	mov	r17,zero
   84060:	003fe706 	br	84000 <__alt_data_end+0xfffd2000>
   84064:	00800434 	movhi	r2,16
   84068:	8c000234 	orhi	r16,r17,8
   8406c:	10bfffc4 	addi	r2,r2,-1
   84070:	3027883a 	mov	r19,r6
   84074:	80a0703a 	and	r16,r16,r2
   84078:	902d883a 	mov	r22,r18
   8407c:	003eac06 	br	83b30 <__alt_data_end+0xfffd1b30>

00084080 <__subdf3>:
   84080:	02000434 	movhi	r8,16
   84084:	423fffc4 	addi	r8,r8,-1
   84088:	defffb04 	addi	sp,sp,-20
   8408c:	2a14703a 	and	r10,r5,r8
   84090:	3812d53a 	srli	r9,r7,20
   84094:	3a10703a 	and	r8,r7,r8
   84098:	2006d77a 	srli	r3,r4,29
   8409c:	3004d77a 	srli	r2,r6,29
   840a0:	dc000015 	stw	r16,0(sp)
   840a4:	501490fa 	slli	r10,r10,3
   840a8:	2820d53a 	srli	r16,r5,20
   840ac:	401090fa 	slli	r8,r8,3
   840b0:	dc800215 	stw	r18,8(sp)
   840b4:	dc400115 	stw	r17,4(sp)
   840b8:	dfc00415 	stw	ra,16(sp)
   840bc:	202290fa 	slli	r17,r4,3
   840c0:	dcc00315 	stw	r19,12(sp)
   840c4:	4a41ffcc 	andi	r9,r9,2047
   840c8:	0101ffc4 	movi	r4,2047
   840cc:	2824d7fa 	srli	r18,r5,31
   840d0:	8401ffcc 	andi	r16,r16,2047
   840d4:	50c6b03a 	or	r3,r10,r3
   840d8:	380ed7fa 	srli	r7,r7,31
   840dc:	408ab03a 	or	r5,r8,r2
   840e0:	300c90fa 	slli	r6,r6,3
   840e4:	49009626 	beq	r9,r4,84340 <__subdf3+0x2c0>
   840e8:	39c0005c 	xori	r7,r7,1
   840ec:	8245c83a 	sub	r2,r16,r9
   840f0:	3c807426 	beq	r7,r18,842c4 <__subdf3+0x244>
   840f4:	0080af0e 	bge	zero,r2,843b4 <__subdf3+0x334>
   840f8:	48002a1e 	bne	r9,zero,841a4 <__subdf3+0x124>
   840fc:	2988b03a 	or	r4,r5,r6
   84100:	20009a1e 	bne	r4,zero,8436c <__subdf3+0x2ec>
   84104:	888001cc 	andi	r2,r17,7
   84108:	10000726 	beq	r2,zero,84128 <__subdf3+0xa8>
   8410c:	888003cc 	andi	r2,r17,15
   84110:	01000104 	movi	r4,4
   84114:	11000426 	beq	r2,r4,84128 <__subdf3+0xa8>
   84118:	890b883a 	add	r5,r17,r4
   8411c:	2c63803a 	cmpltu	r17,r5,r17
   84120:	1c47883a 	add	r3,r3,r17
   84124:	2823883a 	mov	r17,r5
   84128:	1880202c 	andhi	r2,r3,128
   8412c:	10005926 	beq	r2,zero,84294 <__subdf3+0x214>
   84130:	84000044 	addi	r16,r16,1
   84134:	0081ffc4 	movi	r2,2047
   84138:	8080be26 	beq	r16,r2,84434 <__subdf3+0x3b4>
   8413c:	017fe034 	movhi	r5,65408
   84140:	297fffc4 	addi	r5,r5,-1
   84144:	1946703a 	and	r3,r3,r5
   84148:	1804977a 	slli	r2,r3,29
   8414c:	1806927a 	slli	r3,r3,9
   84150:	8822d0fa 	srli	r17,r17,3
   84154:	8401ffcc 	andi	r16,r16,2047
   84158:	180ad33a 	srli	r5,r3,12
   8415c:	9100004c 	andi	r4,r18,1
   84160:	1444b03a 	or	r2,r2,r17
   84164:	80c1ffcc 	andi	r3,r16,2047
   84168:	1820953a 	slli	r16,r3,20
   8416c:	20c03fcc 	andi	r3,r4,255
   84170:	180897fa 	slli	r4,r3,31
   84174:	00c00434 	movhi	r3,16
   84178:	18ffffc4 	addi	r3,r3,-1
   8417c:	28c6703a 	and	r3,r5,r3
   84180:	1c06b03a 	or	r3,r3,r16
   84184:	1906b03a 	or	r3,r3,r4
   84188:	dfc00417 	ldw	ra,16(sp)
   8418c:	dcc00317 	ldw	r19,12(sp)
   84190:	dc800217 	ldw	r18,8(sp)
   84194:	dc400117 	ldw	r17,4(sp)
   84198:	dc000017 	ldw	r16,0(sp)
   8419c:	dec00504 	addi	sp,sp,20
   841a0:	f800283a 	ret
   841a4:	0101ffc4 	movi	r4,2047
   841a8:	813fd626 	beq	r16,r4,84104 <__alt_data_end+0xfffd2104>
   841ac:	29402034 	orhi	r5,r5,128
   841b0:	01000e04 	movi	r4,56
   841b4:	2080a316 	blt	r4,r2,84444 <__subdf3+0x3c4>
   841b8:	010007c4 	movi	r4,31
   841bc:	2080c616 	blt	r4,r2,844d8 <__subdf3+0x458>
   841c0:	01000804 	movi	r4,32
   841c4:	2089c83a 	sub	r4,r4,r2
   841c8:	2910983a 	sll	r8,r5,r4
   841cc:	308ed83a 	srl	r7,r6,r2
   841d0:	3108983a 	sll	r4,r6,r4
   841d4:	2884d83a 	srl	r2,r5,r2
   841d8:	41ccb03a 	or	r6,r8,r7
   841dc:	2008c03a 	cmpne	r4,r4,zero
   841e0:	310cb03a 	or	r6,r6,r4
   841e4:	898dc83a 	sub	r6,r17,r6
   841e8:	89a3803a 	cmpltu	r17,r17,r6
   841ec:	1887c83a 	sub	r3,r3,r2
   841f0:	1c47c83a 	sub	r3,r3,r17
   841f4:	3023883a 	mov	r17,r6
   841f8:	1880202c 	andhi	r2,r3,128
   841fc:	10002326 	beq	r2,zero,8428c <__subdf3+0x20c>
   84200:	04c02034 	movhi	r19,128
   84204:	9cffffc4 	addi	r19,r19,-1
   84208:	1ce6703a 	and	r19,r3,r19
   8420c:	98007a26 	beq	r19,zero,843f8 <__subdf3+0x378>
   84210:	9809883a 	mov	r4,r19
   84214:	0084d900 	call	84d90 <__clzsi2>
   84218:	113ffe04 	addi	r4,r2,-8
   8421c:	00c007c4 	movi	r3,31
   84220:	19007b16 	blt	r3,r4,84410 <__subdf3+0x390>
   84224:	00800804 	movi	r2,32
   84228:	1105c83a 	sub	r2,r2,r4
   8422c:	8884d83a 	srl	r2,r17,r2
   84230:	9906983a 	sll	r3,r19,r4
   84234:	8922983a 	sll	r17,r17,r4
   84238:	10c4b03a 	or	r2,r2,r3
   8423c:	24007816 	blt	r4,r16,84420 <__subdf3+0x3a0>
   84240:	2421c83a 	sub	r16,r4,r16
   84244:	80c00044 	addi	r3,r16,1
   84248:	010007c4 	movi	r4,31
   8424c:	20c09516 	blt	r4,r3,844a4 <__subdf3+0x424>
   84250:	01400804 	movi	r5,32
   84254:	28cbc83a 	sub	r5,r5,r3
   84258:	88c8d83a 	srl	r4,r17,r3
   8425c:	8962983a 	sll	r17,r17,r5
   84260:	114a983a 	sll	r5,r2,r5
   84264:	10c6d83a 	srl	r3,r2,r3
   84268:	8804c03a 	cmpne	r2,r17,zero
   8426c:	290ab03a 	or	r5,r5,r4
   84270:	28a2b03a 	or	r17,r5,r2
   84274:	0021883a 	mov	r16,zero
   84278:	003fa206 	br	84104 <__alt_data_end+0xfffd2104>
   8427c:	2090b03a 	or	r8,r4,r2
   84280:	40018e26 	beq	r8,zero,848bc <__subdf3+0x83c>
   84284:	1007883a 	mov	r3,r2
   84288:	2023883a 	mov	r17,r4
   8428c:	888001cc 	andi	r2,r17,7
   84290:	103f9e1e 	bne	r2,zero,8410c <__alt_data_end+0xfffd210c>
   84294:	1804977a 	slli	r2,r3,29
   84298:	8822d0fa 	srli	r17,r17,3
   8429c:	1810d0fa 	srli	r8,r3,3
   842a0:	9100004c 	andi	r4,r18,1
   842a4:	1444b03a 	or	r2,r2,r17
   842a8:	00c1ffc4 	movi	r3,2047
   842ac:	80c02826 	beq	r16,r3,84350 <__subdf3+0x2d0>
   842b0:	01400434 	movhi	r5,16
   842b4:	297fffc4 	addi	r5,r5,-1
   842b8:	80e0703a 	and	r16,r16,r3
   842bc:	414a703a 	and	r5,r8,r5
   842c0:	003fa806 	br	84164 <__alt_data_end+0xfffd2164>
   842c4:	0080630e 	bge	zero,r2,84454 <__subdf3+0x3d4>
   842c8:	48003026 	beq	r9,zero,8438c <__subdf3+0x30c>
   842cc:	0101ffc4 	movi	r4,2047
   842d0:	813f8c26 	beq	r16,r4,84104 <__alt_data_end+0xfffd2104>
   842d4:	29402034 	orhi	r5,r5,128
   842d8:	01000e04 	movi	r4,56
   842dc:	2080a90e 	bge	r4,r2,84584 <__subdf3+0x504>
   842e0:	298cb03a 	or	r6,r5,r6
   842e4:	3012c03a 	cmpne	r9,r6,zero
   842e8:	0005883a 	mov	r2,zero
   842ec:	4c53883a 	add	r9,r9,r17
   842f0:	4c63803a 	cmpltu	r17,r9,r17
   842f4:	10c7883a 	add	r3,r2,r3
   842f8:	88c7883a 	add	r3,r17,r3
   842fc:	4823883a 	mov	r17,r9
   84300:	1880202c 	andhi	r2,r3,128
   84304:	1000d026 	beq	r2,zero,84648 <__subdf3+0x5c8>
   84308:	84000044 	addi	r16,r16,1
   8430c:	0081ffc4 	movi	r2,2047
   84310:	8080fe26 	beq	r16,r2,8470c <__subdf3+0x68c>
   84314:	00bfe034 	movhi	r2,65408
   84318:	10bfffc4 	addi	r2,r2,-1
   8431c:	1886703a 	and	r3,r3,r2
   84320:	880ad07a 	srli	r5,r17,1
   84324:	180497fa 	slli	r2,r3,31
   84328:	8900004c 	andi	r4,r17,1
   8432c:	2922b03a 	or	r17,r5,r4
   84330:	1806d07a 	srli	r3,r3,1
   84334:	1462b03a 	or	r17,r2,r17
   84338:	3825883a 	mov	r18,r7
   8433c:	003f7106 	br	84104 <__alt_data_end+0xfffd2104>
   84340:	2984b03a 	or	r2,r5,r6
   84344:	103f6826 	beq	r2,zero,840e8 <__alt_data_end+0xfffd20e8>
   84348:	39c03fcc 	andi	r7,r7,255
   8434c:	003f6706 	br	840ec <__alt_data_end+0xfffd20ec>
   84350:	4086b03a 	or	r3,r8,r2
   84354:	18015226 	beq	r3,zero,848a0 <__subdf3+0x820>
   84358:	00c00434 	movhi	r3,16
   8435c:	41400234 	orhi	r5,r8,8
   84360:	18ffffc4 	addi	r3,r3,-1
   84364:	28ca703a 	and	r5,r5,r3
   84368:	003f7e06 	br	84164 <__alt_data_end+0xfffd2164>
   8436c:	10bfffc4 	addi	r2,r2,-1
   84370:	1000491e 	bne	r2,zero,84498 <__subdf3+0x418>
   84374:	898fc83a 	sub	r7,r17,r6
   84378:	89e3803a 	cmpltu	r17,r17,r7
   8437c:	1947c83a 	sub	r3,r3,r5
   84380:	1c47c83a 	sub	r3,r3,r17
   84384:	3823883a 	mov	r17,r7
   84388:	003f9b06 	br	841f8 <__alt_data_end+0xfffd21f8>
   8438c:	2988b03a 	or	r4,r5,r6
   84390:	203f5c26 	beq	r4,zero,84104 <__alt_data_end+0xfffd2104>
   84394:	10bfffc4 	addi	r2,r2,-1
   84398:	1000931e 	bne	r2,zero,845e8 <__subdf3+0x568>
   8439c:	898d883a 	add	r6,r17,r6
   843a0:	3463803a 	cmpltu	r17,r6,r17
   843a4:	1947883a 	add	r3,r3,r5
   843a8:	88c7883a 	add	r3,r17,r3
   843ac:	3023883a 	mov	r17,r6
   843b0:	003fd306 	br	84300 <__alt_data_end+0xfffd2300>
   843b4:	1000541e 	bne	r2,zero,84508 <__subdf3+0x488>
   843b8:	80800044 	addi	r2,r16,1
   843bc:	1081ffcc 	andi	r2,r2,2047
   843c0:	01000044 	movi	r4,1
   843c4:	2080a20e 	bge	r4,r2,84650 <__subdf3+0x5d0>
   843c8:	8989c83a 	sub	r4,r17,r6
   843cc:	8905803a 	cmpltu	r2,r17,r4
   843d0:	1967c83a 	sub	r19,r3,r5
   843d4:	98a7c83a 	sub	r19,r19,r2
   843d8:	9880202c 	andhi	r2,r19,128
   843dc:	10006326 	beq	r2,zero,8456c <__subdf3+0x4ec>
   843e0:	3463c83a 	sub	r17,r6,r17
   843e4:	28c7c83a 	sub	r3,r5,r3
   843e8:	344d803a 	cmpltu	r6,r6,r17
   843ec:	19a7c83a 	sub	r19,r3,r6
   843f0:	3825883a 	mov	r18,r7
   843f4:	983f861e 	bne	r19,zero,84210 <__alt_data_end+0xfffd2210>
   843f8:	8809883a 	mov	r4,r17
   843fc:	0084d900 	call	84d90 <__clzsi2>
   84400:	10800804 	addi	r2,r2,32
   84404:	113ffe04 	addi	r4,r2,-8
   84408:	00c007c4 	movi	r3,31
   8440c:	193f850e 	bge	r3,r4,84224 <__alt_data_end+0xfffd2224>
   84410:	10bff604 	addi	r2,r2,-40
   84414:	8884983a 	sll	r2,r17,r2
   84418:	0023883a 	mov	r17,zero
   8441c:	243f880e 	bge	r4,r16,84240 <__alt_data_end+0xfffd2240>
   84420:	00ffe034 	movhi	r3,65408
   84424:	18ffffc4 	addi	r3,r3,-1
   84428:	8121c83a 	sub	r16,r16,r4
   8442c:	10c6703a 	and	r3,r2,r3
   84430:	003f3406 	br	84104 <__alt_data_end+0xfffd2104>
   84434:	9100004c 	andi	r4,r18,1
   84438:	000b883a 	mov	r5,zero
   8443c:	0005883a 	mov	r2,zero
   84440:	003f4806 	br	84164 <__alt_data_end+0xfffd2164>
   84444:	298cb03a 	or	r6,r5,r6
   84448:	300cc03a 	cmpne	r6,r6,zero
   8444c:	0005883a 	mov	r2,zero
   84450:	003f6406 	br	841e4 <__alt_data_end+0xfffd21e4>
   84454:	10009a1e 	bne	r2,zero,846c0 <__subdf3+0x640>
   84458:	82400044 	addi	r9,r16,1
   8445c:	4881ffcc 	andi	r2,r9,2047
   84460:	02800044 	movi	r10,1
   84464:	5080670e 	bge	r10,r2,84604 <__subdf3+0x584>
   84468:	0081ffc4 	movi	r2,2047
   8446c:	4880af26 	beq	r9,r2,8472c <__subdf3+0x6ac>
   84470:	898d883a 	add	r6,r17,r6
   84474:	1945883a 	add	r2,r3,r5
   84478:	3447803a 	cmpltu	r3,r6,r17
   8447c:	1887883a 	add	r3,r3,r2
   84480:	182297fa 	slli	r17,r3,31
   84484:	300cd07a 	srli	r6,r6,1
   84488:	1806d07a 	srli	r3,r3,1
   8448c:	4821883a 	mov	r16,r9
   84490:	89a2b03a 	or	r17,r17,r6
   84494:	003f1b06 	br	84104 <__alt_data_end+0xfffd2104>
   84498:	0101ffc4 	movi	r4,2047
   8449c:	813f441e 	bne	r16,r4,841b0 <__alt_data_end+0xfffd21b0>
   844a0:	003f1806 	br	84104 <__alt_data_end+0xfffd2104>
   844a4:	843ff844 	addi	r16,r16,-31
   844a8:	01400804 	movi	r5,32
   844ac:	1408d83a 	srl	r4,r2,r16
   844b0:	19405026 	beq	r3,r5,845f4 <__subdf3+0x574>
   844b4:	01401004 	movi	r5,64
   844b8:	28c7c83a 	sub	r3,r5,r3
   844bc:	10c4983a 	sll	r2,r2,r3
   844c0:	88a2b03a 	or	r17,r17,r2
   844c4:	8822c03a 	cmpne	r17,r17,zero
   844c8:	2462b03a 	or	r17,r4,r17
   844cc:	0007883a 	mov	r3,zero
   844d0:	0021883a 	mov	r16,zero
   844d4:	003f6d06 	br	8428c <__alt_data_end+0xfffd228c>
   844d8:	11fff804 	addi	r7,r2,-32
   844dc:	01000804 	movi	r4,32
   844e0:	29ced83a 	srl	r7,r5,r7
   844e4:	11004526 	beq	r2,r4,845fc <__subdf3+0x57c>
   844e8:	01001004 	movi	r4,64
   844ec:	2089c83a 	sub	r4,r4,r2
   844f0:	2904983a 	sll	r2,r5,r4
   844f4:	118cb03a 	or	r6,r2,r6
   844f8:	300cc03a 	cmpne	r6,r6,zero
   844fc:	398cb03a 	or	r6,r7,r6
   84500:	0005883a 	mov	r2,zero
   84504:	003f3706 	br	841e4 <__alt_data_end+0xfffd21e4>
   84508:	80002a26 	beq	r16,zero,845b4 <__subdf3+0x534>
   8450c:	0101ffc4 	movi	r4,2047
   84510:	49006626 	beq	r9,r4,846ac <__subdf3+0x62c>
   84514:	0085c83a 	sub	r2,zero,r2
   84518:	18c02034 	orhi	r3,r3,128
   8451c:	01000e04 	movi	r4,56
   84520:	20807e16 	blt	r4,r2,8471c <__subdf3+0x69c>
   84524:	010007c4 	movi	r4,31
   84528:	2080e716 	blt	r4,r2,848c8 <__subdf3+0x848>
   8452c:	01000804 	movi	r4,32
   84530:	2089c83a 	sub	r4,r4,r2
   84534:	1914983a 	sll	r10,r3,r4
   84538:	8890d83a 	srl	r8,r17,r2
   8453c:	8908983a 	sll	r4,r17,r4
   84540:	1884d83a 	srl	r2,r3,r2
   84544:	5222b03a 	or	r17,r10,r8
   84548:	2006c03a 	cmpne	r3,r4,zero
   8454c:	88e2b03a 	or	r17,r17,r3
   84550:	3463c83a 	sub	r17,r6,r17
   84554:	2885c83a 	sub	r2,r5,r2
   84558:	344d803a 	cmpltu	r6,r6,r17
   8455c:	1187c83a 	sub	r3,r2,r6
   84560:	4821883a 	mov	r16,r9
   84564:	3825883a 	mov	r18,r7
   84568:	003f2306 	br	841f8 <__alt_data_end+0xfffd21f8>
   8456c:	24d0b03a 	or	r8,r4,r19
   84570:	40001b1e 	bne	r8,zero,845e0 <__subdf3+0x560>
   84574:	0005883a 	mov	r2,zero
   84578:	0009883a 	mov	r4,zero
   8457c:	0021883a 	mov	r16,zero
   84580:	003f4906 	br	842a8 <__alt_data_end+0xfffd22a8>
   84584:	010007c4 	movi	r4,31
   84588:	20803a16 	blt	r4,r2,84674 <__subdf3+0x5f4>
   8458c:	01000804 	movi	r4,32
   84590:	2089c83a 	sub	r4,r4,r2
   84594:	2912983a 	sll	r9,r5,r4
   84598:	3090d83a 	srl	r8,r6,r2
   8459c:	3108983a 	sll	r4,r6,r4
   845a0:	2884d83a 	srl	r2,r5,r2
   845a4:	4a12b03a 	or	r9,r9,r8
   845a8:	2008c03a 	cmpne	r4,r4,zero
   845ac:	4912b03a 	or	r9,r9,r4
   845b0:	003f4e06 	br	842ec <__alt_data_end+0xfffd22ec>
   845b4:	1c48b03a 	or	r4,r3,r17
   845b8:	20003c26 	beq	r4,zero,846ac <__subdf3+0x62c>
   845bc:	0084303a 	nor	r2,zero,r2
   845c0:	1000381e 	bne	r2,zero,846a4 <__subdf3+0x624>
   845c4:	3463c83a 	sub	r17,r6,r17
   845c8:	28c5c83a 	sub	r2,r5,r3
   845cc:	344d803a 	cmpltu	r6,r6,r17
   845d0:	1187c83a 	sub	r3,r2,r6
   845d4:	4821883a 	mov	r16,r9
   845d8:	3825883a 	mov	r18,r7
   845dc:	003f0606 	br	841f8 <__alt_data_end+0xfffd21f8>
   845e0:	2023883a 	mov	r17,r4
   845e4:	003f0906 	br	8420c <__alt_data_end+0xfffd220c>
   845e8:	0101ffc4 	movi	r4,2047
   845ec:	813f3a1e 	bne	r16,r4,842d8 <__alt_data_end+0xfffd22d8>
   845f0:	003ec406 	br	84104 <__alt_data_end+0xfffd2104>
   845f4:	0005883a 	mov	r2,zero
   845f8:	003fb106 	br	844c0 <__alt_data_end+0xfffd24c0>
   845fc:	0005883a 	mov	r2,zero
   84600:	003fbc06 	br	844f4 <__alt_data_end+0xfffd24f4>
   84604:	1c44b03a 	or	r2,r3,r17
   84608:	80008e1e 	bne	r16,zero,84844 <__subdf3+0x7c4>
   8460c:	1000c826 	beq	r2,zero,84930 <__subdf3+0x8b0>
   84610:	2984b03a 	or	r2,r5,r6
   84614:	103ebb26 	beq	r2,zero,84104 <__alt_data_end+0xfffd2104>
   84618:	8989883a 	add	r4,r17,r6
   8461c:	1945883a 	add	r2,r3,r5
   84620:	2447803a 	cmpltu	r3,r4,r17
   84624:	1887883a 	add	r3,r3,r2
   84628:	1880202c 	andhi	r2,r3,128
   8462c:	2023883a 	mov	r17,r4
   84630:	103f1626 	beq	r2,zero,8428c <__alt_data_end+0xfffd228c>
   84634:	00bfe034 	movhi	r2,65408
   84638:	10bfffc4 	addi	r2,r2,-1
   8463c:	5021883a 	mov	r16,r10
   84640:	1886703a 	and	r3,r3,r2
   84644:	003eaf06 	br	84104 <__alt_data_end+0xfffd2104>
   84648:	3825883a 	mov	r18,r7
   8464c:	003f0f06 	br	8428c <__alt_data_end+0xfffd228c>
   84650:	1c44b03a 	or	r2,r3,r17
   84654:	8000251e 	bne	r16,zero,846ec <__subdf3+0x66c>
   84658:	1000661e 	bne	r2,zero,847f4 <__subdf3+0x774>
   8465c:	2990b03a 	or	r8,r5,r6
   84660:	40009626 	beq	r8,zero,848bc <__subdf3+0x83c>
   84664:	2807883a 	mov	r3,r5
   84668:	3023883a 	mov	r17,r6
   8466c:	3825883a 	mov	r18,r7
   84670:	003ea406 	br	84104 <__alt_data_end+0xfffd2104>
   84674:	127ff804 	addi	r9,r2,-32
   84678:	01000804 	movi	r4,32
   8467c:	2a52d83a 	srl	r9,r5,r9
   84680:	11008c26 	beq	r2,r4,848b4 <__subdf3+0x834>
   84684:	01001004 	movi	r4,64
   84688:	2085c83a 	sub	r2,r4,r2
   8468c:	2884983a 	sll	r2,r5,r2
   84690:	118cb03a 	or	r6,r2,r6
   84694:	300cc03a 	cmpne	r6,r6,zero
   84698:	4992b03a 	or	r9,r9,r6
   8469c:	0005883a 	mov	r2,zero
   846a0:	003f1206 	br	842ec <__alt_data_end+0xfffd22ec>
   846a4:	0101ffc4 	movi	r4,2047
   846a8:	493f9c1e 	bne	r9,r4,8451c <__alt_data_end+0xfffd251c>
   846ac:	2807883a 	mov	r3,r5
   846b0:	3023883a 	mov	r17,r6
   846b4:	4821883a 	mov	r16,r9
   846b8:	3825883a 	mov	r18,r7
   846bc:	003e9106 	br	84104 <__alt_data_end+0xfffd2104>
   846c0:	80001f1e 	bne	r16,zero,84740 <__subdf3+0x6c0>
   846c4:	1c48b03a 	or	r4,r3,r17
   846c8:	20005a26 	beq	r4,zero,84834 <__subdf3+0x7b4>
   846cc:	0084303a 	nor	r2,zero,r2
   846d0:	1000561e 	bne	r2,zero,8482c <__subdf3+0x7ac>
   846d4:	89a3883a 	add	r17,r17,r6
   846d8:	1945883a 	add	r2,r3,r5
   846dc:	898d803a 	cmpltu	r6,r17,r6
   846e0:	3087883a 	add	r3,r6,r2
   846e4:	4821883a 	mov	r16,r9
   846e8:	003f0506 	br	84300 <__alt_data_end+0xfffd2300>
   846ec:	10002b1e 	bne	r2,zero,8479c <__subdf3+0x71c>
   846f0:	2984b03a 	or	r2,r5,r6
   846f4:	10008026 	beq	r2,zero,848f8 <__subdf3+0x878>
   846f8:	2807883a 	mov	r3,r5
   846fc:	3023883a 	mov	r17,r6
   84700:	3825883a 	mov	r18,r7
   84704:	0401ffc4 	movi	r16,2047
   84708:	003e7e06 	br	84104 <__alt_data_end+0xfffd2104>
   8470c:	3809883a 	mov	r4,r7
   84710:	0011883a 	mov	r8,zero
   84714:	0005883a 	mov	r2,zero
   84718:	003ee306 	br	842a8 <__alt_data_end+0xfffd22a8>
   8471c:	1c62b03a 	or	r17,r3,r17
   84720:	8822c03a 	cmpne	r17,r17,zero
   84724:	0005883a 	mov	r2,zero
   84728:	003f8906 	br	84550 <__alt_data_end+0xfffd2550>
   8472c:	3809883a 	mov	r4,r7
   84730:	4821883a 	mov	r16,r9
   84734:	0011883a 	mov	r8,zero
   84738:	0005883a 	mov	r2,zero
   8473c:	003eda06 	br	842a8 <__alt_data_end+0xfffd22a8>
   84740:	0101ffc4 	movi	r4,2047
   84744:	49003b26 	beq	r9,r4,84834 <__subdf3+0x7b4>
   84748:	0085c83a 	sub	r2,zero,r2
   8474c:	18c02034 	orhi	r3,r3,128
   84750:	01000e04 	movi	r4,56
   84754:	20806e16 	blt	r4,r2,84910 <__subdf3+0x890>
   84758:	010007c4 	movi	r4,31
   8475c:	20807716 	blt	r4,r2,8493c <__subdf3+0x8bc>
   84760:	01000804 	movi	r4,32
   84764:	2089c83a 	sub	r4,r4,r2
   84768:	1914983a 	sll	r10,r3,r4
   8476c:	8890d83a 	srl	r8,r17,r2
   84770:	8908983a 	sll	r4,r17,r4
   84774:	1884d83a 	srl	r2,r3,r2
   84778:	5222b03a 	or	r17,r10,r8
   8477c:	2006c03a 	cmpne	r3,r4,zero
   84780:	88e2b03a 	or	r17,r17,r3
   84784:	89a3883a 	add	r17,r17,r6
   84788:	1145883a 	add	r2,r2,r5
   8478c:	898d803a 	cmpltu	r6,r17,r6
   84790:	3087883a 	add	r3,r6,r2
   84794:	4821883a 	mov	r16,r9
   84798:	003ed906 	br	84300 <__alt_data_end+0xfffd2300>
   8479c:	2984b03a 	or	r2,r5,r6
   847a0:	10004226 	beq	r2,zero,848ac <__subdf3+0x82c>
   847a4:	1808d0fa 	srli	r4,r3,3
   847a8:	8822d0fa 	srli	r17,r17,3
   847ac:	1806977a 	slli	r3,r3,29
   847b0:	2080022c 	andhi	r2,r4,8
   847b4:	1c62b03a 	or	r17,r3,r17
   847b8:	10000826 	beq	r2,zero,847dc <__subdf3+0x75c>
   847bc:	2812d0fa 	srli	r9,r5,3
   847c0:	4880022c 	andhi	r2,r9,8
   847c4:	1000051e 	bne	r2,zero,847dc <__subdf3+0x75c>
   847c8:	300cd0fa 	srli	r6,r6,3
   847cc:	2804977a 	slli	r2,r5,29
   847d0:	4809883a 	mov	r4,r9
   847d4:	3825883a 	mov	r18,r7
   847d8:	11a2b03a 	or	r17,r2,r6
   847dc:	8806d77a 	srli	r3,r17,29
   847e0:	200890fa 	slli	r4,r4,3
   847e4:	882290fa 	slli	r17,r17,3
   847e8:	0401ffc4 	movi	r16,2047
   847ec:	1906b03a 	or	r3,r3,r4
   847f0:	003e4406 	br	84104 <__alt_data_end+0xfffd2104>
   847f4:	2984b03a 	or	r2,r5,r6
   847f8:	103e4226 	beq	r2,zero,84104 <__alt_data_end+0xfffd2104>
   847fc:	8989c83a 	sub	r4,r17,r6
   84800:	8911803a 	cmpltu	r8,r17,r4
   84804:	1945c83a 	sub	r2,r3,r5
   84808:	1205c83a 	sub	r2,r2,r8
   8480c:	1200202c 	andhi	r8,r2,128
   84810:	403e9a26 	beq	r8,zero,8427c <__alt_data_end+0xfffd227c>
   84814:	3463c83a 	sub	r17,r6,r17
   84818:	28c5c83a 	sub	r2,r5,r3
   8481c:	344d803a 	cmpltu	r6,r6,r17
   84820:	1187c83a 	sub	r3,r2,r6
   84824:	3825883a 	mov	r18,r7
   84828:	003e3606 	br	84104 <__alt_data_end+0xfffd2104>
   8482c:	0101ffc4 	movi	r4,2047
   84830:	493fc71e 	bne	r9,r4,84750 <__alt_data_end+0xfffd2750>
   84834:	2807883a 	mov	r3,r5
   84838:	3023883a 	mov	r17,r6
   8483c:	4821883a 	mov	r16,r9
   84840:	003e3006 	br	84104 <__alt_data_end+0xfffd2104>
   84844:	10003626 	beq	r2,zero,84920 <__subdf3+0x8a0>
   84848:	2984b03a 	or	r2,r5,r6
   8484c:	10001726 	beq	r2,zero,848ac <__subdf3+0x82c>
   84850:	1808d0fa 	srli	r4,r3,3
   84854:	8822d0fa 	srli	r17,r17,3
   84858:	1806977a 	slli	r3,r3,29
   8485c:	2080022c 	andhi	r2,r4,8
   84860:	1c62b03a 	or	r17,r3,r17
   84864:	10000726 	beq	r2,zero,84884 <__subdf3+0x804>
   84868:	2812d0fa 	srli	r9,r5,3
   8486c:	4880022c 	andhi	r2,r9,8
   84870:	1000041e 	bne	r2,zero,84884 <__subdf3+0x804>
   84874:	300cd0fa 	srli	r6,r6,3
   84878:	2804977a 	slli	r2,r5,29
   8487c:	4809883a 	mov	r4,r9
   84880:	11a2b03a 	or	r17,r2,r6
   84884:	8806d77a 	srli	r3,r17,29
   84888:	200890fa 	slli	r4,r4,3
   8488c:	882290fa 	slli	r17,r17,3
   84890:	3825883a 	mov	r18,r7
   84894:	1906b03a 	or	r3,r3,r4
   84898:	0401ffc4 	movi	r16,2047
   8489c:	003e1906 	br	84104 <__alt_data_end+0xfffd2104>
   848a0:	000b883a 	mov	r5,zero
   848a4:	0005883a 	mov	r2,zero
   848a8:	003e2e06 	br	84164 <__alt_data_end+0xfffd2164>
   848ac:	0401ffc4 	movi	r16,2047
   848b0:	003e1406 	br	84104 <__alt_data_end+0xfffd2104>
   848b4:	0005883a 	mov	r2,zero
   848b8:	003f7506 	br	84690 <__alt_data_end+0xfffd2690>
   848bc:	0005883a 	mov	r2,zero
   848c0:	0009883a 	mov	r4,zero
   848c4:	003e7806 	br	842a8 <__alt_data_end+0xfffd22a8>
   848c8:	123ff804 	addi	r8,r2,-32
   848cc:	01000804 	movi	r4,32
   848d0:	1a10d83a 	srl	r8,r3,r8
   848d4:	11002526 	beq	r2,r4,8496c <__subdf3+0x8ec>
   848d8:	01001004 	movi	r4,64
   848dc:	2085c83a 	sub	r2,r4,r2
   848e0:	1884983a 	sll	r2,r3,r2
   848e4:	1444b03a 	or	r2,r2,r17
   848e8:	1004c03a 	cmpne	r2,r2,zero
   848ec:	40a2b03a 	or	r17,r8,r2
   848f0:	0005883a 	mov	r2,zero
   848f4:	003f1606 	br	84550 <__alt_data_end+0xfffd2550>
   848f8:	02000434 	movhi	r8,16
   848fc:	0009883a 	mov	r4,zero
   84900:	423fffc4 	addi	r8,r8,-1
   84904:	00bfffc4 	movi	r2,-1
   84908:	0401ffc4 	movi	r16,2047
   8490c:	003e6606 	br	842a8 <__alt_data_end+0xfffd22a8>
   84910:	1c62b03a 	or	r17,r3,r17
   84914:	8822c03a 	cmpne	r17,r17,zero
   84918:	0005883a 	mov	r2,zero
   8491c:	003f9906 	br	84784 <__alt_data_end+0xfffd2784>
   84920:	2807883a 	mov	r3,r5
   84924:	3023883a 	mov	r17,r6
   84928:	0401ffc4 	movi	r16,2047
   8492c:	003df506 	br	84104 <__alt_data_end+0xfffd2104>
   84930:	2807883a 	mov	r3,r5
   84934:	3023883a 	mov	r17,r6
   84938:	003df206 	br	84104 <__alt_data_end+0xfffd2104>
   8493c:	123ff804 	addi	r8,r2,-32
   84940:	01000804 	movi	r4,32
   84944:	1a10d83a 	srl	r8,r3,r8
   84948:	11000a26 	beq	r2,r4,84974 <__subdf3+0x8f4>
   8494c:	01001004 	movi	r4,64
   84950:	2085c83a 	sub	r2,r4,r2
   84954:	1884983a 	sll	r2,r3,r2
   84958:	1444b03a 	or	r2,r2,r17
   8495c:	1004c03a 	cmpne	r2,r2,zero
   84960:	40a2b03a 	or	r17,r8,r2
   84964:	0005883a 	mov	r2,zero
   84968:	003f8606 	br	84784 <__alt_data_end+0xfffd2784>
   8496c:	0005883a 	mov	r2,zero
   84970:	003fdc06 	br	848e4 <__alt_data_end+0xfffd28e4>
   84974:	0005883a 	mov	r2,zero
   84978:	003ff706 	br	84958 <__alt_data_end+0xfffd2958>

0008497c <__fixdfsi>:
   8497c:	280cd53a 	srli	r6,r5,20
   84980:	00c00434 	movhi	r3,16
   84984:	18ffffc4 	addi	r3,r3,-1
   84988:	3181ffcc 	andi	r6,r6,2047
   8498c:	01c0ff84 	movi	r7,1022
   84990:	28c6703a 	and	r3,r5,r3
   84994:	280ad7fa 	srli	r5,r5,31
   84998:	3980120e 	bge	r7,r6,849e4 <__fixdfsi+0x68>
   8499c:	00810744 	movi	r2,1053
   849a0:	11800c16 	blt	r2,r6,849d4 <__fixdfsi+0x58>
   849a4:	00810cc4 	movi	r2,1075
   849a8:	1185c83a 	sub	r2,r2,r6
   849ac:	01c007c4 	movi	r7,31
   849b0:	18c00434 	orhi	r3,r3,16
   849b4:	38800d16 	blt	r7,r2,849ec <__fixdfsi+0x70>
   849b8:	31befb44 	addi	r6,r6,-1043
   849bc:	2084d83a 	srl	r2,r4,r2
   849c0:	1986983a 	sll	r3,r3,r6
   849c4:	1884b03a 	or	r2,r3,r2
   849c8:	28000726 	beq	r5,zero,849e8 <__fixdfsi+0x6c>
   849cc:	0085c83a 	sub	r2,zero,r2
   849d0:	f800283a 	ret
   849d4:	00a00034 	movhi	r2,32768
   849d8:	10bfffc4 	addi	r2,r2,-1
   849dc:	2885883a 	add	r2,r5,r2
   849e0:	f800283a 	ret
   849e4:	0005883a 	mov	r2,zero
   849e8:	f800283a 	ret
   849ec:	008104c4 	movi	r2,1043
   849f0:	1185c83a 	sub	r2,r2,r6
   849f4:	1884d83a 	srl	r2,r3,r2
   849f8:	003ff306 	br	849c8 <__alt_data_end+0xfffd29c8>

000849fc <__floatsidf>:
   849fc:	defffd04 	addi	sp,sp,-12
   84a00:	dfc00215 	stw	ra,8(sp)
   84a04:	dc400115 	stw	r17,4(sp)
   84a08:	dc000015 	stw	r16,0(sp)
   84a0c:	20002b26 	beq	r4,zero,84abc <__floatsidf+0xc0>
   84a10:	2023883a 	mov	r17,r4
   84a14:	2020d7fa 	srli	r16,r4,31
   84a18:	20002d16 	blt	r4,zero,84ad0 <__floatsidf+0xd4>
   84a1c:	8809883a 	mov	r4,r17
   84a20:	0084d900 	call	84d90 <__clzsi2>
   84a24:	01410784 	movi	r5,1054
   84a28:	288bc83a 	sub	r5,r5,r2
   84a2c:	01010cc4 	movi	r4,1075
   84a30:	2149c83a 	sub	r4,r4,r5
   84a34:	00c007c4 	movi	r3,31
   84a38:	1900160e 	bge	r3,r4,84a94 <__floatsidf+0x98>
   84a3c:	00c104c4 	movi	r3,1043
   84a40:	1947c83a 	sub	r3,r3,r5
   84a44:	88c6983a 	sll	r3,r17,r3
   84a48:	00800434 	movhi	r2,16
   84a4c:	10bfffc4 	addi	r2,r2,-1
   84a50:	1886703a 	and	r3,r3,r2
   84a54:	2941ffcc 	andi	r5,r5,2047
   84a58:	800d883a 	mov	r6,r16
   84a5c:	0005883a 	mov	r2,zero
   84a60:	280a953a 	slli	r5,r5,20
   84a64:	31803fcc 	andi	r6,r6,255
   84a68:	01000434 	movhi	r4,16
   84a6c:	300c97fa 	slli	r6,r6,31
   84a70:	213fffc4 	addi	r4,r4,-1
   84a74:	1906703a 	and	r3,r3,r4
   84a78:	1946b03a 	or	r3,r3,r5
   84a7c:	1986b03a 	or	r3,r3,r6
   84a80:	dfc00217 	ldw	ra,8(sp)
   84a84:	dc400117 	ldw	r17,4(sp)
   84a88:	dc000017 	ldw	r16,0(sp)
   84a8c:	dec00304 	addi	sp,sp,12
   84a90:	f800283a 	ret
   84a94:	00c002c4 	movi	r3,11
   84a98:	1887c83a 	sub	r3,r3,r2
   84a9c:	88c6d83a 	srl	r3,r17,r3
   84aa0:	8904983a 	sll	r2,r17,r4
   84aa4:	01000434 	movhi	r4,16
   84aa8:	213fffc4 	addi	r4,r4,-1
   84aac:	2941ffcc 	andi	r5,r5,2047
   84ab0:	1906703a 	and	r3,r3,r4
   84ab4:	800d883a 	mov	r6,r16
   84ab8:	003fe906 	br	84a60 <__alt_data_end+0xfffd2a60>
   84abc:	000d883a 	mov	r6,zero
   84ac0:	000b883a 	mov	r5,zero
   84ac4:	0007883a 	mov	r3,zero
   84ac8:	0005883a 	mov	r2,zero
   84acc:	003fe406 	br	84a60 <__alt_data_end+0xfffd2a60>
   84ad0:	0123c83a 	sub	r17,zero,r4
   84ad4:	003fd106 	br	84a1c <__alt_data_end+0xfffd2a1c>

00084ad8 <__extendsfdf2>:
   84ad8:	200ad5fa 	srli	r5,r4,23
   84adc:	defffd04 	addi	sp,sp,-12
   84ae0:	dc400115 	stw	r17,4(sp)
   84ae4:	29403fcc 	andi	r5,r5,255
   84ae8:	29800044 	addi	r6,r5,1
   84aec:	04402034 	movhi	r17,128
   84af0:	dc000015 	stw	r16,0(sp)
   84af4:	8c7fffc4 	addi	r17,r17,-1
   84af8:	dfc00215 	stw	ra,8(sp)
   84afc:	31803fcc 	andi	r6,r6,255
   84b00:	00800044 	movi	r2,1
   84b04:	8922703a 	and	r17,r17,r4
   84b08:	2020d7fa 	srli	r16,r4,31
   84b0c:	1180110e 	bge	r2,r6,84b54 <__extendsfdf2+0x7c>
   84b10:	880cd0fa 	srli	r6,r17,3
   84b14:	8822977a 	slli	r17,r17,29
   84b18:	2940e004 	addi	r5,r5,896
   84b1c:	2941ffcc 	andi	r5,r5,2047
   84b20:	2804953a 	slli	r2,r5,20
   84b24:	01400434 	movhi	r5,16
   84b28:	800697fa 	slli	r3,r16,31
   84b2c:	297fffc4 	addi	r5,r5,-1
   84b30:	314a703a 	and	r5,r6,r5
   84b34:	288ab03a 	or	r5,r5,r2
   84b38:	28c6b03a 	or	r3,r5,r3
   84b3c:	8805883a 	mov	r2,r17
   84b40:	dfc00217 	ldw	ra,8(sp)
   84b44:	dc400117 	ldw	r17,4(sp)
   84b48:	dc000017 	ldw	r16,0(sp)
   84b4c:	dec00304 	addi	sp,sp,12
   84b50:	f800283a 	ret
   84b54:	2800111e 	bne	r5,zero,84b9c <__extendsfdf2+0xc4>
   84b58:	88001c26 	beq	r17,zero,84bcc <__extendsfdf2+0xf4>
   84b5c:	8809883a 	mov	r4,r17
   84b60:	0084d900 	call	84d90 <__clzsi2>
   84b64:	00c00284 	movi	r3,10
   84b68:	18801b16 	blt	r3,r2,84bd8 <__extendsfdf2+0x100>
   84b6c:	018002c4 	movi	r6,11
   84b70:	308dc83a 	sub	r6,r6,r2
   84b74:	11000544 	addi	r4,r2,21
   84b78:	8986d83a 	srl	r3,r17,r6
   84b7c:	8922983a 	sll	r17,r17,r4
   84b80:	0180e244 	movi	r6,905
   84b84:	01400434 	movhi	r5,16
   84b88:	3085c83a 	sub	r2,r6,r2
   84b8c:	297fffc4 	addi	r5,r5,-1
   84b90:	194c703a 	and	r6,r3,r5
   84b94:	1141ffcc 	andi	r5,r2,2047
   84b98:	003fe006 	br	84b1c <__alt_data_end+0xfffd2b1c>
   84b9c:	88000826 	beq	r17,zero,84bc0 <__extendsfdf2+0xe8>
   84ba0:	880cd0fa 	srli	r6,r17,3
   84ba4:	00800434 	movhi	r2,16
   84ba8:	10bfffc4 	addi	r2,r2,-1
   84bac:	31800234 	orhi	r6,r6,8
   84bb0:	8822977a 	slli	r17,r17,29
   84bb4:	308c703a 	and	r6,r6,r2
   84bb8:	0141ffc4 	movi	r5,2047
   84bbc:	003fd706 	br	84b1c <__alt_data_end+0xfffd2b1c>
   84bc0:	0141ffc4 	movi	r5,2047
   84bc4:	000d883a 	mov	r6,zero
   84bc8:	003fd406 	br	84b1c <__alt_data_end+0xfffd2b1c>
   84bcc:	000b883a 	mov	r5,zero
   84bd0:	000d883a 	mov	r6,zero
   84bd4:	003fd106 	br	84b1c <__alt_data_end+0xfffd2b1c>
   84bd8:	11bffd44 	addi	r6,r2,-11
   84bdc:	8986983a 	sll	r3,r17,r6
   84be0:	0023883a 	mov	r17,zero
   84be4:	003fe606 	br	84b80 <__alt_data_end+0xfffd2b80>

00084be8 <__truncdfsf2>:
   84be8:	2810d53a 	srli	r8,r5,20
   84bec:	01c00434 	movhi	r7,16
   84bf0:	39ffffc4 	addi	r7,r7,-1
   84bf4:	29ce703a 	and	r7,r5,r7
   84bf8:	4201ffcc 	andi	r8,r8,2047
   84bfc:	380e90fa 	slli	r7,r7,3
   84c00:	200cd77a 	srli	r6,r4,29
   84c04:	42400044 	addi	r9,r8,1
   84c08:	4a41ffcc 	andi	r9,r9,2047
   84c0c:	00c00044 	movi	r3,1
   84c10:	280ad7fa 	srli	r5,r5,31
   84c14:	31ceb03a 	or	r7,r6,r7
   84c18:	200490fa 	slli	r2,r4,3
   84c1c:	1a40230e 	bge	r3,r9,84cac <__truncdfsf2+0xc4>
   84c20:	40ff2004 	addi	r3,r8,-896
   84c24:	01803f84 	movi	r6,254
   84c28:	30c01516 	blt	r6,r3,84c80 <__truncdfsf2+0x98>
   84c2c:	00c0380e 	bge	zero,r3,84d10 <__truncdfsf2+0x128>
   84c30:	200c91ba 	slli	r6,r4,6
   84c34:	380e90fa 	slli	r7,r7,3
   84c38:	1004d77a 	srli	r2,r2,29
   84c3c:	300cc03a 	cmpne	r6,r6,zero
   84c40:	31ccb03a 	or	r6,r6,r7
   84c44:	308cb03a 	or	r6,r6,r2
   84c48:	308001cc 	andi	r2,r6,7
   84c4c:	10000426 	beq	r2,zero,84c60 <__truncdfsf2+0x78>
   84c50:	308003cc 	andi	r2,r6,15
   84c54:	01000104 	movi	r4,4
   84c58:	11000126 	beq	r2,r4,84c60 <__truncdfsf2+0x78>
   84c5c:	31800104 	addi	r6,r6,4
   84c60:	3081002c 	andhi	r2,r6,1024
   84c64:	10001626 	beq	r2,zero,84cc0 <__truncdfsf2+0xd8>
   84c68:	18c00044 	addi	r3,r3,1
   84c6c:	00803fc4 	movi	r2,255
   84c70:	18800326 	beq	r3,r2,84c80 <__truncdfsf2+0x98>
   84c74:	300c91ba 	slli	r6,r6,6
   84c78:	300cd27a 	srli	r6,r6,9
   84c7c:	00000206 	br	84c88 <__truncdfsf2+0xa0>
   84c80:	00ffffc4 	movi	r3,-1
   84c84:	000d883a 	mov	r6,zero
   84c88:	18c03fcc 	andi	r3,r3,255
   84c8c:	180895fa 	slli	r4,r3,23
   84c90:	00c02034 	movhi	r3,128
   84c94:	280a97fa 	slli	r5,r5,31
   84c98:	18ffffc4 	addi	r3,r3,-1
   84c9c:	30c6703a 	and	r3,r6,r3
   84ca0:	1906b03a 	or	r3,r3,r4
   84ca4:	1944b03a 	or	r2,r3,r5
   84ca8:	f800283a 	ret
   84cac:	40000b1e 	bne	r8,zero,84cdc <__truncdfsf2+0xf4>
   84cb0:	388cb03a 	or	r6,r7,r2
   84cb4:	0007883a 	mov	r3,zero
   84cb8:	30000426 	beq	r6,zero,84ccc <__truncdfsf2+0xe4>
   84cbc:	01800144 	movi	r6,5
   84cc0:	00803fc4 	movi	r2,255
   84cc4:	300cd0fa 	srli	r6,r6,3
   84cc8:	18800a26 	beq	r3,r2,84cf4 <__truncdfsf2+0x10c>
   84ccc:	00802034 	movhi	r2,128
   84cd0:	10bfffc4 	addi	r2,r2,-1
   84cd4:	308c703a 	and	r6,r6,r2
   84cd8:	003feb06 	br	84c88 <__alt_data_end+0xfffd2c88>
   84cdc:	3888b03a 	or	r4,r7,r2
   84ce0:	203fe726 	beq	r4,zero,84c80 <__alt_data_end+0xfffd2c80>
   84ce4:	380c90fa 	slli	r6,r7,3
   84ce8:	00c03fc4 	movi	r3,255
   84cec:	31808034 	orhi	r6,r6,512
   84cf0:	003fd506 	br	84c48 <__alt_data_end+0xfffd2c48>
   84cf4:	303fe226 	beq	r6,zero,84c80 <__alt_data_end+0xfffd2c80>
   84cf8:	00802034 	movhi	r2,128
   84cfc:	31801034 	orhi	r6,r6,64
   84d00:	10bfffc4 	addi	r2,r2,-1
   84d04:	00ffffc4 	movi	r3,-1
   84d08:	308c703a 	and	r6,r6,r2
   84d0c:	003fde06 	br	84c88 <__alt_data_end+0xfffd2c88>
   84d10:	013ffa44 	movi	r4,-23
   84d14:	19000e16 	blt	r3,r4,84d50 <__truncdfsf2+0x168>
   84d18:	01000784 	movi	r4,30
   84d1c:	20c9c83a 	sub	r4,r4,r3
   84d20:	018007c4 	movi	r6,31
   84d24:	39c02034 	orhi	r7,r7,128
   84d28:	31000b16 	blt	r6,r4,84d58 <__truncdfsf2+0x170>
   84d2c:	423f2084 	addi	r8,r8,-894
   84d30:	120c983a 	sll	r6,r2,r8
   84d34:	3a0e983a 	sll	r7,r7,r8
   84d38:	1104d83a 	srl	r2,r2,r4
   84d3c:	300cc03a 	cmpne	r6,r6,zero
   84d40:	31ceb03a 	or	r7,r6,r7
   84d44:	388cb03a 	or	r6,r7,r2
   84d48:	0007883a 	mov	r3,zero
   84d4c:	003fbe06 	br	84c48 <__alt_data_end+0xfffd2c48>
   84d50:	0007883a 	mov	r3,zero
   84d54:	003fd906 	br	84cbc <__alt_data_end+0xfffd2cbc>
   84d58:	01bfff84 	movi	r6,-2
   84d5c:	30cdc83a 	sub	r6,r6,r3
   84d60:	00c00804 	movi	r3,32
   84d64:	398cd83a 	srl	r6,r7,r6
   84d68:	20c00726 	beq	r4,r3,84d88 <__truncdfsf2+0x1a0>
   84d6c:	423f2884 	addi	r8,r8,-862
   84d70:	3a0e983a 	sll	r7,r7,r8
   84d74:	3884b03a 	or	r2,r7,r2
   84d78:	1004c03a 	cmpne	r2,r2,zero
   84d7c:	118cb03a 	or	r6,r2,r6
   84d80:	0007883a 	mov	r3,zero
   84d84:	003fb006 	br	84c48 <__alt_data_end+0xfffd2c48>
   84d88:	000f883a 	mov	r7,zero
   84d8c:	003ff906 	br	84d74 <__alt_data_end+0xfffd2d74>

00084d90 <__clzsi2>:
   84d90:	00bfffd4 	movui	r2,65535
   84d94:	11000536 	bltu	r2,r4,84dac <__clzsi2+0x1c>
   84d98:	00803fc4 	movi	r2,255
   84d9c:	11000f36 	bltu	r2,r4,84ddc <__clzsi2+0x4c>
   84da0:	00800804 	movi	r2,32
   84da4:	0007883a 	mov	r3,zero
   84da8:	00000506 	br	84dc0 <__clzsi2+0x30>
   84dac:	00804034 	movhi	r2,256
   84db0:	10bfffc4 	addi	r2,r2,-1
   84db4:	11000c2e 	bgeu	r2,r4,84de8 <__clzsi2+0x58>
   84db8:	00800204 	movi	r2,8
   84dbc:	00c00604 	movi	r3,24
   84dc0:	20c8d83a 	srl	r4,r4,r3
   84dc4:	00c002b4 	movhi	r3,10
   84dc8:	18c36004 	addi	r3,r3,3456
   84dcc:	1909883a 	add	r4,r3,r4
   84dd0:	20c00003 	ldbu	r3,0(r4)
   84dd4:	10c5c83a 	sub	r2,r2,r3
   84dd8:	f800283a 	ret
   84ddc:	00800604 	movi	r2,24
   84de0:	00c00204 	movi	r3,8
   84de4:	003ff606 	br	84dc0 <__alt_data_end+0xfffd2dc0>
   84de8:	00800404 	movi	r2,16
   84dec:	1007883a 	mov	r3,r2
   84df0:	003ff306 	br	84dc0 <__alt_data_end+0xfffd2dc0>

00084df4 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
   84df4:	defffd04 	addi	sp,sp,-12
   84df8:	dfc00215 	stw	ra,8(sp)
   84dfc:	df000115 	stw	fp,4(sp)
   84e00:	df000104 	addi	fp,sp,4
   84e04:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
   84e08:	000b883a 	mov	r5,zero
   84e0c:	e13fff17 	ldw	r4,-4(fp)
   84e10:	008d3980 	call	8d398 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
   84e14:	d0a00517 	ldw	r2,-32748(gp)
   84e18:	10800f17 	ldw	r2,60(r2)
   84e1c:	10000526 	beq	r2,zero,84e34 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
   84e20:	d0a00517 	ldw	r2,-32748(gp)
   84e24:	10800f17 	ldw	r2,60(r2)
   84e28:	d0e00517 	ldw	r3,-32748(gp)
   84e2c:	1809883a 	mov	r4,r3
   84e30:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
   84e34:	e13fff17 	ldw	r4,-4(fp)
   84e38:	009e0580 	call	9e058 <_exit>

00084e3c <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
   84e3c:	defffa04 	addi	sp,sp,-24
   84e40:	dfc00515 	stw	ra,20(sp)
   84e44:	df000415 	stw	fp,16(sp)
   84e48:	dc000315 	stw	r16,12(sp)
   84e4c:	df000404 	addi	fp,sp,16
   84e50:	e13ffe15 	stw	r4,-8(fp)
   84e54:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
   84e58:	8000021e 	bne	r16,zero,84e64 <_fclose_r+0x28>
    return (0);			/* on NULL */
   84e5c:	0005883a 	mov	r2,zero
   84e60:	00003b06 	br	84f50 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
   84e64:	e0bffe17 	ldw	r2,-8(fp)
   84e68:	e0bffd15 	stw	r2,-12(fp)
   84e6c:	e0bffd17 	ldw	r2,-12(fp)
   84e70:	10000526 	beq	r2,zero,84e88 <_fclose_r+0x4c>
   84e74:	e0bffd17 	ldw	r2,-12(fp)
   84e78:	10800e17 	ldw	r2,56(r2)
   84e7c:	1000021e 	bne	r2,zero,84e88 <_fclose_r+0x4c>
   84e80:	e13ffd17 	ldw	r4,-12(fp)
   84e84:	008573c0 	call	8573c <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   84e88:	8080030b 	ldhu	r2,12(r16)
   84e8c:	10bfffcc 	andi	r2,r2,65535
   84e90:	10a0001c 	xori	r2,r2,32768
   84e94:	10a00004 	addi	r2,r2,-32768
   84e98:	1000021e 	bne	r2,zero,84ea4 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
   84e9c:	0005883a 	mov	r2,zero
   84ea0:	00002b06 	br	84f50 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   84ea4:	800b883a 	mov	r5,r16
   84ea8:	e13ffe17 	ldw	r4,-8(fp)
   84eac:	0084fa00 	call	84fa0 <__sflush_r>
   84eb0:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   84eb4:	80800b17 	ldw	r2,44(r16)
   84eb8:	10000826 	beq	r2,zero,84edc <_fclose_r+0xa0>
   84ebc:	80800b17 	ldw	r2,44(r16)
   84ec0:	80c00717 	ldw	r3,28(r16)
   84ec4:	180b883a 	mov	r5,r3
   84ec8:	e13ffe17 	ldw	r4,-8(fp)
   84ecc:	103ee83a 	callr	r2
   84ed0:	1000020e 	bge	r2,zero,84edc <_fclose_r+0xa0>
    r = EOF;
   84ed4:	00bfffc4 	movi	r2,-1
   84ed8:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
   84edc:	8080030b 	ldhu	r2,12(r16)
   84ee0:	10bfffcc 	andi	r2,r2,65535
   84ee4:	1080200c 	andi	r2,r2,128
   84ee8:	10000426 	beq	r2,zero,84efc <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
   84eec:	80800417 	ldw	r2,16(r16)
   84ef0:	100b883a 	mov	r5,r2
   84ef4:	e13ffe17 	ldw	r4,-8(fp)
   84ef8:	0085c480 	call	85c48 <_free_r>
  if (HASUB (fp))
   84efc:	80800c17 	ldw	r2,48(r16)
   84f00:	10000826 	beq	r2,zero,84f24 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
   84f04:	80c00c17 	ldw	r3,48(r16)
   84f08:	80801004 	addi	r2,r16,64
   84f0c:	18800426 	beq	r3,r2,84f20 <_fclose_r+0xe4>
   84f10:	80800c17 	ldw	r2,48(r16)
   84f14:	100b883a 	mov	r5,r2
   84f18:	e13ffe17 	ldw	r4,-8(fp)
   84f1c:	0085c480 	call	85c48 <_free_r>
   84f20:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
   84f24:	80801117 	ldw	r2,68(r16)
   84f28:	10000526 	beq	r2,zero,84f40 <_fclose_r+0x104>
    FREELB (rptr, fp);
   84f2c:	80801117 	ldw	r2,68(r16)
   84f30:	100b883a 	mov	r5,r2
   84f34:	e13ffe17 	ldw	r4,-8(fp)
   84f38:	0085c480 	call	85c48 <_free_r>
   84f3c:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
   84f40:	00858140 	call	85814 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
   84f44:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
   84f48:	00858340 	call	85834 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
   84f4c:	e0bffc17 	ldw	r2,-16(fp)
}
   84f50:	e6ffff04 	addi	sp,fp,-4
   84f54:	dfc00217 	ldw	ra,8(sp)
   84f58:	df000117 	ldw	fp,4(sp)
   84f5c:	dc000017 	ldw	r16,0(sp)
   84f60:	dec00304 	addi	sp,sp,12
   84f64:	f800283a 	ret

00084f68 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
   84f68:	defffe04 	addi	sp,sp,-8
   84f6c:	dfc00115 	stw	ra,4(sp)
   84f70:	df000015 	stw	fp,0(sp)
   84f74:	d839883a 	mov	fp,sp
   84f78:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
   84f7c:	d0a00417 	ldw	r2,-32752(gp)
   84f80:	180b883a 	mov	r5,r3
   84f84:	1009883a 	mov	r4,r2
   84f88:	0084e3c0 	call	84e3c <_fclose_r>
}
   84f8c:	e037883a 	mov	sp,fp
   84f90:	dfc00117 	ldw	ra,4(sp)
   84f94:	df000017 	ldw	fp,0(sp)
   84f98:	dec00204 	addi	sp,sp,8
   84f9c:	f800283a 	ret

00084fa0 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   84fa0:	defff504 	addi	sp,sp,-44
   84fa4:	dfc00a15 	stw	ra,40(sp)
   84fa8:	df000915 	stw	fp,36(sp)
   84fac:	dcc00815 	stw	r19,32(sp)
   84fb0:	dc800715 	stw	r18,28(sp)
   84fb4:	dc400615 	stw	r17,24(sp)
   84fb8:	dc000515 	stw	r16,20(sp)
   84fbc:	df000904 	addi	fp,sp,36
   84fc0:	e13ffb15 	stw	r4,-20(fp)
   84fc4:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
   84fc8:	8080030b 	ldhu	r2,12(r16)
   84fcc:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
   84fd0:	e0bff90b 	ldhu	r2,-28(fp)
   84fd4:	10bfffcc 	andi	r2,r2,65535
   84fd8:	1080020c 	andi	r2,r2,8
   84fdc:	1000831e 	bne	r2,zero,851ec <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   84fe0:	8080030b 	ldhu	r2,12(r16)
   84fe4:	10820014 	ori	r2,r2,2048
   84fe8:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   84fec:	80800117 	ldw	r2,4(r16)
   84ff0:	00800216 	blt	zero,r2,84ffc <__sflush_r+0x5c>
   84ff4:	80800f17 	ldw	r2,60(r16)
   84ff8:	00807a0e 	bge	zero,r2,851e4 <__sflush_r+0x244>
   84ffc:	80800a17 	ldw	r2,40(r16)
   85000:	10007826 	beq	r2,zero,851e4 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
   85004:	e0bffb17 	ldw	r2,-20(fp)
   85008:	10800017 	ldw	r2,0(r2)
   8500c:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
   85010:	e0bffb17 	ldw	r2,-20(fp)
   85014:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   85018:	8080030b 	ldhu	r2,12(r16)
   8501c:	10bfffcc 	andi	r2,r2,65535
   85020:	1084000c 	andi	r2,r2,4096
   85024:	10000326 	beq	r2,zero,85034 <__sflush_r+0x94>
	    curoff = fp->_offset;
   85028:	80801417 	ldw	r2,80(r16)
   8502c:	e0bff715 	stw	r2,-36(fp)
   85030:	00002206 	br	850bc <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   85034:	80800a17 	ldw	r2,40(r16)
   85038:	80c00717 	ldw	r3,28(r16)
   8503c:	01c00044 	movi	r7,1
   85040:	000d883a 	mov	r6,zero
   85044:	180b883a 	mov	r5,r3
   85048:	e13ffb17 	ldw	r4,-20(fp)
   8504c:	103ee83a 	callr	r2
   85050:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
   85054:	e0bff717 	ldw	r2,-36(fp)
   85058:	10bfffd8 	cmpnei	r2,r2,-1
   8505c:	1000171e 	bne	r2,zero,850bc <__sflush_r+0x11c>
   85060:	e0bffb17 	ldw	r2,-20(fp)
   85064:	10800017 	ldw	r2,0(r2)
   85068:	10001426 	beq	r2,zero,850bc <__sflush_r+0x11c>
		{
		  int result = EOF;
   8506c:	00bfffc4 	movi	r2,-1
   85070:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   85074:	e0bffb17 	ldw	r2,-20(fp)
   85078:	10800017 	ldw	r2,0(r2)
   8507c:	10800760 	cmpeqi	r2,r2,29
   85080:	1000041e 	bne	r2,zero,85094 <__sflush_r+0xf4>
   85084:	e0bffb17 	ldw	r2,-20(fp)
   85088:	10800017 	ldw	r2,0(r2)
   8508c:	10800598 	cmpnei	r2,r2,22
   85090:	1000051e 	bne	r2,zero,850a8 <__sflush_r+0x108>
		    {
		      result = 0;
   85094:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
   85098:	e0bffb17 	ldw	r2,-20(fp)
   8509c:	e0fffa17 	ldw	r3,-24(fp)
   850a0:	10c00015 	stw	r3,0(r2)
   850a4:	00000306 	br	850b4 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
   850a8:	8080030b 	ldhu	r2,12(r16)
   850ac:	10801014 	ori	r2,r2,64
   850b0:	8080030d 	sth	r2,12(r16)
		  return result;
   850b4:	e0bff817 	ldw	r2,-32(fp)
   850b8:	00007106 	br	85280 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
   850bc:	8080030b 	ldhu	r2,12(r16)
   850c0:	10bfffcc 	andi	r2,r2,65535
   850c4:	1080010c 	andi	r2,r2,4
   850c8:	10000a26 	beq	r2,zero,850f4 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   850cc:	80800117 	ldw	r2,4(r16)
   850d0:	e0fff717 	ldw	r3,-36(fp)
   850d4:	1885c83a 	sub	r2,r3,r2
   850d8:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
   850dc:	80800c17 	ldw	r2,48(r16)
   850e0:	10000426 	beq	r2,zero,850f4 <__sflush_r+0x154>
                curoff -= fp->_ur;
   850e4:	80800f17 	ldw	r2,60(r16)
   850e8:	e0fff717 	ldw	r3,-36(fp)
   850ec:	1885c83a 	sub	r2,r3,r2
   850f0:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
   850f4:	80800a17 	ldw	r2,40(r16)
   850f8:	80c00717 	ldw	r3,28(r16)
   850fc:	000f883a 	mov	r7,zero
   85100:	e1bff717 	ldw	r6,-36(fp)
   85104:	180b883a 	mov	r5,r3
   85108:	e13ffb17 	ldw	r4,-20(fp)
   8510c:	103ee83a 	callr	r2
   85110:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
   85114:	e0bff717 	ldw	r2,-36(fp)
   85118:	10bfffd8 	cmpnei	r2,r2,-1
   8511c:	10000b1e 	bne	r2,zero,8514c <__sflush_r+0x1ac>
   85120:	e0bffb17 	ldw	r2,-20(fp)
   85124:	10800017 	ldw	r2,0(r2)
   85128:	10000826 	beq	r2,zero,8514c <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   8512c:	e0bffb17 	ldw	r2,-20(fp)
   85130:	10800017 	ldw	r2,0(r2)
   85134:	10800760 	cmpeqi	r2,r2,29
   85138:	1000041e 	bne	r2,zero,8514c <__sflush_r+0x1ac>
   8513c:	e0bffb17 	ldw	r2,-20(fp)
   85140:	10800017 	ldw	r2,0(r2)
   85144:	10800598 	cmpnei	r2,r2,22
   85148:	1000211e 	bne	r2,zero,851d0 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   8514c:	80c0030b 	ldhu	r3,12(r16)
   85150:	00bdffc4 	movi	r2,-2049
   85154:	1884703a 	and	r2,r3,r2
   85158:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
   8515c:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
   85160:	80800417 	ldw	r2,16(r16)
   85164:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   85168:	8080030b 	ldhu	r2,12(r16)
   8516c:	10bfffcc 	andi	r2,r2,65535
   85170:	1084000c 	andi	r2,r2,4096
   85174:	10000826 	beq	r2,zero,85198 <__sflush_r+0x1f8>
   85178:	e0bff717 	ldw	r2,-36(fp)
   8517c:	10bfffd8 	cmpnei	r2,r2,-1
   85180:	1000031e 	bne	r2,zero,85190 <__sflush_r+0x1f0>
   85184:	e0bffb17 	ldw	r2,-20(fp)
   85188:	10800017 	ldw	r2,0(r2)
   8518c:	1000021e 	bne	r2,zero,85198 <__sflush_r+0x1f8>
		fp->_offset = curoff;
   85190:	e0bff717 	ldw	r2,-36(fp)
   85194:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
   85198:	e0bffb17 	ldw	r2,-20(fp)
   8519c:	e0fffa17 	ldw	r3,-24(fp)
   851a0:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
   851a4:	80800c17 	ldw	r2,48(r16)
   851a8:	10000e26 	beq	r2,zero,851e4 <__sflush_r+0x244>
		FREEUB (ptr, fp);
   851ac:	80c00c17 	ldw	r3,48(r16)
   851b0:	80801004 	addi	r2,r16,64
   851b4:	18800426 	beq	r3,r2,851c8 <__sflush_r+0x228>
   851b8:	80800c17 	ldw	r2,48(r16)
   851bc:	100b883a 	mov	r5,r2
   851c0:	e13ffb17 	ldw	r4,-20(fp)
   851c4:	0085c480 	call	85c48 <_free_r>
   851c8:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
   851cc:	00000506 	br	851e4 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
   851d0:	8080030b 	ldhu	r2,12(r16)
   851d4:	10801014 	ori	r2,r2,64
   851d8:	8080030d 	sth	r2,12(r16)
	      return EOF;
   851dc:	00bfffc4 	movi	r2,-1
   851e0:	00002706 	br	85280 <__sflush_r+0x2e0>
	    }
	}
      return 0;
   851e4:	0005883a 	mov	r2,zero
   851e8:	00002506 	br	85280 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
   851ec:	84400417 	ldw	r17,16(r16)
   851f0:	8800021e 	bne	r17,zero,851fc <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
   851f4:	0005883a 	mov	r2,zero
   851f8:	00002106 	br	85280 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
   851fc:	80800017 	ldw	r2,0(r16)
   85200:	1007883a 	mov	r3,r2
   85204:	8805883a 	mov	r2,r17
   85208:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
   8520c:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   85210:	e0bff90b 	ldhu	r2,-28(fp)
   85214:	10bfffcc 	andi	r2,r2,65535
   85218:	108000cc 	andi	r2,r2,3
   8521c:	1000021e 	bne	r2,zero,85228 <__sflush_r+0x288>
   85220:	80800517 	ldw	r2,20(r16)
   85224:	00000106 	br	8522c <__sflush_r+0x28c>
   85228:	0005883a 	mov	r2,zero
   8522c:	80800215 	stw	r2,8(r16)

  while (n > 0)
   85230:	00001106 	br	85278 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
   85234:	80800917 	ldw	r2,36(r16)
   85238:	80c00717 	ldw	r3,28(r16)
   8523c:	900f883a 	mov	r7,r18
   85240:	880d883a 	mov	r6,r17
   85244:	180b883a 	mov	r5,r3
   85248:	e13ffb17 	ldw	r4,-20(fp)
   8524c:	103ee83a 	callr	r2
   85250:	1027883a 	mov	r19,r2
      if (t <= 0)
   85254:	04c00516 	blt	zero,r19,8526c <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
   85258:	8080030b 	ldhu	r2,12(r16)
   8525c:	10801014 	ori	r2,r2,64
   85260:	8080030d 	sth	r2,12(r16)
          return EOF;
   85264:	00bfffc4 	movi	r2,-1
   85268:	00000506 	br	85280 <__sflush_r+0x2e0>
	}
      p += t;
   8526c:	9805883a 	mov	r2,r19
   85270:	88a3883a 	add	r17,r17,r2
      n -= t;
   85274:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
   85278:	04bfee16 	blt	zero,r18,85234 <__alt_data_end+0xfffd3234>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
   8527c:	0005883a 	mov	r2,zero
}
   85280:	e6fffc04 	addi	sp,fp,-16
   85284:	dfc00517 	ldw	ra,20(sp)
   85288:	df000417 	ldw	fp,16(sp)
   8528c:	dcc00317 	ldw	r19,12(sp)
   85290:	dc800217 	ldw	r18,8(sp)
   85294:	dc400117 	ldw	r17,4(sp)
   85298:	dc000017 	ldw	r16,0(sp)
   8529c:	dec00604 	addi	sp,sp,24
   852a0:	f800283a 	ret

000852a4 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   852a4:	defffa04 	addi	sp,sp,-24
   852a8:	dfc00515 	stw	ra,20(sp)
   852ac:	df000415 	stw	fp,16(sp)
   852b0:	dc000315 	stw	r16,12(sp)
   852b4:	df000404 	addi	fp,sp,16
   852b8:	e13ffe15 	stw	r4,-8(fp)
   852bc:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   852c0:	e0bffe17 	ldw	r2,-8(fp)
   852c4:	e0bffc15 	stw	r2,-16(fp)
   852c8:	e0bffc17 	ldw	r2,-16(fp)
   852cc:	10000526 	beq	r2,zero,852e4 <_fflush_r+0x40>
   852d0:	e0bffc17 	ldw	r2,-16(fp)
   852d4:	10800e17 	ldw	r2,56(r2)
   852d8:	1000021e 	bne	r2,zero,852e4 <_fflush_r+0x40>
   852dc:	e13ffc17 	ldw	r4,-16(fp)
   852e0:	008573c0 	call	8573c <__sinit>

  if (!fp->_flags)
   852e4:	8080030b 	ldhu	r2,12(r16)
   852e8:	10bfffcc 	andi	r2,r2,65535
   852ec:	10a0001c 	xori	r2,r2,32768
   852f0:	10a00004 	addi	r2,r2,-32768
   852f4:	1000021e 	bne	r2,zero,85300 <_fflush_r+0x5c>
    return 0;
   852f8:	0005883a 	mov	r2,zero
   852fc:	00000506 	br	85314 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   85300:	800b883a 	mov	r5,r16
   85304:	e13ffe17 	ldw	r4,-8(fp)
   85308:	0084fa00 	call	84fa0 <__sflush_r>
   8530c:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
   85310:	e0bffd17 	ldw	r2,-12(fp)
}
   85314:	e6ffff04 	addi	sp,fp,-4
   85318:	dfc00217 	ldw	ra,8(sp)
   8531c:	df000117 	ldw	fp,4(sp)
   85320:	dc000017 	ldw	r16,0(sp)
   85324:	dec00304 	addi	sp,sp,12
   85328:	f800283a 	ret

0008532c <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
   8532c:	defffe04 	addi	sp,sp,-8
   85330:	dfc00115 	stw	ra,4(sp)
   85334:	df000015 	stw	fp,0(sp)
   85338:	d839883a 	mov	fp,sp
   8533c:	2005883a 	mov	r2,r4
  if (fp == NULL)
   85340:	1000061e 	bne	r2,zero,8535c <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
   85344:	d0a00517 	ldw	r2,-32748(gp)
   85348:	01400234 	movhi	r5,8
   8534c:	2954a904 	addi	r5,r5,21156
   85350:	1009883a 	mov	r4,r2
   85354:	0086c880 	call	86c88 <_fwalk_reent>
   85358:	00000406 	br	8536c <fflush+0x40>

  return _fflush_r (_REENT, fp);
   8535c:	d0e00417 	ldw	r3,-32752(gp)
   85360:	100b883a 	mov	r5,r2
   85364:	1809883a 	mov	r4,r3
   85368:	00852a40 	call	852a4 <_fflush_r>
}
   8536c:	e037883a 	mov	sp,fp
   85370:	dfc00117 	ldw	ra,4(sp)
   85374:	df000017 	ldw	fp,0(sp)
   85378:	dec00204 	addi	sp,sp,8
   8537c:	f800283a 	ret

00085380 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
   85380:	defffa04 	addi	sp,sp,-24
   85384:	dfc00515 	stw	ra,20(sp)
   85388:	df000415 	stw	fp,16(sp)
   8538c:	df000404 	addi	fp,sp,16
   85390:	e13ffc15 	stw	r4,-16(fp)
   85394:	e17ffd15 	stw	r5,-12(fp)
   85398:	e1bffe15 	stw	r6,-8(fp)
   8539c:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
   853a0:	e0bffc17 	ldw	r2,-16(fp)
   853a4:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
   853a8:	e0bffc17 	ldw	r2,-16(fp)
   853ac:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
   853b0:	e0bffc17 	ldw	r2,-16(fp)
   853b4:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
   853b8:	e0bffd17 	ldw	r2,-12(fp)
   853bc:	1007883a 	mov	r3,r2
   853c0:	e0bffc17 	ldw	r2,-16(fp)
   853c4:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
   853c8:	e0bffc17 	ldw	r2,-16(fp)
   853cc:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
   853d0:	e0bffe17 	ldw	r2,-8(fp)
   853d4:	1007883a 	mov	r3,r2
   853d8:	e0bffc17 	ldw	r2,-16(fp)
   853dc:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
   853e0:	e0bffc17 	ldw	r2,-16(fp)
   853e4:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
   853e8:	e0bffc17 	ldw	r2,-16(fp)
   853ec:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
   853f0:	e0bffc17 	ldw	r2,-16(fp)
   853f4:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   853f8:	e0bffc17 	ldw	r2,-16(fp)
   853fc:	10801704 	addi	r2,r2,92
   85400:	01800204 	movi	r6,8
   85404:	000b883a 	mov	r5,zero
   85408:	1009883a 	mov	r4,r2
   8540c:	00880200 	call	88020 <memset>
  ptr->_cookie = ptr;
   85410:	e0bffc17 	ldw	r2,-16(fp)
   85414:	e0fffc17 	ldw	r3,-16(fp)
   85418:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
   8541c:	e0fffc17 	ldw	r3,-16(fp)
   85420:	00800274 	movhi	r2,9
   85424:	10a27004 	addi	r2,r2,-30272
   85428:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   8542c:	e0fffc17 	ldw	r3,-16(fp)
   85430:	00800274 	movhi	r2,9
   85434:	10a2a304 	addi	r2,r2,-30068
   85438:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   8543c:	e0fffc17 	ldw	r3,-16(fp)
   85440:	00800274 	movhi	r2,9
   85444:	10a2d004 	addi	r2,r2,-29888
   85448:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   8544c:	e0fffc17 	ldw	r3,-16(fp)
   85450:	00800274 	movhi	r2,9
   85454:	10a2f804 	addi	r2,r2,-29728
   85458:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
   8545c:	0001883a 	nop
   85460:	e037883a 	mov	sp,fp
   85464:	dfc00117 	ldw	ra,4(sp)
   85468:	df000017 	ldw	fp,0(sp)
   8546c:	dec00204 	addi	sp,sp,8
   85470:	f800283a 	ret

00085474 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   85474:	defffa04 	addi	sp,sp,-24
   85478:	dfc00515 	stw	ra,20(sp)
   8547c:	df000415 	stw	fp,16(sp)
   85480:	dc400315 	stw	r17,12(sp)
   85484:	dc000215 	stw	r16,8(sp)
   85488:	df000404 	addi	fp,sp,16
   8548c:	e13ffd15 	stw	r4,-12(fp)
   85490:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   85494:	80bfffc4 	addi	r2,r16,-1
   85498:	01401a04 	movi	r5,104
   8549c:	1009883a 	mov	r4,r2
   854a0:	00823a00 	call	823a0 <__mulsi3>
   854a4:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   854a8:	100b883a 	mov	r5,r2
   854ac:	e13ffd17 	ldw	r4,-12(fp)
   854b0:	00874a40 	call	874a4 <_malloc_r>
   854b4:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
   854b8:	e0bffc17 	ldw	r2,-16(fp)
   854bc:	1000021e 	bne	r2,zero,854c8 <__sfmoreglue+0x54>
    return NULL;
   854c0:	0005883a 	mov	r2,zero
   854c4:	00001306 	br	85514 <__sfmoreglue+0xa0>
  g->glue._next = NULL;
   854c8:	e0bffc17 	ldw	r2,-16(fp)
   854cc:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
   854d0:	e0bffc17 	ldw	r2,-16(fp)
   854d4:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
   854d8:	e0bffc17 	ldw	r2,-16(fp)
   854dc:	10c00304 	addi	r3,r2,12
   854e0:	e0bffc17 	ldw	r2,-16(fp)
   854e4:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
   854e8:	e0bffc17 	ldw	r2,-16(fp)
   854ec:	14400304 	addi	r17,r2,12
   854f0:	8005883a 	mov	r2,r16
   854f4:	01401a04 	movi	r5,104
   854f8:	1009883a 	mov	r4,r2
   854fc:	00823a00 	call	823a0 <__mulsi3>
   85500:	100d883a 	mov	r6,r2
   85504:	000b883a 	mov	r5,zero
   85508:	8809883a 	mov	r4,r17
   8550c:	00880200 	call	88020 <memset>
  return &g->glue;
   85510:	e0bffc17 	ldw	r2,-16(fp)
}
   85514:	e6fffe04 	addi	sp,fp,-8
   85518:	dfc00317 	ldw	ra,12(sp)
   8551c:	df000217 	ldw	fp,8(sp)
   85520:	dc400117 	ldw	r17,4(sp)
   85524:	dc000017 	ldw	r16,0(sp)
   85528:	dec00404 	addi	sp,sp,16
   8552c:	f800283a 	ret

00085530 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   85530:	defffa04 	addi	sp,sp,-24
   85534:	dfc00515 	stw	ra,20(sp)
   85538:	df000415 	stw	fp,16(sp)
   8553c:	df000404 	addi	fp,sp,16
   85540:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
   85544:	00858140 	call	85814 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
   85548:	d0a00517 	ldw	r2,-32748(gp)
   8554c:	10800e17 	ldw	r2,56(r2)
   85550:	1000031e 	bne	r2,zero,85560 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
   85554:	d0a00517 	ldw	r2,-32748(gp)
   85558:	1009883a 	mov	r4,r2
   8555c:	008573c0 	call	8573c <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   85560:	d0a00517 	ldw	r2,-32748(gp)
   85564:	1080b804 	addi	r2,r2,736
   85568:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   8556c:	e0bffe17 	ldw	r2,-8(fp)
   85570:	10800217 	ldw	r2,8(r2)
   85574:	e0bffc15 	stw	r2,-16(fp)
   85578:	e0bffe17 	ldw	r2,-8(fp)
   8557c:	10800117 	ldw	r2,4(r2)
   85580:	e0bffd15 	stw	r2,-12(fp)
   85584:	00000906 	br	855ac <__sfp+0x7c>
	if (fp->_flags == 0)
   85588:	e0bffc17 	ldw	r2,-16(fp)
   8558c:	1080030b 	ldhu	r2,12(r2)
   85590:	10bfffcc 	andi	r2,r2,65535
   85594:	10a0001c 	xori	r2,r2,32768
   85598:	10a00004 	addi	r2,r2,-32768
   8559c:	10001f26 	beq	r2,zero,8561c <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   855a0:	e0bffc17 	ldw	r2,-16(fp)
   855a4:	10801a04 	addi	r2,r2,104
   855a8:	e0bffc15 	stw	r2,-16(fp)
   855ac:	e0bffd17 	ldw	r2,-12(fp)
   855b0:	10bfffc4 	addi	r2,r2,-1
   855b4:	e0bffd15 	stw	r2,-12(fp)
   855b8:	e0bffd17 	ldw	r2,-12(fp)
   855bc:	103ff20e 	bge	r2,zero,85588 <__alt_data_end+0xfffd3588>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   855c0:	e0bffe17 	ldw	r2,-8(fp)
   855c4:	10800017 	ldw	r2,0(r2)
   855c8:	1000091e 	bne	r2,zero,855f0 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
   855cc:	01400104 	movi	r5,4
   855d0:	e13fff17 	ldw	r4,-4(fp)
   855d4:	00854740 	call	85474 <__sfmoreglue>
   855d8:	1007883a 	mov	r3,r2
   855dc:	e0bffe17 	ldw	r2,-8(fp)
   855e0:	10c00015 	stw	r3,0(r2)
   855e4:	e0bffe17 	ldw	r2,-8(fp)
   855e8:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   855ec:	10000426 	beq	r2,zero,85600 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   855f0:	e0bffe17 	ldw	r2,-8(fp)
   855f4:	10800017 	ldw	r2,0(r2)
   855f8:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
   855fc:	003fdb06 	br	8556c <__alt_data_end+0xfffd356c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
   85600:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
   85604:	00858340 	call	85834 <__sfp_lock_release>
  d->_errno = ENOMEM;
   85608:	e0bfff17 	ldw	r2,-4(fp)
   8560c:	00c00304 	movi	r3,12
   85610:	10c00015 	stw	r3,0(r2)
  return NULL;
   85614:	0005883a 	mov	r2,zero
   85618:	00002506 	br	856b0 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
   8561c:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
   85620:	e0bffc17 	ldw	r2,-16(fp)
   85624:	00ffffc4 	movi	r3,-1
   85628:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
   8562c:	e0bffc17 	ldw	r2,-16(fp)
   85630:	00c00044 	movi	r3,1
   85634:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
   85638:	e0bffc17 	ldw	r2,-16(fp)
   8563c:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
   85640:	00858340 	call	85834 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
   85644:	e0bffc17 	ldw	r2,-16(fp)
   85648:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
   8564c:	e0bffc17 	ldw	r2,-16(fp)
   85650:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
   85654:	e0bffc17 	ldw	r2,-16(fp)
   85658:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
   8565c:	e0bffc17 	ldw	r2,-16(fp)
   85660:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
   85664:	e0bffc17 	ldw	r2,-16(fp)
   85668:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
   8566c:	e0bffc17 	ldw	r2,-16(fp)
   85670:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   85674:	e0bffc17 	ldw	r2,-16(fp)
   85678:	10801704 	addi	r2,r2,92
   8567c:	01800204 	movi	r6,8
   85680:	000b883a 	mov	r5,zero
   85684:	1009883a 	mov	r4,r2
   85688:	00880200 	call	88020 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
   8568c:	e0bffc17 	ldw	r2,-16(fp)
   85690:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
   85694:	e0bffc17 	ldw	r2,-16(fp)
   85698:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
   8569c:	e0bffc17 	ldw	r2,-16(fp)
   856a0:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
   856a4:	e0bffc17 	ldw	r2,-16(fp)
   856a8:	10001215 	stw	zero,72(r2)

  return fp;
   856ac:	e0bffc17 	ldw	r2,-16(fp)
}
   856b0:	e037883a 	mov	sp,fp
   856b4:	dfc00117 	ldw	ra,4(sp)
   856b8:	df000017 	ldw	fp,0(sp)
   856bc:	dec00204 	addi	sp,sp,8
   856c0:	f800283a 	ret

000856c4 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
   856c4:	defffc04 	addi	sp,sp,-16
   856c8:	dfc00315 	stw	ra,12(sp)
   856cc:	df000215 	stw	fp,8(sp)
   856d0:	df000204 	addi	fp,sp,8
   856d4:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
   856d8:	00800234 	movhi	r2,8
   856dc:	10938f04 	addi	r2,r2,20028
   856e0:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   856e4:	e17ffe17 	ldw	r5,-8(fp)
   856e8:	e13fff17 	ldw	r4,-4(fp)
   856ec:	0086c880 	call	86c88 <_fwalk_reent>
}
   856f0:	0001883a 	nop
   856f4:	e037883a 	mov	sp,fp
   856f8:	dfc00117 	ldw	ra,4(sp)
   856fc:	df000017 	ldw	fp,0(sp)
   85700:	dec00204 	addi	sp,sp,8
   85704:	f800283a 	ret

00085708 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
   85708:	defffe04 	addi	sp,sp,-8
   8570c:	dfc00115 	stw	ra,4(sp)
   85710:	df000015 	stw	fp,0(sp)
   85714:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
   85718:	d0a00517 	ldw	r2,-32748(gp)
   8571c:	1009883a 	mov	r4,r2
   85720:	00856c40 	call	856c4 <_cleanup_r>
}
   85724:	0001883a 	nop
   85728:	e037883a 	mov	sp,fp
   8572c:	dfc00117 	ldw	ra,4(sp)
   85730:	df000017 	ldw	fp,0(sp)
   85734:	dec00204 	addi	sp,sp,8
   85738:	f800283a 	ret

0008573c <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
   8573c:	defffd04 	addi	sp,sp,-12
   85740:	dfc00215 	stw	ra,8(sp)
   85744:	df000115 	stw	fp,4(sp)
   85748:	df000104 	addi	fp,sp,4
   8574c:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
   85750:	00858540 	call	85854 <__sinit_lock_acquire>

  if (s->__sdidinit)
   85754:	e0bfff17 	ldw	r2,-4(fp)
   85758:	10800e17 	ldw	r2,56(r2)
   8575c:	10000226 	beq	r2,zero,85768 <__sinit+0x2c>
    {
      __sinit_lock_release ();
   85760:	00858740 	call	85874 <__sinit_lock_release>
      return;
   85764:	00002606 	br	85800 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   85768:	e0ffff17 	ldw	r3,-4(fp)
   8576c:	00800234 	movhi	r2,8
   85770:	1095b104 	addi	r2,r2,22212
   85774:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
   85778:	e0bfff17 	ldw	r2,-4(fp)
   8577c:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
   85780:	e0bfff17 	ldw	r2,-4(fp)
   85784:	00c000c4 	movi	r3,3
   85788:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
   8578c:	e0bfff17 	ldw	r2,-4(fp)
   85790:	10c0bb04 	addi	r3,r2,748
   85794:	e0bfff17 	ldw	r2,-4(fp)
   85798:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
   8579c:	e0bfff17 	ldw	r2,-4(fp)
   857a0:	10800117 	ldw	r2,4(r2)
   857a4:	e1ffff17 	ldw	r7,-4(fp)
   857a8:	000d883a 	mov	r6,zero
   857ac:	01400104 	movi	r5,4
   857b0:	1009883a 	mov	r4,r2
   857b4:	00853800 	call	85380 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
   857b8:	e0bfff17 	ldw	r2,-4(fp)
   857bc:	10800217 	ldw	r2,8(r2)
   857c0:	e1ffff17 	ldw	r7,-4(fp)
   857c4:	01800044 	movi	r6,1
   857c8:	01400284 	movi	r5,10
   857cc:	1009883a 	mov	r4,r2
   857d0:	00853800 	call	85380 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
   857d4:	e0bfff17 	ldw	r2,-4(fp)
   857d8:	10800317 	ldw	r2,12(r2)
   857dc:	e1ffff17 	ldw	r7,-4(fp)
   857e0:	01800084 	movi	r6,2
   857e4:	01400484 	movi	r5,18
   857e8:	1009883a 	mov	r4,r2
   857ec:	00853800 	call	85380 <std>

  s->__sdidinit = 1;
   857f0:	e0bfff17 	ldw	r2,-4(fp)
   857f4:	00c00044 	movi	r3,1
   857f8:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
   857fc:	00858740 	call	85874 <__sinit_lock_release>
}
   85800:	e037883a 	mov	sp,fp
   85804:	dfc00117 	ldw	ra,4(sp)
   85808:	df000017 	ldw	fp,0(sp)
   8580c:	dec00204 	addi	sp,sp,8
   85810:	f800283a 	ret

00085814 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
   85814:	deffff04 	addi	sp,sp,-4
   85818:	df000015 	stw	fp,0(sp)
   8581c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
   85820:	0001883a 	nop
   85824:	e037883a 	mov	sp,fp
   85828:	df000017 	ldw	fp,0(sp)
   8582c:	dec00104 	addi	sp,sp,4
   85830:	f800283a 	ret

00085834 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
   85834:	deffff04 	addi	sp,sp,-4
   85838:	df000015 	stw	fp,0(sp)
   8583c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
   85840:	0001883a 	nop
   85844:	e037883a 	mov	sp,fp
   85848:	df000017 	ldw	fp,0(sp)
   8584c:	dec00104 	addi	sp,sp,4
   85850:	f800283a 	ret

00085854 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
   85854:	deffff04 	addi	sp,sp,-4
   85858:	df000015 	stw	fp,0(sp)
   8585c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
   85860:	0001883a 	nop
   85864:	e037883a 	mov	sp,fp
   85868:	df000017 	ldw	fp,0(sp)
   8586c:	dec00104 	addi	sp,sp,4
   85870:	f800283a 	ret

00085874 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
   85874:	deffff04 	addi	sp,sp,-4
   85878:	df000015 	stw	fp,0(sp)
   8587c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
   85880:	0001883a 	nop
   85884:	e037883a 	mov	sp,fp
   85888:	df000017 	ldw	fp,0(sp)
   8588c:	dec00104 	addi	sp,sp,4
   85890:	f800283a 	ret

00085894 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
   85894:	defffe04 	addi	sp,sp,-8
   85898:	df000115 	stw	fp,4(sp)
   8589c:	df000104 	addi	fp,sp,4
   858a0:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
   858a4:	0005883a 	mov	r2,zero
}
   858a8:	e037883a 	mov	sp,fp
   858ac:	df000017 	ldw	fp,0(sp)
   858b0:	dec00104 	addi	sp,sp,4
   858b4:	f800283a 	ret

000858b8 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
   858b8:	defffe04 	addi	sp,sp,-8
   858bc:	df000115 	stw	fp,4(sp)
   858c0:	df000104 	addi	fp,sp,4
   858c4:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
   858c8:	0005883a 	mov	r2,zero
}
   858cc:	e037883a 	mov	sp,fp
   858d0:	df000017 	ldw	fp,0(sp)
   858d4:	dec00104 	addi	sp,sp,4
   858d8:	f800283a 	ret

000858dc <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
   858dc:	defffe04 	addi	sp,sp,-8
   858e0:	dfc00115 	stw	ra,4(sp)
   858e4:	df000015 	stw	fp,0(sp)
   858e8:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
   858ec:	00858140 	call	85814 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
   858f0:	d0a00417 	ldw	r2,-32752(gp)
   858f4:	01400234 	movhi	r5,8
   858f8:	29562504 	addi	r5,r5,22676
   858fc:	1009883a 	mov	r4,r2
   85900:	0086bb00 	call	86bb0 <_fwalk>
}
   85904:	0001883a 	nop
   85908:	e037883a 	mov	sp,fp
   8590c:	dfc00117 	ldw	ra,4(sp)
   85910:	df000017 	ldw	fp,0(sp)
   85914:	dec00204 	addi	sp,sp,8
   85918:	f800283a 	ret

0008591c <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
   8591c:	defffe04 	addi	sp,sp,-8
   85920:	dfc00115 	stw	ra,4(sp)
   85924:	df000015 	stw	fp,0(sp)
   85928:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
   8592c:	d0a00417 	ldw	r2,-32752(gp)
   85930:	01400234 	movhi	r5,8
   85934:	29562e04 	addi	r5,r5,22712
   85938:	1009883a 	mov	r4,r2
   8593c:	0086bb00 	call	86bb0 <_fwalk>

  __sfp_lock_release ();
   85940:	00858340 	call	85834 <__sfp_lock_release>
}
   85944:	0001883a 	nop
   85948:	e037883a 	mov	sp,fp
   8594c:	dfc00117 	ldw	ra,4(sp)
   85950:	df000017 	ldw	fp,0(sp)
   85954:	dec00204 	addi	sp,sp,8
   85958:	f800283a 	ret

0008595c <_fopen_r>:
FILE *
_DEFUN(_fopen_r, (ptr, file, mode),
       struct _reent *ptr _AND
       _CONST char *__restrict file _AND
       _CONST char *__restrict mode)
{
   8595c:	defff704 	addi	sp,sp,-36
   85960:	dfc00815 	stw	ra,32(sp)
   85964:	df000715 	stw	fp,28(sp)
   85968:	dc400615 	stw	r17,24(sp)
   8596c:	dc000515 	stw	r16,20(sp)
   85970:	df000704 	addi	fp,sp,28
   85974:	e13ffb15 	stw	r4,-20(fp)
   85978:	e17ffc15 	stw	r5,-16(fp)
   8597c:	e1bffd15 	stw	r6,-12(fp)
  register FILE *fp;
  register int f;
  int flags, oflags;

  if ((flags = __sflags (ptr, mode, &oflags)) == 0)
   85980:	e0bffa04 	addi	r2,fp,-24
   85984:	100d883a 	mov	r6,r2
   85988:	e17ffd17 	ldw	r5,-12(fp)
   8598c:	e13ffb17 	ldw	r4,-20(fp)
   85990:	008f4c00 	call	8f4c0 <__sflags>
   85994:	e0bff915 	stw	r2,-28(fp)
   85998:	e0bff917 	ldw	r2,-28(fp)
   8599c:	1000021e 	bne	r2,zero,859a8 <_fopen_r+0x4c>
    return NULL;
   859a0:	0005883a 	mov	r2,zero
   859a4:	00002e06 	br	85a60 <_fopen_r+0x104>
  if ((fp = __sfp (ptr)) == NULL)
   859a8:	e13ffb17 	ldw	r4,-20(fp)
   859ac:	00855300 	call	85530 <__sfp>
   859b0:	1021883a 	mov	r16,r2
   859b4:	8000021e 	bne	r16,zero,859c0 <_fopen_r+0x64>
    return NULL;
   859b8:	0005883a 	mov	r2,zero
   859bc:	00002806 	br	85a60 <_fopen_r+0x104>

  if ((f = _open_r (ptr, file, oflags, 0666)) < 0)
   859c0:	e0bffa17 	ldw	r2,-24(fp)
   859c4:	01c06d84 	movi	r7,438
   859c8:	100d883a 	mov	r6,r2
   859cc:	e17ffc17 	ldw	r5,-16(fp)
   859d0:	e13ffb17 	ldw	r4,-20(fp)
   859d4:	00881e40 	call	881e4 <_open_r>
   859d8:	1023883a 	mov	r17,r2
   859dc:	8800050e 	bge	r17,zero,859f4 <_fopen_r+0x98>
    {
      _newlib_sfp_lock_start (); 
   859e0:	00858140 	call	85814 <__sfp_lock_acquire>
      fp->_flags = 0;		/* release */
   859e4:	8000030d 	sth	zero,12(r16)
#ifndef __SINGLE_THREAD__
      __lock_close_recursive (fp->_lock);
#endif
      _newlib_sfp_lock_end (); 
   859e8:	00858340 	call	85834 <__sfp_lock_release>
      return NULL;
   859ec:	0005883a 	mov	r2,zero
   859f0:	00001b06 	br	85a60 <_fopen_r+0x104>
    }

  _newlib_flockfile_start (fp);

  fp->_file = f;
   859f4:	8805883a 	mov	r2,r17
   859f8:	8080038d 	sth	r2,14(r16)
  fp->_flags = flags;
   859fc:	e0bff917 	ldw	r2,-28(fp)
   85a00:	8080030d 	sth	r2,12(r16)
  fp->_cookie = (_PTR) fp;
   85a04:	84000715 	stw	r16,28(r16)
  fp->_read = __sread;
   85a08:	00800274 	movhi	r2,9
   85a0c:	10a27004 	addi	r2,r2,-30272
   85a10:	80800815 	stw	r2,32(r16)
  fp->_write = __swrite;
   85a14:	00800274 	movhi	r2,9
   85a18:	10a2a304 	addi	r2,r2,-30068
   85a1c:	80800915 	stw	r2,36(r16)
  fp->_seek = __sseek;
   85a20:	00800274 	movhi	r2,9
   85a24:	10a2d004 	addi	r2,r2,-29888
   85a28:	80800a15 	stw	r2,40(r16)
  fp->_close = __sclose;
   85a2c:	00800274 	movhi	r2,9
   85a30:	10a2f804 	addi	r2,r2,-29728
   85a34:	80800b15 	stw	r2,44(r16)

  if (fp->_flags & __SAPP)
   85a38:	8080030b 	ldhu	r2,12(r16)
   85a3c:	10bfffcc 	andi	r2,r2,65535
   85a40:	1080400c 	andi	r2,r2,256
   85a44:	10000526 	beq	r2,zero,85a5c <_fopen_r+0x100>
    _fseek_r (ptr, fp, 0, SEEK_END);
   85a48:	01c00084 	movi	r7,2
   85a4c:	000d883a 	mov	r6,zero
   85a50:	800b883a 	mov	r5,r16
   85a54:	e13ffb17 	ldw	r4,-20(fp)
   85a58:	00864340 	call	86434 <_fseek_r>
  if (__stextmode (fp->_file))
    fp->_flags |= __SCLE;
#endif

  _newlib_flockfile_end (fp);
  return fp;
   85a5c:	8005883a 	mov	r2,r16
}
   85a60:	e6fffe04 	addi	sp,fp,-8
   85a64:	dfc00317 	ldw	ra,12(sp)
   85a68:	df000217 	ldw	fp,8(sp)
   85a6c:	dc400117 	ldw	r17,4(sp)
   85a70:	dc000017 	ldw	r16,0(sp)
   85a74:	dec00404 	addi	sp,sp,16
   85a78:	f800283a 	ret

00085a7c <fopen>:

FILE *
_DEFUN(fopen, (file, mode),
       _CONST char *file _AND
       _CONST char *mode)
{
   85a7c:	defffc04 	addi	sp,sp,-16
   85a80:	dfc00315 	stw	ra,12(sp)
   85a84:	df000215 	stw	fp,8(sp)
   85a88:	df000204 	addi	fp,sp,8
   85a8c:	e13ffe15 	stw	r4,-8(fp)
   85a90:	e17fff15 	stw	r5,-4(fp)
  return _fopen_r (_REENT, file, mode);
   85a94:	d0a00417 	ldw	r2,-32752(gp)
   85a98:	e1bfff17 	ldw	r6,-4(fp)
   85a9c:	e17ffe17 	ldw	r5,-8(fp)
   85aa0:	1009883a 	mov	r4,r2
   85aa4:	008595c0 	call	8595c <_fopen_r>
}
   85aa8:	e037883a 	mov	sp,fp
   85aac:	dfc00117 	ldw	ra,4(sp)
   85ab0:	df000017 	ldw	fp,0(sp)
   85ab4:	dec00204 	addi	sp,sp,8
   85ab8:	f800283a 	ret

00085abc <_fprintf_r>:
int
_DEFUN(_fprintf_r, (ptr, fp, fmt),
       struct _reent *ptr _AND
       FILE *__restrict fp _AND
       const char *__restrict fmt _DOTS)
{
   85abc:	defff804 	addi	sp,sp,-32
   85ac0:	dfc00615 	stw	ra,24(sp)
   85ac4:	df000515 	stw	fp,20(sp)
   85ac8:	df000504 	addi	fp,sp,20
   85acc:	e13ffd15 	stw	r4,-12(fp)
   85ad0:	e17ffe15 	stw	r5,-8(fp)
   85ad4:	e1bfff15 	stw	r6,-4(fp)
   85ad8:	e1c00215 	stw	r7,8(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
   85adc:	e0800204 	addi	r2,fp,8
   85ae0:	e0bffc15 	stw	r2,-16(fp)
  _FILE_INIT_DEV_WRITE (fp);							/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr,         fp, fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (             fp, fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr,         fp, fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, (FILE *)fp, fmt, ap); */	/* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (             fp, fmt, ap);		/* try2 */	/* AlteraSpecific */
   85ae4:	e0bffc17 	ldw	r2,-16(fp)
   85ae8:	100d883a 	mov	r6,r2
   85aec:	e17fff17 	ldw	r5,-4(fp)
   85af0:	e13ffe17 	ldw	r4,-8(fp)
   85af4:	0088e180 	call	88e18 <__vfprintf_internal>
   85af8:	e0bffb15 	stw	r2,-20(fp)
  va_end (ap);
  return ret;
   85afc:	e0bffb17 	ldw	r2,-20(fp)
}
   85b00:	e037883a 	mov	sp,fp
   85b04:	dfc00117 	ldw	ra,4(sp)
   85b08:	df000017 	ldw	fp,0(sp)
   85b0c:	dec00304 	addi	sp,sp,12
   85b10:	f800283a 	ret

00085b14 <fprintf>:

int
_DEFUN(fprintf, (fp, fmt),
       FILE *__restrict fp _AND
       const char *__restrict fmt _DOTS)
{
   85b14:	defff804 	addi	sp,sp,-32
   85b18:	dfc00515 	stw	ra,20(sp)
   85b1c:	df000415 	stw	fp,16(sp)
   85b20:	df000404 	addi	fp,sp,16
   85b24:	e13ffe15 	stw	r4,-8(fp)
   85b28:	e17fff15 	stw	r5,-4(fp)
   85b2c:	e1800215 	stw	r6,8(fp)
   85b30:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
   85b34:	e0800204 	addi	r2,fp,8
   85b38:	e0bffd15 	stw	r2,-12(fp)
  _FILE_INIT_DEV_WRITE (fp);							/* AlteraSpecific NB: Cloned in fiprintf.c */
/*ret =  _vfprintf_r        (_REENT,         fp, fmt, ap);	*/ /*1.16.0*/ 	/* AlteraSpecific */
/*ret = __vfprintf_internal (                fp, fmt, ap);	*/ /*1.16  */ 	/* AlteraSpecific */
/*ret =  _vfprintf_r        (_REENT,         fp, fmt, ap);	*/ /*1.18.0*/ 	/* AlteraSpecific */
/*ret =  _vfprintf_r        (_REENT, (FILE *)fp, fmt, ap);	*/ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (                fp, fmt, ap);	   /* try2 */	/* AlteraSpecific */
   85b3c:	e0bffd17 	ldw	r2,-12(fp)
   85b40:	100d883a 	mov	r6,r2
   85b44:	e17fff17 	ldw	r5,-4(fp)
   85b48:	e13ffe17 	ldw	r4,-8(fp)
   85b4c:	0088e180 	call	88e18 <__vfprintf_internal>
   85b50:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
   85b54:	e0bffc17 	ldw	r2,-16(fp)
}
   85b58:	e037883a 	mov	sp,fp
   85b5c:	dfc00117 	ldw	ra,4(sp)
   85b60:	df000017 	ldw	fp,0(sp)
   85b64:	dec00404 	addi	sp,sp,16
   85b68:	f800283a 	ret

00085b6c <_fputc_r>:
int
_DEFUN(_fputc_r, (ptr, ch, file),
       struct _reent *ptr _AND
       int ch _AND
       FILE * file)
{
   85b6c:	defff904 	addi	sp,sp,-28
   85b70:	dfc00615 	stw	ra,24(sp)
   85b74:	df000515 	stw	fp,20(sp)
   85b78:	df000504 	addi	fp,sp,20
   85b7c:	e13ffd15 	stw	r4,-12(fp)
   85b80:	e17ffe15 	stw	r5,-8(fp)
   85b84:	e1bfff15 	stw	r6,-4(fp)
  int result;
  CHECK_INIT(ptr, file);
   85b88:	e0bffd17 	ldw	r2,-12(fp)
   85b8c:	e0bffb15 	stw	r2,-20(fp)
   85b90:	e0bffb17 	ldw	r2,-20(fp)
   85b94:	10000526 	beq	r2,zero,85bac <_fputc_r+0x40>
   85b98:	e0bffb17 	ldw	r2,-20(fp)
   85b9c:	10800e17 	ldw	r2,56(r2)
   85ba0:	1000021e 	bne	r2,zero,85bac <_fputc_r+0x40>
   85ba4:	e13ffb17 	ldw	r4,-20(fp)
   85ba8:	008573c0 	call	8573c <__sinit>
   _newlib_flockfile_start (file);
  result = _putc_r (ptr, ch, file);
   85bac:	e1bfff17 	ldw	r6,-4(fp)
   85bb0:	e17ffe17 	ldw	r5,-8(fp)
   85bb4:	e13ffd17 	ldw	r4,-12(fp)
   85bb8:	00882540 	call	88254 <_putc_r>
   85bbc:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (file);
  return result;
   85bc0:	e0bffc17 	ldw	r2,-16(fp)
}
   85bc4:	e037883a 	mov	sp,fp
   85bc8:	dfc00117 	ldw	ra,4(sp)
   85bcc:	df000017 	ldw	fp,0(sp)
   85bd0:	dec00204 	addi	sp,sp,8
   85bd4:	f800283a 	ret

00085bd8 <fputc>:
#ifndef _REENT_ONLY
int
_DEFUN(fputc, (ch, file),
       int ch _AND
       FILE * file)
{
   85bd8:	defff904 	addi	sp,sp,-28
   85bdc:	dfc00615 	stw	ra,24(sp)
   85be0:	df000515 	stw	fp,20(sp)
   85be4:	df000504 	addi	fp,sp,20
   85be8:	e13ffe15 	stw	r4,-8(fp)
   85bec:	e17fff15 	stw	r5,-4(fp)
#if !defined(__OPTIMIZE_SIZE__) && !defined(PREFER_SIZE_OVER_SPEED)
  int result;
  struct _reent *reent = _REENT;
   85bf0:	d0a00417 	ldw	r2,-32752(gp)
   85bf4:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT(reent, file);
   85bf8:	e0bffb17 	ldw	r2,-20(fp)
   85bfc:	e0bffc15 	stw	r2,-16(fp)
   85c00:	e0bffc17 	ldw	r2,-16(fp)
   85c04:	10000526 	beq	r2,zero,85c1c <fputc+0x44>
   85c08:	e0bffc17 	ldw	r2,-16(fp)
   85c0c:	10800e17 	ldw	r2,56(r2)
   85c10:	1000021e 	bne	r2,zero,85c1c <fputc+0x44>
   85c14:	e13ffc17 	ldw	r4,-16(fp)
   85c18:	008573c0 	call	8573c <__sinit>
   _newlib_flockfile_start (file);
  result = _putc_r (reent, ch, file);
   85c1c:	e1bfff17 	ldw	r6,-4(fp)
   85c20:	e17ffe17 	ldw	r5,-8(fp)
   85c24:	e13ffb17 	ldw	r4,-20(fp)
   85c28:	00882540 	call	88254 <_putc_r>
   85c2c:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (file);
  return result;
   85c30:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _fputc_r (_REENT, ch, file);
#endif
}
   85c34:	e037883a 	mov	sp,fp
   85c38:	dfc00117 	ldw	ra,4(sp)
   85c3c:	df000017 	ldw	fp,0(sp)
   85c40:	dec00204 	addi	sp,sp,8
   85c44:	f800283a 	ret

00085c48 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
   85c48:	defff204 	addi	sp,sp,-56
   85c4c:	dfc00d15 	stw	ra,52(sp)
   85c50:	df000c15 	stw	fp,48(sp)
   85c54:	df000c04 	addi	fp,sp,48
   85c58:	e13ffe15 	stw	r4,-8(fp)
   85c5c:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
   85c60:	e0bfff17 	ldw	r2,-4(fp)
   85c64:	10014a26 	beq	r2,zero,86190 <_free_r+0x548>
    return;

  MALLOC_LOCK;
   85c68:	e13ffe17 	ldw	r4,-8(fp)
   85c6c:	009e4e80 	call	9e4e8 <__malloc_lock>

  p = mem2chunk(mem);
   85c70:	e0bfff17 	ldw	r2,-4(fp)
   85c74:	10bffe04 	addi	r2,r2,-8
   85c78:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
   85c7c:	e0bff417 	ldw	r2,-48(fp)
   85c80:	10800117 	ldw	r2,4(r2)
   85c84:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
   85c88:	e0fff917 	ldw	r3,-28(fp)
   85c8c:	00bfff84 	movi	r2,-2
   85c90:	1884703a 	and	r2,r3,r2
   85c94:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
   85c98:	e0fff417 	ldw	r3,-48(fp)
   85c9c:	e0bff517 	ldw	r2,-44(fp)
   85ca0:	1885883a 	add	r2,r3,r2
   85ca4:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
   85ca8:	e0bffa17 	ldw	r2,-24(fp)
   85cac:	10c00117 	ldw	r3,4(r2)
   85cb0:	00bfff04 	movi	r2,-4
   85cb4:	1884703a 	and	r2,r3,r2
   85cb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
   85cbc:	008002b4 	movhi	r2,10
   85cc0:	10868604 	addi	r2,r2,6680
   85cc4:	10c00217 	ldw	r3,8(r2)
   85cc8:	e0bffa17 	ldw	r2,-24(fp)
   85ccc:	1880311e 	bne	r3,r2,85d94 <_free_r+0x14c>
  {
    sz += nextsz;
   85cd0:	e0fff517 	ldw	r3,-44(fp)
   85cd4:	e0bffb17 	ldw	r2,-20(fp)
   85cd8:	1885883a 	add	r2,r3,r2
   85cdc:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   85ce0:	e0bff917 	ldw	r2,-28(fp)
   85ce4:	1080004c 	andi	r2,r2,1
   85ce8:	1000181e 	bne	r2,zero,85d4c <_free_r+0x104>
    {
      prevsz = p->prev_size;
   85cec:	e0bff417 	ldw	r2,-48(fp)
   85cf0:	10800017 	ldw	r2,0(r2)
   85cf4:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
   85cf8:	e0bffc17 	ldw	r2,-16(fp)
   85cfc:	0085c83a 	sub	r2,zero,r2
   85d00:	e0fff417 	ldw	r3,-48(fp)
   85d04:	1885883a 	add	r2,r3,r2
   85d08:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
   85d0c:	e0fff517 	ldw	r3,-44(fp)
   85d10:	e0bffc17 	ldw	r2,-16(fp)
   85d14:	1885883a 	add	r2,r3,r2
   85d18:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
   85d1c:	e0bff417 	ldw	r2,-48(fp)
   85d20:	10800317 	ldw	r2,12(r2)
   85d24:	e0bff615 	stw	r2,-40(fp)
   85d28:	e0bff417 	ldw	r2,-48(fp)
   85d2c:	10800217 	ldw	r2,8(r2)
   85d30:	e0bff715 	stw	r2,-36(fp)
   85d34:	e0bff717 	ldw	r2,-36(fp)
   85d38:	e0fff617 	ldw	r3,-40(fp)
   85d3c:	10c00315 	stw	r3,12(r2)
   85d40:	e0bff617 	ldw	r2,-40(fp)
   85d44:	e0fff717 	ldw	r3,-36(fp)
   85d48:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
   85d4c:	e0bff517 	ldw	r2,-44(fp)
   85d50:	10c00054 	ori	r3,r2,1
   85d54:	e0bff417 	ldw	r2,-48(fp)
   85d58:	10c00115 	stw	r3,4(r2)
    top = p;
   85d5c:	008002b4 	movhi	r2,10
   85d60:	10868604 	addi	r2,r2,6680
   85d64:	e0fff417 	ldw	r3,-48(fp)
   85d68:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   85d6c:	d0a00617 	ldw	r2,-32744(gp)
   85d70:	e0fff517 	ldw	r3,-44(fp)
   85d74:	18800436 	bltu	r3,r2,85d88 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
   85d78:	d0a71017 	ldw	r2,-25536(gp)
   85d7c:	100b883a 	mov	r5,r2
   85d80:	e13ffe17 	ldw	r4,-8(fp)
   85d84:	00861a80 	call	861a8 <_malloc_trim_r>
    MALLOC_UNLOCK;
   85d88:	e13ffe17 	ldw	r4,-8(fp)
   85d8c:	009e50c0 	call	9e50c <__malloc_unlock>
    return;
   85d90:	00010006 	br	86194 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
   85d94:	e0bffa17 	ldw	r2,-24(fp)
   85d98:	e0fffb17 	ldw	r3,-20(fp)
   85d9c:	10c00115 	stw	r3,4(r2)

  islr = 0;
   85da0:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
   85da4:	e0bff917 	ldw	r2,-28(fp)
   85da8:	1080004c 	andi	r2,r2,1
   85dac:	1000201e 	bne	r2,zero,85e30 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
   85db0:	e0bff417 	ldw	r2,-48(fp)
   85db4:	10800017 	ldw	r2,0(r2)
   85db8:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
   85dbc:	e0bffc17 	ldw	r2,-16(fp)
   85dc0:	0085c83a 	sub	r2,zero,r2
   85dc4:	e0fff417 	ldw	r3,-48(fp)
   85dc8:	1885883a 	add	r2,r3,r2
   85dcc:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
   85dd0:	e0fff517 	ldw	r3,-44(fp)
   85dd4:	e0bffc17 	ldw	r2,-16(fp)
   85dd8:	1885883a 	add	r2,r3,r2
   85ddc:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   85de0:	e0bff417 	ldw	r2,-48(fp)
   85de4:	10c00217 	ldw	r3,8(r2)
   85de8:	008002b4 	movhi	r2,10
   85dec:	10868804 	addi	r2,r2,6688
   85df0:	1880031e 	bne	r3,r2,85e00 <_free_r+0x1b8>
      islr = 1;
   85df4:	00800044 	movi	r2,1
   85df8:	e0bff815 	stw	r2,-32(fp)
   85dfc:	00000c06 	br	85e30 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
   85e00:	e0bff417 	ldw	r2,-48(fp)
   85e04:	10800317 	ldw	r2,12(r2)
   85e08:	e0bff615 	stw	r2,-40(fp)
   85e0c:	e0bff417 	ldw	r2,-48(fp)
   85e10:	10800217 	ldw	r2,8(r2)
   85e14:	e0bff715 	stw	r2,-36(fp)
   85e18:	e0bff717 	ldw	r2,-36(fp)
   85e1c:	e0fff617 	ldw	r3,-40(fp)
   85e20:	10c00315 	stw	r3,12(r2)
   85e24:	e0bff617 	ldw	r2,-40(fp)
   85e28:	e0fff717 	ldw	r3,-36(fp)
   85e2c:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   85e30:	e0fffa17 	ldw	r3,-24(fp)
   85e34:	e0bffb17 	ldw	r2,-20(fp)
   85e38:	1885883a 	add	r2,r3,r2
   85e3c:	10800117 	ldw	r2,4(r2)
   85e40:	1080004c 	andi	r2,r2,1
   85e44:	10002a1e 	bne	r2,zero,85ef0 <_free_r+0x2a8>
  {
    sz += nextsz;
   85e48:	e0fff517 	ldw	r3,-44(fp)
   85e4c:	e0bffb17 	ldw	r2,-20(fp)
   85e50:	1885883a 	add	r2,r3,r2
   85e54:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   85e58:	e0bff817 	ldw	r2,-32(fp)
   85e5c:	1000181e 	bne	r2,zero,85ec0 <_free_r+0x278>
   85e60:	e0bffa17 	ldw	r2,-24(fp)
   85e64:	10c00217 	ldw	r3,8(r2)
   85e68:	008002b4 	movhi	r2,10
   85e6c:	10868804 	addi	r2,r2,6688
   85e70:	1880131e 	bne	r3,r2,85ec0 <_free_r+0x278>
    {
      islr = 1;
   85e74:	00800044 	movi	r2,1
   85e78:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
   85e7c:	00c002b4 	movhi	r3,10
   85e80:	18c68804 	addi	r3,r3,6688
   85e84:	008002b4 	movhi	r2,10
   85e88:	10868804 	addi	r2,r2,6688
   85e8c:	e13ff417 	ldw	r4,-48(fp)
   85e90:	11000315 	stw	r4,12(r2)
   85e94:	10800317 	ldw	r2,12(r2)
   85e98:	18800215 	stw	r2,8(r3)
   85e9c:	008002b4 	movhi	r2,10
   85ea0:	10868804 	addi	r2,r2,6688
   85ea4:	e0fff417 	ldw	r3,-48(fp)
   85ea8:	18800315 	stw	r2,12(r3)
   85eac:	e0bff417 	ldw	r2,-48(fp)
   85eb0:	10c00317 	ldw	r3,12(r2)
   85eb4:	e0bff417 	ldw	r2,-48(fp)
   85eb8:	10c00215 	stw	r3,8(r2)
   85ebc:	00000c06 	br	85ef0 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
   85ec0:	e0bffa17 	ldw	r2,-24(fp)
   85ec4:	10800317 	ldw	r2,12(r2)
   85ec8:	e0bff615 	stw	r2,-40(fp)
   85ecc:	e0bffa17 	ldw	r2,-24(fp)
   85ed0:	10800217 	ldw	r2,8(r2)
   85ed4:	e0bff715 	stw	r2,-36(fp)
   85ed8:	e0bff717 	ldw	r2,-36(fp)
   85edc:	e0fff617 	ldw	r3,-40(fp)
   85ee0:	10c00315 	stw	r3,12(r2)
   85ee4:	e0bff617 	ldw	r2,-40(fp)
   85ee8:	e0fff717 	ldw	r3,-36(fp)
   85eec:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
   85ef0:	e0bff517 	ldw	r2,-44(fp)
   85ef4:	10c00054 	ori	r3,r2,1
   85ef8:	e0bff417 	ldw	r2,-48(fp)
   85efc:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
   85f00:	e0fff417 	ldw	r3,-48(fp)
   85f04:	e0bff517 	ldw	r2,-44(fp)
   85f08:	1885883a 	add	r2,r3,r2
   85f0c:	e0fff517 	ldw	r3,-44(fp)
   85f10:	10c00015 	stw	r3,0(r2)
  if (!islr)
   85f14:	e0bff817 	ldw	r2,-32(fp)
   85f18:	10009a1e 	bne	r2,zero,86184 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
   85f1c:	e0bff517 	ldw	r2,-44(fp)
   85f20:	10808028 	cmpgeui	r2,r2,512
   85f24:	10002c1e 	bne	r2,zero,85fd8 <_free_r+0x390>
   85f28:	e0bff517 	ldw	r2,-44(fp)
   85f2c:	1004d0fa 	srli	r2,r2,3
   85f30:	e0bffd15 	stw	r2,-12(fp)
   85f34:	00c002b4 	movhi	r3,10
   85f38:	18c68604 	addi	r3,r3,6680
   85f3c:	008002b4 	movhi	r2,10
   85f40:	10868604 	addi	r2,r2,6680
   85f44:	11000117 	ldw	r4,4(r2)
   85f48:	e0bffd17 	ldw	r2,-12(fp)
   85f4c:	1000010e 	bge	r2,zero,85f54 <_free_r+0x30c>
   85f50:	108000c4 	addi	r2,r2,3
   85f54:	1005d0ba 	srai	r2,r2,2
   85f58:	100b883a 	mov	r5,r2
   85f5c:	00800044 	movi	r2,1
   85f60:	1144983a 	sll	r2,r2,r5
   85f64:	2084b03a 	or	r2,r4,r2
   85f68:	18800115 	stw	r2,4(r3)
   85f6c:	e0bffd17 	ldw	r2,-12(fp)
   85f70:	10800044 	addi	r2,r2,1
   85f74:	1085883a 	add	r2,r2,r2
   85f78:	1085883a 	add	r2,r2,r2
   85f7c:	1087883a 	add	r3,r2,r2
   85f80:	008002b4 	movhi	r2,10
   85f84:	10868604 	addi	r2,r2,6680
   85f88:	1885883a 	add	r2,r3,r2
   85f8c:	10bffe04 	addi	r2,r2,-8
   85f90:	e0bff615 	stw	r2,-40(fp)
   85f94:	e0bff617 	ldw	r2,-40(fp)
   85f98:	10800217 	ldw	r2,8(r2)
   85f9c:	e0bff715 	stw	r2,-36(fp)
   85fa0:	e0bff417 	ldw	r2,-48(fp)
   85fa4:	e0fff617 	ldw	r3,-40(fp)
   85fa8:	10c00315 	stw	r3,12(r2)
   85fac:	e0bff417 	ldw	r2,-48(fp)
   85fb0:	e0fff717 	ldw	r3,-36(fp)
   85fb4:	10c00215 	stw	r3,8(r2)
   85fb8:	e0bff617 	ldw	r2,-40(fp)
   85fbc:	e0fff417 	ldw	r3,-48(fp)
   85fc0:	10c00215 	stw	r3,8(r2)
   85fc4:	e0bff617 	ldw	r2,-40(fp)
   85fc8:	10c00217 	ldw	r3,8(r2)
   85fcc:	e0bff717 	ldw	r2,-36(fp)
   85fd0:	10c00315 	stw	r3,12(r2)
   85fd4:	00006b06 	br	86184 <_free_r+0x53c>
   85fd8:	e0bff517 	ldw	r2,-44(fp)
   85fdc:	1004d27a 	srli	r2,r2,9
   85fe0:	1000031e 	bne	r2,zero,85ff0 <_free_r+0x3a8>
   85fe4:	e0bff517 	ldw	r2,-44(fp)
   85fe8:	1004d0fa 	srli	r2,r2,3
   85fec:	00002906 	br	86094 <_free_r+0x44c>
   85ff0:	e0bff517 	ldw	r2,-44(fp)
   85ff4:	1004d27a 	srli	r2,r2,9
   85ff8:	10800168 	cmpgeui	r2,r2,5
   85ffc:	1000041e 	bne	r2,zero,86010 <_free_r+0x3c8>
   86000:	e0bff517 	ldw	r2,-44(fp)
   86004:	1004d1ba 	srli	r2,r2,6
   86008:	10800e04 	addi	r2,r2,56
   8600c:	00002106 	br	86094 <_free_r+0x44c>
   86010:	e0bff517 	ldw	r2,-44(fp)
   86014:	1004d27a 	srli	r2,r2,9
   86018:	10800568 	cmpgeui	r2,r2,21
   8601c:	1000041e 	bne	r2,zero,86030 <_free_r+0x3e8>
   86020:	e0bff517 	ldw	r2,-44(fp)
   86024:	1004d27a 	srli	r2,r2,9
   86028:	108016c4 	addi	r2,r2,91
   8602c:	00001906 	br	86094 <_free_r+0x44c>
   86030:	e0bff517 	ldw	r2,-44(fp)
   86034:	1004d27a 	srli	r2,r2,9
   86038:	10801568 	cmpgeui	r2,r2,85
   8603c:	1000041e 	bne	r2,zero,86050 <_free_r+0x408>
   86040:	e0bff517 	ldw	r2,-44(fp)
   86044:	1004d33a 	srli	r2,r2,12
   86048:	10801b84 	addi	r2,r2,110
   8604c:	00001106 	br	86094 <_free_r+0x44c>
   86050:	e0bff517 	ldw	r2,-44(fp)
   86054:	1004d27a 	srli	r2,r2,9
   86058:	10805568 	cmpgeui	r2,r2,341
   8605c:	1000041e 	bne	r2,zero,86070 <_free_r+0x428>
   86060:	e0bff517 	ldw	r2,-44(fp)
   86064:	1004d3fa 	srli	r2,r2,15
   86068:	10801dc4 	addi	r2,r2,119
   8606c:	00000906 	br	86094 <_free_r+0x44c>
   86070:	e0bff517 	ldw	r2,-44(fp)
   86074:	1004d27a 	srli	r2,r2,9
   86078:	10815568 	cmpgeui	r2,r2,1365
   8607c:	1000041e 	bne	r2,zero,86090 <_free_r+0x448>
   86080:	e0bff517 	ldw	r2,-44(fp)
   86084:	1004d4ba 	srli	r2,r2,18
   86088:	10801f04 	addi	r2,r2,124
   8608c:	00000106 	br	86094 <_free_r+0x44c>
   86090:	00801f84 	movi	r2,126
   86094:	e0bffd15 	stw	r2,-12(fp)
   86098:	e0bffd17 	ldw	r2,-12(fp)
   8609c:	10800044 	addi	r2,r2,1
   860a0:	1085883a 	add	r2,r2,r2
   860a4:	1085883a 	add	r2,r2,r2
   860a8:	1087883a 	add	r3,r2,r2
   860ac:	008002b4 	movhi	r2,10
   860b0:	10868604 	addi	r2,r2,6680
   860b4:	1885883a 	add	r2,r3,r2
   860b8:	10bffe04 	addi	r2,r2,-8
   860bc:	e0bff615 	stw	r2,-40(fp)
   860c0:	e0bff617 	ldw	r2,-40(fp)
   860c4:	10800217 	ldw	r2,8(r2)
   860c8:	e0bff715 	stw	r2,-36(fp)
   860cc:	e0fff717 	ldw	r3,-36(fp)
   860d0:	e0bff617 	ldw	r2,-40(fp)
   860d4:	1880121e 	bne	r3,r2,86120 <_free_r+0x4d8>
   860d8:	00c002b4 	movhi	r3,10
   860dc:	18c68604 	addi	r3,r3,6680
   860e0:	008002b4 	movhi	r2,10
   860e4:	10868604 	addi	r2,r2,6680
   860e8:	11000117 	ldw	r4,4(r2)
   860ec:	e0bffd17 	ldw	r2,-12(fp)
   860f0:	1000010e 	bge	r2,zero,860f8 <_free_r+0x4b0>
   860f4:	108000c4 	addi	r2,r2,3
   860f8:	1005d0ba 	srai	r2,r2,2
   860fc:	100b883a 	mov	r5,r2
   86100:	00800044 	movi	r2,1
   86104:	1144983a 	sll	r2,r2,r5
   86108:	2084b03a 	or	r2,r4,r2
   8610c:	18800115 	stw	r2,4(r3)
   86110:	00000f06 	br	86150 <_free_r+0x508>
   86114:	e0bff717 	ldw	r2,-36(fp)
   86118:	10800217 	ldw	r2,8(r2)
   8611c:	e0bff715 	stw	r2,-36(fp)
   86120:	e0fff717 	ldw	r3,-36(fp)
   86124:	e0bff617 	ldw	r2,-40(fp)
   86128:	18800626 	beq	r3,r2,86144 <_free_r+0x4fc>
   8612c:	e0bff717 	ldw	r2,-36(fp)
   86130:	10c00117 	ldw	r3,4(r2)
   86134:	00bfff04 	movi	r2,-4
   86138:	1884703a 	and	r2,r3,r2
   8613c:	e0fff517 	ldw	r3,-44(fp)
   86140:	18bff436 	bltu	r3,r2,86114 <__alt_data_end+0xfffd4114>
   86144:	e0bff717 	ldw	r2,-36(fp)
   86148:	10800317 	ldw	r2,12(r2)
   8614c:	e0bff615 	stw	r2,-40(fp)
   86150:	e0bff417 	ldw	r2,-48(fp)
   86154:	e0fff617 	ldw	r3,-40(fp)
   86158:	10c00315 	stw	r3,12(r2)
   8615c:	e0bff417 	ldw	r2,-48(fp)
   86160:	e0fff717 	ldw	r3,-36(fp)
   86164:	10c00215 	stw	r3,8(r2)
   86168:	e0bff617 	ldw	r2,-40(fp)
   8616c:	e0fff417 	ldw	r3,-48(fp)
   86170:	10c00215 	stw	r3,8(r2)
   86174:	e0bff617 	ldw	r2,-40(fp)
   86178:	10c00217 	ldw	r3,8(r2)
   8617c:	e0bff717 	ldw	r2,-36(fp)
   86180:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
   86184:	e13ffe17 	ldw	r4,-8(fp)
   86188:	009e50c0 	call	9e50c <__malloc_unlock>
   8618c:	00000106 	br	86194 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
   86190:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
   86194:	e037883a 	mov	sp,fp
   86198:	dfc00117 	ldw	ra,4(sp)
   8619c:	df000017 	ldw	fp,0(sp)
   861a0:	dec00204 	addi	sp,sp,8
   861a4:	f800283a 	ret

000861a8 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   861a8:	defff704 	addi	sp,sp,-36
   861ac:	dfc00815 	stw	ra,32(sp)
   861b0:	df000715 	stw	fp,28(sp)
   861b4:	df000704 	addi	fp,sp,28
   861b8:	e13ffe15 	stw	r4,-8(fp)
   861bc:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
   861c0:	00840004 	movi	r2,4096
   861c4:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
   861c8:	e13ffe17 	ldw	r4,-8(fp)
   861cc:	009e4e80 	call	9e4e8 <__malloc_lock>

  top_size = chunksize(top);
   861d0:	008002b4 	movhi	r2,10
   861d4:	10868604 	addi	r2,r2,6680
   861d8:	10800217 	ldw	r2,8(r2)
   861dc:	10800117 	ldw	r2,4(r2)
   861e0:	1007883a 	mov	r3,r2
   861e4:	00bfff04 	movi	r2,-4
   861e8:	1884703a 	and	r2,r3,r2
   861ec:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   861f0:	e0fffa17 	ldw	r3,-24(fp)
   861f4:	e0bfff17 	ldw	r2,-4(fp)
   861f8:	1887c83a 	sub	r3,r3,r2
   861fc:	e0bff917 	ldw	r2,-28(fp)
   86200:	1885883a 	add	r2,r3,r2
   86204:	10bffbc4 	addi	r2,r2,-17
   86208:	e17ff917 	ldw	r5,-28(fp)
   8620c:	1009883a 	mov	r4,r2
   86210:	00822e40 	call	822e4 <__udivsi3>
   86214:	10bfffc4 	addi	r2,r2,-1
   86218:	e17ff917 	ldw	r5,-28(fp)
   8621c:	1009883a 	mov	r4,r2
   86220:	00823a00 	call	823a0 <__mulsi3>
   86224:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
   86228:	e0bff917 	ldw	r2,-28(fp)
   8622c:	e0fffb17 	ldw	r3,-20(fp)
   86230:	1880040e 	bge	r3,r2,86244 <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
   86234:	e13ffe17 	ldw	r4,-8(fp)
   86238:	009e50c0 	call	9e50c <__malloc_unlock>
    return 0;
   8623c:	0005883a 	mov	r2,zero
   86240:	00004806 	br	86364 <_malloc_trim_r+0x1bc>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
   86244:	000b883a 	mov	r5,zero
   86248:	e13ffe17 	ldw	r4,-8(fp)
   8624c:	00889600 	call	88960 <_sbrk_r>
   86250:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
   86254:	008002b4 	movhi	r2,10
   86258:	10868604 	addi	r2,r2,6680
   8625c:	10c00217 	ldw	r3,8(r2)
   86260:	e0bffa17 	ldw	r2,-24(fp)
   86264:	1887883a 	add	r3,r3,r2
   86268:	e0bffc17 	ldw	r2,-16(fp)
   8626c:	18800426 	beq	r3,r2,86280 <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
   86270:	e13ffe17 	ldw	r4,-8(fp)
   86274:	009e50c0 	call	9e50c <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
   86278:	0005883a 	mov	r2,zero
   8627c:	00003906 	br	86364 <_malloc_trim_r+0x1bc>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
   86280:	e0bffb17 	ldw	r2,-20(fp)
   86284:	0085c83a 	sub	r2,zero,r2
   86288:	100b883a 	mov	r5,r2
   8628c:	e13ffe17 	ldw	r4,-8(fp)
   86290:	00889600 	call	88960 <_sbrk_r>
   86294:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
   86298:	e0bffd17 	ldw	r2,-12(fp)
   8629c:	10bfffd8 	cmpnei	r2,r2,-1
   862a0:	10001d1e 	bne	r2,zero,86318 <_malloc_trim_r+0x170>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
   862a4:	000b883a 	mov	r5,zero
   862a8:	e13ffe17 	ldw	r4,-8(fp)
   862ac:	00889600 	call	88960 <_sbrk_r>
   862b0:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
   862b4:	e0fffc17 	ldw	r3,-16(fp)
   862b8:	008002b4 	movhi	r2,10
   862bc:	10868604 	addi	r2,r2,6680
   862c0:	10800217 	ldw	r2,8(r2)
   862c4:	1885c83a 	sub	r2,r3,r2
   862c8:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   862cc:	e0bffa17 	ldw	r2,-24(fp)
   862d0:	10800410 	cmplti	r2,r2,16
   862d4:	10000c1e 	bne	r2,zero,86308 <_malloc_trim_r+0x160>
        {
          sbrked_mem = current_brk - sbrk_base;
   862d8:	e0bffc17 	ldw	r2,-16(fp)
   862dc:	d0e00717 	ldw	r3,-32740(gp)
   862e0:	10c7c83a 	sub	r3,r2,r3
   862e4:	008002b4 	movhi	r2,10
   862e8:	10935104 	addi	r2,r2,19780
   862ec:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
   862f0:	008002b4 	movhi	r2,10
   862f4:	10868604 	addi	r2,r2,6680
   862f8:	10800217 	ldw	r2,8(r2)
   862fc:	e0fffa17 	ldw	r3,-24(fp)
   86300:	18c00054 	ori	r3,r3,1
   86304:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
   86308:	e13ffe17 	ldw	r4,-8(fp)
   8630c:	009e50c0 	call	9e50c <__malloc_unlock>
        return 0; 
   86310:	0005883a 	mov	r2,zero
   86314:	00001306 	br	86364 <_malloc_trim_r+0x1bc>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   86318:	008002b4 	movhi	r2,10
   8631c:	10868604 	addi	r2,r2,6680
   86320:	10800217 	ldw	r2,8(r2)
   86324:	e13ffa17 	ldw	r4,-24(fp)
   86328:	e0fffb17 	ldw	r3,-20(fp)
   8632c:	20c7c83a 	sub	r3,r4,r3
   86330:	18c00054 	ori	r3,r3,1
   86334:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
   86338:	008002b4 	movhi	r2,10
   8633c:	10935104 	addi	r2,r2,19780
   86340:	10c00017 	ldw	r3,0(r2)
   86344:	e0bffb17 	ldw	r2,-20(fp)
   86348:	1887c83a 	sub	r3,r3,r2
   8634c:	008002b4 	movhi	r2,10
   86350:	10935104 	addi	r2,r2,19780
   86354:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
   86358:	e13ffe17 	ldw	r4,-8(fp)
   8635c:	009e50c0 	call	9e50c <__malloc_unlock>
        return 1;
   86360:	00800044 	movi	r2,1
      }
    }
  }
}
   86364:	e037883a 	mov	sp,fp
   86368:	dfc00117 	ldw	ra,4(sp)
   8636c:	df000017 	ldw	fp,0(sp)
   86370:	dec00204 	addi	sp,sp,8
   86374:	f800283a 	ret

00086378 <fscanf>:
fscanf(FILE *fp, fmt, va_alist)
       FILE *fp;
       char *fmt;
       va_dcl
#endif
{
   86378:	defff804 	addi	sp,sp,-32
   8637c:	dfc00515 	stw	ra,20(sp)
   86380:	df000415 	stw	fp,16(sp)
   86384:	df000404 	addi	fp,sp,16
   86388:	e13ffe15 	stw	r4,-8(fp)
   8638c:	e17fff15 	stw	r5,-4(fp)
   86390:	e1800215 	stw	r6,8(fp)
   86394:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

#ifdef _HAVE_STDC
  va_start (ap, fmt);
   86398:	e0800204 	addi	r2,fp,8
   8639c:	e0bffd15 	stw	r2,-12(fp)
#else
  va_start (ap);
#endif
  ret = _vfscanf_r (_REENT, fp, fmt, ap);
   863a0:	d0a00417 	ldw	r2,-32752(gp)
   863a4:	e0fffd17 	ldw	r3,-12(fp)
   863a8:	180f883a 	mov	r7,r3
   863ac:	e1bfff17 	ldw	r6,-4(fp)
   863b0:	e17ffe17 	ldw	r5,-8(fp)
   863b4:	1009883a 	mov	r4,r2
   863b8:	008b35c0 	call	8b35c <_vfscanf_r>
   863bc:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
   863c0:	e0bffc17 	ldw	r2,-16(fp)
}
   863c4:	e037883a 	mov	sp,fp
   863c8:	dfc00117 	ldw	ra,4(sp)
   863cc:	df000017 	ldw	fp,0(sp)
   863d0:	dec00404 	addi	sp,sp,16
   863d4:	f800283a 	ret

000863d8 <_fscanf_r>:
          struct _reent *ptr;
          FILE *fp;
          char *fmt;
          va_dcl
#endif
{
   863d8:	defff804 	addi	sp,sp,-32
   863dc:	dfc00615 	stw	ra,24(sp)
   863e0:	df000515 	stw	fp,20(sp)
   863e4:	df000504 	addi	fp,sp,20
   863e8:	e13ffd15 	stw	r4,-12(fp)
   863ec:	e17ffe15 	stw	r5,-8(fp)
   863f0:	e1bfff15 	stw	r6,-4(fp)
   863f4:	e1c00215 	stw	r7,8(fp)
  int ret;
  va_list ap;

#ifdef _HAVE_STDC
  va_start (ap, fmt);
   863f8:	e0800204 	addi	r2,fp,8
   863fc:	e0bffc15 	stw	r2,-16(fp)
#else
  va_start (ap);
#endif
  ret = _vfscanf_r (ptr, fp, fmt, ap);
   86400:	e0bffc17 	ldw	r2,-16(fp)
   86404:	100f883a 	mov	r7,r2
   86408:	e1bfff17 	ldw	r6,-4(fp)
   8640c:	e17ffe17 	ldw	r5,-8(fp)
   86410:	e13ffd17 	ldw	r4,-12(fp)
   86414:	008b35c0 	call	8b35c <_vfscanf_r>
   86418:	e0bffb15 	stw	r2,-20(fp)
  va_end (ap);
  return (ret);
   8641c:	e0bffb17 	ldw	r2,-20(fp)
}
   86420:	e037883a 	mov	sp,fp
   86424:	dfc00117 	ldw	ra,4(sp)
   86428:	df000017 	ldw	fp,0(sp)
   8642c:	dec00304 	addi	sp,sp,12
   86430:	f800283a 	ret

00086434 <_fseek_r>:
_DEFUN(_fseek_r, (ptr, fp, offset, whence),
       struct _reent *ptr _AND
       register FILE *fp  _AND
       long offset        _AND
       int whence)
{
   86434:	defffb04 	addi	sp,sp,-20
   86438:	dfc00415 	stw	ra,16(sp)
   8643c:	df000315 	stw	fp,12(sp)
   86440:	df000304 	addi	fp,sp,12
   86444:	e13ffd15 	stw	r4,-12(fp)
   86448:	2805883a 	mov	r2,r5
   8644c:	e1bffe15 	stw	r6,-8(fp)
   86450:	e1ffff15 	stw	r7,-4(fp)
  return _fseeko_r (ptr, fp, offset, whence);
   86454:	e1ffff17 	ldw	r7,-4(fp)
   86458:	e1bffe17 	ldw	r6,-8(fp)
   8645c:	100b883a 	mov	r5,r2
   86460:	e13ffd17 	ldw	r4,-12(fp)
   86464:	00864c40 	call	864c4 <_fseeko_r>
}
   86468:	e037883a 	mov	sp,fp
   8646c:	dfc00117 	ldw	ra,4(sp)
   86470:	df000017 	ldw	fp,0(sp)
   86474:	dec00204 	addi	sp,sp,8
   86478:	f800283a 	ret

0008647c <fseek>:
int
_DEFUN(fseek, (fp, offset, whence),
       register FILE *fp _AND
       long offset       _AND
       int whence)
{
   8647c:	defffc04 	addi	sp,sp,-16
   86480:	dfc00315 	stw	ra,12(sp)
   86484:	df000215 	stw	fp,8(sp)
   86488:	df000204 	addi	fp,sp,8
   8648c:	2007883a 	mov	r3,r4
   86490:	e17ffe15 	stw	r5,-8(fp)
   86494:	e1bfff15 	stw	r6,-4(fp)
  return _fseek_r (_REENT, fp, offset, whence);
   86498:	d0a00417 	ldw	r2,-32752(gp)
   8649c:	e1ffff17 	ldw	r7,-4(fp)
   864a0:	e1bffe17 	ldw	r6,-8(fp)
   864a4:	180b883a 	mov	r5,r3
   864a8:	1009883a 	mov	r4,r2
   864ac:	00864340 	call	86434 <_fseek_r>
}
   864b0:	e037883a 	mov	sp,fp
   864b4:	dfc00117 	ldw	ra,4(sp)
   864b8:	df000017 	ldw	fp,0(sp)
   864bc:	dec00204 	addi	sp,sp,8
   864c0:	f800283a 	ret

000864c4 <_fseeko_r>:
_DEFUN(_fseeko_r, (ptr, fp, offset, whence),
       struct _reent *ptr _AND
       register FILE *fp  _AND
       _off_t offset      _AND
       int whence)
{
   864c4:	deffe404 	addi	sp,sp,-112
   864c8:	dfc01b15 	stw	ra,108(sp)
   864cc:	df001a15 	stw	fp,104(sp)
   864d0:	dc401915 	stw	r17,100(sp)
   864d4:	dc001815 	stw	r16,96(sp)
   864d8:	df001a04 	addi	fp,sp,104
   864dc:	e13ffb15 	stw	r4,-20(fp)
   864e0:	2821883a 	mov	r16,r5
   864e4:	e1bffc15 	stw	r6,-16(fp)
   864e8:	e1fffd15 	stw	r7,-12(fp)
  _fpos_t _EXFNPTR(seekfn, (struct _reent *, _PTR, _fpos_t, int));
  _fpos_t target;
  _fpos_t curoff = 0;
   864ec:	e03fe715 	stw	zero,-100(fp)
#endif
  int havepos;

  /* Make sure stdio is set up.  */

  CHECK_INIT (ptr, fp);
   864f0:	e0bffb17 	ldw	r2,-20(fp)
   864f4:	e0bfea15 	stw	r2,-88(fp)
   864f8:	e0bfea17 	ldw	r2,-88(fp)
   864fc:	10000526 	beq	r2,zero,86514 <_fseeko_r+0x50>
   86500:	e0bfea17 	ldw	r2,-88(fp)
   86504:	10800e17 	ldw	r2,56(r2)
   86508:	1000021e 	bne	r2,zero,86514 <_fseeko_r+0x50>
   8650c:	e13fea17 	ldw	r4,-88(fp)
   86510:	008573c0 	call	8573c <__sinit>
  _newlib_flockfile_start (fp);

  /* If we've been doing some writing, and we're in append mode
     then we don't really know where the filepos is.  */

  if (fp->_flags & __SAPP && fp->_flags & __SWR)
   86514:	8080030b 	ldhu	r2,12(r16)
   86518:	10bfffcc 	andi	r2,r2,65535
   8651c:	1080400c 	andi	r2,r2,256
   86520:	10000726 	beq	r2,zero,86540 <_fseeko_r+0x7c>
   86524:	8080030b 	ldhu	r2,12(r16)
   86528:	10bfffcc 	andi	r2,r2,65535
   8652c:	1080020c 	andi	r2,r2,8
   86530:	10000326 	beq	r2,zero,86540 <_fseeko_r+0x7c>
    {
      /* So flush the buffer and seek to the end.  */
      _fflush_r (ptr, fp);
   86534:	800b883a 	mov	r5,r16
   86538:	e13ffb17 	ldw	r4,-20(fp)
   8653c:	00852a40 	call	852a4 <_fflush_r>
    }

  /* Have to be able to seek.  */

  if ((seekfn = fp->_seek) == NULL)
   86540:	80800a17 	ldw	r2,40(r16)
   86544:	e0bfeb15 	stw	r2,-84(fp)
   86548:	e0bfeb17 	ldw	r2,-84(fp)
   8654c:	1000051e 	bne	r2,zero,86564 <_fseeko_r+0xa0>
    {
      ptr->_errno = ESPIPE;	/* ??? */
   86550:	e0bffb17 	ldw	r2,-20(fp)
   86554:	00c00744 	movi	r3,29
   86558:	10c00015 	stw	r3,0(r2)
      _newlib_flockfile_exit (fp);
      return EOF;
   8655c:	00bfffc4 	movi	r2,-1
   86560:	00016006 	br	86ae4 <_fseeko_r+0x620>
  /*
   * Change any SEEK_CUR to SEEK_SET, and check `whence' argument.
   * After this, whence is either SEEK_SET or SEEK_END.
   */

  switch (whence)
   86564:	e0bffd17 	ldw	r2,-12(fp)
   86568:	10c00060 	cmpeqi	r3,r2,1
   8656c:	1800041e 	bne	r3,zero,86580 <_fseeko_r+0xbc>
   86570:	10c000a0 	cmpeqi	r3,r2,2
   86574:	18003d1e 	bne	r3,zero,8666c <_fseeko_r+0x1a8>
   86578:	10003c26 	beq	r2,zero,8666c <_fseeko_r+0x1a8>
   8657c:	00003d06 	br	86674 <_fseeko_r+0x1b0>
      /*
       * In order to seek relative to the current stream offset,
       * we have to first find the current stream offset a la
       * ftell (see ftell for details).
       */
      _fflush_r (ptr, fp);   /* may adjust seek offset on append stream */
   86580:	800b883a 	mov	r5,r16
   86584:	e13ffb17 	ldw	r4,-20(fp)
   86588:	00852a40 	call	852a4 <_fflush_r>
      if (fp->_flags & __SOFF)
   8658c:	8080030b 	ldhu	r2,12(r16)
   86590:	10bfffcc 	andi	r2,r2,65535
   86594:	1084000c 	andi	r2,r2,4096
   86598:	10000326 	beq	r2,zero,865a8 <_fseeko_r+0xe4>
	curoff = fp->_offset;
   8659c:	80801417 	ldw	r2,80(r16)
   865a0:	e0bfe715 	stw	r2,-100(fp)
   865a4:	00000d06 	br	865dc <_fseeko_r+0x118>
      else
	{
	  curoff = seekfn (ptr, fp->_cookie, (_fpos_t) 0, SEEK_CUR);
   865a8:	80c00717 	ldw	r3,28(r16)
   865ac:	e0bfeb17 	ldw	r2,-84(fp)
   865b0:	01c00044 	movi	r7,1
   865b4:	000d883a 	mov	r6,zero
   865b8:	180b883a 	mov	r5,r3
   865bc:	e13ffb17 	ldw	r4,-20(fp)
   865c0:	103ee83a 	callr	r2
   865c4:	e0bfe715 	stw	r2,-100(fp)
	  if (curoff == -1L)
   865c8:	e0bfe717 	ldw	r2,-100(fp)
   865cc:	10bfffd8 	cmpnei	r2,r2,-1
   865d0:	1000021e 	bne	r2,zero,865dc <_fseeko_r+0x118>
	    {
	      _newlib_flockfile_exit (fp);
	      return EOF;
   865d4:	00bfffc4 	movi	r2,-1
   865d8:	00014206 	br	86ae4 <_fseeko_r+0x620>
	    }
	}
      if (fp->_flags & __SRD)
   865dc:	8080030b 	ldhu	r2,12(r16)
   865e0:	10bfffcc 	andi	r2,r2,65535
   865e4:	1080010c 	andi	r2,r2,4
   865e8:	10000b26 	beq	r2,zero,86618 <_fseeko_r+0x154>
	{
	  curoff -= fp->_r;
   865ec:	80800117 	ldw	r2,4(r16)
   865f0:	e0ffe717 	ldw	r3,-100(fp)
   865f4:	1885c83a 	sub	r2,r3,r2
   865f8:	e0bfe715 	stw	r2,-100(fp)
	  if (HASUB (fp))
   865fc:	80800c17 	ldw	r2,48(r16)
   86600:	10001226 	beq	r2,zero,8664c <_fseeko_r+0x188>
	    curoff -= fp->_ur;
   86604:	80800f17 	ldw	r2,60(r16)
   86608:	e0ffe717 	ldw	r3,-100(fp)
   8660c:	1885c83a 	sub	r2,r3,r2
   86610:	e0bfe715 	stw	r2,-100(fp)
   86614:	00000d06 	br	8664c <_fseeko_r+0x188>
	}
      else if (fp->_flags & __SWR && fp->_p != NULL)
   86618:	8080030b 	ldhu	r2,12(r16)
   8661c:	10bfffcc 	andi	r2,r2,65535
   86620:	1080020c 	andi	r2,r2,8
   86624:	10000926 	beq	r2,zero,8664c <_fseeko_r+0x188>
   86628:	80800017 	ldw	r2,0(r16)
   8662c:	10000726 	beq	r2,zero,8664c <_fseeko_r+0x188>
	curoff += fp->_p - fp->_bf._base;
   86630:	80800017 	ldw	r2,0(r16)
   86634:	1007883a 	mov	r3,r2
   86638:	80800417 	ldw	r2,16(r16)
   8663c:	1885c83a 	sub	r2,r3,r2
   86640:	e0ffe717 	ldw	r3,-100(fp)
   86644:	1885883a 	add	r2,r3,r2
   86648:	e0bfe715 	stw	r2,-100(fp)

      offset += curoff;
   8664c:	e0fffc17 	ldw	r3,-16(fp)
   86650:	e0bfe717 	ldw	r2,-100(fp)
   86654:	1885883a 	add	r2,r3,r2
   86658:	e0bffc15 	stw	r2,-16(fp)
      whence = SEEK_SET;
   8665c:	e03ffd15 	stw	zero,-12(fp)
      havepos = 1;
   86660:	00800044 	movi	r2,1
   86664:	e0bfe915 	stw	r2,-92(fp)
      break;
   86668:	00000706 	br	86688 <_fseeko_r+0x1c4>

    case SEEK_SET:
    case SEEK_END:
      havepos = 0;
   8666c:	e03fe915 	stw	zero,-92(fp)
      break;
   86670:	00000506 	br	86688 <_fseeko_r+0x1c4>

    default:
      ptr->_errno = EINVAL;
   86674:	e0bffb17 	ldw	r2,-20(fp)
   86678:	00c00584 	movi	r3,22
   8667c:	10c00015 	stw	r3,0(r2)
      _newlib_flockfile_exit (fp);
      return (EOF);
   86680:	00bfffc4 	movi	r2,-1
   86684:	00011706 	br	86ae4 <_fseeko_r+0x620>
   *	this is a `regular' Unix file (and hence seekfn==__sseek).
   * We must check __NBF first, because it is possible to have __NBF
   * and __SOPT both set.
   */

  if (fp->_bf._base == NULL)
   86688:	80800417 	ldw	r2,16(r16)
   8668c:	1000031e 	bne	r2,zero,8669c <_fseeko_r+0x1d8>
    __smakebuf_r (ptr, fp);
   86690:	800b883a 	mov	r5,r16
   86694:	e13ffb17 	ldw	r4,-20(fp)
   86698:	0086ec40 	call	86ec4 <__smakebuf_r>

#ifdef _FSEEK_OPTIMIZATION
  if (fp->_flags & (__SWR | __SRW | __SNBF | __SNPT))
   8669c:	8080030b 	ldhu	r2,12(r16)
   866a0:	10bfffcc 	andi	r2,r2,65535
   866a4:	1082068c 	andi	r2,r2,2074
   866a8:	1000dd1e 	bne	r2,zero,86a20 <_fseeko_r+0x55c>
    goto dumb;
  if ((fp->_flags & __SOPT) == 0)
   866ac:	8080030b 	ldhu	r2,12(r16)
   866b0:	10bfffcc 	andi	r2,r2,65535
   866b4:	1081000c 	andi	r2,r2,1024
   866b8:	1000201e 	bne	r2,zero,8673c <_fseeko_r+0x278>
    {
      if (seekfn != __sseek
   866bc:	e0ffeb17 	ldw	r3,-84(fp)
   866c0:	00800274 	movhi	r2,9
   866c4:	10a2d004 	addi	r2,r2,-29888
   866c8:	1880131e 	bne	r3,r2,86718 <_fseeko_r+0x254>
	  || fp->_file < 0
   866cc:	8080038b 	ldhu	r2,14(r16)
   866d0:	10bfffcc 	andi	r2,r2,65535
   866d4:	10a0001c 	xori	r2,r2,32768
   866d8:	10a00004 	addi	r2,r2,-32768
   866dc:	10000e16 	blt	r2,zero,86718 <_fseeko_r+0x254>
#ifdef __USE_INTERNAL_STAT64
	  || _fstat64_r (ptr, fp->_file, &st)
#else
	  || _fstat_r (ptr, fp->_file, &st)
   866e0:	8080038b 	ldhu	r2,14(r16)
   866e4:	10bfffcc 	andi	r2,r2,65535
   866e8:	10a0001c 	xori	r2,r2,32768
   866ec:	10a00004 	addi	r2,r2,-32768
   866f0:	e0ffec04 	addi	r3,fp,-80
   866f4:	180d883a 	mov	r6,r3
   866f8:	100b883a 	mov	r5,r2
   866fc:	e13ffb17 	ldw	r4,-20(fp)
   86700:	0086b480 	call	86b48 <_fstat_r>
   86704:	1000041e 	bne	r2,zero,86718 <_fseeko_r+0x254>
#endif
	  || (st.st_mode & S_IFMT) != S_IFREG)
   86708:	e0bfed17 	ldw	r2,-76(fp)
   8670c:	10fc000c 	andi	r3,r2,61440
   86710:	00a00014 	movui	r2,32768
   86714:	18800426 	beq	r3,r2,86728 <_fseeko_r+0x264>
	{
	  fp->_flags |= __SNPT;
   86718:	8080030b 	ldhu	r2,12(r16)
   8671c:	10820014 	ori	r2,r2,2048
   86720:	8080030d 	sth	r2,12(r16)
	  goto dumb;
   86724:	0000c506 	br	86a3c <_fseeko_r+0x578>
	}
#ifdef	HAVE_BLKSIZE
      fp->_blksize = st.st_blksize;
#else
      fp->_blksize = 1024;
   86728:	00810004 	movi	r2,1024
   8672c:	80801315 	stw	r2,76(r16)
#endif
      fp->_flags |= __SOPT;
   86730:	8080030b 	ldhu	r2,12(r16)
   86734:	10810014 	ori	r2,r2,1024
   86738:	8080030d 	sth	r2,12(r16)
  /*
   * We are reading; we can try to optimise.
   * Figure out where we are going and where we are now.
   */

  if (whence == SEEK_SET)
   8673c:	e0bffd17 	ldw	r2,-12(fp)
   86740:	1000031e 	bne	r2,zero,86750 <_fseeko_r+0x28c>
    target = offset;
   86744:	e0bffc17 	ldw	r2,-16(fp)
   86748:	e0bfe615 	stw	r2,-104(fp)
   8674c:	00000e06 	br	86788 <_fseeko_r+0x2c4>
  else
    {
#ifdef __USE_INTERNAL_STAT64
      if (_fstat64_r (ptr, fp->_file, &st))
#else
      if (_fstat_r (ptr, fp->_file, &st))
   86750:	8080038b 	ldhu	r2,14(r16)
   86754:	10bfffcc 	andi	r2,r2,65535
   86758:	10a0001c 	xori	r2,r2,32768
   8675c:	10a00004 	addi	r2,r2,-32768
   86760:	e0ffec04 	addi	r3,fp,-80
   86764:	180d883a 	mov	r6,r3
   86768:	100b883a 	mov	r5,r2
   8676c:	e13ffb17 	ldw	r4,-20(fp)
   86770:	0086b480 	call	86b48 <_fstat_r>
   86774:	1000ac1e 	bne	r2,zero,86a28 <_fseeko_r+0x564>
#endif
	goto dumb;
      target = st.st_size + offset;
   86778:	e0fff017 	ldw	r3,-64(fp)
   8677c:	e0bffc17 	ldw	r2,-16(fp)
   86780:	1885883a 	add	r2,r3,r2
   86784:	e0bfe615 	stw	r2,-104(fp)
    }

  if (!havepos)
   86788:	e0bfe917 	ldw	r2,-92(fp)
   8678c:	10001c1e 	bne	r2,zero,86800 <_fseeko_r+0x33c>
    {
      if (fp->_flags & __SOFF)
   86790:	8080030b 	ldhu	r2,12(r16)
   86794:	10bfffcc 	andi	r2,r2,65535
   86798:	1084000c 	andi	r2,r2,4096
   8679c:	10000326 	beq	r2,zero,867ac <_fseeko_r+0x2e8>
	curoff = fp->_offset;
   867a0:	80801417 	ldw	r2,80(r16)
   867a4:	e0bfe715 	stw	r2,-100(fp)
   867a8:	00000b06 	br	867d8 <_fseeko_r+0x314>
      else
	{
	  curoff = seekfn (ptr, fp->_cookie, 0L, SEEK_CUR);
   867ac:	80c00717 	ldw	r3,28(r16)
   867b0:	e0bfeb17 	ldw	r2,-84(fp)
   867b4:	01c00044 	movi	r7,1
   867b8:	000d883a 	mov	r6,zero
   867bc:	180b883a 	mov	r5,r3
   867c0:	e13ffb17 	ldw	r4,-20(fp)
   867c4:	103ee83a 	callr	r2
   867c8:	e0bfe715 	stw	r2,-100(fp)
	  if (curoff == POS_ERR)
   867cc:	e0bfe717 	ldw	r2,-100(fp)
   867d0:	10bfffd8 	cmpnei	r2,r2,-1
   867d4:	10009626 	beq	r2,zero,86a30 <_fseeko_r+0x56c>
	    goto dumb;
	}
      curoff -= fp->_r;
   867d8:	80800117 	ldw	r2,4(r16)
   867dc:	e0ffe717 	ldw	r3,-100(fp)
   867e0:	1885c83a 	sub	r2,r3,r2
   867e4:	e0bfe715 	stw	r2,-100(fp)
      if (HASUB (fp))
   867e8:	80800c17 	ldw	r2,48(r16)
   867ec:	10000426 	beq	r2,zero,86800 <_fseeko_r+0x33c>
	curoff -= fp->_ur;
   867f0:	80800f17 	ldw	r2,60(r16)
   867f4:	e0ffe717 	ldw	r3,-100(fp)
   867f8:	1885c83a 	sub	r2,r3,r2
   867fc:	e0bfe715 	stw	r2,-100(fp)
   * that any ungetc() input has been discarded).  Adjust current
   * offset backwards by this count so that it represents the
   * file offset for the first byte in the current input buffer.
   */

  if (HASUB (fp))
   86800:	80800c17 	ldw	r2,48(r16)
   86804:	10001326 	beq	r2,zero,86854 <_fseeko_r+0x390>
    {
      curoff += fp->_r;       /* kill off ungetc */
   86808:	80800117 	ldw	r2,4(r16)
   8680c:	e0ffe717 	ldw	r3,-100(fp)
   86810:	1885883a 	add	r2,r3,r2
   86814:	e0bfe715 	stw	r2,-100(fp)
      n = fp->_up - fp->_bf._base;
   86818:	80800e17 	ldw	r2,56(r16)
   8681c:	1007883a 	mov	r3,r2
   86820:	80800417 	ldw	r2,16(r16)
   86824:	1885c83a 	sub	r2,r3,r2
   86828:	e0bfe815 	stw	r2,-96(fp)
      curoff -= n;
   8682c:	e0ffe717 	ldw	r3,-100(fp)
   86830:	e0bfe817 	ldw	r2,-96(fp)
   86834:	1885c83a 	sub	r2,r3,r2
   86838:	e0bfe715 	stw	r2,-100(fp)
      n += fp->_ur;
   8683c:	80800f17 	ldw	r2,60(r16)
   86840:	1007883a 	mov	r3,r2
   86844:	e0bfe817 	ldw	r2,-96(fp)
   86848:	10c5883a 	add	r2,r2,r3
   8684c:	e0bfe815 	stw	r2,-96(fp)
   86850:	00000e06 	br	8688c <_fseeko_r+0x3c8>
    }
  else
    {
      n = fp->_p - fp->_bf._base;
   86854:	80800017 	ldw	r2,0(r16)
   86858:	1007883a 	mov	r3,r2
   8685c:	80800417 	ldw	r2,16(r16)
   86860:	1885c83a 	sub	r2,r3,r2
   86864:	e0bfe815 	stw	r2,-96(fp)
      curoff -= n;
   86868:	e0ffe717 	ldw	r3,-100(fp)
   8686c:	e0bfe817 	ldw	r2,-96(fp)
   86870:	1885c83a 	sub	r2,r3,r2
   86874:	e0bfe715 	stw	r2,-100(fp)
      n += fp->_r;
   86878:	80800117 	ldw	r2,4(r16)
   8687c:	1007883a 	mov	r3,r2
   86880:	e0bfe817 	ldw	r2,-96(fp)
   86884:	10c5883a 	add	r2,r2,r3
   86888:	e0bfe815 	stw	r2,-96(fp)
   * If the target offset is within the current buffer,
   * simply adjust the pointers, clear EOF, undo ungetc(),
   * and return.
   */

  if (target >= curoff && target < curoff + n)
   8688c:	e0ffe617 	ldw	r3,-104(fp)
   86890:	e0bfe717 	ldw	r2,-100(fp)
   86894:	18802516 	blt	r3,r2,8692c <_fseeko_r+0x468>
   86898:	e0ffe717 	ldw	r3,-100(fp)
   8689c:	e0bfe817 	ldw	r2,-96(fp)
   868a0:	1885883a 	add	r2,r3,r2
   868a4:	e0ffe617 	ldw	r3,-104(fp)
   868a8:	1880202e 	bgeu	r3,r2,8692c <_fseeko_r+0x468>
    {
      register int o = target - curoff;
   868ac:	e0ffe617 	ldw	r3,-104(fp)
   868b0:	e0bfe717 	ldw	r2,-100(fp)
   868b4:	18a3c83a 	sub	r17,r3,r2

      fp->_p = fp->_bf._base + o;
   868b8:	80800417 	ldw	r2,16(r16)
   868bc:	8807883a 	mov	r3,r17
   868c0:	10c5883a 	add	r2,r2,r3
   868c4:	80800015 	stw	r2,0(r16)
      fp->_r = n - o;
   868c8:	8807883a 	mov	r3,r17
   868cc:	e0bfe817 	ldw	r2,-96(fp)
   868d0:	10c5c83a 	sub	r2,r2,r3
   868d4:	80800115 	stw	r2,4(r16)
      if (HASUB (fp))
   868d8:	80800c17 	ldw	r2,48(r16)
   868dc:	10000826 	beq	r2,zero,86900 <_fseeko_r+0x43c>
	FREEUB (ptr, fp);
   868e0:	80c00c17 	ldw	r3,48(r16)
   868e4:	80801004 	addi	r2,r16,64
   868e8:	18800426 	beq	r3,r2,868fc <_fseeko_r+0x438>
   868ec:	80800c17 	ldw	r2,48(r16)
   868f0:	100b883a 	mov	r5,r2
   868f4:	e13ffb17 	ldw	r4,-20(fp)
   868f8:	0085c480 	call	85c48 <_free_r>
   868fc:	80000c15 	stw	zero,48(r16)
      fp->_flags &= ~__SEOF;
   86900:	80c0030b 	ldhu	r3,12(r16)
   86904:	00bff7c4 	movi	r2,-33
   86908:	1884703a 	and	r2,r3,r2
   8690c:	8080030d 	sth	r2,12(r16)
      memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   86910:	80801704 	addi	r2,r16,92
   86914:	01800204 	movi	r6,8
   86918:	000b883a 	mov	r5,zero
   8691c:	1009883a 	mov	r4,r2
   86920:	00880200 	call	88020 <memset>
      _newlib_flockfile_exit (fp);
      return 0;
   86924:	0005883a 	mov	r2,zero
   86928:	00006e06 	br	86ae4 <_fseeko_r+0x620>
   * the kernel use the VM hardware to map pages instead of
   * copying bytes laboriously.  Using a block boundary also
   * ensures that we only read one block, rather than two.
   */

  curoff = target & ~(fp->_blksize - 1);
   8692c:	80801317 	ldw	r2,76(r16)
   86930:	0087c83a 	sub	r3,zero,r2
   86934:	e0bfe617 	ldw	r2,-104(fp)
   86938:	1884703a 	and	r2,r3,r2
   8693c:	e0bfe715 	stw	r2,-100(fp)
  if (seekfn (ptr, fp->_cookie, curoff, SEEK_SET) == POS_ERR)
   86940:	80c00717 	ldw	r3,28(r16)
   86944:	e0bfeb17 	ldw	r2,-84(fp)
   86948:	000f883a 	mov	r7,zero
   8694c:	e1bfe717 	ldw	r6,-100(fp)
   86950:	180b883a 	mov	r5,r3
   86954:	e13ffb17 	ldw	r4,-20(fp)
   86958:	103ee83a 	callr	r2
   8695c:	10bfffd8 	cmpnei	r2,r2,-1
   86960:	10003526 	beq	r2,zero,86a38 <_fseeko_r+0x574>
    goto dumb;
  fp->_r = 0;
   86964:	80000115 	stw	zero,4(r16)
  fp->_p = fp->_bf._base;
   86968:	80800417 	ldw	r2,16(r16)
   8696c:	80800015 	stw	r2,0(r16)
  if (HASUB (fp))
   86970:	80800c17 	ldw	r2,48(r16)
   86974:	10000826 	beq	r2,zero,86998 <_fseeko_r+0x4d4>
    FREEUB (ptr, fp);
   86978:	80c00c17 	ldw	r3,48(r16)
   8697c:	80801004 	addi	r2,r16,64
   86980:	18800426 	beq	r3,r2,86994 <_fseeko_r+0x4d0>
   86984:	80800c17 	ldw	r2,48(r16)
   86988:	100b883a 	mov	r5,r2
   8698c:	e13ffb17 	ldw	r4,-20(fp)
   86990:	0085c480 	call	85c48 <_free_r>
   86994:	80000c15 	stw	zero,48(r16)
  fp->_flags &= ~__SEOF;
   86998:	80c0030b 	ldhu	r3,12(r16)
   8699c:	00bff7c4 	movi	r2,-33
   869a0:	1884703a 	and	r2,r3,r2
   869a4:	8080030d 	sth	r2,12(r16)
  n = target - curoff;
   869a8:	e0ffe617 	ldw	r3,-104(fp)
   869ac:	e0bfe717 	ldw	r2,-100(fp)
   869b0:	1885c83a 	sub	r2,r3,r2
   869b4:	e0bfe815 	stw	r2,-96(fp)
  if (n)
   869b8:	e0bfe817 	ldw	r2,-96(fp)
   869bc:	10001126 	beq	r2,zero,86a04 <_fseeko_r+0x540>
    {
      if (__srefill_r (ptr, fp) || fp->_r < n)
   869c0:	800b883a 	mov	r5,r16
   869c4:	e13ffb17 	ldw	r4,-20(fp)
   869c8:	008870c0 	call	8870c <__srefill_r>
   869cc:	10001b1e 	bne	r2,zero,86a3c <_fseeko_r+0x578>
   869d0:	80800117 	ldw	r2,4(r16)
   869d4:	1007883a 	mov	r3,r2
   869d8:	e0bfe817 	ldw	r2,-96(fp)
   869dc:	18801736 	bltu	r3,r2,86a3c <_fseeko_r+0x578>
	goto dumb;
      fp->_p += n;
   869e0:	80c00017 	ldw	r3,0(r16)
   869e4:	e0bfe817 	ldw	r2,-96(fp)
   869e8:	1885883a 	add	r2,r3,r2
   869ec:	80800015 	stw	r2,0(r16)
      fp->_r -= n;
   869f0:	80800117 	ldw	r2,4(r16)
   869f4:	1007883a 	mov	r3,r2
   869f8:	e0bfe817 	ldw	r2,-96(fp)
   869fc:	1885c83a 	sub	r2,r3,r2
   86a00:	80800115 	stw	r2,4(r16)
    }
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   86a04:	80801704 	addi	r2,r16,92
   86a08:	01800204 	movi	r6,8
   86a0c:	000b883a 	mov	r5,zero
   86a10:	1009883a 	mov	r4,r2
   86a14:	00880200 	call	88020 <memset>
  _newlib_flockfile_exit (fp);
  return 0;
   86a18:	0005883a 	mov	r2,zero
   86a1c:	00003106 	br	86ae4 <_fseeko_r+0x620>
  if (fp->_bf._base == NULL)
    __smakebuf_r (ptr, fp);

#ifdef _FSEEK_OPTIMIZATION
  if (fp->_flags & (__SWR | __SRW | __SNBF | __SNPT))
    goto dumb;
   86a20:	0001883a 	nop
   86a24:	00000506 	br	86a3c <_fseeko_r+0x578>
#ifdef __USE_INTERNAL_STAT64
      if (_fstat64_r (ptr, fp->_file, &st))
#else
      if (_fstat_r (ptr, fp->_file, &st))
#endif
	goto dumb;
   86a28:	0001883a 	nop
   86a2c:	00000306 	br	86a3c <_fseeko_r+0x578>
	curoff = fp->_offset;
      else
	{
	  curoff = seekfn (ptr, fp->_cookie, 0L, SEEK_CUR);
	  if (curoff == POS_ERR)
	    goto dumb;
   86a30:	0001883a 	nop
   86a34:	00000106 	br	86a3c <_fseeko_r+0x578>
   * ensures that we only read one block, rather than two.
   */

  curoff = target & ~(fp->_blksize - 1);
  if (seekfn (ptr, fp->_cookie, curoff, SEEK_SET) == POS_ERR)
    goto dumb;
   86a38:	0001883a 	nop
   * do it.  Allow the seek function to change fp->_bf._base.
   */
#endif

dumb:
  if (_fflush_r (ptr, fp)
   86a3c:	800b883a 	mov	r5,r16
   86a40:	e13ffb17 	ldw	r4,-20(fp)
   86a44:	00852a40 	call	852a4 <_fflush_r>
   86a48:	1000091e 	bne	r2,zero,86a70 <_fseeko_r+0x5ac>
      || seekfn (ptr, fp->_cookie, offset, whence) == POS_ERR)
   86a4c:	80c00717 	ldw	r3,28(r16)
   86a50:	e0bfeb17 	ldw	r2,-84(fp)
   86a54:	e1fffd17 	ldw	r7,-12(fp)
   86a58:	e1bffc17 	ldw	r6,-16(fp)
   86a5c:	180b883a 	mov	r5,r3
   86a60:	e13ffb17 	ldw	r4,-20(fp)
   86a64:	103ee83a 	callr	r2
   86a68:	10bfffd8 	cmpnei	r2,r2,-1
   86a6c:	1000021e 	bne	r2,zero,86a78 <_fseeko_r+0x5b4>
    {
      _newlib_flockfile_exit (fp);
      return EOF;
   86a70:	00bfffc4 	movi	r2,-1
   86a74:	00001b06 	br	86ae4 <_fseeko_r+0x620>
    }
  /* success: clear EOF indicator and discard ungetc() data */
  if (HASUB (fp))
   86a78:	80800c17 	ldw	r2,48(r16)
   86a7c:	10000826 	beq	r2,zero,86aa0 <_fseeko_r+0x5dc>
    FREEUB (ptr, fp);
   86a80:	80c00c17 	ldw	r3,48(r16)
   86a84:	80801004 	addi	r2,r16,64
   86a88:	18800426 	beq	r3,r2,86a9c <_fseeko_r+0x5d8>
   86a8c:	80800c17 	ldw	r2,48(r16)
   86a90:	100b883a 	mov	r5,r2
   86a94:	e13ffb17 	ldw	r4,-20(fp)
   86a98:	0085c480 	call	85c48 <_free_r>
   86a9c:	80000c15 	stw	zero,48(r16)
  fp->_p = fp->_bf._base;
   86aa0:	80800417 	ldw	r2,16(r16)
   86aa4:	80800015 	stw	r2,0(r16)
  fp->_r = 0;
   86aa8:	80000115 	stw	zero,4(r16)
  /* fp->_w = 0; *//* unnecessary (I think...) */
  fp->_flags &= ~__SEOF;
   86aac:	80c0030b 	ldhu	r3,12(r16)
   86ab0:	00bff7c4 	movi	r2,-33
   86ab4:	1884703a 	and	r2,r3,r2
   86ab8:	8080030d 	sth	r2,12(r16)
     no-optimization flag may be set in the case of a read
     stream that is flushed which by POSIX/SUSv3 standards,
     means that a corresponding seek must not optimize.  The
     optimization is then allowed if no subsequent flush
     is performed.  */
  fp->_flags &= ~__SNPT;
   86abc:	80c0030b 	ldhu	r3,12(r16)
   86ac0:	00bdffc4 	movi	r2,-2049
   86ac4:	1884703a 	and	r2,r3,r2
   86ac8:	8080030d 	sth	r2,12(r16)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   86acc:	80801704 	addi	r2,r16,92
   86ad0:	01800204 	movi	r6,8
   86ad4:	000b883a 	mov	r5,zero
   86ad8:	1009883a 	mov	r4,r2
   86adc:	00880200 	call	88020 <memset>
  _newlib_flockfile_end (fp);
  return 0;
   86ae0:	0005883a 	mov	r2,zero
}
   86ae4:	e6fffe04 	addi	sp,fp,-8
   86ae8:	dfc00317 	ldw	ra,12(sp)
   86aec:	df000217 	ldw	fp,8(sp)
   86af0:	dc400117 	ldw	r17,4(sp)
   86af4:	dc000017 	ldw	r16,0(sp)
   86af8:	dec00404 	addi	sp,sp,16
   86afc:	f800283a 	ret

00086b00 <fseeko>:
int
_DEFUN(fseeko, (fp, offset, whence),
       register FILE *fp _AND
       _off_t offset     _AND
       int whence)
{
   86b00:	defffc04 	addi	sp,sp,-16
   86b04:	dfc00315 	stw	ra,12(sp)
   86b08:	df000215 	stw	fp,8(sp)
   86b0c:	df000204 	addi	fp,sp,8
   86b10:	2007883a 	mov	r3,r4
   86b14:	e17ffe15 	stw	r5,-8(fp)
   86b18:	e1bfff15 	stw	r6,-4(fp)
  return _fseeko_r (_REENT, fp, offset, whence);
   86b1c:	d0a00417 	ldw	r2,-32752(gp)
   86b20:	e1ffff17 	ldw	r7,-4(fp)
   86b24:	e1bffe17 	ldw	r6,-8(fp)
   86b28:	180b883a 	mov	r5,r3
   86b2c:	1009883a 	mov	r4,r2
   86b30:	00864c40 	call	864c4 <_fseeko_r>
}
   86b34:	e037883a 	mov	sp,fp
   86b38:	dfc00117 	ldw	ra,4(sp)
   86b3c:	df000017 	ldw	fp,0(sp)
   86b40:	dec00204 	addi	sp,sp,8
   86b44:	f800283a 	ret

00086b48 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
   86b48:	defffa04 	addi	sp,sp,-24
   86b4c:	dfc00515 	stw	ra,20(sp)
   86b50:	df000415 	stw	fp,16(sp)
   86b54:	df000404 	addi	fp,sp,16
   86b58:	e13ffd15 	stw	r4,-12(fp)
   86b5c:	e17ffe15 	stw	r5,-8(fp)
   86b60:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
   86b64:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
   86b68:	e17fff17 	ldw	r5,-4(fp)
   86b6c:	e13ffe17 	ldw	r4,-8(fp)
   86b70:	009e0c80 	call	9e0c8 <fstat>
   86b74:	e0bffc15 	stw	r2,-16(fp)
   86b78:	e0bffc17 	ldw	r2,-16(fp)
   86b7c:	10bfffd8 	cmpnei	r2,r2,-1
   86b80:	1000051e 	bne	r2,zero,86b98 <_fstat_r+0x50>
   86b84:	d0a70f17 	ldw	r2,-25540(gp)
   86b88:	10000326 	beq	r2,zero,86b98 <_fstat_r+0x50>
    ptr->_errno = errno;
   86b8c:	d0e70f17 	ldw	r3,-25540(gp)
   86b90:	e0bffd17 	ldw	r2,-12(fp)
   86b94:	10c00015 	stw	r3,0(r2)
  return ret;
   86b98:	e0bffc17 	ldw	r2,-16(fp)
}
   86b9c:	e037883a 	mov	sp,fp
   86ba0:	dfc00117 	ldw	ra,4(sp)
   86ba4:	df000017 	ldw	fp,0(sp)
   86ba8:	dec00204 	addi	sp,sp,8
   86bac:	f800283a 	ret

00086bb0 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   86bb0:	defff804 	addi	sp,sp,-32
   86bb4:	dfc00715 	stw	ra,28(sp)
   86bb8:	df000615 	stw	fp,24(sp)
   86bbc:	dd000515 	stw	r20,20(sp)
   86bc0:	dcc00415 	stw	r19,16(sp)
   86bc4:	dc800315 	stw	r18,12(sp)
   86bc8:	dc400215 	stw	r17,8(sp)
   86bcc:	dc000115 	stw	r16,4(sp)
   86bd0:	df000604 	addi	fp,sp,24
   86bd4:	e13ffa15 	stw	r4,-24(fp)
   86bd8:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   86bdc:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   86be0:	e0bffa17 	ldw	r2,-24(fp)
   86be4:	1440b804 	addi	r17,r2,736
   86be8:	00001b06 	br	86c58 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   86bec:	8c000217 	ldw	r16,8(r17)
   86bf0:	8c800117 	ldw	r18,4(r17)
   86bf4:	00001506 	br	86c4c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   86bf8:	8080030b 	ldhu	r2,12(r16)
   86bfc:	10bfffcc 	andi	r2,r2,65535
   86c00:	10a0001c 	xori	r2,r2,32768
   86c04:	10a00004 	addi	r2,r2,-32768
   86c08:	10000f26 	beq	r2,zero,86c48 <_fwalk+0x98>
   86c0c:	8080030b 	ldhu	r2,12(r16)
   86c10:	10bfffcc 	andi	r2,r2,65535
   86c14:	10a0001c 	xori	r2,r2,32768
   86c18:	10a00004 	addi	r2,r2,-32768
   86c1c:	10800060 	cmpeqi	r2,r2,1
   86c20:	1000091e 	bne	r2,zero,86c48 <_fwalk+0x98>
   86c24:	8080038b 	ldhu	r2,14(r16)
   86c28:	10bfffcc 	andi	r2,r2,65535
   86c2c:	10a0001c 	xori	r2,r2,32768
   86c30:	10a00004 	addi	r2,r2,-32768
   86c34:	10bfffe0 	cmpeqi	r2,r2,-1
   86c38:	1000031e 	bne	r2,zero,86c48 <_fwalk+0x98>
	ret |= (*function) (fp);
   86c3c:	8009883a 	mov	r4,r16
   86c40:	a03ee83a 	callr	r20
   86c44:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   86c48:	84001a04 	addi	r16,r16,104
   86c4c:	94bfffc4 	addi	r18,r18,-1
   86c50:	903fe90e 	bge	r18,zero,86bf8 <__alt_data_end+0xfffd4bf8>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   86c54:	8c400017 	ldw	r17,0(r17)
   86c58:	883fe41e 	bne	r17,zero,86bec <__alt_data_end+0xfffd4bec>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
   86c5c:	9805883a 	mov	r2,r19
}
   86c60:	e6fffb04 	addi	sp,fp,-20
   86c64:	dfc00617 	ldw	ra,24(sp)
   86c68:	df000517 	ldw	fp,20(sp)
   86c6c:	dd000417 	ldw	r20,16(sp)
   86c70:	dcc00317 	ldw	r19,12(sp)
   86c74:	dc800217 	ldw	r18,8(sp)
   86c78:	dc400117 	ldw	r17,4(sp)
   86c7c:	dc000017 	ldw	r16,0(sp)
   86c80:	dec00704 	addi	sp,sp,28
   86c84:	f800283a 	ret

00086c88 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   86c88:	defff804 	addi	sp,sp,-32
   86c8c:	dfc00715 	stw	ra,28(sp)
   86c90:	df000615 	stw	fp,24(sp)
   86c94:	dd000515 	stw	r20,20(sp)
   86c98:	dcc00415 	stw	r19,16(sp)
   86c9c:	dc800315 	stw	r18,12(sp)
   86ca0:	dc400215 	stw	r17,8(sp)
   86ca4:	dc000115 	stw	r16,4(sp)
   86ca8:	df000604 	addi	fp,sp,24
   86cac:	e13ffa15 	stw	r4,-24(fp)
   86cb0:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   86cb4:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   86cb8:	e0bffa17 	ldw	r2,-24(fp)
   86cbc:	1440b804 	addi	r17,r2,736
   86cc0:	00001c06 	br	86d34 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   86cc4:	8c000217 	ldw	r16,8(r17)
   86cc8:	8c800117 	ldw	r18,4(r17)
   86ccc:	00001606 	br	86d28 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   86cd0:	8080030b 	ldhu	r2,12(r16)
   86cd4:	10bfffcc 	andi	r2,r2,65535
   86cd8:	10a0001c 	xori	r2,r2,32768
   86cdc:	10a00004 	addi	r2,r2,-32768
   86ce0:	10001026 	beq	r2,zero,86d24 <_fwalk_reent+0x9c>
   86ce4:	8080030b 	ldhu	r2,12(r16)
   86ce8:	10bfffcc 	andi	r2,r2,65535
   86cec:	10a0001c 	xori	r2,r2,32768
   86cf0:	10a00004 	addi	r2,r2,-32768
   86cf4:	10800060 	cmpeqi	r2,r2,1
   86cf8:	10000a1e 	bne	r2,zero,86d24 <_fwalk_reent+0x9c>
   86cfc:	8080038b 	ldhu	r2,14(r16)
   86d00:	10bfffcc 	andi	r2,r2,65535
   86d04:	10a0001c 	xori	r2,r2,32768
   86d08:	10a00004 	addi	r2,r2,-32768
   86d0c:	10bfffe0 	cmpeqi	r2,r2,-1
   86d10:	1000041e 	bne	r2,zero,86d24 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
   86d14:	800b883a 	mov	r5,r16
   86d18:	e13ffa17 	ldw	r4,-24(fp)
   86d1c:	a03ee83a 	callr	r20
   86d20:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   86d24:	84001a04 	addi	r16,r16,104
   86d28:	94bfffc4 	addi	r18,r18,-1
   86d2c:	903fe80e 	bge	r18,zero,86cd0 <__alt_data_end+0xfffd4cd0>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   86d30:	8c400017 	ldw	r17,0(r17)
   86d34:	883fe31e 	bne	r17,zero,86cc4 <__alt_data_end+0xfffd4cc4>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
   86d38:	9805883a 	mov	r2,r19
}
   86d3c:	e6fffb04 	addi	sp,fp,-20
   86d40:	dfc00617 	ldw	ra,24(sp)
   86d44:	df000517 	ldw	fp,20(sp)
   86d48:	dd000417 	ldw	r20,16(sp)
   86d4c:	dcc00317 	ldw	r19,12(sp)
   86d50:	dc800217 	ldw	r18,8(sp)
   86d54:	dc400117 	ldw	r17,4(sp)
   86d58:	dc000017 	ldw	r16,0(sp)
   86d5c:	dec00704 	addi	sp,sp,28
   86d60:	f800283a 	ret

00086d64 <_fwrite_r>:
       struct _reent * ptr _AND
       _CONST _PTR __restrict buf _AND
       size_t size     _AND
       size_t count    _AND
       FILE * __restrict fp)
{
   86d64:	defff304 	addi	sp,sp,-52
   86d68:	dfc00c15 	stw	ra,48(sp)
   86d6c:	df000b15 	stw	fp,44(sp)
   86d70:	df000b04 	addi	fp,sp,44
   86d74:	e13ffc15 	stw	r4,-16(fp)
   86d78:	e17ffd15 	stw	r5,-12(fp)
   86d7c:	e1bffe15 	stw	r6,-8(fp)
   86d80:	e1ffff15 	stw	r7,-4(fp)
  size_t n;
#ifdef _FVWRITE_IN_STREAMIO
  struct __suio uio;
  struct __siov iov;

  iov.iov_base = buf;
   86d84:	e0bffd17 	ldw	r2,-12(fp)
   86d88:	e0bffa15 	stw	r2,-24(fp)
  uio.uio_resid = iov.iov_len = n = count * size;
   86d8c:	e17ffe17 	ldw	r5,-8(fp)
   86d90:	e13fff17 	ldw	r4,-4(fp)
   86d94:	00823a00 	call	823a0 <__mulsi3>
   86d98:	e0bff515 	stw	r2,-44(fp)
   86d9c:	e0bff517 	ldw	r2,-44(fp)
   86da0:	e0bffb15 	stw	r2,-20(fp)
   86da4:	e0bffb17 	ldw	r2,-20(fp)
   86da8:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov;
   86dac:	e0bffa04 	addi	r2,fp,-24
   86db0:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 1;
   86db4:	00800044 	movi	r2,1
   86db8:	e0bff815 	stw	r2,-32(fp)
   * The usual case is success (__sfvwrite_r returns 0);
   * skip the divide if this happens, since divides are
   * generally slow and since this occurs whenever size==0.
   */

  CHECK_INIT(ptr, fp);
   86dbc:	e0bffc17 	ldw	r2,-16(fp)
   86dc0:	e0bff615 	stw	r2,-40(fp)
   86dc4:	e0bff617 	ldw	r2,-40(fp)
   86dc8:	10000526 	beq	r2,zero,86de0 <_fwrite_r+0x7c>
   86dcc:	e0bff617 	ldw	r2,-40(fp)
   86dd0:	10800e17 	ldw	r2,56(r2)
   86dd4:	1000021e 	bne	r2,zero,86de0 <_fwrite_r+0x7c>
   86dd8:	e13ff617 	ldw	r4,-40(fp)
   86ddc:	008573c0 	call	8573c <__sinit>

  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   86de0:	e0800217 	ldw	r2,8(fp)
   86de4:	1080030b 	ldhu	r2,12(r2)
   86de8:	10bfffcc 	andi	r2,r2,65535
   86dec:	1088000c 	andi	r2,r2,8192
   86df0:	10000c1e 	bne	r2,zero,86e24 <_fwrite_r+0xc0>
   86df4:	e0800217 	ldw	r2,8(fp)
   86df8:	1080030b 	ldhu	r2,12(r2)
   86dfc:	10880014 	ori	r2,r2,8192
   86e00:	1007883a 	mov	r3,r2
   86e04:	e0800217 	ldw	r2,8(fp)
   86e08:	10c0030d 	sth	r3,12(r2)
   86e0c:	e0800217 	ldw	r2,8(fp)
   86e10:	10c01917 	ldw	r3,100(r2)
   86e14:	00b7ffc4 	movi	r2,-8193
   86e18:	1886703a 	and	r3,r3,r2
   86e1c:	e0800217 	ldw	r2,8(fp)
   86e20:	10c01915 	stw	r3,100(r2)
  if (__sfvwrite_r (ptr, fp, &uio) == 0)
   86e24:	e0bff704 	addi	r2,fp,-36
   86e28:	100d883a 	mov	r6,r2
   86e2c:	e1400217 	ldw	r5,8(fp)
   86e30:	e13ffc17 	ldw	r4,-16(fp)
   86e34:	008f9780 	call	8f978 <__sfvwrite_r>
   86e38:	1000021e 	bne	r2,zero,86e44 <_fwrite_r+0xe0>
    {
      _newlib_flockfile_exit (fp);
      return count;
   86e3c:	e0bfff17 	ldw	r2,-4(fp)
   86e40:	00000606 	br	86e5c <_fwrite_r+0xf8>
    }
  _newlib_flockfile_end (fp);
  return (n - uio.uio_resid) / size;
   86e44:	e0bff917 	ldw	r2,-28(fp)
   86e48:	e0fff517 	ldw	r3,-44(fp)
   86e4c:	1885c83a 	sub	r2,r3,r2
   86e50:	e17ffe17 	ldw	r5,-8(fp)
   86e54:	1009883a 	mov	r4,r2
   86e58:	00822e40 	call	822e4 <__udivsi3>

ret:
  _newlib_flockfile_end (fp);
  return i / size;
#endif
}
   86e5c:	e037883a 	mov	sp,fp
   86e60:	dfc00117 	ldw	ra,4(sp)
   86e64:	df000017 	ldw	fp,0(sp)
   86e68:	dec00204 	addi	sp,sp,8
   86e6c:	f800283a 	ret

00086e70 <fwrite>:
_DEFUN(fwrite, (buf, size, count, fp),
       _CONST _PTR __restrict buf _AND
       size_t size     _AND
       size_t count    _AND
       FILE * fp)
{
   86e70:	defff904 	addi	sp,sp,-28
   86e74:	dfc00615 	stw	ra,24(sp)
   86e78:	df000515 	stw	fp,20(sp)
   86e7c:	df000504 	addi	fp,sp,20
   86e80:	e13ffc15 	stw	r4,-16(fp)
   86e84:	e17ffd15 	stw	r5,-12(fp)
   86e88:	e1bffe15 	stw	r6,-8(fp)
   86e8c:	e1ffff15 	stw	r7,-4(fp)
  return _fwrite_r (_REENT, buf, size, count, fp);
   86e90:	d0e00417 	ldw	r3,-32752(gp)
   86e94:	e0bfff17 	ldw	r2,-4(fp)
   86e98:	d8800015 	stw	r2,0(sp)
   86e9c:	e1fffe17 	ldw	r7,-8(fp)
   86ea0:	e1bffd17 	ldw	r6,-12(fp)
   86ea4:	e17ffc17 	ldw	r5,-16(fp)
   86ea8:	1809883a 	mov	r4,r3
   86eac:	0086d640 	call	86d64 <_fwrite_r>
}
   86eb0:	e037883a 	mov	sp,fp
   86eb4:	dfc00117 	ldw	ra,4(sp)
   86eb8:	df000017 	ldw	fp,0(sp)
   86ebc:	dec00204 	addi	sp,sp,8
   86ec0:	f800283a 	ret

00086ec4 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   86ec4:	deffea04 	addi	sp,sp,-88
   86ec8:	dfc01515 	stw	ra,84(sp)
   86ecc:	df001415 	stw	fp,80(sp)
   86ed0:	dcc01315 	stw	r19,76(sp)
   86ed4:	dc801215 	stw	r18,72(sp)
   86ed8:	dc401115 	stw	r17,68(sp)
   86edc:	dc001015 	stw	r16,64(sp)
   86ee0:	df001404 	addi	fp,sp,80
   86ee4:	e13ffb15 	stw	r4,-20(fp)
   86ee8:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   86eec:	8080030b 	ldhu	r2,12(r16)
   86ef0:	10bfffcc 	andi	r2,r2,65535
   86ef4:	1080008c 	andi	r2,r2,2
   86ef8:	10000726 	beq	r2,zero,86f18 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
   86efc:	808010c4 	addi	r2,r16,67
   86f00:	80800015 	stw	r2,0(r16)
   86f04:	80800017 	ldw	r2,0(r16)
   86f08:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
   86f0c:	00800044 	movi	r2,1
   86f10:	80800515 	stw	r2,20(r16)
   86f14:	00006d06 	br	870cc <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
   86f18:	8080038b 	ldhu	r2,14(r16)
   86f1c:	10bfffcc 	andi	r2,r2,65535
   86f20:	10a0001c 	xori	r2,r2,32768
   86f24:	10a00004 	addi	r2,r2,-32768
   86f28:	10000916 	blt	r2,zero,86f50 <__smakebuf_r+0x8c>
   86f2c:	8080038b 	ldhu	r2,14(r16)
   86f30:	10bfffcc 	andi	r2,r2,65535
   86f34:	10a0001c 	xori	r2,r2,32768
   86f38:	10a00004 	addi	r2,r2,-32768
   86f3c:	e1bfec04 	addi	r6,fp,-80
   86f40:	100b883a 	mov	r5,r2
   86f44:	e13ffb17 	ldw	r4,-20(fp)
   86f48:	0086b480 	call	86b48 <_fstat_r>
   86f4c:	10000c0e 	bge	r2,zero,86f80 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
   86f50:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
   86f54:	8080030b 	ldhu	r2,12(r16)
   86f58:	10bfffcc 	andi	r2,r2,65535
   86f5c:	1080200c 	andi	r2,r2,128
   86f60:	10000226 	beq	r2,zero,86f6c <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
   86f64:	04401004 	movi	r17,64
   86f68:	00000106 	br	86f70 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
   86f6c:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   86f70:	8080030b 	ldhu	r2,12(r16)
   86f74:	10820014 	ori	r2,r2,2048
   86f78:	8080030d 	sth	r2,12(r16)
   86f7c:	00001606 	br	86fd8 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   86f80:	e0bfed17 	ldw	r2,-76(fp)
   86f84:	10bc000c 	andi	r2,r2,61440
   86f88:	10880020 	cmpeqi	r2,r2,8192
   86f8c:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
   86f90:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   86f94:	e0bfed17 	ldw	r2,-76(fp)
   86f98:	10fc000c 	andi	r3,r2,61440
   86f9c:	00a00014 	movui	r2,32768
   86fa0:	18800a1e 	bne	r3,r2,86fcc <__smakebuf_r+0x108>
   86fa4:	80c00a17 	ldw	r3,40(r16)
   86fa8:	00800274 	movhi	r2,9
   86fac:	10a2d004 	addi	r2,r2,-29888
   86fb0:	1880061e 	bne	r3,r2,86fcc <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
   86fb4:	8080030b 	ldhu	r2,12(r16)
   86fb8:	10810014 	ori	r2,r2,1024
   86fbc:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   86fc0:	00810004 	movi	r2,1024
   86fc4:	80801315 	stw	r2,76(r16)
   86fc8:	00000306 	br	86fd8 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
   86fcc:	8080030b 	ldhu	r2,12(r16)
   86fd0:	10820014 	ori	r2,r2,2048
   86fd4:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
   86fd8:	90001126 	beq	r18,zero,87020 <__smakebuf_r+0x15c>
   86fdc:	8080038b 	ldhu	r2,14(r16)
   86fe0:	10bfffcc 	andi	r2,r2,65535
   86fe4:	10a0001c 	xori	r2,r2,32768
   86fe8:	10a00004 	addi	r2,r2,-32768
   86fec:	100b883a 	mov	r5,r2
   86ff0:	e13ffb17 	ldw	r4,-20(fp)
   86ff4:	008ff600 	call	8ff60 <_isatty_r>
   86ff8:	10000926 	beq	r2,zero,87020 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
   86ffc:	8080030b 	ldhu	r2,12(r16)
   87000:	10800054 	ori	r2,r2,1
   87004:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
   87008:	808010c4 	addi	r2,r16,67
   8700c:	80800015 	stw	r2,0(r16)
   87010:	80800017 	ldw	r2,0(r16)
   87014:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
   87018:	00800044 	movi	r2,1
   8701c:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
   87020:	880b883a 	mov	r5,r17
   87024:	e13ffb17 	ldw	r4,-20(fp)
   87028:	00874a40 	call	874a4 <_malloc_r>
   8702c:	1027883a 	mov	r19,r2
   87030:	98000e1e 	bne	r19,zero,8706c <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
   87034:	8080030b 	ldhu	r2,12(r16)
   87038:	10bfffcc 	andi	r2,r2,65535
   8703c:	1080800c 	andi	r2,r2,512
   87040:	1000221e 	bne	r2,zero,870cc <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
   87044:	8080030b 	ldhu	r2,12(r16)
   87048:	10800094 	ori	r2,r2,2
   8704c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
   87050:	808010c4 	addi	r2,r16,67
   87054:	80800015 	stw	r2,0(r16)
   87058:	80800017 	ldw	r2,0(r16)
   8705c:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
   87060:	00800044 	movi	r2,1
   87064:	80800515 	stw	r2,20(r16)
   87068:	00001806 	br	870cc <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   8706c:	e0fffb17 	ldw	r3,-20(fp)
   87070:	00800234 	movhi	r2,8
   87074:	1095b104 	addi	r2,r2,22212
   87078:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
   8707c:	8080030b 	ldhu	r2,12(r16)
   87080:	10802014 	ori	r2,r2,128
   87084:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
   87088:	84c00015 	stw	r19,0(r16)
   8708c:	80800017 	ldw	r2,0(r16)
   87090:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
   87094:	8805883a 	mov	r2,r17
   87098:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
   8709c:	90000b26 	beq	r18,zero,870cc <__smakebuf_r+0x208>
   870a0:	8080038b 	ldhu	r2,14(r16)
   870a4:	10bfffcc 	andi	r2,r2,65535
   870a8:	10a0001c 	xori	r2,r2,32768
   870ac:	10a00004 	addi	r2,r2,-32768
   870b0:	100b883a 	mov	r5,r2
   870b4:	e13ffb17 	ldw	r4,-20(fp)
   870b8:	008ff600 	call	8ff60 <_isatty_r>
   870bc:	10000326 	beq	r2,zero,870cc <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
   870c0:	8080030b 	ldhu	r2,12(r16)
   870c4:	10800054 	ori	r2,r2,1
   870c8:	8080030d 	sth	r2,12(r16)
    }
}
   870cc:	e6fffc04 	addi	sp,fp,-16
   870d0:	dfc00517 	ldw	ra,20(sp)
   870d4:	df000417 	ldw	fp,16(sp)
   870d8:	dcc00317 	ldw	r19,12(sp)
   870dc:	dc800217 	ldw	r18,8(sp)
   870e0:	dc400117 	ldw	r17,4(sp)
   870e4:	dc000017 	ldw	r16,0(sp)
   870e8:	dec00604 	addi	sp,sp,24
   870ec:	f800283a 	ret

000870f0 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
   870f0:	defff104 	addi	sp,sp,-60
   870f4:	dfc00e15 	stw	ra,56(sp)
   870f8:	df000d15 	stw	fp,52(sp)
   870fc:	df000d04 	addi	fp,sp,52
   87100:	e13ffe15 	stw	r4,-8(fp)
   87104:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
   87108:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
   8710c:	008002b4 	movhi	r2,10
   87110:	10868604 	addi	r2,r2,6680
   87114:	10800217 	ldw	r2,8(r2)
   87118:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
   8711c:	e0bff817 	ldw	r2,-32(fp)
   87120:	10c00117 	ldw	r3,4(r2)
   87124:	00bfff04 	movi	r2,-4
   87128:	1884703a 	and	r2,r3,r2
   8712c:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
   87130:	e0fff817 	ldw	r3,-32(fp)
   87134:	e0bff917 	ldw	r2,-28(fp)
   87138:	1885883a 	add	r2,r3,r2
   8713c:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   87140:	d0e71017 	ldw	r3,-25536(gp)
   87144:	e0bfff17 	ldw	r2,-4(fp)
   87148:	1885883a 	add	r2,r3,r2
   8714c:	10800404 	addi	r2,r2,16
   87150:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
   87154:	00840004 	movi	r2,4096
   87158:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   8715c:	d0a00717 	ldw	r2,-32740(gp)
   87160:	10bfffe0 	cmpeqi	r2,r2,-1
   87164:	1000081e 	bne	r2,zero,87188 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
   87168:	e0fffb17 	ldw	r3,-20(fp)
   8716c:	e0bff617 	ldw	r2,-40(fp)
   87170:	1885883a 	add	r2,r3,r2
   87174:	10ffffc4 	addi	r3,r2,-1
   87178:	e0bffb17 	ldw	r2,-20(fp)
   8717c:	0085c83a 	sub	r2,zero,r2
   87180:	1884703a 	and	r2,r3,r2
   87184:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
   87188:	e0bff617 	ldw	r2,-40(fp)
   8718c:	100b883a 	mov	r5,r2
   87190:	e13ffe17 	ldw	r4,-8(fp)
   87194:	00889600 	call	88960 <_sbrk_r>
   87198:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   8719c:	e0bff317 	ldw	r2,-52(fp)
   871a0:	10bfffe0 	cmpeqi	r2,r2,-1
   871a4:	1000b91e 	bne	r2,zero,8748c <malloc_extend_top+0x39c>
   871a8:	e0fff317 	ldw	r3,-52(fp)
   871ac:	e0bffa17 	ldw	r2,-24(fp)
   871b0:	1880042e 	bgeu	r3,r2,871c4 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
   871b4:	008002b4 	movhi	r2,10
   871b8:	10868604 	addi	r2,r2,6680
   871bc:	e0fff817 	ldw	r3,-32(fp)
   871c0:	1880b21e 	bne	r3,r2,8748c <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
   871c4:	008002b4 	movhi	r2,10
   871c8:	10935104 	addi	r2,r2,19780
   871cc:	10800017 	ldw	r2,0(r2)
   871d0:	1007883a 	mov	r3,r2
   871d4:	e0bff617 	ldw	r2,-40(fp)
   871d8:	1885883a 	add	r2,r3,r2
   871dc:	1007883a 	mov	r3,r2
   871e0:	008002b4 	movhi	r2,10
   871e4:	10935104 	addi	r2,r2,19780
   871e8:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
   871ec:	e0fff317 	ldw	r3,-52(fp)
   871f0:	e0bffa17 	ldw	r2,-24(fp)
   871f4:	1880101e 	bne	r3,r2,87238 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
   871f8:	e0bffb17 	ldw	r2,-20(fp)
   871fc:	10ffffc4 	addi	r3,r2,-1
   87200:	e0bffa17 	ldw	r2,-24(fp)
   87204:	1884703a 	and	r2,r3,r2
   87208:	10000b1e 	bne	r2,zero,87238 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
   8720c:	e0fff617 	ldw	r3,-40(fp)
   87210:	e0bff917 	ldw	r2,-28(fp)
   87214:	1885883a 	add	r2,r3,r2
   87218:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   8721c:	008002b4 	movhi	r2,10
   87220:	10868604 	addi	r2,r2,6680
   87224:	10800217 	ldw	r2,8(r2)
   87228:	e0fffc17 	ldw	r3,-16(fp)
   8722c:	18c00054 	ori	r3,r3,1
   87230:	10c00115 	stw	r3,4(r2)
   87234:	00008006 	br	87438 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
   87238:	d0a00717 	ldw	r2,-32740(gp)
   8723c:	10bfffd8 	cmpnei	r2,r2,-1
   87240:	1000031e 	bne	r2,zero,87250 <malloc_extend_top+0x160>
      sbrk_base = brk;
   87244:	e0bff317 	ldw	r2,-52(fp)
   87248:	d0a00715 	stw	r2,-32740(gp)
   8724c:	00000a06 	br	87278 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
   87250:	008002b4 	movhi	r2,10
   87254:	10935104 	addi	r2,r2,19780
   87258:	10c00017 	ldw	r3,0(r2)
   8725c:	e13ff317 	ldw	r4,-52(fp)
   87260:	e0bffa17 	ldw	r2,-24(fp)
   87264:	2085c83a 	sub	r2,r4,r2
   87268:	1887883a 	add	r3,r3,r2
   8726c:	008002b4 	movhi	r2,10
   87270:	10935104 	addi	r2,r2,19780
   87274:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
   87278:	e0bff317 	ldw	r2,-52(fp)
   8727c:	10800204 	addi	r2,r2,8
   87280:	108001cc 	andi	r2,r2,7
   87284:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
   87288:	e0bffd17 	ldw	r2,-12(fp)
   8728c:	10000926 	beq	r2,zero,872b4 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
   87290:	00c00204 	movi	r3,8
   87294:	e0bffd17 	ldw	r2,-12(fp)
   87298:	1885c83a 	sub	r2,r3,r2
   8729c:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
   872a0:	e0fff317 	ldw	r3,-52(fp)
   872a4:	e0bff417 	ldw	r2,-48(fp)
   872a8:	1885883a 	add	r2,r3,r2
   872ac:	e0bff315 	stw	r2,-52(fp)
   872b0:	00000106 	br	872b8 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
   872b4:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
   872b8:	e0fff317 	ldw	r3,-52(fp)
   872bc:	e0bff617 	ldw	r2,-40(fp)
   872c0:	1885883a 	add	r2,r3,r2
   872c4:	1007883a 	mov	r3,r2
   872c8:	e0bffb17 	ldw	r2,-20(fp)
   872cc:	10bfffc4 	addi	r2,r2,-1
   872d0:	1884703a 	and	r2,r3,r2
   872d4:	e0fffb17 	ldw	r3,-20(fp)
   872d8:	1885c83a 	sub	r2,r3,r2
   872dc:	e0fff417 	ldw	r3,-48(fp)
   872e0:	1885883a 	add	r2,r3,r2
   872e4:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
   872e8:	e0bff417 	ldw	r2,-48(fp)
   872ec:	100b883a 	mov	r5,r2
   872f0:	e13ffe17 	ldw	r4,-8(fp)
   872f4:	00889600 	call	88960 <_sbrk_r>
   872f8:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
   872fc:	e0bff517 	ldw	r2,-44(fp)
   87300:	10bfffd8 	cmpnei	r2,r2,-1
   87304:	1000051e 	bne	r2,zero,8731c <malloc_extend_top+0x22c>
      {
	correction = 0;
   87308:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
   8730c:	00800044 	movi	r2,1
   87310:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
   87314:	e0bff317 	ldw	r2,-52(fp)
   87318:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
   8731c:	008002b4 	movhi	r2,10
   87320:	10935104 	addi	r2,r2,19780
   87324:	10800017 	ldw	r2,0(r2)
   87328:	1007883a 	mov	r3,r2
   8732c:	e0bff417 	ldw	r2,-48(fp)
   87330:	1885883a 	add	r2,r3,r2
   87334:	1007883a 	mov	r3,r2
   87338:	008002b4 	movhi	r2,10
   8733c:	10935104 	addi	r2,r2,19780
   87340:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
   87344:	008002b4 	movhi	r2,10
   87348:	10868604 	addi	r2,r2,6680
   8734c:	e0fff317 	ldw	r3,-52(fp)
   87350:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
   87354:	e0fff517 	ldw	r3,-44(fp)
   87358:	e0bff317 	ldw	r2,-52(fp)
   8735c:	1885c83a 	sub	r2,r3,r2
   87360:	1007883a 	mov	r3,r2
   87364:	e0bff417 	ldw	r2,-48(fp)
   87368:	1885883a 	add	r2,r3,r2
   8736c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   87370:	008002b4 	movhi	r2,10
   87374:	10868604 	addi	r2,r2,6680
   87378:	10800217 	ldw	r2,8(r2)
   8737c:	e0fffc17 	ldw	r3,-16(fp)
   87380:	18c00054 	ori	r3,r3,1
   87384:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
   87388:	008002b4 	movhi	r2,10
   8738c:	10868604 	addi	r2,r2,6680
   87390:	e0fff817 	ldw	r3,-32(fp)
   87394:	18802826 	beq	r3,r2,87438 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
   87398:	e0bff917 	ldw	r2,-28(fp)
   8739c:	10800428 	cmpgeui	r2,r2,16
   873a0:	1000061e 	bne	r2,zero,873bc <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
   873a4:	008002b4 	movhi	r2,10
   873a8:	10868604 	addi	r2,r2,6680
   873ac:	10800217 	ldw	r2,8(r2)
   873b0:	00c00044 	movi	r3,1
   873b4:	10c00115 	stw	r3,4(r2)
        return;
   873b8:	00003506 	br	87490 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
   873bc:	e0bff917 	ldw	r2,-28(fp)
   873c0:	10fffd04 	addi	r3,r2,-12
   873c4:	00bffe04 	movi	r2,-8
   873c8:	1884703a 	and	r2,r3,r2
   873cc:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
   873d0:	e0bff817 	ldw	r2,-32(fp)
   873d4:	10800117 	ldw	r2,4(r2)
   873d8:	10c0004c 	andi	r3,r2,1
   873dc:	e0bff917 	ldw	r2,-28(fp)
   873e0:	1886b03a 	or	r3,r3,r2
   873e4:	e0bff817 	ldw	r2,-32(fp)
   873e8:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
   873ec:	e0fff817 	ldw	r3,-32(fp)
   873f0:	e0bff917 	ldw	r2,-28(fp)
   873f4:	1885883a 	add	r2,r3,r2
   873f8:	00c00144 	movi	r3,5
   873fc:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
   87400:	e0bff917 	ldw	r2,-28(fp)
   87404:	10800104 	addi	r2,r2,4
   87408:	e0fff817 	ldw	r3,-32(fp)
   8740c:	1885883a 	add	r2,r3,r2
   87410:	00c00144 	movi	r3,5
   87414:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
   87418:	e0bff917 	ldw	r2,-28(fp)
   8741c:	10800430 	cmpltui	r2,r2,16
   87420:	1000051e 	bne	r2,zero,87438 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
   87424:	e0bff817 	ldw	r2,-32(fp)
   87428:	10800204 	addi	r2,r2,8
   8742c:	100b883a 	mov	r5,r2
   87430:	e13ffe17 	ldw	r4,-8(fp)
   87434:	0085c480 	call	85c48 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
   87438:	008002b4 	movhi	r2,10
   8743c:	10935104 	addi	r2,r2,19780
   87440:	10800017 	ldw	r2,0(r2)
   87444:	1007883a 	mov	r3,r2
   87448:	d0a71117 	ldw	r2,-25532(gp)
   8744c:	10c0042e 	bgeu	r2,r3,87460 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
   87450:	008002b4 	movhi	r2,10
   87454:	10935104 	addi	r2,r2,19780
   87458:	10800017 	ldw	r2,0(r2)
   8745c:	d0a71115 	stw	r2,-25532(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
   87460:	008002b4 	movhi	r2,10
   87464:	10935104 	addi	r2,r2,19780
   87468:	10800017 	ldw	r2,0(r2)
   8746c:	1007883a 	mov	r3,r2
   87470:	d0a71217 	ldw	r2,-25528(gp)
   87474:	10c0062e 	bgeu	r2,r3,87490 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
   87478:	008002b4 	movhi	r2,10
   8747c:	10935104 	addi	r2,r2,19780
   87480:	10800017 	ldw	r2,0(r2)
   87484:	d0a71215 	stw	r2,-25528(gp)
   87488:	00000106 	br	87490 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
   8748c:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
   87490:	e037883a 	mov	sp,fp
   87494:	dfc00117 	ldw	ra,4(sp)
   87498:	df000017 	ldw	fp,0(sp)
   8749c:	dec00204 	addi	sp,sp,8
   874a0:	f800283a 	ret

000874a4 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   874a4:	deffef04 	addi	sp,sp,-68
   874a8:	dfc01015 	stw	ra,64(sp)
   874ac:	df000f15 	stw	fp,60(sp)
   874b0:	df000f04 	addi	fp,sp,60
   874b4:	e13ffe15 	stw	r4,-8(fp)
   874b8:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   874bc:	e0bfff17 	ldw	r2,-4(fp)
   874c0:	108002c4 	addi	r2,r2,11
   874c4:	108005f0 	cmpltui	r2,r2,23
   874c8:	1000051e 	bne	r2,zero,874e0 <_malloc_r+0x3c>
   874cc:	e0bfff17 	ldw	r2,-4(fp)
   874d0:	10c002c4 	addi	r3,r2,11
   874d4:	00bffe04 	movi	r2,-8
   874d8:	1884703a 	and	r2,r3,r2
   874dc:	00000106 	br	874e4 <_malloc_r+0x40>
   874e0:	00800404 	movi	r2,16
   874e4:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   874e8:	e0bffa17 	ldw	r2,-24(fp)
   874ec:	10000316 	blt	r2,zero,874fc <_malloc_r+0x58>
   874f0:	e0fffa17 	ldw	r3,-24(fp)
   874f4:	e0bfff17 	ldw	r2,-4(fp)
   874f8:	1880052e 	bgeu	r3,r2,87510 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
   874fc:	e0bffe17 	ldw	r2,-8(fp)
   87500:	00c00304 	movi	r3,12
   87504:	10c00015 	stw	r3,0(r2)
    return 0;
   87508:	0005883a 	mov	r2,zero
   8750c:	0002bf06 	br	8800c <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
   87510:	e13ffe17 	ldw	r4,-8(fp)
   87514:	009e4e80 	call	9e4e8 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
   87518:	e0bffa17 	ldw	r2,-24(fp)
   8751c:	10807e28 	cmpgeui	r2,r2,504
   87520:	10003f1e 	bne	r2,zero,87620 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
   87524:	e0bffa17 	ldw	r2,-24(fp)
   87528:	1004d0fa 	srli	r2,r2,3
   8752c:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
   87530:	e0bff217 	ldw	r2,-56(fp)
   87534:	10800044 	addi	r2,r2,1
   87538:	1085883a 	add	r2,r2,r2
   8753c:	1085883a 	add	r2,r2,r2
   87540:	1087883a 	add	r3,r2,r2
   87544:	008002b4 	movhi	r2,10
   87548:	10868604 	addi	r2,r2,6680
   8754c:	1885883a 	add	r2,r3,r2
   87550:	10bffe04 	addi	r2,r2,-8
   87554:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
   87558:	e0bff917 	ldw	r2,-28(fp)
   8755c:	10800317 	ldw	r2,12(r2)
   87560:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
   87564:	e0fff117 	ldw	r3,-60(fp)
   87568:	e0bff917 	ldw	r2,-28(fp)
   8756c:	1880061e 	bne	r3,r2,87588 <_malloc_r+0xe4>
    {
      q = next_bin(q);
   87570:	e0bff917 	ldw	r2,-28(fp)
   87574:	10800204 	addi	r2,r2,8
   87578:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
   8757c:	e0bff917 	ldw	r2,-28(fp)
   87580:	10800317 	ldw	r2,12(r2)
   87584:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
   87588:	e0fff117 	ldw	r3,-60(fp)
   8758c:	e0bff917 	ldw	r2,-28(fp)
   87590:	18801f26 	beq	r3,r2,87610 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
   87594:	e0bff117 	ldw	r2,-60(fp)
   87598:	10c00117 	ldw	r3,4(r2)
   8759c:	00bfff04 	movi	r2,-4
   875a0:	1884703a 	and	r2,r3,r2
   875a4:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
   875a8:	e0bff117 	ldw	r2,-60(fp)
   875ac:	10800317 	ldw	r2,12(r2)
   875b0:	e0bff815 	stw	r2,-32(fp)
   875b4:	e0bff117 	ldw	r2,-60(fp)
   875b8:	10800217 	ldw	r2,8(r2)
   875bc:	e0bff715 	stw	r2,-36(fp)
   875c0:	e0bff717 	ldw	r2,-36(fp)
   875c4:	e0fff817 	ldw	r3,-32(fp)
   875c8:	10c00315 	stw	r3,12(r2)
   875cc:	e0bff817 	ldw	r2,-32(fp)
   875d0:	e0fff717 	ldw	r3,-36(fp)
   875d4:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
   875d8:	e0fff117 	ldw	r3,-60(fp)
   875dc:	e0bffb17 	ldw	r2,-20(fp)
   875e0:	1885883a 	add	r2,r3,r2
   875e4:	e13ff117 	ldw	r4,-60(fp)
   875e8:	e0fffb17 	ldw	r3,-20(fp)
   875ec:	20c7883a 	add	r3,r4,r3
   875f0:	18c00117 	ldw	r3,4(r3)
   875f4:	18c00054 	ori	r3,r3,1
   875f8:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   875fc:	e13ffe17 	ldw	r4,-8(fp)
   87600:	009e50c0 	call	9e50c <__malloc_unlock>
      return chunk2mem(victim);
   87604:	e0bff117 	ldw	r2,-60(fp)
   87608:	10800204 	addi	r2,r2,8
   8760c:	00027f06 	br	8800c <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
   87610:	e0bff217 	ldw	r2,-56(fp)
   87614:	10800084 	addi	r2,r2,2
   87618:	e0bff215 	stw	r2,-56(fp)
   8761c:	00007306 	br	877ec <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
   87620:	e0bffa17 	ldw	r2,-24(fp)
   87624:	1004d27a 	srli	r2,r2,9
   87628:	1000031e 	bne	r2,zero,87638 <_malloc_r+0x194>
   8762c:	e0bffa17 	ldw	r2,-24(fp)
   87630:	1004d0fa 	srli	r2,r2,3
   87634:	00002906 	br	876dc <_malloc_r+0x238>
   87638:	e0bffa17 	ldw	r2,-24(fp)
   8763c:	1004d27a 	srli	r2,r2,9
   87640:	10800168 	cmpgeui	r2,r2,5
   87644:	1000041e 	bne	r2,zero,87658 <_malloc_r+0x1b4>
   87648:	e0bffa17 	ldw	r2,-24(fp)
   8764c:	1004d1ba 	srli	r2,r2,6
   87650:	10800e04 	addi	r2,r2,56
   87654:	00002106 	br	876dc <_malloc_r+0x238>
   87658:	e0bffa17 	ldw	r2,-24(fp)
   8765c:	1004d27a 	srli	r2,r2,9
   87660:	10800568 	cmpgeui	r2,r2,21
   87664:	1000041e 	bne	r2,zero,87678 <_malloc_r+0x1d4>
   87668:	e0bffa17 	ldw	r2,-24(fp)
   8766c:	1004d27a 	srli	r2,r2,9
   87670:	108016c4 	addi	r2,r2,91
   87674:	00001906 	br	876dc <_malloc_r+0x238>
   87678:	e0bffa17 	ldw	r2,-24(fp)
   8767c:	1004d27a 	srli	r2,r2,9
   87680:	10801568 	cmpgeui	r2,r2,85
   87684:	1000041e 	bne	r2,zero,87698 <_malloc_r+0x1f4>
   87688:	e0bffa17 	ldw	r2,-24(fp)
   8768c:	1004d33a 	srli	r2,r2,12
   87690:	10801b84 	addi	r2,r2,110
   87694:	00001106 	br	876dc <_malloc_r+0x238>
   87698:	e0bffa17 	ldw	r2,-24(fp)
   8769c:	1004d27a 	srli	r2,r2,9
   876a0:	10805568 	cmpgeui	r2,r2,341
   876a4:	1000041e 	bne	r2,zero,876b8 <_malloc_r+0x214>
   876a8:	e0bffa17 	ldw	r2,-24(fp)
   876ac:	1004d3fa 	srli	r2,r2,15
   876b0:	10801dc4 	addi	r2,r2,119
   876b4:	00000906 	br	876dc <_malloc_r+0x238>
   876b8:	e0bffa17 	ldw	r2,-24(fp)
   876bc:	1004d27a 	srli	r2,r2,9
   876c0:	10815568 	cmpgeui	r2,r2,1365
   876c4:	1000041e 	bne	r2,zero,876d8 <_malloc_r+0x234>
   876c8:	e0bffa17 	ldw	r2,-24(fp)
   876cc:	1004d4ba 	srli	r2,r2,18
   876d0:	10801f04 	addi	r2,r2,124
   876d4:	00000106 	br	876dc <_malloc_r+0x238>
   876d8:	00801f84 	movi	r2,126
   876dc:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
   876e0:	e0bff217 	ldw	r2,-56(fp)
   876e4:	10800044 	addi	r2,r2,1
   876e8:	1085883a 	add	r2,r2,r2
   876ec:	1085883a 	add	r2,r2,r2
   876f0:	1087883a 	add	r3,r2,r2
   876f4:	008002b4 	movhi	r2,10
   876f8:	10868604 	addi	r2,r2,6680
   876fc:	1885883a 	add	r2,r3,r2
   87700:	10bffe04 	addi	r2,r2,-8
   87704:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
   87708:	e0bff317 	ldw	r2,-52(fp)
   8770c:	10800317 	ldw	r2,12(r2)
   87710:	e0bff115 	stw	r2,-60(fp)
   87714:	00002f06 	br	877d4 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
   87718:	e0bff117 	ldw	r2,-60(fp)
   8771c:	10c00117 	ldw	r3,4(r2)
   87720:	00bfff04 	movi	r2,-4
   87724:	1884703a 	and	r2,r3,r2
   87728:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
   8772c:	e0fffb17 	ldw	r3,-20(fp)
   87730:	e0bffa17 	ldw	r2,-24(fp)
   87734:	1885c83a 	sub	r2,r3,r2
   87738:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   8773c:	e0bff417 	ldw	r2,-48(fp)
   87740:	10800410 	cmplti	r2,r2,16
   87744:	1000041e 	bne	r2,zero,87758 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
   87748:	e0bff217 	ldw	r2,-56(fp)
   8774c:	10bfffc4 	addi	r2,r2,-1
   87750:	e0bff215 	stw	r2,-56(fp)
        break;   
   87754:	00002206 	br	877e0 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
   87758:	e0bff417 	ldw	r2,-48(fp)
   8775c:	10001a16 	blt	r2,zero,877c8 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
   87760:	e0bff117 	ldw	r2,-60(fp)
   87764:	10800317 	ldw	r2,12(r2)
   87768:	e0bff815 	stw	r2,-32(fp)
   8776c:	e0bff117 	ldw	r2,-60(fp)
   87770:	10800217 	ldw	r2,8(r2)
   87774:	e0bff715 	stw	r2,-36(fp)
   87778:	e0bff717 	ldw	r2,-36(fp)
   8777c:	e0fff817 	ldw	r3,-32(fp)
   87780:	10c00315 	stw	r3,12(r2)
   87784:	e0bff817 	ldw	r2,-32(fp)
   87788:	e0fff717 	ldw	r3,-36(fp)
   8778c:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
   87790:	e0fff117 	ldw	r3,-60(fp)
   87794:	e0bffb17 	ldw	r2,-20(fp)
   87798:	1885883a 	add	r2,r3,r2
   8779c:	e13ff117 	ldw	r4,-60(fp)
   877a0:	e0fffb17 	ldw	r3,-20(fp)
   877a4:	20c7883a 	add	r3,r4,r3
   877a8:	18c00117 	ldw	r3,4(r3)
   877ac:	18c00054 	ori	r3,r3,1
   877b0:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   877b4:	e13ffe17 	ldw	r4,-8(fp)
   877b8:	009e50c0 	call	9e50c <__malloc_unlock>
        return chunk2mem(victim);
   877bc:	e0bff117 	ldw	r2,-60(fp)
   877c0:	10800204 	addi	r2,r2,8
   877c4:	00021106 	br	8800c <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   877c8:	e0bff117 	ldw	r2,-60(fp)
   877cc:	10800317 	ldw	r2,12(r2)
   877d0:	e0bff115 	stw	r2,-60(fp)
   877d4:	e0fff117 	ldw	r3,-60(fp)
   877d8:	e0bff317 	ldw	r2,-52(fp)
   877dc:	18bfce1e 	bne	r3,r2,87718 <__alt_data_end+0xfffd5718>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
   877e0:	e0bff217 	ldw	r2,-56(fp)
   877e4:	10800044 	addi	r2,r2,1
   877e8:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
   877ec:	008002b4 	movhi	r2,10
   877f0:	10868804 	addi	r2,r2,6688
   877f4:	10800217 	ldw	r2,8(r2)
   877f8:	e0bff115 	stw	r2,-60(fp)
   877fc:	008002b4 	movhi	r2,10
   87800:	10868804 	addi	r2,r2,6688
   87804:	e0fff117 	ldw	r3,-60(fp)
   87808:	1880e626 	beq	r3,r2,87ba4 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
   8780c:	e0bff117 	ldw	r2,-60(fp)
   87810:	10c00117 	ldw	r3,4(r2)
   87814:	00bfff04 	movi	r2,-4
   87818:	1884703a 	and	r2,r3,r2
   8781c:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
   87820:	e0fffb17 	ldw	r3,-20(fp)
   87824:	e0bffa17 	ldw	r2,-24(fp)
   87828:	1885c83a 	sub	r2,r3,r2
   8782c:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
   87830:	e0bff417 	ldw	r2,-48(fp)
   87834:	10800410 	cmplti	r2,r2,16
   87838:	1000271e 	bne	r2,zero,878d8 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
   8783c:	e0fff117 	ldw	r3,-60(fp)
   87840:	e0bffa17 	ldw	r2,-24(fp)
   87844:	1885883a 	add	r2,r3,r2
   87848:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
   8784c:	e0bffa17 	ldw	r2,-24(fp)
   87850:	10c00054 	ori	r3,r2,1
   87854:	e0bff117 	ldw	r2,-60(fp)
   87858:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
   8785c:	00c002b4 	movhi	r3,10
   87860:	18c68804 	addi	r3,r3,6688
   87864:	008002b4 	movhi	r2,10
   87868:	10868804 	addi	r2,r2,6688
   8786c:	e13ffc17 	ldw	r4,-16(fp)
   87870:	11000315 	stw	r4,12(r2)
   87874:	10800317 	ldw	r2,12(r2)
   87878:	18800215 	stw	r2,8(r3)
   8787c:	008002b4 	movhi	r2,10
   87880:	10868804 	addi	r2,r2,6688
   87884:	e0fffc17 	ldw	r3,-16(fp)
   87888:	18800315 	stw	r2,12(r3)
   8788c:	e0bffc17 	ldw	r2,-16(fp)
   87890:	10c00317 	ldw	r3,12(r2)
   87894:	e0bffc17 	ldw	r2,-16(fp)
   87898:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
   8789c:	e0bff417 	ldw	r2,-48(fp)
   878a0:	10800054 	ori	r2,r2,1
   878a4:	1007883a 	mov	r3,r2
   878a8:	e0bffc17 	ldw	r2,-16(fp)
   878ac:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
   878b0:	e0bff417 	ldw	r2,-48(fp)
   878b4:	e0fffc17 	ldw	r3,-16(fp)
   878b8:	1885883a 	add	r2,r3,r2
   878bc:	e0fff417 	ldw	r3,-48(fp)
   878c0:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   878c4:	e13ffe17 	ldw	r4,-8(fp)
   878c8:	009e50c0 	call	9e50c <__malloc_unlock>
      return chunk2mem(victim);
   878cc:	e0bff117 	ldw	r2,-60(fp)
   878d0:	10800204 	addi	r2,r2,8
   878d4:	0001cd06 	br	8800c <_malloc_r+0xb68>
    }

    clear_last_remainder;
   878d8:	00c002b4 	movhi	r3,10
   878dc:	18c68804 	addi	r3,r3,6688
   878e0:	008002b4 	movhi	r2,10
   878e4:	10868804 	addi	r2,r2,6688
   878e8:	010002b4 	movhi	r4,10
   878ec:	21068804 	addi	r4,r4,6688
   878f0:	11000315 	stw	r4,12(r2)
   878f4:	10800317 	ldw	r2,12(r2)
   878f8:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
   878fc:	e0bff417 	ldw	r2,-48(fp)
   87900:	10000e16 	blt	r2,zero,8793c <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
   87904:	e0fff117 	ldw	r3,-60(fp)
   87908:	e0bffb17 	ldw	r2,-20(fp)
   8790c:	1885883a 	add	r2,r3,r2
   87910:	e13ff117 	ldw	r4,-60(fp)
   87914:	e0fffb17 	ldw	r3,-20(fp)
   87918:	20c7883a 	add	r3,r4,r3
   8791c:	18c00117 	ldw	r3,4(r3)
   87920:	18c00054 	ori	r3,r3,1
   87924:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   87928:	e13ffe17 	ldw	r4,-8(fp)
   8792c:	009e50c0 	call	9e50c <__malloc_unlock>
      return chunk2mem(victim);
   87930:	e0bff117 	ldw	r2,-60(fp)
   87934:	10800204 	addi	r2,r2,8
   87938:	0001b406 	br	8800c <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   8793c:	e0bffb17 	ldw	r2,-20(fp)
   87940:	10808028 	cmpgeui	r2,r2,512
   87944:	10002c1e 	bne	r2,zero,879f8 <_malloc_r+0x554>
   87948:	e0bffb17 	ldw	r2,-20(fp)
   8794c:	1004d0fa 	srli	r2,r2,3
   87950:	e0bffd15 	stw	r2,-12(fp)
   87954:	00c002b4 	movhi	r3,10
   87958:	18c68604 	addi	r3,r3,6680
   8795c:	008002b4 	movhi	r2,10
   87960:	10868604 	addi	r2,r2,6680
   87964:	11000117 	ldw	r4,4(r2)
   87968:	e0bffd17 	ldw	r2,-12(fp)
   8796c:	1000010e 	bge	r2,zero,87974 <_malloc_r+0x4d0>
   87970:	108000c4 	addi	r2,r2,3
   87974:	1005d0ba 	srai	r2,r2,2
   87978:	100b883a 	mov	r5,r2
   8797c:	00800044 	movi	r2,1
   87980:	1144983a 	sll	r2,r2,r5
   87984:	2084b03a 	or	r2,r4,r2
   87988:	18800115 	stw	r2,4(r3)
   8798c:	e0bffd17 	ldw	r2,-12(fp)
   87990:	10800044 	addi	r2,r2,1
   87994:	1085883a 	add	r2,r2,r2
   87998:	1085883a 	add	r2,r2,r2
   8799c:	1087883a 	add	r3,r2,r2
   879a0:	008002b4 	movhi	r2,10
   879a4:	10868604 	addi	r2,r2,6680
   879a8:	1885883a 	add	r2,r3,r2
   879ac:	10bffe04 	addi	r2,r2,-8
   879b0:	e0bff815 	stw	r2,-32(fp)
   879b4:	e0bff817 	ldw	r2,-32(fp)
   879b8:	10800217 	ldw	r2,8(r2)
   879bc:	e0bff715 	stw	r2,-36(fp)
   879c0:	e0bff117 	ldw	r2,-60(fp)
   879c4:	e0fff817 	ldw	r3,-32(fp)
   879c8:	10c00315 	stw	r3,12(r2)
   879cc:	e0bff117 	ldw	r2,-60(fp)
   879d0:	e0fff717 	ldw	r3,-36(fp)
   879d4:	10c00215 	stw	r3,8(r2)
   879d8:	e0bff817 	ldw	r2,-32(fp)
   879dc:	e0fff117 	ldw	r3,-60(fp)
   879e0:	10c00215 	stw	r3,8(r2)
   879e4:	e0bff817 	ldw	r2,-32(fp)
   879e8:	10c00217 	ldw	r3,8(r2)
   879ec:	e0bff717 	ldw	r2,-36(fp)
   879f0:	10c00315 	stw	r3,12(r2)
   879f4:	00006b06 	br	87ba4 <_malloc_r+0x700>
   879f8:	e0bffb17 	ldw	r2,-20(fp)
   879fc:	1004d27a 	srli	r2,r2,9
   87a00:	1000031e 	bne	r2,zero,87a10 <_malloc_r+0x56c>
   87a04:	e0bffb17 	ldw	r2,-20(fp)
   87a08:	1004d0fa 	srli	r2,r2,3
   87a0c:	00002906 	br	87ab4 <_malloc_r+0x610>
   87a10:	e0bffb17 	ldw	r2,-20(fp)
   87a14:	1004d27a 	srli	r2,r2,9
   87a18:	10800168 	cmpgeui	r2,r2,5
   87a1c:	1000041e 	bne	r2,zero,87a30 <_malloc_r+0x58c>
   87a20:	e0bffb17 	ldw	r2,-20(fp)
   87a24:	1004d1ba 	srli	r2,r2,6
   87a28:	10800e04 	addi	r2,r2,56
   87a2c:	00002106 	br	87ab4 <_malloc_r+0x610>
   87a30:	e0bffb17 	ldw	r2,-20(fp)
   87a34:	1004d27a 	srli	r2,r2,9
   87a38:	10800568 	cmpgeui	r2,r2,21
   87a3c:	1000041e 	bne	r2,zero,87a50 <_malloc_r+0x5ac>
   87a40:	e0bffb17 	ldw	r2,-20(fp)
   87a44:	1004d27a 	srli	r2,r2,9
   87a48:	108016c4 	addi	r2,r2,91
   87a4c:	00001906 	br	87ab4 <_malloc_r+0x610>
   87a50:	e0bffb17 	ldw	r2,-20(fp)
   87a54:	1004d27a 	srli	r2,r2,9
   87a58:	10801568 	cmpgeui	r2,r2,85
   87a5c:	1000041e 	bne	r2,zero,87a70 <_malloc_r+0x5cc>
   87a60:	e0bffb17 	ldw	r2,-20(fp)
   87a64:	1004d33a 	srli	r2,r2,12
   87a68:	10801b84 	addi	r2,r2,110
   87a6c:	00001106 	br	87ab4 <_malloc_r+0x610>
   87a70:	e0bffb17 	ldw	r2,-20(fp)
   87a74:	1004d27a 	srli	r2,r2,9
   87a78:	10805568 	cmpgeui	r2,r2,341
   87a7c:	1000041e 	bne	r2,zero,87a90 <_malloc_r+0x5ec>
   87a80:	e0bffb17 	ldw	r2,-20(fp)
   87a84:	1004d3fa 	srli	r2,r2,15
   87a88:	10801dc4 	addi	r2,r2,119
   87a8c:	00000906 	br	87ab4 <_malloc_r+0x610>
   87a90:	e0bffb17 	ldw	r2,-20(fp)
   87a94:	1004d27a 	srli	r2,r2,9
   87a98:	10815568 	cmpgeui	r2,r2,1365
   87a9c:	1000041e 	bne	r2,zero,87ab0 <_malloc_r+0x60c>
   87aa0:	e0bffb17 	ldw	r2,-20(fp)
   87aa4:	1004d4ba 	srli	r2,r2,18
   87aa8:	10801f04 	addi	r2,r2,124
   87aac:	00000106 	br	87ab4 <_malloc_r+0x610>
   87ab0:	00801f84 	movi	r2,126
   87ab4:	e0bffd15 	stw	r2,-12(fp)
   87ab8:	e0bffd17 	ldw	r2,-12(fp)
   87abc:	10800044 	addi	r2,r2,1
   87ac0:	1085883a 	add	r2,r2,r2
   87ac4:	1085883a 	add	r2,r2,r2
   87ac8:	1087883a 	add	r3,r2,r2
   87acc:	008002b4 	movhi	r2,10
   87ad0:	10868604 	addi	r2,r2,6680
   87ad4:	1885883a 	add	r2,r3,r2
   87ad8:	10bffe04 	addi	r2,r2,-8
   87adc:	e0bff815 	stw	r2,-32(fp)
   87ae0:	e0bff817 	ldw	r2,-32(fp)
   87ae4:	10800217 	ldw	r2,8(r2)
   87ae8:	e0bff715 	stw	r2,-36(fp)
   87aec:	e0fff717 	ldw	r3,-36(fp)
   87af0:	e0bff817 	ldw	r2,-32(fp)
   87af4:	1880121e 	bne	r3,r2,87b40 <_malloc_r+0x69c>
   87af8:	00c002b4 	movhi	r3,10
   87afc:	18c68604 	addi	r3,r3,6680
   87b00:	008002b4 	movhi	r2,10
   87b04:	10868604 	addi	r2,r2,6680
   87b08:	11000117 	ldw	r4,4(r2)
   87b0c:	e0bffd17 	ldw	r2,-12(fp)
   87b10:	1000010e 	bge	r2,zero,87b18 <_malloc_r+0x674>
   87b14:	108000c4 	addi	r2,r2,3
   87b18:	1005d0ba 	srai	r2,r2,2
   87b1c:	100b883a 	mov	r5,r2
   87b20:	00800044 	movi	r2,1
   87b24:	1144983a 	sll	r2,r2,r5
   87b28:	2084b03a 	or	r2,r4,r2
   87b2c:	18800115 	stw	r2,4(r3)
   87b30:	00000f06 	br	87b70 <_malloc_r+0x6cc>
   87b34:	e0bff717 	ldw	r2,-36(fp)
   87b38:	10800217 	ldw	r2,8(r2)
   87b3c:	e0bff715 	stw	r2,-36(fp)
   87b40:	e0fff717 	ldw	r3,-36(fp)
   87b44:	e0bff817 	ldw	r2,-32(fp)
   87b48:	18800626 	beq	r3,r2,87b64 <_malloc_r+0x6c0>
   87b4c:	e0bff717 	ldw	r2,-36(fp)
   87b50:	10c00117 	ldw	r3,4(r2)
   87b54:	00bfff04 	movi	r2,-4
   87b58:	1884703a 	and	r2,r3,r2
   87b5c:	e0fffb17 	ldw	r3,-20(fp)
   87b60:	18bff436 	bltu	r3,r2,87b34 <__alt_data_end+0xfffd5b34>
   87b64:	e0bff717 	ldw	r2,-36(fp)
   87b68:	10800317 	ldw	r2,12(r2)
   87b6c:	e0bff815 	stw	r2,-32(fp)
   87b70:	e0bff117 	ldw	r2,-60(fp)
   87b74:	e0fff817 	ldw	r3,-32(fp)
   87b78:	10c00315 	stw	r3,12(r2)
   87b7c:	e0bff117 	ldw	r2,-60(fp)
   87b80:	e0fff717 	ldw	r3,-36(fp)
   87b84:	10c00215 	stw	r3,8(r2)
   87b88:	e0bff817 	ldw	r2,-32(fp)
   87b8c:	e0fff117 	ldw	r3,-60(fp)
   87b90:	10c00215 	stw	r3,8(r2)
   87b94:	e0bff817 	ldw	r2,-32(fp)
   87b98:	10c00217 	ldw	r3,8(r2)
   87b9c:	e0bff717 	ldw	r2,-36(fp)
   87ba0:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
   87ba4:	e0bff217 	ldw	r2,-56(fp)
   87ba8:	1000010e 	bge	r2,zero,87bb0 <_malloc_r+0x70c>
   87bac:	108000c4 	addi	r2,r2,3
   87bb0:	1005d0ba 	srai	r2,r2,2
   87bb4:	1007883a 	mov	r3,r2
   87bb8:	00800044 	movi	r2,1
   87bbc:	10c4983a 	sll	r2,r2,r3
   87bc0:	e0bff515 	stw	r2,-44(fp)
   87bc4:	008002b4 	movhi	r2,10
   87bc8:	10868604 	addi	r2,r2,6680
   87bcc:	10c00117 	ldw	r3,4(r2)
   87bd0:	e0bff517 	ldw	r2,-44(fp)
   87bd4:	1880c636 	bltu	r3,r2,87ef0 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
   87bd8:	008002b4 	movhi	r2,10
   87bdc:	10868604 	addi	r2,r2,6680
   87be0:	10c00117 	ldw	r3,4(r2)
   87be4:	e0bff517 	ldw	r2,-44(fp)
   87be8:	1884703a 	and	r2,r3,r2
   87bec:	1000151e 	bne	r2,zero,87c44 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   87bf0:	e0fff217 	ldw	r3,-56(fp)
   87bf4:	00bfff04 	movi	r2,-4
   87bf8:	1884703a 	and	r2,r3,r2
   87bfc:	10800104 	addi	r2,r2,4
   87c00:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
   87c04:	e0bff517 	ldw	r2,-44(fp)
   87c08:	1085883a 	add	r2,r2,r2
   87c0c:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
   87c10:	00000606 	br	87c2c <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
   87c14:	e0bff217 	ldw	r2,-56(fp)
   87c18:	10800104 	addi	r2,r2,4
   87c1c:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
   87c20:	e0bff517 	ldw	r2,-44(fp)
   87c24:	1085883a 	add	r2,r2,r2
   87c28:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   87c2c:	008002b4 	movhi	r2,10
   87c30:	10868604 	addi	r2,r2,6680
   87c34:	10c00117 	ldw	r3,4(r2)
   87c38:	e0bff517 	ldw	r2,-44(fp)
   87c3c:	1884703a 	and	r2,r3,r2
   87c40:	103ff426 	beq	r2,zero,87c14 <__alt_data_end+0xfffd5c14>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
   87c44:	e0bff217 	ldw	r2,-56(fp)
   87c48:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
   87c4c:	e0bff217 	ldw	r2,-56(fp)
   87c50:	10800044 	addi	r2,r2,1
   87c54:	1085883a 	add	r2,r2,r2
   87c58:	1085883a 	add	r2,r2,r2
   87c5c:	1087883a 	add	r3,r2,r2
   87c60:	008002b4 	movhi	r2,10
   87c64:	10868604 	addi	r2,r2,6680
   87c68:	1885883a 	add	r2,r3,r2
   87c6c:	10bffe04 	addi	r2,r2,-8
   87c70:	e0bff315 	stw	r2,-52(fp)
   87c74:	e0bff317 	ldw	r2,-52(fp)
   87c78:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   87c7c:	e0bff317 	ldw	r2,-52(fp)
   87c80:	10800317 	ldw	r2,12(r2)
   87c84:	e0bff115 	stw	r2,-60(fp)
   87c88:	00005e06 	br	87e04 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
   87c8c:	e0bff117 	ldw	r2,-60(fp)
   87c90:	10c00117 	ldw	r3,4(r2)
   87c94:	00bfff04 	movi	r2,-4
   87c98:	1884703a 	and	r2,r3,r2
   87c9c:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
   87ca0:	e0fffb17 	ldw	r3,-20(fp)
   87ca4:	e0bffa17 	ldw	r2,-24(fp)
   87ca8:	1885c83a 	sub	r2,r3,r2
   87cac:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
   87cb0:	e0bff417 	ldw	r2,-48(fp)
   87cb4:	10800410 	cmplti	r2,r2,16
   87cb8:	1000331e 	bne	r2,zero,87d88 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
   87cbc:	e0fff117 	ldw	r3,-60(fp)
   87cc0:	e0bffa17 	ldw	r2,-24(fp)
   87cc4:	1885883a 	add	r2,r3,r2
   87cc8:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
   87ccc:	e0bffa17 	ldw	r2,-24(fp)
   87cd0:	10c00054 	ori	r3,r2,1
   87cd4:	e0bff117 	ldw	r2,-60(fp)
   87cd8:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   87cdc:	e0bff117 	ldw	r2,-60(fp)
   87ce0:	10800317 	ldw	r2,12(r2)
   87ce4:	e0bff815 	stw	r2,-32(fp)
   87ce8:	e0bff117 	ldw	r2,-60(fp)
   87cec:	10800217 	ldw	r2,8(r2)
   87cf0:	e0bff715 	stw	r2,-36(fp)
   87cf4:	e0bff717 	ldw	r2,-36(fp)
   87cf8:	e0fff817 	ldw	r3,-32(fp)
   87cfc:	10c00315 	stw	r3,12(r2)
   87d00:	e0bff817 	ldw	r2,-32(fp)
   87d04:	e0fff717 	ldw	r3,-36(fp)
   87d08:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
   87d0c:	00c002b4 	movhi	r3,10
   87d10:	18c68804 	addi	r3,r3,6688
   87d14:	008002b4 	movhi	r2,10
   87d18:	10868804 	addi	r2,r2,6688
   87d1c:	e13ffc17 	ldw	r4,-16(fp)
   87d20:	11000315 	stw	r4,12(r2)
   87d24:	10800317 	ldw	r2,12(r2)
   87d28:	18800215 	stw	r2,8(r3)
   87d2c:	008002b4 	movhi	r2,10
   87d30:	10868804 	addi	r2,r2,6688
   87d34:	e0fffc17 	ldw	r3,-16(fp)
   87d38:	18800315 	stw	r2,12(r3)
   87d3c:	e0bffc17 	ldw	r2,-16(fp)
   87d40:	10c00317 	ldw	r3,12(r2)
   87d44:	e0bffc17 	ldw	r2,-16(fp)
   87d48:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
   87d4c:	e0bff417 	ldw	r2,-48(fp)
   87d50:	10800054 	ori	r2,r2,1
   87d54:	1007883a 	mov	r3,r2
   87d58:	e0bffc17 	ldw	r2,-16(fp)
   87d5c:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
   87d60:	e0bff417 	ldw	r2,-48(fp)
   87d64:	e0fffc17 	ldw	r3,-16(fp)
   87d68:	1885883a 	add	r2,r3,r2
   87d6c:	e0fff417 	ldw	r3,-48(fp)
   87d70:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   87d74:	e13ffe17 	ldw	r4,-8(fp)
   87d78:	009e50c0 	call	9e50c <__malloc_unlock>
            return chunk2mem(victim);
   87d7c:	e0bff117 	ldw	r2,-60(fp)
   87d80:	10800204 	addi	r2,r2,8
   87d84:	0000a106 	br	8800c <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
   87d88:	e0bff417 	ldw	r2,-48(fp)
   87d8c:	10001a16 	blt	r2,zero,87df8 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
   87d90:	e0fff117 	ldw	r3,-60(fp)
   87d94:	e0bffb17 	ldw	r2,-20(fp)
   87d98:	1885883a 	add	r2,r3,r2
   87d9c:	e13ff117 	ldw	r4,-60(fp)
   87da0:	e0fffb17 	ldw	r3,-20(fp)
   87da4:	20c7883a 	add	r3,r4,r3
   87da8:	18c00117 	ldw	r3,4(r3)
   87dac:	18c00054 	ori	r3,r3,1
   87db0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   87db4:	e0bff117 	ldw	r2,-60(fp)
   87db8:	10800317 	ldw	r2,12(r2)
   87dbc:	e0bff815 	stw	r2,-32(fp)
   87dc0:	e0bff117 	ldw	r2,-60(fp)
   87dc4:	10800217 	ldw	r2,8(r2)
   87dc8:	e0bff715 	stw	r2,-36(fp)
   87dcc:	e0bff717 	ldw	r2,-36(fp)
   87dd0:	e0fff817 	ldw	r3,-32(fp)
   87dd4:	10c00315 	stw	r3,12(r2)
   87dd8:	e0bff817 	ldw	r2,-32(fp)
   87ddc:	e0fff717 	ldw	r3,-36(fp)
   87de0:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   87de4:	e13ffe17 	ldw	r4,-8(fp)
   87de8:	009e50c0 	call	9e50c <__malloc_unlock>
            return chunk2mem(victim);
   87dec:	e0bff117 	ldw	r2,-60(fp)
   87df0:	10800204 	addi	r2,r2,8
   87df4:	00008506 	br	8800c <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   87df8:	e0bff117 	ldw	r2,-60(fp)
   87dfc:	10800317 	ldw	r2,12(r2)
   87e00:	e0bff115 	stw	r2,-60(fp)
   87e04:	e0fff117 	ldw	r3,-60(fp)
   87e08:	e0bff317 	ldw	r2,-52(fp)
   87e0c:	18bf9f1e 	bne	r3,r2,87c8c <__alt_data_end+0xfffd5c8c>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
   87e10:	e0bff317 	ldw	r2,-52(fp)
   87e14:	10800204 	addi	r2,r2,8
   87e18:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   87e1c:	e0bff217 	ldw	r2,-56(fp)
   87e20:	10800044 	addi	r2,r2,1
   87e24:	e0bff215 	stw	r2,-56(fp)
   87e28:	e0bff217 	ldw	r2,-56(fp)
   87e2c:	108000cc 	andi	r2,r2,3
   87e30:	103f921e 	bne	r2,zero,87c7c <__alt_data_end+0xfffd5c7c>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   87e34:	e0bff617 	ldw	r2,-40(fp)
   87e38:	108000cc 	andi	r2,r2,3
   87e3c:	10000a1e 	bne	r2,zero,87e68 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
   87e40:	008002b4 	movhi	r2,10
   87e44:	10868604 	addi	r2,r2,6680
   87e48:	00c002b4 	movhi	r3,10
   87e4c:	18c68604 	addi	r3,r3,6680
   87e50:	19000117 	ldw	r4,4(r3)
   87e54:	e0fff517 	ldw	r3,-44(fp)
   87e58:	00c6303a 	nor	r3,zero,r3
   87e5c:	20c6703a 	and	r3,r4,r3
   87e60:	10c00115 	stw	r3,4(r2)
          break;
   87e64:	00000a06 	br	87e90 <_malloc_r+0x9ec>
        }
        --startidx;
   87e68:	e0bff617 	ldw	r2,-40(fp)
   87e6c:	10bfffc4 	addi	r2,r2,-1
   87e70:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
   87e74:	e0bff917 	ldw	r2,-28(fp)
   87e78:	10bffe04 	addi	r2,r2,-8
   87e7c:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
   87e80:	e0bff917 	ldw	r2,-28(fp)
   87e84:	10c00217 	ldw	r3,8(r2)
   87e88:	e0bff917 	ldw	r2,-28(fp)
   87e8c:	18bfe926 	beq	r3,r2,87e34 <__alt_data_end+0xfffd5e34>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
   87e90:	e0bff517 	ldw	r2,-44(fp)
   87e94:	1085883a 	add	r2,r2,r2
   87e98:	e0bff515 	stw	r2,-44(fp)
   87e9c:	008002b4 	movhi	r2,10
   87ea0:	10868604 	addi	r2,r2,6680
   87ea4:	10c00117 	ldw	r3,4(r2)
   87ea8:	e0bff517 	ldw	r2,-44(fp)
   87eac:	18801036 	bltu	r3,r2,87ef0 <_malloc_r+0xa4c>
   87eb0:	e0bff517 	ldw	r2,-44(fp)
   87eb4:	10000e26 	beq	r2,zero,87ef0 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
   87eb8:	00000606 	br	87ed4 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
   87ebc:	e0bff217 	ldw	r2,-56(fp)
   87ec0:	10800104 	addi	r2,r2,4
   87ec4:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
   87ec8:	e0bff517 	ldw	r2,-44(fp)
   87ecc:	1085883a 	add	r2,r2,r2
   87ed0:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   87ed4:	008002b4 	movhi	r2,10
   87ed8:	10868604 	addi	r2,r2,6680
   87edc:	10c00117 	ldw	r3,4(r2)
   87ee0:	e0bff517 	ldw	r2,-44(fp)
   87ee4:	1884703a 	and	r2,r3,r2
   87ee8:	103ff426 	beq	r2,zero,87ebc <__alt_data_end+0xfffd5ebc>
          block <<= 1;
        }
      }
      else
        break;
    }
   87eec:	003f5506 	br	87c44 <__alt_data_end+0xfffd5c44>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   87ef0:	008002b4 	movhi	r2,10
   87ef4:	10868604 	addi	r2,r2,6680
   87ef8:	10800217 	ldw	r2,8(r2)
   87efc:	10c00117 	ldw	r3,4(r2)
   87f00:	00bfff04 	movi	r2,-4
   87f04:	1886703a 	and	r3,r3,r2
   87f08:	e0bffa17 	ldw	r2,-24(fp)
   87f0c:	1885c83a 	sub	r2,r3,r2
   87f10:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   87f14:	008002b4 	movhi	r2,10
   87f18:	10868604 	addi	r2,r2,6680
   87f1c:	10800217 	ldw	r2,8(r2)
   87f20:	10c00117 	ldw	r3,4(r2)
   87f24:	00bfff04 	movi	r2,-4
   87f28:	1886703a 	and	r3,r3,r2
   87f2c:	e0bffa17 	ldw	r2,-24(fp)
   87f30:	18800336 	bltu	r3,r2,87f40 <_malloc_r+0xa9c>
   87f34:	e0bff417 	ldw	r2,-48(fp)
   87f38:	10800408 	cmpgei	r2,r2,16
   87f3c:	10001b1e 	bne	r2,zero,87fac <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
   87f40:	e17ffa17 	ldw	r5,-24(fp)
   87f44:	e13ffe17 	ldw	r4,-8(fp)
   87f48:	00870f00 	call	870f0 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
   87f4c:	008002b4 	movhi	r2,10
   87f50:	10868604 	addi	r2,r2,6680
   87f54:	10800217 	ldw	r2,8(r2)
   87f58:	10c00117 	ldw	r3,4(r2)
   87f5c:	00bfff04 	movi	r2,-4
   87f60:	1886703a 	and	r3,r3,r2
   87f64:	e0bffa17 	ldw	r2,-24(fp)
   87f68:	1885c83a 	sub	r2,r3,r2
   87f6c:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   87f70:	008002b4 	movhi	r2,10
   87f74:	10868604 	addi	r2,r2,6680
   87f78:	10800217 	ldw	r2,8(r2)
   87f7c:	10c00117 	ldw	r3,4(r2)
   87f80:	00bfff04 	movi	r2,-4
   87f84:	1886703a 	and	r3,r3,r2
   87f88:	e0bffa17 	ldw	r2,-24(fp)
   87f8c:	18800336 	bltu	r3,r2,87f9c <_malloc_r+0xaf8>
   87f90:	e0bff417 	ldw	r2,-48(fp)
   87f94:	10800408 	cmpgei	r2,r2,16
   87f98:	1000041e 	bne	r2,zero,87fac <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
   87f9c:	e13ffe17 	ldw	r4,-8(fp)
   87fa0:	009e50c0 	call	9e50c <__malloc_unlock>
      return 0; /* propagate failure */
   87fa4:	0005883a 	mov	r2,zero
   87fa8:	00001806 	br	8800c <_malloc_r+0xb68>
    }
  }

  victim = top;
   87fac:	008002b4 	movhi	r2,10
   87fb0:	10868604 	addi	r2,r2,6680
   87fb4:	10800217 	ldw	r2,8(r2)
   87fb8:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
   87fbc:	e0bffa17 	ldw	r2,-24(fp)
   87fc0:	10c00054 	ori	r3,r2,1
   87fc4:	e0bff117 	ldw	r2,-60(fp)
   87fc8:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
   87fcc:	008002b4 	movhi	r2,10
   87fd0:	10868604 	addi	r2,r2,6680
   87fd4:	e13ff117 	ldw	r4,-60(fp)
   87fd8:	e0fffa17 	ldw	r3,-24(fp)
   87fdc:	20c7883a 	add	r3,r4,r3
   87fe0:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
   87fe4:	008002b4 	movhi	r2,10
   87fe8:	10868604 	addi	r2,r2,6680
   87fec:	10800217 	ldw	r2,8(r2)
   87ff0:	e0fff417 	ldw	r3,-48(fp)
   87ff4:	18c00054 	ori	r3,r3,1
   87ff8:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   87ffc:	e13ffe17 	ldw	r4,-8(fp)
   88000:	009e50c0 	call	9e50c <__malloc_unlock>
  return chunk2mem(victim);
   88004:	e0bff117 	ldw	r2,-60(fp)
   88008:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   8800c:	e037883a 	mov	sp,fp
   88010:	dfc00117 	ldw	ra,4(sp)
   88014:	df000017 	ldw	fp,0(sp)
   88018:	dec00204 	addi	sp,sp,8
   8801c:	f800283a 	ret

00088020 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
   88020:	defff704 	addi	sp,sp,-36
   88024:	df000815 	stw	fp,32(sp)
   88028:	df000804 	addi	fp,sp,32
   8802c:	e13ffd15 	stw	r4,-12(fp)
   88030:	e17ffe15 	stw	r5,-8(fp)
   88034:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
   88038:	e0bffd17 	ldw	r2,-12(fp)
   8803c:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
   88040:	e0bffe17 	ldw	r2,-8(fp)
   88044:	10803fcc 	andi	r2,r2,255
   88048:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
   8804c:	00000c06 	br	88080 <memset+0x60>
    {
      if (n--)
   88050:	e0bfff17 	ldw	r2,-4(fp)
   88054:	10ffffc4 	addi	r3,r2,-1
   88058:	e0ffff15 	stw	r3,-4(fp)
   8805c:	10000626 	beq	r2,zero,88078 <memset+0x58>
        *s++ = (char) c;
   88060:	e0bff817 	ldw	r2,-32(fp)
   88064:	10c00044 	addi	r3,r2,1
   88068:	e0fff815 	stw	r3,-32(fp)
   8806c:	e0fffe17 	ldw	r3,-8(fp)
   88070:	10c00005 	stb	r3,0(r2)
   88074:	00000206 	br	88080 <memset+0x60>
      else
        return m;
   88078:	e0bffd17 	ldw	r2,-12(fp)
   8807c:	00005506 	br	881d4 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
   88080:	e0bff817 	ldw	r2,-32(fp)
   88084:	108000cc 	andi	r2,r2,3
   88088:	103ff11e 	bne	r2,zero,88050 <__alt_data_end+0xfffd6050>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
   8808c:	e0bfff17 	ldw	r2,-4(fp)
   88090:	10800130 	cmpltui	r2,r2,4
   88094:	10004a1e 	bne	r2,zero,881c0 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
   88098:	e0bff817 	ldw	r2,-32(fp)
   8809c:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
   880a0:	e0bffc17 	ldw	r2,-16(fp)
   880a4:	1006923a 	slli	r3,r2,8
   880a8:	e0bffc17 	ldw	r2,-16(fp)
   880ac:	1884b03a 	or	r2,r3,r2
   880b0:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
   880b4:	e0bffa17 	ldw	r2,-24(fp)
   880b8:	1004943a 	slli	r2,r2,16
   880bc:	e0fffa17 	ldw	r3,-24(fp)
   880c0:	1884b03a 	or	r2,r3,r2
   880c4:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   880c8:	00800804 	movi	r2,32
   880cc:	e0bff915 	stw	r2,-28(fp)
   880d0:	00000906 	br	880f8 <memset+0xd8>
        buffer = (buffer << i) | buffer;
   880d4:	e0fffa17 	ldw	r3,-24(fp)
   880d8:	e0bff917 	ldw	r2,-28(fp)
   880dc:	1884983a 	sll	r2,r3,r2
   880e0:	e0fffa17 	ldw	r3,-24(fp)
   880e4:	1884b03a 	or	r2,r3,r2
   880e8:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   880ec:	e0bff917 	ldw	r2,-28(fp)
   880f0:	1085883a 	add	r2,r2,r2
   880f4:	e0bff915 	stw	r2,-28(fp)
   880f8:	e0bff917 	ldw	r2,-28(fp)
   880fc:	10800830 	cmpltui	r2,r2,32
   88100:	103ff41e 	bne	r2,zero,880d4 <__alt_data_end+0xfffd60d4>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   88104:	00001706 	br	88164 <memset+0x144>
        {
          *aligned_addr++ = buffer;
   88108:	e0bffb17 	ldw	r2,-20(fp)
   8810c:	10c00104 	addi	r3,r2,4
   88110:	e0fffb15 	stw	r3,-20(fp)
   88114:	e0fffa17 	ldw	r3,-24(fp)
   88118:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   8811c:	e0bffb17 	ldw	r2,-20(fp)
   88120:	10c00104 	addi	r3,r2,4
   88124:	e0fffb15 	stw	r3,-20(fp)
   88128:	e0fffa17 	ldw	r3,-24(fp)
   8812c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   88130:	e0bffb17 	ldw	r2,-20(fp)
   88134:	10c00104 	addi	r3,r2,4
   88138:	e0fffb15 	stw	r3,-20(fp)
   8813c:	e0fffa17 	ldw	r3,-24(fp)
   88140:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   88144:	e0bffb17 	ldw	r2,-20(fp)
   88148:	10c00104 	addi	r3,r2,4
   8814c:	e0fffb15 	stw	r3,-20(fp)
   88150:	e0fffa17 	ldw	r3,-24(fp)
   88154:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
   88158:	e0bfff17 	ldw	r2,-4(fp)
   8815c:	10bffc04 	addi	r2,r2,-16
   88160:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   88164:	e0bfff17 	ldw	r2,-4(fp)
   88168:	10800428 	cmpgeui	r2,r2,16
   8816c:	103fe61e 	bne	r2,zero,88108 <__alt_data_end+0xfffd6108>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   88170:	00000806 	br	88194 <memset+0x174>
        {
          *aligned_addr++ = buffer;
   88174:	e0bffb17 	ldw	r2,-20(fp)
   88178:	10c00104 	addi	r3,r2,4
   8817c:	e0fffb15 	stw	r3,-20(fp)
   88180:	e0fffa17 	ldw	r3,-24(fp)
   88184:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
   88188:	e0bfff17 	ldw	r2,-4(fp)
   8818c:	10bfff04 	addi	r2,r2,-4
   88190:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   88194:	e0bfff17 	ldw	r2,-4(fp)
   88198:	10800128 	cmpgeui	r2,r2,4
   8819c:	103ff51e 	bne	r2,zero,88174 <__alt_data_end+0xfffd6174>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
   881a0:	e0bffb17 	ldw	r2,-20(fp)
   881a4:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   881a8:	00000506 	br	881c0 <memset+0x1a0>
    *s++ = (char) c;
   881ac:	e0bff817 	ldw	r2,-32(fp)
   881b0:	10c00044 	addi	r3,r2,1
   881b4:	e0fff815 	stw	r3,-32(fp)
   881b8:	e0fffe17 	ldw	r3,-8(fp)
   881bc:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   881c0:	e0bfff17 	ldw	r2,-4(fp)
   881c4:	10ffffc4 	addi	r3,r2,-1
   881c8:	e0ffff15 	stw	r3,-4(fp)
   881cc:	103ff71e 	bne	r2,zero,881ac <__alt_data_end+0xfffd61ac>
    *s++ = (char) c;

  return m;
   881d0:	e0bffd17 	ldw	r2,-12(fp)
}
   881d4:	e037883a 	mov	sp,fp
   881d8:	df000017 	ldw	fp,0(sp)
   881dc:	dec00104 	addi	sp,sp,4
   881e0:	f800283a 	ret

000881e4 <_open_r>:
_DEFUN (_open_r, (ptr, file, flags, mode),
     struct _reent *ptr _AND
     _CONST char *file _AND
     int flags _AND
     int mode)
{
   881e4:	defff904 	addi	sp,sp,-28
   881e8:	dfc00615 	stw	ra,24(sp)
   881ec:	df000515 	stw	fp,20(sp)
   881f0:	df000504 	addi	fp,sp,20
   881f4:	e13ffc15 	stw	r4,-16(fp)
   881f8:	e17ffd15 	stw	r5,-12(fp)
   881fc:	e1bffe15 	stw	r6,-8(fp)
   88200:	e1ffff15 	stw	r7,-4(fp)
  int ret;

  errno = 0;
   88204:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = _open (file, flags, mode)) == -1 && errno != 0)
   88208:	e1bfff17 	ldw	r6,-4(fp)
   8820c:	e17ffe17 	ldw	r5,-8(fp)
   88210:	e13ffd17 	ldw	r4,-12(fp)
   88214:	009e6580 	call	9e658 <open>
   88218:	e0bffb15 	stw	r2,-20(fp)
   8821c:	e0bffb17 	ldw	r2,-20(fp)
   88220:	10bfffd8 	cmpnei	r2,r2,-1
   88224:	1000051e 	bne	r2,zero,8823c <_open_r+0x58>
   88228:	d0a70f17 	ldw	r2,-25540(gp)
   8822c:	10000326 	beq	r2,zero,8823c <_open_r+0x58>
    ptr->_errno = errno;
   88230:	d0e70f17 	ldw	r3,-25540(gp)
   88234:	e0bffc17 	ldw	r2,-16(fp)
   88238:	10c00015 	stw	r3,0(r2)
  return ret;
   8823c:	e0bffb17 	ldw	r2,-20(fp)
}
   88240:	e037883a 	mov	sp,fp
   88244:	dfc00117 	ldw	ra,4(sp)
   88248:	df000017 	ldw	fp,0(sp)
   8824c:	dec00204 	addi	sp,sp,8
   88250:	f800283a 	ret

00088254 <_putc_r>:
int
_DEFUN(_putc_r, (ptr, c, fp),
       struct _reent *ptr _AND
       int c _AND
       register FILE *fp)
{
   88254:	defff904 	addi	sp,sp,-28
   88258:	dfc00615 	stw	ra,24(sp)
   8825c:	df000515 	stw	fp,20(sp)
   88260:	dc000415 	stw	r16,16(sp)
   88264:	df000504 	addi	fp,sp,20
   88268:	e13ffd15 	stw	r4,-12(fp)
   8826c:	e17ffe15 	stw	r5,-8(fp)
   88270:	3021883a 	mov	r16,r6
  int result;
  CHECK_INIT (ptr, fp);
   88274:	e0bffd17 	ldw	r2,-12(fp)
   88278:	e0bffb15 	stw	r2,-20(fp)
   8827c:	e0bffb17 	ldw	r2,-20(fp)
   88280:	10000526 	beq	r2,zero,88298 <_putc_r+0x44>
   88284:	e0bffb17 	ldw	r2,-20(fp)
   88288:	10800e17 	ldw	r2,56(r2)
   8828c:	1000021e 	bne	r2,zero,88298 <_putc_r+0x44>
   88290:	e13ffb17 	ldw	r4,-20(fp)
   88294:	008573c0 	call	8573c <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (ptr, c, fp);
   88298:	80800217 	ldw	r2,8(r16)
   8829c:	10bfffc4 	addi	r2,r2,-1
   882a0:	80800215 	stw	r2,8(r16)
   882a4:	80800217 	ldw	r2,8(r16)
   882a8:	10001b0e 	bge	r2,zero,88318 <_putc_r+0xc4>
   882ac:	80c00217 	ldw	r3,8(r16)
   882b0:	80800617 	ldw	r2,24(r16)
   882b4:	18801316 	blt	r3,r2,88304 <_putc_r+0xb0>
   882b8:	80800017 	ldw	r2,0(r16)
   882bc:	e0fffe17 	ldw	r3,-8(fp)
   882c0:	10c00005 	stb	r3,0(r2)
   882c4:	80800017 	ldw	r2,0(r16)
   882c8:	10800003 	ldbu	r2,0(r2)
   882cc:	10803fcc 	andi	r2,r2,255
   882d0:	108002a0 	cmpeqi	r2,r2,10
   882d4:	1000061e 	bne	r2,zero,882f0 <_putc_r+0x9c>
   882d8:	80800017 	ldw	r2,0(r16)
   882dc:	10c00044 	addi	r3,r2,1
   882e0:	80c00015 	stw	r3,0(r16)
   882e4:	10800003 	ldbu	r2,0(r2)
   882e8:	10803fcc 	andi	r2,r2,255
   882ec:	00001206 	br	88338 <_putc_r+0xe4>
   882f0:	800d883a 	mov	r6,r16
   882f4:	01400284 	movi	r5,10
   882f8:	e13ffd17 	ldw	r4,-12(fp)
   882fc:	008cf800 	call	8cf80 <__swbuf_r>
   88300:	00000d06 	br	88338 <_putc_r+0xe4>
   88304:	800d883a 	mov	r6,r16
   88308:	e17ffe17 	ldw	r5,-8(fp)
   8830c:	e13ffd17 	ldw	r4,-12(fp)
   88310:	008cf800 	call	8cf80 <__swbuf_r>
   88314:	00000806 	br	88338 <_putc_r+0xe4>
   88318:	80800017 	ldw	r2,0(r16)
   8831c:	e0fffe17 	ldw	r3,-8(fp)
   88320:	10c00005 	stb	r3,0(r2)
   88324:	80800017 	ldw	r2,0(r16)
   88328:	10c00044 	addi	r3,r2,1
   8832c:	80c00015 	stw	r3,0(r16)
   88330:	10800003 	ldbu	r2,0(r2)
   88334:	10803fcc 	andi	r2,r2,255
   88338:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return result;
   8833c:	e0bffc17 	ldw	r2,-16(fp)
}
   88340:	e6ffff04 	addi	sp,fp,-4
   88344:	dfc00217 	ldw	ra,8(sp)
   88348:	df000117 	ldw	fp,4(sp)
   8834c:	dc000017 	ldw	r16,0(sp)
   88350:	dec00304 	addi	sp,sp,12
   88354:	f800283a 	ret

00088358 <putc>:
#ifndef _REENT_ONLY
int
_DEFUN(putc, (c, fp),
       int c _AND
       register FILE *fp)
{
   88358:	defff904 	addi	sp,sp,-28
   8835c:	dfc00615 	stw	ra,24(sp)
   88360:	df000515 	stw	fp,20(sp)
   88364:	dc000415 	stw	r16,16(sp)
   88368:	df000504 	addi	fp,sp,20
   8836c:	e13ffe15 	stw	r4,-8(fp)
   88370:	2821883a 	mov	r16,r5
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int result;
  struct _reent *reent = _REENT;
   88374:	d0a00417 	ldw	r2,-32752(gp)
   88378:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT (reent, fp);
   8837c:	e0bffb17 	ldw	r2,-20(fp)
   88380:	e0bffc15 	stw	r2,-16(fp)
   88384:	e0bffc17 	ldw	r2,-16(fp)
   88388:	10000526 	beq	r2,zero,883a0 <putc+0x48>
   8838c:	e0bffc17 	ldw	r2,-16(fp)
   88390:	10800e17 	ldw	r2,56(r2)
   88394:	1000021e 	bne	r2,zero,883a0 <putc+0x48>
   88398:	e13ffc17 	ldw	r4,-16(fp)
   8839c:	008573c0 	call	8573c <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (reent, c, fp);
   883a0:	80800217 	ldw	r2,8(r16)
   883a4:	10bfffc4 	addi	r2,r2,-1
   883a8:	80800215 	stw	r2,8(r16)
   883ac:	80800217 	ldw	r2,8(r16)
   883b0:	10001b0e 	bge	r2,zero,88420 <putc+0xc8>
   883b4:	80c00217 	ldw	r3,8(r16)
   883b8:	80800617 	ldw	r2,24(r16)
   883bc:	18801316 	blt	r3,r2,8840c <putc+0xb4>
   883c0:	80800017 	ldw	r2,0(r16)
   883c4:	e0fffe17 	ldw	r3,-8(fp)
   883c8:	10c00005 	stb	r3,0(r2)
   883cc:	80800017 	ldw	r2,0(r16)
   883d0:	10800003 	ldbu	r2,0(r2)
   883d4:	10803fcc 	andi	r2,r2,255
   883d8:	108002a0 	cmpeqi	r2,r2,10
   883dc:	1000061e 	bne	r2,zero,883f8 <putc+0xa0>
   883e0:	80800017 	ldw	r2,0(r16)
   883e4:	10c00044 	addi	r3,r2,1
   883e8:	80c00015 	stw	r3,0(r16)
   883ec:	10800003 	ldbu	r2,0(r2)
   883f0:	10803fcc 	andi	r2,r2,255
   883f4:	00001206 	br	88440 <putc+0xe8>
   883f8:	800d883a 	mov	r6,r16
   883fc:	01400284 	movi	r5,10
   88400:	e13ffb17 	ldw	r4,-20(fp)
   88404:	008cf800 	call	8cf80 <__swbuf_r>
   88408:	00000d06 	br	88440 <putc+0xe8>
   8840c:	800d883a 	mov	r6,r16
   88410:	e17ffe17 	ldw	r5,-8(fp)
   88414:	e13ffb17 	ldw	r4,-20(fp)
   88418:	008cf800 	call	8cf80 <__swbuf_r>
   8841c:	00000806 	br	88440 <putc+0xe8>
   88420:	80800017 	ldw	r2,0(r16)
   88424:	e0fffe17 	ldw	r3,-8(fp)
   88428:	10c00005 	stb	r3,0(r2)
   8842c:	80800017 	ldw	r2,0(r16)
   88430:	10c00044 	addi	r3,r2,1
   88434:	80c00015 	stw	r3,0(r16)
   88438:	10800003 	ldbu	r2,0(r2)
   8843c:	10803fcc 	andi	r2,r2,255
   88440:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
   88444:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _putc_r (_REENT, c, fp);
#endif
}
   88448:	e6ffff04 	addi	sp,fp,-4
   8844c:	dfc00217 	ldw	ra,8(sp)
   88450:	df000117 	ldw	fp,4(sp)
   88454:	dc000017 	ldw	r16,0(sp)
   88458:	dec00304 	addi	sp,sp,12
   8845c:	f800283a 	ret

00088460 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
   88460:	defff104 	addi	sp,sp,-60
   88464:	dfc00e15 	stw	ra,56(sp)
   88468:	df000d15 	stw	fp,52(sp)
   8846c:	df000d04 	addi	fp,sp,52
   88470:	e13ffe15 	stw	r4,-8(fp)
   88474:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
   88478:	e13fff17 	ldw	r4,-4(fp)
   8847c:	0088c340 	call	88c34 <strlen>
   88480:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
   88484:	e0bfff17 	ldw	r2,-4(fp)
   88488:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
   8848c:	e0bff317 	ldw	r2,-52(fp)
   88490:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
   88494:	008002b4 	movhi	r2,10
   88498:	1083a104 	addi	r2,r2,3716
   8849c:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
   884a0:	00800044 	movi	r2,1
   884a4:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
   884a8:	e0bff317 	ldw	r2,-52(fp)
   884ac:	10800044 	addi	r2,r2,1
   884b0:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
   884b4:	e0bffa04 	addi	r2,fp,-24
   884b8:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
   884bc:	00800084 	movi	r2,2
   884c0:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
   884c4:	e0bffe17 	ldw	r2,-8(fp)
   884c8:	e0bff415 	stw	r2,-48(fp)
   884cc:	e0bff417 	ldw	r2,-48(fp)
   884d0:	10000526 	beq	r2,zero,884e8 <_puts_r+0x88>
   884d4:	e0bff417 	ldw	r2,-48(fp)
   884d8:	10800e17 	ldw	r2,56(r2)
   884dc:	1000021e 	bne	r2,zero,884e8 <_puts_r+0x88>
   884e0:	e13ff417 	ldw	r4,-48(fp)
   884e4:	008573c0 	call	8573c <__sinit>
  fp = _stdout_r (ptr);
   884e8:	e0bffe17 	ldw	r2,-8(fp)
   884ec:	10800217 	ldw	r2,8(r2)
   884f0:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   884f4:	e0bff517 	ldw	r2,-44(fp)
   884f8:	1080030b 	ldhu	r2,12(r2)
   884fc:	10bfffcc 	andi	r2,r2,65535
   88500:	1088000c 	andi	r2,r2,8192
   88504:	10000c1e 	bne	r2,zero,88538 <_puts_r+0xd8>
   88508:	e0bff517 	ldw	r2,-44(fp)
   8850c:	1080030b 	ldhu	r2,12(r2)
   88510:	10880014 	ori	r2,r2,8192
   88514:	1007883a 	mov	r3,r2
   88518:	e0bff517 	ldw	r2,-44(fp)
   8851c:	10c0030d 	sth	r3,12(r2)
   88520:	e0bff517 	ldw	r2,-44(fp)
   88524:	10c01917 	ldw	r3,100(r2)
   88528:	00b7ffc4 	movi	r2,-8193
   8852c:	1886703a 	and	r3,r3,r2
   88530:	e0bff517 	ldw	r2,-44(fp)
   88534:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
   88538:	e0bff704 	addi	r2,fp,-36
   8853c:	100d883a 	mov	r6,r2
   88540:	e17ff517 	ldw	r5,-44(fp)
   88544:	e13ffe17 	ldw	r4,-8(fp)
   88548:	008f9780 	call	8f978 <__sfvwrite_r>
   8854c:	10000226 	beq	r2,zero,88558 <_puts_r+0xf8>
   88550:	00bfffc4 	movi	r2,-1
   88554:	00000106 	br	8855c <_puts_r+0xfc>
   88558:	00800284 	movi	r2,10
   8855c:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
   88560:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
   88564:	e037883a 	mov	sp,fp
   88568:	dfc00117 	ldw	ra,4(sp)
   8856c:	df000017 	ldw	fp,0(sp)
   88570:	dec00204 	addi	sp,sp,8
   88574:	f800283a 	ret

00088578 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
   88578:	defffd04 	addi	sp,sp,-12
   8857c:	dfc00215 	stw	ra,8(sp)
   88580:	df000115 	stw	fp,4(sp)
   88584:	df000104 	addi	fp,sp,4
   88588:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
   8858c:	d0a00417 	ldw	r2,-32752(gp)
   88590:	e17fff17 	ldw	r5,-4(fp)
   88594:	1009883a 	mov	r4,r2
   88598:	00884600 	call	88460 <_puts_r>
}
   8859c:	e037883a 	mov	sp,fp
   885a0:	dfc00117 	ldw	ra,4(sp)
   885a4:	df000017 	ldw	fp,0(sp)
   885a8:	dec00204 	addi	sp,sp,8
   885ac:	f800283a 	ret

000885b0 <srand>:
					/* if compiled with -ansi switch.   */	/* AlteraSpecific */
#endif /* !WANT_SMALL_STDIO */							/* AlteraSpecific */

void
_DEFUN (srand, (seed), unsigned int seed)
{
   885b0:	defffd04 	addi	sp,sp,-12
   885b4:	df000215 	stw	fp,8(sp)
   885b8:	df000204 	addi	fp,sp,8
   885bc:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
   885c0:	d1200417 	ldw	r4,-32752(gp)
   885c4:	e13ffe15 	stw	r4,-8(fp)

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
   885c8:	e13fff17 	ldw	r4,-4(fp)
   885cc:	2005883a 	mov	r2,r4
   885d0:	0007883a 	mov	r3,zero
   885d4:	e13ffe17 	ldw	r4,-8(fp)
   885d8:	20802915 	stw	r2,164(r4)
   885dc:	20c02a15 	stw	r3,168(r4)
}
   885e0:	0001883a 	nop
   885e4:	e037883a 	mov	sp,fp
   885e8:	df000017 	ldw	fp,0(sp)
   885ec:	dec00104 	addi	sp,sp,4
   885f0:	f800283a 	ret

000885f4 <rand>:

int
_DEFUN_VOID (rand)
{
   885f4:	defffb04 	addi	sp,sp,-20
   885f8:	dfc00415 	stw	ra,16(sp)
   885fc:	df000315 	stw	fp,12(sp)
   88600:	dc400215 	stw	r17,8(sp)
   88604:	dc000115 	stw	r16,4(sp)
   88608:	df000304 	addi	fp,sp,12
  struct _reent *reent = _REENT;
   8860c:	d0a00417 	ldw	r2,-32752(gp)
   88610:	e0bffd15 	stw	r2,-12(fp)
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
   88614:	e13ffd17 	ldw	r4,-12(fp)
   88618:	20802917 	ldw	r2,164(r4)
   8861c:	20c02a17 	ldw	r3,168(r4)
   88620:	01932574 	movhi	r6,19605
   88624:	319fcb44 	addi	r6,r6,32557
   88628:	01d614b4 	movhi	r7,22610
   8862c:	39fd0b44 	addi	r7,r7,-3027
   88630:	1009883a 	mov	r4,r2
   88634:	180b883a 	mov	r5,r3
   88638:	009d0a80 	call	9d0a8 <__muldi3>
   8863c:	100d883a 	mov	r6,r2
   88640:	180f883a 	mov	r7,r3
   88644:	3009883a 	mov	r4,r6
   88648:	380b883a 	mov	r5,r7
   8864c:	01800044 	movi	r6,1
   88650:	000f883a 	mov	r7,zero
   88654:	2185883a 	add	r2,r4,r6
   88658:	1111803a 	cmpltu	r8,r2,r4
   8865c:	29c7883a 	add	r3,r5,r7
   88660:	40c9883a 	add	r4,r8,r3
   88664:	2007883a 	mov	r3,r4
   88668:	1009883a 	mov	r4,r2
   8866c:	180b883a 	mov	r5,r3

  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
   88670:	e0bffd17 	ldw	r2,-12(fp)
   88674:	11002915 	stw	r4,164(r2)
   88678:	11402a15 	stw	r5,168(r2)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
  return (int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
   8867c:	e13ffd17 	ldw	r4,-12(fp)
   88680:	20802917 	ldw	r2,164(r4)
   88684:	20c02a17 	ldw	r3,168(r4)
   88688:	1820d83a 	srl	r16,r3,zero
   8868c:	0023883a 	mov	r17,zero
   88690:	8007883a 	mov	r3,r16
   88694:	00a00034 	movhi	r2,32768
   88698:	10bfffc4 	addi	r2,r2,-1
   8869c:	1884703a 	and	r2,r3,r2
}
   886a0:	e6fffe04 	addi	sp,fp,-8
   886a4:	dfc00317 	ldw	ra,12(sp)
   886a8:	df000217 	ldw	fp,8(sp)
   886ac:	dc400117 	ldw	r17,4(sp)
   886b0:	dc000017 	ldw	r16,0(sp)
   886b4:	dec00404 	addi	sp,sp,16
   886b8:	f800283a 	ret

000886bc <lflush>:
#include "local.h"

static int
_DEFUN(lflush, (fp),
       FILE *fp)
{
   886bc:	defffd04 	addi	sp,sp,-12
   886c0:	dfc00215 	stw	ra,8(sp)
   886c4:	df000115 	stw	fp,4(sp)
   886c8:	df000104 	addi	fp,sp,4
   886cc:	e13fff15 	stw	r4,-4(fp)
  if ((fp->_flags & (__SLBF | __SWR)) == (__SLBF | __SWR))
   886d0:	e0bfff17 	ldw	r2,-4(fp)
   886d4:	1080030b 	ldhu	r2,12(r2)
   886d8:	10bfffcc 	andi	r2,r2,65535
   886dc:	1080024c 	andi	r2,r2,9
   886e0:	10800258 	cmpnei	r2,r2,9
   886e4:	1000031e 	bne	r2,zero,886f4 <lflush+0x38>
    return fflush (fp);
   886e8:	e13fff17 	ldw	r4,-4(fp)
   886ec:	008532c0 	call	8532c <fflush>
   886f0:	00000106 	br	886f8 <lflush+0x3c>
  return 0;
   886f4:	0005883a 	mov	r2,zero
}
   886f8:	e037883a 	mov	sp,fp
   886fc:	dfc00117 	ldw	ra,4(sp)
   88700:	df000017 	ldw	fp,0(sp)
   88704:	dec00204 	addi	sp,sp,8
   88708:	f800283a 	ret

0008870c <__srefill_r>:

int
_DEFUN(__srefill_r, (ptr, fp),
       struct _reent * ptr _AND
       register FILE * fp)
{
   8870c:	defffa04 	addi	sp,sp,-24
   88710:	dfc00515 	stw	ra,20(sp)
   88714:	df000415 	stw	fp,16(sp)
   88718:	dc000315 	stw	r16,12(sp)
   8871c:	df000404 	addi	fp,sp,16
   88720:	e13ffe15 	stw	r4,-8(fp)
   88724:	2821883a 	mov	r16,r5
  /* make sure stdio is set up */

  CHECK_INIT (ptr, fp);
   88728:	e0bffe17 	ldw	r2,-8(fp)
   8872c:	e0bffc15 	stw	r2,-16(fp)
   88730:	e0bffc17 	ldw	r2,-16(fp)
   88734:	10000526 	beq	r2,zero,8874c <__srefill_r+0x40>
   88738:	e0bffc17 	ldw	r2,-16(fp)
   8873c:	10800e17 	ldw	r2,56(r2)
   88740:	1000021e 	bne	r2,zero,8874c <__srefill_r+0x40>
   88744:	e13ffc17 	ldw	r4,-16(fp)
   88748:	008573c0 	call	8573c <__sinit>

  ORIENT (fp, -1);
   8874c:	8080030b 	ldhu	r2,12(r16)
   88750:	10bfffcc 	andi	r2,r2,65535
   88754:	1088000c 	andi	r2,r2,8192
   88758:	1000071e 	bne	r2,zero,88778 <__srefill_r+0x6c>
   8875c:	8080030b 	ldhu	r2,12(r16)
   88760:	10880014 	ori	r2,r2,8192
   88764:	8080030d 	sth	r2,12(r16)
   88768:	80c01917 	ldw	r3,100(r16)
   8876c:	00b7ffc4 	movi	r2,-8193
   88770:	1884703a 	and	r2,r3,r2
   88774:	80801915 	stw	r2,100(r16)

  fp->_r = 0;			/* largely a convenience for callers */
   88778:	80000115 	stw	zero,4(r16)

#ifndef __CYGWIN__
  /* SysV does not make this test; take it out for compatibility */
  if (fp->_flags & __SEOF)
   8877c:	8080030b 	ldhu	r2,12(r16)
   88780:	10bfffcc 	andi	r2,r2,65535
   88784:	1080080c 	andi	r2,r2,32
   88788:	10000226 	beq	r2,zero,88794 <__srefill_r+0x88>
    return EOF;
   8878c:	00bfffc4 	movi	r2,-1
   88790:	00006d06 	br	88948 <__srefill_r+0x23c>
#endif

  /* if not already reading, have to be reading and writing */
  if ((fp->_flags & __SRD) == 0)
   88794:	8080030b 	ldhu	r2,12(r16)
   88798:	10bfffcc 	andi	r2,r2,65535
   8879c:	1080010c 	andi	r2,r2,4
   887a0:	1000201e 	bne	r2,zero,88824 <__srefill_r+0x118>
    {
      if ((fp->_flags & __SRW) == 0)
   887a4:	8080030b 	ldhu	r2,12(r16)
   887a8:	10bfffcc 	andi	r2,r2,65535
   887ac:	1080040c 	andi	r2,r2,16
   887b0:	1000081e 	bne	r2,zero,887d4 <__srefill_r+0xc8>
	{
	  ptr->_errno = EBADF;
   887b4:	e0bffe17 	ldw	r2,-8(fp)
   887b8:	00c00244 	movi	r3,9
   887bc:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
   887c0:	8080030b 	ldhu	r2,12(r16)
   887c4:	10801014 	ori	r2,r2,64
   887c8:	8080030d 	sth	r2,12(r16)
	  return EOF;
   887cc:	00bfffc4 	movi	r2,-1
   887d0:	00005d06 	br	88948 <__srefill_r+0x23c>
	}
      /* switch to reading */
      if (fp->_flags & __SWR)
   887d4:	8080030b 	ldhu	r2,12(r16)
   887d8:	10bfffcc 	andi	r2,r2,65535
   887dc:	1080020c 	andi	r2,r2,8
   887e0:	10000c26 	beq	r2,zero,88814 <__srefill_r+0x108>
	{
	  if (_fflush_r (ptr, fp))
   887e4:	800b883a 	mov	r5,r16
   887e8:	e13ffe17 	ldw	r4,-8(fp)
   887ec:	00852a40 	call	852a4 <_fflush_r>
   887f0:	10000226 	beq	r2,zero,887fc <__srefill_r+0xf0>
	    return EOF;
   887f4:	00bfffc4 	movi	r2,-1
   887f8:	00005306 	br	88948 <__srefill_r+0x23c>
	  fp->_flags &= ~__SWR;
   887fc:	80c0030b 	ldhu	r3,12(r16)
   88800:	00bffdc4 	movi	r2,-9
   88804:	1884703a 	and	r2,r3,r2
   88808:	8080030d 	sth	r2,12(r16)
	  fp->_w = 0;
   8880c:	80000215 	stw	zero,8(r16)
	  fp->_lbfsize = 0;
   88810:	80000615 	stw	zero,24(r16)
	}
      fp->_flags |= __SRD;
   88814:	8080030b 	ldhu	r2,12(r16)
   88818:	10800114 	ori	r2,r2,4
   8881c:	8080030d 	sth	r2,12(r16)
   88820:	00001206 	br	8886c <__srefill_r+0x160>
       * We were reading.  If there is an ungetc buffer,
       * we must have been reading from that.  Drop it,
       * restoring the previous buffer (if any).  If there
       * is anything in that buffer, return.
       */
      if (HASUB (fp))
   88824:	80800c17 	ldw	r2,48(r16)
   88828:	10001026 	beq	r2,zero,8886c <__srefill_r+0x160>
	{
	  FREEUB (ptr, fp);
   8882c:	80c00c17 	ldw	r3,48(r16)
   88830:	80801004 	addi	r2,r16,64
   88834:	18800426 	beq	r3,r2,88848 <__srefill_r+0x13c>
   88838:	80800c17 	ldw	r2,48(r16)
   8883c:	100b883a 	mov	r5,r2
   88840:	e13ffe17 	ldw	r4,-8(fp)
   88844:	0085c480 	call	85c48 <_free_r>
   88848:	80000c15 	stw	zero,48(r16)
	  if ((fp->_r = fp->_ur) != 0)
   8884c:	80800f17 	ldw	r2,60(r16)
   88850:	80800115 	stw	r2,4(r16)
   88854:	80800117 	ldw	r2,4(r16)
   88858:	10000426 	beq	r2,zero,8886c <__srefill_r+0x160>
	    {
	      fp->_p = fp->_up;
   8885c:	80800e17 	ldw	r2,56(r16)
   88860:	80800015 	stw	r2,0(r16)
	      return 0;
   88864:	0005883a 	mov	r2,zero
   88868:	00003706 	br	88948 <__srefill_r+0x23c>
	    }
	}
    }

  if (fp->_bf._base == NULL)
   8886c:	80800417 	ldw	r2,16(r16)
   88870:	1000031e 	bne	r2,zero,88880 <__srefill_r+0x174>
    __smakebuf_r (ptr, fp);
   88874:	800b883a 	mov	r5,r16
   88878:	e13ffe17 	ldw	r4,-8(fp)
   8887c:	0086ec40 	call	86ec4 <__smakebuf_r>
  /*
   * Before reading from a line buffered or unbuffered file,
   * flush all line buffered output files, per the ANSI C
   * standard.
   */
  if (fp->_flags & (__SLBF | __SNBF))
   88880:	8080030b 	ldhu	r2,12(r16)
   88884:	10bfffcc 	andi	r2,r2,65535
   88888:	108000cc 	andi	r2,r2,3
   8888c:	10001326 	beq	r2,zero,888dc <__srefill_r+0x1d0>
    {
      /* Ignore this file in _fwalk to avoid potential deadlock. */
      short orig_flags = fp->_flags;
   88890:	8080030b 	ldhu	r2,12(r16)
   88894:	e0bffd0d 	sth	r2,-12(fp)
      fp->_flags = 1;
   88898:	00800044 	movi	r2,1
   8889c:	8080030d 	sth	r2,12(r16)
      _CAST_VOID _fwalk (_GLOBAL_REENT, lflush);
   888a0:	d0a00517 	ldw	r2,-32748(gp)
   888a4:	01400274 	movhi	r5,9
   888a8:	2961af04 	addi	r5,r5,-31044
   888ac:	1009883a 	mov	r4,r2
   888b0:	0086bb00 	call	86bb0 <_fwalk>
      fp->_flags = orig_flags;
   888b4:	e0bffd0b 	ldhu	r2,-12(fp)
   888b8:	8080030d 	sth	r2,12(r16)

      /* Now flush this file without locking it. */
      if ((fp->_flags & (__SLBF|__SWR)) == (__SLBF|__SWR))
   888bc:	8080030b 	ldhu	r2,12(r16)
   888c0:	10bfffcc 	andi	r2,r2,65535
   888c4:	1080024c 	andi	r2,r2,9
   888c8:	10800258 	cmpnei	r2,r2,9
   888cc:	1000031e 	bne	r2,zero,888dc <__srefill_r+0x1d0>
	__sflush_r (ptr, fp);
   888d0:	800b883a 	mov	r5,r16
   888d4:	e13ffe17 	ldw	r4,-8(fp)
   888d8:	0084fa00 	call	84fa0 <__sflush_r>
    }

  fp->_p = fp->_bf._base;
   888dc:	80800417 	ldw	r2,16(r16)
   888e0:	80800015 	stw	r2,0(r16)
  fp->_r = fp->_read (ptr, fp->_cookie, (char *) fp->_p, fp->_bf._size);
   888e4:	80800817 	ldw	r2,32(r16)
   888e8:	80c00717 	ldw	r3,28(r16)
   888ec:	81000017 	ldw	r4,0(r16)
   888f0:	81400517 	ldw	r5,20(r16)
   888f4:	280f883a 	mov	r7,r5
   888f8:	200d883a 	mov	r6,r4
   888fc:	180b883a 	mov	r5,r3
   88900:	e13ffe17 	ldw	r4,-8(fp)
   88904:	103ee83a 	callr	r2
   88908:	80800115 	stw	r2,4(r16)
#ifndef __CYGWIN__
  if (fp->_r <= 0)
   8890c:	80800117 	ldw	r2,4(r16)
   88910:	00800c16 	blt	zero,r2,88944 <__srefill_r+0x238>
  if (fp->_r > 0)
    fp->_flags &= ~__SEOF;
  else
#endif
    {
      if (fp->_r == 0)
   88914:	80800117 	ldw	r2,4(r16)
   88918:	1000041e 	bne	r2,zero,8892c <__srefill_r+0x220>
	fp->_flags |= __SEOF;
   8891c:	8080030b 	ldhu	r2,12(r16)
   88920:	10800814 	ori	r2,r2,32
   88924:	8080030d 	sth	r2,12(r16)
   88928:	00000406 	br	8893c <__srefill_r+0x230>
      else
	{
	  fp->_r = 0;
   8892c:	80000115 	stw	zero,4(r16)
	  fp->_flags |= __SERR;
   88930:	8080030b 	ldhu	r2,12(r16)
   88934:	10801014 	ori	r2,r2,64
   88938:	8080030d 	sth	r2,12(r16)
	}
      return EOF;
   8893c:	00bfffc4 	movi	r2,-1
   88940:	00000106 	br	88948 <__srefill_r+0x23c>
    }
  return 0;
   88944:	0005883a 	mov	r2,zero
}
   88948:	e6ffff04 	addi	sp,fp,-4
   8894c:	dfc00217 	ldw	ra,8(sp)
   88950:	df000117 	ldw	fp,4(sp)
   88954:	dc000017 	ldw	r16,0(sp)
   88958:	dec00304 	addi	sp,sp,12
   8895c:	f800283a 	ret

00088960 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
   88960:	defffb04 	addi	sp,sp,-20
   88964:	dfc00415 	stw	ra,16(sp)
   88968:	df000315 	stw	fp,12(sp)
   8896c:	df000304 	addi	fp,sp,12
   88970:	e13ffe15 	stw	r4,-8(fp)
   88974:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
   88978:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
   8897c:	e13fff17 	ldw	r4,-4(fp)
   88980:	009e9780 	call	9e978 <sbrk>
   88984:	e0bffd15 	stw	r2,-12(fp)
   88988:	e0bffd17 	ldw	r2,-12(fp)
   8898c:	10bfffd8 	cmpnei	r2,r2,-1
   88990:	1000051e 	bne	r2,zero,889a8 <_sbrk_r+0x48>
   88994:	d0a70f17 	ldw	r2,-25540(gp)
   88998:	10000326 	beq	r2,zero,889a8 <_sbrk_r+0x48>
    ptr->_errno = errno;
   8899c:	d0e70f17 	ldw	r3,-25540(gp)
   889a0:	e0bffe17 	ldw	r2,-8(fp)
   889a4:	10c00015 	stw	r3,0(r2)
  return ret;
   889a8:	e0bffd17 	ldw	r2,-12(fp)
}
   889ac:	e037883a 	mov	sp,fp
   889b0:	dfc00117 	ldw	ra,4(sp)
   889b4:	df000017 	ldw	fp,0(sp)
   889b8:	dec00204 	addi	sp,sp,8
   889bc:	f800283a 	ret

000889c0 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   889c0:	defff804 	addi	sp,sp,-32
   889c4:	dfc00715 	stw	ra,28(sp)
   889c8:	df000615 	stw	fp,24(sp)
   889cc:	dc400515 	stw	r17,20(sp)
   889d0:	dc000415 	stw	r16,16(sp)
   889d4:	df000604 	addi	fp,sp,24
   889d8:	e13ffa15 	stw	r4,-24(fp)
   889dc:	e17ffb15 	stw	r5,-20(fp)
   889e0:	e1bffc15 	stw	r6,-16(fp)
   889e4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   889e8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   889ec:	8080038b 	ldhu	r2,14(r16)
   889f0:	10bfffcc 	andi	r2,r2,65535
   889f4:	10a0001c 	xori	r2,r2,32768
   889f8:	10a00004 	addi	r2,r2,-32768
   889fc:	e0fffd17 	ldw	r3,-12(fp)
   88a00:	180f883a 	mov	r7,r3
   88a04:	e1bffc17 	ldw	r6,-16(fp)
   88a08:	100b883a 	mov	r5,r2
   88a0c:	e13ffa17 	ldw	r4,-24(fp)
   88a10:	00924dc0 	call	924dc <_read_r>
   88a14:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
   88a18:	88000416 	blt	r17,zero,88a2c <__sread+0x6c>
    fp->_offset += ret;
   88a1c:	80801417 	ldw	r2,80(r16)
   88a20:	1445883a 	add	r2,r2,r17
   88a24:	80801415 	stw	r2,80(r16)
   88a28:	00000406 	br	88a3c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   88a2c:	80c0030b 	ldhu	r3,12(r16)
   88a30:	00bbffc4 	movi	r2,-4097
   88a34:	1884703a 	and	r2,r3,r2
   88a38:	8080030d 	sth	r2,12(r16)
  return ret;
   88a3c:	8805883a 	mov	r2,r17
}
   88a40:	e6fffe04 	addi	sp,fp,-8
   88a44:	dfc00317 	ldw	ra,12(sp)
   88a48:	df000217 	ldw	fp,8(sp)
   88a4c:	dc400117 	ldw	r17,4(sp)
   88a50:	dc000017 	ldw	r16,0(sp)
   88a54:	dec00404 	addi	sp,sp,16
   88a58:	f800283a 	ret

00088a5c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
   88a5c:	defffb04 	addi	sp,sp,-20
   88a60:	df000415 	stw	fp,16(sp)
   88a64:	df000404 	addi	fp,sp,16
   88a68:	e13ffc15 	stw	r4,-16(fp)
   88a6c:	e17ffd15 	stw	r5,-12(fp)
   88a70:	e1bffe15 	stw	r6,-8(fp)
   88a74:	e1ffff15 	stw	r7,-4(fp)
  return 0;
   88a78:	0005883a 	mov	r2,zero
}
   88a7c:	e037883a 	mov	sp,fp
   88a80:	df000017 	ldw	fp,0(sp)
   88a84:	dec00104 	addi	sp,sp,4
   88a88:	f800283a 	ret

00088a8c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   88a8c:	defff804 	addi	sp,sp,-32
   88a90:	dfc00715 	stw	ra,28(sp)
   88a94:	df000615 	stw	fp,24(sp)
   88a98:	dc000515 	stw	r16,20(sp)
   88a9c:	df000604 	addi	fp,sp,24
   88aa0:	e13ffb15 	stw	r4,-20(fp)
   88aa4:	e17ffc15 	stw	r5,-16(fp)
   88aa8:	e1bffd15 	stw	r6,-12(fp)
   88aac:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
   88ab0:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   88ab4:	8080030b 	ldhu	r2,12(r16)
   88ab8:	10bfffcc 	andi	r2,r2,65535
   88abc:	1080400c 	andi	r2,r2,256
   88ac0:	10000926 	beq	r2,zero,88ae8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
   88ac4:	8080038b 	ldhu	r2,14(r16)
   88ac8:	10bfffcc 	andi	r2,r2,65535
   88acc:	10a0001c 	xori	r2,r2,32768
   88ad0:	10a00004 	addi	r2,r2,-32768
   88ad4:	01c00084 	movi	r7,2
   88ad8:	000d883a 	mov	r6,zero
   88adc:	100b883a 	mov	r5,r2
   88ae0:	e13ffb17 	ldw	r4,-20(fp)
   88ae4:	00901b40 	call	901b4 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   88ae8:	80c0030b 	ldhu	r3,12(r16)
   88aec:	00bbffc4 	movi	r2,-4097
   88af0:	1884703a 	and	r2,r3,r2
   88af4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   88af8:	8080038b 	ldhu	r2,14(r16)
   88afc:	10bfffcc 	andi	r2,r2,65535
   88b00:	10a0001c 	xori	r2,r2,32768
   88b04:	10a00004 	addi	r2,r2,-32768
   88b08:	e0fffe17 	ldw	r3,-8(fp)
   88b0c:	180f883a 	mov	r7,r3
   88b10:	e1bffd17 	ldw	r6,-12(fp)
   88b14:	100b883a 	mov	r5,r2
   88b18:	e13ffb17 	ldw	r4,-20(fp)
   88b1c:	008d1280 	call	8d128 <_write_r>
   88b20:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
   88b24:	e0bffa17 	ldw	r2,-24(fp)
}
   88b28:	e6ffff04 	addi	sp,fp,-4
   88b2c:	dfc00217 	ldw	ra,8(sp)
   88b30:	df000117 	ldw	fp,4(sp)
   88b34:	dc000017 	ldw	r16,0(sp)
   88b38:	dec00304 	addi	sp,sp,12
   88b3c:	f800283a 	ret

00088b40 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
   88b40:	defff804 	addi	sp,sp,-32
   88b44:	dfc00715 	stw	ra,28(sp)
   88b48:	df000615 	stw	fp,24(sp)
   88b4c:	dc400515 	stw	r17,20(sp)
   88b50:	dc000415 	stw	r16,16(sp)
   88b54:	df000604 	addi	fp,sp,24
   88b58:	e13ffa15 	stw	r4,-24(fp)
   88b5c:	e17ffb15 	stw	r5,-20(fp)
   88b60:	e1bffc15 	stw	r6,-16(fp)
   88b64:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   88b68:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   88b6c:	8080038b 	ldhu	r2,14(r16)
   88b70:	10bfffcc 	andi	r2,r2,65535
   88b74:	10a0001c 	xori	r2,r2,32768
   88b78:	10a00004 	addi	r2,r2,-32768
   88b7c:	e1fffd17 	ldw	r7,-12(fp)
   88b80:	e1bffc17 	ldw	r6,-16(fp)
   88b84:	100b883a 	mov	r5,r2
   88b88:	e13ffa17 	ldw	r4,-24(fp)
   88b8c:	00901b40 	call	901b4 <_lseek_r>
   88b90:	1023883a 	mov	r17,r2
  if (ret == -1L)
   88b94:	88bfffd8 	cmpnei	r2,r17,-1
   88b98:	1000051e 	bne	r2,zero,88bb0 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
   88b9c:	80c0030b 	ldhu	r3,12(r16)
   88ba0:	00bbffc4 	movi	r2,-4097
   88ba4:	1884703a 	and	r2,r3,r2
   88ba8:	8080030d 	sth	r2,12(r16)
   88bac:	00000406 	br	88bc0 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
   88bb0:	8080030b 	ldhu	r2,12(r16)
   88bb4:	10840014 	ori	r2,r2,4096
   88bb8:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
   88bbc:	84401415 	stw	r17,80(r16)
    }
  return ret;
   88bc0:	8805883a 	mov	r2,r17
}
   88bc4:	e6fffe04 	addi	sp,fp,-8
   88bc8:	dfc00317 	ldw	ra,12(sp)
   88bcc:	df000217 	ldw	fp,8(sp)
   88bd0:	dc400117 	ldw	r17,4(sp)
   88bd4:	dc000017 	ldw	r16,0(sp)
   88bd8:	dec00404 	addi	sp,sp,16
   88bdc:	f800283a 	ret

00088be0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
   88be0:	defffb04 	addi	sp,sp,-20
   88be4:	dfc00415 	stw	ra,16(sp)
   88be8:	df000315 	stw	fp,12(sp)
   88bec:	df000304 	addi	fp,sp,12
   88bf0:	e13ffe15 	stw	r4,-8(fp)
   88bf4:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
   88bf8:	e0bfff17 	ldw	r2,-4(fp)
   88bfc:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
   88c00:	e0bffd17 	ldw	r2,-12(fp)
   88c04:	1080038b 	ldhu	r2,14(r2)
   88c08:	10bfffcc 	andi	r2,r2,65535
   88c0c:	10a0001c 	xori	r2,r2,32768
   88c10:	10a00004 	addi	r2,r2,-32768
   88c14:	100b883a 	mov	r5,r2
   88c18:	e13ffe17 	ldw	r4,-8(fp)
   88c1c:	008d3380 	call	8d338 <_close_r>
}
   88c20:	e037883a 	mov	sp,fp
   88c24:	dfc00117 	ldw	ra,4(sp)
   88c28:	df000017 	ldw	fp,0(sp)
   88c2c:	dec00204 	addi	sp,sp,8
   88c30:	f800283a 	ret

00088c34 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
   88c34:	defffc04 	addi	sp,sp,-16
   88c38:	df000315 	stw	fp,12(sp)
   88c3c:	df000304 	addi	fp,sp,12
   88c40:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
   88c44:	e0bfff17 	ldw	r2,-4(fp)
   88c48:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   88c4c:	00000d06 	br	88c84 <strlen+0x50>
    {
      if (!*str)
   88c50:	e0bfff17 	ldw	r2,-4(fp)
   88c54:	10800003 	ldbu	r2,0(r2)
   88c58:	10803fcc 	andi	r2,r2,255
   88c5c:	1080201c 	xori	r2,r2,128
   88c60:	10bfe004 	addi	r2,r2,-128
   88c64:	1000041e 	bne	r2,zero,88c78 <strlen+0x44>
	return str - start;
   88c68:	e0ffff17 	ldw	r3,-4(fp)
   88c6c:	e0bffe17 	ldw	r2,-8(fp)
   88c70:	1885c83a 	sub	r2,r3,r2
   88c74:	00002806 	br	88d18 <strlen+0xe4>
      str++;
   88c78:	e0bfff17 	ldw	r2,-4(fp)
   88c7c:	10800044 	addi	r2,r2,1
   88c80:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   88c84:	e0bfff17 	ldw	r2,-4(fp)
   88c88:	108000cc 	andi	r2,r2,3
   88c8c:	103ff01e 	bne	r2,zero,88c50 <__alt_data_end+0xfffd6c50>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
   88c90:	e0bfff17 	ldw	r2,-4(fp)
   88c94:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
   88c98:	00000306 	br	88ca8 <strlen+0x74>
    aligned_addr++;
   88c9c:	e0bffd17 	ldw	r2,-12(fp)
   88ca0:	10800104 	addi	r2,r2,4
   88ca4:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
   88ca8:	e0bffd17 	ldw	r2,-12(fp)
   88cac:	10c00017 	ldw	r3,0(r2)
   88cb0:	00bfbff4 	movhi	r2,65279
   88cb4:	10bfbfc4 	addi	r2,r2,-257
   88cb8:	1887883a 	add	r3,r3,r2
   88cbc:	e0bffd17 	ldw	r2,-12(fp)
   88cc0:	10800017 	ldw	r2,0(r2)
   88cc4:	0084303a 	nor	r2,zero,r2
   88cc8:	1886703a 	and	r3,r3,r2
   88ccc:	00a02074 	movhi	r2,32897
   88cd0:	10a02004 	addi	r2,r2,-32640
   88cd4:	1884703a 	and	r2,r3,r2
   88cd8:	103ff026 	beq	r2,zero,88c9c <__alt_data_end+0xfffd6c9c>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
   88cdc:	e0bffd17 	ldw	r2,-12(fp)
   88ce0:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   88ce4:	00000306 	br	88cf4 <strlen+0xc0>
    str++;
   88ce8:	e0bfff17 	ldw	r2,-4(fp)
   88cec:	10800044 	addi	r2,r2,1
   88cf0:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   88cf4:	e0bfff17 	ldw	r2,-4(fp)
   88cf8:	10800003 	ldbu	r2,0(r2)
   88cfc:	10803fcc 	andi	r2,r2,255
   88d00:	1080201c 	xori	r2,r2,128
   88d04:	10bfe004 	addi	r2,r2,-128
   88d08:	103ff71e 	bne	r2,zero,88ce8 <__alt_data_end+0xfffd6ce8>
    str++;
  return str - start;
   88d0c:	e0ffff17 	ldw	r3,-4(fp)
   88d10:	e0bffe17 	ldw	r2,-8(fp)
   88d14:	1885c83a 	sub	r2,r3,r2
}
   88d18:	e037883a 	mov	sp,fp
   88d1c:	df000017 	ldw	fp,0(sp)
   88d20:	dec00104 	addi	sp,sp,4
   88d24:	f800283a 	ret

00088d28 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   88d28:	defedf04 	addi	sp,sp,-1156
   88d2c:	dfc12015 	stw	ra,1152(sp)
   88d30:	df011f15 	stw	fp,1148(sp)
   88d34:	dc011e15 	stw	r16,1144(sp)
   88d38:	df011f04 	addi	fp,sp,1148
   88d3c:	e13ffc15 	stw	r4,-16(fp)
   88d40:	2821883a 	mov	r16,r5
   88d44:	e1bffd15 	stw	r6,-12(fp)
   88d48:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   88d4c:	80c0030b 	ldhu	r3,12(r16)
   88d50:	00bfff44 	movi	r2,-3
   88d54:	1884703a 	and	r2,r3,r2
   88d58:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   88d5c:	80801917 	ldw	r2,100(r16)
   88d60:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   88d64:	8080038b 	ldhu	r2,14(r16)
   88d68:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   88d6c:	80800717 	ldw	r2,28(r16)
   88d70:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   88d74:	80800917 	ldw	r2,36(r16)
   88d78:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   88d7c:	e0befc04 	addi	r2,fp,-1040
   88d80:	e0bee215 	stw	r2,-1144(fp)
   88d84:	e0bee217 	ldw	r2,-1144(fp)
   88d88:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   88d8c:	00810004 	movi	r2,1024
   88d90:	e0bee415 	stw	r2,-1136(fp)
   88d94:	e0bee417 	ldw	r2,-1136(fp)
   88d98:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   88d9c:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   88da0:	e0bee204 	addi	r2,fp,-1144
   88da4:	e1fffe17 	ldw	r7,-8(fp)
   88da8:	e1bffd17 	ldw	r6,-12(fp)
   88dac:	100b883a 	mov	r5,r2
   88db0:	e13ffc17 	ldw	r4,-16(fp)
   88db4:	0088e680 	call	88e68 <___vfprintf_internal_r>
   88db8:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   88dbc:	e0bee117 	ldw	r2,-1148(fp)
   88dc0:	10000716 	blt	r2,zero,88de0 <__sbprintf+0xb8>
   88dc4:	e0bee204 	addi	r2,fp,-1144
   88dc8:	100b883a 	mov	r5,r2
   88dcc:	e13ffc17 	ldw	r4,-16(fp)
   88dd0:	00852a40 	call	852a4 <_fflush_r>
   88dd4:	10000226 	beq	r2,zero,88de0 <__sbprintf+0xb8>
		ret = EOF;
   88dd8:	00bfffc4 	movi	r2,-1
   88ddc:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   88de0:	e0bee50b 	ldhu	r2,-1132(fp)
   88de4:	10bfffcc 	andi	r2,r2,65535
   88de8:	1080100c 	andi	r2,r2,64
   88dec:	10000326 	beq	r2,zero,88dfc <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   88df0:	8080030b 	ldhu	r2,12(r16)
   88df4:	10801014 	ori	r2,r2,64
   88df8:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   88dfc:	e0bee117 	ldw	r2,-1148(fp)
}
   88e00:	e6ffff04 	addi	sp,fp,-4
   88e04:	dfc00217 	ldw	ra,8(sp)
   88e08:	df000117 	ldw	fp,4(sp)
   88e0c:	dc000017 	ldw	r16,0(sp)
   88e10:	dec00304 	addi	sp,sp,12
   88e14:	f800283a 	ret

00088e18 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   88e18:	defffa04 	addi	sp,sp,-24
   88e1c:	dfc00515 	stw	ra,20(sp)
   88e20:	df000415 	stw	fp,16(sp)
   88e24:	df000404 	addi	fp,sp,16
   88e28:	e13ffd15 	stw	r4,-12(fp)
   88e2c:	e17ffe15 	stw	r5,-8(fp)
   88e30:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   88e34:	d0a00417 	ldw	r2,-32752(gp)
   88e38:	e1ffff17 	ldw	r7,-4(fp)
   88e3c:	e1bffe17 	ldw	r6,-8(fp)
   88e40:	e17ffd17 	ldw	r5,-12(fp)
   88e44:	1009883a 	mov	r4,r2
   88e48:	0088e680 	call	88e68 <___vfprintf_internal_r>
   88e4c:	e0bffc15 	stw	r2,-16(fp)
  return result;
   88e50:	e0bffc17 	ldw	r2,-16(fp)
}
   88e54:	e037883a 	mov	sp,fp
   88e58:	dfc00117 	ldw	ra,4(sp)
   88e5c:	df000017 	ldw	fp,0(sp)
   88e60:	dec00204 	addi	sp,sp,8
   88e64:	f800283a 	ret

00088e68 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   88e68:	deffa404 	addi	sp,sp,-368
   88e6c:	dfc05b15 	stw	ra,364(sp)
   88e70:	df005a15 	stw	fp,360(sp)
   88e74:	ddc05915 	stw	r23,356(sp)
   88e78:	dd805815 	stw	r22,352(sp)
   88e7c:	dd405715 	stw	r21,348(sp)
   88e80:	dd005615 	stw	r20,344(sp)
   88e84:	dcc05515 	stw	r19,340(sp)
   88e88:	dc805415 	stw	r18,336(sp)
   88e8c:	dc405315 	stw	r17,332(sp)
   88e90:	dc005215 	stw	r16,328(sp)
   88e94:	df005a04 	addi	fp,sp,360
   88e98:	e13fe615 	stw	r4,-104(fp)
   88e9c:	e17fe715 	stw	r5,-100(fp)
   88ea0:	e1bfe815 	stw	r6,-96(fp)
   88ea4:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
   88ea8:	e13fe617 	ldw	r4,-104(fp)
   88eac:	009011c0 	call	9011c <_localeconv_r>
   88eb0:	10800017 	ldw	r2,0(r2)
   88eb4:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
   88eb8:	e13fbb17 	ldw	r4,-276(fp)
   88ebc:	0088c340 	call	88c34 <strlen>
   88ec0:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
   88ec4:	e03fc215 	stw	zero,-248(fp)
   88ec8:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
   88ecc:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
   88ed0:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   88ed4:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   88ed8:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   88edc:	e0bfe617 	ldw	r2,-104(fp)
   88ee0:	e0bfbd15 	stw	r2,-268(fp)
   88ee4:	e0bfbd17 	ldw	r2,-268(fp)
   88ee8:	10000526 	beq	r2,zero,88f00 <___vfprintf_internal_r+0x98>
   88eec:	e0bfbd17 	ldw	r2,-268(fp)
   88ef0:	10800e17 	ldw	r2,56(r2)
   88ef4:	1000021e 	bne	r2,zero,88f00 <___vfprintf_internal_r+0x98>
   88ef8:	e13fbd17 	ldw	r4,-268(fp)
   88efc:	008573c0 	call	8573c <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   88f00:	e0bfe717 	ldw	r2,-100(fp)
   88f04:	1080030b 	ldhu	r2,12(r2)
   88f08:	10bfffcc 	andi	r2,r2,65535
   88f0c:	1088000c 	andi	r2,r2,8192
   88f10:	10000c1e 	bne	r2,zero,88f44 <___vfprintf_internal_r+0xdc>
   88f14:	e0bfe717 	ldw	r2,-100(fp)
   88f18:	1080030b 	ldhu	r2,12(r2)
   88f1c:	10880014 	ori	r2,r2,8192
   88f20:	1007883a 	mov	r3,r2
   88f24:	e0bfe717 	ldw	r2,-100(fp)
   88f28:	10c0030d 	sth	r3,12(r2)
   88f2c:	e0bfe717 	ldw	r2,-100(fp)
   88f30:	10c01917 	ldw	r3,100(r2)
   88f34:	00b7ffc4 	movi	r2,-8193
   88f38:	1886703a 	and	r3,r3,r2
   88f3c:	e0bfe717 	ldw	r2,-100(fp)
   88f40:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   88f44:	e0bfe717 	ldw	r2,-100(fp)
   88f48:	1080030b 	ldhu	r2,12(r2)
   88f4c:	10bfffcc 	andi	r2,r2,65535
   88f50:	1080020c 	andi	r2,r2,8
   88f54:	10000326 	beq	r2,zero,88f64 <___vfprintf_internal_r+0xfc>
   88f58:	e0bfe717 	ldw	r2,-100(fp)
   88f5c:	10800417 	ldw	r2,16(r2)
   88f60:	1000061e 	bne	r2,zero,88f7c <___vfprintf_internal_r+0x114>
   88f64:	e17fe717 	ldw	r5,-100(fp)
   88f68:	e13fe617 	ldw	r4,-104(fp)
   88f6c:	008d1980 	call	8d198 <__swsetup_r>
   88f70:	10000226 	beq	r2,zero,88f7c <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
   88f74:	00bfffc4 	movi	r2,-1
   88f78:	0007e806 	br	8af1c <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   88f7c:	e0bfe717 	ldw	r2,-100(fp)
   88f80:	1080030b 	ldhu	r2,12(r2)
   88f84:	10bfffcc 	andi	r2,r2,65535
   88f88:	1080068c 	andi	r2,r2,26
   88f8c:	10800298 	cmpnei	r2,r2,10
   88f90:	10000c1e 	bne	r2,zero,88fc4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
   88f94:	e0bfe717 	ldw	r2,-100(fp)
   88f98:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   88f9c:	10bfffcc 	andi	r2,r2,65535
   88fa0:	10a0001c 	xori	r2,r2,32768
   88fa4:	10a00004 	addi	r2,r2,-32768
   88fa8:	10000616 	blt	r2,zero,88fc4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   88fac:	e1ffe917 	ldw	r7,-92(fp)
   88fb0:	e1bfe817 	ldw	r6,-96(fp)
   88fb4:	e17fe717 	ldw	r5,-100(fp)
   88fb8:	e13fe617 	ldw	r4,-104(fp)
   88fbc:	0088d280 	call	88d28 <__sbprintf>
   88fc0:	0007d606 	br	8af1c <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   88fc4:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   88fc8:	e47fcb04 	addi	r17,fp,-212
   88fcc:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
   88fd0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   88fd4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   88fd8:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   88fdc:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   88fe0:	00000106 	br	88fe8 <___vfprintf_internal_r+0x180>
                    fmt += 1;
   88fe4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   88fe8:	a8800003 	ldbu	r2,0(r21)
   88fec:	10803fcc 	andi	r2,r2,255
   88ff0:	1080201c 	xori	r2,r2,128
   88ff4:	10bfe004 	addi	r2,r2,-128
   88ff8:	10000626 	beq	r2,zero,89014 <___vfprintf_internal_r+0x1ac>
   88ffc:	a8800003 	ldbu	r2,0(r21)
   89000:	10803fcc 	andi	r2,r2,255
   89004:	1080201c 	xori	r2,r2,128
   89008:	10bfe004 	addi	r2,r2,-128
   8900c:	10800958 	cmpnei	r2,r2,37
   89010:	103ff41e 	bne	r2,zero,88fe4 <__alt_data_end+0xfffd6fe4>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   89014:	a807883a 	mov	r3,r21
   89018:	9005883a 	mov	r2,r18
   8901c:	18a1c83a 	sub	r16,r3,r2
   89020:	80001826 	beq	r16,zero,89084 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
   89024:	8c800015 	stw	r18,0(r17)
   89028:	8005883a 	mov	r2,r16
   8902c:	88800115 	stw	r2,4(r17)
   89030:	e0bfca17 	ldw	r2,-216(fp)
   89034:	8007883a 	mov	r3,r16
   89038:	10c5883a 	add	r2,r2,r3
   8903c:	e0bfca15 	stw	r2,-216(fp)
   89040:	8c400204 	addi	r17,r17,8
   89044:	e0bfc917 	ldw	r2,-220(fp)
   89048:	10800044 	addi	r2,r2,1
   8904c:	e0bfc915 	stw	r2,-220(fp)
   89050:	e0bfc917 	ldw	r2,-220(fp)
   89054:	10800210 	cmplti	r2,r2,8
   89058:	1000071e 	bne	r2,zero,89078 <___vfprintf_internal_r+0x210>
   8905c:	e0bfc804 	addi	r2,fp,-224
   89060:	100d883a 	mov	r6,r2
   89064:	e17fe717 	ldw	r5,-100(fp)
   89068:	e13fe617 	ldw	r4,-104(fp)
   8906c:	0098c180 	call	98c18 <__sprint_r>
   89070:	1007531e 	bne	r2,zero,8adc0 <___vfprintf_internal_r+0x1f58>
   89074:	e47fcb04 	addi	r17,fp,-212
			ret += m;
   89078:	e0bfac17 	ldw	r2,-336(fp)
   8907c:	1405883a 	add	r2,r2,r16
   89080:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   89084:	a8800003 	ldbu	r2,0(r21)
   89088:	10803fcc 	andi	r2,r2,255
   8908c:	1080201c 	xori	r2,r2,128
   89090:	10bfe004 	addi	r2,r2,-128
   89094:	10073c26 	beq	r2,zero,8ad88 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
   89098:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
   8909c:	ad400044 	addi	r21,r21,1

		flags = 0;
   890a0:	0027883a 	mov	r19,zero
		dprec = 0;
   890a4:	e03fb415 	stw	zero,-304(fp)
		width = 0;
   890a8:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
   890ac:	00bfffc4 	movi	r2,-1
   890b0:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
   890b4:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
   890b8:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   890bc:	a805883a 	mov	r2,r21
   890c0:	15400044 	addi	r21,r2,1
   890c4:	10800003 	ldbu	r2,0(r2)
   890c8:	15003fcc 	andi	r20,r2,255
   890cc:	a500201c 	xori	r20,r20,128
   890d0:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
   890d4:	a0bff804 	addi	r2,r20,-32
   890d8:	10c01668 	cmpgeui	r3,r2,89
   890dc:	18034f1e 	bne	r3,zero,89e1c <___vfprintf_internal_r+0xfb4>
   890e0:	100690ba 	slli	r3,r2,2
   890e4:	00800274 	movhi	r2,9
   890e8:	10a43e04 	addi	r2,r2,-28424
   890ec:	1885883a 	add	r2,r3,r2
   890f0:	10800017 	ldw	r2,0(r2)
   890f4:	1000683a 	jmp	r2
   890f8:	0008925c 	xori	zero,zero,8777
   890fc:	00089e1c 	xori	zero,zero,8824
   89100:	00089e1c 	xori	zero,zero,8824
   89104:	0008927c 	xorhi	zero,zero,8777
   89108:	00089e1c 	xori	zero,zero,8824
   8910c:	00089e1c 	xori	zero,zero,8824
   89110:	00089e1c 	xori	zero,zero,8824
   89114:	00089e1c 	xori	zero,zero,8824
   89118:	00089e1c 	xori	zero,zero,8824
   8911c:	00089e1c 	xori	zero,zero,8824
   89120:	00089284 	movi	zero,8778
   89124:	000892b8 	rdprs	zero,zero,8778
   89128:	00089e1c 	xori	zero,zero,8824
   8912c:	000892b0 	cmpltui	zero,zero,8778
   89130:	000892c4 	movi	zero,8779
   89134:	00089e1c 	xori	zero,zero,8824
   89138:	00089364 	muli	zero,zero,8781
   8913c:	0008936c 	andhi	zero,zero,8781
   89140:	0008936c 	andhi	zero,zero,8781
   89144:	0008936c 	andhi	zero,zero,8781
   89148:	0008936c 	andhi	zero,zero,8781
   8914c:	0008936c 	andhi	zero,zero,8781
   89150:	0008936c 	andhi	zero,zero,8781
   89154:	0008936c 	andhi	zero,zero,8781
   89158:	0008936c 	andhi	zero,zero,8781
   8915c:	0008936c 	andhi	zero,zero,8781
   89160:	00089e1c 	xori	zero,zero,8824
   89164:	00089e1c 	xori	zero,zero,8824
   89168:	00089e1c 	xori	zero,zero,8824
   8916c:	00089e1c 	xori	zero,zero,8824
   89170:	00089e1c 	xori	zero,zero,8824
   89174:	00089e1c 	xori	zero,zero,8824
   89178:	00089e1c 	xori	zero,zero,8824
   8917c:	00089e1c 	xori	zero,zero,8824
   89180:	00089e1c 	xori	zero,zero,8824
   89184:	00089e1c 	xori	zero,zero,8824
   89188:	00089420 	cmpeqi	zero,zero,8784
   8918c:	00089520 	cmpeqi	zero,zero,8788
   89190:	00089e1c 	xori	zero,zero,8824
   89194:	00089520 	cmpeqi	zero,zero,8788
   89198:	00089e1c 	xori	zero,zero,8824
   8919c:	00089e1c 	xori	zero,zero,8824
   891a0:	00089e1c 	xori	zero,zero,8824
   891a4:	00089e1c 	xori	zero,zero,8824
   891a8:	000893b4 	movhi	zero,8782
   891ac:	00089e1c 	xori	zero,zero,8824
   891b0:	00089e1c 	xori	zero,zero,8824
   891b4:	000898bc 	xorhi	zero,zero,8802
   891b8:	00089e1c 	xori	zero,zero,8824
   891bc:	00089e1c 	xori	zero,zero,8824
   891c0:	00089e1c 	xori	zero,zero,8824
   891c4:	00089e1c 	xori	zero,zero,8824
   891c8:	00089e1c 	xori	zero,zero,8824
   891cc:	00089a38 	rdprs	zero,zero,8808
   891d0:	00089e1c 	xori	zero,zero,8824
   891d4:	00089e1c 	xori	zero,zero,8824
   891d8:	00089af8 	rdprs	zero,zero,8811
   891dc:	00089e1c 	xori	zero,zero,8824
   891e0:	00089e1c 	xori	zero,zero,8824
   891e4:	00089e1c 	xori	zero,zero,8824
   891e8:	00089e1c 	xori	zero,zero,8824
   891ec:	00089e1c 	xori	zero,zero,8824
   891f0:	00089e1c 	xori	zero,zero,8824
   891f4:	00089e1c 	xori	zero,zero,8824
   891f8:	00089e1c 	xori	zero,zero,8824
   891fc:	00089e1c 	xori	zero,zero,8824
   89200:	00089e1c 	xori	zero,zero,8824
   89204:	000893f8 	rdprs	zero,zero,8783
   89208:	00089424 	muli	zero,zero,8784
   8920c:	00089520 	cmpeqi	zero,zero,8788
   89210:	00089520 	cmpeqi	zero,zero,8788
   89214:	00089520 	cmpeqi	zero,zero,8788
   89218:	000893bc 	xorhi	zero,zero,8782
   8921c:	00089424 	muli	zero,zero,8784
   89220:	00089e1c 	xori	zero,zero,8824
   89224:	00089e1c 	xori	zero,zero,8824
   89228:	000893c4 	movi	zero,8783
   8922c:	00089e1c 	xori	zero,zero,8824
   89230:	0008981c 	xori	zero,zero,8800
   89234:	000898c0 	call	898c <__alt_mem_MemoriaDados+0x898c>
   89238:	00089960 	cmpeqi	zero,zero,8805
   8923c:	000893f0 	cmpltui	zero,zero,8783
   89240:	00089e1c 	xori	zero,zero,8824
   89244:	000899a8 	cmpgeui	zero,zero,8806
   89248:	00089e1c 	xori	zero,zero,8824
   8924c:	00089a3c 	xorhi	zero,zero,8808
   89250:	00089e1c 	xori	zero,zero,8824
   89254:	00089e1c 	xori	zero,zero,8824
   89258:	00089b08 	cmpgei	zero,zero,8812
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   8925c:	e0bfc103 	ldbu	r2,-252(fp)
   89260:	10803fcc 	andi	r2,r2,255
   89264:	1080201c 	xori	r2,r2,128
   89268:	10bfe004 	addi	r2,r2,-128
   8926c:	103f931e 	bne	r2,zero,890bc <__alt_data_end+0xfffd70bc>
				sign = ' ';
   89270:	00800804 	movi	r2,32
   89274:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   89278:	003f9006 	br	890bc <__alt_data_end+0xfffd70bc>
		case '#':
			flags |= ALT;
   8927c:	9cc00054 	ori	r19,r19,1
			goto rflag;
   89280:	003f8e06 	br	890bc <__alt_data_end+0xfffd70bc>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   89284:	e0bfe917 	ldw	r2,-92(fp)
   89288:	10c00104 	addi	r3,r2,4
   8928c:	e0ffe915 	stw	r3,-92(fp)
   89290:	10800017 	ldw	r2,0(r2)
   89294:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   89298:	e0bfad17 	ldw	r2,-332(fp)
   8929c:	10000116 	blt	r2,zero,892a4 <___vfprintf_internal_r+0x43c>
				goto rflag;
   892a0:	003f8606 	br	890bc <__alt_data_end+0xfffd70bc>
			width = -width;
   892a4:	e0bfad17 	ldw	r2,-332(fp)
   892a8:	0085c83a 	sub	r2,zero,r2
   892ac:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   892b0:	9cc00114 	ori	r19,r19,4
			goto rflag;
   892b4:	003f8106 	br	890bc <__alt_data_end+0xfffd70bc>
		case '+':
			sign = '+';
   892b8:	00800ac4 	movi	r2,43
   892bc:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   892c0:	003f7e06 	br	890bc <__alt_data_end+0xfffd70bc>
		case '.':
			if ((ch = *fmt++) == '*') {
   892c4:	a805883a 	mov	r2,r21
   892c8:	15400044 	addi	r21,r2,1
   892cc:	10800003 	ldbu	r2,0(r2)
   892d0:	15003fcc 	andi	r20,r2,255
   892d4:	a500201c 	xori	r20,r20,128
   892d8:	a53fe004 	addi	r20,r20,-128
   892dc:	a0800a98 	cmpnei	r2,r20,42
   892e0:	10000a1e 	bne	r2,zero,8930c <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   892e4:	e0bfe917 	ldw	r2,-92(fp)
   892e8:	10c00104 	addi	r3,r2,4
   892ec:	e0ffe915 	stw	r3,-92(fp)
   892f0:	10800017 	ldw	r2,0(r2)
   892f4:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   892f8:	e0bfae17 	ldw	r2,-328(fp)
   892fc:	103f6f0e 	bge	r2,zero,890bc <__alt_data_end+0xfffd70bc>
					prec = -1;
   89300:	00bfffc4 	movi	r2,-1
   89304:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
   89308:	003f6c06 	br	890bc <__alt_data_end+0xfffd70bc>
			}
			n = 0;
   8930c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   89310:	00000c06 	br	89344 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
   89314:	01400284 	movi	r5,10
   89318:	8009883a 	mov	r4,r16
   8931c:	00823a00 	call	823a0 <__mulsi3>
   89320:	1007883a 	mov	r3,r2
   89324:	a0bff404 	addi	r2,r20,-48
   89328:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   8932c:	a805883a 	mov	r2,r21
   89330:	15400044 	addi	r21,r2,1
   89334:	10800003 	ldbu	r2,0(r2)
   89338:	15003fcc 	andi	r20,r2,255
   8933c:	a500201c 	xori	r20,r20,128
   89340:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   89344:	a0bff404 	addi	r2,r20,-48
   89348:	108002b0 	cmpltui	r2,r2,10
   8934c:	103ff11e 	bne	r2,zero,89314 <__alt_data_end+0xfffd7314>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   89350:	8005883a 	mov	r2,r16
   89354:	1000010e 	bge	r2,zero,8935c <___vfprintf_internal_r+0x4f4>
   89358:	00bfffc4 	movi	r2,-1
   8935c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
   89360:	003f5c06 	br	890d4 <__alt_data_end+0xfffd70d4>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   89364:	9cc02014 	ori	r19,r19,128
			goto rflag;
   89368:	003f5406 	br	890bc <__alt_data_end+0xfffd70bc>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   8936c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   89370:	01400284 	movi	r5,10
   89374:	8009883a 	mov	r4,r16
   89378:	00823a00 	call	823a0 <__mulsi3>
   8937c:	1007883a 	mov	r3,r2
   89380:	a0bff404 	addi	r2,r20,-48
   89384:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   89388:	a805883a 	mov	r2,r21
   8938c:	15400044 	addi	r21,r2,1
   89390:	10800003 	ldbu	r2,0(r2)
   89394:	15003fcc 	andi	r20,r2,255
   89398:	a500201c 	xori	r20,r20,128
   8939c:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
   893a0:	a0bff404 	addi	r2,r20,-48
   893a4:	108002b0 	cmpltui	r2,r2,10
   893a8:	103ff11e 	bne	r2,zero,89370 <__alt_data_end+0xfffd7370>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   893ac:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
   893b0:	003f4806 	br	890d4 <__alt_data_end+0xfffd70d4>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   893b4:	9cc00214 	ori	r19,r19,8
			goto rflag;
   893b8:	003f4006 	br	890bc <__alt_data_end+0xfffd70bc>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   893bc:	9cc01014 	ori	r19,r19,64
			goto rflag;
   893c0:	003f3e06 	br	890bc <__alt_data_end+0xfffd70bc>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   893c4:	a8800003 	ldbu	r2,0(r21)
   893c8:	10803fcc 	andi	r2,r2,255
   893cc:	1080201c 	xori	r2,r2,128
   893d0:	10bfe004 	addi	r2,r2,-128
   893d4:	10801b18 	cmpnei	r2,r2,108
   893d8:	1000031e 	bne	r2,zero,893e8 <___vfprintf_internal_r+0x580>
				fmt++;
   893dc:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   893e0:	9cc00814 	ori	r19,r19,32
   893e4:	003f3506 	br	890bc <__alt_data_end+0xfffd70bc>
			} else
#endif
				flags |= LONGINT;
   893e8:	9cc00414 	ori	r19,r19,16
			goto rflag;
   893ec:	003f3306 	br	890bc <__alt_data_end+0xfffd70bc>
		case 'q': /* extension */
			flags |= QUADINT;
   893f0:	9cc00814 	ori	r19,r19,32
			goto rflag;
   893f4:	003f3106 	br	890bc <__alt_data_end+0xfffd70bc>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   893f8:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   893fc:	e0bfe917 	ldw	r2,-92(fp)
   89400:	10c00104 	addi	r3,r2,4
   89404:	e0ffe915 	stw	r3,-92(fp)
   89408:	10800017 	ldw	r2,0(r2)
   8940c:	90800005 	stb	r2,0(r18)
				size = 1;
   89410:	00800044 	movi	r2,1
   89414:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
   89418:	e03fc105 	stb	zero,-252(fp)
			break;
   8941c:	00028806 	br	89e40 <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
   89420:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   89424:	9880080c 	andi	r2,r19,32
   89428:	10000826 	beq	r2,zero,8944c <___vfprintf_internal_r+0x5e4>
   8942c:	e13fe917 	ldw	r4,-92(fp)
   89430:	20800204 	addi	r2,r4,8
   89434:	e0bfe915 	stw	r2,-92(fp)
   89438:	20800017 	ldw	r2,0(r4)
   8943c:	20c00117 	ldw	r3,4(r4)
   89440:	e0bfea15 	stw	r2,-88(fp)
   89444:	e0ffeb15 	stw	r3,-84(fp)
   89448:	00001e06 	br	894c4 <___vfprintf_internal_r+0x65c>
   8944c:	9880040c 	andi	r2,r19,16
   89450:	10000826 	beq	r2,zero,89474 <___vfprintf_internal_r+0x60c>
   89454:	e0bfe917 	ldw	r2,-92(fp)
   89458:	10c00104 	addi	r3,r2,4
   8945c:	e0ffe915 	stw	r3,-92(fp)
   89460:	10800017 	ldw	r2,0(r2)
   89464:	e0bfea15 	stw	r2,-88(fp)
   89468:	1005d7fa 	srai	r2,r2,31
   8946c:	e0bfeb15 	stw	r2,-84(fp)
   89470:	00001406 	br	894c4 <___vfprintf_internal_r+0x65c>
   89474:	9880100c 	andi	r2,r19,64
   89478:	10000b26 	beq	r2,zero,894a8 <___vfprintf_internal_r+0x640>
   8947c:	e0bfe917 	ldw	r2,-92(fp)
   89480:	10c00104 	addi	r3,r2,4
   89484:	e0ffe915 	stw	r3,-92(fp)
   89488:	10800017 	ldw	r2,0(r2)
   8948c:	10bfffcc 	andi	r2,r2,65535
   89490:	10a0001c 	xori	r2,r2,32768
   89494:	10a00004 	addi	r2,r2,-32768
   89498:	e0bfea15 	stw	r2,-88(fp)
   8949c:	1005d7fa 	srai	r2,r2,31
   894a0:	e0bfeb15 	stw	r2,-84(fp)
   894a4:	00000706 	br	894c4 <___vfprintf_internal_r+0x65c>
   894a8:	e0bfe917 	ldw	r2,-92(fp)
   894ac:	10c00104 	addi	r3,r2,4
   894b0:	e0ffe915 	stw	r3,-92(fp)
   894b4:	10800017 	ldw	r2,0(r2)
   894b8:	e0bfea15 	stw	r2,-88(fp)
   894bc:	1005d7fa 	srai	r2,r2,31
   894c0:	e0bfeb15 	stw	r2,-84(fp)
   894c4:	e0bfea17 	ldw	r2,-88(fp)
   894c8:	e0bfb115 	stw	r2,-316(fp)
   894cc:	e0ffeb17 	ldw	r3,-84(fp)
   894d0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   894d4:	e0bfb117 	ldw	r2,-316(fp)
   894d8:	e0ffb217 	ldw	r3,-312(fp)
   894dc:	18000d0e 	bge	r3,zero,89514 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   894e0:	000f883a 	mov	r7,zero
   894e4:	0011883a 	mov	r8,zero
   894e8:	e13fb117 	ldw	r4,-316(fp)
   894ec:	e17fb217 	ldw	r5,-312(fp)
   894f0:	3905c83a 	sub	r2,r7,r4
   894f4:	388d803a 	cmpltu	r6,r7,r2
   894f8:	4147c83a 	sub	r3,r8,r5
   894fc:	1989c83a 	sub	r4,r3,r6
   89500:	2007883a 	mov	r3,r4
   89504:	e0bfb115 	stw	r2,-316(fp)
   89508:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
   8950c:	00800b44 	movi	r2,45
   89510:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
   89514:	00800044 	movi	r2,1
   89518:	e0bfb305 	stb	r2,-308(fp)
			goto number;
   8951c:	0001b706 	br	89bfc <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
   89520:	9880020c 	andi	r2,r19,8
   89524:	10000826 	beq	r2,zero,89548 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
   89528:	e13fe917 	ldw	r4,-92(fp)
   8952c:	20800204 	addi	r2,r4,8
   89530:	e0bfe915 	stw	r2,-92(fp)
   89534:	20800017 	ldw	r2,0(r4)
   89538:	20c00117 	ldw	r3,4(r4)
   8953c:	e0bfc215 	stw	r2,-248(fp)
   89540:	e0ffc315 	stw	r3,-244(fp)
   89544:	00000706 	br	89564 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
   89548:	e13fe917 	ldw	r4,-92(fp)
   8954c:	20800204 	addi	r2,r4,8
   89550:	e0bfe915 	stw	r2,-92(fp)
   89554:	20800017 	ldw	r2,0(r4)
   89558:	20c00117 	ldw	r3,4(r4)
   8955c:	e0bfc215 	stw	r2,-248(fp)
   89560:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
   89564:	e0bfc217 	ldw	r2,-248(fp)
   89568:	e0ffc317 	ldw	r3,-244(fp)
   8956c:	1009883a 	mov	r4,r2
   89570:	180b883a 	mov	r5,r3
   89574:	009313c0 	call	9313c <__fpclassifyd>
   89578:	10800058 	cmpnei	r2,r2,1
   8957c:	1000161e 	bne	r2,zero,895d8 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
   89580:	e0bfc217 	ldw	r2,-248(fp)
   89584:	e0ffc317 	ldw	r3,-244(fp)
   89588:	000d883a 	mov	r6,zero
   8958c:	000f883a 	mov	r7,zero
   89590:	1009883a 	mov	r4,r2
   89594:	180b883a 	mov	r5,r3
   89598:	00837200 	call	83720 <__ledf2>
   8959c:	1000020e 	bge	r2,zero,895a8 <___vfprintf_internal_r+0x740>
					sign = '-';
   895a0:	00800b44 	movi	r2,45
   895a4:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   895a8:	a0801208 	cmpgei	r2,r20,72
   895ac:	1000031e 	bne	r2,zero,895bc <___vfprintf_internal_r+0x754>
					cp = "INF";
   895b0:	048002b4 	movhi	r18,10
   895b4:	9483a204 	addi	r18,r18,3720
   895b8:	00000206 	br	895c4 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
   895bc:	048002b4 	movhi	r18,10
   895c0:	9483a304 	addi	r18,r18,3724
				size = 3;
   895c4:	008000c4 	movi	r2,3
   895c8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   895cc:	00bfdfc4 	movi	r2,-129
   895d0:	98a6703a 	and	r19,r19,r2
				break;
   895d4:	00021a06 	br	89e40 <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
   895d8:	e0bfc217 	ldw	r2,-248(fp)
   895dc:	e0ffc317 	ldw	r3,-244(fp)
   895e0:	1009883a 	mov	r4,r2
   895e4:	180b883a 	mov	r5,r3
   895e8:	009313c0 	call	9313c <__fpclassifyd>
   895ec:	10000c1e 	bne	r2,zero,89620 <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   895f0:	a0801208 	cmpgei	r2,r20,72
   895f4:	1000031e 	bne	r2,zero,89604 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
   895f8:	048002b4 	movhi	r18,10
   895fc:	9483a404 	addi	r18,r18,3728
   89600:	00000206 	br	8960c <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
   89604:	048002b4 	movhi	r18,10
   89608:	9483a504 	addi	r18,r18,3732
				size = 3;
   8960c:	008000c4 	movi	r2,3
   89610:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   89614:	00bfdfc4 	movi	r2,-129
   89618:	98a6703a 	and	r19,r19,r2
				break;
   8961c:	00020806 	br	89e40 <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
   89620:	e0bfae17 	ldw	r2,-328(fp)
   89624:	10bfffd8 	cmpnei	r2,r2,-1
   89628:	1000031e 	bne	r2,zero,89638 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
   8962c:	00800184 	movi	r2,6
   89630:	e0bfae15 	stw	r2,-328(fp)
   89634:	00000806 	br	89658 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
   89638:	a08019e0 	cmpeqi	r2,r20,103
   8963c:	1000021e 	bne	r2,zero,89648 <___vfprintf_internal_r+0x7e0>
   89640:	a08011d8 	cmpnei	r2,r20,71
   89644:	1000041e 	bne	r2,zero,89658 <___vfprintf_internal_r+0x7f0>
   89648:	e0bfae17 	ldw	r2,-328(fp)
   8964c:	1000021e 	bne	r2,zero,89658 <___vfprintf_internal_r+0x7f0>
				prec = 1;
   89650:	00800044 	movi	r2,1
   89654:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
   89658:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
   8965c:	e0bfc217 	ldw	r2,-248(fp)
   89660:	e0ffc317 	ldw	r3,-244(fp)
   89664:	dc800515 	stw	r18,20(sp)
   89668:	e13fc704 	addi	r4,fp,-228
   8966c:	d9000415 	stw	r4,16(sp)
   89670:	dd000315 	stw	r20,12(sp)
   89674:	e13fc404 	addi	r4,fp,-240
   89678:	d9000215 	stw	r4,8(sp)
   8967c:	e13fc144 	addi	r4,fp,-251
   89680:	d9000115 	stw	r4,4(sp)
   89684:	dcc00015 	stw	r19,0(sp)
   89688:	e1ffae17 	ldw	r7,-328(fp)
   8968c:	100b883a 	mov	r5,r2
   89690:	180d883a 	mov	r6,r3
   89694:	e13fe617 	ldw	r4,-104(fp)
   89698:	008af500 	call	8af50 <cvt>
   8969c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
   896a0:	a08019e0 	cmpeqi	r2,r20,103
   896a4:	1000021e 	bne	r2,zero,896b0 <___vfprintf_internal_r+0x848>
   896a8:	a08011d8 	cmpnei	r2,r20,71
   896ac:	1000091e 	bne	r2,zero,896d4 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
   896b0:	e0bfc417 	ldw	r2,-240(fp)
   896b4:	10bfff50 	cmplti	r2,r2,-3
   896b8:	1000031e 	bne	r2,zero,896c8 <___vfprintf_internal_r+0x860>
   896bc:	e0bfc417 	ldw	r2,-240(fp)
   896c0:	e0ffae17 	ldw	r3,-328(fp)
   896c4:	1880020e 	bge	r3,r2,896d0 <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
   896c8:	a53fff84 	addi	r20,r20,-2
   896cc:	00000106 	br	896d4 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
   896d0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
   896d4:	a0801988 	cmpgei	r2,r20,102
   896d8:	1000171e 	bne	r2,zero,89738 <___vfprintf_internal_r+0x8d0>
				--expt;
   896dc:	e0bfc417 	ldw	r2,-240(fp)
   896e0:	10bfffc4 	addi	r2,r2,-1
   896e4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
   896e8:	e0bfc417 	ldw	r2,-240(fp)
   896ec:	e0ffc504 	addi	r3,fp,-236
   896f0:	a00d883a 	mov	r6,r20
   896f4:	100b883a 	mov	r5,r2
   896f8:	1809883a 	mov	r4,r3
   896fc:	008b15c0 	call	8b15c <exponent>
   89700:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
   89704:	e0bfc717 	ldw	r2,-228(fp)
   89708:	e0ffaf17 	ldw	r3,-324(fp)
   8970c:	1885883a 	add	r2,r3,r2
   89710:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
   89714:	e0bfc717 	ldw	r2,-228(fp)
   89718:	10800088 	cmpgei	r2,r2,2
   8971c:	1000021e 	bne	r2,zero,89728 <___vfprintf_internal_r+0x8c0>
   89720:	9880004c 	andi	r2,r19,1
   89724:	10003526 	beq	r2,zero,897fc <___vfprintf_internal_r+0x994>
					++size;
   89728:	e0bfb617 	ldw	r2,-296(fp)
   8972c:	10800044 	addi	r2,r2,1
   89730:	e0bfb615 	stw	r2,-296(fp)
   89734:	00003106 	br	897fc <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
   89738:	a0801998 	cmpnei	r2,r20,102
   8973c:	1000181e 	bne	r2,zero,897a0 <___vfprintf_internal_r+0x938>
					if (expt > 0) {
   89740:	e0bfc417 	ldw	r2,-240(fp)
   89744:	00800c0e 	bge	zero,r2,89778 <___vfprintf_internal_r+0x910>
						size = expt;
   89748:	e0bfc417 	ldw	r2,-240(fp)
   8974c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
   89750:	e0bfae17 	ldw	r2,-328(fp)
   89754:	1000021e 	bne	r2,zero,89760 <___vfprintf_internal_r+0x8f8>
   89758:	9880004c 	andi	r2,r19,1
   8975c:	10002526 	beq	r2,zero,897f4 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
   89760:	e0bfae17 	ldw	r2,-328(fp)
   89764:	10800044 	addi	r2,r2,1
   89768:	e0ffb617 	ldw	r3,-296(fp)
   8976c:	1885883a 	add	r2,r3,r2
   89770:	e0bfb615 	stw	r2,-296(fp)
   89774:	00001f06 	br	897f4 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
   89778:	e0bfae17 	ldw	r2,-328(fp)
   8977c:	1000021e 	bne	r2,zero,89788 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   89780:	9880004c 	andi	r2,r19,1
   89784:	10000326 	beq	r2,zero,89794 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
   89788:	e0bfae17 	ldw	r2,-328(fp)
   8978c:	10800084 	addi	r2,r2,2
   89790:	00000106 	br	89798 <___vfprintf_internal_r+0x930>
   89794:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   89798:	e0bfb615 	stw	r2,-296(fp)
   8979c:	00001506 	br	897f4 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
   897a0:	e0ffc417 	ldw	r3,-240(fp)
   897a4:	e0bfc717 	ldw	r2,-228(fp)
   897a8:	18800816 	blt	r3,r2,897cc <___vfprintf_internal_r+0x964>
					size = expt;
   897ac:	e0bfc417 	ldw	r2,-240(fp)
   897b0:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
   897b4:	9880004c 	andi	r2,r19,1
   897b8:	10000e26 	beq	r2,zero,897f4 <___vfprintf_internal_r+0x98c>
						++size;
   897bc:	e0bfb617 	ldw	r2,-296(fp)
   897c0:	10800044 	addi	r2,r2,1
   897c4:	e0bfb615 	stw	r2,-296(fp)
   897c8:	00000a06 	br	897f4 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
   897cc:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
   897d0:	00800416 	blt	zero,r2,897e4 <___vfprintf_internal_r+0x97c>
   897d4:	e0bfc417 	ldw	r2,-240(fp)
   897d8:	00c00084 	movi	r3,2
   897dc:	1885c83a 	sub	r2,r3,r2
   897e0:	00000106 	br	897e8 <___vfprintf_internal_r+0x980>
   897e4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
   897e8:	e0ffc717 	ldw	r3,-228(fp)
   897ec:	10c5883a 	add	r2,r2,r3
   897f0:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
   897f4:	e0bfc417 	ldw	r2,-240(fp)
   897f8:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
   897fc:	e0bfc143 	ldbu	r2,-251(fp)
   89800:	10803fcc 	andi	r2,r2,255
   89804:	1080201c 	xori	r2,r2,128
   89808:	10bfe004 	addi	r2,r2,-128
   8980c:	10018b26 	beq	r2,zero,89e3c <___vfprintf_internal_r+0xfd4>
				sign = '-';
   89810:	00800b44 	movi	r2,45
   89814:	e0bfc105 	stb	r2,-252(fp)
			break;
   89818:	00018806 	br	89e3c <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   8981c:	9880080c 	andi	r2,r19,32
   89820:	10000d26 	beq	r2,zero,89858 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   89824:	e0bfe917 	ldw	r2,-92(fp)
   89828:	10c00104 	addi	r3,r2,4
   8982c:	e0ffe915 	stw	r3,-92(fp)
   89830:	10800017 	ldw	r2,0(r2)
   89834:	e0ffac17 	ldw	r3,-336(fp)
   89838:	e0fff015 	stw	r3,-64(fp)
   8983c:	1807d7fa 	srai	r3,r3,31
   89840:	e0fff115 	stw	r3,-60(fp)
   89844:	e0fff017 	ldw	r3,-64(fp)
   89848:	10c00015 	stw	r3,0(r2)
   8984c:	e0fff117 	ldw	r3,-60(fp)
   89850:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   89854:	00054b06 	br	8ad84 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   89858:	9880040c 	andi	r2,r19,16
   8985c:	10000726 	beq	r2,zero,8987c <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   89860:	e0bfe917 	ldw	r2,-92(fp)
   89864:	10c00104 	addi	r3,r2,4
   89868:	e0ffe915 	stw	r3,-92(fp)
   8986c:	10800017 	ldw	r2,0(r2)
   89870:	e0ffac17 	ldw	r3,-336(fp)
   89874:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   89878:	00054206 	br	8ad84 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   8987c:	9880100c 	andi	r2,r19,64
   89880:	10000726 	beq	r2,zero,898a0 <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   89884:	e0bfe917 	ldw	r2,-92(fp)
   89888:	10c00104 	addi	r3,r2,4
   8988c:	e0ffe915 	stw	r3,-92(fp)
   89890:	10800017 	ldw	r2,0(r2)
   89894:	e0ffac17 	ldw	r3,-336(fp)
   89898:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   8989c:	00053906 	br	8ad84 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   898a0:	e0bfe917 	ldw	r2,-92(fp)
   898a4:	10c00104 	addi	r3,r2,4
   898a8:	e0ffe915 	stw	r3,-92(fp)
   898ac:	10800017 	ldw	r2,0(r2)
   898b0:	e0ffac17 	ldw	r3,-336(fp)
   898b4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   898b8:	00053206 	br	8ad84 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
   898bc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   898c0:	9880080c 	andi	r2,r19,32
   898c4:	10000626 	beq	r2,zero,898e0 <___vfprintf_internal_r+0xa78>
   898c8:	e0bfe917 	ldw	r2,-92(fp)
   898cc:	10c00204 	addi	r3,r2,8
   898d0:	e0ffe915 	stw	r3,-92(fp)
   898d4:	15800017 	ldw	r22,0(r2)
   898d8:	15c00117 	ldw	r23,4(r2)
   898dc:	00001c06 	br	89950 <___vfprintf_internal_r+0xae8>
   898e0:	9880040c 	andi	r2,r19,16
   898e4:	10000726 	beq	r2,zero,89904 <___vfprintf_internal_r+0xa9c>
   898e8:	e0bfe917 	ldw	r2,-92(fp)
   898ec:	10c00104 	addi	r3,r2,4
   898f0:	e0ffe915 	stw	r3,-92(fp)
   898f4:	10800017 	ldw	r2,0(r2)
   898f8:	102d883a 	mov	r22,r2
   898fc:	002f883a 	mov	r23,zero
   89900:	00001306 	br	89950 <___vfprintf_internal_r+0xae8>
   89904:	9880100c 	andi	r2,r19,64
   89908:	10000b26 	beq	r2,zero,89938 <___vfprintf_internal_r+0xad0>
   8990c:	e0bfe917 	ldw	r2,-92(fp)
   89910:	10c00104 	addi	r3,r2,4
   89914:	e0ffe915 	stw	r3,-92(fp)
   89918:	10800017 	ldw	r2,0(r2)
   8991c:	e0bff215 	stw	r2,-56(fp)
   89920:	e03ff315 	stw	zero,-52(fp)
   89924:	e0bff217 	ldw	r2,-56(fp)
   89928:	15bfffcc 	andi	r22,r2,65535
   8992c:	e0fff317 	ldw	r3,-52(fp)
   89930:	182e703a 	and	r23,r3,zero
   89934:	00000606 	br	89950 <___vfprintf_internal_r+0xae8>
   89938:	e0bfe917 	ldw	r2,-92(fp)
   8993c:	10c00104 	addi	r3,r2,4
   89940:	e0ffe915 	stw	r3,-92(fp)
   89944:	10800017 	ldw	r2,0(r2)
   89948:	102d883a 	mov	r22,r2
   8994c:	002f883a 	mov	r23,zero
   89950:	e5bfb115 	stw	r22,-316(fp)
   89954:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
   89958:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   8995c:	0000a606 	br	89bf8 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   89960:	e0bfe917 	ldw	r2,-92(fp)
   89964:	10c00104 	addi	r3,r2,4
   89968:	e0ffe915 	stw	r3,-92(fp)
   8996c:	10800017 	ldw	r2,0(r2)
   89970:	e0bfb115 	stw	r2,-316(fp)
   89974:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
   89978:	00800084 	movi	r2,2
   8997c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
   89980:	008002b4 	movhi	r2,10
   89984:	1083a604 	addi	r2,r2,3736
   89988:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
   8998c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   89990:	00800c04 	movi	r2,48
   89994:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   89998:	05001e04 	movi	r20,120
   8999c:	00801e04 	movi	r2,120
   899a0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   899a4:	00009406 	br	89bf8 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   899a8:	e0bfe917 	ldw	r2,-92(fp)
   899ac:	10c00104 	addi	r3,r2,4
   899b0:	e0ffe915 	stw	r3,-92(fp)
   899b4:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   899b8:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   899bc:	9000081e 	bne	r18,zero,899e0 <___vfprintf_internal_r+0xb78>
				cp = "(null)";
   899c0:	048002b4 	movhi	r18,10
   899c4:	9483ab04 	addi	r18,r18,3756
				size = ((unsigned) prec > 6U) ? 6 : prec;
   899c8:	e0bfae17 	ldw	r2,-328(fp)
   899cc:	10c001f0 	cmpltui	r3,r2,7
   899d0:	1800011e 	bne	r3,zero,899d8 <___vfprintf_internal_r+0xb70>
   899d4:	00800184 	movi	r2,6
   899d8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   899dc:	00011806 	br	89e40 <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   899e0:	e0bfae17 	ldw	r2,-328(fp)
   899e4:	10001016 	blt	r2,zero,89a28 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   899e8:	e0bfae17 	ldw	r2,-328(fp)
   899ec:	100d883a 	mov	r6,r2
   899f0:	000b883a 	mov	r5,zero
   899f4:	9009883a 	mov	r4,r18
   899f8:	00904e00 	call	904e0 <memchr>
   899fc:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
   89a00:	e0bfbf17 	ldw	r2,-260(fp)
   89a04:	10000526 	beq	r2,zero,89a1c <___vfprintf_internal_r+0xbb4>
					size = p - cp;
   89a08:	e0bfbf17 	ldw	r2,-260(fp)
   89a0c:	9007883a 	mov	r3,r18
   89a10:	10c5c83a 	sub	r2,r2,r3
   89a14:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   89a18:	00010906 	br	89e40 <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   89a1c:	e0bfae17 	ldw	r2,-328(fp)
   89a20:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
   89a24:	00010606 	br	89e40 <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   89a28:	9009883a 	mov	r4,r18
   89a2c:	0088c340 	call	88c34 <strlen>
   89a30:	e0bfb615 	stw	r2,-296(fp)

			break;
   89a34:	00010206 	br	89e40 <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
   89a38:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   89a3c:	9880080c 	andi	r2,r19,32
   89a40:	10000826 	beq	r2,zero,89a64 <___vfprintf_internal_r+0xbfc>
   89a44:	e0bfe917 	ldw	r2,-92(fp)
   89a48:	10c00204 	addi	r3,r2,8
   89a4c:	e0ffe915 	stw	r3,-92(fp)
   89a50:	10c00017 	ldw	r3,0(r2)
   89a54:	e0ffec15 	stw	r3,-80(fp)
   89a58:	10c00117 	ldw	r3,4(r2)
   89a5c:	e0ffed15 	stw	r3,-76(fp)
   89a60:	00001e06 	br	89adc <___vfprintf_internal_r+0xc74>
   89a64:	9880040c 	andi	r2,r19,16
   89a68:	10000726 	beq	r2,zero,89a88 <___vfprintf_internal_r+0xc20>
   89a6c:	e0bfe917 	ldw	r2,-92(fp)
   89a70:	10c00104 	addi	r3,r2,4
   89a74:	e0ffe915 	stw	r3,-92(fp)
   89a78:	10800017 	ldw	r2,0(r2)
   89a7c:	e0bfec15 	stw	r2,-80(fp)
   89a80:	e03fed15 	stw	zero,-76(fp)
   89a84:	00001506 	br	89adc <___vfprintf_internal_r+0xc74>
   89a88:	9880100c 	andi	r2,r19,64
   89a8c:	10000d26 	beq	r2,zero,89ac4 <___vfprintf_internal_r+0xc5c>
   89a90:	e0bfe917 	ldw	r2,-92(fp)
   89a94:	10c00104 	addi	r3,r2,4
   89a98:	e0ffe915 	stw	r3,-92(fp)
   89a9c:	10800017 	ldw	r2,0(r2)
   89aa0:	e0bff415 	stw	r2,-48(fp)
   89aa4:	e03ff515 	stw	zero,-44(fp)
   89aa8:	e0bff417 	ldw	r2,-48(fp)
   89aac:	10bfffcc 	andi	r2,r2,65535
   89ab0:	e0bfec15 	stw	r2,-80(fp)
   89ab4:	e0fff517 	ldw	r3,-44(fp)
   89ab8:	1806703a 	and	r3,r3,zero
   89abc:	e0ffed15 	stw	r3,-76(fp)
   89ac0:	00000606 	br	89adc <___vfprintf_internal_r+0xc74>
   89ac4:	e0bfe917 	ldw	r2,-92(fp)
   89ac8:	10c00104 	addi	r3,r2,4
   89acc:	e0ffe915 	stw	r3,-92(fp)
   89ad0:	10800017 	ldw	r2,0(r2)
   89ad4:	e0bfec15 	stw	r2,-80(fp)
   89ad8:	e03fed15 	stw	zero,-76(fp)
   89adc:	e0bfec17 	ldw	r2,-80(fp)
   89ae0:	e0bfb115 	stw	r2,-316(fp)
   89ae4:	e0ffed17 	ldw	r3,-76(fp)
   89ae8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
   89aec:	00800044 	movi	r2,1
   89af0:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
   89af4:	00004006 	br	89bf8 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
   89af8:	008002b4 	movhi	r2,10
   89afc:	1083ad04 	addi	r2,r2,3764
   89b00:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
   89b04:	00000306 	br	89b14 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
   89b08:	008002b4 	movhi	r2,10
   89b0c:	1083a604 	addi	r2,r2,3736
   89b10:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
   89b14:	9880080c 	andi	r2,r19,32
   89b18:	10000826 	beq	r2,zero,89b3c <___vfprintf_internal_r+0xcd4>
   89b1c:	e0bfe917 	ldw	r2,-92(fp)
   89b20:	10c00204 	addi	r3,r2,8
   89b24:	e0ffe915 	stw	r3,-92(fp)
   89b28:	10c00017 	ldw	r3,0(r2)
   89b2c:	e0ffee15 	stw	r3,-72(fp)
   89b30:	10c00117 	ldw	r3,4(r2)
   89b34:	e0ffef15 	stw	r3,-68(fp)
   89b38:	00001e06 	br	89bb4 <___vfprintf_internal_r+0xd4c>
   89b3c:	9880040c 	andi	r2,r19,16
   89b40:	10000726 	beq	r2,zero,89b60 <___vfprintf_internal_r+0xcf8>
   89b44:	e0bfe917 	ldw	r2,-92(fp)
   89b48:	10c00104 	addi	r3,r2,4
   89b4c:	e0ffe915 	stw	r3,-92(fp)
   89b50:	10800017 	ldw	r2,0(r2)
   89b54:	e0bfee15 	stw	r2,-72(fp)
   89b58:	e03fef15 	stw	zero,-68(fp)
   89b5c:	00001506 	br	89bb4 <___vfprintf_internal_r+0xd4c>
   89b60:	9880100c 	andi	r2,r19,64
   89b64:	10000d26 	beq	r2,zero,89b9c <___vfprintf_internal_r+0xd34>
   89b68:	e0bfe917 	ldw	r2,-92(fp)
   89b6c:	10c00104 	addi	r3,r2,4
   89b70:	e0ffe915 	stw	r3,-92(fp)
   89b74:	10800017 	ldw	r2,0(r2)
   89b78:	e0bff615 	stw	r2,-40(fp)
   89b7c:	e03ff715 	stw	zero,-36(fp)
   89b80:	e0bff617 	ldw	r2,-40(fp)
   89b84:	10bfffcc 	andi	r2,r2,65535
   89b88:	e0bfee15 	stw	r2,-72(fp)
   89b8c:	e0fff717 	ldw	r3,-36(fp)
   89b90:	1806703a 	and	r3,r3,zero
   89b94:	e0ffef15 	stw	r3,-68(fp)
   89b98:	00000606 	br	89bb4 <___vfprintf_internal_r+0xd4c>
   89b9c:	e0bfe917 	ldw	r2,-92(fp)
   89ba0:	10c00104 	addi	r3,r2,4
   89ba4:	e0ffe915 	stw	r3,-92(fp)
   89ba8:	10800017 	ldw	r2,0(r2)
   89bac:	e0bfee15 	stw	r2,-72(fp)
   89bb0:	e03fef15 	stw	zero,-68(fp)
   89bb4:	e0bfee17 	ldw	r2,-72(fp)
   89bb8:	e0bfb115 	stw	r2,-316(fp)
   89bbc:	e0ffef17 	ldw	r3,-68(fp)
   89bc0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
   89bc4:	00800084 	movi	r2,2
   89bc8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   89bcc:	9880004c 	andi	r2,r19,1
   89bd0:	10000926 	beq	r2,zero,89bf8 <___vfprintf_internal_r+0xd90>
   89bd4:	e0bfb117 	ldw	r2,-316(fp)
   89bd8:	e0ffb217 	ldw	r3,-312(fp)
   89bdc:	10c4b03a 	or	r2,r2,r3
   89be0:	10000526 	beq	r2,zero,89bf8 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
   89be4:	00800c04 	movi	r2,48
   89be8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   89bec:	a005883a 	mov	r2,r20
   89bf0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   89bf4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   89bf8:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   89bfc:	e0bfae17 	ldw	r2,-328(fp)
   89c00:	e0bfb415 	stw	r2,-304(fp)
   89c04:	e0bfb417 	ldw	r2,-304(fp)
   89c08:	10000216 	blt	r2,zero,89c14 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
   89c0c:	00bfdfc4 	movi	r2,-129
   89c10:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   89c14:	e4bfdb04 	addi	r18,fp,-148
   89c18:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
   89c1c:	e0bfb117 	ldw	r2,-316(fp)
   89c20:	e0ffb217 	ldw	r3,-312(fp)
   89c24:	10c4b03a 	or	r2,r2,r3
   89c28:	1000021e 	bne	r2,zero,89c34 <___vfprintf_internal_r+0xdcc>
   89c2c:	e0bfae17 	ldw	r2,-328(fp)
   89c30:	10006c26 	beq	r2,zero,89de4 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   89c34:	e0bfb303 	ldbu	r2,-308(fp)
   89c38:	10c00060 	cmpeqi	r3,r2,1
   89c3c:	1800211e 	bne	r3,zero,89cc4 <___vfprintf_internal_r+0xe5c>
   89c40:	10c000a0 	cmpeqi	r3,r2,2
   89c44:	1800491e 	bne	r3,zero,89d6c <___vfprintf_internal_r+0xf04>
   89c48:	10005d1e 	bne	r2,zero,89dc0 <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   89c4c:	94bfffc4 	addi	r18,r18,-1
   89c50:	e0bfb117 	ldw	r2,-316(fp)
   89c54:	108001cc 	andi	r2,r2,7
   89c58:	10800c04 	addi	r2,r2,48
   89c5c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
   89c60:	e0bfb217 	ldw	r2,-312(fp)
   89c64:	1004977a 	slli	r2,r2,29
   89c68:	e0ffb117 	ldw	r3,-316(fp)
   89c6c:	1806d0fa 	srli	r3,r3,3
   89c70:	1884b03a 	or	r2,r3,r2
   89c74:	e0bfb115 	stw	r2,-316(fp)
   89c78:	e0bfb217 	ldw	r2,-312(fp)
   89c7c:	1004d0fa 	srli	r2,r2,3
   89c80:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   89c84:	e0bfb117 	ldw	r2,-316(fp)
   89c88:	e0ffb217 	ldw	r3,-312(fp)
   89c8c:	10c4b03a 	or	r2,r2,r3
   89c90:	103fee1e 	bne	r2,zero,89c4c <__alt_data_end+0xfffd7c4c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   89c94:	9880004c 	andi	r2,r19,1
   89c98:	10005026 	beq	r2,zero,89ddc <___vfprintf_internal_r+0xf74>
   89c9c:	90800003 	ldbu	r2,0(r18)
   89ca0:	10803fcc 	andi	r2,r2,255
   89ca4:	1080201c 	xori	r2,r2,128
   89ca8:	10bfe004 	addi	r2,r2,-128
   89cac:	10800c20 	cmpeqi	r2,r2,48
   89cb0:	10004a1e 	bne	r2,zero,89ddc <___vfprintf_internal_r+0xf74>
						*--cp = '0';
   89cb4:	94bfffc4 	addi	r18,r18,-1
   89cb8:	00800c04 	movi	r2,48
   89cbc:	90800005 	stb	r2,0(r18)
					break;
   89cc0:	00004606 	br	89ddc <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   89cc4:	e0bfb217 	ldw	r2,-312(fp)
   89cc8:	10000a1e 	bne	r2,zero,89cf4 <___vfprintf_internal_r+0xe8c>
   89ccc:	e0bfb217 	ldw	r2,-312(fp)
   89cd0:	1000031e 	bne	r2,zero,89ce0 <___vfprintf_internal_r+0xe78>
   89cd4:	e0bfb117 	ldw	r2,-316(fp)
   89cd8:	108002a8 	cmpgeui	r2,r2,10
   89cdc:	1000051e 	bne	r2,zero,89cf4 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
   89ce0:	94bfffc4 	addi	r18,r18,-1
   89ce4:	e0bfb117 	ldw	r2,-316(fp)
   89ce8:	10800c04 	addi	r2,r2,48
   89cec:	90800005 	stb	r2,0(r18)
						break;
   89cf0:	00003b06 	br	89de0 <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   89cf4:	94bfffc4 	addi	r18,r18,-1
   89cf8:	e0bfb117 	ldw	r2,-316(fp)
   89cfc:	e0ffb217 	ldw	r3,-312(fp)
   89d00:	01800284 	movi	r6,10
   89d04:	000f883a 	mov	r7,zero
   89d08:	1009883a 	mov	r4,r2
   89d0c:	180b883a 	mov	r5,r3
   89d10:	009d8240 	call	9d824 <__umoddi3>
   89d14:	1009883a 	mov	r4,r2
   89d18:	180b883a 	mov	r5,r3
   89d1c:	2005883a 	mov	r2,r4
   89d20:	2807883a 	mov	r3,r5
   89d24:	10800c04 	addi	r2,r2,48
   89d28:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   89d2c:	e0bfb117 	ldw	r2,-316(fp)
   89d30:	e0ffb217 	ldw	r3,-312(fp)
   89d34:	01800284 	movi	r6,10
   89d38:	000f883a 	mov	r7,zero
   89d3c:	1009883a 	mov	r4,r2
   89d40:	180b883a 	mov	r5,r3
   89d44:	009d2280 	call	9d228 <__udivdi3>
   89d48:	1009883a 	mov	r4,r2
   89d4c:	180b883a 	mov	r5,r3
   89d50:	e13fb115 	stw	r4,-316(fp)
   89d54:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
   89d58:	e0bfb117 	ldw	r2,-316(fp)
   89d5c:	e0ffb217 	ldw	r3,-312(fp)
   89d60:	10c4b03a 	or	r2,r2,r3
   89d64:	103fe31e 	bne	r2,zero,89cf4 <__alt_data_end+0xfffd7cf4>
					break;
   89d68:	00001d06 	br	89de0 <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   89d6c:	94bfffc4 	addi	r18,r18,-1
   89d70:	e0bfb117 	ldw	r2,-316(fp)
   89d74:	108003cc 	andi	r2,r2,15
   89d78:	e0ffb717 	ldw	r3,-292(fp)
   89d7c:	1885883a 	add	r2,r3,r2
   89d80:	10800003 	ldbu	r2,0(r2)
   89d84:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
   89d88:	e0bfb217 	ldw	r2,-312(fp)
   89d8c:	1004973a 	slli	r2,r2,28
   89d90:	e0ffb117 	ldw	r3,-316(fp)
   89d94:	1806d13a 	srli	r3,r3,4
   89d98:	1884b03a 	or	r2,r3,r2
   89d9c:	e0bfb115 	stw	r2,-316(fp)
   89da0:	e0bfb217 	ldw	r2,-312(fp)
   89da4:	1004d13a 	srli	r2,r2,4
   89da8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   89dac:	e0bfb117 	ldw	r2,-316(fp)
   89db0:	e0ffb217 	ldw	r3,-312(fp)
   89db4:	10c4b03a 	or	r2,r2,r3
   89db8:	103fec1e 	bne	r2,zero,89d6c <__alt_data_end+0xfffd7d6c>
					break;
   89dbc:	00000806 	br	89de0 <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
   89dc0:	048002b4 	movhi	r18,10
   89dc4:	9483b204 	addi	r18,r18,3784
					size = strlen (cp);
   89dc8:	9009883a 	mov	r4,r18
   89dcc:	0088c340 	call	88c34 <strlen>
   89dd0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
   89dd4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   89dd8:	00001906 	br	89e40 <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   89ddc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   89de0:	00000706 	br	89e00 <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   89de4:	e0bfb303 	ldbu	r2,-308(fp)
   89de8:	1000051e 	bne	r2,zero,89e00 <___vfprintf_internal_r+0xf98>
   89dec:	9880004c 	andi	r2,r19,1
   89df0:	10000326 	beq	r2,zero,89e00 <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
   89df4:	94bfffc4 	addi	r18,r18,-1
   89df8:	00800c04 	movi	r2,48
   89dfc:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
   89e00:	e0bfdb04 	addi	r2,fp,-148
   89e04:	10800a04 	addi	r2,r2,40
   89e08:	1007883a 	mov	r3,r2
   89e0c:	9005883a 	mov	r2,r18
   89e10:	1885c83a 	sub	r2,r3,r2
   89e14:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
   89e18:	00000906 	br	89e40 <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   89e1c:	a003dc26 	beq	r20,zero,8ad90 <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   89e20:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
   89e24:	a005883a 	mov	r2,r20
   89e28:	90800005 	stb	r2,0(r18)
			size = 1;
   89e2c:	00800044 	movi	r2,1
   89e30:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
   89e34:	e03fc105 	stb	zero,-252(fp)
			break;
   89e38:	00000106 	br	89e40 <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
   89e3c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   89e40:	e0ffb417 	ldw	r3,-304(fp)
   89e44:	e0bfb617 	ldw	r2,-296(fp)
   89e48:	10c0010e 	bge	r2,r3,89e50 <___vfprintf_internal_r+0xfe8>
   89e4c:	1805883a 	mov	r2,r3
   89e50:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
   89e54:	e0bfc103 	ldbu	r2,-252(fp)
   89e58:	10803fcc 	andi	r2,r2,255
   89e5c:	1080201c 	xori	r2,r2,128
   89e60:	10bfe004 	addi	r2,r2,-128
   89e64:	10000326 	beq	r2,zero,89e74 <___vfprintf_internal_r+0x100c>
			realsz++;
   89e68:	e0bfb517 	ldw	r2,-300(fp)
   89e6c:	10800044 	addi	r2,r2,1
   89e70:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
   89e74:	9880008c 	andi	r2,r19,2
   89e78:	10000326 	beq	r2,zero,89e88 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
   89e7c:	e0bfb517 	ldw	r2,-300(fp)
   89e80:	10800084 	addi	r2,r2,2
   89e84:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   89e88:	9880210c 	andi	r2,r19,132
   89e8c:	1000351e 	bne	r2,zero,89f64 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
   89e90:	e0ffad17 	ldw	r3,-332(fp)
   89e94:	e0bfb517 	ldw	r2,-300(fp)
   89e98:	18a1c83a 	sub	r16,r3,r2
   89e9c:	0400310e 	bge	zero,r16,89f64 <___vfprintf_internal_r+0x10fc>
   89ea0:	00001706 	br	89f00 <___vfprintf_internal_r+0x1098>
   89ea4:	008002b4 	movhi	r2,10
   89ea8:	1083b984 	addi	r2,r2,3814
   89eac:	88800015 	stw	r2,0(r17)
   89eb0:	00800404 	movi	r2,16
   89eb4:	88800115 	stw	r2,4(r17)
   89eb8:	e0bfca17 	ldw	r2,-216(fp)
   89ebc:	10800404 	addi	r2,r2,16
   89ec0:	e0bfca15 	stw	r2,-216(fp)
   89ec4:	8c400204 	addi	r17,r17,8
   89ec8:	e0bfc917 	ldw	r2,-220(fp)
   89ecc:	10800044 	addi	r2,r2,1
   89ed0:	e0bfc915 	stw	r2,-220(fp)
   89ed4:	e0bfc917 	ldw	r2,-220(fp)
   89ed8:	10800210 	cmplti	r2,r2,8
   89edc:	1000071e 	bne	r2,zero,89efc <___vfprintf_internal_r+0x1094>
   89ee0:	e0bfc804 	addi	r2,fp,-224
   89ee4:	100d883a 	mov	r6,r2
   89ee8:	e17fe717 	ldw	r5,-100(fp)
   89eec:	e13fe617 	ldw	r4,-104(fp)
   89ef0:	0098c180 	call	98c18 <__sprint_r>
   89ef4:	1003b41e 	bne	r2,zero,8adc8 <___vfprintf_internal_r+0x1f60>
   89ef8:	e47fcb04 	addi	r17,fp,-212
   89efc:	843ffc04 	addi	r16,r16,-16
   89f00:	80800448 	cmpgei	r2,r16,17
   89f04:	103fe71e 	bne	r2,zero,89ea4 <__alt_data_end+0xfffd7ea4>
   89f08:	008002b4 	movhi	r2,10
   89f0c:	1083b984 	addi	r2,r2,3814
   89f10:	88800015 	stw	r2,0(r17)
   89f14:	8005883a 	mov	r2,r16
   89f18:	88800115 	stw	r2,4(r17)
   89f1c:	e0bfca17 	ldw	r2,-216(fp)
   89f20:	8007883a 	mov	r3,r16
   89f24:	10c5883a 	add	r2,r2,r3
   89f28:	e0bfca15 	stw	r2,-216(fp)
   89f2c:	8c400204 	addi	r17,r17,8
   89f30:	e0bfc917 	ldw	r2,-220(fp)
   89f34:	10800044 	addi	r2,r2,1
   89f38:	e0bfc915 	stw	r2,-220(fp)
   89f3c:	e0bfc917 	ldw	r2,-220(fp)
   89f40:	10800210 	cmplti	r2,r2,8
   89f44:	1000071e 	bne	r2,zero,89f64 <___vfprintf_internal_r+0x10fc>
   89f48:	e0bfc804 	addi	r2,fp,-224
   89f4c:	100d883a 	mov	r6,r2
   89f50:	e17fe717 	ldw	r5,-100(fp)
   89f54:	e13fe617 	ldw	r4,-104(fp)
   89f58:	0098c180 	call	98c18 <__sprint_r>
   89f5c:	10039c1e 	bne	r2,zero,8add0 <___vfprintf_internal_r+0x1f68>
   89f60:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
   89f64:	e0bfc103 	ldbu	r2,-252(fp)
   89f68:	10803fcc 	andi	r2,r2,255
   89f6c:	1080201c 	xori	r2,r2,128
   89f70:	10bfe004 	addi	r2,r2,-128
   89f74:	10001526 	beq	r2,zero,89fcc <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
   89f78:	e0bfc104 	addi	r2,fp,-252
   89f7c:	88800015 	stw	r2,0(r17)
   89f80:	00800044 	movi	r2,1
   89f84:	88800115 	stw	r2,4(r17)
   89f88:	e0bfca17 	ldw	r2,-216(fp)
   89f8c:	10800044 	addi	r2,r2,1
   89f90:	e0bfca15 	stw	r2,-216(fp)
   89f94:	8c400204 	addi	r17,r17,8
   89f98:	e0bfc917 	ldw	r2,-220(fp)
   89f9c:	10800044 	addi	r2,r2,1
   89fa0:	e0bfc915 	stw	r2,-220(fp)
   89fa4:	e0bfc917 	ldw	r2,-220(fp)
   89fa8:	10800210 	cmplti	r2,r2,8
   89fac:	1000071e 	bne	r2,zero,89fcc <___vfprintf_internal_r+0x1164>
   89fb0:	e0bfc804 	addi	r2,fp,-224
   89fb4:	100d883a 	mov	r6,r2
   89fb8:	e17fe717 	ldw	r5,-100(fp)
   89fbc:	e13fe617 	ldw	r4,-104(fp)
   89fc0:	0098c180 	call	98c18 <__sprint_r>
   89fc4:	1003841e 	bne	r2,zero,8add8 <___vfprintf_internal_r+0x1f70>
   89fc8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
   89fcc:	9880008c 	andi	r2,r19,2
   89fd0:	10001526 	beq	r2,zero,8a028 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
   89fd4:	e0bfe504 	addi	r2,fp,-108
   89fd8:	88800015 	stw	r2,0(r17)
   89fdc:	00800084 	movi	r2,2
   89fe0:	88800115 	stw	r2,4(r17)
   89fe4:	e0bfca17 	ldw	r2,-216(fp)
   89fe8:	10800084 	addi	r2,r2,2
   89fec:	e0bfca15 	stw	r2,-216(fp)
   89ff0:	8c400204 	addi	r17,r17,8
   89ff4:	e0bfc917 	ldw	r2,-220(fp)
   89ff8:	10800044 	addi	r2,r2,1
   89ffc:	e0bfc915 	stw	r2,-220(fp)
   8a000:	e0bfc917 	ldw	r2,-220(fp)
   8a004:	10800210 	cmplti	r2,r2,8
   8a008:	1000071e 	bne	r2,zero,8a028 <___vfprintf_internal_r+0x11c0>
   8a00c:	e0bfc804 	addi	r2,fp,-224
   8a010:	100d883a 	mov	r6,r2
   8a014:	e17fe717 	ldw	r5,-100(fp)
   8a018:	e13fe617 	ldw	r4,-104(fp)
   8a01c:	0098c180 	call	98c18 <__sprint_r>
   8a020:	10036f1e 	bne	r2,zero,8ade0 <___vfprintf_internal_r+0x1f78>
   8a024:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   8a028:	9880210c 	andi	r2,r19,132
   8a02c:	10802018 	cmpnei	r2,r2,128
   8a030:	1000351e 	bne	r2,zero,8a108 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
   8a034:	e0ffad17 	ldw	r3,-332(fp)
   8a038:	e0bfb517 	ldw	r2,-300(fp)
   8a03c:	18a1c83a 	sub	r16,r3,r2
   8a040:	0400310e 	bge	zero,r16,8a108 <___vfprintf_internal_r+0x12a0>
   8a044:	00001706 	br	8a0a4 <___vfprintf_internal_r+0x123c>
   8a048:	008002b4 	movhi	r2,10
   8a04c:	1083bd84 	addi	r2,r2,3830
   8a050:	88800015 	stw	r2,0(r17)
   8a054:	00800404 	movi	r2,16
   8a058:	88800115 	stw	r2,4(r17)
   8a05c:	e0bfca17 	ldw	r2,-216(fp)
   8a060:	10800404 	addi	r2,r2,16
   8a064:	e0bfca15 	stw	r2,-216(fp)
   8a068:	8c400204 	addi	r17,r17,8
   8a06c:	e0bfc917 	ldw	r2,-220(fp)
   8a070:	10800044 	addi	r2,r2,1
   8a074:	e0bfc915 	stw	r2,-220(fp)
   8a078:	e0bfc917 	ldw	r2,-220(fp)
   8a07c:	10800210 	cmplti	r2,r2,8
   8a080:	1000071e 	bne	r2,zero,8a0a0 <___vfprintf_internal_r+0x1238>
   8a084:	e0bfc804 	addi	r2,fp,-224
   8a088:	100d883a 	mov	r6,r2
   8a08c:	e17fe717 	ldw	r5,-100(fp)
   8a090:	e13fe617 	ldw	r4,-104(fp)
   8a094:	0098c180 	call	98c18 <__sprint_r>
   8a098:	1003531e 	bne	r2,zero,8ade8 <___vfprintf_internal_r+0x1f80>
   8a09c:	e47fcb04 	addi	r17,fp,-212
   8a0a0:	843ffc04 	addi	r16,r16,-16
   8a0a4:	80800448 	cmpgei	r2,r16,17
   8a0a8:	103fe71e 	bne	r2,zero,8a048 <__alt_data_end+0xfffd8048>
   8a0ac:	008002b4 	movhi	r2,10
   8a0b0:	1083bd84 	addi	r2,r2,3830
   8a0b4:	88800015 	stw	r2,0(r17)
   8a0b8:	8005883a 	mov	r2,r16
   8a0bc:	88800115 	stw	r2,4(r17)
   8a0c0:	e0bfca17 	ldw	r2,-216(fp)
   8a0c4:	8007883a 	mov	r3,r16
   8a0c8:	10c5883a 	add	r2,r2,r3
   8a0cc:	e0bfca15 	stw	r2,-216(fp)
   8a0d0:	8c400204 	addi	r17,r17,8
   8a0d4:	e0bfc917 	ldw	r2,-220(fp)
   8a0d8:	10800044 	addi	r2,r2,1
   8a0dc:	e0bfc915 	stw	r2,-220(fp)
   8a0e0:	e0bfc917 	ldw	r2,-220(fp)
   8a0e4:	10800210 	cmplti	r2,r2,8
   8a0e8:	1000071e 	bne	r2,zero,8a108 <___vfprintf_internal_r+0x12a0>
   8a0ec:	e0bfc804 	addi	r2,fp,-224
   8a0f0:	100d883a 	mov	r6,r2
   8a0f4:	e17fe717 	ldw	r5,-100(fp)
   8a0f8:	e13fe617 	ldw	r4,-104(fp)
   8a0fc:	0098c180 	call	98c18 <__sprint_r>
   8a100:	10033b1e 	bne	r2,zero,8adf0 <___vfprintf_internal_r+0x1f88>
   8a104:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   8a108:	e0ffb417 	ldw	r3,-304(fp)
   8a10c:	e0bfb617 	ldw	r2,-296(fp)
   8a110:	18a1c83a 	sub	r16,r3,r2
   8a114:	0400310e 	bge	zero,r16,8a1dc <___vfprintf_internal_r+0x1374>
   8a118:	00001706 	br	8a178 <___vfprintf_internal_r+0x1310>
   8a11c:	008002b4 	movhi	r2,10
   8a120:	1083bd84 	addi	r2,r2,3830
   8a124:	88800015 	stw	r2,0(r17)
   8a128:	00800404 	movi	r2,16
   8a12c:	88800115 	stw	r2,4(r17)
   8a130:	e0bfca17 	ldw	r2,-216(fp)
   8a134:	10800404 	addi	r2,r2,16
   8a138:	e0bfca15 	stw	r2,-216(fp)
   8a13c:	8c400204 	addi	r17,r17,8
   8a140:	e0bfc917 	ldw	r2,-220(fp)
   8a144:	10800044 	addi	r2,r2,1
   8a148:	e0bfc915 	stw	r2,-220(fp)
   8a14c:	e0bfc917 	ldw	r2,-220(fp)
   8a150:	10800210 	cmplti	r2,r2,8
   8a154:	1000071e 	bne	r2,zero,8a174 <___vfprintf_internal_r+0x130c>
   8a158:	e0bfc804 	addi	r2,fp,-224
   8a15c:	100d883a 	mov	r6,r2
   8a160:	e17fe717 	ldw	r5,-100(fp)
   8a164:	e13fe617 	ldw	r4,-104(fp)
   8a168:	0098c180 	call	98c18 <__sprint_r>
   8a16c:	1003221e 	bne	r2,zero,8adf8 <___vfprintf_internal_r+0x1f90>
   8a170:	e47fcb04 	addi	r17,fp,-212
   8a174:	843ffc04 	addi	r16,r16,-16
   8a178:	80800448 	cmpgei	r2,r16,17
   8a17c:	103fe71e 	bne	r2,zero,8a11c <__alt_data_end+0xfffd811c>
   8a180:	008002b4 	movhi	r2,10
   8a184:	1083bd84 	addi	r2,r2,3830
   8a188:	88800015 	stw	r2,0(r17)
   8a18c:	8005883a 	mov	r2,r16
   8a190:	88800115 	stw	r2,4(r17)
   8a194:	e0bfca17 	ldw	r2,-216(fp)
   8a198:	8007883a 	mov	r3,r16
   8a19c:	10c5883a 	add	r2,r2,r3
   8a1a0:	e0bfca15 	stw	r2,-216(fp)
   8a1a4:	8c400204 	addi	r17,r17,8
   8a1a8:	e0bfc917 	ldw	r2,-220(fp)
   8a1ac:	10800044 	addi	r2,r2,1
   8a1b0:	e0bfc915 	stw	r2,-220(fp)
   8a1b4:	e0bfc917 	ldw	r2,-220(fp)
   8a1b8:	10800210 	cmplti	r2,r2,8
   8a1bc:	1000071e 	bne	r2,zero,8a1dc <___vfprintf_internal_r+0x1374>
   8a1c0:	e0bfc804 	addi	r2,fp,-224
   8a1c4:	100d883a 	mov	r6,r2
   8a1c8:	e17fe717 	ldw	r5,-100(fp)
   8a1cc:	e13fe617 	ldw	r4,-104(fp)
   8a1d0:	0098c180 	call	98c18 <__sprint_r>
   8a1d4:	10030a1e 	bne	r2,zero,8ae00 <___vfprintf_internal_r+0x1f98>
   8a1d8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   8a1dc:	9880400c 	andi	r2,r19,256
   8a1e0:	1000161e 	bne	r2,zero,8a23c <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
   8a1e4:	8c800015 	stw	r18,0(r17)
   8a1e8:	e0bfb617 	ldw	r2,-296(fp)
   8a1ec:	88800115 	stw	r2,4(r17)
   8a1f0:	e0ffca17 	ldw	r3,-216(fp)
   8a1f4:	e0bfb617 	ldw	r2,-296(fp)
   8a1f8:	1885883a 	add	r2,r3,r2
   8a1fc:	e0bfca15 	stw	r2,-216(fp)
   8a200:	8c400204 	addi	r17,r17,8
   8a204:	e0bfc917 	ldw	r2,-220(fp)
   8a208:	10800044 	addi	r2,r2,1
   8a20c:	e0bfc915 	stw	r2,-220(fp)
   8a210:	e0bfc917 	ldw	r2,-220(fp)
   8a214:	10800210 	cmplti	r2,r2,8
   8a218:	10028c1e 	bne	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
   8a21c:	e0bfc804 	addi	r2,fp,-224
   8a220:	100d883a 	mov	r6,r2
   8a224:	e17fe717 	ldw	r5,-100(fp)
   8a228:	e13fe617 	ldw	r4,-104(fp)
   8a22c:	0098c180 	call	98c18 <__sprint_r>
   8a230:	1002f51e 	bne	r2,zero,8ae08 <___vfprintf_internal_r+0x1fa0>
   8a234:	e47fcb04 	addi	r17,fp,-212
   8a238:	00028406 	br	8ac4c <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
   8a23c:	a0801990 	cmplti	r2,r20,102
   8a240:	1001d11e 	bne	r2,zero,8a988 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
   8a244:	e0bfc217 	ldw	r2,-248(fp)
   8a248:	e0ffc317 	ldw	r3,-244(fp)
   8a24c:	000d883a 	mov	r6,zero
   8a250:	000f883a 	mov	r7,zero
   8a254:	1009883a 	mov	r4,r2
   8a258:	180b883a 	mov	r5,r3
   8a25c:	009dde80 	call	9dde8 <__eqdf2>
   8a260:	1000661e 	bne	r2,zero,8a3fc <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   8a264:	008002b4 	movhi	r2,10
   8a268:	1083b904 	addi	r2,r2,3812
   8a26c:	88800015 	stw	r2,0(r17)
   8a270:	00800044 	movi	r2,1
   8a274:	88800115 	stw	r2,4(r17)
   8a278:	e0bfca17 	ldw	r2,-216(fp)
   8a27c:	10800044 	addi	r2,r2,1
   8a280:	e0bfca15 	stw	r2,-216(fp)
   8a284:	8c400204 	addi	r17,r17,8
   8a288:	e0bfc917 	ldw	r2,-220(fp)
   8a28c:	10800044 	addi	r2,r2,1
   8a290:	e0bfc915 	stw	r2,-220(fp)
   8a294:	e0bfc917 	ldw	r2,-220(fp)
   8a298:	10800210 	cmplti	r2,r2,8
   8a29c:	1000071e 	bne	r2,zero,8a2bc <___vfprintf_internal_r+0x1454>
   8a2a0:	e0bfc804 	addi	r2,fp,-224
   8a2a4:	100d883a 	mov	r6,r2
   8a2a8:	e17fe717 	ldw	r5,-100(fp)
   8a2ac:	e13fe617 	ldw	r4,-104(fp)
   8a2b0:	0098c180 	call	98c18 <__sprint_r>
   8a2b4:	1002d61e 	bne	r2,zero,8ae10 <___vfprintf_internal_r+0x1fa8>
   8a2b8:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
   8a2bc:	e0ffc417 	ldw	r3,-240(fp)
   8a2c0:	e0bfc717 	ldw	r2,-228(fp)
   8a2c4:	18800216 	blt	r3,r2,8a2d0 <___vfprintf_internal_r+0x1468>
   8a2c8:	9880004c 	andi	r2,r19,1
   8a2cc:	10025f26 	beq	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   8a2d0:	e0bfbb17 	ldw	r2,-276(fp)
   8a2d4:	88800015 	stw	r2,0(r17)
   8a2d8:	e0bfbc17 	ldw	r2,-272(fp)
   8a2dc:	88800115 	stw	r2,4(r17)
   8a2e0:	e0ffca17 	ldw	r3,-216(fp)
   8a2e4:	e0bfbc17 	ldw	r2,-272(fp)
   8a2e8:	1885883a 	add	r2,r3,r2
   8a2ec:	e0bfca15 	stw	r2,-216(fp)
   8a2f0:	8c400204 	addi	r17,r17,8
   8a2f4:	e0bfc917 	ldw	r2,-220(fp)
   8a2f8:	10800044 	addi	r2,r2,1
   8a2fc:	e0bfc915 	stw	r2,-220(fp)
   8a300:	e0bfc917 	ldw	r2,-220(fp)
   8a304:	10800210 	cmplti	r2,r2,8
   8a308:	1000071e 	bne	r2,zero,8a328 <___vfprintf_internal_r+0x14c0>
   8a30c:	e0bfc804 	addi	r2,fp,-224
   8a310:	100d883a 	mov	r6,r2
   8a314:	e17fe717 	ldw	r5,-100(fp)
   8a318:	e13fe617 	ldw	r4,-104(fp)
   8a31c:	0098c180 	call	98c18 <__sprint_r>
   8a320:	1002bd1e 	bne	r2,zero,8ae18 <___vfprintf_internal_r+0x1fb0>
   8a324:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
   8a328:	e0bfc717 	ldw	r2,-228(fp)
   8a32c:	143fffc4 	addi	r16,r2,-1
   8a330:	0402460e 	bge	zero,r16,8ac4c <___vfprintf_internal_r+0x1de4>
   8a334:	00001706 	br	8a394 <___vfprintf_internal_r+0x152c>
   8a338:	008002b4 	movhi	r2,10
   8a33c:	1083bd84 	addi	r2,r2,3830
   8a340:	88800015 	stw	r2,0(r17)
   8a344:	00800404 	movi	r2,16
   8a348:	88800115 	stw	r2,4(r17)
   8a34c:	e0bfca17 	ldw	r2,-216(fp)
   8a350:	10800404 	addi	r2,r2,16
   8a354:	e0bfca15 	stw	r2,-216(fp)
   8a358:	8c400204 	addi	r17,r17,8
   8a35c:	e0bfc917 	ldw	r2,-220(fp)
   8a360:	10800044 	addi	r2,r2,1
   8a364:	e0bfc915 	stw	r2,-220(fp)
   8a368:	e0bfc917 	ldw	r2,-220(fp)
   8a36c:	10800210 	cmplti	r2,r2,8
   8a370:	1000071e 	bne	r2,zero,8a390 <___vfprintf_internal_r+0x1528>
   8a374:	e0bfc804 	addi	r2,fp,-224
   8a378:	100d883a 	mov	r6,r2
   8a37c:	e17fe717 	ldw	r5,-100(fp)
   8a380:	e13fe617 	ldw	r4,-104(fp)
   8a384:	0098c180 	call	98c18 <__sprint_r>
   8a388:	1002a51e 	bne	r2,zero,8ae20 <___vfprintf_internal_r+0x1fb8>
   8a38c:	e47fcb04 	addi	r17,fp,-212
   8a390:	843ffc04 	addi	r16,r16,-16
   8a394:	80800448 	cmpgei	r2,r16,17
   8a398:	103fe71e 	bne	r2,zero,8a338 <__alt_data_end+0xfffd8338>
   8a39c:	008002b4 	movhi	r2,10
   8a3a0:	1083bd84 	addi	r2,r2,3830
   8a3a4:	88800015 	stw	r2,0(r17)
   8a3a8:	8005883a 	mov	r2,r16
   8a3ac:	88800115 	stw	r2,4(r17)
   8a3b0:	e0bfca17 	ldw	r2,-216(fp)
   8a3b4:	8007883a 	mov	r3,r16
   8a3b8:	10c5883a 	add	r2,r2,r3
   8a3bc:	e0bfca15 	stw	r2,-216(fp)
   8a3c0:	8c400204 	addi	r17,r17,8
   8a3c4:	e0bfc917 	ldw	r2,-220(fp)
   8a3c8:	10800044 	addi	r2,r2,1
   8a3cc:	e0bfc915 	stw	r2,-220(fp)
   8a3d0:	e0bfc917 	ldw	r2,-220(fp)
   8a3d4:	10800210 	cmplti	r2,r2,8
   8a3d8:	10021c1e 	bne	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
   8a3dc:	e0bfc804 	addi	r2,fp,-224
   8a3e0:	100d883a 	mov	r6,r2
   8a3e4:	e17fe717 	ldw	r5,-100(fp)
   8a3e8:	e13fe617 	ldw	r4,-104(fp)
   8a3ec:	0098c180 	call	98c18 <__sprint_r>
   8a3f0:	10028d1e 	bne	r2,zero,8ae28 <___vfprintf_internal_r+0x1fc0>
   8a3f4:	e47fcb04 	addi	r17,fp,-212
   8a3f8:	00021406 	br	8ac4c <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
   8a3fc:	e0bfc417 	ldw	r2,-240(fp)
   8a400:	00807c16 	blt	zero,r2,8a5f4 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
   8a404:	008002b4 	movhi	r2,10
   8a408:	1083b904 	addi	r2,r2,3812
   8a40c:	88800015 	stw	r2,0(r17)
   8a410:	00800044 	movi	r2,1
   8a414:	88800115 	stw	r2,4(r17)
   8a418:	e0bfca17 	ldw	r2,-216(fp)
   8a41c:	10800044 	addi	r2,r2,1
   8a420:	e0bfca15 	stw	r2,-216(fp)
   8a424:	8c400204 	addi	r17,r17,8
   8a428:	e0bfc917 	ldw	r2,-220(fp)
   8a42c:	10800044 	addi	r2,r2,1
   8a430:	e0bfc915 	stw	r2,-220(fp)
   8a434:	e0bfc917 	ldw	r2,-220(fp)
   8a438:	10800210 	cmplti	r2,r2,8
   8a43c:	1000071e 	bne	r2,zero,8a45c <___vfprintf_internal_r+0x15f4>
   8a440:	e0bfc804 	addi	r2,fp,-224
   8a444:	100d883a 	mov	r6,r2
   8a448:	e17fe717 	ldw	r5,-100(fp)
   8a44c:	e13fe617 	ldw	r4,-104(fp)
   8a450:	0098c180 	call	98c18 <__sprint_r>
   8a454:	1002761e 	bne	r2,zero,8ae30 <___vfprintf_internal_r+0x1fc8>
   8a458:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
   8a45c:	e0bfc417 	ldw	r2,-240(fp)
   8a460:	1000041e 	bne	r2,zero,8a474 <___vfprintf_internal_r+0x160c>
   8a464:	e0bfc717 	ldw	r2,-228(fp)
   8a468:	1000021e 	bne	r2,zero,8a474 <___vfprintf_internal_r+0x160c>
   8a46c:	9880004c 	andi	r2,r19,1
   8a470:	1001f626 	beq	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   8a474:	e0bfbb17 	ldw	r2,-276(fp)
   8a478:	88800015 	stw	r2,0(r17)
   8a47c:	e0bfbc17 	ldw	r2,-272(fp)
   8a480:	88800115 	stw	r2,4(r17)
   8a484:	e0ffca17 	ldw	r3,-216(fp)
   8a488:	e0bfbc17 	ldw	r2,-272(fp)
   8a48c:	1885883a 	add	r2,r3,r2
   8a490:	e0bfca15 	stw	r2,-216(fp)
   8a494:	8c400204 	addi	r17,r17,8
   8a498:	e0bfc917 	ldw	r2,-220(fp)
   8a49c:	10800044 	addi	r2,r2,1
   8a4a0:	e0bfc915 	stw	r2,-220(fp)
   8a4a4:	e0bfc917 	ldw	r2,-220(fp)
   8a4a8:	10800210 	cmplti	r2,r2,8
   8a4ac:	1000071e 	bne	r2,zero,8a4cc <___vfprintf_internal_r+0x1664>
   8a4b0:	e0bfc804 	addi	r2,fp,-224
   8a4b4:	100d883a 	mov	r6,r2
   8a4b8:	e17fe717 	ldw	r5,-100(fp)
   8a4bc:	e13fe617 	ldw	r4,-104(fp)
   8a4c0:	0098c180 	call	98c18 <__sprint_r>
   8a4c4:	10025c1e 	bne	r2,zero,8ae38 <___vfprintf_internal_r+0x1fd0>
   8a4c8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
   8a4cc:	e0bfc417 	ldw	r2,-240(fp)
   8a4d0:	00a1c83a 	sub	r16,zero,r2
   8a4d4:	0400310e 	bge	zero,r16,8a59c <___vfprintf_internal_r+0x1734>
   8a4d8:	00001706 	br	8a538 <___vfprintf_internal_r+0x16d0>
   8a4dc:	008002b4 	movhi	r2,10
   8a4e0:	1083bd84 	addi	r2,r2,3830
   8a4e4:	88800015 	stw	r2,0(r17)
   8a4e8:	00800404 	movi	r2,16
   8a4ec:	88800115 	stw	r2,4(r17)
   8a4f0:	e0bfca17 	ldw	r2,-216(fp)
   8a4f4:	10800404 	addi	r2,r2,16
   8a4f8:	e0bfca15 	stw	r2,-216(fp)
   8a4fc:	8c400204 	addi	r17,r17,8
   8a500:	e0bfc917 	ldw	r2,-220(fp)
   8a504:	10800044 	addi	r2,r2,1
   8a508:	e0bfc915 	stw	r2,-220(fp)
   8a50c:	e0bfc917 	ldw	r2,-220(fp)
   8a510:	10800210 	cmplti	r2,r2,8
   8a514:	1000071e 	bne	r2,zero,8a534 <___vfprintf_internal_r+0x16cc>
   8a518:	e0bfc804 	addi	r2,fp,-224
   8a51c:	100d883a 	mov	r6,r2
   8a520:	e17fe717 	ldw	r5,-100(fp)
   8a524:	e13fe617 	ldw	r4,-104(fp)
   8a528:	0098c180 	call	98c18 <__sprint_r>
   8a52c:	1002441e 	bne	r2,zero,8ae40 <___vfprintf_internal_r+0x1fd8>
   8a530:	e47fcb04 	addi	r17,fp,-212
   8a534:	843ffc04 	addi	r16,r16,-16
   8a538:	80800448 	cmpgei	r2,r16,17
   8a53c:	103fe71e 	bne	r2,zero,8a4dc <__alt_data_end+0xfffd84dc>
   8a540:	008002b4 	movhi	r2,10
   8a544:	1083bd84 	addi	r2,r2,3830
   8a548:	88800015 	stw	r2,0(r17)
   8a54c:	8005883a 	mov	r2,r16
   8a550:	88800115 	stw	r2,4(r17)
   8a554:	e0bfca17 	ldw	r2,-216(fp)
   8a558:	8007883a 	mov	r3,r16
   8a55c:	10c5883a 	add	r2,r2,r3
   8a560:	e0bfca15 	stw	r2,-216(fp)
   8a564:	8c400204 	addi	r17,r17,8
   8a568:	e0bfc917 	ldw	r2,-220(fp)
   8a56c:	10800044 	addi	r2,r2,1
   8a570:	e0bfc915 	stw	r2,-220(fp)
   8a574:	e0bfc917 	ldw	r2,-220(fp)
   8a578:	10800210 	cmplti	r2,r2,8
   8a57c:	1000071e 	bne	r2,zero,8a59c <___vfprintf_internal_r+0x1734>
   8a580:	e0bfc804 	addi	r2,fp,-224
   8a584:	100d883a 	mov	r6,r2
   8a588:	e17fe717 	ldw	r5,-100(fp)
   8a58c:	e13fe617 	ldw	r4,-104(fp)
   8a590:	0098c180 	call	98c18 <__sprint_r>
   8a594:	10022c1e 	bne	r2,zero,8ae48 <___vfprintf_internal_r+0x1fe0>
   8a598:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
   8a59c:	8c800015 	stw	r18,0(r17)
   8a5a0:	e0bfc717 	ldw	r2,-228(fp)
   8a5a4:	88800115 	stw	r2,4(r17)
   8a5a8:	e0bfca17 	ldw	r2,-216(fp)
   8a5ac:	e0ffc717 	ldw	r3,-228(fp)
   8a5b0:	10c5883a 	add	r2,r2,r3
   8a5b4:	e0bfca15 	stw	r2,-216(fp)
   8a5b8:	8c400204 	addi	r17,r17,8
   8a5bc:	e0bfc917 	ldw	r2,-220(fp)
   8a5c0:	10800044 	addi	r2,r2,1
   8a5c4:	e0bfc915 	stw	r2,-220(fp)
   8a5c8:	e0bfc917 	ldw	r2,-220(fp)
   8a5cc:	10800210 	cmplti	r2,r2,8
   8a5d0:	10019e1e 	bne	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
   8a5d4:	e0bfc804 	addi	r2,fp,-224
   8a5d8:	100d883a 	mov	r6,r2
   8a5dc:	e17fe717 	ldw	r5,-100(fp)
   8a5e0:	e13fe617 	ldw	r4,-104(fp)
   8a5e4:	0098c180 	call	98c18 <__sprint_r>
   8a5e8:	1002191e 	bne	r2,zero,8ae50 <___vfprintf_internal_r+0x1fe8>
   8a5ec:	e47fcb04 	addi	r17,fp,-212
   8a5f0:	00019606 	br	8ac4c <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
   8a5f4:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
   8a5f8:	e0bfc717 	ldw	r2,-228(fp)
   8a5fc:	1007883a 	mov	r3,r2
   8a600:	e0bfc017 	ldw	r2,-256(fp)
   8a604:	10c5883a 	add	r2,r2,r3
   8a608:	1007883a 	mov	r3,r2
   8a60c:	9005883a 	mov	r2,r18
   8a610:	1885c83a 	sub	r2,r3,r2
   8a614:	e0bfb915 	stw	r2,-284(fp)
   8a618:	e0bfb917 	ldw	r2,-284(fp)
   8a61c:	e0ffb017 	ldw	r3,-320(fp)
   8a620:	1880020e 	bge	r3,r2,8a62c <___vfprintf_internal_r+0x17c4>
   8a624:	e0bfb017 	ldw	r2,-320(fp)
   8a628:	e0bfb915 	stw	r2,-284(fp)
   8a62c:	e0bfb917 	ldw	r2,-284(fp)
   8a630:	0080150e 	bge	zero,r2,8a688 <___vfprintf_internal_r+0x1820>
   8a634:	8c800015 	stw	r18,0(r17)
   8a638:	e0bfb917 	ldw	r2,-284(fp)
   8a63c:	88800115 	stw	r2,4(r17)
   8a640:	e0ffca17 	ldw	r3,-216(fp)
   8a644:	e0bfb917 	ldw	r2,-284(fp)
   8a648:	1885883a 	add	r2,r3,r2
   8a64c:	e0bfca15 	stw	r2,-216(fp)
   8a650:	8c400204 	addi	r17,r17,8
   8a654:	e0bfc917 	ldw	r2,-220(fp)
   8a658:	10800044 	addi	r2,r2,1
   8a65c:	e0bfc915 	stw	r2,-220(fp)
   8a660:	e0bfc917 	ldw	r2,-220(fp)
   8a664:	10800210 	cmplti	r2,r2,8
   8a668:	1000071e 	bne	r2,zero,8a688 <___vfprintf_internal_r+0x1820>
   8a66c:	e0bfc804 	addi	r2,fp,-224
   8a670:	100d883a 	mov	r6,r2
   8a674:	e17fe717 	ldw	r5,-100(fp)
   8a678:	e13fe617 	ldw	r4,-104(fp)
   8a67c:	0098c180 	call	98c18 <__sprint_r>
   8a680:	1001f51e 	bne	r2,zero,8ae58 <___vfprintf_internal_r+0x1ff0>
   8a684:	e47fcb04 	addi	r17,fp,-212
   8a688:	e0bfb917 	ldw	r2,-284(fp)
   8a68c:	1000010e 	bge	r2,zero,8a694 <___vfprintf_internal_r+0x182c>
   8a690:	0005883a 	mov	r2,zero
   8a694:	e0ffb017 	ldw	r3,-320(fp)
   8a698:	1885c83a 	sub	r2,r3,r2
   8a69c:	e0bfb915 	stw	r2,-284(fp)
   8a6a0:	e0bfb917 	ldw	r2,-284(fp)
   8a6a4:	0080340e 	bge	zero,r2,8a778 <___vfprintf_internal_r+0x1910>
   8a6a8:	00001906 	br	8a710 <___vfprintf_internal_r+0x18a8>
   8a6ac:	008002b4 	movhi	r2,10
   8a6b0:	1083bd84 	addi	r2,r2,3830
   8a6b4:	88800015 	stw	r2,0(r17)
   8a6b8:	00800404 	movi	r2,16
   8a6bc:	88800115 	stw	r2,4(r17)
   8a6c0:	e0bfca17 	ldw	r2,-216(fp)
   8a6c4:	10800404 	addi	r2,r2,16
   8a6c8:	e0bfca15 	stw	r2,-216(fp)
   8a6cc:	8c400204 	addi	r17,r17,8
   8a6d0:	e0bfc917 	ldw	r2,-220(fp)
   8a6d4:	10800044 	addi	r2,r2,1
   8a6d8:	e0bfc915 	stw	r2,-220(fp)
   8a6dc:	e0bfc917 	ldw	r2,-220(fp)
   8a6e0:	10800210 	cmplti	r2,r2,8
   8a6e4:	1000071e 	bne	r2,zero,8a704 <___vfprintf_internal_r+0x189c>
   8a6e8:	e0bfc804 	addi	r2,fp,-224
   8a6ec:	100d883a 	mov	r6,r2
   8a6f0:	e17fe717 	ldw	r5,-100(fp)
   8a6f4:	e13fe617 	ldw	r4,-104(fp)
   8a6f8:	0098c180 	call	98c18 <__sprint_r>
   8a6fc:	1001d81e 	bne	r2,zero,8ae60 <___vfprintf_internal_r+0x1ff8>
   8a700:	e47fcb04 	addi	r17,fp,-212
   8a704:	e0bfb917 	ldw	r2,-284(fp)
   8a708:	10bffc04 	addi	r2,r2,-16
   8a70c:	e0bfb915 	stw	r2,-284(fp)
   8a710:	e0bfb917 	ldw	r2,-284(fp)
   8a714:	10800448 	cmpgei	r2,r2,17
   8a718:	103fe41e 	bne	r2,zero,8a6ac <__alt_data_end+0xfffd86ac>
   8a71c:	008002b4 	movhi	r2,10
   8a720:	1083bd84 	addi	r2,r2,3830
   8a724:	88800015 	stw	r2,0(r17)
   8a728:	e0bfb917 	ldw	r2,-284(fp)
   8a72c:	88800115 	stw	r2,4(r17)
   8a730:	e0ffca17 	ldw	r3,-216(fp)
   8a734:	e0bfb917 	ldw	r2,-284(fp)
   8a738:	1885883a 	add	r2,r3,r2
   8a73c:	e0bfca15 	stw	r2,-216(fp)
   8a740:	8c400204 	addi	r17,r17,8
   8a744:	e0bfc917 	ldw	r2,-220(fp)
   8a748:	10800044 	addi	r2,r2,1
   8a74c:	e0bfc915 	stw	r2,-220(fp)
   8a750:	e0bfc917 	ldw	r2,-220(fp)
   8a754:	10800210 	cmplti	r2,r2,8
   8a758:	1000071e 	bne	r2,zero,8a778 <___vfprintf_internal_r+0x1910>
   8a75c:	e0bfc804 	addi	r2,fp,-224
   8a760:	100d883a 	mov	r6,r2
   8a764:	e17fe717 	ldw	r5,-100(fp)
   8a768:	e13fe617 	ldw	r4,-104(fp)
   8a76c:	0098c180 	call	98c18 <__sprint_r>
   8a770:	1001bd1e 	bne	r2,zero,8ae68 <___vfprintf_internal_r+0x2000>
   8a774:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
   8a778:	e0bfb017 	ldw	r2,-320(fp)
   8a77c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
   8a780:	e0ffc417 	ldw	r3,-240(fp)
   8a784:	e0bfc717 	ldw	r2,-228(fp)
   8a788:	18800216 	blt	r3,r2,8a794 <___vfprintf_internal_r+0x192c>
   8a78c:	9880004c 	andi	r2,r19,1
   8a790:	10001626 	beq	r2,zero,8a7ec <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
   8a794:	e0bfbb17 	ldw	r2,-276(fp)
   8a798:	88800015 	stw	r2,0(r17)
   8a79c:	e0bfbc17 	ldw	r2,-272(fp)
   8a7a0:	88800115 	stw	r2,4(r17)
   8a7a4:	e0ffca17 	ldw	r3,-216(fp)
   8a7a8:	e0bfbc17 	ldw	r2,-272(fp)
   8a7ac:	1885883a 	add	r2,r3,r2
   8a7b0:	e0bfca15 	stw	r2,-216(fp)
   8a7b4:	8c400204 	addi	r17,r17,8
   8a7b8:	e0bfc917 	ldw	r2,-220(fp)
   8a7bc:	10800044 	addi	r2,r2,1
   8a7c0:	e0bfc915 	stw	r2,-220(fp)
   8a7c4:	e0bfc917 	ldw	r2,-220(fp)
   8a7c8:	10800210 	cmplti	r2,r2,8
   8a7cc:	1000071e 	bne	r2,zero,8a7ec <___vfprintf_internal_r+0x1984>
   8a7d0:	e0bfc804 	addi	r2,fp,-224
   8a7d4:	100d883a 	mov	r6,r2
   8a7d8:	e17fe717 	ldw	r5,-100(fp)
   8a7dc:	e13fe617 	ldw	r4,-104(fp)
   8a7e0:	0098c180 	call	98c18 <__sprint_r>
   8a7e4:	1001a21e 	bne	r2,zero,8ae70 <___vfprintf_internal_r+0x2008>
   8a7e8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
   8a7ec:	e0bfc717 	ldw	r2,-228(fp)
   8a7f0:	1007883a 	mov	r3,r2
   8a7f4:	e0bfc017 	ldw	r2,-256(fp)
   8a7f8:	10c5883a 	add	r2,r2,r3
   8a7fc:	1007883a 	mov	r3,r2
   8a800:	9005883a 	mov	r2,r18
   8a804:	1885c83a 	sub	r2,r3,r2
   8a808:	e0bfba15 	stw	r2,-280(fp)
   8a80c:	e0ffc717 	ldw	r3,-228(fp)
   8a810:	e0bfc417 	ldw	r2,-240(fp)
   8a814:	1887c83a 	sub	r3,r3,r2
   8a818:	e0bfba17 	ldw	r2,-280(fp)
   8a81c:	1880040e 	bge	r3,r2,8a830 <___vfprintf_internal_r+0x19c8>
   8a820:	e0ffc717 	ldw	r3,-228(fp)
   8a824:	e0bfc417 	ldw	r2,-240(fp)
   8a828:	1885c83a 	sub	r2,r3,r2
   8a82c:	e0bfba15 	stw	r2,-280(fp)
   8a830:	e0bfba17 	ldw	r2,-280(fp)
   8a834:	0080150e 	bge	zero,r2,8a88c <___vfprintf_internal_r+0x1a24>
   8a838:	8c800015 	stw	r18,0(r17)
   8a83c:	e0bfba17 	ldw	r2,-280(fp)
   8a840:	88800115 	stw	r2,4(r17)
   8a844:	e0ffca17 	ldw	r3,-216(fp)
   8a848:	e0bfba17 	ldw	r2,-280(fp)
   8a84c:	1885883a 	add	r2,r3,r2
   8a850:	e0bfca15 	stw	r2,-216(fp)
   8a854:	8c400204 	addi	r17,r17,8
   8a858:	e0bfc917 	ldw	r2,-220(fp)
   8a85c:	10800044 	addi	r2,r2,1
   8a860:	e0bfc915 	stw	r2,-220(fp)
   8a864:	e0bfc917 	ldw	r2,-220(fp)
   8a868:	10800210 	cmplti	r2,r2,8
   8a86c:	1000071e 	bne	r2,zero,8a88c <___vfprintf_internal_r+0x1a24>
   8a870:	e0bfc804 	addi	r2,fp,-224
   8a874:	100d883a 	mov	r6,r2
   8a878:	e17fe717 	ldw	r5,-100(fp)
   8a87c:	e13fe617 	ldw	r4,-104(fp)
   8a880:	0098c180 	call	98c18 <__sprint_r>
   8a884:	10017c1e 	bne	r2,zero,8ae78 <___vfprintf_internal_r+0x2010>
   8a888:	e47fcb04 	addi	r17,fp,-212
   8a88c:	e0ffc717 	ldw	r3,-228(fp)
   8a890:	e0bfc417 	ldw	r2,-240(fp)
   8a894:	1887c83a 	sub	r3,r3,r2
   8a898:	e0bfba17 	ldw	r2,-280(fp)
   8a89c:	1000010e 	bge	r2,zero,8a8a4 <___vfprintf_internal_r+0x1a3c>
   8a8a0:	0005883a 	mov	r2,zero
   8a8a4:	1885c83a 	sub	r2,r3,r2
   8a8a8:	e0bfba15 	stw	r2,-280(fp)
   8a8ac:	e0bfba17 	ldw	r2,-280(fp)
   8a8b0:	0080e60e 	bge	zero,r2,8ac4c <___vfprintf_internal_r+0x1de4>
   8a8b4:	00001906 	br	8a91c <___vfprintf_internal_r+0x1ab4>
   8a8b8:	008002b4 	movhi	r2,10
   8a8bc:	1083bd84 	addi	r2,r2,3830
   8a8c0:	88800015 	stw	r2,0(r17)
   8a8c4:	00800404 	movi	r2,16
   8a8c8:	88800115 	stw	r2,4(r17)
   8a8cc:	e0bfca17 	ldw	r2,-216(fp)
   8a8d0:	10800404 	addi	r2,r2,16
   8a8d4:	e0bfca15 	stw	r2,-216(fp)
   8a8d8:	8c400204 	addi	r17,r17,8
   8a8dc:	e0bfc917 	ldw	r2,-220(fp)
   8a8e0:	10800044 	addi	r2,r2,1
   8a8e4:	e0bfc915 	stw	r2,-220(fp)
   8a8e8:	e0bfc917 	ldw	r2,-220(fp)
   8a8ec:	10800210 	cmplti	r2,r2,8
   8a8f0:	1000071e 	bne	r2,zero,8a910 <___vfprintf_internal_r+0x1aa8>
   8a8f4:	e0bfc804 	addi	r2,fp,-224
   8a8f8:	100d883a 	mov	r6,r2
   8a8fc:	e17fe717 	ldw	r5,-100(fp)
   8a900:	e13fe617 	ldw	r4,-104(fp)
   8a904:	0098c180 	call	98c18 <__sprint_r>
   8a908:	10015d1e 	bne	r2,zero,8ae80 <___vfprintf_internal_r+0x2018>
   8a90c:	e47fcb04 	addi	r17,fp,-212
   8a910:	e0bfba17 	ldw	r2,-280(fp)
   8a914:	10bffc04 	addi	r2,r2,-16
   8a918:	e0bfba15 	stw	r2,-280(fp)
   8a91c:	e0bfba17 	ldw	r2,-280(fp)
   8a920:	10800448 	cmpgei	r2,r2,17
   8a924:	103fe41e 	bne	r2,zero,8a8b8 <__alt_data_end+0xfffd88b8>
   8a928:	008002b4 	movhi	r2,10
   8a92c:	1083bd84 	addi	r2,r2,3830
   8a930:	88800015 	stw	r2,0(r17)
   8a934:	e0bfba17 	ldw	r2,-280(fp)
   8a938:	88800115 	stw	r2,4(r17)
   8a93c:	e0ffca17 	ldw	r3,-216(fp)
   8a940:	e0bfba17 	ldw	r2,-280(fp)
   8a944:	1885883a 	add	r2,r3,r2
   8a948:	e0bfca15 	stw	r2,-216(fp)
   8a94c:	8c400204 	addi	r17,r17,8
   8a950:	e0bfc917 	ldw	r2,-220(fp)
   8a954:	10800044 	addi	r2,r2,1
   8a958:	e0bfc915 	stw	r2,-220(fp)
   8a95c:	e0bfc917 	ldw	r2,-220(fp)
   8a960:	10800210 	cmplti	r2,r2,8
   8a964:	1000b91e 	bne	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
   8a968:	e0bfc804 	addi	r2,fp,-224
   8a96c:	100d883a 	mov	r6,r2
   8a970:	e17fe717 	ldw	r5,-100(fp)
   8a974:	e13fe617 	ldw	r4,-104(fp)
   8a978:	0098c180 	call	98c18 <__sprint_r>
   8a97c:	1001421e 	bne	r2,zero,8ae88 <___vfprintf_internal_r+0x2020>
   8a980:	e47fcb04 	addi	r17,fp,-212
   8a984:	0000b106 	br	8ac4c <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
   8a988:	e0bfc717 	ldw	r2,-228(fp)
   8a98c:	10800088 	cmpgei	r2,r2,2
   8a990:	1000021e 	bne	r2,zero,8a99c <___vfprintf_internal_r+0x1b34>
   8a994:	9880004c 	andi	r2,r19,1
   8a998:	10008026 	beq	r2,zero,8ab9c <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
   8a99c:	8c800015 	stw	r18,0(r17)
   8a9a0:	00800044 	movi	r2,1
   8a9a4:	88800115 	stw	r2,4(r17)
   8a9a8:	e0bfca17 	ldw	r2,-216(fp)
   8a9ac:	10800044 	addi	r2,r2,1
   8a9b0:	e0bfca15 	stw	r2,-216(fp)
   8a9b4:	8c400204 	addi	r17,r17,8
   8a9b8:	e0bfc917 	ldw	r2,-220(fp)
   8a9bc:	10800044 	addi	r2,r2,1
   8a9c0:	e0bfc915 	stw	r2,-220(fp)
   8a9c4:	e0bfc917 	ldw	r2,-220(fp)
   8a9c8:	10800210 	cmplti	r2,r2,8
   8a9cc:	1000071e 	bne	r2,zero,8a9ec <___vfprintf_internal_r+0x1b84>
   8a9d0:	e0bfc804 	addi	r2,fp,-224
   8a9d4:	100d883a 	mov	r6,r2
   8a9d8:	e17fe717 	ldw	r5,-100(fp)
   8a9dc:	e13fe617 	ldw	r4,-104(fp)
   8a9e0:	0098c180 	call	98c18 <__sprint_r>
   8a9e4:	10012a1e 	bne	r2,zero,8ae90 <___vfprintf_internal_r+0x2028>
   8a9e8:	e47fcb04 	addi	r17,fp,-212
					cp++;
   8a9ec:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
   8a9f0:	e0bfbb17 	ldw	r2,-276(fp)
   8a9f4:	88800015 	stw	r2,0(r17)
   8a9f8:	e0bfbc17 	ldw	r2,-272(fp)
   8a9fc:	88800115 	stw	r2,4(r17)
   8aa00:	e0ffca17 	ldw	r3,-216(fp)
   8aa04:	e0bfbc17 	ldw	r2,-272(fp)
   8aa08:	1885883a 	add	r2,r3,r2
   8aa0c:	e0bfca15 	stw	r2,-216(fp)
   8aa10:	8c400204 	addi	r17,r17,8
   8aa14:	e0bfc917 	ldw	r2,-220(fp)
   8aa18:	10800044 	addi	r2,r2,1
   8aa1c:	e0bfc915 	stw	r2,-220(fp)
   8aa20:	e0bfc917 	ldw	r2,-220(fp)
   8aa24:	10800210 	cmplti	r2,r2,8
   8aa28:	1000071e 	bne	r2,zero,8aa48 <___vfprintf_internal_r+0x1be0>
   8aa2c:	e0bfc804 	addi	r2,fp,-224
   8aa30:	100d883a 	mov	r6,r2
   8aa34:	e17fe717 	ldw	r5,-100(fp)
   8aa38:	e13fe617 	ldw	r4,-104(fp)
   8aa3c:	0098c180 	call	98c18 <__sprint_r>
   8aa40:	1001151e 	bne	r2,zero,8ae98 <___vfprintf_internal_r+0x2030>
   8aa44:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
   8aa48:	e0bfc217 	ldw	r2,-248(fp)
   8aa4c:	e0ffc317 	ldw	r3,-244(fp)
   8aa50:	000d883a 	mov	r6,zero
   8aa54:	000f883a 	mov	r7,zero
   8aa58:	1009883a 	mov	r4,r2
   8aa5c:	180b883a 	mov	r5,r3
   8aa60:	009dde80 	call	9dde8 <__eqdf2>
   8aa64:	10001826 	beq	r2,zero,8aac8 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
   8aa68:	8c800015 	stw	r18,0(r17)
   8aa6c:	e0bfc717 	ldw	r2,-228(fp)
   8aa70:	10bfffc4 	addi	r2,r2,-1
   8aa74:	88800115 	stw	r2,4(r17)
   8aa78:	e0bfca17 	ldw	r2,-216(fp)
   8aa7c:	e0ffc717 	ldw	r3,-228(fp)
   8aa80:	10c5883a 	add	r2,r2,r3
   8aa84:	10bfffc4 	addi	r2,r2,-1
   8aa88:	e0bfca15 	stw	r2,-216(fp)
   8aa8c:	8c400204 	addi	r17,r17,8
   8aa90:	e0bfc917 	ldw	r2,-220(fp)
   8aa94:	10800044 	addi	r2,r2,1
   8aa98:	e0bfc915 	stw	r2,-220(fp)
   8aa9c:	e0bfc917 	ldw	r2,-220(fp)
   8aaa0:	10800210 	cmplti	r2,r2,8
   8aaa4:	1000521e 	bne	r2,zero,8abf0 <___vfprintf_internal_r+0x1d88>
   8aaa8:	e0bfc804 	addi	r2,fp,-224
   8aaac:	100d883a 	mov	r6,r2
   8aab0:	e17fe717 	ldw	r5,-100(fp)
   8aab4:	e13fe617 	ldw	r4,-104(fp)
   8aab8:	0098c180 	call	98c18 <__sprint_r>
   8aabc:	1000f81e 	bne	r2,zero,8aea0 <___vfprintf_internal_r+0x2038>
   8aac0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   8aac4:	00004a06 	br	8abf0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   8aac8:	e0bfc717 	ldw	r2,-228(fp)
   8aacc:	143fffc4 	addi	r16,r2,-1
   8aad0:	0400470e 	bge	zero,r16,8abf0 <___vfprintf_internal_r+0x1d88>
   8aad4:	00001706 	br	8ab34 <___vfprintf_internal_r+0x1ccc>
   8aad8:	008002b4 	movhi	r2,10
   8aadc:	1083bd84 	addi	r2,r2,3830
   8aae0:	88800015 	stw	r2,0(r17)
   8aae4:	00800404 	movi	r2,16
   8aae8:	88800115 	stw	r2,4(r17)
   8aaec:	e0bfca17 	ldw	r2,-216(fp)
   8aaf0:	10800404 	addi	r2,r2,16
   8aaf4:	e0bfca15 	stw	r2,-216(fp)
   8aaf8:	8c400204 	addi	r17,r17,8
   8aafc:	e0bfc917 	ldw	r2,-220(fp)
   8ab00:	10800044 	addi	r2,r2,1
   8ab04:	e0bfc915 	stw	r2,-220(fp)
   8ab08:	e0bfc917 	ldw	r2,-220(fp)
   8ab0c:	10800210 	cmplti	r2,r2,8
   8ab10:	1000071e 	bne	r2,zero,8ab30 <___vfprintf_internal_r+0x1cc8>
   8ab14:	e0bfc804 	addi	r2,fp,-224
   8ab18:	100d883a 	mov	r6,r2
   8ab1c:	e17fe717 	ldw	r5,-100(fp)
   8ab20:	e13fe617 	ldw	r4,-104(fp)
   8ab24:	0098c180 	call	98c18 <__sprint_r>
   8ab28:	1000df1e 	bne	r2,zero,8aea8 <___vfprintf_internal_r+0x2040>
   8ab2c:	e47fcb04 	addi	r17,fp,-212
   8ab30:	843ffc04 	addi	r16,r16,-16
   8ab34:	80800448 	cmpgei	r2,r16,17
   8ab38:	103fe71e 	bne	r2,zero,8aad8 <__alt_data_end+0xfffd8ad8>
   8ab3c:	008002b4 	movhi	r2,10
   8ab40:	1083bd84 	addi	r2,r2,3830
   8ab44:	88800015 	stw	r2,0(r17)
   8ab48:	8005883a 	mov	r2,r16
   8ab4c:	88800115 	stw	r2,4(r17)
   8ab50:	e0bfca17 	ldw	r2,-216(fp)
   8ab54:	8007883a 	mov	r3,r16
   8ab58:	10c5883a 	add	r2,r2,r3
   8ab5c:	e0bfca15 	stw	r2,-216(fp)
   8ab60:	8c400204 	addi	r17,r17,8
   8ab64:	e0bfc917 	ldw	r2,-220(fp)
   8ab68:	10800044 	addi	r2,r2,1
   8ab6c:	e0bfc915 	stw	r2,-220(fp)
   8ab70:	e0bfc917 	ldw	r2,-220(fp)
   8ab74:	10800210 	cmplti	r2,r2,8
   8ab78:	10001d1e 	bne	r2,zero,8abf0 <___vfprintf_internal_r+0x1d88>
   8ab7c:	e0bfc804 	addi	r2,fp,-224
   8ab80:	100d883a 	mov	r6,r2
   8ab84:	e17fe717 	ldw	r5,-100(fp)
   8ab88:	e13fe617 	ldw	r4,-104(fp)
   8ab8c:	0098c180 	call	98c18 <__sprint_r>
   8ab90:	1000c71e 	bne	r2,zero,8aeb0 <___vfprintf_internal_r+0x2048>
   8ab94:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   8ab98:	00001506 	br	8abf0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
   8ab9c:	8c800015 	stw	r18,0(r17)
   8aba0:	00800044 	movi	r2,1
   8aba4:	88800115 	stw	r2,4(r17)
   8aba8:	e0bfca17 	ldw	r2,-216(fp)
   8abac:	10800044 	addi	r2,r2,1
   8abb0:	e0bfca15 	stw	r2,-216(fp)
   8abb4:	8c400204 	addi	r17,r17,8
   8abb8:	e0bfc917 	ldw	r2,-220(fp)
   8abbc:	10800044 	addi	r2,r2,1
   8abc0:	e0bfc915 	stw	r2,-220(fp)
   8abc4:	e0bfc917 	ldw	r2,-220(fp)
   8abc8:	10800210 	cmplti	r2,r2,8
   8abcc:	1000091e 	bne	r2,zero,8abf4 <___vfprintf_internal_r+0x1d8c>
   8abd0:	e0bfc804 	addi	r2,fp,-224
   8abd4:	100d883a 	mov	r6,r2
   8abd8:	e17fe717 	ldw	r5,-100(fp)
   8abdc:	e13fe617 	ldw	r4,-104(fp)
   8abe0:	0098c180 	call	98c18 <__sprint_r>
   8abe4:	1000b41e 	bne	r2,zero,8aeb8 <___vfprintf_internal_r+0x2050>
   8abe8:	e47fcb04 	addi	r17,fp,-212
   8abec:	00000106 	br	8abf4 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   8abf0:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
   8abf4:	e0bfc504 	addi	r2,fp,-236
   8abf8:	88800015 	stw	r2,0(r17)
   8abfc:	e0bfaf17 	ldw	r2,-324(fp)
   8ac00:	88800115 	stw	r2,4(r17)
   8ac04:	e0ffca17 	ldw	r3,-216(fp)
   8ac08:	e0bfaf17 	ldw	r2,-324(fp)
   8ac0c:	1885883a 	add	r2,r3,r2
   8ac10:	e0bfca15 	stw	r2,-216(fp)
   8ac14:	8c400204 	addi	r17,r17,8
   8ac18:	e0bfc917 	ldw	r2,-220(fp)
   8ac1c:	10800044 	addi	r2,r2,1
   8ac20:	e0bfc915 	stw	r2,-220(fp)
   8ac24:	e0bfc917 	ldw	r2,-220(fp)
   8ac28:	10800210 	cmplti	r2,r2,8
   8ac2c:	1000071e 	bne	r2,zero,8ac4c <___vfprintf_internal_r+0x1de4>
   8ac30:	e0bfc804 	addi	r2,fp,-224
   8ac34:	100d883a 	mov	r6,r2
   8ac38:	e17fe717 	ldw	r5,-100(fp)
   8ac3c:	e13fe617 	ldw	r4,-104(fp)
   8ac40:	0098c180 	call	98c18 <__sprint_r>
   8ac44:	10009e1e 	bne	r2,zero,8aec0 <___vfprintf_internal_r+0x2058>
   8ac48:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   8ac4c:	9880010c 	andi	r2,r19,4
   8ac50:	10003526 	beq	r2,zero,8ad28 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
   8ac54:	e0ffad17 	ldw	r3,-332(fp)
   8ac58:	e0bfb517 	ldw	r2,-300(fp)
   8ac5c:	18a1c83a 	sub	r16,r3,r2
   8ac60:	0400310e 	bge	zero,r16,8ad28 <___vfprintf_internal_r+0x1ec0>
   8ac64:	00001706 	br	8acc4 <___vfprintf_internal_r+0x1e5c>
   8ac68:	008002b4 	movhi	r2,10
   8ac6c:	1083b984 	addi	r2,r2,3814
   8ac70:	88800015 	stw	r2,0(r17)
   8ac74:	00800404 	movi	r2,16
   8ac78:	88800115 	stw	r2,4(r17)
   8ac7c:	e0bfca17 	ldw	r2,-216(fp)
   8ac80:	10800404 	addi	r2,r2,16
   8ac84:	e0bfca15 	stw	r2,-216(fp)
   8ac88:	8c400204 	addi	r17,r17,8
   8ac8c:	e0bfc917 	ldw	r2,-220(fp)
   8ac90:	10800044 	addi	r2,r2,1
   8ac94:	e0bfc915 	stw	r2,-220(fp)
   8ac98:	e0bfc917 	ldw	r2,-220(fp)
   8ac9c:	10800210 	cmplti	r2,r2,8
   8aca0:	1000071e 	bne	r2,zero,8acc0 <___vfprintf_internal_r+0x1e58>
   8aca4:	e0bfc804 	addi	r2,fp,-224
   8aca8:	100d883a 	mov	r6,r2
   8acac:	e17fe717 	ldw	r5,-100(fp)
   8acb0:	e13fe617 	ldw	r4,-104(fp)
   8acb4:	0098c180 	call	98c18 <__sprint_r>
   8acb8:	1000831e 	bne	r2,zero,8aec8 <___vfprintf_internal_r+0x2060>
   8acbc:	e47fcb04 	addi	r17,fp,-212
   8acc0:	843ffc04 	addi	r16,r16,-16
   8acc4:	80800448 	cmpgei	r2,r16,17
   8acc8:	103fe71e 	bne	r2,zero,8ac68 <__alt_data_end+0xfffd8c68>
   8accc:	008002b4 	movhi	r2,10
   8acd0:	1083b984 	addi	r2,r2,3814
   8acd4:	88800015 	stw	r2,0(r17)
   8acd8:	8005883a 	mov	r2,r16
   8acdc:	88800115 	stw	r2,4(r17)
   8ace0:	e0bfca17 	ldw	r2,-216(fp)
   8ace4:	8007883a 	mov	r3,r16
   8ace8:	10c5883a 	add	r2,r2,r3
   8acec:	e0bfca15 	stw	r2,-216(fp)
   8acf0:	8c400204 	addi	r17,r17,8
   8acf4:	e0bfc917 	ldw	r2,-220(fp)
   8acf8:	10800044 	addi	r2,r2,1
   8acfc:	e0bfc915 	stw	r2,-220(fp)
   8ad00:	e0bfc917 	ldw	r2,-220(fp)
   8ad04:	10800210 	cmplti	r2,r2,8
   8ad08:	1000071e 	bne	r2,zero,8ad28 <___vfprintf_internal_r+0x1ec0>
   8ad0c:	e0bfc804 	addi	r2,fp,-224
   8ad10:	100d883a 	mov	r6,r2
   8ad14:	e17fe717 	ldw	r5,-100(fp)
   8ad18:	e13fe617 	ldw	r4,-104(fp)
   8ad1c:	0098c180 	call	98c18 <__sprint_r>
   8ad20:	10006b1e 	bne	r2,zero,8aed0 <___vfprintf_internal_r+0x2068>
   8ad24:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   8ad28:	e0ffad17 	ldw	r3,-332(fp)
   8ad2c:	e0bfb517 	ldw	r2,-300(fp)
   8ad30:	10c0010e 	bge	r2,r3,8ad38 <___vfprintf_internal_r+0x1ed0>
   8ad34:	1805883a 	mov	r2,r3
   8ad38:	e0ffac17 	ldw	r3,-336(fp)
   8ad3c:	1885883a 	add	r2,r3,r2
   8ad40:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
   8ad44:	e0bfca17 	ldw	r2,-216(fp)
   8ad48:	10000626 	beq	r2,zero,8ad64 <___vfprintf_internal_r+0x1efc>
   8ad4c:	e0bfc804 	addi	r2,fp,-224
   8ad50:	100d883a 	mov	r6,r2
   8ad54:	e17fe717 	ldw	r5,-100(fp)
   8ad58:	e13fe617 	ldw	r4,-104(fp)
   8ad5c:	0098c180 	call	98c18 <__sprint_r>
   8ad60:	10005d1e 	bne	r2,zero,8aed8 <___vfprintf_internal_r+0x2070>
   8ad64:	e03fc915 	stw	zero,-220(fp)
   8ad68:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
   8ad6c:	e0bfb817 	ldw	r2,-288(fp)
   8ad70:	10389a26 	beq	r2,zero,88fdc <__alt_data_end+0xfffd6fdc>
			_free_r (data, malloc_buf);
   8ad74:	e17fb817 	ldw	r5,-288(fp)
   8ad78:	e13fe617 	ldw	r4,-104(fp)
   8ad7c:	0085c480 	call	85c48 <_free_r>
			malloc_buf = NULL;
   8ad80:	e03fb815 	stw	zero,-288(fp)
		}
	}
   8ad84:	00389506 	br	88fdc <__alt_data_end+0xfffd6fdc>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   8ad88:	0001883a 	nop
   8ad8c:	00000106 	br	8ad94 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   8ad90:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   8ad94:	e0bfca17 	ldw	r2,-216(fp)
   8ad98:	10000626 	beq	r2,zero,8adb4 <___vfprintf_internal_r+0x1f4c>
   8ad9c:	e0bfc804 	addi	r2,fp,-224
   8ada0:	100d883a 	mov	r6,r2
   8ada4:	e17fe717 	ldw	r5,-100(fp)
   8ada8:	e13fe617 	ldw	r4,-104(fp)
   8adac:	0098c180 	call	98c18 <__sprint_r>
   8adb0:	10004b1e 	bne	r2,zero,8aee0 <___vfprintf_internal_r+0x2078>
   8adb4:	e03fc915 	stw	zero,-220(fp)
   8adb8:	e47fcb04 	addi	r17,fp,-212
   8adbc:	00004906 	br	8aee4 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   8adc0:	0001883a 	nop
   8adc4:	00004706 	br	8aee4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   8adc8:	0001883a 	nop
   8adcc:	00004506 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8add0:	0001883a 	nop
   8add4:	00004306 	br	8aee4 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   8add8:	0001883a 	nop
   8addc:	00004106 	br	8aee4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   8ade0:	0001883a 	nop
   8ade4:	00003f06 	br	8aee4 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   8ade8:	0001883a 	nop
   8adec:	00003d06 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8adf0:	0001883a 	nop
   8adf4:	00003b06 	br	8aee4 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   8adf8:	0001883a 	nop
   8adfc:	00003906 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae00:	0001883a 	nop
   8ae04:	00003706 	br	8aee4 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
   8ae08:	0001883a 	nop
   8ae0c:	00003506 	br	8aee4 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   8ae10:	0001883a 	nop
   8ae14:	00003306 	br	8aee4 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   8ae18:	0001883a 	nop
   8ae1c:	00003106 	br	8aee4 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
   8ae20:	0001883a 	nop
   8ae24:	00002f06 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae28:	0001883a 	nop
   8ae2c:	00002d06 	br	8aee4 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
   8ae30:	0001883a 	nop
   8ae34:	00002b06 	br	8aee4 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   8ae38:	0001883a 	nop
   8ae3c:	00002906 	br	8aee4 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
   8ae40:	0001883a 	nop
   8ae44:	00002706 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae48:	0001883a 	nop
   8ae4c:	00002506 	br	8aee4 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
   8ae50:	0001883a 	nop
   8ae54:	00002306 	br	8aee4 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
   8ae58:	0001883a 	nop
   8ae5c:	00002106 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae60:	0001883a 	nop
   8ae64:	00001f06 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae68:	0001883a 	nop
   8ae6c:	00001d06 	br	8aee4 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
   8ae70:	0001883a 	nop
   8ae74:	00001b06 	br	8aee4 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
   8ae78:	0001883a 	nop
   8ae7c:	00001906 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae80:	0001883a 	nop
   8ae84:	00001706 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8ae88:	0001883a 	nop
   8ae8c:	00001506 	br	8aee4 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
   8ae90:	0001883a 	nop
   8ae94:	00001306 	br	8aee4 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
   8ae98:	0001883a 	nop
   8ae9c:	00001106 	br	8aee4 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
   8aea0:	0001883a 	nop
   8aea4:	00000f06 	br	8aee4 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   8aea8:	0001883a 	nop
   8aeac:	00000d06 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8aeb0:	0001883a 	nop
   8aeb4:	00000b06 	br	8aee4 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
   8aeb8:	0001883a 	nop
   8aebc:	00000906 	br	8aee4 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
   8aec0:	0001883a 	nop
   8aec4:	00000706 	br	8aee4 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   8aec8:	0001883a 	nop
   8aecc:	00000506 	br	8aee4 <___vfprintf_internal_r+0x207c>
   8aed0:	0001883a 	nop
   8aed4:	00000306 	br	8aee4 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   8aed8:	0001883a 	nop
   8aedc:	00000106 	br	8aee4 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   8aee0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   8aee4:	e0bfb817 	ldw	r2,-288(fp)
   8aee8:	10000326 	beq	r2,zero,8aef8 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
   8aeec:	e17fb817 	ldw	r5,-288(fp)
   8aef0:	e13fe617 	ldw	r4,-104(fp)
   8aef4:	0085c480 	call	85c48 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   8aef8:	e0bfe717 	ldw	r2,-100(fp)
   8aefc:	1080030b 	ldhu	r2,12(r2)
   8af00:	10bfffcc 	andi	r2,r2,65535
   8af04:	1080100c 	andi	r2,r2,64
   8af08:	1000021e 	bne	r2,zero,8af14 <___vfprintf_internal_r+0x20ac>
   8af0c:	e0bfac17 	ldw	r2,-336(fp)
   8af10:	00000206 	br	8af1c <___vfprintf_internal_r+0x20b4>
   8af14:	00bfffc4 	movi	r2,-1
   8af18:	0001883a 	nop
	/* NOTREACHED */
}
   8af1c:	e6fff804 	addi	sp,fp,-32
   8af20:	dfc00917 	ldw	ra,36(sp)
   8af24:	df000817 	ldw	fp,32(sp)
   8af28:	ddc00717 	ldw	r23,28(sp)
   8af2c:	dd800617 	ldw	r22,24(sp)
   8af30:	dd400517 	ldw	r21,20(sp)
   8af34:	dd000417 	ldw	r20,16(sp)
   8af38:	dcc00317 	ldw	r19,12(sp)
   8af3c:	dc800217 	ldw	r18,8(sp)
   8af40:	dc400117 	ldw	r17,4(sp)
   8af44:	dc000017 	ldw	r16,0(sp)
   8af48:	dec00a04 	addi	sp,sp,40
   8af4c:	f800283a 	ret

0008af50 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
   8af50:	deffef04 	addi	sp,sp,-68
   8af54:	dfc01015 	stw	ra,64(sp)
   8af58:	df000f15 	stw	fp,60(sp)
   8af5c:	df000f04 	addi	fp,sp,60
   8af60:	e13ffc15 	stw	r4,-16(fp)
   8af64:	e17ffd15 	stw	r5,-12(fp)
   8af68:	e1bffe15 	stw	r6,-8(fp)
   8af6c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
   8af70:	e0bffd17 	ldw	r2,-12(fp)
   8af74:	e0bffa15 	stw	r2,-24(fp)
   8af78:	e0bffe17 	ldw	r2,-8(fp)
   8af7c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
   8af80:	e0bffb17 	ldw	r2,-20(fp)
   8af84:	1000090e 	bge	r2,zero,8afac <cvt+0x5c>
		value = -value;
   8af88:	e0bffd17 	ldw	r2,-12(fp)
   8af8c:	e0bffd15 	stw	r2,-12(fp)
   8af90:	e0bffe17 	ldw	r2,-8(fp)
   8af94:	10a0003c 	xorhi	r2,r2,32768
   8af98:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
   8af9c:	e0800317 	ldw	r2,12(fp)
   8afa0:	00c00b44 	movi	r3,45
   8afa4:	10c00005 	stb	r3,0(r2)
   8afa8:	00000206 	br	8afb4 <cvt+0x64>
	} else
		*sign = '\000';
   8afac:	e0800317 	ldw	r2,12(fp)
   8afb0:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
   8afb4:	e0800517 	ldw	r2,20(fp)
   8afb8:	108019a0 	cmpeqi	r2,r2,102
   8afbc:	1000031e 	bne	r2,zero,8afcc <cvt+0x7c>
   8afc0:	e0800517 	ldw	r2,20(fp)
   8afc4:	10801198 	cmpnei	r2,r2,70
   8afc8:	1000031e 	bne	r2,zero,8afd8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
   8afcc:	008000c4 	movi	r2,3
   8afd0:	e0bff515 	stw	r2,-44(fp)
   8afd4:	00000b06 	br	8b004 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
   8afd8:	e0800517 	ldw	r2,20(fp)
   8afdc:	10801960 	cmpeqi	r2,r2,101
   8afe0:	1000031e 	bne	r2,zero,8aff0 <cvt+0xa0>
   8afe4:	e0800517 	ldw	r2,20(fp)
   8afe8:	10801158 	cmpnei	r2,r2,69
   8afec:	1000031e 	bne	r2,zero,8affc <cvt+0xac>
			ndigits++;
   8aff0:	e0bfff17 	ldw	r2,-4(fp)
   8aff4:	10800044 	addi	r2,r2,1
   8aff8:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
   8affc:	00800084 	movi	r2,2
   8b000:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
   8b004:	e0bff904 	addi	r2,fp,-28
   8b008:	d8800315 	stw	r2,12(sp)
   8b00c:	e0bff804 	addi	r2,fp,-32
   8b010:	d8800215 	stw	r2,8(sp)
   8b014:	e0800417 	ldw	r2,16(fp)
   8b018:	d8800115 	stw	r2,4(sp)
   8b01c:	e0bfff17 	ldw	r2,-4(fp)
   8b020:	d8800015 	stw	r2,0(sp)
   8b024:	e1fff517 	ldw	r7,-44(fp)
   8b028:	e17ffd17 	ldw	r5,-12(fp)
   8b02c:	e1bffe17 	ldw	r6,-8(fp)
   8b030:	e13ffc17 	ldw	r4,-16(fp)
   8b034:	008d9480 	call	8d948 <_dtoa_r>
   8b038:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
   8b03c:	e0800517 	ldw	r2,20(fp)
   8b040:	108019e0 	cmpeqi	r2,r2,103
   8b044:	1000031e 	bne	r2,zero,8b054 <cvt+0x104>
   8b048:	e0800517 	ldw	r2,20(fp)
   8b04c:	108011d8 	cmpnei	r2,r2,71
   8b050:	1000031e 	bne	r2,zero,8b060 <cvt+0x110>
   8b054:	e0800217 	ldw	r2,8(fp)
   8b058:	1080004c 	andi	r2,r2,1
   8b05c:	10003326 	beq	r2,zero,8b12c <cvt+0x1dc>
		bp = digits + ndigits;
   8b060:	e0bfff17 	ldw	r2,-4(fp)
   8b064:	e0fff717 	ldw	r3,-36(fp)
   8b068:	1885883a 	add	r2,r3,r2
   8b06c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
   8b070:	e0800517 	ldw	r2,20(fp)
   8b074:	108019a0 	cmpeqi	r2,r2,102
   8b078:	1000031e 	bne	r2,zero,8b088 <cvt+0x138>
   8b07c:	e0800517 	ldw	r2,20(fp)
   8b080:	10801198 	cmpnei	r2,r2,70
   8b084:	1000181e 	bne	r2,zero,8b0e8 <cvt+0x198>
			if (*digits == '0' && value)
   8b088:	e0bff717 	ldw	r2,-36(fp)
   8b08c:	10800003 	ldbu	r2,0(r2)
   8b090:	10803fcc 	andi	r2,r2,255
   8b094:	1080201c 	xori	r2,r2,128
   8b098:	10bfe004 	addi	r2,r2,-128
   8b09c:	10800c18 	cmpnei	r2,r2,48
   8b0a0:	10000b1e 	bne	r2,zero,8b0d0 <cvt+0x180>
   8b0a4:	000d883a 	mov	r6,zero
   8b0a8:	000f883a 	mov	r7,zero
   8b0ac:	e13ffd17 	ldw	r4,-12(fp)
   8b0b0:	e17ffe17 	ldw	r5,-8(fp)
   8b0b4:	009dde80 	call	9dde8 <__eqdf2>
   8b0b8:	10000526 	beq	r2,zero,8b0d0 <cvt+0x180>
				*decpt = -ndigits + 1;
   8b0bc:	00c00044 	movi	r3,1
   8b0c0:	e0bfff17 	ldw	r2,-4(fp)
   8b0c4:	1887c83a 	sub	r3,r3,r2
   8b0c8:	e0800417 	ldw	r2,16(fp)
   8b0cc:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
   8b0d0:	e0800417 	ldw	r2,16(fp)
   8b0d4:	10800017 	ldw	r2,0(r2)
   8b0d8:	1007883a 	mov	r3,r2
   8b0dc:	e0bff617 	ldw	r2,-40(fp)
   8b0e0:	10c5883a 	add	r2,r2,r3
   8b0e4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
   8b0e8:	000d883a 	mov	r6,zero
   8b0ec:	000f883a 	mov	r7,zero
   8b0f0:	e13ffd17 	ldw	r4,-12(fp)
   8b0f4:	e17ffe17 	ldw	r5,-8(fp)
   8b0f8:	009dde80 	call	9dde8 <__eqdf2>
   8b0fc:	1000081e 	bne	r2,zero,8b120 <cvt+0x1d0>
			rve = bp;
   8b100:	e0bff617 	ldw	r2,-40(fp)
   8b104:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
   8b108:	00000506 	br	8b120 <cvt+0x1d0>
			*rve++ = '0';
   8b10c:	e0bff917 	ldw	r2,-28(fp)
   8b110:	10c00044 	addi	r3,r2,1
   8b114:	e0fff915 	stw	r3,-28(fp)
   8b118:	00c00c04 	movi	r3,48
   8b11c:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
   8b120:	e0fff917 	ldw	r3,-28(fp)
   8b124:	e0bff617 	ldw	r2,-40(fp)
   8b128:	18bff836 	bltu	r3,r2,8b10c <__alt_data_end+0xfffd910c>
			*rve++ = '0';
	}
	*length = rve - digits;
   8b12c:	e0bff917 	ldw	r2,-28(fp)
   8b130:	1007883a 	mov	r3,r2
   8b134:	e0bff717 	ldw	r2,-36(fp)
   8b138:	1887c83a 	sub	r3,r3,r2
   8b13c:	e0800617 	ldw	r2,24(fp)
   8b140:	10c00015 	stw	r3,0(r2)
	return (digits);
   8b144:	e0bff717 	ldw	r2,-36(fp)
}
   8b148:	e037883a 	mov	sp,fp
   8b14c:	dfc00117 	ldw	ra,4(sp)
   8b150:	df000017 	ldw	fp,0(sp)
   8b154:	dec00204 	addi	sp,sp,8
   8b158:	f800283a 	ret

0008b15c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
   8b15c:	defff704 	addi	sp,sp,-36
   8b160:	dfc00815 	stw	ra,32(sp)
   8b164:	df000715 	stw	fp,28(sp)
   8b168:	dc400615 	stw	r17,24(sp)
   8b16c:	dc000515 	stw	r16,20(sp)
   8b170:	df000704 	addi	fp,sp,28
   8b174:	e13ffb15 	stw	r4,-20(fp)
   8b178:	e17ffc15 	stw	r5,-16(fp)
   8b17c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
   8b180:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
   8b184:	8805883a 	mov	r2,r17
   8b188:	14400044 	addi	r17,r2,1
   8b18c:	e0fffd17 	ldw	r3,-12(fp)
   8b190:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
   8b194:	e0bffc17 	ldw	r2,-16(fp)
   8b198:	1000080e 	bge	r2,zero,8b1bc <exponent+0x60>
		exp = -exp;
   8b19c:	e0bffc17 	ldw	r2,-16(fp)
   8b1a0:	0085c83a 	sub	r2,zero,r2
   8b1a4:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
   8b1a8:	8805883a 	mov	r2,r17
   8b1ac:	14400044 	addi	r17,r2,1
   8b1b0:	00c00b44 	movi	r3,45
   8b1b4:	10c00005 	stb	r3,0(r2)
   8b1b8:	00000406 	br	8b1cc <exponent+0x70>
	}
	else
		*p++ = '+';
   8b1bc:	8805883a 	mov	r2,r17
   8b1c0:	14400044 	addi	r17,r2,1
   8b1c4:	00c00ac4 	movi	r3,43
   8b1c8:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
   8b1cc:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
   8b1d0:	e0bffc17 	ldw	r2,-16(fp)
   8b1d4:	10800290 	cmplti	r2,r2,10
   8b1d8:	10001d1e 	bne	r2,zero,8b250 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
   8b1dc:	843fffc4 	addi	r16,r16,-1
   8b1e0:	e0bffc17 	ldw	r2,-16(fp)
   8b1e4:	01400284 	movi	r5,10
   8b1e8:	1009883a 	mov	r4,r2
   8b1ec:	00822700 	call	82270 <__modsi3>
   8b1f0:	10800c04 	addi	r2,r2,48
   8b1f4:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
   8b1f8:	e0bffc17 	ldw	r2,-16(fp)
   8b1fc:	01400284 	movi	r5,10
   8b200:	1009883a 	mov	r4,r2
   8b204:	00821ec0 	call	821ec <__divsi3>
   8b208:	e0bffc15 	stw	r2,-16(fp)
   8b20c:	e0bffc17 	ldw	r2,-16(fp)
   8b210:	10800288 	cmpgei	r2,r2,10
   8b214:	103ff11e 	bne	r2,zero,8b1dc <__alt_data_end+0xfffd91dc>
		*--t = to_char (exp);
   8b218:	843fffc4 	addi	r16,r16,-1
   8b21c:	e0bffc17 	ldw	r2,-16(fp)
   8b220:	10800c04 	addi	r2,r2,48
   8b224:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
   8b228:	00000606 	br	8b244 <exponent+0xe8>
   8b22c:	8805883a 	mov	r2,r17
   8b230:	14400044 	addi	r17,r2,1
   8b234:	8007883a 	mov	r3,r16
   8b238:	1c000044 	addi	r16,r3,1
   8b23c:	18c00003 	ldbu	r3,0(r3)
   8b240:	10c00005 	stb	r3,0(r2)
   8b244:	e0bffac4 	addi	r2,fp,-21
   8b248:	80bff836 	bltu	r16,r2,8b22c <__alt_data_end+0xfffd922c>
   8b24c:	00000906 	br	8b274 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
   8b250:	8805883a 	mov	r2,r17
   8b254:	14400044 	addi	r17,r2,1
   8b258:	00c00c04 	movi	r3,48
   8b25c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
   8b260:	8805883a 	mov	r2,r17
   8b264:	14400044 	addi	r17,r2,1
   8b268:	e0fffc17 	ldw	r3,-16(fp)
   8b26c:	18c00c04 	addi	r3,r3,48
   8b270:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
   8b274:	8807883a 	mov	r3,r17
   8b278:	e0bffb17 	ldw	r2,-20(fp)
   8b27c:	1885c83a 	sub	r2,r3,r2
}
   8b280:	e6fffe04 	addi	sp,fp,-8
   8b284:	dfc00317 	ldw	ra,12(sp)
   8b288:	df000217 	ldw	fp,8(sp)
   8b28c:	dc400117 	ldw	r17,4(sp)
   8b290:	dc000017 	ldw	r16,0(sp)
   8b294:	dec00404 	addi	sp,sp,16
   8b298:	f800283a 	ret

0008b29c <vfscanf>:
int
_DEFUN(VFSCANF, (fp, fmt, ap),
       register FILE *fp _AND
       _CONST char *fmt _AND
       va_list ap)
{
   8b29c:	defff904 	addi	sp,sp,-28
   8b2a0:	dfc00615 	stw	ra,24(sp)
   8b2a4:	df000515 	stw	fp,20(sp)
   8b2a8:	dc000415 	stw	r16,16(sp)
   8b2ac:	df000504 	addi	fp,sp,20
   8b2b0:	2021883a 	mov	r16,r4
   8b2b4:	e17ffd15 	stw	r5,-12(fp)
   8b2b8:	e1bffe15 	stw	r6,-8(fp)
  struct _reent *reent = _REENT;
   8b2bc:	d0a00417 	ldw	r2,-32752(gp)
   8b2c0:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT(reent, fp);
   8b2c4:	e0bffb17 	ldw	r2,-20(fp)
   8b2c8:	e0bffc15 	stw	r2,-16(fp)
   8b2cc:	e0bffc17 	ldw	r2,-16(fp)
   8b2d0:	10000526 	beq	r2,zero,8b2e8 <vfscanf+0x4c>
   8b2d4:	e0bffc17 	ldw	r2,-16(fp)
   8b2d8:	10800e17 	ldw	r2,56(r2)
   8b2dc:	1000021e 	bne	r2,zero,8b2e8 <vfscanf+0x4c>
   8b2e0:	e13ffc17 	ldw	r4,-16(fp)
   8b2e4:	008573c0 	call	8573c <__sinit>
  return __SVFSCANF_R (reent, fp, fmt, ap);
   8b2e8:	e1fffe17 	ldw	r7,-8(fp)
   8b2ec:	e1bffd17 	ldw	r6,-12(fp)
   8b2f0:	800b883a 	mov	r5,r16
   8b2f4:	e13ffb17 	ldw	r4,-20(fp)
   8b2f8:	008b3d00 	call	8b3d0 <__svfscanf_r>
}
   8b2fc:	e6ffff04 	addi	sp,fp,-4
   8b300:	dfc00217 	ldw	ra,8(sp)
   8b304:	df000117 	ldw	fp,4(sp)
   8b308:	dc000017 	ldw	r16,0(sp)
   8b30c:	dec00304 	addi	sp,sp,12
   8b310:	f800283a 	ret

0008b314 <__svfscanf>:
int
_DEFUN(__SVFSCANF, (fp, fmt0, ap),
       register FILE *fp _AND
       char _CONST *fmt0 _AND
       va_list ap)
{
   8b314:	defffc04 	addi	sp,sp,-16
   8b318:	dfc00315 	stw	ra,12(sp)
   8b31c:	df000215 	stw	fp,8(sp)
   8b320:	df000204 	addi	fp,sp,8
   8b324:	2007883a 	mov	r3,r4
   8b328:	e17ffe15 	stw	r5,-8(fp)
   8b32c:	e1bfff15 	stw	r6,-4(fp)
  return __SVFSCANF_R (_REENT, fp, fmt0, ap);
   8b330:	d0a00417 	ldw	r2,-32752(gp)
   8b334:	e1ffff17 	ldw	r7,-4(fp)
   8b338:	e1bffe17 	ldw	r6,-8(fp)
   8b33c:	180b883a 	mov	r5,r3
   8b340:	1009883a 	mov	r4,r2
   8b344:	008b3d00 	call	8b3d0 <__svfscanf_r>
}
   8b348:	e037883a 	mov	sp,fp
   8b34c:	dfc00117 	ldw	ra,4(sp)
   8b350:	df000017 	ldw	fp,0(sp)
   8b354:	dec00204 	addi	sp,sp,8
   8b358:	f800283a 	ret

0008b35c <_vfscanf_r>:
_DEFUN(_VFSCANF_R, (data, fp, fmt, ap),
       struct _reent *data _AND
       register FILE *fp   _AND
       _CONST char *fmt    _AND
       va_list ap)
{
   8b35c:	defff904 	addi	sp,sp,-28
   8b360:	dfc00615 	stw	ra,24(sp)
   8b364:	df000515 	stw	fp,20(sp)
   8b368:	dc000415 	stw	r16,16(sp)
   8b36c:	df000504 	addi	fp,sp,20
   8b370:	e13ffc15 	stw	r4,-16(fp)
   8b374:	2821883a 	mov	r16,r5
   8b378:	e1bffd15 	stw	r6,-12(fp)
   8b37c:	e1fffe15 	stw	r7,-8(fp)
  CHECK_INIT(data, fp);
   8b380:	e0bffc17 	ldw	r2,-16(fp)
   8b384:	e0bffb15 	stw	r2,-20(fp)
   8b388:	e0bffb17 	ldw	r2,-20(fp)
   8b38c:	10000526 	beq	r2,zero,8b3a4 <_vfscanf_r+0x48>
   8b390:	e0bffb17 	ldw	r2,-20(fp)
   8b394:	10800e17 	ldw	r2,56(r2)
   8b398:	1000021e 	bne	r2,zero,8b3a4 <_vfscanf_r+0x48>
   8b39c:	e13ffb17 	ldw	r4,-20(fp)
   8b3a0:	008573c0 	call	8573c <__sinit>
  return __SVFSCANF_R (data, fp, fmt, ap);
   8b3a4:	e1fffe17 	ldw	r7,-8(fp)
   8b3a8:	e1bffd17 	ldw	r6,-12(fp)
   8b3ac:	800b883a 	mov	r5,r16
   8b3b0:	e13ffc17 	ldw	r4,-16(fp)
   8b3b4:	008b3d00 	call	8b3d0 <__svfscanf_r>
}
   8b3b8:	e6ffff04 	addi	sp,fp,-4
   8b3bc:	dfc00217 	ldw	ra,8(sp)
   8b3c0:	df000117 	ldw	fp,4(sp)
   8b3c4:	dc000017 	ldw	r16,0(sp)
   8b3c8:	dec00304 	addi	sp,sp,12
   8b3cc:	f800283a 	ret

0008b3d0 <__svfscanf_r>:
_DEFUN(__SVFSCANF_R, (rptr, fp, fmt0, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       char _CONST *fmt0   _AND
       va_list ap)
{
   8b3d0:	deff3404 	addi	sp,sp,-816
   8b3d4:	dfc0cb15 	stw	ra,812(sp)
   8b3d8:	df00ca15 	stw	fp,808(sp)
   8b3dc:	ddc0c915 	stw	r23,804(sp)
   8b3e0:	dd80c815 	stw	r22,800(sp)
   8b3e4:	dd40c715 	stw	r21,796(sp)
   8b3e8:	dd00c615 	stw	r20,792(sp)
   8b3ec:	dcc0c515 	stw	r19,788(sp)
   8b3f0:	dc80c415 	stw	r18,784(sp)
   8b3f4:	dc40c315 	stw	r17,780(sp)
   8b3f8:	dc00c215 	stw	r16,776(sp)
   8b3fc:	df00ca04 	addi	fp,sp,808
   8b400:	e13ff515 	stw	r4,-44(fp)
   8b404:	2823883a 	mov	r17,r5
   8b408:	e1bff615 	stw	r6,-40(fp)
   8b40c:	e1fff715 	stw	r7,-36(fp)
  register u_char *fmt = (u_char *) fmt0;
   8b410:	e57ff617 	ldw	r21,-40(fp)
  int arg_index = 0;		/* index into args processed directly */
  int numargs = 0;		/* number of varargs read */
  void *args[MAX_POS_ARGS];	/* positional args read */
  int is_pos_arg;		/* is current format positional? */
#endif
  int base = 0;			/* base argument to strtol/strtoul */
   8b414:	e03f3915 	stw	zero,-796(fp)
  int nbytes = 1;               /* number of bytes read from fmt string */
   8b418:	00800044 	movi	r2,1
   8b41c:	e0bf4915 	stw	r2,-732(fp)
#ifdef _MB_CAPABLE
  mbstate_t state;              /* value to keep track of multibyte state */
#endif

  #define CCFN_PARAMS	_PARAMS((struct _reent *, const char *, char **, int))
  u_long (*ccfn)CCFN_PARAMS=0;	/* conversion function (strtol/strtoul) */
   8b420:	e03f3b15 	stw	zero,-788(fp)
# define GET_ARG(n, ap, type) (va_arg (ap, type))
#endif

  _newlib_flockfile_start (fp);

  ORIENT (fp, -1);
   8b424:	8880030b 	ldhu	r2,12(r17)
   8b428:	10bfffcc 	andi	r2,r2,65535
   8b42c:	1088000c 	andi	r2,r2,8192
   8b430:	1000071e 	bne	r2,zero,8b450 <__svfscanf_r+0x80>
   8b434:	8880030b 	ldhu	r2,12(r17)
   8b438:	10880014 	ori	r2,r2,8192
   8b43c:	8880030d 	sth	r2,12(r17)
   8b440:	88c01917 	ldw	r3,100(r17)
   8b444:	00b7ffc4 	movi	r2,-8193
   8b448:	1884703a 	and	r2,r3,r2
   8b44c:	88801915 	stw	r2,100(r17)

  nassigned = 0;
   8b450:	e03f3715 	stw	zero,-804(fp)
  nread = 0;
   8b454:	e03f3815 	stw	zero,-800(fp)
#endif

  for (;;)
    {
#ifndef _MB_CAPABLE
      wc = *fmt;
   8b458:	a8800003 	ldbu	r2,0(r21)
   8b45c:	10803fcc 	andi	r2,r2,255
   8b460:	e0bf5815 	stw	r2,-672(fp)
	wc = 0xFFFD; /* Unicode replacement character */
	nbytes = 1;
	memset (&state, 0, sizeof (state));
      }
#endif
      fmt += nbytes;
   8b464:	e0bf4917 	ldw	r2,-732(fp)
   8b468:	a8ab883a 	add	r21,r21,r2

      if (wc == 0)
   8b46c:	e0bf5817 	ldw	r2,-672(fp)
   8b470:	1006ae26 	beq	r2,zero,8cf2c <__svfscanf_r+0x1b5c>
	goto all_done;
      if (nbytes == 1 && isspace (wc))
   8b474:	e0bf4917 	ldw	r2,-732(fp)
   8b478:	10800058 	cmpnei	r2,r2,1
   8b47c:	1000221e 	bne	r2,zero,8b508 <__svfscanf_r+0x138>
   8b480:	d0e00817 	ldw	r3,-32736(gp)
   8b484:	e0bf5817 	ldw	r2,-672(fp)
   8b488:	10800044 	addi	r2,r2,1
   8b48c:	1885883a 	add	r2,r3,r2
   8b490:	10800003 	ldbu	r2,0(r2)
   8b494:	10803fcc 	andi	r2,r2,255
   8b498:	1080020c 	andi	r2,r2,8
   8b49c:	10001a26 	beq	r2,zero,8b508 <__svfscanf_r+0x138>
	{
	  for (;;)
	    {
	      if (BufferEmpty || !isspace (*fp->_p))
   8b4a0:	88800117 	ldw	r2,4(r17)
   8b4a4:	00800416 	blt	zero,r2,8b4b8 <__svfscanf_r+0xe8>
   8b4a8:	880b883a 	mov	r5,r17
   8b4ac:	e13ff517 	ldw	r4,-44(fp)
   8b4b0:	008870c0 	call	8870c <__srefill_r>
   8b4b4:	10067a1e 	bne	r2,zero,8cea0 <__svfscanf_r+0x1ad0>
   8b4b8:	d0e00817 	ldw	r3,-32736(gp)
   8b4bc:	88800017 	ldw	r2,0(r17)
   8b4c0:	10800003 	ldbu	r2,0(r2)
   8b4c4:	10803fcc 	andi	r2,r2,255
   8b4c8:	10800044 	addi	r2,r2,1
   8b4cc:	1885883a 	add	r2,r3,r2
   8b4d0:	10800003 	ldbu	r2,0(r2)
   8b4d4:	10803fcc 	andi	r2,r2,255
   8b4d8:	1080020c 	andi	r2,r2,8
   8b4dc:	10067026 	beq	r2,zero,8cea0 <__svfscanf_r+0x1ad0>
		break;
	      nread++, fp->_r--, fp->_p++;
   8b4e0:	e0bf3817 	ldw	r2,-800(fp)
   8b4e4:	10800044 	addi	r2,r2,1
   8b4e8:	e0bf3815 	stw	r2,-800(fp)
   8b4ec:	88800117 	ldw	r2,4(r17)
   8b4f0:	10bfffc4 	addi	r2,r2,-1
   8b4f4:	88800115 	stw	r2,4(r17)
   8b4f8:	88800017 	ldw	r2,0(r17)
   8b4fc:	10800044 	addi	r2,r2,1
   8b500:	88800015 	stw	r2,0(r17)
	    }
   8b504:	003fe606 	br	8b4a0 <__alt_data_end+0xfffd94a0>
	  continue;
	}
      if (wc != '%')
   8b508:	e0bf5817 	ldw	r2,-672(fp)
   8b50c:	10800960 	cmpeqi	r2,r2,37
   8b510:	10008726 	beq	r2,zero,8b730 <__svfscanf_r+0x360>
	goto literal;
      width = 0;
   8b514:	0025883a 	mov	r18,zero
      flags = 0;
   8b518:	0021883a 	mov	r16,zero
       * switch on the format.  continue if done; break once format
       * type is derived.
       */

    again:
      c = *fmt++;
   8b51c:	a805883a 	mov	r2,r21
   8b520:	15400044 	addi	r21,r2,1
   8b524:	10800003 	ldbu	r2,0(r2)
   8b528:	15003fcc 	andi	r20,r2,255

      switch (c)
   8b52c:	a0801e68 	cmpgeui	r2,r20,121
   8b530:	1001291e 	bne	r2,zero,8b9d8 <__svfscanf_r+0x608>
   8b534:	a00690ba 	slli	r3,r20,2
   8b538:	00800274 	movhi	r2,9
   8b53c:	10ad5304 	addi	r2,r2,-19124
   8b540:	1885883a 	add	r2,r3,r2
   8b544:	10800017 	ldw	r2,0(r2)
   8b548:	1000683a 	jmp	r2
   8b54c:	0008b9d0 	cmplti	zero,zero,8935
   8b550:	0008b9d8 	cmpnei	zero,zero,8935
   8b554:	0008b9d8 	cmpnei	zero,zero,8935
   8b558:	0008b9d8 	cmpnei	zero,zero,8935
   8b55c:	0008b9d8 	cmpnei	zero,zero,8935
   8b560:	0008b9d8 	cmpnei	zero,zero,8935
   8b564:	0008b9d8 	cmpnei	zero,zero,8935
   8b568:	0008b9d8 	cmpnei	zero,zero,8935
   8b56c:	0008b9d8 	cmpnei	zero,zero,8935
   8b570:	0008b9d8 	cmpnei	zero,zero,8935
   8b574:	0008b9d8 	cmpnei	zero,zero,8935
   8b578:	0008b9d8 	cmpnei	zero,zero,8935
   8b57c:	0008b9d8 	cmpnei	zero,zero,8935
   8b580:	0008b9d8 	cmpnei	zero,zero,8935
   8b584:	0008b9d8 	cmpnei	zero,zero,8935
   8b588:	0008b9d8 	cmpnei	zero,zero,8935
   8b58c:	0008b9d8 	cmpnei	zero,zero,8935
   8b590:	0008b9d8 	cmpnei	zero,zero,8935
   8b594:	0008b9d8 	cmpnei	zero,zero,8935
   8b598:	0008b9d8 	cmpnei	zero,zero,8935
   8b59c:	0008b9d8 	cmpnei	zero,zero,8935
   8b5a0:	0008b9d8 	cmpnei	zero,zero,8935
   8b5a4:	0008b9d8 	cmpnei	zero,zero,8935
   8b5a8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5ac:	0008b9d8 	cmpnei	zero,zero,8935
   8b5b0:	0008b9d8 	cmpnei	zero,zero,8935
   8b5b4:	0008b9d8 	cmpnei	zero,zero,8935
   8b5b8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5bc:	0008b9d8 	cmpnei	zero,zero,8935
   8b5c0:	0008b9d8 	cmpnei	zero,zero,8935
   8b5c4:	0008b9d8 	cmpnei	zero,zero,8935
   8b5c8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5cc:	0008b9d8 	cmpnei	zero,zero,8935
   8b5d0:	0008b9d8 	cmpnei	zero,zero,8935
   8b5d4:	0008b9d8 	cmpnei	zero,zero,8935
   8b5d8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5dc:	0008b9d8 	cmpnei	zero,zero,8935
   8b5e0:	0008b734 	movhi	zero,8924
   8b5e4:	0008b9d8 	cmpnei	zero,zero,8935
   8b5e8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5ec:	0008b9d8 	cmpnei	zero,zero,8935
   8b5f0:	0008b9d8 	cmpnei	zero,zero,8935
   8b5f4:	0008b7c0 	call	8b7c <__alt_mem_MemoriaDados+0x8b7c>
   8b5f8:	0008b9d8 	cmpnei	zero,zero,8935
   8b5fc:	0008b9d8 	cmpnei	zero,zero,8935
   8b600:	0008b9d8 	cmpnei	zero,zero,8935
   8b604:	0008b9d8 	cmpnei	zero,zero,8935
   8b608:	0008b9d8 	cmpnei	zero,zero,8935
   8b60c:	0008b7fc 	xorhi	zero,zero,8927
   8b610:	0008b7fc 	xorhi	zero,zero,8927
   8b614:	0008b7fc 	xorhi	zero,zero,8927
   8b618:	0008b7fc 	xorhi	zero,zero,8927
   8b61c:	0008b7fc 	xorhi	zero,zero,8927
   8b620:	0008b7fc 	xorhi	zero,zero,8927
   8b624:	0008b7fc 	xorhi	zero,zero,8927
   8b628:	0008b7fc 	xorhi	zero,zero,8927
   8b62c:	0008b7fc 	xorhi	zero,zero,8927
   8b630:	0008b7fc 	xorhi	zero,zero,8927
   8b634:	0008b9d8 	cmpnei	zero,zero,8935
   8b638:	0008b9d8 	cmpnei	zero,zero,8935
   8b63c:	0008b9d8 	cmpnei	zero,zero,8935
   8b640:	0008b9d8 	cmpnei	zero,zero,8935
   8b644:	0008b9d8 	cmpnei	zero,zero,8935
   8b648:	0008b9d8 	cmpnei	zero,zero,8935
   8b64c:	0008b9d8 	cmpnei	zero,zero,8935
   8b650:	0008b9d8 	cmpnei	zero,zero,8935
   8b654:	0008b9d8 	cmpnei	zero,zero,8935
   8b658:	0008b9d8 	cmpnei	zero,zero,8935
   8b65c:	0008b81c 	xori	zero,zero,8928
   8b660:	0008b8b0 	cmpltui	zero,zero,8930
   8b664:	0008b9d8 	cmpnei	zero,zero,8935
   8b668:	0008b8b0 	cmpltui	zero,zero,8930
   8b66c:	0008b9d8 	cmpnei	zero,zero,8935
   8b670:	0008b9d8 	cmpnei	zero,zero,8935
   8b674:	0008b9d8 	cmpnei	zero,zero,8935
   8b678:	0008b9d8 	cmpnei	zero,zero,8935
   8b67c:	0008b7ec 	andhi	zero,zero,8927
   8b680:	0008b9d8 	cmpnei	zero,zero,8935
   8b684:	0008b9d8 	cmpnei	zero,zero,8935
   8b688:	0008b854 	movui	zero,8929
   8b68c:	0008b9d8 	cmpnei	zero,zero,8935
   8b690:	0008b9d8 	cmpnei	zero,zero,8935
   8b694:	0008b9d8 	cmpnei	zero,zero,8935
   8b698:	0008b9d8 	cmpnei	zero,zero,8935
   8b69c:	0008b9d8 	cmpnei	zero,zero,8935
   8b6a0:	0008b9d8 	cmpnei	zero,zero,8935
   8b6a4:	0008b9d8 	cmpnei	zero,zero,8935
   8b6a8:	0008b9d8 	cmpnei	zero,zero,8935
   8b6ac:	0008b890 	cmplti	zero,zero,8930
   8b6b0:	0008b9d8 	cmpnei	zero,zero,8935
   8b6b4:	0008b9d8 	cmpnei	zero,zero,8935
   8b6b8:	0008b8c0 	call	8b8c <__alt_mem_MemoriaDados+0x8b8c>
   8b6bc:	0008b9d8 	cmpnei	zero,zero,8935
   8b6c0:	0008b9d8 	cmpnei	zero,zero,8935
   8b6c4:	0008b9d8 	cmpnei	zero,zero,8935
   8b6c8:	0008b9d8 	cmpnei	zero,zero,8935
   8b6cc:	0008b9d8 	cmpnei	zero,zero,8935
   8b6d0:	0008b9d8 	cmpnei	zero,zero,8935
   8b6d4:	0008b9d8 	cmpnei	zero,zero,8935
   8b6d8:	0008b8e0 	cmpeqi	zero,zero,8931
   8b6dc:	0008b820 	cmpeqi	zero,zero,8928
   8b6e0:	0008b8b0 	cmpltui	zero,zero,8930
   8b6e4:	0008b8b0 	cmpltui	zero,zero,8930
   8b6e8:	0008b8b0 	cmpltui	zero,zero,8930
   8b6ec:	0008b7f4 	movhi	zero,8927
   8b6f0:	0008b83c 	xorhi	zero,zero,8928
   8b6f4:	0008b9d8 	cmpnei	zero,zero,8935
   8b6f8:	0008b9d8 	cmpnei	zero,zero,8935
   8b6fc:	0008b7c8 	cmpgei	zero,zero,8927
   8b700:	0008b9d8 	cmpnei	zero,zero,8935
   8b704:	0008b90c 	andi	zero,zero,8932
   8b708:	0008b858 	cmpnei	zero,zero,8929
   8b70c:	0008b8ec 	andhi	zero,zero,8931
   8b710:	0008b9d8 	cmpnei	zero,zero,8935
   8b714:	0008b9d8 	cmpnei	zero,zero,8935
   8b718:	0008b8b8 	rdprs	zero,zero,8930
   8b71c:	0008b9d8 	cmpnei	zero,zero,8935
   8b720:	0008b874 	movhi	zero,8929
   8b724:	0008b9d8 	cmpnei	zero,zero,8935
   8b728:	0008b9d8 	cmpnei	zero,zero,8935
   8b72c:	0008b890 	cmplti	zero,zero,8930
	      nread++, fp->_r--, fp->_p++;
	    }
	  continue;
	}
      if (wc != '%')
	goto literal;
   8b730:	0001883a 	nop

      switch (c)
	{
	case '%':
	literal:
          lptr = fmt - nbytes;
   8b734:	e0bf4917 	ldw	r2,-732(fp)
   8b738:	0085c83a 	sub	r2,zero,r2
   8b73c:	a885883a 	add	r2,r21,r2
   8b740:	e0bf3c15 	stw	r2,-784(fp)
          for (n = 0; n < nbytes; ++n)
   8b744:	0029883a 	mov	r20,zero
   8b748:	00001a06 	br	8b7b4 <__svfscanf_r+0x3e4>
            {
	      if (BufferEmpty)
   8b74c:	88800117 	ldw	r2,4(r17)
   8b750:	00800416 	blt	zero,r2,8b764 <__svfscanf_r+0x394>
   8b754:	880b883a 	mov	r5,r17
   8b758:	e13ff517 	ldw	r4,-44(fp)
   8b75c:	008870c0 	call	8870c <__srefill_r>
   8b760:	1005d91e 	bne	r2,zero,8cec8 <__svfscanf_r+0x1af8>
	        goto input_failure;
	      if (*fp->_p != *lptr)
   8b764:	88800017 	ldw	r2,0(r17)
   8b768:	10c00003 	ldbu	r3,0(r2)
   8b76c:	e0bf3c17 	ldw	r2,-784(fp)
   8b770:	10800003 	ldbu	r2,0(r2)
   8b774:	18c03fcc 	andi	r3,r3,255
   8b778:	10803fcc 	andi	r2,r2,255
   8b77c:	1885ed1e 	bne	r3,r2,8cf34 <__svfscanf_r+0x1b64>
	        goto match_failure;
	      fp->_r--, fp->_p++;
   8b780:	88800117 	ldw	r2,4(r17)
   8b784:	10bfffc4 	addi	r2,r2,-1
   8b788:	88800115 	stw	r2,4(r17)
   8b78c:	88800017 	ldw	r2,0(r17)
   8b790:	10800044 	addi	r2,r2,1
   8b794:	88800015 	stw	r2,0(r17)
	      nread++;
   8b798:	e0bf3817 	ldw	r2,-800(fp)
   8b79c:	10800044 	addi	r2,r2,1
   8b7a0:	e0bf3815 	stw	r2,-800(fp)
              ++lptr;
   8b7a4:	e0bf3c17 	ldw	r2,-784(fp)
   8b7a8:	10800044 	addi	r2,r2,1
   8b7ac:	e0bf3c15 	stw	r2,-784(fp)
      switch (c)
	{
	case '%':
	literal:
          lptr = fmt - nbytes;
          for (n = 0; n < nbytes; ++n)
   8b7b0:	a5000044 	addi	r20,r20,1
   8b7b4:	e0bf4917 	ldw	r2,-732(fp)
   8b7b8:	a0bfe416 	blt	r20,r2,8b74c <__alt_data_end+0xfffd974c>
	        goto match_failure;
	      fp->_r--, fp->_p++;
	      nread++;
              ++lptr;
            }
	  continue;
   8b7bc:	0005c106 	br	8cec4 <__svfscanf_r+0x1af4>

	case '*':
	  flags |= SUPPRESS;
   8b7c0:	84000414 	ori	r16,r16,16
	  goto again;
   8b7c4:	003f5506 	br	8b51c <__alt_data_end+0xfffd951c>
	case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
	  if (*fmt == 'l')	/* Check for 'll' = long long (SUSv3) */
   8b7c8:	a8800003 	ldbu	r2,0(r21)
   8b7cc:	10803fcc 	andi	r2,r2,255
   8b7d0:	10801b18 	cmpnei	r2,r2,108
   8b7d4:	1000031e 	bne	r2,zero,8b7e4 <__svfscanf_r+0x414>
	    {
	      ++fmt;
   8b7d8:	ad400044 	addi	r21,r21,1
	      flags |= LONGDBL;
   8b7dc:	84000094 	ori	r16,r16,2
   8b7e0:	003f4e06 	br	8b51c <__alt_data_end+0xfffd951c>
	    }
	  else
#endif
	    flags |= LONG;
   8b7e4:	84000054 	ori	r16,r16,1
	  goto again;
   8b7e8:	003f4c06 	br	8b51c <__alt_data_end+0xfffd951c>
	case 'L':
	  flags |= LONGDBL;
   8b7ec:	84000094 	ori	r16,r16,2
	  goto again;
   8b7f0:	003f4a06 	br	8b51c <__alt_data_end+0xfffd951c>
	      ++fmt;
	      flags |= CHAR;
	    }
	  else
#endif
	    flags |= SHORT;
   8b7f4:	84000114 	ori	r16,r16,4
	  goto again;
   8b7f8:	003f4806 	br	8b51c <__alt_data_end+0xfffd951c>
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	  width = width * 10 + c - '0';
   8b7fc:	01400284 	movi	r5,10
   8b800:	9009883a 	mov	r4,r18
   8b804:	00823a00 	call	823a0 <__mulsi3>
   8b808:	1007883a 	mov	r3,r2
   8b80c:	a005883a 	mov	r2,r20
   8b810:	1885883a 	add	r2,r3,r2
   8b814:	14bff404 	addi	r18,r2,-48
	  goto again;
   8b818:	003f4006 	br	8b51c <__alt_data_end+0xfffd951c>
	   * (According to ANSI, E and X formats are supposed to
	   * the same as e and x.  Sorry about that.)
	   */

	case 'D':		/* compat */
	  flags |= LONG;
   8b81c:	84000054 	ori	r16,r16,1
	  /* FALLTHROUGH */
	case 'd':
	  c = CT_INT;
   8b820:	050000c4 	movi	r20,3
	  ccfn = (u_long (*)CCFN_PARAMS)_strtol_r;
   8b824:	00800274 	movhi	r2,9
   8b828:	1095ec04 	addi	r2,r2,22448
   8b82c:	e0bf3b15 	stw	r2,-788(fp)
	  base = 10;
   8b830:	00800284 	movi	r2,10
   8b834:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8b838:	00007806 	br	8ba1c <__svfscanf_r+0x64c>

	case 'i':
	  c = CT_INT;
   8b83c:	050000c4 	movi	r20,3
	  ccfn = (u_long (*)CCFN_PARAMS)_strtol_r;
   8b840:	00800274 	movhi	r2,9
   8b844:	1095ec04 	addi	r2,r2,22448
   8b848:	e0bf3b15 	stw	r2,-788(fp)
	  base = 0;
   8b84c:	e03f3915 	stw	zero,-796(fp)
	  break;
   8b850:	00007206 	br	8ba1c <__svfscanf_r+0x64c>

	case 'O':		/* compat */
	  flags |= LONG;
   8b854:	84000054 	ori	r16,r16,1
	  /* FALLTHROUGH */
	case 'o':
	  c = CT_INT;
   8b858:	050000c4 	movi	r20,3
	  ccfn = _strtoul_r;
   8b85c:	00800274 	movhi	r2,9
   8b860:	1097a104 	addi	r2,r2,24196
   8b864:	e0bf3b15 	stw	r2,-788(fp)
	  base = 8;
   8b868:	00800204 	movi	r2,8
   8b86c:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8b870:	00006a06 	br	8ba1c <__svfscanf_r+0x64c>

	case 'u':
	  c = CT_INT;
   8b874:	050000c4 	movi	r20,3
	  ccfn = _strtoul_r;
   8b878:	00800274 	movhi	r2,9
   8b87c:	1097a104 	addi	r2,r2,24196
   8b880:	e0bf3b15 	stw	r2,-788(fp)
	  base = 10;
   8b884:	00800284 	movi	r2,10
   8b888:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8b88c:	00006306 	br	8ba1c <__svfscanf_r+0x64c>

	case 'X':
	case 'x':
	  flags |= PFXOK;	/* enable 0x prefixing */
   8b890:	84008014 	ori	r16,r16,512
	  c = CT_INT;
   8b894:	050000c4 	movi	r20,3
	  ccfn = _strtoul_r;
   8b898:	00800274 	movhi	r2,9
   8b89c:	1097a104 	addi	r2,r2,24196
   8b8a0:	e0bf3b15 	stw	r2,-788(fp)
	  base = 16;
   8b8a4:	00800404 	movi	r2,16
   8b8a8:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8b8ac:	00005b06 	br	8ba1c <__svfscanf_r+0x64c>
	case 'E':
	case 'G':
	case 'e':
	case 'f':
	case 'g':
	  c = CT_FLOAT;
   8b8b0:	05000104 	movi	r20,4
	  break;
   8b8b4:	00005906 	br	8ba1c <__svfscanf_r+0x64c>
	  flags |= LONG;
	  /* FALLTHROUGH */
#endif

	case 's':
	  c = CT_STRING;
   8b8b8:	05000084 	movi	r20,2
	  break;
   8b8bc:	00005706 	br	8ba1c <__svfscanf_r+0x64c>

	case '[':
	  fmt = (u_char *) __sccl (ccltab, (unsigned char *) fmt);
   8b8c0:	e0bf5904 	addi	r2,fp,-668
   8b8c4:	a80b883a 	mov	r5,r21
   8b8c8:	1009883a 	mov	r4,r2
   8b8cc:	00932400 	call	93240 <__sccl>
   8b8d0:	102b883a 	mov	r21,r2
	  flags |= NOSKIP;
   8b8d4:	84001014 	ori	r16,r16,64
	  c = CT_CCL;
   8b8d8:	05000044 	movi	r20,1
	  break;
   8b8dc:	00004f06 	br	8ba1c <__svfscanf_r+0x64c>
	  flags |= LONG;
	  /* FALLTHROUGH */
#endif

	case 'c':
	  flags |= NOSKIP;
   8b8e0:	84001014 	ori	r16,r16,64
	  c = CT_CHAR;
   8b8e4:	0029883a 	mov	r20,zero
	  break;
   8b8e8:	00004c06 	br	8ba1c <__svfscanf_r+0x64c>

	case 'p':		/* pointer format is like hex */
	  flags |= POINTER | PFXOK;
   8b8ec:	84008814 	ori	r16,r16,544
	  c = CT_INT;
   8b8f0:	050000c4 	movi	r20,3
	  ccfn = _strtoul_r;
   8b8f4:	00800274 	movhi	r2,9
   8b8f8:	1097a104 	addi	r2,r2,24196
   8b8fc:	e0bf3b15 	stw	r2,-788(fp)
	  base = 16;
   8b900:	00800404 	movi	r2,16
   8b904:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8b908:	00004406 	br	8ba1c <__svfscanf_r+0x64c>

	case 'n':
	  if (flags & SUPPRESS)	/* ??? */
   8b90c:	8080040c 	andi	r2,r16,16
   8b910:	1005651e 	bne	r2,zero,8cea8 <__svfscanf_r+0x1ad8>
	      cp = GET_ARG (N, ap, char *);
	      *cp = nread;
	    }
	  else
#endif
	  if (flags & SHORT)
   8b914:	8080010c 	andi	r2,r16,4
   8b918:	10000a26 	beq	r2,zero,8b944 <__svfscanf_r+0x574>
	    {
	      sp = GET_ARG (N, ap, short *);
   8b91c:	e0bff717 	ldw	r2,-36(fp)
   8b920:	10c00104 	addi	r3,r2,4
   8b924:	e0fff715 	stw	r3,-36(fp)
   8b928:	10800017 	ldw	r2,0(r2)
   8b92c:	e0bf4a15 	stw	r2,-728(fp)
	      *sp = nread;
   8b930:	e0bf3817 	ldw	r2,-800(fp)
   8b934:	1007883a 	mov	r3,r2
   8b938:	e0bf4a17 	ldw	r2,-728(fp)
   8b93c:	10c0000d 	sth	r3,0(r2)
	  else
	    {
	      ip = GET_ARG (N, ap, int *);
	      *ip = nread;
	    }
	  continue;
   8b940:	00056006 	br	8cec4 <__svfscanf_r+0x1af4>
	  if (flags & SHORT)
	    {
	      sp = GET_ARG (N, ap, short *);
	      *sp = nread;
	    }
	  else if (flags & LONG)
   8b944:	8080004c 	andi	r2,r16,1
   8b948:	10000926 	beq	r2,zero,8b970 <__svfscanf_r+0x5a0>
	    {
	      lp = GET_ARG (N, ap, long *);
   8b94c:	e0bff717 	ldw	r2,-36(fp)
   8b950:	10c00104 	addi	r3,r2,4
   8b954:	e0fff715 	stw	r3,-36(fp)
   8b958:	10800017 	ldw	r2,0(r2)
   8b95c:	e0bf4b15 	stw	r2,-724(fp)
	      *lp = nread;
   8b960:	e0bf4b17 	ldw	r2,-724(fp)
   8b964:	e0ff3817 	ldw	r3,-800(fp)
   8b968:	10c00015 	stw	r3,0(r2)
	  else
	    {
	      ip = GET_ARG (N, ap, int *);
	      *ip = nread;
	    }
	  continue;
   8b96c:	00055506 	br	8cec4 <__svfscanf_r+0x1af4>
	    {
	      lp = GET_ARG (N, ap, long *);
	      *lp = nread;
	    }
#ifndef _NO_LONGLONG
	  else if (flags & LONGDBL)
   8b970:	8080008c 	andi	r2,r16,2
   8b974:	10000d26 	beq	r2,zero,8b9ac <__svfscanf_r+0x5dc>
	    {
	      llp = GET_ARG (N, ap, long long*);
   8b978:	e0bff717 	ldw	r2,-36(fp)
   8b97c:	10c00104 	addi	r3,r2,4
   8b980:	e0fff715 	stw	r3,-36(fp)
   8b984:	10800017 	ldw	r2,0(r2)
   8b988:	e0bf4c15 	stw	r2,-720(fp)
	      *llp = nread;
   8b98c:	e0bf3817 	ldw	r2,-800(fp)
   8b990:	102d883a 	mov	r22,r2
   8b994:	1005d7fa 	srai	r2,r2,31
   8b998:	102f883a 	mov	r23,r2
   8b99c:	e0bf4c17 	ldw	r2,-720(fp)
   8b9a0:	15800015 	stw	r22,0(r2)
   8b9a4:	15c00115 	stw	r23,4(r2)
	  else
	    {
	      ip = GET_ARG (N, ap, int *);
	      *ip = nread;
	    }
	  continue;
   8b9a8:	00054606 	br	8cec4 <__svfscanf_r+0x1af4>
	      *llp = nread;
	    }
#endif
	  else
	    {
	      ip = GET_ARG (N, ap, int *);
   8b9ac:	e0bff717 	ldw	r2,-36(fp)
   8b9b0:	10c00104 	addi	r3,r2,4
   8b9b4:	e0fff715 	stw	r3,-36(fp)
   8b9b8:	10800017 	ldw	r2,0(r2)
   8b9bc:	e0bf4d15 	stw	r2,-716(fp)
	      *ip = nread;
   8b9c0:	e0bf4d17 	ldw	r2,-716(fp)
   8b9c4:	e0ff3817 	ldw	r3,-800(fp)
   8b9c8:	10c00015 	stw	r3,0(r2)
	    }
	  continue;
   8b9cc:	00053d06 	br	8cec4 <__svfscanf_r+0x1af4>
	  /*
	   * Disgusting backwards compatibility hacks.	XXX
	   */
	case '\0':		/* compat */
	  _newlib_flockfile_exit (fp);
	  return EOF;
   8b9d0:	00bfffc4 	movi	r2,-1
   8b9d4:	00055d06 	br	8cf4c <__svfscanf_r+0x1b7c>

	default:		/* compat */
	  if (isupper (c))
   8b9d8:	d0e00817 	ldw	r3,-32736(gp)
   8b9dc:	a005883a 	mov	r2,r20
   8b9e0:	10800044 	addi	r2,r2,1
   8b9e4:	1885883a 	add	r2,r3,r2
   8b9e8:	10800003 	ldbu	r2,0(r2)
   8b9ec:	10803fcc 	andi	r2,r2,255
   8b9f0:	108000cc 	andi	r2,r2,3
   8b9f4:	10800058 	cmpnei	r2,r2,1
   8b9f8:	1000011e 	bne	r2,zero,8ba00 <__svfscanf_r+0x630>
	    flags |= LONG;
   8b9fc:	84000054 	ori	r16,r16,1
	  c = CT_INT;
   8ba00:	050000c4 	movi	r20,3
	  ccfn = (u_long (*)CCFN_PARAMS)_strtol_r;
   8ba04:	00800274 	movhi	r2,9
   8ba08:	1095ec04 	addi	r2,r2,22448
   8ba0c:	e0bf3b15 	stw	r2,-788(fp)
	  base = 10;
   8ba10:	00800284 	movi	r2,10
   8ba14:	e0bf3915 	stw	r2,-796(fp)
	  break;
   8ba18:	0001883a 	nop
	}

      /*
       * We have a conversion that requires input.
       */
      if (BufferEmpty)
   8ba1c:	88800117 	ldw	r2,4(r17)
   8ba20:	00800416 	blt	zero,r2,8ba34 <__svfscanf_r+0x664>
   8ba24:	880b883a 	mov	r5,r17
   8ba28:	e13ff517 	ldw	r4,-44(fp)
   8ba2c:	008870c0 	call	8870c <__srefill_r>
   8ba30:	1005271e 	bne	r2,zero,8ced0 <__svfscanf_r+0x1b00>

      /*
       * Consume leading white space, except for formats that
       * suppress this.
       */
      if ((flags & NOSKIP) == 0)
   8ba34:	8080100c 	andi	r2,r16,64
   8ba38:	10001b1e 	bne	r2,zero,8baa8 <__svfscanf_r+0x6d8>
	{
	  while (isspace (*fp->_p))
   8ba3c:	00001006 	br	8ba80 <__svfscanf_r+0x6b0>
	    {
	      nread++;
   8ba40:	e0bf3817 	ldw	r2,-800(fp)
   8ba44:	10800044 	addi	r2,r2,1
   8ba48:	e0bf3815 	stw	r2,-800(fp)
	      if (--fp->_r > 0)
   8ba4c:	88800117 	ldw	r2,4(r17)
   8ba50:	10bfffc4 	addi	r2,r2,-1
   8ba54:	88800115 	stw	r2,4(r17)
   8ba58:	88800117 	ldw	r2,4(r17)
   8ba5c:	0080040e 	bge	zero,r2,8ba70 <__svfscanf_r+0x6a0>
		fp->_p++;
   8ba60:	88800017 	ldw	r2,0(r17)
   8ba64:	10800044 	addi	r2,r2,1
   8ba68:	88800015 	stw	r2,0(r17)
   8ba6c:	00000406 	br	8ba80 <__svfscanf_r+0x6b0>
	      else
	      if (__srefill_r (rptr, fp))
   8ba70:	880b883a 	mov	r5,r17
   8ba74:	e13ff517 	ldw	r4,-44(fp)
   8ba78:	008870c0 	call	8870c <__srefill_r>
   8ba7c:	1005161e 	bne	r2,zero,8ced8 <__svfscanf_r+0x1b08>
       * Consume leading white space, except for formats that
       * suppress this.
       */
      if ((flags & NOSKIP) == 0)
	{
	  while (isspace (*fp->_p))
   8ba80:	d0e00817 	ldw	r3,-32736(gp)
   8ba84:	88800017 	ldw	r2,0(r17)
   8ba88:	10800003 	ldbu	r2,0(r2)
   8ba8c:	10803fcc 	andi	r2,r2,255
   8ba90:	10800044 	addi	r2,r2,1
   8ba94:	1885883a 	add	r2,r3,r2
   8ba98:	10800003 	ldbu	r2,0(r2)
   8ba9c:	10803fcc 	andi	r2,r2,255
   8baa0:	1080020c 	andi	r2,r2,8
   8baa4:	103fe61e 	bne	r2,zero,8ba40 <__alt_data_end+0xfffd9a40>
	}

      /*
       * Do the conversion.
       */
      switch (c)
   8baa8:	a0800168 	cmpgeui	r2,r20,5
   8baac:	103e6a1e 	bne	r2,zero,8b458 <__alt_data_end+0xfffd9458>
   8bab0:	a00690ba 	slli	r3,r20,2
   8bab4:	00800274 	movhi	r2,9
   8bab8:	10aeb204 	addi	r2,r2,-17720
   8babc:	1885883a 	add	r2,r3,r2
   8bac0:	10800017 	ldw	r2,0(r2)
   8bac4:	1000683a 	jmp	r2
   8bac8:	0008badc 	xori	zero,zero,8939
   8bacc:	0008bd20 	cmpeqi	zero,zero,8948
   8bad0:	0008be8c 	andi	zero,zero,8954
   8bad4:	0008c1a8 	cmpgeui	zero,zero,8966
   8bad8:	0008c6b0 	cmpltui	zero,zero,8986
	{

	case CT_CHAR:
	  /* scan arbitrary characters (sets NOSKIP) */
	  if (width == 0)
   8badc:	9000011e 	bne	r18,zero,8bae4 <__svfscanf_r+0x714>
	    width = 1;
   8bae0:	04800044 	movi	r18,1
#if !defined(_ELIX_LEVEL) || _ELIX_LEVEL >= 2
          if (flags & LONG)
   8bae4:	8080004c 	andi	r2,r16,1
   8bae8:	10005126 	beq	r2,zero,8bc30 <__svfscanf_r+0x860>
            {
              mbstate_t state;
              memset (&state, 0, sizeof (mbstate_t));
   8baec:	e0bff104 	addi	r2,fp,-60
   8baf0:	01800204 	movi	r6,8
   8baf4:	000b883a 	mov	r5,zero
   8baf8:	1009883a 	mov	r4,r2
   8bafc:	00880200 	call	88020 <memset>
              if ((flags & SUPPRESS) == 0)
   8bb00:	8080040c 	andi	r2,r16,16
   8bb04:	1000061e 	bne	r2,zero,8bb20 <__svfscanf_r+0x750>
                wcp = GET_ARG (N, ap, wchar_t *);
   8bb08:	e0bff717 	ldw	r2,-36(fp)
   8bb0c:	10c00104 	addi	r3,r2,4
   8bb10:	e0fff715 	stw	r3,-36(fp)
   8bb14:	10800017 	ldw	r2,0(r2)
   8bb18:	e0bf3a15 	stw	r2,-792(fp)
   8bb1c:	00000106 	br	8bb24 <__svfscanf_r+0x754>
              else
                wcp = NULL;
   8bb20:	e03f3a15 	stw	zero,-792(fp)
              n = 0;
   8bb24:	0029883a 	mov	r20,zero
              while (width != 0)
   8bb28:	00003806 	br	8bc0c <__svfscanf_r+0x83c>
                {
                  if (n == MB_CUR_MAX)
   8bb2c:	00900b80 	call	900b8 <__locale_mb_cur_max>
   8bb30:	1504eb26 	beq	r2,r20,8cee0 <__svfscanf_r+0x1b10>
                    goto input_failure;
                  buf[n++] = *fp->_p;
   8bb34:	a005883a 	mov	r2,r20
   8bb38:	15000044 	addi	r20,r2,1
   8bb3c:	88c00017 	ldw	r3,0(r17)
   8bb40:	18c00003 	ldbu	r3,0(r3)
   8bb44:	1809883a 	mov	r4,r3
   8bb48:	e0ff9904 	addi	r3,fp,-412
   8bb4c:	1885883a 	add	r2,r3,r2
   8bb50:	11000005 	stb	r4,0(r2)
                  fp->_r -= 1;
   8bb54:	88800117 	ldw	r2,4(r17)
   8bb58:	10bfffc4 	addi	r2,r2,-1
   8bb5c:	88800115 	stw	r2,4(r17)
                  fp->_p += 1;
   8bb60:	88800017 	ldw	r2,0(r17)
   8bb64:	10800044 	addi	r2,r2,1
   8bb68:	88800015 	stw	r2,0(r17)
                  if ((mbslen = _mbrtowc_r (rptr, wcp, buf, n, &state))
   8bb6c:	a009883a 	mov	r4,r20
   8bb70:	e0ff9904 	addi	r3,fp,-412
   8bb74:	e0bff104 	addi	r2,fp,-60
   8bb78:	d8800015 	stw	r2,0(sp)
   8bb7c:	200f883a 	mov	r7,r4
   8bb80:	180d883a 	mov	r6,r3
   8bb84:	e17f3a17 	ldw	r5,-792(fp)
   8bb88:	e13ff517 	ldw	r4,-44(fp)
   8bb8c:	00902240 	call	90224 <_mbrtowc_r>
   8bb90:	e0bf4e15 	stw	r2,-712(fp)
   8bb94:	e0bf4e17 	ldw	r2,-712(fp)
   8bb98:	10bfffd8 	cmpnei	r2,r2,-1
   8bb9c:	1004d226 	beq	r2,zero,8cee8 <__svfscanf_r+0x1b18>
                                                         == (size_t)-1)
                    goto input_failure; /* Invalid sequence */
                  if (mbslen == 0 && !(flags & SUPPRESS))
   8bba0:	e0bf4e17 	ldw	r2,-712(fp)
   8bba4:	1000041e 	bne	r2,zero,8bbb8 <__svfscanf_r+0x7e8>
   8bba8:	8080040c 	andi	r2,r16,16
   8bbac:	1000021e 	bne	r2,zero,8bbb8 <__svfscanf_r+0x7e8>
                    *wcp = L'\0';
   8bbb0:	e0bf3a17 	ldw	r2,-792(fp)
   8bbb4:	10000015 	stw	zero,0(r2)
                  if (mbslen != (size_t)-2) /* Incomplete sequence */
   8bbb8:	e0bf4e17 	ldw	r2,-712(fp)
   8bbbc:	10bfffa0 	cmpeqi	r2,r2,-2
   8bbc0:	10000a1e 	bne	r2,zero,8bbec <__svfscanf_r+0x81c>
                    {
                      nread += n;
   8bbc4:	e0bf3817 	ldw	r2,-800(fp)
   8bbc8:	1505883a 	add	r2,r2,r20
   8bbcc:	e0bf3815 	stw	r2,-800(fp)
                      width -= 1;
   8bbd0:	94bfffc4 	addi	r18,r18,-1
                      if (!(flags & SUPPRESS))
   8bbd4:	8080040c 	andi	r2,r16,16
   8bbd8:	1000031e 	bne	r2,zero,8bbe8 <__svfscanf_r+0x818>
                        wcp += 1;
   8bbdc:	e0bf3a17 	ldw	r2,-792(fp)
   8bbe0:	10800104 	addi	r2,r2,4
   8bbe4:	e0bf3a15 	stw	r2,-792(fp)
                      n = 0;
   8bbe8:	0029883a 	mov	r20,zero
                    }
                  if (BufferEmpty)
   8bbec:	88800117 	ldw	r2,4(r17)
   8bbf0:	00800616 	blt	zero,r2,8bc0c <__svfscanf_r+0x83c>
   8bbf4:	880b883a 	mov	r5,r17
   8bbf8:	e13ff517 	ldw	r4,-44(fp)
   8bbfc:	008870c0 	call	8870c <__srefill_r>
   8bc00:	10000226 	beq	r2,zero,8bc0c <__svfscanf_r+0x83c>
	            {
                      if (n != 0)
   8bc04:	a0000326 	beq	r20,zero,8bc14 <__svfscanf_r+0x844>
                        goto input_failure;
   8bc08:	0004be06 	br	8cf04 <__svfscanf_r+0x1b34>
              if ((flags & SUPPRESS) == 0)
                wcp = GET_ARG (N, ap, wchar_t *);
              else
                wcp = NULL;
              n = 0;
              while (width != 0)
   8bc0c:	903fc71e 	bne	r18,zero,8bb2c <__alt_data_end+0xfffd9b2c>
   8bc10:	00000106 	br	8bc18 <__svfscanf_r+0x848>
                    }
                  if (BufferEmpty)
	            {
                      if (n != 0)
                        goto input_failure;
                      break;
   8bc14:	0001883a 	nop
                    }
                }
              if (!(flags & SUPPRESS))
   8bc18:	8080040c 	andi	r2,r16,16
   8bc1c:	1004a41e 	bne	r2,zero,8ceb0 <__svfscanf_r+0x1ae0>
                nassigned++;
   8bc20:	e0bf3717 	ldw	r2,-804(fp)
   8bc24:	10800044 	addi	r2,r2,1
   8bc28:	e0bf3715 	stw	r2,-804(fp)
	      if (r == 0)
		goto input_failure;
	      nread += r;
	      nassigned++;
	    }
	  break;
   8bc2c:	0004a006 	br	8ceb0 <__svfscanf_r+0x1ae0>
              if (!(flags & SUPPRESS))
                nassigned++;
            }
          else
#endif
        	  if (flags & SUPPRESS)
   8bc30:	8080040c 	andi	r2,r16,16
   8bc34:	10002526 	beq	r2,zero,8bccc <__svfscanf_r+0x8fc>
	    {
	      size_t sum = 0;
   8bc38:	e03f3d15 	stw	zero,-780(fp)
	      for (;;)
		{
		  if ((n = fp->_r) < (int)width)
   8bc3c:	8d000117 	ldw	r20,4(r17)
   8bc40:	9005883a 	mov	r2,r18
   8bc44:	a080110e 	bge	r20,r2,8bc8c <__svfscanf_r+0x8bc>
		    {
		      sum += n;
   8bc48:	a007883a 	mov	r3,r20
   8bc4c:	e0bf3d17 	ldw	r2,-780(fp)
   8bc50:	10c5883a 	add	r2,r2,r3
   8bc54:	e0bf3d15 	stw	r2,-780(fp)
		      width -= n;
   8bc58:	a005883a 	mov	r2,r20
   8bc5c:	90a5c83a 	sub	r18,r18,r2
		      fp->_p += n;
   8bc60:	88800017 	ldw	r2,0(r17)
   8bc64:	a007883a 	mov	r3,r20
   8bc68:	10c5883a 	add	r2,r2,r3
   8bc6c:	88800015 	stw	r2,0(r17)
		      if (__srefill_r (rptr, fp))
   8bc70:	880b883a 	mov	r5,r17
   8bc74:	e13ff517 	ldw	r4,-44(fp)
   8bc78:	008870c0 	call	8870c <__srefill_r>
   8bc7c:	103fef26 	beq	r2,zero,8bc3c <__alt_data_end+0xfffd9c3c>
			{
			  if (sum == 0)
   8bc80:	e0bf3d17 	ldw	r2,-780(fp)
   8bc84:	10000b1e 	bne	r2,zero,8bcb4 <__svfscanf_r+0x8e4>
			    goto input_failure;
   8bc88:	00049e06 	br	8cf04 <__svfscanf_r+0x1b34>
			  break;
			}
		    }
		  else
		    {
		      sum += width;
   8bc8c:	e0bf3d17 	ldw	r2,-780(fp)
   8bc90:	1485883a 	add	r2,r2,r18
   8bc94:	e0bf3d15 	stw	r2,-780(fp)
		      fp->_r -= width;
   8bc98:	88800117 	ldw	r2,4(r17)
   8bc9c:	1485c83a 	sub	r2,r2,r18
   8bca0:	88800115 	stw	r2,4(r17)
		      fp->_p += width;
   8bca4:	88800017 	ldw	r2,0(r17)
   8bca8:	1485883a 	add	r2,r2,r18
   8bcac:	88800015 	stw	r2,0(r17)
		      break;
   8bcb0:	00000106 	br	8bcb8 <__svfscanf_r+0x8e8>
		      fp->_p += n;
		      if (__srefill_r (rptr, fp))
			{
			  if (sum == 0)
			    goto input_failure;
			  break;
   8bcb4:	0001883a 	nop
		      fp->_r -= width;
		      fp->_p += width;
		      break;
		    }
		}
	      nread += sum;
   8bcb8:	e0ff3817 	ldw	r3,-800(fp)
   8bcbc:	e0bf3d17 	ldw	r2,-780(fp)
   8bcc0:	1885883a 	add	r2,r3,r2
   8bcc4:	e0bf3815 	stw	r2,-800(fp)
	      if (r == 0)
		goto input_failure;
	      nread += r;
	      nassigned++;
	    }
	  break;
   8bcc8:	00047906 	br	8ceb0 <__svfscanf_r+0x1ae0>
		}
	      nread += sum;
	    }
	  else
	    {
	      size_t r = _fread_r (rptr, (_PTR) GET_ARG (N, ap, char *), 1, width, fp);
   8bccc:	e0bff717 	ldw	r2,-36(fp)
   8bcd0:	10c00104 	addi	r3,r2,4
   8bcd4:	e0fff715 	stw	r3,-36(fp)
   8bcd8:	10800017 	ldw	r2,0(r2)
   8bcdc:	dc400015 	stw	r17,0(sp)
   8bce0:	900f883a 	mov	r7,r18
   8bce4:	01800044 	movi	r6,1
   8bce8:	100b883a 	mov	r5,r2
   8bcec:	e13ff517 	ldw	r4,-44(fp)
   8bcf0:	008f5ec0 	call	8f5ec <_fread_r>
   8bcf4:	e0bf4f15 	stw	r2,-708(fp)

	      if (r == 0)
   8bcf8:	e0bf4f17 	ldw	r2,-708(fp)
   8bcfc:	10047c26 	beq	r2,zero,8cef0 <__svfscanf_r+0x1b20>
		goto input_failure;
	      nread += r;
   8bd00:	e0ff3817 	ldw	r3,-800(fp)
   8bd04:	e0bf4f17 	ldw	r2,-708(fp)
   8bd08:	1885883a 	add	r2,r3,r2
   8bd0c:	e0bf3815 	stw	r2,-800(fp)
	      nassigned++;
   8bd10:	e0bf3717 	ldw	r2,-804(fp)
   8bd14:	10800044 	addi	r2,r2,1
   8bd18:	e0bf3715 	stw	r2,-804(fp)
	    }
	  break;
   8bd1c:	00046406 	br	8ceb0 <__svfscanf_r+0x1ae0>

	case CT_CCL:
	  /* scan a (nonempty) character class (sets NOSKIP) */
	  if (width == 0)
   8bd20:	9000011e 	bne	r18,zero,8bd28 <__svfscanf_r+0x958>
	    width = ~0;		/* `infinity' */
   8bd24:	04bfffc4 	movi	r18,-1
	  /* take only those things in the class */
	  if (flags & SUPPRESS)
   8bd28:	8080040c 	andi	r2,r16,16
   8bd2c:	10002326 	beq	r2,zero,8bdbc <__svfscanf_r+0x9ec>
	    {
	      n = 0;
   8bd30:	0029883a 	mov	r20,zero
	      while (ccltab[*fp->_p])
   8bd34:	00001106 	br	8bd7c <__svfscanf_r+0x9ac>
		{
		  n++, fp->_r--, fp->_p++;
   8bd38:	a5000044 	addi	r20,r20,1
   8bd3c:	88800117 	ldw	r2,4(r17)
   8bd40:	10bfffc4 	addi	r2,r2,-1
   8bd44:	88800115 	stw	r2,4(r17)
   8bd48:	88800017 	ldw	r2,0(r17)
   8bd4c:	10800044 	addi	r2,r2,1
   8bd50:	88800015 	stw	r2,0(r17)
		  if (--width == 0)
   8bd54:	94bfffc4 	addi	r18,r18,-1
   8bd58:	90001326 	beq	r18,zero,8bda8 <__svfscanf_r+0x9d8>
		    break;
		  if (BufferEmpty)
   8bd5c:	88800117 	ldw	r2,4(r17)
   8bd60:	00800616 	blt	zero,r2,8bd7c <__svfscanf_r+0x9ac>
   8bd64:	880b883a 	mov	r5,r17
   8bd68:	e13ff517 	ldw	r4,-44(fp)
   8bd6c:	008870c0 	call	8870c <__srefill_r>
   8bd70:	10000226 	beq	r2,zero,8bd7c <__svfscanf_r+0x9ac>
		    {
		      if (n == 0)
   8bd74:	a0000e1e 	bne	r20,zero,8bdb0 <__svfscanf_r+0x9e0>
			goto input_failure;
   8bd78:	00046206 	br	8cf04 <__svfscanf_r+0x1b34>
	    width = ~0;		/* `infinity' */
	  /* take only those things in the class */
	  if (flags & SUPPRESS)
	    {
	      n = 0;
	      while (ccltab[*fp->_p])
   8bd7c:	88800017 	ldw	r2,0(r17)
   8bd80:	10800003 	ldbu	r2,0(r2)
   8bd84:	10803fcc 	andi	r2,r2,255
   8bd88:	e0ff5904 	addi	r3,fp,-668
   8bd8c:	1885883a 	add	r2,r3,r2
   8bd90:	10800003 	ldbu	r2,0(r2)
   8bd94:	10803fcc 	andi	r2,r2,255
   8bd98:	1080201c 	xori	r2,r2,128
   8bd9c:	10bfe004 	addi	r2,r2,-128
   8bda0:	103fe51e 	bne	r2,zero,8bd38 <__alt_data_end+0xfffd9d38>
   8bda4:	00000306 	br	8bdb4 <__svfscanf_r+0x9e4>
		{
		  n++, fp->_r--, fp->_p++;
		  if (--width == 0)
		    break;
   8bda8:	0001883a 	nop
   8bdac:	00000106 	br	8bdb4 <__svfscanf_r+0x9e4>
		  if (BufferEmpty)
		    {
		      if (n == 0)
			goto input_failure;
		      break;
   8bdb0:	0001883a 	nop
		    }
		}
	      if (n == 0)
   8bdb4:	a000311e 	bne	r20,zero,8be7c <__svfscanf_r+0xaac>
		goto match_failure;
   8bdb8:	00046306 	br	8cf48 <__svfscanf_r+0x1b78>
	    }
	  else
	    {
	      p0 = p = GET_ARG (N, ap, char *);
   8bdbc:	e0bff717 	ldw	r2,-36(fp)
   8bdc0:	10c00104 	addi	r3,r2,4
   8bdc4:	e0fff715 	stw	r3,-36(fp)
   8bdc8:	14c00017 	ldw	r19,0(r2)
   8bdcc:	9821883a 	mov	r16,r19
	      while (ccltab[*fp->_p])
   8bdd0:	00001406 	br	8be24 <__svfscanf_r+0xa54>
		{
		  fp->_r--;
   8bdd4:	88800117 	ldw	r2,4(r17)
   8bdd8:	10bfffc4 	addi	r2,r2,-1
   8bddc:	88800115 	stw	r2,4(r17)
		  *p++ = *fp->_p++;
   8bde0:	9807883a 	mov	r3,r19
   8bde4:	1cc00044 	addi	r19,r3,1
   8bde8:	88800017 	ldw	r2,0(r17)
   8bdec:	11000044 	addi	r4,r2,1
   8bdf0:	89000015 	stw	r4,0(r17)
   8bdf4:	10800003 	ldbu	r2,0(r2)
   8bdf8:	18800005 	stb	r2,0(r3)
		  if (--width == 0)
   8bdfc:	94bfffc4 	addi	r18,r18,-1
   8be00:	90001326 	beq	r18,zero,8be50 <__svfscanf_r+0xa80>
		    break;
		  if (BufferEmpty)
   8be04:	88800117 	ldw	r2,4(r17)
   8be08:	00800616 	blt	zero,r2,8be24 <__svfscanf_r+0xa54>
   8be0c:	880b883a 	mov	r5,r17
   8be10:	e13ff517 	ldw	r4,-44(fp)
   8be14:	008870c0 	call	8870c <__srefill_r>
   8be18:	10000226 	beq	r2,zero,8be24 <__svfscanf_r+0xa54>
		    {
		      if (p == p0)
   8be1c:	9c000e1e 	bne	r19,r16,8be58 <__svfscanf_r+0xa88>
			goto input_failure;
   8be20:	00043806 	br	8cf04 <__svfscanf_r+0x1b34>
		goto match_failure;
	    }
	  else
	    {
	      p0 = p = GET_ARG (N, ap, char *);
	      while (ccltab[*fp->_p])
   8be24:	88800017 	ldw	r2,0(r17)
   8be28:	10800003 	ldbu	r2,0(r2)
   8be2c:	10803fcc 	andi	r2,r2,255
   8be30:	e0ff5904 	addi	r3,fp,-668
   8be34:	1885883a 	add	r2,r3,r2
   8be38:	10800003 	ldbu	r2,0(r2)
   8be3c:	10803fcc 	andi	r2,r2,255
   8be40:	1080201c 	xori	r2,r2,128
   8be44:	10bfe004 	addi	r2,r2,-128
   8be48:	103fe21e 	bne	r2,zero,8bdd4 <__alt_data_end+0xfffd9dd4>
   8be4c:	00000306 	br	8be5c <__svfscanf_r+0xa8c>
		{
		  fp->_r--;
		  *p++ = *fp->_p++;
		  if (--width == 0)
		    break;
   8be50:	0001883a 	nop
   8be54:	00000106 	br	8be5c <__svfscanf_r+0xa8c>
		  if (BufferEmpty)
		    {
		      if (p == p0)
			goto input_failure;
		      break;
   8be58:	0001883a 	nop
		    }
		}
	      n = p - p0;
   8be5c:	9807883a 	mov	r3,r19
   8be60:	8005883a 	mov	r2,r16
   8be64:	18a9c83a 	sub	r20,r3,r2
	      if (n == 0)
   8be68:	a0043426 	beq	r20,zero,8cf3c <__svfscanf_r+0x1b6c>
		goto match_failure;
	      *p = 0;
   8be6c:	98000005 	stb	zero,0(r19)
	      nassigned++;
   8be70:	e0bf3717 	ldw	r2,-804(fp)
   8be74:	10800044 	addi	r2,r2,1
   8be78:	e0bf3715 	stw	r2,-804(fp)
	    }
	  nread += n;
   8be7c:	e0bf3817 	ldw	r2,-800(fp)
   8be80:	1505883a 	add	r2,r2,r20
   8be84:	e0bf3815 	stw	r2,-800(fp)
	  break;
   8be88:	00040e06 	br	8cec4 <__svfscanf_r+0x1af4>

	case CT_STRING:
	  /* like CCL, but zero-length string OK, & no NOSKIP */
	  if (width == 0)
   8be8c:	9000011e 	bne	r18,zero,8be94 <__svfscanf_r+0xac4>
            width = (size_t)~0;
   8be90:	04bfffc4 	movi	r18,-1
#if !defined(_ELIX_LEVEL) || _ELIX_LEVEL >= 2
          if (flags & LONG)
   8be94:	8080004c 	andi	r2,r16,1
   8be98:	10006d26 	beq	r2,zero,8c050 <__svfscanf_r+0xc80>
            {
              /* Process %S and %ls placeholders */
              mbstate_t state;
              memset (&state, 0, sizeof (mbstate_t));
   8be9c:	e0bff304 	addi	r2,fp,-52
   8bea0:	01800204 	movi	r6,8
   8bea4:	000b883a 	mov	r5,zero
   8bea8:	1009883a 	mov	r4,r2
   8beac:	00880200 	call	88020 <memset>
              if ((flags & SUPPRESS) == 0)
   8beb0:	8080040c 	andi	r2,r16,16
   8beb4:	1000061e 	bne	r2,zero,8bed0 <__svfscanf_r+0xb00>
                wcp = GET_ARG (N, ap, wchar_t *);
   8beb8:	e0bff717 	ldw	r2,-36(fp)
   8bebc:	10c00104 	addi	r3,r2,4
   8bec0:	e0fff715 	stw	r3,-36(fp)
   8bec4:	10800017 	ldw	r2,0(r2)
   8bec8:	e0bf3a15 	stw	r2,-792(fp)
   8becc:	00000206 	br	8bed8 <__svfscanf_r+0xb08>
              else
                wcp = &wc;
   8bed0:	e0bf5804 	addi	r2,fp,-672
   8bed4:	e0bf3a15 	stw	r2,-792(fp)
              n = 0;
   8bed8:	0029883a 	mov	r20,zero
              while (!isspace (*fp->_p) && width != 0)
   8bedc:	00004706 	br	8bffc <__svfscanf_r+0xc2c>
                {
                  if (n == MB_CUR_MAX)
   8bee0:	00900b80 	call	900b8 <__locale_mb_cur_max>
   8bee4:	15040426 	beq	r2,r20,8cef8 <__svfscanf_r+0x1b28>
                    goto input_failure;
                  buf[n++] = *fp->_p;
   8bee8:	a005883a 	mov	r2,r20
   8beec:	15000044 	addi	r20,r2,1
   8bef0:	88c00017 	ldw	r3,0(r17)
   8bef4:	18c00003 	ldbu	r3,0(r3)
   8bef8:	1809883a 	mov	r4,r3
   8befc:	e0ff9904 	addi	r3,fp,-412
   8bf00:	1885883a 	add	r2,r3,r2
   8bf04:	11000005 	stb	r4,0(r2)
                  fp->_r -= 1;
   8bf08:	88800117 	ldw	r2,4(r17)
   8bf0c:	10bfffc4 	addi	r2,r2,-1
   8bf10:	88800115 	stw	r2,4(r17)
                  fp->_p += 1;
   8bf14:	88800017 	ldw	r2,0(r17)
   8bf18:	10800044 	addi	r2,r2,1
   8bf1c:	88800015 	stw	r2,0(r17)
                  if ((mbslen = _mbrtowc_r (rptr, wcp, buf, n, &state))
   8bf20:	a009883a 	mov	r4,r20
   8bf24:	e0ff9904 	addi	r3,fp,-412
   8bf28:	e0bff304 	addi	r2,fp,-52
   8bf2c:	d8800015 	stw	r2,0(sp)
   8bf30:	200f883a 	mov	r7,r4
   8bf34:	180d883a 	mov	r6,r3
   8bf38:	e17f3a17 	ldw	r5,-792(fp)
   8bf3c:	e13ff517 	ldw	r4,-44(fp)
   8bf40:	00902240 	call	90224 <_mbrtowc_r>
   8bf44:	e0bf4e15 	stw	r2,-712(fp)
   8bf48:	e0bf4e17 	ldw	r2,-712(fp)
   8bf4c:	10bfffd8 	cmpnei	r2,r2,-1
   8bf50:	1003eb26 	beq	r2,zero,8cf00 <__svfscanf_r+0x1b30>
                                                        == (size_t)-1)
                    goto input_failure;
                  if (mbslen == 0)
   8bf54:	e0bf4e17 	ldw	r2,-712(fp)
   8bf58:	1000021e 	bne	r2,zero,8bf64 <__svfscanf_r+0xb94>
                    *wcp = L'\0';
   8bf5c:	e0bf3a17 	ldw	r2,-792(fp)
   8bf60:	10000015 	stw	zero,0(r2)
                  if (mbslen != (size_t)-2) /* Incomplete sequence */
   8bf64:	e0bf4e17 	ldw	r2,-712(fp)
   8bf68:	10bfffa0 	cmpeqi	r2,r2,-2
   8bf6c:	10001b1e 	bne	r2,zero,8bfdc <__svfscanf_r+0xc0c>
                    {
                      if (iswspace(*wcp))
   8bf70:	e0bf3a17 	ldw	r2,-792(fp)
   8bf74:	10800017 	ldw	r2,0(r2)
   8bf78:	1009883a 	mov	r4,r2
   8bf7c:	008ffc00 	call	8ffc0 <iswspace>
   8bf80:	10000c26 	beq	r2,zero,8bfb4 <__svfscanf_r+0xbe4>
                        {
                          while (n != 0)
   8bf84:	00000906 	br	8bfac <__svfscanf_r+0xbdc>
                            _ungetc_r (rptr, (unsigned char) buf[--n], fp);
   8bf88:	a53fffc4 	addi	r20,r20,-1
   8bf8c:	e0bf9904 	addi	r2,fp,-412
   8bf90:	1505883a 	add	r2,r2,r20
   8bf94:	10800003 	ldbu	r2,0(r2)
   8bf98:	10803fcc 	andi	r2,r2,255
   8bf9c:	880d883a 	mov	r6,r17
   8bfa0:	100b883a 	mov	r5,r2
   8bfa4:	e13ff517 	ldw	r4,-44(fp)
   8bfa8:	00989cc0 	call	989cc <_ungetc_r>
                    *wcp = L'\0';
                  if (mbslen != (size_t)-2) /* Incomplete sequence */
                    {
                      if (iswspace(*wcp))
                        {
                          while (n != 0)
   8bfac:	a03ff61e 	bne	r20,zero,8bf88 <__alt_data_end+0xfffd9f88>
                            _ungetc_r (rptr, (unsigned char) buf[--n], fp);
                          break;
   8bfb0:	00001f06 	br	8c030 <__svfscanf_r+0xc60>
                        }
                      nread += n;
   8bfb4:	e0bf3817 	ldw	r2,-800(fp)
   8bfb8:	1505883a 	add	r2,r2,r20
   8bfbc:	e0bf3815 	stw	r2,-800(fp)
                      width -= 1;
   8bfc0:	94bfffc4 	addi	r18,r18,-1
                      if ((flags & SUPPRESS) == 0)
   8bfc4:	8080040c 	andi	r2,r16,16
   8bfc8:	1000031e 	bne	r2,zero,8bfd8 <__svfscanf_r+0xc08>
                        wcp += 1;
   8bfcc:	e0bf3a17 	ldw	r2,-792(fp)
   8bfd0:	10800104 	addi	r2,r2,4
   8bfd4:	e0bf3a15 	stw	r2,-792(fp)
                      n = 0;
   8bfd8:	0029883a 	mov	r20,zero
                    }
                  if (BufferEmpty)
   8bfdc:	88800117 	ldw	r2,4(r17)
   8bfe0:	00800616 	blt	zero,r2,8bffc <__svfscanf_r+0xc2c>
   8bfe4:	880b883a 	mov	r5,r17
   8bfe8:	e13ff517 	ldw	r4,-44(fp)
   8bfec:	008870c0 	call	8870c <__srefill_r>
   8bff0:	10000226 	beq	r2,zero,8bffc <__svfscanf_r+0xc2c>
                    {
                      if (n != 0)
   8bff4:	a0000d26 	beq	r20,zero,8c02c <__svfscanf_r+0xc5c>
                        goto input_failure;
   8bff8:	0003c206 	br	8cf04 <__svfscanf_r+0x1b34>
              if ((flags & SUPPRESS) == 0)
                wcp = GET_ARG (N, ap, wchar_t *);
              else
                wcp = &wc;
              n = 0;
              while (!isspace (*fp->_p) && width != 0)
   8bffc:	d0e00817 	ldw	r3,-32736(gp)
   8c000:	88800017 	ldw	r2,0(r17)
   8c004:	10800003 	ldbu	r2,0(r2)
   8c008:	10803fcc 	andi	r2,r2,255
   8c00c:	10800044 	addi	r2,r2,1
   8c010:	1885883a 	add	r2,r3,r2
   8c014:	10800003 	ldbu	r2,0(r2)
   8c018:	10803fcc 	andi	r2,r2,255
   8c01c:	1080020c 	andi	r2,r2,8
   8c020:	1000031e 	bne	r2,zero,8c030 <__svfscanf_r+0xc60>
   8c024:	903fae1e 	bne	r18,zero,8bee0 <__alt_data_end+0xfffd9ee0>
   8c028:	00000106 	br	8c030 <__svfscanf_r+0xc60>
                    }
                  if (BufferEmpty)
                    {
                      if (n != 0)
                        goto input_failure;
                      break;
   8c02c:	0001883a 	nop
                    }
                }
              if (!(flags & SUPPRESS))
   8c030:	8080040c 	andi	r2,r16,16
   8c034:	1003a01e 	bne	r2,zero,8ceb8 <__svfscanf_r+0x1ae8>
                {
                  *wcp = L'\0';
   8c038:	e0bf3a17 	ldw	r2,-792(fp)
   8c03c:	10000015 	stw	zero,0(r2)
                  nassigned++;
   8c040:	e0bf3717 	ldw	r2,-804(fp)
   8c044:	10800044 	addi	r2,r2,1
   8c048:	e0bf3715 	stw	r2,-804(fp)
		}
	      *p = 0;
	      nread += p - p0;
	      nassigned++;
	    }
	  continue;
   8c04c:	00039a06 	br	8ceb8 <__svfscanf_r+0x1ae8>
                  nassigned++;
                }
            }
          else
#endif
        	  if (flags & SUPPRESS)
   8c050:	8080040c 	andi	r2,r16,16
   8c054:	10002326 	beq	r2,zero,8c0e4 <__svfscanf_r+0xd14>
	    {
	      n = 0;
   8c058:	0029883a 	mov	r20,zero
	      while (!isspace (*fp->_p))
   8c05c:	00000f06 	br	8c09c <__svfscanf_r+0xccc>
		{
		  n++, fp->_r--, fp->_p++;
   8c060:	a5000044 	addi	r20,r20,1
   8c064:	88800117 	ldw	r2,4(r17)
   8c068:	10bfffc4 	addi	r2,r2,-1
   8c06c:	88800115 	stw	r2,4(r17)
   8c070:	88800017 	ldw	r2,0(r17)
   8c074:	10800044 	addi	r2,r2,1
   8c078:	88800015 	stw	r2,0(r17)
		  if (--width == 0)
   8c07c:	94bfffc4 	addi	r18,r18,-1
   8c080:	90001126 	beq	r18,zero,8c0c8 <__svfscanf_r+0xcf8>
		    break;
		  if (BufferEmpty)
   8c084:	88800117 	ldw	r2,4(r17)
   8c088:	00800416 	blt	zero,r2,8c09c <__svfscanf_r+0xccc>
   8c08c:	880b883a 	mov	r5,r17
   8c090:	e13ff517 	ldw	r4,-44(fp)
   8c094:	008870c0 	call	8870c <__srefill_r>
   8c098:	10000d1e 	bne	r2,zero,8c0d0 <__svfscanf_r+0xd00>
          else
#endif
        	  if (flags & SUPPRESS)
	    {
	      n = 0;
	      while (!isspace (*fp->_p))
   8c09c:	d0e00817 	ldw	r3,-32736(gp)
   8c0a0:	88800017 	ldw	r2,0(r17)
   8c0a4:	10800003 	ldbu	r2,0(r2)
   8c0a8:	10803fcc 	andi	r2,r2,255
   8c0ac:	10800044 	addi	r2,r2,1
   8c0b0:	1885883a 	add	r2,r3,r2
   8c0b4:	10800003 	ldbu	r2,0(r2)
   8c0b8:	10803fcc 	andi	r2,r2,255
   8c0bc:	1080020c 	andi	r2,r2,8
   8c0c0:	103fe726 	beq	r2,zero,8c060 <__alt_data_end+0xfffda060>
   8c0c4:	00000306 	br	8c0d4 <__svfscanf_r+0xd04>
		{
		  n++, fp->_r--, fp->_p++;
		  if (--width == 0)
		    break;
   8c0c8:	0001883a 	nop
   8c0cc:	00000106 	br	8c0d4 <__svfscanf_r+0xd04>
		  if (BufferEmpty)
		    break;
   8c0d0:	0001883a 	nop
		}
	      nread += n;
   8c0d4:	e0bf3817 	ldw	r2,-800(fp)
   8c0d8:	1505883a 	add	r2,r2,r20
   8c0dc:	e0bf3815 	stw	r2,-800(fp)
		}
	      *p = 0;
	      nread += p - p0;
	      nassigned++;
	    }
	  continue;
   8c0e0:	00037506 	br	8ceb8 <__svfscanf_r+0x1ae8>
		}
	      nread += n;
	    }
	  else
	    {
	      p0 = p = GET_ARG (N, ap, char *);
   8c0e4:	e0bff717 	ldw	r2,-36(fp)
   8c0e8:	10c00104 	addi	r3,r2,4
   8c0ec:	e0fff715 	stw	r3,-36(fp)
   8c0f0:	14c00017 	ldw	r19,0(r2)
   8c0f4:	9821883a 	mov	r16,r19
	      while (!isspace (*fp->_p))
   8c0f8:	00001206 	br	8c144 <__svfscanf_r+0xd74>
		{
		  fp->_r--;
   8c0fc:	88800117 	ldw	r2,4(r17)
   8c100:	10bfffc4 	addi	r2,r2,-1
   8c104:	88800115 	stw	r2,4(r17)
		  *p++ = *fp->_p++;
   8c108:	9807883a 	mov	r3,r19
   8c10c:	1cc00044 	addi	r19,r3,1
   8c110:	88800017 	ldw	r2,0(r17)
   8c114:	11000044 	addi	r4,r2,1
   8c118:	89000015 	stw	r4,0(r17)
   8c11c:	10800003 	ldbu	r2,0(r2)
   8c120:	18800005 	stb	r2,0(r3)
		  if (--width == 0)
   8c124:	94bfffc4 	addi	r18,r18,-1
   8c128:	90001126 	beq	r18,zero,8c170 <__svfscanf_r+0xda0>
		    break;
		  if (BufferEmpty)
   8c12c:	88800117 	ldw	r2,4(r17)
   8c130:	00800416 	blt	zero,r2,8c144 <__svfscanf_r+0xd74>
   8c134:	880b883a 	mov	r5,r17
   8c138:	e13ff517 	ldw	r4,-44(fp)
   8c13c:	008870c0 	call	8870c <__srefill_r>
   8c140:	10000d1e 	bne	r2,zero,8c178 <__svfscanf_r+0xda8>
	      nread += n;
	    }
	  else
	    {
	      p0 = p = GET_ARG (N, ap, char *);
	      while (!isspace (*fp->_p))
   8c144:	d0e00817 	ldw	r3,-32736(gp)
   8c148:	88800017 	ldw	r2,0(r17)
   8c14c:	10800003 	ldbu	r2,0(r2)
   8c150:	10803fcc 	andi	r2,r2,255
   8c154:	10800044 	addi	r2,r2,1
   8c158:	1885883a 	add	r2,r3,r2
   8c15c:	10800003 	ldbu	r2,0(r2)
   8c160:	10803fcc 	andi	r2,r2,255
   8c164:	1080020c 	andi	r2,r2,8
   8c168:	103fe426 	beq	r2,zero,8c0fc <__alt_data_end+0xfffda0fc>
   8c16c:	00000306 	br	8c17c <__svfscanf_r+0xdac>
		{
		  fp->_r--;
		  *p++ = *fp->_p++;
		  if (--width == 0)
		    break;
   8c170:	0001883a 	nop
   8c174:	00000106 	br	8c17c <__svfscanf_r+0xdac>
		  if (BufferEmpty)
		    break;
   8c178:	0001883a 	nop
		}
	      *p = 0;
   8c17c:	98000005 	stb	zero,0(r19)
	      nread += p - p0;
   8c180:	9807883a 	mov	r3,r19
   8c184:	8005883a 	mov	r2,r16
   8c188:	1885c83a 	sub	r2,r3,r2
   8c18c:	e0ff3817 	ldw	r3,-800(fp)
   8c190:	1885883a 	add	r2,r3,r2
   8c194:	e0bf3815 	stw	r2,-800(fp)
	      nassigned++;
   8c198:	e0bf3717 	ldw	r2,-804(fp)
   8c19c:	10800044 	addi	r2,r2,1
   8c1a0:	e0bf3715 	stw	r2,-804(fp)
	    }
	  continue;
   8c1a4:	00034406 	br	8ceb8 <__svfscanf_r+0x1ae8>

	case CT_INT:
	{
	  /* scan an integer as if by strtol/strtoul */
	  unsigned width_left = 0;
   8c1a8:	e03f3e15 	stw	zero,-776(fp)
	  int skips = 0;
   8c1ac:	e03f3f15 	stw	zero,-772(fp)
#ifdef hardway
	  if (width == 0 || width > sizeof (buf) - 1)
#else
	  /* size_t is unsigned, hence this optimisation */
	  if (width - 1 > sizeof (buf) - 2)
   8c1b0:	90bfffc4 	addi	r2,r18,-1
   8c1b4:	10805770 	cmpltui	r2,r2,349
   8c1b8:	1000031e 	bne	r2,zero,8c1c8 <__svfscanf_r+0xdf8>
#endif
	    {
	      width_left = width - (sizeof (buf) - 1);
   8c1bc:	90bfa8c4 	addi	r2,r18,-349
   8c1c0:	e0bf3e15 	stw	r2,-776(fp)
	      width = sizeof (buf) - 1;
   8c1c4:	04805744 	movi	r18,349
	    }
	  flags |= SIGNOK | NDIGITS | NZDIGITS | NNZDIGITS;
   8c1c8:	84036014 	ori	r16,r16,3456
	  for (p = buf; width; width--)
   8c1cc:	e4ff9904 	addi	r19,fp,-412
   8c1d0:	0000be06 	br	8c4cc <__svfscanf_r+0x10fc>
	    {
	      c = *fp->_p;
   8c1d4:	88800017 	ldw	r2,0(r17)
   8c1d8:	10800003 	ldbu	r2,0(r2)
   8c1dc:	15003fcc 	andi	r20,r2,255
	      /*
	       * Switch on the character; `goto ok' if we
	       * accept it as a part of number.
	       */
	      switch (c)
   8c1e0:	a0bff544 	addi	r2,r20,-43
   8c1e4:	10c013a8 	cmpgeui	r3,r2,78
   8c1e8:	1800ba1e 	bne	r3,zero,8c4d4 <__svfscanf_r+0x1104>
   8c1ec:	100690ba 	slli	r3,r2,2
   8c1f0:	00800274 	movhi	r2,9
   8c1f4:	10b08104 	addi	r2,r2,-15868
   8c1f8:	1885883a 	add	r2,r3,r2
   8c1fc:	10800017 	ldw	r2,0(r2)
   8c200:	1000683a 	jmp	r2
   8c204:	0008c428 	cmpgeui	zero,zero,8976
   8c208:	0008c4d4 	movui	zero,8979
   8c20c:	0008c428 	cmpgeui	zero,zero,8976
   8c210:	0008c4d4 	movui	zero,8979
   8c214:	0008c4d4 	movui	zero,8979
   8c218:	0008c33c 	xorhi	zero,zero,8972
   8c21c:	0008c39c 	xori	zero,zero,8974
   8c220:	0008c39c 	xori	zero,zero,8974
   8c224:	0008c39c 	xori	zero,zero,8974
   8c228:	0008c39c 	xori	zero,zero,8974
   8c22c:	0008c39c 	xori	zero,zero,8974
   8c230:	0008c39c 	xori	zero,zero,8974
   8c234:	0008c39c 	xori	zero,zero,8974
   8c238:	0008c3d0 	cmplti	zero,zero,8975
   8c23c:	0008c3d0 	cmplti	zero,zero,8975
   8c240:	0008c4d4 	movui	zero,8979
   8c244:	0008c4d4 	movui	zero,8979
   8c248:	0008c4d4 	movui	zero,8979
   8c24c:	0008c4d4 	movui	zero,8979
   8c250:	0008c4d4 	movui	zero,8979
   8c254:	0008c4d4 	movui	zero,8979
   8c258:	0008c4d4 	movui	zero,8979
   8c25c:	0008c410 	cmplti	zero,zero,8976
   8c260:	0008c410 	cmplti	zero,zero,8976
   8c264:	0008c410 	cmplti	zero,zero,8976
   8c268:	0008c410 	cmplti	zero,zero,8976
   8c26c:	0008c410 	cmplti	zero,zero,8976
   8c270:	0008c410 	cmplti	zero,zero,8976
   8c274:	0008c4d4 	movui	zero,8979
   8c278:	0008c4d4 	movui	zero,8979
   8c27c:	0008c4d4 	movui	zero,8979
   8c280:	0008c4d4 	movui	zero,8979
   8c284:	0008c4d4 	movui	zero,8979
   8c288:	0008c4d4 	movui	zero,8979
   8c28c:	0008c4d4 	movui	zero,8979
   8c290:	0008c4d4 	movui	zero,8979
   8c294:	0008c4d4 	movui	zero,8979
   8c298:	0008c4d4 	movui	zero,8979
   8c29c:	0008c4d4 	movui	zero,8979
   8c2a0:	0008c4d4 	movui	zero,8979
   8c2a4:	0008c4d4 	movui	zero,8979
   8c2a8:	0008c4d4 	movui	zero,8979
   8c2ac:	0008c4d4 	movui	zero,8979
   8c2b0:	0008c4d4 	movui	zero,8979
   8c2b4:	0008c4d4 	movui	zero,8979
   8c2b8:	0008c43c 	xorhi	zero,zero,8976
   8c2bc:	0008c4d4 	movui	zero,8979
   8c2c0:	0008c4d4 	movui	zero,8979
   8c2c4:	0008c4d4 	movui	zero,8979
   8c2c8:	0008c4d4 	movui	zero,8979
   8c2cc:	0008c4d4 	movui	zero,8979
   8c2d0:	0008c4d4 	movui	zero,8979
   8c2d4:	0008c4d4 	movui	zero,8979
   8c2d8:	0008c4d4 	movui	zero,8979
   8c2dc:	0008c410 	cmplti	zero,zero,8976
   8c2e0:	0008c410 	cmplti	zero,zero,8976
   8c2e4:	0008c410 	cmplti	zero,zero,8976
   8c2e8:	0008c410 	cmplti	zero,zero,8976
   8c2ec:	0008c410 	cmplti	zero,zero,8976
   8c2f0:	0008c410 	cmplti	zero,zero,8976
   8c2f4:	0008c4d4 	movui	zero,8979
   8c2f8:	0008c4d4 	movui	zero,8979
   8c2fc:	0008c4d4 	movui	zero,8979
   8c300:	0008c4d4 	movui	zero,8979
   8c304:	0008c4d4 	movui	zero,8979
   8c308:	0008c4d4 	movui	zero,8979
   8c30c:	0008c4d4 	movui	zero,8979
   8c310:	0008c4d4 	movui	zero,8979
   8c314:	0008c4d4 	movui	zero,8979
   8c318:	0008c4d4 	movui	zero,8979
   8c31c:	0008c4d4 	movui	zero,8979
   8c320:	0008c4d4 	movui	zero,8979
   8c324:	0008c4d4 	movui	zero,8979
   8c328:	0008c4d4 	movui	zero,8979
   8c32c:	0008c4d4 	movui	zero,8979
   8c330:	0008c4d4 	movui	zero,8979
   8c334:	0008c4d4 	movui	zero,8979
   8c338:	0008c43c 	xorhi	zero,zero,8976
		   * prefixing. Also, if we have not scanned zero digits
		   * before this, do not turn off prefixing (someone else
		   * will turn it off if we have scanned any nonzero digits).
		   */
		case '0':
		  if (! (flags & NNZDIGITS))
   8c33c:	8082000c 	andi	r2,r16,2048
   8c340:	10004f26 	beq	r2,zero,8c480 <__svfscanf_r+0x10b0>
		    goto ok;
		  if (base == 0)
   8c344:	e0bf3917 	ldw	r2,-796(fp)
   8c348:	1000031e 	bne	r2,zero,8c358 <__svfscanf_r+0xf88>
		    {
		      base = 8;
   8c34c:	00800204 	movi	r2,8
   8c350:	e0bf3915 	stw	r2,-796(fp)
		      flags |= PFXOK;
   8c354:	84008014 	ori	r16,r16,512
		    }
		  if (flags & NZDIGITS)
   8c358:	8081000c 	andi	r2,r16,1024
   8c35c:	10000326 	beq	r2,zero,8c36c <__svfscanf_r+0xf9c>
		    {
		      flags &= ~(SIGNOK | NZDIGITS | NDIGITS);
   8c360:	00be9fc4 	movi	r2,-1409
   8c364:	80a0703a 	and	r16,r16,r2
		      goto ok;
   8c368:	00004606 	br	8c484 <__svfscanf_r+0x10b4>
		    }
		  flags &= ~(SIGNOK | PFXOK | NDIGITS);
   8c36c:	00bf1fc4 	movi	r2,-897
   8c370:	80a0703a 	and	r16,r16,r2
		  if (width_left)
   8c374:	e0bf3e17 	ldw	r2,-776(fp)
   8c378:	10000426 	beq	r2,zero,8c38c <__svfscanf_r+0xfbc>
		    {
		      width_left--;
   8c37c:	e0bf3e17 	ldw	r2,-776(fp)
   8c380:	10bfffc4 	addi	r2,r2,-1
   8c384:	e0bf3e15 	stw	r2,-776(fp)
		      width++;
   8c388:	94800044 	addi	r18,r18,1
		    }
		  ++skips;
   8c38c:	e0bf3f17 	ldw	r2,-772(fp)
   8c390:	10800044 	addi	r2,r2,1
   8c394:	e0bf3f15 	stw	r2,-772(fp)
		  goto skip;
   8c398:	00003e06 	br	8c494 <__svfscanf_r+0x10c4>
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		  base = basefix[base];
   8c39c:	008002b4 	movhi	r2,10
   8c3a0:	1083c384 	addi	r2,r2,3854
   8c3a4:	e0ff3917 	ldw	r3,-796(fp)
   8c3a8:	18c7883a 	add	r3,r3,r3
   8c3ac:	10c5883a 	add	r2,r2,r3
   8c3b0:	1080000b 	ldhu	r2,0(r2)
   8c3b4:	10bfffcc 	andi	r2,r2,65535
   8c3b8:	10a0001c 	xori	r2,r2,32768
   8c3bc:	10a00004 	addi	r2,r2,-32768
   8c3c0:	e0bf3915 	stw	r2,-796(fp)
		  flags &= ~(SIGNOK | PFXOK | NDIGITS | NNZDIGITS);
   8c3c4:	00bd1fc4 	movi	r2,-2945
   8c3c8:	80a0703a 	and	r16,r16,r2
		  goto ok;
   8c3cc:	00002d06 	br	8c484 <__svfscanf_r+0x10b4>

		  /* digits 8 and 9 ok iff decimal or hex */
		case '8':
		case '9':
		  base = basefix[base];
   8c3d0:	008002b4 	movhi	r2,10
   8c3d4:	1083c384 	addi	r2,r2,3854
   8c3d8:	e0ff3917 	ldw	r3,-796(fp)
   8c3dc:	18c7883a 	add	r3,r3,r3
   8c3e0:	10c5883a 	add	r2,r2,r3
   8c3e4:	1080000b 	ldhu	r2,0(r2)
   8c3e8:	10bfffcc 	andi	r2,r2,65535
   8c3ec:	10a0001c 	xori	r2,r2,32768
   8c3f0:	10a00004 	addi	r2,r2,-32768
   8c3f4:	e0bf3915 	stw	r2,-796(fp)
		  if (base <= 8)
   8c3f8:	e0bf3917 	ldw	r2,-796(fp)
   8c3fc:	10800248 	cmpgei	r2,r2,9
   8c400:	10001726 	beq	r2,zero,8c460 <__svfscanf_r+0x1090>
		    break;	/* not legal here */
		  flags &= ~(SIGNOK | PFXOK | NDIGITS | NNZDIGITS);
   8c404:	00bd1fc4 	movi	r2,-2945
   8c408:	80a0703a 	and	r16,r16,r2
		  goto ok;
   8c40c:	00001d06 	br	8c484 <__svfscanf_r+0x10b4>
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		  /* no need to fix base here */
		  if (base <= 10)
   8c410:	e0bf3917 	ldw	r2,-796(fp)
   8c414:	108002c8 	cmpgei	r2,r2,11
   8c418:	10001326 	beq	r2,zero,8c468 <__svfscanf_r+0x1098>
		    break;	/* not legal here */
		  flags &= ~(SIGNOK | PFXOK | NDIGITS | NNZDIGITS);
   8c41c:	00bd1fc4 	movi	r2,-2945
   8c420:	80a0703a 	and	r16,r16,r2
		  goto ok;
   8c424:	00001706 	br	8c484 <__svfscanf_r+0x10b4>

		  /* sign ok only as first character */
		case '+':
		case '-':
		  if (flags & SIGNOK)
   8c428:	8080200c 	andi	r2,r16,128
   8c42c:	10001026 	beq	r2,zero,8c470 <__svfscanf_r+0x10a0>
		    {
		      flags &= ~SIGNOK;
   8c430:	00bfdfc4 	movi	r2,-129
   8c434:	80a0703a 	and	r16,r16,r2
		      goto ok;
   8c438:	00001206 	br	8c484 <__svfscanf_r+0x10b4>
		  break;

		  /* x ok iff flag still set & single 0 seen */
		case 'x':
		case 'X':
		  if ((flags & (PFXOK | NZDIGITS)) == PFXOK)
   8c43c:	8081800c 	andi	r2,r16,1536
   8c440:	10808018 	cmpnei	r2,r2,512
   8c444:	10000c1e 	bne	r2,zero,8c478 <__svfscanf_r+0x10a8>
		    {
		      base = 16;/* if %i */
   8c448:	00800404 	movi	r2,16
   8c44c:	e0bf3915 	stw	r2,-796(fp)
		      flags &= ~PFXOK;
   8c450:	00bf7fc4 	movi	r2,-513
   8c454:	80a0703a 	and	r16,r16,r2
		      /* We must reset the NZDIGITS and NDIGITS
			 flags that would have been unset by seeing
			 the zero that preceded the X or x.  */
		      flags |= NZDIGITS | NDIGITS;
   8c458:	84014014 	ori	r16,r16,1280
		      goto ok;
   8c45c:	00000906 	br	8c484 <__svfscanf_r+0x10b4>
		  /* digits 8 and 9 ok iff decimal or hex */
		case '8':
		case '9':
		  base = basefix[base];
		  if (base <= 8)
		    break;	/* not legal here */
   8c460:	0001883a 	nop
   8c464:	00001b06 	br	8c4d4 <__svfscanf_r+0x1104>
		case 'd':
		case 'e':
		case 'f':
		  /* no need to fix base here */
		  if (base <= 10)
		    break;	/* not legal here */
   8c468:	0001883a 	nop
   8c46c:	00001906 	br	8c4d4 <__svfscanf_r+0x1104>
		  if (flags & SIGNOK)
		    {
		      flags &= ~SIGNOK;
		      goto ok;
		    }
		  break;
   8c470:	0001883a 	nop
   8c474:	00001706 	br	8c4d4 <__svfscanf_r+0x1104>
			 flags that would have been unset by seeing
			 the zero that preceded the X or x.  */
		      flags |= NZDIGITS | NDIGITS;
		      goto ok;
		    }
		  break;
   8c478:	0001883a 	nop

	      /*
	       * If we got here, c is not a legal character
	       * for a number.  Stop accumulating digits.
	       */
	      break;
   8c47c:	00001506 	br	8c4d4 <__svfscanf_r+0x1104>
		   * before this, do not turn off prefixing (someone else
		   * will turn it off if we have scanned any nonzero digits).
		   */
		case '0':
		  if (! (flags & NNZDIGITS))
		    goto ok;
   8c480:	0001883a 	nop
	      break;
	    ok:
	      /*
	       * c is legal: store it and look at the next.
	       */
	      *p++ = c;
   8c484:	9805883a 	mov	r2,r19
   8c488:	14c00044 	addi	r19,r2,1
   8c48c:	a007883a 	mov	r3,r20
   8c490:	10c00005 	stb	r3,0(r2)
	    skip:
	      if (--fp->_r > 0)
   8c494:	88800117 	ldw	r2,4(r17)
   8c498:	10bfffc4 	addi	r2,r2,-1
   8c49c:	88800115 	stw	r2,4(r17)
   8c4a0:	88800117 	ldw	r2,4(r17)
   8c4a4:	0080040e 	bge	zero,r2,8c4b8 <__svfscanf_r+0x10e8>
		fp->_p++;
   8c4a8:	88800017 	ldw	r2,0(r17)
   8c4ac:	10800044 	addi	r2,r2,1
   8c4b0:	88800015 	stw	r2,0(r17)
   8c4b4:	00000406 	br	8c4c8 <__svfscanf_r+0x10f8>
	      else
	      if (__srefill_r (rptr, fp))
   8c4b8:	880b883a 	mov	r5,r17
   8c4bc:	e13ff517 	ldw	r4,-44(fp)
   8c4c0:	008870c0 	call	8870c <__srefill_r>
   8c4c4:	1000051e 	bne	r2,zero,8c4dc <__svfscanf_r+0x110c>
	    {
	      width_left = width - (sizeof (buf) - 1);
	      width = sizeof (buf) - 1;
	    }
	  flags |= SIGNOK | NDIGITS | NZDIGITS | NNZDIGITS;
	  for (p = buf; width; width--)
   8c4c8:	94bfffc4 	addi	r18,r18,-1
   8c4cc:	903f411e 	bne	r18,zero,8c1d4 <__alt_data_end+0xfffda1d4>
   8c4d0:	00000306 	br	8c4e0 <__svfscanf_r+0x1110>

	      /*
	       * If we got here, c is not a legal character
	       * for a number.  Stop accumulating digits.
	       */
	      break;
   8c4d4:	0001883a 	nop
   8c4d8:	00000106 	br	8c4e0 <__svfscanf_r+0x1110>
	    skip:
	      if (--fp->_r > 0)
		fp->_p++;
	      else
	      if (__srefill_r (rptr, fp))
		break;		/* EOF */
   8c4dc:	0001883a 	nop
	   * the x and treat it as [sign] '0'.
	   * Use of ungetc here and below assumes ASCII encoding; we are only
	   * pushing back 7-bit characters, so casting to unsigned char is
	   * not necessary.
	   */
	  if (flags & NDIGITS)
   8c4e0:	8080400c 	andi	r2,r16,256
   8c4e4:	10000d26 	beq	r2,zero,8c51c <__svfscanf_r+0x114c>
	    {
	      if (p > buf)
   8c4e8:	e0bf9904 	addi	r2,fp,-412
   8c4ec:	14c0092e 	bgeu	r2,r19,8c514 <__svfscanf_r+0x1144>
		_ungetc_r (rptr, *--p, fp); /* [-+xX] */
   8c4f0:	9cffffc4 	addi	r19,r19,-1
   8c4f4:	98800003 	ldbu	r2,0(r19)
   8c4f8:	10803fcc 	andi	r2,r2,255
   8c4fc:	1080201c 	xori	r2,r2,128
   8c500:	10bfe004 	addi	r2,r2,-128
   8c504:	880d883a 	mov	r6,r17
   8c508:	100b883a 	mov	r5,r2
   8c50c:	e13ff517 	ldw	r4,-44(fp)
   8c510:	00989cc0 	call	989cc <_ungetc_r>
	      if (p == buf)
   8c514:	e0bf9904 	addi	r2,fp,-412
   8c518:	98828a26 	beq	r19,r2,8cf44 <__svfscanf_r+0x1b74>
		goto match_failure;
	    }
	  if ((flags & SUPPRESS) == 0)
   8c51c:	8080040c 	andi	r2,r16,16
   8c520:	10005a1e 	bne	r2,zero,8c68c <__svfscanf_r+0x12bc>
	    {
	      u_long res;

	      *p = 0;
   8c524:	98000005 	stb	zero,0(r19)
	      res = (*ccfn) (rptr, buf, (char **) NULL, base);
   8c528:	e0ff9904 	addi	r3,fp,-412
   8c52c:	e0bf3b17 	ldw	r2,-788(fp)
   8c530:	e1ff3917 	ldw	r7,-796(fp)
   8c534:	000d883a 	mov	r6,zero
   8c538:	180b883a 	mov	r5,r3
   8c53c:	e13ff517 	ldw	r4,-44(fp)
   8c540:	103ee83a 	callr	r2
   8c544:	e0bf5015 	stw	r2,-704(fp)
	      if (flags & POINTER)
   8c548:	8080080c 	andi	r2,r16,32
   8c54c:	10000926 	beq	r2,zero,8c574 <__svfscanf_r+0x11a4>
		{
		  void **vp = GET_ARG (N, ap, void **);
   8c550:	e0bff717 	ldw	r2,-36(fp)
   8c554:	10c00104 	addi	r3,r2,4
   8c558:	e0fff715 	stw	r3,-36(fp)
   8c55c:	10800017 	ldw	r2,0(r2)
   8c560:	e0bf5115 	stw	r2,-700(fp)
		      resll = _strtoull_r (rptr, buf, (char **) NULL, base);
		      *vp = (void *) (uintptr_t) resll;
		    }
		  else
#endif /* !_NO_LONGLONG */
		    *vp = (void *) (uintptr_t) res;
   8c564:	e0ff5017 	ldw	r3,-704(fp)
   8c568:	e0bf5117 	ldw	r2,-700(fp)
   8c56c:	10c00015 	stw	r3,0(r2)
   8c570:	00004306 	br	8c680 <__svfscanf_r+0x12b0>
		{
		  cp = GET_ARG (N, ap, char *);
		  *cp = res;
		}
#endif
	      else if (flags & SHORT)
   8c574:	8080010c 	andi	r2,r16,4
   8c578:	10000a26 	beq	r2,zero,8c5a4 <__svfscanf_r+0x11d4>
		{
		  sp = GET_ARG (N, ap, short *);
   8c57c:	e0bff717 	ldw	r2,-36(fp)
   8c580:	10c00104 	addi	r3,r2,4
   8c584:	e0fff715 	stw	r3,-36(fp)
   8c588:	10800017 	ldw	r2,0(r2)
   8c58c:	e0bf4a15 	stw	r2,-728(fp)
		  *sp = res;
   8c590:	e0bf5017 	ldw	r2,-704(fp)
   8c594:	1007883a 	mov	r3,r2
   8c598:	e0bf4a17 	ldw	r2,-728(fp)
   8c59c:	10c0000d 	sth	r3,0(r2)
   8c5a0:	00003706 	br	8c680 <__svfscanf_r+0x12b0>
		}
	      else if (flags & LONG)
   8c5a4:	8080004c 	andi	r2,r16,1
   8c5a8:	10000926 	beq	r2,zero,8c5d0 <__svfscanf_r+0x1200>
		{
		  lp = GET_ARG (N, ap, long *);
   8c5ac:	e0bff717 	ldw	r2,-36(fp)
   8c5b0:	10c00104 	addi	r3,r2,4
   8c5b4:	e0fff715 	stw	r3,-36(fp)
   8c5b8:	10800017 	ldw	r2,0(r2)
   8c5bc:	e0bf4b15 	stw	r2,-724(fp)
		  *lp = res;
   8c5c0:	e0ff5017 	ldw	r3,-704(fp)
   8c5c4:	e0bf4b17 	ldw	r2,-724(fp)
   8c5c8:	10c00015 	stw	r3,0(r2)
   8c5cc:	00002c06 	br	8c680 <__svfscanf_r+0x12b0>
		}
#ifndef _NO_LONGLONG
	      else if (flags & LONGDBL)
   8c5d0:	8080008c 	andi	r2,r16,2
   8c5d4:	10002226 	beq	r2,zero,8c660 <__svfscanf_r+0x1290>
		{
		  u_long_long resll;
		  if (ccfn == _strtoul_r)
   8c5d8:	e0ff3b17 	ldw	r3,-788(fp)
   8c5dc:	00800274 	movhi	r2,9
   8c5e0:	1097a104 	addi	r2,r2,24196
   8c5e4:	1880091e 	bne	r3,r2,8c60c <__svfscanf_r+0x123c>
		    resll = _strtoull_r (rptr, buf, (char **) NULL, base);
   8c5e8:	e0bf9904 	addi	r2,fp,-412
   8c5ec:	e1ff3917 	ldw	r7,-796(fp)
   8c5f0:	000d883a 	mov	r6,zero
   8c5f4:	100b883a 	mov	r5,r2
   8c5f8:	e13ff517 	ldw	r4,-44(fp)
   8c5fc:	00961700 	call	96170 <_strtoull_r>
   8c600:	e0bf4015 	stw	r2,-768(fp)
   8c604:	e0ff4115 	stw	r3,-764(fp)
   8c608:	00000a06 	br	8c634 <__svfscanf_r+0x1264>
		  else
		    resll = _strtoll_r (rptr, buf, (char **) NULL, base);
   8c60c:	e0bf9904 	addi	r2,fp,-412
   8c610:	e1ff3917 	ldw	r7,-796(fp)
   8c614:	000d883a 	mov	r6,zero
   8c618:	100b883a 	mov	r5,r2
   8c61c:	e13ff517 	ldw	r4,-44(fp)
   8c620:	0095ac40 	call	95ac4 <_strtoll_r>
   8c624:	1009883a 	mov	r4,r2
   8c628:	180b883a 	mov	r5,r3
   8c62c:	e13f4015 	stw	r4,-768(fp)
   8c630:	e17f4115 	stw	r5,-764(fp)
		  llp = GET_ARG (N, ap, long long*);
   8c634:	e0bff717 	ldw	r2,-36(fp)
   8c638:	10c00104 	addi	r3,r2,4
   8c63c:	e0fff715 	stw	r3,-36(fp)
   8c640:	10800017 	ldw	r2,0(r2)
   8c644:	e0bf4c15 	stw	r2,-720(fp)
		  *llp = resll;
   8c648:	e0bf4017 	ldw	r2,-768(fp)
   8c64c:	e0ff4117 	ldw	r3,-764(fp)
   8c650:	e13f4c17 	ldw	r4,-720(fp)
   8c654:	20800015 	stw	r2,0(r4)
   8c658:	20c00115 	stw	r3,4(r4)
   8c65c:	00000806 	br	8c680 <__svfscanf_r+0x12b0>
		}
#endif
	      else
		{
		  ip = GET_ARG (N, ap, int *);
   8c660:	e0bff717 	ldw	r2,-36(fp)
   8c664:	10c00104 	addi	r3,r2,4
   8c668:	e0fff715 	stw	r3,-36(fp)
   8c66c:	10800017 	ldw	r2,0(r2)
   8c670:	e0bf4d15 	stw	r2,-716(fp)
		  *ip = res;
   8c674:	e0ff5017 	ldw	r3,-704(fp)
   8c678:	e0bf4d17 	ldw	r2,-716(fp)
   8c67c:	10c00015 	stw	r3,0(r2)
		}
	      nassigned++;
   8c680:	e0bf3717 	ldw	r2,-804(fp)
   8c684:	10800044 	addi	r2,r2,1
   8c688:	e0bf3715 	stw	r2,-804(fp)
	    }
	  nread += p - buf + skips;
   8c68c:	9807883a 	mov	r3,r19
   8c690:	e0bf9904 	addi	r2,fp,-412
   8c694:	1887c83a 	sub	r3,r3,r2
   8c698:	e0bf3f17 	ldw	r2,-772(fp)
   8c69c:	1885883a 	add	r2,r3,r2
   8c6a0:	e0ff3817 	ldw	r3,-800(fp)
   8c6a4:	1885883a 	add	r2,r3,r2
   8c6a8:	e0bf3815 	stw	r2,-800(fp)
	  break;
   8c6ac:	00020506 	br	8cec4 <__svfscanf_r+0x1af4>
	  /* scan a floating point number as if by strtod */
	  /* This code used to assume that the number of digits is reasonable.
	     However, ANSI / ISO C makes no such stipulation; we have to get
	     exact results even when there is an unreasonable amount of
	     leading zeroes.  */
	  long leading_zeroes = 0;
   8c6b0:	e03f4215 	stw	zero,-760(fp)
	  long zeroes, exp_adjust;
	  char *exp_start = NULL;
   8c6b4:	e03f4515 	stw	zero,-748(fp)
	  unsigned width_left = 0;
   8c6b8:	e03f4615 	stw	zero,-744(fp)
	  char nancount = 0;
   8c6bc:	e03f4705 	stb	zero,-740(fp)
	  char infcount = 0;
   8c6c0:	e03f4745 	stb	zero,-739(fp)
	  const char *decpt = _localeconv_r (rptr)->decimal_point;
   8c6c4:	e13ff517 	ldw	r4,-44(fp)
   8c6c8:	009011c0 	call	9011c <_localeconv_r>
   8c6cc:	10800017 	ldw	r2,0(r2)
   8c6d0:	e0bf5215 	stw	r2,-696(fp)
#endif
#ifdef hardway
	  if (width == 0 || width > sizeof (buf) - 1)
#else
	  /* size_t is unsigned, hence this optimisation */
	  if (width - 1 > sizeof (buf) - 2)
   8c6d4:	90bfffc4 	addi	r2,r18,-1
   8c6d8:	10805770 	cmpltui	r2,r2,349
   8c6dc:	1000031e 	bne	r2,zero,8c6ec <__svfscanf_r+0x131c>
#endif
	    {
	      width_left = width - (sizeof (buf) - 1);
   8c6e0:	90bfa8c4 	addi	r2,r18,-349
   8c6e4:	e0bf4615 	stw	r2,-744(fp)
	      width = sizeof (buf) - 1;
   8c6e8:	04805744 	movi	r18,349
	    }
	  flags |= SIGNOK | NDIGITS | DPTOK | EXPOK;
   8c6ec:	8401e014 	ori	r16,r16,1920
	  zeroes = 0;
   8c6f0:	e03f4315 	stw	zero,-756(fp)
	  exp_adjust = 0;
   8c6f4:	e03f4415 	stw	zero,-752(fp)
	  for (p = buf; width; )
   8c6f8:	e4ff9904 	addi	r19,fp,-412
   8c6fc:	00010906 	br	8cb24 <__svfscanf_r+0x1754>
	    {
	      c = *fp->_p;
   8c700:	88800017 	ldw	r2,0(r17)
   8c704:	10800003 	ldbu	r2,0(r2)
   8c708:	15003fcc 	andi	r20,r2,255
	      /*
	       * This code mimicks the integer conversion
	       * code, but is much simpler.
	       */
	      switch (c)
   8c70c:	a0bff544 	addi	r2,r20,-43
   8c710:	10c013e8 	cmpgeui	r3,r2,79
   8c714:	1800cc1e 	bne	r3,zero,8ca48 <__svfscanf_r+0x1678>
   8c718:	100690ba 	slli	r3,r2,2
   8c71c:	00800274 	movhi	r2,9
   8c720:	10b1cc04 	addi	r2,r2,-14544
   8c724:	1885883a 	add	r2,r3,r2
   8c728:	10800017 	ldw	r2,0(r2)
   8c72c:	1000683a 	jmp	r2
   8c730:	0008c8c0 	call	8c8c <__alt_mem_MemoriaDados+0x8c8c>
   8c734:	0008ca48 	cmpgei	zero,zero,9001
   8c738:	0008c8c0 	call	8c8c <__alt_mem_MemoriaDados+0x8c8c>
   8c73c:	0008ca48 	cmpgei	zero,zero,9001
   8c740:	0008ca48 	cmpgei	zero,zero,9001
   8c744:	0008c86c 	andhi	zero,zero,8993
   8c748:	0008c8a4 	muli	zero,zero,8994
   8c74c:	0008c8a4 	muli	zero,zero,8994
   8c750:	0008c8a4 	muli	zero,zero,8994
   8c754:	0008c8a4 	muli	zero,zero,8994
   8c758:	0008c8a4 	muli	zero,zero,8994
   8c75c:	0008c8a4 	muli	zero,zero,8994
   8c760:	0008c8a4 	muli	zero,zero,8994
   8c764:	0008c8a4 	muli	zero,zero,8994
   8c768:	0008c8a4 	muli	zero,zero,8994
   8c76c:	0008ca48 	cmpgei	zero,zero,9001
   8c770:	0008ca48 	cmpgei	zero,zero,9001
   8c774:	0008ca48 	cmpgei	zero,zero,9001
   8c778:	0008ca48 	cmpgei	zero,zero,9001
   8c77c:	0008ca48 	cmpgei	zero,zero,9001
   8c780:	0008ca48 	cmpgei	zero,zero,9001
   8c784:	0008ca48 	cmpgei	zero,zero,9001
   8c788:	0008c944 	movi	zero,8997
   8c78c:	0008ca48 	cmpgei	zero,zero,9001
   8c790:	0008ca48 	cmpgei	zero,zero,9001
   8c794:	0008ca48 	cmpgei	zero,zero,9001
   8c798:	0008c9fc 	xorhi	zero,zero,8999
   8c79c:	0008c9b4 	movhi	zero,8998
   8c7a0:	0008ca48 	cmpgei	zero,zero,9001
   8c7a4:	0008ca48 	cmpgei	zero,zero,9001
   8c7a8:	0008c95c 	xori	zero,zero,8997
   8c7ac:	0008ca48 	cmpgei	zero,zero,9001
   8c7b0:	0008ca48 	cmpgei	zero,zero,9001
   8c7b4:	0008ca48 	cmpgei	zero,zero,9001
   8c7b8:	0008ca48 	cmpgei	zero,zero,9001
   8c7bc:	0008c8d4 	movui	zero,8995
   8c7c0:	0008ca48 	cmpgei	zero,zero,9001
   8c7c4:	0008ca48 	cmpgei	zero,zero,9001
   8c7c8:	0008ca48 	cmpgei	zero,zero,9001
   8c7cc:	0008ca48 	cmpgei	zero,zero,9001
   8c7d0:	0008ca48 	cmpgei	zero,zero,9001
   8c7d4:	0008c9cc 	andi	zero,zero,8999
   8c7d8:	0008ca48 	cmpgei	zero,zero,9001
   8c7dc:	0008ca48 	cmpgei	zero,zero,9001
   8c7e0:	0008ca48 	cmpgei	zero,zero,9001
   8c7e4:	0008ca48 	cmpgei	zero,zero,9001
   8c7e8:	0008c9e4 	muli	zero,zero,8999
   8c7ec:	0008ca48 	cmpgei	zero,zero,9001
   8c7f0:	0008ca48 	cmpgei	zero,zero,9001
   8c7f4:	0008ca48 	cmpgei	zero,zero,9001
   8c7f8:	0008ca48 	cmpgei	zero,zero,9001
   8c7fc:	0008ca48 	cmpgei	zero,zero,9001
   8c800:	0008ca48 	cmpgei	zero,zero,9001
   8c804:	0008ca48 	cmpgei	zero,zero,9001
   8c808:	0008c944 	movi	zero,8997
   8c80c:	0008ca48 	cmpgei	zero,zero,9001
   8c810:	0008ca48 	cmpgei	zero,zero,9001
   8c814:	0008ca48 	cmpgei	zero,zero,9001
   8c818:	0008c9fc 	xorhi	zero,zero,8999
   8c81c:	0008c9b4 	movhi	zero,8998
   8c820:	0008ca48 	cmpgei	zero,zero,9001
   8c824:	0008ca48 	cmpgei	zero,zero,9001
   8c828:	0008c95c 	xori	zero,zero,8997
   8c82c:	0008ca48 	cmpgei	zero,zero,9001
   8c830:	0008ca48 	cmpgei	zero,zero,9001
   8c834:	0008ca48 	cmpgei	zero,zero,9001
   8c838:	0008ca48 	cmpgei	zero,zero,9001
   8c83c:	0008c8d4 	movui	zero,8995
   8c840:	0008ca48 	cmpgei	zero,zero,9001
   8c844:	0008ca48 	cmpgei	zero,zero,9001
   8c848:	0008ca48 	cmpgei	zero,zero,9001
   8c84c:	0008ca48 	cmpgei	zero,zero,9001
   8c850:	0008ca48 	cmpgei	zero,zero,9001
   8c854:	0008c9cc 	andi	zero,zero,8999
   8c858:	0008ca48 	cmpgei	zero,zero,9001
   8c85c:	0008ca48 	cmpgei	zero,zero,9001
   8c860:	0008ca48 	cmpgei	zero,zero,9001
   8c864:	0008ca48 	cmpgei	zero,zero,9001
   8c868:	0008c9e4 	muli	zero,zero,8999
		{
		case '0':
		  if (flags & NDIGITS)
   8c86c:	8080400c 	andi	r2,r16,256
   8c870:	10000c26 	beq	r2,zero,8c8a4 <__svfscanf_r+0x14d4>
		    {
		      flags &= ~SIGNOK;
   8c874:	00bfdfc4 	movi	r2,-129
   8c878:	80a0703a 	and	r16,r16,r2
		      zeroes++;
   8c87c:	e0bf4317 	ldw	r2,-756(fp)
   8c880:	10800044 	addi	r2,r2,1
   8c884:	e0bf4315 	stw	r2,-756(fp)
		      if (width_left)
   8c888:	e0bf4617 	ldw	r2,-744(fp)
   8c88c:	10009326 	beq	r2,zero,8cadc <__svfscanf_r+0x170c>
			{
			  width_left--;
   8c890:	e0bf4617 	ldw	r2,-744(fp)
   8c894:	10bfffc4 	addi	r2,r2,-1
   8c898:	e0bf4615 	stw	r2,-744(fp)
			  width++;
   8c89c:	94800044 	addi	r18,r18,1
			}
		      goto fskip;
   8c8a0:	00008e06 	br	8cadc <__svfscanf_r+0x170c>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		  if (nancount + infcount == 0)
   8c8a4:	e0ff4707 	ldb	r3,-740(fp)
   8c8a8:	e0bf4747 	ldb	r2,-739(fp)
   8c8ac:	1885883a 	add	r2,r3,r2
   8c8b0:	1000711e 	bne	r2,zero,8ca78 <__svfscanf_r+0x16a8>
		    {
		      flags &= ~(SIGNOK | NDIGITS);
   8c8b4:	00bf9fc4 	movi	r2,-385
   8c8b8:	80a0703a 	and	r16,r16,r2
		      goto fok;
   8c8bc:	00008206 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;

		case '+':
		case '-':
		  if (flags & SIGNOK)
   8c8c0:	8080200c 	andi	r2,r16,128
   8c8c4:	10006e26 	beq	r2,zero,8ca80 <__svfscanf_r+0x16b0>
		    {
		      flags &= ~SIGNOK;
   8c8c8:	00bfdfc4 	movi	r2,-129
   8c8cc:	80a0703a 	and	r16,r16,r2
		      goto fok;
   8c8d0:	00007d06 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'n':
		case 'N':
		  if (nancount == 0 && zeroes == 0
   8c8d4:	e0bf4707 	ldb	r2,-740(fp)
   8c8d8:	10000a1e 	bne	r2,zero,8c904 <__svfscanf_r+0x1534>
   8c8dc:	e0bf4317 	ldw	r2,-756(fp)
   8c8e0:	1000081e 	bne	r2,zero,8c904 <__svfscanf_r+0x1534>
		      && (flags & (NDIGITS | DPTOK | EXPOK)) ==
   8c8e4:	8081c00c 	andi	r2,r16,1792
   8c8e8:	1081c018 	cmpnei	r2,r2,1792
   8c8ec:	1000051e 	bne	r2,zero,8c904 <__svfscanf_r+0x1534>
				  (NDIGITS | DPTOK | EXPOK))
		    {
		      flags &= ~(SIGNOK | DPTOK | EXPOK | NDIGITS);
   8c8f0:	00be1fc4 	movi	r2,-1921
   8c8f4:	80a0703a 	and	r16,r16,r2
		      nancount = 1;
   8c8f8:	00800044 	movi	r2,1
   8c8fc:	e0bf4705 	stb	r2,-740(fp)
		      goto fok;
   8c900:	00007106 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  if (nancount == 2)
   8c904:	e0bf4707 	ldb	r2,-740(fp)
   8c908:	10800098 	cmpnei	r2,r2,2
   8c90c:	1000031e 	bne	r2,zero,8c91c <__svfscanf_r+0x154c>
		    {
		      nancount = 3;
   8c910:	008000c4 	movi	r2,3
   8c914:	e0bf4705 	stb	r2,-740(fp)
		      goto fok;
   8c918:	00006b06 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  if (infcount == 1 || infcount == 4)
   8c91c:	e0bf4747 	ldb	r2,-739(fp)
   8c920:	10800060 	cmpeqi	r2,r2,1
   8c924:	1000031e 	bne	r2,zero,8c934 <__svfscanf_r+0x1564>
   8c928:	e0bf4747 	ldb	r2,-739(fp)
   8c92c:	10800118 	cmpnei	r2,r2,4
   8c930:	1000551e 	bne	r2,zero,8ca88 <__svfscanf_r+0x16b8>
		    {
		      infcount++;
   8c934:	e0bf4743 	ldbu	r2,-739(fp)
   8c938:	10800044 	addi	r2,r2,1
   8c93c:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c940:	00006106 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'a':
		case 'A':
		  if (nancount == 1)
   8c944:	e0bf4707 	ldb	r2,-740(fp)
   8c948:	10800058 	cmpnei	r2,r2,1
   8c94c:	1000501e 	bne	r2,zero,8ca90 <__svfscanf_r+0x16c0>
		    {
		      nancount = 2;
   8c950:	00800084 	movi	r2,2
   8c954:	e0bf4705 	stb	r2,-740(fp)
		      goto fok;
   8c958:	00005b06 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'i':
		case 'I':
		  if (infcount == 0 && zeroes == 0
   8c95c:	e0bf4747 	ldb	r2,-739(fp)
   8c960:	10000a1e 	bne	r2,zero,8c98c <__svfscanf_r+0x15bc>
   8c964:	e0bf4317 	ldw	r2,-756(fp)
   8c968:	1000081e 	bne	r2,zero,8c98c <__svfscanf_r+0x15bc>
		      && (flags & (NDIGITS | DPTOK | EXPOK)) ==
   8c96c:	8081c00c 	andi	r2,r16,1792
   8c970:	1081c018 	cmpnei	r2,r2,1792
   8c974:	1000051e 	bne	r2,zero,8c98c <__svfscanf_r+0x15bc>
				  (NDIGITS | DPTOK | EXPOK))
		    {
		      flags &= ~(SIGNOK | DPTOK | EXPOK | NDIGITS);
   8c978:	00be1fc4 	movi	r2,-1921
   8c97c:	80a0703a 	and	r16,r16,r2
		      infcount = 1;
   8c980:	00800044 	movi	r2,1
   8c984:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c988:	00004f06 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  if (infcount == 3 || infcount == 5)
   8c98c:	e0bf4747 	ldb	r2,-739(fp)
   8c990:	108000e0 	cmpeqi	r2,r2,3
   8c994:	1000031e 	bne	r2,zero,8c9a4 <__svfscanf_r+0x15d4>
   8c998:	e0bf4747 	ldb	r2,-739(fp)
   8c99c:	10800158 	cmpnei	r2,r2,5
   8c9a0:	10003d1e 	bne	r2,zero,8ca98 <__svfscanf_r+0x16c8>
		    {
		      infcount++;
   8c9a4:	e0bf4743 	ldbu	r2,-739(fp)
   8c9a8:	10800044 	addi	r2,r2,1
   8c9ac:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c9b0:	00004506 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'f':
		case 'F':
		  if (infcount == 2)
   8c9b4:	e0bf4747 	ldb	r2,-739(fp)
   8c9b8:	10800098 	cmpnei	r2,r2,2
   8c9bc:	1000381e 	bne	r2,zero,8caa0 <__svfscanf_r+0x16d0>
		    {
		      infcount = 3;
   8c9c0:	008000c4 	movi	r2,3
   8c9c4:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c9c8:	00003f06 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 't':
		case 'T':
		  if (infcount == 6)
   8c9cc:	e0bf4747 	ldb	r2,-739(fp)
   8c9d0:	10800198 	cmpnei	r2,r2,6
   8c9d4:	1000341e 	bne	r2,zero,8caa8 <__svfscanf_r+0x16d8>
		    {
		      infcount = 7;
   8c9d8:	008001c4 	movi	r2,7
   8c9dc:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c9e0:	00003906 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'y':
		case 'Y':
		  if (infcount == 7)
   8c9e4:	e0bf4747 	ldb	r2,-739(fp)
   8c9e8:	108001d8 	cmpnei	r2,r2,7
   8c9ec:	1000301e 	bne	r2,zero,8cab0 <__svfscanf_r+0x16e0>
		    {
		      infcount = 8;
   8c9f0:	00800204 	movi	r2,8
   8c9f4:	e0bf4745 	stb	r2,-739(fp)
		      goto fok;
   8c9f8:	00003306 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		case 'e':
		case 'E':
		  /* no exponent without some digits */
		  if ((flags & (NDIGITS | EXPOK)) == EXPOK
   8c9fc:	8081400c 	andi	r2,r16,1280
   8ca00:	10810020 	cmpeqi	r2,r2,1024
   8ca04:	1000041e 	bne	r2,zero,8ca18 <__svfscanf_r+0x1648>
		      || ((flags & EXPOK) && zeroes))
   8ca08:	8081000c 	andi	r2,r16,1024
   8ca0c:	10002a26 	beq	r2,zero,8cab8 <__svfscanf_r+0x16e8>
   8ca10:	e0bf4317 	ldw	r2,-756(fp)
   8ca14:	10002826 	beq	r2,zero,8cab8 <__svfscanf_r+0x16e8>
		    {
		      if (! (flags & DPTOK))
   8ca18:	8080800c 	andi	r2,r16,512
   8ca1c:	1000051e 	bne	r2,zero,8ca34 <__svfscanf_r+0x1664>
			{
			  exp_adjust = zeroes - leading_zeroes;
   8ca20:	e0ff4317 	ldw	r3,-756(fp)
   8ca24:	e0bf4217 	ldw	r2,-760(fp)
   8ca28:	1885c83a 	sub	r2,r3,r2
   8ca2c:	e0bf4415 	stw	r2,-752(fp)
			  exp_start = p;
   8ca30:	e4ff4515 	stw	r19,-748(fp)
			}
		      flags =
			(flags & ~(EXPOK | DPTOK)) |
			SIGNOK | NDIGITS;
   8ca34:	00be1fc4 	movi	r2,-1921
   8ca38:	8084703a 	and	r2,r16,r2
		      if (! (flags & DPTOK))
			{
			  exp_adjust = zeroes - leading_zeroes;
			  exp_start = p;
			}
		      flags =
   8ca3c:	14006014 	ori	r16,r2,384
			(flags & ~(EXPOK | DPTOK)) |
			SIGNOK | NDIGITS;
		      zeroes = 0;
   8ca40:	e03f4315 	stw	zero,-756(fp)
		      goto fok;
   8ca44:	00002006 	br	8cac8 <__svfscanf_r+0x16f8>
		    }
		  break;
		default:
#ifndef _MB_CAPABLE
		  if ((unsigned char) c == (unsigned char) decpt[0]
   8ca48:	a0c03fcc 	andi	r3,r20,255
   8ca4c:	e0bf5217 	ldw	r2,-696(fp)
   8ca50:	10800003 	ldbu	r2,0(r2)
   8ca54:	10803fcc 	andi	r2,r2,255
   8ca58:	1880191e 	bne	r3,r2,8cac0 <__svfscanf_r+0x16f0>
		      && (flags & DPTOK))
   8ca5c:	8080800c 	andi	r2,r16,512
   8ca60:	10001726 	beq	r2,zero,8cac0 <__svfscanf_r+0x16f0>
		    {
		      flags &= ~(SIGNOK | DPTOK);
   8ca64:	00bf5fc4 	movi	r2,-641
   8ca68:	80a0703a 	and	r16,r16,r2
		      leading_zeroes = zeroes;
   8ca6c:	e0bf4317 	ldw	r2,-756(fp)
   8ca70:	e0bf4215 	stw	r2,-760(fp)
		      goto fok;
   8ca74:	00001406 	br	8cac8 <__svfscanf_r+0x16f8>
		  if (nancount + infcount == 0)
		    {
		      flags &= ~(SIGNOK | NDIGITS);
		      goto fok;
		    }
		  break;
   8ca78:	0001883a 	nop
   8ca7c:	00002c06 	br	8cb30 <__svfscanf_r+0x1760>
		  if (flags & SIGNOK)
		    {
		      flags &= ~SIGNOK;
		      goto fok;
		    }
		  break;
   8ca80:	0001883a 	nop
   8ca84:	00002a06 	br	8cb30 <__svfscanf_r+0x1760>
		  if (infcount == 1 || infcount == 4)
		    {
		      infcount++;
		      goto fok;
		    }
		  break;
   8ca88:	0001883a 	nop
   8ca8c:	00002806 	br	8cb30 <__svfscanf_r+0x1760>
		  if (nancount == 1)
		    {
		      nancount = 2;
		      goto fok;
		    }
		  break;
   8ca90:	0001883a 	nop
   8ca94:	00002606 	br	8cb30 <__svfscanf_r+0x1760>
		  if (infcount == 3 || infcount == 5)
		    {
		      infcount++;
		      goto fok;
		    }
		  break;
   8ca98:	0001883a 	nop
   8ca9c:	00002406 	br	8cb30 <__svfscanf_r+0x1760>
		  if (infcount == 2)
		    {
		      infcount = 3;
		      goto fok;
		    }
		  break;
   8caa0:	0001883a 	nop
   8caa4:	00002206 	br	8cb30 <__svfscanf_r+0x1760>
		  if (infcount == 6)
		    {
		      infcount = 7;
		      goto fok;
		    }
		  break;
   8caa8:	0001883a 	nop
   8caac:	00002006 	br	8cb30 <__svfscanf_r+0x1760>
		  if (infcount == 7)
		    {
		      infcount = 8;
		      goto fok;
		    }
		  break;
   8cab0:	0001883a 	nop
   8cab4:	00001e06 	br	8cb30 <__svfscanf_r+0x1760>
			(flags & ~(EXPOK | DPTOK)) |
			SIGNOK | NDIGITS;
		      zeroes = 0;
		      goto fok;
		    }
		  break;
   8cab8:	0001883a 	nop
   8cabc:	00001c06 	br	8cb30 <__svfscanf_r+0x1760>
		    {
		      flags &= ~(SIGNOK | DPTOK);
		      leading_zeroes = zeroes;
		      goto fok;
		    }
		  break;
   8cac0:	0001883a 	nop
			}
		    }
		  break;
#endif
		}
	      break;
   8cac4:	00001a06 	br	8cb30 <__svfscanf_r+0x1760>
	    fok:
	      *p++ = c;
   8cac8:	9805883a 	mov	r2,r19
   8cacc:	14c00044 	addi	r19,r2,1
   8cad0:	a007883a 	mov	r3,r20
   8cad4:	10c00005 	stb	r3,0(r2)
   8cad8:	00000106 	br	8cae0 <__svfscanf_r+0x1710>
		      if (width_left)
			{
			  width_left--;
			  width++;
			}
		      goto fskip;
   8cadc:	0001883a 	nop
		}
	      break;
	    fok:
	      *p++ = c;
	    fskip:
	      width--;
   8cae0:	94bfffc4 	addi	r18,r18,-1
	      ++nread;
   8cae4:	e0bf3817 	ldw	r2,-800(fp)
   8cae8:	10800044 	addi	r2,r2,1
   8caec:	e0bf3815 	stw	r2,-800(fp)
	      if (--fp->_r > 0)
   8caf0:	88800117 	ldw	r2,4(r17)
   8caf4:	10bfffc4 	addi	r2,r2,-1
   8caf8:	88800115 	stw	r2,4(r17)
   8cafc:	88800117 	ldw	r2,4(r17)
   8cb00:	0080040e 	bge	zero,r2,8cb14 <__svfscanf_r+0x1744>
		fp->_p++;
   8cb04:	88800017 	ldw	r2,0(r17)
   8cb08:	10800044 	addi	r2,r2,1
   8cb0c:	88800015 	stw	r2,0(r17)
   8cb10:	00000406 	br	8cb24 <__svfscanf_r+0x1754>
	      else
	      if (__srefill_r (rptr, fp))
   8cb14:	880b883a 	mov	r5,r17
   8cb18:	e13ff517 	ldw	r4,-44(fp)
   8cb1c:	008870c0 	call	8870c <__srefill_r>
   8cb20:	1000021e 	bne	r2,zero,8cb2c <__svfscanf_r+0x175c>
	      width = sizeof (buf) - 1;
	    }
	  flags |= SIGNOK | NDIGITS | DPTOK | EXPOK;
	  zeroes = 0;
	  exp_adjust = 0;
	  for (p = buf; width; )
   8cb24:	903ef61e 	bne	r18,zero,8c700 <__alt_data_end+0xfffda700>
   8cb28:	00000106 	br	8cb30 <__svfscanf_r+0x1760>
	      ++nread;
	      if (--fp->_r > 0)
		fp->_p++;
	      else
	      if (__srefill_r (rptr, fp))
		break;		/* EOF */
   8cb2c:	0001883a 	nop
	    }
	  if (zeroes)
   8cb30:	e0bf4317 	ldw	r2,-756(fp)
   8cb34:	10000226 	beq	r2,zero,8cb40 <__svfscanf_r+0x1770>
	    flags &= ~NDIGITS;
   8cb38:	00bfbfc4 	movi	r2,-257
   8cb3c:	80a0703a 	and	r16,r16,r2
	     check here if we have an outstanding nancount, and if so
	     put back the chars we did swallow and treat as a failed
	     match.

	     FIXME - we still don't handle NAN([0xdigits]).  */
	  if (nancount - 1U < 2U) /* nancount && nancount < 3 */
   8cb40:	e0bf4707 	ldb	r2,-740(fp)
   8cb44:	10bfffc4 	addi	r2,r2,-1
   8cb48:	108000a8 	cmpgeui	r2,r2,2
   8cb4c:	1000101e 	bne	r2,zero,8cb90 <__svfscanf_r+0x17c0>
	    {
	      /* Newlib's ungetc works even if we called __srefill in
		 the middle of a partial parse, but POSIX does not
		 guarantee that in all implementations of ungetc.  */
	      while (p > buf)
   8cb50:	00000c06 	br	8cb84 <__svfscanf_r+0x17b4>
		{
		  _ungetc_r (rptr, *--p, fp); /* [-+nNaA] */
   8cb54:	9cffffc4 	addi	r19,r19,-1
   8cb58:	98800003 	ldbu	r2,0(r19)
   8cb5c:	10803fcc 	andi	r2,r2,255
   8cb60:	1080201c 	xori	r2,r2,128
   8cb64:	10bfe004 	addi	r2,r2,-128
   8cb68:	880d883a 	mov	r6,r17
   8cb6c:	100b883a 	mov	r5,r2
   8cb70:	e13ff517 	ldw	r4,-44(fp)
   8cb74:	00989cc0 	call	989cc <_ungetc_r>
		  --nread;
   8cb78:	e0bf3817 	ldw	r2,-800(fp)
   8cb7c:	10bfffc4 	addi	r2,r2,-1
   8cb80:	e0bf3815 	stw	r2,-800(fp)
	  if (nancount - 1U < 2U) /* nancount && nancount < 3 */
	    {
	      /* Newlib's ungetc works even if we called __srefill in
		 the middle of a partial parse, but POSIX does not
		 guarantee that in all implementations of ungetc.  */
	      while (p > buf)
   8cb84:	e0bf9904 	addi	r2,fp,-412
   8cb88:	14fff236 	bltu	r2,r19,8cb54 <__alt_data_end+0xfffdab54>
		{
		  _ungetc_r (rptr, *--p, fp); /* [-+nNaA] */
		  --nread;
		}
	      goto match_failure;
   8cb8c:	0000ee06 	br	8cf48 <__svfscanf_r+0x1b78>
	    }
	  /* Likewise for 'inf' and 'infinity'.	 But be careful that
	     'infinite' consumes only 3 characters, leaving the stream
	     at the second 'i'.	 */
	  if (infcount - 1U < 7U) /* infcount && infcount < 8 */
   8cb90:	e0bf4747 	ldb	r2,-739(fp)
   8cb94:	10bfffc4 	addi	r2,r2,-1
   8cb98:	108001e8 	cmpgeui	r2,r2,7
   8cb9c:	1000291e 	bne	r2,zero,8cc44 <__svfscanf_r+0x1874>
	    {
	      if (infcount >= 3) /* valid 'inf', but short of 'infinity' */
   8cba0:	e0bf4747 	ldb	r2,-739(fp)
   8cba4:	108000d0 	cmplti	r2,r2,3
   8cba8:	1000231e 	bne	r2,zero,8cc38 <__svfscanf_r+0x1868>
		while (infcount-- > 3)
   8cbac:	00000c06 	br	8cbe0 <__svfscanf_r+0x1810>
		  {
		    _ungetc_r (rptr, *--p, fp); /* [iInNtT] */
   8cbb0:	9cffffc4 	addi	r19,r19,-1
   8cbb4:	98800003 	ldbu	r2,0(r19)
   8cbb8:	10803fcc 	andi	r2,r2,255
   8cbbc:	1080201c 	xori	r2,r2,128
   8cbc0:	10bfe004 	addi	r2,r2,-128
   8cbc4:	880d883a 	mov	r6,r17
   8cbc8:	100b883a 	mov	r5,r2
   8cbcc:	e13ff517 	ldw	r4,-44(fp)
   8cbd0:	00989cc0 	call	989cc <_ungetc_r>
		    --nread;
   8cbd4:	e0bf3817 	ldw	r2,-800(fp)
   8cbd8:	10bfffc4 	addi	r2,r2,-1
   8cbdc:	e0bf3815 	stw	r2,-800(fp)
	     'infinite' consumes only 3 characters, leaving the stream
	     at the second 'i'.	 */
	  if (infcount - 1U < 7U) /* infcount && infcount < 8 */
	    {
	      if (infcount >= 3) /* valid 'inf', but short of 'infinity' */
		while (infcount-- > 3)
   8cbe0:	e0bf4743 	ldbu	r2,-739(fp)
   8cbe4:	1007883a 	mov	r3,r2
   8cbe8:	18ffffc4 	addi	r3,r3,-1
   8cbec:	e0ff4745 	stb	r3,-739(fp)
   8cbf0:	10803fcc 	andi	r2,r2,255
   8cbf4:	1080201c 	xori	r2,r2,128
   8cbf8:	10bfe004 	addi	r2,r2,-128
   8cbfc:	10800108 	cmpgei	r2,r2,4
   8cc00:	103feb1e 	bne	r2,zero,8cbb0 <__alt_data_end+0xfffdabb0>
   8cc04:	00000f06 	br	8cc44 <__svfscanf_r+0x1874>
		  }
	      else
		{
		  while (p > buf)
		    {
		      _ungetc_r (rptr, *--p, fp); /* [-+iInN] */
   8cc08:	9cffffc4 	addi	r19,r19,-1
   8cc0c:	98800003 	ldbu	r2,0(r19)
   8cc10:	10803fcc 	andi	r2,r2,255
   8cc14:	1080201c 	xori	r2,r2,128
   8cc18:	10bfe004 	addi	r2,r2,-128
   8cc1c:	880d883a 	mov	r6,r17
   8cc20:	100b883a 	mov	r5,r2
   8cc24:	e13ff517 	ldw	r4,-44(fp)
   8cc28:	00989cc0 	call	989cc <_ungetc_r>
		      --nread;
   8cc2c:	e0bf3817 	ldw	r2,-800(fp)
   8cc30:	10bfffc4 	addi	r2,r2,-1
   8cc34:	e0bf3815 	stw	r2,-800(fp)
		    _ungetc_r (rptr, *--p, fp); /* [iInNtT] */
		    --nread;
		  }
	      else
		{
		  while (p > buf)
   8cc38:	e0bf9904 	addi	r2,fp,-412
   8cc3c:	14fff236 	bltu	r2,r19,8cc08 <__alt_data_end+0xfffdac08>
		    {
		      _ungetc_r (rptr, *--p, fp); /* [-+iInN] */
		      --nread;
		    }
		  goto match_failure;
   8cc40:	0000c106 	br	8cf48 <__svfscanf_r+0x1b78>
	  /*
	   * If no digits, might be missing exponent digits
	   * (just give back the exponent) or might be missing
	   * regular digits, but had sign and/or decimal point.
	   */
	  if (flags & NDIGITS)
   8cc44:	8080400c 	andi	r2,r16,256
   8cc48:	10002e26 	beq	r2,zero,8cd04 <__svfscanf_r+0x1934>
	    {
	      if (flags & EXPOK)
   8cc4c:	8081000c 	andi	r2,r16,1024
   8cc50:	10001026 	beq	r2,zero,8cc94 <__svfscanf_r+0x18c4>
		{
		  /* no digits at all */
		  while (p > buf)
   8cc54:	00000c06 	br	8cc88 <__svfscanf_r+0x18b8>
		    {
		      _ungetc_r (rptr, *--p, fp); /* [-+.] */
   8cc58:	9cffffc4 	addi	r19,r19,-1
   8cc5c:	98800003 	ldbu	r2,0(r19)
   8cc60:	10803fcc 	andi	r2,r2,255
   8cc64:	1080201c 	xori	r2,r2,128
   8cc68:	10bfe004 	addi	r2,r2,-128
   8cc6c:	880d883a 	mov	r6,r17
   8cc70:	100b883a 	mov	r5,r2
   8cc74:	e13ff517 	ldw	r4,-44(fp)
   8cc78:	00989cc0 	call	989cc <_ungetc_r>
		      --nread;
   8cc7c:	e0bf3817 	ldw	r2,-800(fp)
   8cc80:	10bfffc4 	addi	r2,r2,-1
   8cc84:	e0bf3815 	stw	r2,-800(fp)
	  if (flags & NDIGITS)
	    {
	      if (flags & EXPOK)
		{
		  /* no digits at all */
		  while (p > buf)
   8cc88:	e0bf9904 	addi	r2,fp,-412
   8cc8c:	14fff236 	bltu	r2,r19,8cc58 <__alt_data_end+0xfffdac58>
		    {
		      _ungetc_r (rptr, *--p, fp); /* [-+.] */
		      --nread;
		    }
		  goto match_failure;
   8cc90:	0000ad06 	br	8cf48 <__svfscanf_r+0x1b78>
		}
	      /* just a bad exponent (e and maybe sign) */
	      c = *--p;
   8cc94:	9cffffc4 	addi	r19,r19,-1
   8cc98:	98800003 	ldbu	r2,0(r19)
   8cc9c:	15003fcc 	andi	r20,r2,255
   8cca0:	a500201c 	xori	r20,r20,128
   8cca4:	a53fe004 	addi	r20,r20,-128
	      --nread;
   8cca8:	e0bf3817 	ldw	r2,-800(fp)
   8ccac:	10bfffc4 	addi	r2,r2,-1
   8ccb0:	e0bf3815 	stw	r2,-800(fp)
	      if (c != 'e' && c != 'E')
   8ccb4:	a0801960 	cmpeqi	r2,r20,101
   8ccb8:	10000e1e 	bne	r2,zero,8ccf4 <__svfscanf_r+0x1924>
   8ccbc:	a0801160 	cmpeqi	r2,r20,69
   8ccc0:	10000c1e 	bne	r2,zero,8ccf4 <__svfscanf_r+0x1924>
		{
		  _ungetc_r (rptr, c, fp); /* [-+] */
   8ccc4:	880d883a 	mov	r6,r17
   8ccc8:	a00b883a 	mov	r5,r20
   8cccc:	e13ff517 	ldw	r4,-44(fp)
   8ccd0:	00989cc0 	call	989cc <_ungetc_r>
		  c = *--p;
   8ccd4:	9cffffc4 	addi	r19,r19,-1
   8ccd8:	98800003 	ldbu	r2,0(r19)
   8ccdc:	15003fcc 	andi	r20,r2,255
   8cce0:	a500201c 	xori	r20,r20,128
   8cce4:	a53fe004 	addi	r20,r20,-128
		  --nread;
   8cce8:	e0bf3817 	ldw	r2,-800(fp)
   8ccec:	10bfffc4 	addi	r2,r2,-1
   8ccf0:	e0bf3815 	stw	r2,-800(fp)
		}
	      _ungetc_r (rptr, c, fp); /* [eE] */
   8ccf4:	880d883a 	mov	r6,r17
   8ccf8:	a00b883a 	mov	r5,r20
   8ccfc:	e13ff517 	ldw	r4,-44(fp)
   8cd00:	00989cc0 	call	989cc <_ungetc_r>
	    }
	  if ((flags & SUPPRESS) == 0)
   8cd04:	8080040c 	andi	r2,r16,16
   8cd08:	10006d1e 	bne	r2,zero,8cec0 <__svfscanf_r+0x1af0>
	    {
	      double res = 0;
   8cd0c:	e03f5315 	stw	zero,-692(fp)
   8cd10:	e03f5415 	stw	zero,-688(fp)
#define QUAD_RES res;
#else  /* !_NO_LONG_DBL */
	      long double qres = 0;
#define QUAD_RES qres;
#endif /* !_NO_LONG_DBL */
	      long new_exp = 0;
   8cd14:	e03f4815 	stw	zero,-736(fp)

	      *p = 0;
   8cd18:	98000005 	stb	zero,0(r19)
	      if ((flags & (DPTOK | EXPOK)) == EXPOK)
   8cd1c:	8081800c 	andi	r2,r16,1536
   8cd20:	10810018 	cmpnei	r2,r2,1024
   8cd24:	1000091e 	bne	r2,zero,8cd4c <__svfscanf_r+0x197c>
		{
		  exp_adjust = zeroes - leading_zeroes;
   8cd28:	e0ff4317 	ldw	r3,-756(fp)
   8cd2c:	e0bf4217 	ldw	r2,-760(fp)
   8cd30:	1885c83a 	sub	r2,r3,r2
   8cd34:	e0bf4415 	stw	r2,-752(fp)
		  new_exp = -exp_adjust;
   8cd38:	e0bf4417 	ldw	r2,-752(fp)
   8cd3c:	0085c83a 	sub	r2,zero,r2
   8cd40:	e0bf4815 	stw	r2,-736(fp)
		  exp_start = p;
   8cd44:	e4ff4515 	stw	r19,-748(fp)
   8cd48:	00000d06 	br	8cd80 <__svfscanf_r+0x19b0>
		}
	      else if (exp_adjust)
   8cd4c:	e0bf4417 	ldw	r2,-752(fp)
   8cd50:	10000b26 	beq	r2,zero,8cd80 <__svfscanf_r+0x19b0>
                new_exp = _strtol_r (rptr, (exp_start + 1), NULL, 10) - exp_adjust;
   8cd54:	e0bf4517 	ldw	r2,-748(fp)
   8cd58:	10800044 	addi	r2,r2,1
   8cd5c:	01c00284 	movi	r7,10
   8cd60:	000d883a 	mov	r6,zero
   8cd64:	100b883a 	mov	r5,r2
   8cd68:	e13ff517 	ldw	r4,-44(fp)
   8cd6c:	00957b00 	call	957b0 <_strtol_r>
   8cd70:	1007883a 	mov	r3,r2
   8cd74:	e0bf4417 	ldw	r2,-752(fp)
   8cd78:	1885c83a 	sub	r2,r3,r2
   8cd7c:	e0bf4815 	stw	r2,-736(fp)
	      if (exp_adjust)
   8cd80:	e0bf4417 	ldw	r2,-752(fp)
   8cd84:	10000c26 	beq	r2,zero,8cdb8 <__svfscanf_r+0x19e8>
		{

		  /* If there might not be enough space for the new exponent,
		     truncate some trailing digits to make room.  */
		  if (exp_start >= buf + sizeof (buf) - MAX_LONG_LEN)
   8cd88:	e0bf9904 	addi	r2,fp,-412
   8cd8c:	108054c4 	addi	r2,r2,339
   8cd90:	e0ff4517 	ldw	r3,-748(fp)
   8cd94:	18800336 	bltu	r3,r2,8cda4 <__svfscanf_r+0x19d4>
		    exp_start = buf + sizeof (buf) - MAX_LONG_LEN - 1;
   8cd98:	e0bf9904 	addi	r2,fp,-412
   8cd9c:	10805484 	addi	r2,r2,338
   8cda0:	e0bf4515 	stw	r2,-748(fp)
                 sprintf (exp_start, "e%ld", new_exp);
   8cda4:	e1bf4817 	ldw	r6,-736(fp)
   8cda8:	014002b4 	movhi	r5,10
   8cdac:	2943c204 	addi	r5,r5,3848
   8cdb0:	e13f4517 	ldw	r4,-748(fp)
   8cdb4:	009343c0 	call	9343c <sprintf>
#ifndef _NO_LONGDBL /* !_NO_LONGDBL */
	      if (flags & LONGDBL)
		qres = _strtold (buf, NULL);
	      else
#endif
	        res = _strtod_r (rptr, buf, NULL);
   8cdb8:	e0bf9904 	addi	r2,fp,-412
   8cdbc:	000d883a 	mov	r6,zero
   8cdc0:	100b883a 	mov	r5,r2
   8cdc4:	e13ff517 	ldw	r4,-44(fp)
   8cdc8:	00939240 	call	93924 <_strtod_r>
   8cdcc:	e0bf5315 	stw	r2,-692(fp)
   8cdd0:	e0ff5415 	stw	r3,-688(fp)

	      if (flags & LONG)
   8cdd4:	8080004c 	andi	r2,r16,1
   8cdd8:	10000b26 	beq	r2,zero,8ce08 <__svfscanf_r+0x1a38>
		{
		  dp = GET_ARG (N, ap, double *);
   8cddc:	e0bff717 	ldw	r2,-36(fp)
   8cde0:	10c00104 	addi	r3,r2,4
   8cde4:	e0fff715 	stw	r3,-36(fp)
   8cde8:	10800017 	ldw	r2,0(r2)
   8cdec:	e0bf5515 	stw	r2,-684(fp)
		  *dp = res;
   8cdf0:	e0bf5517 	ldw	r2,-684(fp)
   8cdf4:	e0ff5317 	ldw	r3,-692(fp)
   8cdf8:	10c00015 	stw	r3,0(r2)
   8cdfc:	e0ff5417 	ldw	r3,-688(fp)
   8ce00:	10c00115 	stw	r3,4(r2)
   8ce04:	00002206 	br	8ce90 <__svfscanf_r+0x1ac0>
		}
	      else if (flags & LONGDBL)
   8ce08:	8080008c 	andi	r2,r16,2
   8ce0c:	10000b26 	beq	r2,zero,8ce3c <__svfscanf_r+0x1a6c>
		{
		  ldp = GET_ARG (N, ap, _LONG_DOUBLE *);
   8ce10:	e0bff717 	ldw	r2,-36(fp)
   8ce14:	10c00104 	addi	r3,r2,4
   8ce18:	e0fff715 	stw	r3,-36(fp)
   8ce1c:	10800017 	ldw	r2,0(r2)
   8ce20:	e0bf5615 	stw	r2,-680(fp)
		  *ldp = QUAD_RES;
   8ce24:	e0bf5617 	ldw	r2,-680(fp)
   8ce28:	e0ff5317 	ldw	r3,-692(fp)
   8ce2c:	10c00015 	stw	r3,0(r2)
   8ce30:	e0ff5417 	ldw	r3,-688(fp)
   8ce34:	10c00115 	stw	r3,4(r2)
   8ce38:	00001506 	br	8ce90 <__svfscanf_r+0x1ac0>
		}
	      else
		{
		  flp = GET_ARG (N, ap, float *);
   8ce3c:	e0bff717 	ldw	r2,-36(fp)
   8ce40:	10c00104 	addi	r3,r2,4
   8ce44:	e0fff715 	stw	r3,-36(fp)
   8ce48:	10800017 	ldw	r2,0(r2)
   8ce4c:	e0bf5715 	stw	r2,-676(fp)
		  if (isnan (res))
   8ce50:	e13f5317 	ldw	r4,-692(fp)
   8ce54:	e17f5417 	ldw	r5,-688(fp)
   8ce58:	009313c0 	call	9313c <__fpclassifyd>
   8ce5c:	1000061e 	bne	r2,zero,8ce78 <__svfscanf_r+0x1aa8>
		    *flp = nanf (NULL);
   8ce60:	0009883a 	mov	r4,zero
   8ce64:	009336c0 	call	9336c <nanf>
   8ce68:	1007883a 	mov	r3,r2
   8ce6c:	e0bf5717 	ldw	r2,-676(fp)
   8ce70:	10c00015 	stw	r3,0(r2)
   8ce74:	00000606 	br	8ce90 <__svfscanf_r+0x1ac0>
		  else
		    *flp = res;
   8ce78:	e13f5317 	ldw	r4,-692(fp)
   8ce7c:	e17f5417 	ldw	r5,-688(fp)
   8ce80:	0084be80 	call	84be8 <__truncdfsf2>
   8ce84:	1007883a 	mov	r3,r2
   8ce88:	e0bf5717 	ldw	r2,-676(fp)
   8ce8c:	10c00015 	stw	r3,0(r2)
		}
	      nassigned++;
   8ce90:	e0bf3717 	ldw	r2,-804(fp)
   8ce94:	10800044 	addi	r2,r2,1
   8ce98:	e0bf3715 	stw	r2,-804(fp)
	    }
	  break;
   8ce9c:	00000806 	br	8cec0 <__svfscanf_r+0x1af0>
	    {
	      if (BufferEmpty || !isspace (*fp->_p))
		break;
	      nread++, fp->_r--, fp->_p++;
	    }
	  continue;
   8cea0:	0001883a 	nop
   8cea4:	00396c06 	br	8b458 <__alt_data_end+0xfffd9458>
	  base = 16;
	  break;

	case 'n':
	  if (flags & SUPPRESS)	/* ??? */
	    continue;
   8cea8:	0001883a 	nop
   8ceac:	00396a06 	br	8b458 <__alt_data_end+0xfffd9458>
	      if (r == 0)
		goto input_failure;
	      nread += r;
	      nassigned++;
	    }
	  break;
   8ceb0:	0001883a 	nop
   8ceb4:	00396806 	br	8b458 <__alt_data_end+0xfffd9458>
		}
	      *p = 0;
	      nread += p - p0;
	      nassigned++;
	    }
	  continue;
   8ceb8:	0001883a 	nop
   8cebc:	00396606 	br	8b458 <__alt_data_end+0xfffd9458>
		  else
		    *flp = res;
		}
	      nassigned++;
	    }
	  break;
   8cec0:	0001883a 	nop
	}
#endif /* FLOATING_POINT */
	}
    }
   8cec4:	00396406 	br	8b458 <__alt_data_end+0xfffd9458>
	literal:
          lptr = fmt - nbytes;
          for (n = 0; n < nbytes; ++n)
            {
	      if (BufferEmpty)
	        goto input_failure;
   8cec8:	0001883a 	nop
   8cecc:	00000d06 	br	8cf04 <__svfscanf_r+0x1b34>

      /*
       * We have a conversion that requires input.
       */
      if (BufferEmpty)
	goto input_failure;
   8ced0:	0001883a 	nop
   8ced4:	00000b06 	br	8cf04 <__svfscanf_r+0x1b34>
	      nread++;
	      if (--fp->_r > 0)
		fp->_p++;
	      else
	      if (__srefill_r (rptr, fp))
		goto input_failure;
   8ced8:	0001883a 	nop
   8cedc:	00000906 	br	8cf04 <__svfscanf_r+0x1b34>
                wcp = NULL;
              n = 0;
              while (width != 0)
                {
                  if (n == MB_CUR_MAX)
                    goto input_failure;
   8cee0:	0001883a 	nop
   8cee4:	00000706 	br	8cf04 <__svfscanf_r+0x1b34>
                  buf[n++] = *fp->_p;
                  fp->_r -= 1;
                  fp->_p += 1;
                  if ((mbslen = _mbrtowc_r (rptr, wcp, buf, n, &state))
                                                         == (size_t)-1)
                    goto input_failure; /* Invalid sequence */
   8cee8:	0001883a 	nop
   8ceec:	00000506 	br	8cf04 <__svfscanf_r+0x1b34>
	  else
	    {
	      size_t r = _fread_r (rptr, (_PTR) GET_ARG (N, ap, char *), 1, width, fp);

	      if (r == 0)
		goto input_failure;
   8cef0:	0001883a 	nop
   8cef4:	00000306 	br	8cf04 <__svfscanf_r+0x1b34>
                wcp = &wc;
              n = 0;
              while (!isspace (*fp->_p) && width != 0)
                {
                  if (n == MB_CUR_MAX)
                    goto input_failure;
   8cef8:	0001883a 	nop
   8cefc:	00000106 	br	8cf04 <__svfscanf_r+0x1b34>
                  buf[n++] = *fp->_p;
                  fp->_r -= 1;
                  fp->_p += 1;
                  if ((mbslen = _mbrtowc_r (rptr, wcp, buf, n, &state))
                                                        == (size_t)-1)
                    goto input_failure;
   8cf00:	0001883a 	nop
  /* On read failure, return EOF failure regardless of matches; errno
     should have been set prior to here.  On EOF failure (including
     invalid format string), return EOF if no matches yet, else number
     of matches made prior to failure.  */
  _newlib_flockfile_exit (fp);
  return nassigned && !(fp->_flags & __SERR) ? nassigned : EOF;
   8cf04:	e0bf3717 	ldw	r2,-804(fp)
   8cf08:	10000626 	beq	r2,zero,8cf24 <__svfscanf_r+0x1b54>
   8cf0c:	8880030b 	ldhu	r2,12(r17)
   8cf10:	10bfffcc 	andi	r2,r2,65535
   8cf14:	1080100c 	andi	r2,r2,64
   8cf18:	1000021e 	bne	r2,zero,8cf24 <__svfscanf_r+0x1b54>
   8cf1c:	e0bf3717 	ldw	r2,-804(fp)
   8cf20:	00000a06 	br	8cf4c <__svfscanf_r+0x1b7c>
   8cf24:	00bfffc4 	movi	r2,-1
   8cf28:	00000806 	br	8cf4c <__svfscanf_r+0x1b7c>
      }
#endif
      fmt += nbytes;

      if (wc == 0)
	goto all_done;
   8cf2c:	0001883a 	nop
   8cf30:	00000506 	br	8cf48 <__svfscanf_r+0x1b78>
          for (n = 0; n < nbytes; ++n)
            {
	      if (BufferEmpty)
	        goto input_failure;
	      if (*fp->_p != *lptr)
	        goto match_failure;
   8cf34:	0001883a 	nop
   8cf38:	00000306 	br	8cf48 <__svfscanf_r+0x1b78>
		      break;
		    }
		}
	      n = p - p0;
	      if (n == 0)
		goto match_failure;
   8cf3c:	0001883a 	nop
   8cf40:	00000106 	br	8cf48 <__svfscanf_r+0x1b78>
	  if (flags & NDIGITS)
	    {
	      if (p > buf)
		_ungetc_r (rptr, *--p, fp); /* [-+xX] */
	      if (p == buf)
		goto match_failure;
   8cf44:	0001883a 	nop
  return nassigned && !(fp->_flags & __SERR) ? nassigned : EOF;
match_failure:
all_done:
  /* Return number of matches, which can be 0 on match failure.  */
  _newlib_flockfile_end (fp);
  return nassigned;
   8cf48:	e0bf3717 	ldw	r2,-804(fp)
}
   8cf4c:	e6fff804 	addi	sp,fp,-32
   8cf50:	dfc00917 	ldw	ra,36(sp)
   8cf54:	df000817 	ldw	fp,32(sp)
   8cf58:	ddc00717 	ldw	r23,28(sp)
   8cf5c:	dd800617 	ldw	r22,24(sp)
   8cf60:	dd400517 	ldw	r21,20(sp)
   8cf64:	dd000417 	ldw	r20,16(sp)
   8cf68:	dcc00317 	ldw	r19,12(sp)
   8cf6c:	dc800217 	ldw	r18,8(sp)
   8cf70:	dc400117 	ldw	r17,4(sp)
   8cf74:	dc000017 	ldw	r16,0(sp)
   8cf78:	dec00a04 	addi	sp,sp,40
   8cf7c:	f800283a 	ret

0008cf80 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
   8cf80:	defff904 	addi	sp,sp,-28
   8cf84:	dfc00615 	stw	ra,24(sp)
   8cf88:	df000515 	stw	fp,20(sp)
   8cf8c:	dc800415 	stw	r18,16(sp)
   8cf90:	dc400315 	stw	r17,12(sp)
   8cf94:	dc000215 	stw	r16,8(sp)
   8cf98:	df000504 	addi	fp,sp,20
   8cf9c:	e13ffc15 	stw	r4,-16(fp)
   8cfa0:	2825883a 	mov	r18,r5
   8cfa4:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
   8cfa8:	e0bffc17 	ldw	r2,-16(fp)
   8cfac:	e0bffb15 	stw	r2,-20(fp)
   8cfb0:	e0bffb17 	ldw	r2,-20(fp)
   8cfb4:	10000526 	beq	r2,zero,8cfcc <__swbuf_r+0x4c>
   8cfb8:	e0bffb17 	ldw	r2,-20(fp)
   8cfbc:	10800e17 	ldw	r2,56(r2)
   8cfc0:	1000021e 	bne	r2,zero,8cfcc <__swbuf_r+0x4c>
   8cfc4:	e13ffb17 	ldw	r4,-20(fp)
   8cfc8:	008573c0 	call	8573c <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
   8cfcc:	80800617 	ldw	r2,24(r16)
   8cfd0:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
   8cfd4:	8080030b 	ldhu	r2,12(r16)
   8cfd8:	10bfffcc 	andi	r2,r2,65535
   8cfdc:	1080020c 	andi	r2,r2,8
   8cfe0:	10000226 	beq	r2,zero,8cfec <__swbuf_r+0x6c>
   8cfe4:	80800417 	ldw	r2,16(r16)
   8cfe8:	1000061e 	bne	r2,zero,8d004 <__swbuf_r+0x84>
   8cfec:	800b883a 	mov	r5,r16
   8cff0:	e13ffc17 	ldw	r4,-16(fp)
   8cff4:	008d1980 	call	8d198 <__swsetup_r>
   8cff8:	10000226 	beq	r2,zero,8d004 <__swbuf_r+0x84>
    return EOF;
   8cffc:	00bfffc4 	movi	r2,-1
   8d000:	00003106 	br	8d0c8 <__swbuf_r+0x148>
  c = (unsigned char) c;
   8d004:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
   8d008:	8080030b 	ldhu	r2,12(r16)
   8d00c:	10bfffcc 	andi	r2,r2,65535
   8d010:	1088000c 	andi	r2,r2,8192
   8d014:	1000071e 	bne	r2,zero,8d034 <__swbuf_r+0xb4>
   8d018:	8080030b 	ldhu	r2,12(r16)
   8d01c:	10880014 	ori	r2,r2,8192
   8d020:	8080030d 	sth	r2,12(r16)
   8d024:	80c01917 	ldw	r3,100(r16)
   8d028:	00b7ffc4 	movi	r2,-8193
   8d02c:	1884703a 	and	r2,r3,r2
   8d030:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
   8d034:	80800017 	ldw	r2,0(r16)
   8d038:	1007883a 	mov	r3,r2
   8d03c:	80800417 	ldw	r2,16(r16)
   8d040:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
   8d044:	80800517 	ldw	r2,20(r16)
   8d048:	88800716 	blt	r17,r2,8d068 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
   8d04c:	800b883a 	mov	r5,r16
   8d050:	e13ffc17 	ldw	r4,-16(fp)
   8d054:	00852a40 	call	852a4 <_fflush_r>
   8d058:	10000226 	beq	r2,zero,8d064 <__swbuf_r+0xe4>
	return EOF;
   8d05c:	00bfffc4 	movi	r2,-1
   8d060:	00001906 	br	8d0c8 <__swbuf_r+0x148>
      n = 0;
   8d064:	0023883a 	mov	r17,zero
    }
  fp->_w--;
   8d068:	80800217 	ldw	r2,8(r16)
   8d06c:	10bfffc4 	addi	r2,r2,-1
   8d070:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
   8d074:	80800017 	ldw	r2,0(r16)
   8d078:	10c00044 	addi	r3,r2,1
   8d07c:	80c00015 	stw	r3,0(r16)
   8d080:	9007883a 	mov	r3,r18
   8d084:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
   8d088:	8c400044 	addi	r17,r17,1
   8d08c:	80800517 	ldw	r2,20(r16)
   8d090:	88800626 	beq	r17,r2,8d0ac <__swbuf_r+0x12c>
   8d094:	8080030b 	ldhu	r2,12(r16)
   8d098:	10bfffcc 	andi	r2,r2,65535
   8d09c:	1080004c 	andi	r2,r2,1
   8d0a0:	10000826 	beq	r2,zero,8d0c4 <__swbuf_r+0x144>
   8d0a4:	90800298 	cmpnei	r2,r18,10
   8d0a8:	1000061e 	bne	r2,zero,8d0c4 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
   8d0ac:	800b883a 	mov	r5,r16
   8d0b0:	e13ffc17 	ldw	r4,-16(fp)
   8d0b4:	00852a40 	call	852a4 <_fflush_r>
   8d0b8:	10000226 	beq	r2,zero,8d0c4 <__swbuf_r+0x144>
      return EOF;
   8d0bc:	00bfffc4 	movi	r2,-1
   8d0c0:	00000106 	br	8d0c8 <__swbuf_r+0x148>
  return c;
   8d0c4:	9005883a 	mov	r2,r18
}
   8d0c8:	e6fffd04 	addi	sp,fp,-12
   8d0cc:	dfc00417 	ldw	ra,16(sp)
   8d0d0:	df000317 	ldw	fp,12(sp)
   8d0d4:	dc800217 	ldw	r18,8(sp)
   8d0d8:	dc400117 	ldw	r17,4(sp)
   8d0dc:	dc000017 	ldw	r16,0(sp)
   8d0e0:	dec00504 	addi	sp,sp,20
   8d0e4:	f800283a 	ret

0008d0e8 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
   8d0e8:	defffe04 	addi	sp,sp,-8
   8d0ec:	dfc00115 	stw	ra,4(sp)
   8d0f0:	df000015 	stw	fp,0(sp)
   8d0f4:	d839883a 	mov	fp,sp
   8d0f8:	2007883a 	mov	r3,r4
   8d0fc:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
   8d100:	d0a00417 	ldw	r2,-32752(gp)
   8d104:	200d883a 	mov	r6,r4
   8d108:	180b883a 	mov	r5,r3
   8d10c:	1009883a 	mov	r4,r2
   8d110:	008cf800 	call	8cf80 <__swbuf_r>
}
   8d114:	e037883a 	mov	sp,fp
   8d118:	dfc00117 	ldw	ra,4(sp)
   8d11c:	df000017 	ldw	fp,0(sp)
   8d120:	dec00204 	addi	sp,sp,8
   8d124:	f800283a 	ret

0008d128 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
   8d128:	defff904 	addi	sp,sp,-28
   8d12c:	dfc00615 	stw	ra,24(sp)
   8d130:	df000515 	stw	fp,20(sp)
   8d134:	df000504 	addi	fp,sp,20
   8d138:	e13ffc15 	stw	r4,-16(fp)
   8d13c:	e17ffd15 	stw	r5,-12(fp)
   8d140:	e1bffe15 	stw	r6,-8(fp)
   8d144:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   8d148:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
   8d14c:	e1bfff17 	ldw	r6,-4(fp)
   8d150:	e17ffe17 	ldw	r5,-8(fp)
   8d154:	e13ffd17 	ldw	r4,-12(fp)
   8d158:	009ea640 	call	9ea64 <write>
   8d15c:	e0bffb15 	stw	r2,-20(fp)
   8d160:	e0bffb17 	ldw	r2,-20(fp)
   8d164:	10bfffd8 	cmpnei	r2,r2,-1
   8d168:	1000051e 	bne	r2,zero,8d180 <_write_r+0x58>
   8d16c:	d0a70f17 	ldw	r2,-25540(gp)
   8d170:	10000326 	beq	r2,zero,8d180 <_write_r+0x58>
    ptr->_errno = errno;
   8d174:	d0e70f17 	ldw	r3,-25540(gp)
   8d178:	e0bffc17 	ldw	r2,-16(fp)
   8d17c:	10c00015 	stw	r3,0(r2)
  return ret;
   8d180:	e0bffb17 	ldw	r2,-20(fp)
}
   8d184:	e037883a 	mov	sp,fp
   8d188:	dfc00117 	ldw	ra,4(sp)
   8d18c:	df000017 	ldw	fp,0(sp)
   8d190:	dec00204 	addi	sp,sp,8
   8d194:	f800283a 	ret

0008d198 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   8d198:	defffb04 	addi	sp,sp,-20
   8d19c:	dfc00415 	stw	ra,16(sp)
   8d1a0:	df000315 	stw	fp,12(sp)
   8d1a4:	dc000215 	stw	r16,8(sp)
   8d1a8:	df000304 	addi	fp,sp,12
   8d1ac:	e13ffe15 	stw	r4,-8(fp)
   8d1b0:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   8d1b4:	d0a00417 	ldw	r2,-32752(gp)
   8d1b8:	e0bffd15 	stw	r2,-12(fp)
   8d1bc:	e0bffd17 	ldw	r2,-12(fp)
   8d1c0:	10000526 	beq	r2,zero,8d1d8 <__swsetup_r+0x40>
   8d1c4:	e0bffd17 	ldw	r2,-12(fp)
   8d1c8:	10800e17 	ldw	r2,56(r2)
   8d1cc:	1000021e 	bne	r2,zero,8d1d8 <__swsetup_r+0x40>
   8d1d0:	e13ffd17 	ldw	r4,-12(fp)
   8d1d4:	008573c0 	call	8573c <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
   8d1d8:	8080030b 	ldhu	r2,12(r16)
   8d1dc:	10bfffcc 	andi	r2,r2,65535
   8d1e0:	1080020c 	andi	r2,r2,8
   8d1e4:	1000241e 	bne	r2,zero,8d278 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
   8d1e8:	8080030b 	ldhu	r2,12(r16)
   8d1ec:	10bfffcc 	andi	r2,r2,65535
   8d1f0:	1080040c 	andi	r2,r2,16
   8d1f4:	1000081e 	bne	r2,zero,8d218 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
   8d1f8:	e0bffe17 	ldw	r2,-8(fp)
   8d1fc:	00c00244 	movi	r3,9
   8d200:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
   8d204:	8080030b 	ldhu	r2,12(r16)
   8d208:	10801014 	ori	r2,r2,64
   8d20c:	8080030d 	sth	r2,12(r16)
	  return EOF;
   8d210:	00bfffc4 	movi	r2,-1
   8d214:	00004206 	br	8d320 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
   8d218:	8080030b 	ldhu	r2,12(r16)
   8d21c:	10bfffcc 	andi	r2,r2,65535
   8d220:	1080010c 	andi	r2,r2,4
   8d224:	10001126 	beq	r2,zero,8d26c <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
   8d228:	80800c17 	ldw	r2,48(r16)
   8d22c:	10000826 	beq	r2,zero,8d250 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
   8d230:	80c00c17 	ldw	r3,48(r16)
   8d234:	80801004 	addi	r2,r16,64
   8d238:	18800426 	beq	r3,r2,8d24c <__swsetup_r+0xb4>
   8d23c:	80800c17 	ldw	r2,48(r16)
   8d240:	100b883a 	mov	r5,r2
   8d244:	e13ffe17 	ldw	r4,-8(fp)
   8d248:	0085c480 	call	85c48 <_free_r>
   8d24c:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
   8d250:	80c0030b 	ldhu	r3,12(r16)
   8d254:	00bff6c4 	movi	r2,-37
   8d258:	1884703a 	and	r2,r3,r2
   8d25c:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
   8d260:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
   8d264:	80800417 	ldw	r2,16(r16)
   8d268:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
   8d26c:	8080030b 	ldhu	r2,12(r16)
   8d270:	10800214 	ori	r2,r2,8
   8d274:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   8d278:	80800417 	ldw	r2,16(r16)
   8d27c:	10000b1e 	bne	r2,zero,8d2ac <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
   8d280:	8080030b 	ldhu	r2,12(r16)
   8d284:	10bfffcc 	andi	r2,r2,65535
   8d288:	1080800c 	andi	r2,r2,512
   8d28c:	10000426 	beq	r2,zero,8d2a0 <__swsetup_r+0x108>
   8d290:	8080030b 	ldhu	r2,12(r16)
   8d294:	10bfffcc 	andi	r2,r2,65535
   8d298:	1080200c 	andi	r2,r2,128
   8d29c:	10000326 	beq	r2,zero,8d2ac <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
   8d2a0:	800b883a 	mov	r5,r16
   8d2a4:	e13ffe17 	ldw	r4,-8(fp)
   8d2a8:	0086ec40 	call	86ec4 <__smakebuf_r>

  if (fp->_flags & __SLBF)
   8d2ac:	8080030b 	ldhu	r2,12(r16)
   8d2b0:	10bfffcc 	andi	r2,r2,65535
   8d2b4:	1080004c 	andi	r2,r2,1
   8d2b8:	10000526 	beq	r2,zero,8d2d0 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
   8d2bc:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
   8d2c0:	80800517 	ldw	r2,20(r16)
   8d2c4:	0085c83a 	sub	r2,zero,r2
   8d2c8:	80800615 	stw	r2,24(r16)
   8d2cc:	00000806 	br	8d2f0 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
   8d2d0:	8080030b 	ldhu	r2,12(r16)
   8d2d4:	10bfffcc 	andi	r2,r2,65535
   8d2d8:	1080008c 	andi	r2,r2,2
   8d2dc:	1000021e 	bne	r2,zero,8d2e8 <__swsetup_r+0x150>
   8d2e0:	80800517 	ldw	r2,20(r16)
   8d2e4:	00000106 	br	8d2ec <__swsetup_r+0x154>
   8d2e8:	0005883a 	mov	r2,zero
   8d2ec:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   8d2f0:	80800417 	ldw	r2,16(r16)
   8d2f4:	1000091e 	bne	r2,zero,8d31c <__swsetup_r+0x184>
   8d2f8:	8080030b 	ldhu	r2,12(r16)
   8d2fc:	10bfffcc 	andi	r2,r2,65535
   8d300:	1080200c 	andi	r2,r2,128
   8d304:	10000526 	beq	r2,zero,8d31c <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
   8d308:	8080030b 	ldhu	r2,12(r16)
   8d30c:	10801014 	ori	r2,r2,64
   8d310:	8080030d 	sth	r2,12(r16)
      return EOF;
   8d314:	00bfffc4 	movi	r2,-1
   8d318:	00000106 	br	8d320 <__swsetup_r+0x188>
    }
  return 0;
   8d31c:	0005883a 	mov	r2,zero
}
   8d320:	e6ffff04 	addi	sp,fp,-4
   8d324:	dfc00217 	ldw	ra,8(sp)
   8d328:	df000117 	ldw	fp,4(sp)
   8d32c:	dc000017 	ldw	r16,0(sp)
   8d330:	dec00304 	addi	sp,sp,12
   8d334:	f800283a 	ret

0008d338 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   8d338:	defffb04 	addi	sp,sp,-20
   8d33c:	dfc00415 	stw	ra,16(sp)
   8d340:	df000315 	stw	fp,12(sp)
   8d344:	df000304 	addi	fp,sp,12
   8d348:	e13ffe15 	stw	r4,-8(fp)
   8d34c:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   8d350:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
   8d354:	e13fff17 	ldw	r4,-4(fp)
   8d358:	009df540 	call	9df54 <close>
   8d35c:	e0bffd15 	stw	r2,-12(fp)
   8d360:	e0bffd17 	ldw	r2,-12(fp)
   8d364:	10bfffd8 	cmpnei	r2,r2,-1
   8d368:	1000051e 	bne	r2,zero,8d380 <_close_r+0x48>
   8d36c:	d0a70f17 	ldw	r2,-25540(gp)
   8d370:	10000326 	beq	r2,zero,8d380 <_close_r+0x48>
    ptr->_errno = errno;
   8d374:	d0e70f17 	ldw	r3,-25540(gp)
   8d378:	e0bffe17 	ldw	r2,-8(fp)
   8d37c:	10c00015 	stw	r3,0(r2)
  return ret;
   8d380:	e0bffd17 	ldw	r2,-12(fp)
}
   8d384:	e037883a 	mov	sp,fp
   8d388:	dfc00117 	ldw	ra,4(sp)
   8d38c:	df000017 	ldw	fp,0(sp)
   8d390:	dec00204 	addi	sp,sp,8
   8d394:	f800283a 	ret

0008d398 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
   8d398:	defff504 	addi	sp,sp,-44
   8d39c:	dfc00a15 	stw	ra,40(sp)
   8d3a0:	df000915 	stw	fp,36(sp)
   8d3a4:	dc800815 	stw	r18,32(sp)
   8d3a8:	dc400715 	stw	r17,28(sp)
   8d3ac:	dc000615 	stw	r16,24(sp)
   8d3b0:	df000904 	addi	fp,sp,36
   8d3b4:	e13ffb15 	stw	r4,-20(fp)
   8d3b8:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
   8d3bc:	d0a00517 	ldw	r2,-32748(gp)
   8d3c0:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
   8d3c4:	d0a00517 	ldw	r2,-32748(gp)
   8d3c8:	10805204 	addi	r2,r2,328
   8d3cc:	e0bff715 	stw	r2,-36(fp)
  while (p)
   8d3d0:	00006006 	br	8d554 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
   8d3d4:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   8d3d8:	80800117 	ldw	r2,4(r16)
   8d3dc:	147fffc4 	addi	r17,r2,-1
   8d3e0:	00004a06 	br	8d50c <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
   8d3e4:	00800044 	movi	r2,1
   8d3e8:	1444983a 	sll	r2,r2,r17
   8d3ec:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
   8d3f0:	e0bffc17 	ldw	r2,-16(fp)
   8d3f4:	10000826 	beq	r2,zero,8d418 <__call_exitprocs+0x80>
   8d3f8:	90004026 	beq	r18,zero,8d4fc <__call_exitprocs+0x164>
   8d3fc:	88800804 	addi	r2,r17,32
   8d400:	1085883a 	add	r2,r2,r2
   8d404:	1085883a 	add	r2,r2,r2
   8d408:	9085883a 	add	r2,r18,r2
   8d40c:	10c00017 	ldw	r3,0(r2)
   8d410:	e0bffc17 	ldw	r2,-16(fp)
   8d414:	1880391e 	bne	r3,r2,8d4fc <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
   8d418:	88800084 	addi	r2,r17,2
   8d41c:	1085883a 	add	r2,r2,r2
   8d420:	1085883a 	add	r2,r2,r2
   8d424:	8085883a 	add	r2,r16,r2
   8d428:	10800017 	ldw	r2,0(r2)
   8d42c:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
   8d430:	80800117 	ldw	r2,4(r16)
   8d434:	10bfffc4 	addi	r2,r2,-1
   8d438:	1440041e 	bne	r2,r17,8d44c <__call_exitprocs+0xb4>
	    p->_ind--;
   8d43c:	80800117 	ldw	r2,4(r16)
   8d440:	10bfffc4 	addi	r2,r2,-1
   8d444:	80800115 	stw	r2,4(r16)
   8d448:	00000506 	br	8d460 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
   8d44c:	88800084 	addi	r2,r17,2
   8d450:	1085883a 	add	r2,r2,r2
   8d454:	1085883a 	add	r2,r2,r2
   8d458:	8085883a 	add	r2,r16,r2
   8d45c:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
   8d460:	e0bff917 	ldw	r2,-28(fp)
   8d464:	10002726 	beq	r2,zero,8d504 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
   8d468:	80800117 	ldw	r2,4(r16)
   8d46c:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
   8d470:	90000426 	beq	r18,zero,8d484 <__call_exitprocs+0xec>
   8d474:	90c04017 	ldw	r3,256(r18)
   8d478:	e0bff817 	ldw	r2,-32(fp)
   8d47c:	1884703a 	and	r2,r3,r2
   8d480:	1000031e 	bne	r2,zero,8d490 <__call_exitprocs+0xf8>
	    fn ();
   8d484:	e0bff917 	ldw	r2,-28(fp)
   8d488:	103ee83a 	callr	r2
   8d48c:	00001406 	br	8d4e0 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
   8d490:	90c04117 	ldw	r3,260(r18)
   8d494:	e0bff817 	ldw	r2,-32(fp)
   8d498:	1884703a 	and	r2,r3,r2
   8d49c:	1000091e 	bne	r2,zero,8d4c4 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
   8d4a0:	8c45883a 	add	r2,r17,r17
   8d4a4:	1085883a 	add	r2,r2,r2
   8d4a8:	9085883a 	add	r2,r18,r2
   8d4ac:	10c00017 	ldw	r3,0(r2)
   8d4b0:	e0bff917 	ldw	r2,-28(fp)
   8d4b4:	180b883a 	mov	r5,r3
   8d4b8:	e13ffb17 	ldw	r4,-20(fp)
   8d4bc:	103ee83a 	callr	r2
   8d4c0:	00000706 	br	8d4e0 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
   8d4c4:	8c45883a 	add	r2,r17,r17
   8d4c8:	1085883a 	add	r2,r2,r2
   8d4cc:	9085883a 	add	r2,r18,r2
   8d4d0:	10c00017 	ldw	r3,0(r2)
   8d4d4:	e0bff917 	ldw	r2,-28(fp)
   8d4d8:	1809883a 	mov	r4,r3
   8d4dc:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
   8d4e0:	80c00117 	ldw	r3,4(r16)
   8d4e4:	e0bffa17 	ldw	r2,-24(fp)
   8d4e8:	18bfb41e 	bne	r3,r2,8d3bc <__alt_data_end+0xfffdb3bc>
   8d4ec:	e0bff717 	ldw	r2,-36(fp)
   8d4f0:	10800017 	ldw	r2,0(r2)
   8d4f4:	143fb11e 	bne	r2,r16,8d3bc <__alt_data_end+0xfffdb3bc>
   8d4f8:	00000306 	br	8d508 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
   8d4fc:	0001883a 	nop
   8d500:	00000106 	br	8d508 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
   8d504:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   8d508:	8c7fffc4 	addi	r17,r17,-1
   8d50c:	883fb50e 	bge	r17,zero,8d3e4 <__alt_data_end+0xfffdb3e4>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
   8d510:	00800034 	movhi	r2,0
   8d514:	10800004 	addi	r2,r2,0
   8d518:	10001026 	beq	r2,zero,8d55c <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
   8d51c:	80800117 	ldw	r2,4(r16)
   8d520:	10000a1e 	bne	r2,zero,8d54c <__call_exitprocs+0x1b4>
   8d524:	80800017 	ldw	r2,0(r16)
   8d528:	10000826 	beq	r2,zero,8d54c <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
   8d52c:	80c00017 	ldw	r3,0(r16)
   8d530:	e0bff717 	ldw	r2,-36(fp)
   8d534:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
   8d538:	8009883a 	mov	r4,r16
   8d53c:	00000000 	call	0 <__alt_mem_MemoriaDados>
	  p = *lastp;
   8d540:	e0bff717 	ldw	r2,-36(fp)
   8d544:	14000017 	ldw	r16,0(r2)
   8d548:	00000206 	br	8d554 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
   8d54c:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
   8d550:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
   8d554:	803f9f1e 	bne	r16,zero,8d3d4 <__alt_data_end+0xfffdb3d4>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   8d558:	00000106 	br	8d560 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
   8d55c:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   8d560:	0001883a 	nop
   8d564:	e6fffd04 	addi	sp,fp,-12
   8d568:	dfc00417 	ldw	ra,16(sp)
   8d56c:	df000317 	ldw	fp,12(sp)
   8d570:	dc800217 	ldw	r18,8(sp)
   8d574:	dc400117 	ldw	r17,4(sp)
   8d578:	dc000017 	ldw	r16,0(sp)
   8d57c:	dec00504 	addi	sp,sp,20
   8d580:	f800283a 	ret

0008d584 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
   8d584:	deffef04 	addi	sp,sp,-68
   8d588:	dfc01015 	stw	ra,64(sp)
   8d58c:	df000f15 	stw	fp,60(sp)
   8d590:	df000f04 	addi	fp,sp,60
   8d594:	e13ffe15 	stw	r4,-8(fp)
   8d598:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
   8d59c:	e0bfff17 	ldw	r2,-4(fp)
   8d5a0:	10800417 	ldw	r2,16(r2)
   8d5a4:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
   8d5a8:	e0bffe17 	ldw	r2,-8(fp)
   8d5ac:	10c00417 	ldw	r3,16(r2)
   8d5b0:	e0bff117 	ldw	r2,-60(fp)
   8d5b4:	1880020e 	bge	r3,r2,8d5c0 <quorem+0x3c>
    return 0;
   8d5b8:	0005883a 	mov	r2,zero
   8d5bc:	0000dd06 	br	8d934 <quorem+0x3b0>
  sx = S->_x;
   8d5c0:	e0bfff17 	ldw	r2,-4(fp)
   8d5c4:	10800504 	addi	r2,r2,20
   8d5c8:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
   8d5cc:	e0bff117 	ldw	r2,-60(fp)
   8d5d0:	10bfffc4 	addi	r2,r2,-1
   8d5d4:	e0bff115 	stw	r2,-60(fp)
   8d5d8:	e0bff117 	ldw	r2,-60(fp)
   8d5dc:	1085883a 	add	r2,r2,r2
   8d5e0:	1085883a 	add	r2,r2,r2
   8d5e4:	1007883a 	mov	r3,r2
   8d5e8:	e0bff717 	ldw	r2,-36(fp)
   8d5ec:	10c5883a 	add	r2,r2,r3
   8d5f0:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
   8d5f4:	e0bffe17 	ldw	r2,-8(fp)
   8d5f8:	10800504 	addi	r2,r2,20
   8d5fc:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
   8d600:	e0bff117 	ldw	r2,-60(fp)
   8d604:	1085883a 	add	r2,r2,r2
   8d608:	1085883a 	add	r2,r2,r2
   8d60c:	1007883a 	mov	r3,r2
   8d610:	e0bff517 	ldw	r2,-44(fp)
   8d614:	10c5883a 	add	r2,r2,r3
   8d618:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
   8d61c:	e0bff617 	ldw	r2,-40(fp)
   8d620:	10c00017 	ldw	r3,0(r2)
   8d624:	e0bff817 	ldw	r2,-32(fp)
   8d628:	10800017 	ldw	r2,0(r2)
   8d62c:	10800044 	addi	r2,r2,1
   8d630:	100b883a 	mov	r5,r2
   8d634:	1809883a 	mov	r4,r3
   8d638:	00822e40 	call	822e4 <__udivsi3>
   8d63c:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
   8d640:	e0bff417 	ldw	r2,-48(fp)
   8d644:	10005726 	beq	r2,zero,8d7a4 <quorem+0x220>
    {
      borrow = 0;
   8d648:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   8d64c:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   8d650:	e0bff717 	ldw	r2,-36(fp)
   8d654:	10c00104 	addi	r3,r2,4
   8d658:	e0fff715 	stw	r3,-36(fp)
   8d65c:	10800017 	ldw	r2,0(r2)
   8d660:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
   8d664:	e0bff917 	ldw	r2,-28(fp)
   8d668:	10bfffcc 	andi	r2,r2,65535
   8d66c:	e17ff417 	ldw	r5,-48(fp)
   8d670:	1009883a 	mov	r4,r2
   8d674:	00823a00 	call	823a0 <__mulsi3>
   8d678:	1007883a 	mov	r3,r2
   8d67c:	e0bff317 	ldw	r2,-52(fp)
   8d680:	1885883a 	add	r2,r3,r2
   8d684:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
   8d688:	e0bff917 	ldw	r2,-28(fp)
   8d68c:	1004d43a 	srli	r2,r2,16
   8d690:	e17ff417 	ldw	r5,-48(fp)
   8d694:	1009883a 	mov	r4,r2
   8d698:	00823a00 	call	823a0 <__mulsi3>
   8d69c:	1007883a 	mov	r3,r2
   8d6a0:	e0bffa17 	ldw	r2,-24(fp)
   8d6a4:	1004d43a 	srli	r2,r2,16
   8d6a8:	1885883a 	add	r2,r3,r2
   8d6ac:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   8d6b0:	e0bffb17 	ldw	r2,-20(fp)
   8d6b4:	1004d43a 	srli	r2,r2,16
   8d6b8:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   8d6bc:	e0bff517 	ldw	r2,-44(fp)
   8d6c0:	10800017 	ldw	r2,0(r2)
   8d6c4:	10ffffcc 	andi	r3,r2,65535
   8d6c8:	e0bffa17 	ldw	r2,-24(fp)
   8d6cc:	10bfffcc 	andi	r2,r2,65535
   8d6d0:	1887c83a 	sub	r3,r3,r2
   8d6d4:	e0bff217 	ldw	r2,-56(fp)
   8d6d8:	1885883a 	add	r2,r3,r2
   8d6dc:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   8d6e0:	e0bffc17 	ldw	r2,-16(fp)
   8d6e4:	1005d43a 	srai	r2,r2,16
   8d6e8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   8d6ec:	e0bff517 	ldw	r2,-44(fp)
   8d6f0:	10800017 	ldw	r2,0(r2)
   8d6f4:	1006d43a 	srli	r3,r2,16
   8d6f8:	e0bffb17 	ldw	r2,-20(fp)
   8d6fc:	10bfffcc 	andi	r2,r2,65535
   8d700:	1887c83a 	sub	r3,r3,r2
   8d704:	e0bff217 	ldw	r2,-56(fp)
   8d708:	1885883a 	add	r2,r3,r2
   8d70c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   8d710:	e0bffd17 	ldw	r2,-12(fp)
   8d714:	1005d43a 	srai	r2,r2,16
   8d718:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   8d71c:	e0bff517 	ldw	r2,-44(fp)
   8d720:	10c00104 	addi	r3,r2,4
   8d724:	e0fff515 	stw	r3,-44(fp)
   8d728:	e0fffd17 	ldw	r3,-12(fp)
   8d72c:	1808943a 	slli	r4,r3,16
   8d730:	e0fffc17 	ldw	r3,-16(fp)
   8d734:	18ffffcc 	andi	r3,r3,65535
   8d738:	20c6b03a 	or	r3,r4,r3
   8d73c:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   8d740:	e0bff717 	ldw	r2,-36(fp)
   8d744:	e0fff817 	ldw	r3,-32(fp)
   8d748:	18bfc12e 	bgeu	r3,r2,8d650 <__alt_data_end+0xfffdb650>
      if (!*bxe)
   8d74c:	e0bff617 	ldw	r2,-40(fp)
   8d750:	10800017 	ldw	r2,0(r2)
   8d754:	1000131e 	bne	r2,zero,8d7a4 <quorem+0x220>
	{
	  bx = b->_x;
   8d758:	e0bffe17 	ldw	r2,-8(fp)
   8d75c:	10800504 	addi	r2,r2,20
   8d760:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
   8d764:	00000306 	br	8d774 <quorem+0x1f0>
	    --n;
   8d768:	e0bff117 	ldw	r2,-60(fp)
   8d76c:	10bfffc4 	addi	r2,r2,-1
   8d770:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
   8d774:	e0bff617 	ldw	r2,-40(fp)
   8d778:	10bfff04 	addi	r2,r2,-4
   8d77c:	e0bff615 	stw	r2,-40(fp)
   8d780:	e0bff617 	ldw	r2,-40(fp)
   8d784:	e0fff517 	ldw	r3,-44(fp)
   8d788:	1880032e 	bgeu	r3,r2,8d798 <quorem+0x214>
   8d78c:	e0bff617 	ldw	r2,-40(fp)
   8d790:	10800017 	ldw	r2,0(r2)
   8d794:	103ff426 	beq	r2,zero,8d768 <__alt_data_end+0xfffdb768>
	    --n;
	  b->_wds = n;
   8d798:	e0bffe17 	ldw	r2,-8(fp)
   8d79c:	e0fff117 	ldw	r3,-60(fp)
   8d7a0:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
   8d7a4:	e17fff17 	ldw	r5,-4(fp)
   8d7a8:	e13ffe17 	ldw	r4,-8(fp)
   8d7ac:	00918440 	call	91844 <__mcmp>
   8d7b0:	10005f16 	blt	r2,zero,8d930 <quorem+0x3ac>
    {
      q++;
   8d7b4:	e0bff417 	ldw	r2,-48(fp)
   8d7b8:	10800044 	addi	r2,r2,1
   8d7bc:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
   8d7c0:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   8d7c4:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
   8d7c8:	e0bffe17 	ldw	r2,-8(fp)
   8d7cc:	10800504 	addi	r2,r2,20
   8d7d0:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
   8d7d4:	e0bfff17 	ldw	r2,-4(fp)
   8d7d8:	10800504 	addi	r2,r2,20
   8d7dc:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   8d7e0:	e0bff717 	ldw	r2,-36(fp)
   8d7e4:	10c00104 	addi	r3,r2,4
   8d7e8:	e0fff715 	stw	r3,-36(fp)
   8d7ec:	10800017 	ldw	r2,0(r2)
   8d7f0:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
   8d7f4:	e0bff917 	ldw	r2,-28(fp)
   8d7f8:	10ffffcc 	andi	r3,r2,65535
   8d7fc:	e0bff317 	ldw	r2,-52(fp)
   8d800:	1885883a 	add	r2,r3,r2
   8d804:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
   8d808:	e0bff917 	ldw	r2,-28(fp)
   8d80c:	1006d43a 	srli	r3,r2,16
   8d810:	e0bffa17 	ldw	r2,-24(fp)
   8d814:	1004d43a 	srli	r2,r2,16
   8d818:	1885883a 	add	r2,r3,r2
   8d81c:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   8d820:	e0bffb17 	ldw	r2,-20(fp)
   8d824:	1004d43a 	srli	r2,r2,16
   8d828:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   8d82c:	e0bff517 	ldw	r2,-44(fp)
   8d830:	10800017 	ldw	r2,0(r2)
   8d834:	10ffffcc 	andi	r3,r2,65535
   8d838:	e0bffa17 	ldw	r2,-24(fp)
   8d83c:	10bfffcc 	andi	r2,r2,65535
   8d840:	1887c83a 	sub	r3,r3,r2
   8d844:	e0bff217 	ldw	r2,-56(fp)
   8d848:	1885883a 	add	r2,r3,r2
   8d84c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   8d850:	e0bffc17 	ldw	r2,-16(fp)
   8d854:	1005d43a 	srai	r2,r2,16
   8d858:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   8d85c:	e0bff517 	ldw	r2,-44(fp)
   8d860:	10800017 	ldw	r2,0(r2)
   8d864:	1006d43a 	srli	r3,r2,16
   8d868:	e0bffb17 	ldw	r2,-20(fp)
   8d86c:	10bfffcc 	andi	r2,r2,65535
   8d870:	1887c83a 	sub	r3,r3,r2
   8d874:	e0bff217 	ldw	r2,-56(fp)
   8d878:	1885883a 	add	r2,r3,r2
   8d87c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   8d880:	e0bffd17 	ldw	r2,-12(fp)
   8d884:	1005d43a 	srai	r2,r2,16
   8d888:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   8d88c:	e0bff517 	ldw	r2,-44(fp)
   8d890:	10c00104 	addi	r3,r2,4
   8d894:	e0fff515 	stw	r3,-44(fp)
   8d898:	e0fffd17 	ldw	r3,-12(fp)
   8d89c:	1808943a 	slli	r4,r3,16
   8d8a0:	e0fffc17 	ldw	r3,-16(fp)
   8d8a4:	18ffffcc 	andi	r3,r3,65535
   8d8a8:	20c6b03a 	or	r3,r4,r3
   8d8ac:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   8d8b0:	e0bff717 	ldw	r2,-36(fp)
   8d8b4:	e0fff817 	ldw	r3,-32(fp)
   8d8b8:	18bfc92e 	bgeu	r3,r2,8d7e0 <__alt_data_end+0xfffdb7e0>
      bx = b->_x;
   8d8bc:	e0bffe17 	ldw	r2,-8(fp)
   8d8c0:	10800504 	addi	r2,r2,20
   8d8c4:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
   8d8c8:	e0bff117 	ldw	r2,-60(fp)
   8d8cc:	1085883a 	add	r2,r2,r2
   8d8d0:	1085883a 	add	r2,r2,r2
   8d8d4:	1007883a 	mov	r3,r2
   8d8d8:	e0bff517 	ldw	r2,-44(fp)
   8d8dc:	10c5883a 	add	r2,r2,r3
   8d8e0:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
   8d8e4:	e0bff617 	ldw	r2,-40(fp)
   8d8e8:	10800017 	ldw	r2,0(r2)
   8d8ec:	1000101e 	bne	r2,zero,8d930 <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
   8d8f0:	00000306 	br	8d900 <quorem+0x37c>
	    --n;
   8d8f4:	e0bff117 	ldw	r2,-60(fp)
   8d8f8:	10bfffc4 	addi	r2,r2,-1
   8d8fc:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
   8d900:	e0bff617 	ldw	r2,-40(fp)
   8d904:	10bfff04 	addi	r2,r2,-4
   8d908:	e0bff615 	stw	r2,-40(fp)
   8d90c:	e0bff617 	ldw	r2,-40(fp)
   8d910:	e0fff517 	ldw	r3,-44(fp)
   8d914:	1880032e 	bgeu	r3,r2,8d924 <quorem+0x3a0>
   8d918:	e0bff617 	ldw	r2,-40(fp)
   8d91c:	10800017 	ldw	r2,0(r2)
   8d920:	103ff426 	beq	r2,zero,8d8f4 <__alt_data_end+0xfffdb8f4>
	    --n;
	  b->_wds = n;
   8d924:	e0bffe17 	ldw	r2,-8(fp)
   8d928:	e0fff117 	ldw	r3,-60(fp)
   8d92c:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
   8d930:	e0bff417 	ldw	r2,-48(fp)
}
   8d934:	e037883a 	mov	sp,fp
   8d938:	dfc00117 	ldw	ra,4(sp)
   8d93c:	df000017 	ldw	fp,0(sp)
   8d940:	dec00204 	addi	sp,sp,8
   8d944:	f800283a 	ret

0008d948 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
   8d948:	deffcc04 	addi	sp,sp,-208
   8d94c:	dfc03315 	stw	ra,204(sp)
   8d950:	df003215 	stw	fp,200(sp)
   8d954:	dcc03115 	stw	r19,196(sp)
   8d958:	dc803015 	stw	r18,192(sp)
   8d95c:	dc402f15 	stw	r17,188(sp)
   8d960:	dc002e15 	stw	r16,184(sp)
   8d964:	df003204 	addi	fp,sp,200
   8d968:	e13ff815 	stw	r4,-32(fp)
   8d96c:	e17ff915 	stw	r5,-28(fp)
   8d970:	e1bffa15 	stw	r6,-24(fp)
   8d974:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
   8d978:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
   8d97c:	e0bff917 	ldw	r2,-28(fp)
   8d980:	e0bff215 	stw	r2,-56(fp)
   8d984:	e0bffa17 	ldw	r2,-24(fp)
   8d988:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
   8d98c:	e0bff817 	ldw	r2,-32(fp)
   8d990:	10801017 	ldw	r2,64(r2)
   8d994:	10001326 	beq	r2,zero,8d9e4 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
   8d998:	e0bff817 	ldw	r2,-32(fp)
   8d99c:	10801017 	ldw	r2,64(r2)
   8d9a0:	e0fff817 	ldw	r3,-32(fp)
   8d9a4:	18c01117 	ldw	r3,68(r3)
   8d9a8:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
   8d9ac:	e0bff817 	ldw	r2,-32(fp)
   8d9b0:	10801017 	ldw	r2,64(r2)
   8d9b4:	e0fff817 	ldw	r3,-32(fp)
   8d9b8:	18c01117 	ldw	r3,68(r3)
   8d9bc:	01000044 	movi	r4,1
   8d9c0:	20c6983a 	sll	r3,r4,r3
   8d9c4:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
   8d9c8:	e0bff817 	ldw	r2,-32(fp)
   8d9cc:	10801017 	ldw	r2,64(r2)
   8d9d0:	100b883a 	mov	r5,r2
   8d9d4:	e13ff817 	ldw	r4,-32(fp)
   8d9d8:	0090b5c0 	call	90b5c <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
   8d9dc:	e0bff817 	ldw	r2,-32(fp)
   8d9e0:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
   8d9e4:	e0bff317 	ldw	r2,-52(fp)
   8d9e8:	1000090e 	bge	r2,zero,8da10 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
   8d9ec:	e0800417 	ldw	r2,16(fp)
   8d9f0:	00c00044 	movi	r3,1
   8d9f4:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
   8d9f8:	e0fff317 	ldw	r3,-52(fp)
   8d9fc:	00a00034 	movhi	r2,32768
   8da00:	10bfffc4 	addi	r2,r2,-1
   8da04:	1884703a 	and	r2,r3,r2
   8da08:	e0bff315 	stw	r2,-52(fp)
   8da0c:	00000206 	br	8da18 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
   8da10:	e0800417 	ldw	r2,16(fp)
   8da14:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
   8da18:	e0bff317 	ldw	r2,-52(fp)
   8da1c:	10dffc2c 	andhi	r3,r2,32752
   8da20:	009ffc34 	movhi	r2,32752
   8da24:	1880221e 	bne	r3,r2,8dab0 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
   8da28:	e0800317 	ldw	r2,12(fp)
   8da2c:	00c9c3c4 	movi	r3,9999
   8da30:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
   8da34:	e0bff217 	ldw	r2,-56(fp)
   8da38:	1000081e 	bne	r2,zero,8da5c <_dtoa_r+0x114>
   8da3c:	e0fff317 	ldw	r3,-52(fp)
   8da40:	00800434 	movhi	r2,16
   8da44:	10bfffc4 	addi	r2,r2,-1
   8da48:	1884703a 	and	r2,r3,r2
   8da4c:	1000031e 	bne	r2,zero,8da5c <_dtoa_r+0x114>
   8da50:	008002b4 	movhi	r2,10
   8da54:	10846d04 	addi	r2,r2,4532
   8da58:	00000206 	br	8da64 <_dtoa_r+0x11c>
   8da5c:	008002b4 	movhi	r2,10
   8da60:	10847004 	addi	r2,r2,4544
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
   8da64:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
   8da68:	e0800517 	ldw	r2,20(fp)
   8da6c:	10000e26 	beq	r2,zero,8daa8 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
   8da70:	e0bfe717 	ldw	r2,-100(fp)
   8da74:	108000c4 	addi	r2,r2,3
   8da78:	10800003 	ldbu	r2,0(r2)
   8da7c:	10803fcc 	andi	r2,r2,255
   8da80:	1080201c 	xori	r2,r2,128
   8da84:	10bfe004 	addi	r2,r2,-128
   8da88:	10000326 	beq	r2,zero,8da98 <_dtoa_r+0x150>
   8da8c:	e0bfe717 	ldw	r2,-100(fp)
   8da90:	10800204 	addi	r2,r2,8
   8da94:	00000206 	br	8daa0 <_dtoa_r+0x158>
   8da98:	e0bfe717 	ldw	r2,-100(fp)
   8da9c:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
   8daa0:	e0c00517 	ldw	r3,20(fp)
   8daa4:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
   8daa8:	e0bfe717 	ldw	r2,-100(fp)
   8daac:	00067b06 	br	8f49c <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
   8dab0:	e0bff217 	ldw	r2,-56(fp)
   8dab4:	e0fff317 	ldw	r3,-52(fp)
   8dab8:	000d883a 	mov	r6,zero
   8dabc:	000f883a 	mov	r7,zero
   8dac0:	1009883a 	mov	r4,r2
   8dac4:	180b883a 	mov	r5,r3
   8dac8:	009dde80 	call	9dde8 <__eqdf2>
   8dacc:	10000e1e 	bne	r2,zero,8db08 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
   8dad0:	e0800317 	ldw	r2,12(fp)
   8dad4:	00c00044 	movi	r3,1
   8dad8:	10c00015 	stw	r3,0(r2)
      s = "0";
   8dadc:	008002b4 	movhi	r2,10
   8dae0:	10847104 	addi	r2,r2,4548
   8dae4:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
   8dae8:	e0800517 	ldw	r2,20(fp)
   8daec:	10000426 	beq	r2,zero,8db00 <_dtoa_r+0x1b8>
	*rve = s + 1;
   8daf0:	e0bfe717 	ldw	r2,-100(fp)
   8daf4:	10c00044 	addi	r3,r2,1
   8daf8:	e0800517 	ldw	r2,20(fp)
   8dafc:	10c00015 	stw	r3,0(r2)
      return s;
   8db00:	e0bfe717 	ldw	r2,-100(fp)
   8db04:	00066506 	br	8f49c <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
   8db08:	e0bff217 	ldw	r2,-56(fp)
   8db0c:	e0fff317 	ldw	r3,-52(fp)
   8db10:	e17ff104 	addi	r5,fp,-60
   8db14:	e13ff004 	addi	r4,fp,-64
   8db18:	d9000015 	stw	r4,0(sp)
   8db1c:	280f883a 	mov	r7,r5
   8db20:	100b883a 	mov	r5,r2
   8db24:	180d883a 	mov	r6,r3
   8db28:	e13ff817 	ldw	r4,-32(fp)
   8db2c:	0091ecc0 	call	91ecc <__d2b>
   8db30:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
   8db34:	e0bff317 	ldw	r2,-52(fp)
   8db38:	1004d53a 	srli	r2,r2,20
   8db3c:	1081ffcc 	andi	r2,r2,2047
   8db40:	e0bfd215 	stw	r2,-184(fp)
   8db44:	e0bfd217 	ldw	r2,-184(fp)
   8db48:	10001126 	beq	r2,zero,8db90 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
   8db4c:	e0bff217 	ldw	r2,-56(fp)
   8db50:	e0fff317 	ldw	r3,-52(fp)
   8db54:	e0bff415 	stw	r2,-48(fp)
   8db58:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
   8db5c:	e0fff517 	ldw	r3,-44(fp)
   8db60:	00800434 	movhi	r2,16
   8db64:	10bfffc4 	addi	r2,r2,-1
   8db68:	1884703a 	and	r2,r3,r2
   8db6c:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
   8db70:	e0bff517 	ldw	r2,-44(fp)
   8db74:	108ffc34 	orhi	r2,r2,16368
   8db78:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
   8db7c:	e0bfd217 	ldw	r2,-184(fp)
   8db80:	10bf0044 	addi	r2,r2,-1023
   8db84:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
   8db88:	e03fe015 	stw	zero,-128(fp)
   8db8c:	00002806 	br	8dc30 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
   8db90:	e0fff017 	ldw	r3,-64(fp)
   8db94:	e0bff117 	ldw	r2,-60(fp)
   8db98:	1885883a 	add	r2,r3,r2
   8db9c:	10810c84 	addi	r2,r2,1074
   8dba0:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
   8dba4:	e0bfd217 	ldw	r2,-184(fp)
   8dba8:	10800850 	cmplti	r2,r2,33
   8dbac:	10000b1e 	bne	r2,zero,8dbdc <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   8dbb0:	e0fff317 	ldw	r3,-52(fp)
   8dbb4:	01001004 	movi	r4,64
   8dbb8:	e0bfd217 	ldw	r2,-184(fp)
   8dbbc:	2085c83a 	sub	r2,r4,r2
   8dbc0:	1886983a 	sll	r3,r3,r2
   8dbc4:	e13ff217 	ldw	r4,-56(fp)
   8dbc8:	e0bfd217 	ldw	r2,-184(fp)
   8dbcc:	10bff804 	addi	r2,r2,-32
   8dbd0:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
   8dbd4:	1884b03a 	or	r2,r3,r2
   8dbd8:	00000506 	br	8dbf0 <_dtoa_r+0x2a8>
   8dbdc:	e0fff217 	ldw	r3,-56(fp)
   8dbe0:	01000804 	movi	r4,32
   8dbe4:	e0bfd217 	ldw	r2,-184(fp)
   8dbe8:	2085c83a 	sub	r2,r4,r2
   8dbec:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   8dbf0:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
   8dbf4:	e13fe817 	ldw	r4,-96(fp)
   8dbf8:	009de700 	call	9de70 <__floatunsidf>
   8dbfc:	1009883a 	mov	r4,r2
   8dc00:	180b883a 	mov	r5,r3
   8dc04:	e13ff415 	stw	r4,-48(fp)
   8dc08:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
   8dc0c:	e0fff517 	ldw	r3,-44(fp)
   8dc10:	00bf8434 	movhi	r2,65040
   8dc14:	1885883a 	add	r2,r3,r2
   8dc18:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
   8dc1c:	e0bfd217 	ldw	r2,-184(fp)
   8dc20:	10bef344 	addi	r2,r2,-1075
   8dc24:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
   8dc28:	00800044 	movi	r2,1
   8dc2c:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
   8dc30:	e0bff417 	ldw	r2,-48(fp)
   8dc34:	e0fff517 	ldw	r3,-44(fp)
   8dc38:	000d883a 	mov	r6,zero
   8dc3c:	01cffe34 	movhi	r7,16376
   8dc40:	1009883a 	mov	r4,r2
   8dc44:	180b883a 	mov	r5,r3
   8dc48:	00840800 	call	84080 <__subdf3>
   8dc4c:	1009883a 	mov	r4,r2
   8dc50:	180b883a 	mov	r5,r3
   8dc54:	2005883a 	mov	r2,r4
   8dc58:	2807883a 	mov	r3,r5
   8dc5c:	0198dbf4 	movhi	r6,25455
   8dc60:	3190d844 	addi	r6,r6,17249
   8dc64:	01cff4f4 	movhi	r7,16339
   8dc68:	39e1e9c4 	addi	r7,r7,-30809
   8dc6c:	1009883a 	mov	r4,r2
   8dc70:	180b883a 	mov	r5,r3
   8dc74:	00838140 	call	83814 <__muldf3>
   8dc78:	1009883a 	mov	r4,r2
   8dc7c:	180b883a 	mov	r5,r3
   8dc80:	2005883a 	mov	r2,r4
   8dc84:	2807883a 	mov	r3,r5
   8dc88:	01a2d874 	movhi	r6,35681
   8dc8c:	31b22cc4 	addi	r6,r6,-14157
   8dc90:	01cff1f4 	movhi	r7,16327
   8dc94:	39e28a04 	addi	r7,r7,-30168
   8dc98:	1009883a 	mov	r4,r2
   8dc9c:	180b883a 	mov	r5,r3
   8dca0:	00823c80 	call	823c8 <__adddf3>
   8dca4:	1009883a 	mov	r4,r2
   8dca8:	180b883a 	mov	r5,r3
   8dcac:	2025883a 	mov	r18,r4
   8dcb0:	2827883a 	mov	r19,r5
   8dcb4:	e13fd217 	ldw	r4,-184(fp)
   8dcb8:	00849fc0 	call	849fc <__floatsidf>
   8dcbc:	1011883a 	mov	r8,r2
   8dcc0:	1813883a 	mov	r9,r3
   8dcc4:	019427f4 	movhi	r6,20639
   8dcc8:	319e7ec4 	addi	r6,r6,31227
   8dccc:	01cff4f4 	movhi	r7,16339
   8dcd0:	39d104c4 	addi	r7,r7,17427
   8dcd4:	4009883a 	mov	r4,r8
   8dcd8:	480b883a 	mov	r5,r9
   8dcdc:	00838140 	call	83814 <__muldf3>
   8dce0:	1009883a 	mov	r4,r2
   8dce4:	180b883a 	mov	r5,r3
   8dce8:	2005883a 	mov	r2,r4
   8dcec:	2807883a 	mov	r3,r5
   8dcf0:	100d883a 	mov	r6,r2
   8dcf4:	180f883a 	mov	r7,r3
   8dcf8:	9009883a 	mov	r4,r18
   8dcfc:	980b883a 	mov	r5,r19
   8dd00:	00823c80 	call	823c8 <__adddf3>
   8dd04:	1009883a 	mov	r4,r2
   8dd08:	180b883a 	mov	r5,r3
   8dd0c:	e13fe515 	stw	r4,-108(fp)
   8dd10:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
   8dd14:	e13fe517 	ldw	r4,-108(fp)
   8dd18:	e17fe617 	ldw	r5,-104(fp)
   8dd1c:	008497c0 	call	8497c <__fixdfsi>
   8dd20:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
   8dd24:	000d883a 	mov	r6,zero
   8dd28:	000f883a 	mov	r7,zero
   8dd2c:	e13fe517 	ldw	r4,-108(fp)
   8dd30:	e17fe617 	ldw	r5,-104(fp)
   8dd34:	00837200 	call	83720 <__ledf2>
   8dd38:	10000d0e 	bge	r2,zero,8dd70 <_dtoa_r+0x428>
   8dd3c:	e13fd717 	ldw	r4,-164(fp)
   8dd40:	00849fc0 	call	849fc <__floatsidf>
   8dd44:	1011883a 	mov	r8,r2
   8dd48:	1813883a 	mov	r9,r3
   8dd4c:	e1bfe517 	ldw	r6,-108(fp)
   8dd50:	e1ffe617 	ldw	r7,-104(fp)
   8dd54:	4009883a 	mov	r4,r8
   8dd58:	480b883a 	mov	r5,r9
   8dd5c:	009dde80 	call	9dde8 <__eqdf2>
   8dd60:	10000326 	beq	r2,zero,8dd70 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
   8dd64:	e0bfd717 	ldw	r2,-164(fp)
   8dd68:	10bfffc4 	addi	r2,r2,-1
   8dd6c:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
   8dd70:	00800044 	movi	r2,1
   8dd74:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
   8dd78:	e0bfd717 	ldw	r2,-164(fp)
   8dd7c:	10001616 	blt	r2,zero,8ddd8 <_dtoa_r+0x490>
   8dd80:	e0bfd717 	ldw	r2,-164(fp)
   8dd84:	108005c8 	cmpgei	r2,r2,23
   8dd88:	1000131e 	bne	r2,zero,8ddd8 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
   8dd8c:	e0bff217 	ldw	r2,-56(fp)
   8dd90:	e0fff317 	ldw	r3,-52(fp)
   8dd94:	010002b4 	movhi	r4,10
   8dd98:	21047804 	addi	r4,r4,4576
   8dd9c:	e17fd717 	ldw	r5,-164(fp)
   8dda0:	280a90fa 	slli	r5,r5,3
   8dda4:	214d883a 	add	r6,r4,r5
   8dda8:	31000017 	ldw	r4,0(r6)
   8ddac:	31400117 	ldw	r5,4(r6)
   8ddb0:	200d883a 	mov	r6,r4
   8ddb4:	280f883a 	mov	r7,r5
   8ddb8:	1009883a 	mov	r4,r2
   8ddbc:	180b883a 	mov	r5,r3
   8ddc0:	00837200 	call	83720 <__ledf2>
   8ddc4:	1000030e 	bge	r2,zero,8ddd4 <_dtoa_r+0x48c>
	k--;
   8ddc8:	e0bfd717 	ldw	r2,-164(fp)
   8ddcc:	10bfffc4 	addi	r2,r2,-1
   8ddd0:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
   8ddd4:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
   8ddd8:	e0fff017 	ldw	r3,-64(fp)
   8dddc:	e0bfd217 	ldw	r2,-184(fp)
   8dde0:	1885c83a 	sub	r2,r3,r2
   8dde4:	10bfffc4 	addi	r2,r2,-1
   8dde8:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
   8ddec:	e0bfd617 	ldw	r2,-168(fp)
   8ddf0:	10000416 	blt	r2,zero,8de04 <_dtoa_r+0x4bc>
    {
      b2 = 0;
   8ddf4:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
   8ddf8:	e0bfd617 	ldw	r2,-168(fp)
   8ddfc:	e0bfdc15 	stw	r2,-144(fp)
   8de00:	00000406 	br	8de14 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
   8de04:	e0bfd617 	ldw	r2,-168(fp)
   8de08:	0085c83a 	sub	r2,zero,r2
   8de0c:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
   8de10:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
   8de14:	e0bfd717 	ldw	r2,-164(fp)
   8de18:	10000816 	blt	r2,zero,8de3c <_dtoa_r+0x4f4>
    {
      b5 = 0;
   8de1c:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
   8de20:	e0bfd717 	ldw	r2,-164(fp)
   8de24:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
   8de28:	e0ffdc17 	ldw	r3,-144(fp)
   8de2c:	e0bfd717 	ldw	r2,-164(fp)
   8de30:	1885883a 	add	r2,r3,r2
   8de34:	e0bfdc15 	stw	r2,-144(fp)
   8de38:	00000806 	br	8de5c <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
   8de3c:	e0ffcf17 	ldw	r3,-196(fp)
   8de40:	e0bfd717 	ldw	r2,-164(fp)
   8de44:	1885c83a 	sub	r2,r3,r2
   8de48:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
   8de4c:	e0bfd717 	ldw	r2,-164(fp)
   8de50:	0085c83a 	sub	r2,zero,r2
   8de54:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
   8de58:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
   8de5c:	e0bffb17 	ldw	r2,-20(fp)
   8de60:	10000316 	blt	r2,zero,8de70 <_dtoa_r+0x528>
   8de64:	e0bffb17 	ldw	r2,-20(fp)
   8de68:	10800290 	cmplti	r2,r2,10
   8de6c:	1000011e 	bne	r2,zero,8de74 <_dtoa_r+0x52c>
    mode = 0;
   8de70:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
   8de74:	00800044 	movi	r2,1
   8de78:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
   8de7c:	e0bffb17 	ldw	r2,-20(fp)
   8de80:	10800190 	cmplti	r2,r2,6
   8de84:	1000041e 	bne	r2,zero,8de98 <_dtoa_r+0x550>
    {
      mode -= 4;
   8de88:	e0bffb17 	ldw	r2,-20(fp)
   8de8c:	10bfff04 	addi	r2,r2,-4
   8de90:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
   8de94:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
   8de98:	00800044 	movi	r2,1
   8de9c:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
   8dea0:	00bfffc4 	movi	r2,-1
   8dea4:	e0bfd515 	stw	r2,-172(fp)
   8dea8:	e0bfd517 	ldw	r2,-172(fp)
   8deac:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
   8deb0:	e0bffb17 	ldw	r2,-20(fp)
   8deb4:	108001a8 	cmpgeui	r2,r2,6
   8deb8:	10002c1e 	bne	r2,zero,8df6c <_dtoa_r+0x624>
   8debc:	e0bffb17 	ldw	r2,-20(fp)
   8dec0:	100690ba 	slli	r3,r2,2
   8dec4:	00800274 	movhi	r2,9
   8dec8:	10b7b604 	addi	r2,r2,-8488
   8decc:	1885883a 	add	r2,r3,r2
   8ded0:	10800017 	ldw	r2,0(r2)
   8ded4:	1000683a 	jmp	r2
   8ded8:	0008def0 	cmpltui	zero,zero,9083
   8dedc:	0008def0 	cmpltui	zero,zero,9083
   8dee0:	0008df00 	call	8df0 <__alt_mem_MemoriaDados+0x8df0>
   8dee4:	0008df30 	cmpltui	zero,zero,9084
   8dee8:	0008df04 	movi	zero,9084
   8deec:	0008df34 	movhi	zero,9084
    {
    case 0:
    case 1:
      i = 18;
   8def0:	00800484 	movi	r2,18
   8def4:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
   8def8:	e0000215 	stw	zero,8(fp)
      break;
   8defc:	00001b06 	br	8df6c <_dtoa_r+0x624>
    case 2:
      leftright = 0;
   8df00:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
   8df04:	e0800217 	ldw	r2,8(fp)
   8df08:	00800216 	blt	zero,r2,8df14 <_dtoa_r+0x5cc>
	ndigits = 1;
   8df0c:	00800044 	movi	r2,1
   8df10:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
   8df14:	e0800217 	ldw	r2,8(fp)
   8df18:	e0bfd215 	stw	r2,-184(fp)
   8df1c:	e0bfd217 	ldw	r2,-184(fp)
   8df20:	e0bfd515 	stw	r2,-172(fp)
   8df24:	e0bfd517 	ldw	r2,-172(fp)
   8df28:	e0bfd415 	stw	r2,-176(fp)
      break;
   8df2c:	00000f06 	br	8df6c <_dtoa_r+0x624>
    case 3:
      leftright = 0;
   8df30:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
   8df34:	e0c00217 	ldw	r3,8(fp)
   8df38:	e0bfd717 	ldw	r2,-164(fp)
   8df3c:	1885883a 	add	r2,r3,r2
   8df40:	10800044 	addi	r2,r2,1
   8df44:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
   8df48:	e0bfd217 	ldw	r2,-184(fp)
   8df4c:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
   8df50:	e0bfd217 	ldw	r2,-184(fp)
   8df54:	10bfffc4 	addi	r2,r2,-1
   8df58:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
   8df5c:	e0bfd217 	ldw	r2,-184(fp)
   8df60:	00800216 	blt	zero,r2,8df6c <_dtoa_r+0x624>
	i = 1;
   8df64:	00800044 	movi	r2,1
   8df68:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
   8df6c:	00800104 	movi	r2,4
   8df70:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   8df74:	e0bff817 	ldw	r2,-32(fp)
   8df78:	10001115 	stw	zero,68(r2)
   8df7c:	00000806 	br	8dfa0 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
   8df80:	e0bff817 	ldw	r2,-32(fp)
   8df84:	10801117 	ldw	r2,68(r2)
   8df88:	10c00044 	addi	r3,r2,1
   8df8c:	e0bff817 	ldw	r2,-32(fp)
   8df90:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
   8df94:	e0bfd617 	ldw	r2,-168(fp)
   8df98:	1085883a 	add	r2,r2,r2
   8df9c:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   8dfa0:	e0bfd617 	ldw	r2,-168(fp)
   8dfa4:	10800504 	addi	r2,r2,20
   8dfa8:	e0ffd217 	ldw	r3,-184(fp)
   8dfac:	18bff42e 	bgeu	r3,r2,8df80 <__alt_data_end+0xfffdbf80>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
   8dfb0:	e0bff817 	ldw	r2,-32(fp)
   8dfb4:	10801117 	ldw	r2,68(r2)
   8dfb8:	100b883a 	mov	r5,r2
   8dfbc:	e13ff817 	ldw	r4,-32(fp)
   8dfc0:	0090a2c0 	call	90a2c <_Balloc>
   8dfc4:	1007883a 	mov	r3,r2
   8dfc8:	e0bff817 	ldw	r2,-32(fp)
   8dfcc:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
   8dfd0:	e0bff817 	ldw	r2,-32(fp)
   8dfd4:	10801017 	ldw	r2,64(r2)
   8dfd8:	e0bfe915 	stw	r2,-92(fp)
   8dfdc:	e0bfe917 	ldw	r2,-92(fp)
   8dfe0:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
   8dfe4:	e0bfd417 	ldw	r2,-176(fp)
   8dfe8:	10021616 	blt	r2,zero,8e844 <_dtoa_r+0xefc>
   8dfec:	e0bfd417 	ldw	r2,-176(fp)
   8dff0:	108003c8 	cmpgei	r2,r2,15
   8dff4:	1002131e 	bne	r2,zero,8e844 <_dtoa_r+0xefc>
   8dff8:	e0bfdf17 	ldw	r2,-132(fp)
   8dffc:	10021126 	beq	r2,zero,8e844 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
   8e000:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
   8e004:	e0bff217 	ldw	r2,-56(fp)
   8e008:	e0fff317 	ldw	r3,-52(fp)
   8e00c:	e0bff415 	stw	r2,-48(fp)
   8e010:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
   8e014:	e0bfd717 	ldw	r2,-164(fp)
   8e018:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
   8e01c:	e0bfd417 	ldw	r2,-176(fp)
   8e020:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
   8e024:	00800084 	movi	r2,2
   8e028:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
   8e02c:	e0bfd717 	ldw	r2,-164(fp)
   8e030:	0080540e 	bge	zero,r2,8e184 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
   8e034:	e0bfd717 	ldw	r2,-164(fp)
   8e038:	10c003cc 	andi	r3,r2,15
   8e03c:	008002b4 	movhi	r2,10
   8e040:	10847804 	addi	r2,r2,4576
   8e044:	180690fa 	slli	r3,r3,3
   8e048:	10c5883a 	add	r2,r2,r3
   8e04c:	10c00017 	ldw	r3,0(r2)
   8e050:	e0ffe515 	stw	r3,-108(fp)
   8e054:	10800117 	ldw	r2,4(r2)
   8e058:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
   8e05c:	e0bfd717 	ldw	r2,-164(fp)
   8e060:	1005d13a 	srai	r2,r2,4
   8e064:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
   8e068:	e0bfd617 	ldw	r2,-168(fp)
   8e06c:	1080040c 	andi	r2,r2,16
   8e070:	10003426 	beq	r2,zero,8e144 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
   8e074:	e0bfd617 	ldw	r2,-168(fp)
   8e078:	108003cc 	andi	r2,r2,15
   8e07c:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
   8e080:	e0bff217 	ldw	r2,-56(fp)
   8e084:	e0fff317 	ldw	r3,-52(fp)
   8e088:	018002b4 	movhi	r6,10
   8e08c:	3184aa04 	addi	r6,r6,4776
   8e090:	31000817 	ldw	r4,32(r6)
   8e094:	31400917 	ldw	r5,36(r6)
   8e098:	200d883a 	mov	r6,r4
   8e09c:	280f883a 	mov	r7,r5
   8e0a0:	1009883a 	mov	r4,r2
   8e0a4:	180b883a 	mov	r5,r3
   8e0a8:	0082c740 	call	82c74 <__divdf3>
   8e0ac:	1009883a 	mov	r4,r2
   8e0b0:	180b883a 	mov	r5,r3
   8e0b4:	2005883a 	mov	r2,r4
   8e0b8:	2807883a 	mov	r3,r5
   8e0bc:	e0bff215 	stw	r2,-56(fp)
   8e0c0:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
   8e0c4:	e0bfd317 	ldw	r2,-180(fp)
   8e0c8:	10800044 	addi	r2,r2,1
   8e0cc:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
   8e0d0:	00001c06 	br	8e144 <_dtoa_r+0x7fc>
	    if (j & 1)
   8e0d4:	e0bfd617 	ldw	r2,-168(fp)
   8e0d8:	1080004c 	andi	r2,r2,1
   8e0dc:	10001326 	beq	r2,zero,8e12c <_dtoa_r+0x7e4>
	      {
		ieps++;
   8e0e0:	e0bfd317 	ldw	r2,-180(fp)
   8e0e4:	10800044 	addi	r2,r2,1
   8e0e8:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
   8e0ec:	008002b4 	movhi	r2,10
   8e0f0:	1084aa04 	addi	r2,r2,4776
   8e0f4:	e0ffd217 	ldw	r3,-184(fp)
   8e0f8:	180690fa 	slli	r3,r3,3
   8e0fc:	10c9883a 	add	r4,r2,r3
   8e100:	20800017 	ldw	r2,0(r4)
   8e104:	20c00117 	ldw	r3,4(r4)
   8e108:	100d883a 	mov	r6,r2
   8e10c:	180f883a 	mov	r7,r3
   8e110:	e13fe517 	ldw	r4,-108(fp)
   8e114:	e17fe617 	ldw	r5,-104(fp)
   8e118:	00838140 	call	83814 <__muldf3>
   8e11c:	1009883a 	mov	r4,r2
   8e120:	180b883a 	mov	r5,r3
   8e124:	e13fe515 	stw	r4,-108(fp)
   8e128:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
   8e12c:	e0bfd617 	ldw	r2,-168(fp)
   8e130:	1005d07a 	srai	r2,r2,1
   8e134:	e0bfd615 	stw	r2,-168(fp)
   8e138:	e0bfd217 	ldw	r2,-184(fp)
   8e13c:	10800044 	addi	r2,r2,1
   8e140:	e0bfd215 	stw	r2,-184(fp)
   8e144:	e0bfd617 	ldw	r2,-168(fp)
   8e148:	103fe21e 	bne	r2,zero,8e0d4 <__alt_data_end+0xfffdc0d4>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
   8e14c:	e0bff217 	ldw	r2,-56(fp)
   8e150:	e0fff317 	ldw	r3,-52(fp)
   8e154:	e1bfe517 	ldw	r6,-108(fp)
   8e158:	e1ffe617 	ldw	r7,-104(fp)
   8e15c:	1009883a 	mov	r4,r2
   8e160:	180b883a 	mov	r5,r3
   8e164:	0082c740 	call	82c74 <__divdf3>
   8e168:	1009883a 	mov	r4,r2
   8e16c:	180b883a 	mov	r5,r3
   8e170:	2005883a 	mov	r2,r4
   8e174:	2807883a 	mov	r3,r5
   8e178:	e0bff215 	stw	r2,-56(fp)
   8e17c:	e0fff315 	stw	r3,-52(fp)
   8e180:	00004006 	br	8e284 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
   8e184:	e0bfd717 	ldw	r2,-164(fp)
   8e188:	0085c83a 	sub	r2,zero,r2
   8e18c:	e0bfec15 	stw	r2,-80(fp)
   8e190:	e0bfec17 	ldw	r2,-80(fp)
   8e194:	10003b26 	beq	r2,zero,8e284 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
   8e198:	e0bff217 	ldw	r2,-56(fp)
   8e19c:	e0fff317 	ldw	r3,-52(fp)
   8e1a0:	e13fec17 	ldw	r4,-80(fp)
   8e1a4:	214003cc 	andi	r5,r4,15
   8e1a8:	010002b4 	movhi	r4,10
   8e1ac:	21047804 	addi	r4,r4,4576
   8e1b0:	280a90fa 	slli	r5,r5,3
   8e1b4:	214d883a 	add	r6,r4,r5
   8e1b8:	31000017 	ldw	r4,0(r6)
   8e1bc:	31400117 	ldw	r5,4(r6)
   8e1c0:	200d883a 	mov	r6,r4
   8e1c4:	280f883a 	mov	r7,r5
   8e1c8:	1009883a 	mov	r4,r2
   8e1cc:	180b883a 	mov	r5,r3
   8e1d0:	00838140 	call	83814 <__muldf3>
   8e1d4:	1009883a 	mov	r4,r2
   8e1d8:	180b883a 	mov	r5,r3
   8e1dc:	2005883a 	mov	r2,r4
   8e1e0:	2807883a 	mov	r3,r5
   8e1e4:	e0bff215 	stw	r2,-56(fp)
   8e1e8:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
   8e1ec:	e0bfec17 	ldw	r2,-80(fp)
   8e1f0:	1005d13a 	srai	r2,r2,4
   8e1f4:	e0bfd615 	stw	r2,-168(fp)
   8e1f8:	00002006 	br	8e27c <_dtoa_r+0x934>
	    if (j & 1)
   8e1fc:	e0bfd617 	ldw	r2,-168(fp)
   8e200:	1080004c 	andi	r2,r2,1
   8e204:	10001726 	beq	r2,zero,8e264 <_dtoa_r+0x91c>
	      {
		ieps++;
   8e208:	e0bfd317 	ldw	r2,-180(fp)
   8e20c:	10800044 	addi	r2,r2,1
   8e210:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
   8e214:	e0bff217 	ldw	r2,-56(fp)
   8e218:	e0fff317 	ldw	r3,-52(fp)
   8e21c:	010002b4 	movhi	r4,10
   8e220:	2104aa04 	addi	r4,r4,4776
   8e224:	e17fd217 	ldw	r5,-184(fp)
   8e228:	280a90fa 	slli	r5,r5,3
   8e22c:	214d883a 	add	r6,r4,r5
   8e230:	31000017 	ldw	r4,0(r6)
   8e234:	31400117 	ldw	r5,4(r6)
   8e238:	200d883a 	mov	r6,r4
   8e23c:	280f883a 	mov	r7,r5
   8e240:	1009883a 	mov	r4,r2
   8e244:	180b883a 	mov	r5,r3
   8e248:	00838140 	call	83814 <__muldf3>
   8e24c:	1009883a 	mov	r4,r2
   8e250:	180b883a 	mov	r5,r3
   8e254:	2005883a 	mov	r2,r4
   8e258:	2807883a 	mov	r3,r5
   8e25c:	e0bff215 	stw	r2,-56(fp)
   8e260:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
   8e264:	e0bfd617 	ldw	r2,-168(fp)
   8e268:	1005d07a 	srai	r2,r2,1
   8e26c:	e0bfd615 	stw	r2,-168(fp)
   8e270:	e0bfd217 	ldw	r2,-184(fp)
   8e274:	10800044 	addi	r2,r2,1
   8e278:	e0bfd215 	stw	r2,-184(fp)
   8e27c:	e0bfd617 	ldw	r2,-168(fp)
   8e280:	103fde1e 	bne	r2,zero,8e1fc <__alt_data_end+0xfffdc1fc>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
   8e284:	e0bfd817 	ldw	r2,-160(fp)
   8e288:	10002126 	beq	r2,zero,8e310 <_dtoa_r+0x9c8>
   8e28c:	e0bff217 	ldw	r2,-56(fp)
   8e290:	e0fff317 	ldw	r3,-52(fp)
   8e294:	000d883a 	mov	r6,zero
   8e298:	01cffc34 	movhi	r7,16368
   8e29c:	1009883a 	mov	r4,r2
   8e2a0:	180b883a 	mov	r5,r3
   8e2a4:	00837200 	call	83720 <__ledf2>
   8e2a8:	1000190e 	bge	r2,zero,8e310 <_dtoa_r+0x9c8>
   8e2ac:	e0bfd417 	ldw	r2,-176(fp)
   8e2b0:	0080170e 	bge	zero,r2,8e310 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
   8e2b4:	e0bfd517 	ldw	r2,-172(fp)
   8e2b8:	0081550e 	bge	zero,r2,8e810 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
   8e2bc:	e0bfd517 	ldw	r2,-172(fp)
   8e2c0:	e0bfd415 	stw	r2,-176(fp)
	  k--;
   8e2c4:	e0bfd717 	ldw	r2,-164(fp)
   8e2c8:	10bfffc4 	addi	r2,r2,-1
   8e2cc:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
   8e2d0:	e0bff217 	ldw	r2,-56(fp)
   8e2d4:	e0fff317 	ldw	r3,-52(fp)
   8e2d8:	000d883a 	mov	r6,zero
   8e2dc:	01d00934 	movhi	r7,16420
   8e2e0:	1009883a 	mov	r4,r2
   8e2e4:	180b883a 	mov	r5,r3
   8e2e8:	00838140 	call	83814 <__muldf3>
   8e2ec:	1009883a 	mov	r4,r2
   8e2f0:	180b883a 	mov	r5,r3
   8e2f4:	2005883a 	mov	r2,r4
   8e2f8:	2807883a 	mov	r3,r5
   8e2fc:	e0bff215 	stw	r2,-56(fp)
   8e300:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
   8e304:	e0bfd317 	ldw	r2,-180(fp)
   8e308:	10800044 	addi	r2,r2,1
   8e30c:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
   8e310:	e13fd317 	ldw	r4,-180(fp)
   8e314:	00849fc0 	call	849fc <__floatsidf>
   8e318:	1011883a 	mov	r8,r2
   8e31c:	1813883a 	mov	r9,r3
   8e320:	e0bff217 	ldw	r2,-56(fp)
   8e324:	e0fff317 	ldw	r3,-52(fp)
   8e328:	100d883a 	mov	r6,r2
   8e32c:	180f883a 	mov	r7,r3
   8e330:	4009883a 	mov	r4,r8
   8e334:	480b883a 	mov	r5,r9
   8e338:	00838140 	call	83814 <__muldf3>
   8e33c:	1009883a 	mov	r4,r2
   8e340:	180b883a 	mov	r5,r3
   8e344:	2005883a 	mov	r2,r4
   8e348:	2807883a 	mov	r3,r5
   8e34c:	000d883a 	mov	r6,zero
   8e350:	01d00734 	movhi	r7,16412
   8e354:	1009883a 	mov	r4,r2
   8e358:	180b883a 	mov	r5,r3
   8e35c:	00823c80 	call	823c8 <__adddf3>
   8e360:	1009883a 	mov	r4,r2
   8e364:	180b883a 	mov	r5,r3
   8e368:	2005883a 	mov	r2,r4
   8e36c:	2807883a 	mov	r3,r5
   8e370:	e0bff615 	stw	r2,-40(fp)
   8e374:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
   8e378:	e0fff717 	ldw	r3,-36(fp)
   8e37c:	00bf3034 	movhi	r2,64704
   8e380:	1885883a 	add	r2,r3,r2
   8e384:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
   8e388:	e0bfd417 	ldw	r2,-176(fp)
   8e38c:	1000271e 	bne	r2,zero,8e42c <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
   8e390:	e03fe315 	stw	zero,-116(fp)
   8e394:	e0bfe317 	ldw	r2,-116(fp)
   8e398:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
   8e39c:	e0bff217 	ldw	r2,-56(fp)
   8e3a0:	e0fff317 	ldw	r3,-52(fp)
   8e3a4:	000d883a 	mov	r6,zero
   8e3a8:	01d00534 	movhi	r7,16404
   8e3ac:	1009883a 	mov	r4,r2
   8e3b0:	180b883a 	mov	r5,r3
   8e3b4:	00840800 	call	84080 <__subdf3>
   8e3b8:	1009883a 	mov	r4,r2
   8e3bc:	180b883a 	mov	r5,r3
   8e3c0:	2005883a 	mov	r2,r4
   8e3c4:	2807883a 	mov	r3,r5
   8e3c8:	e0bff215 	stw	r2,-56(fp)
   8e3cc:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
   8e3d0:	e0bff217 	ldw	r2,-56(fp)
   8e3d4:	e0fff317 	ldw	r3,-52(fp)
   8e3d8:	e13ff617 	ldw	r4,-40(fp)
   8e3dc:	e17ff717 	ldw	r5,-36(fp)
   8e3e0:	200d883a 	mov	r6,r4
   8e3e4:	280f883a 	mov	r7,r5
   8e3e8:	1009883a 	mov	r4,r2
   8e3ec:	180b883a 	mov	r5,r3
   8e3f0:	00836440 	call	83644 <__gedf2>
   8e3f4:	0082eb16 	blt	zero,r2,8efa4 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
   8e3f8:	e23ff217 	ldw	r8,-56(fp)
   8e3fc:	e27ff317 	ldw	r9,-52(fp)
   8e400:	e0bff617 	ldw	r2,-40(fp)
   8e404:	e0fff717 	ldw	r3,-36(fp)
   8e408:	1021883a 	mov	r16,r2
   8e40c:	1c60003c 	xorhi	r17,r3,32768
   8e410:	800d883a 	mov	r6,r16
   8e414:	880f883a 	mov	r7,r17
   8e418:	4009883a 	mov	r4,r8
   8e41c:	480b883a 	mov	r5,r9
   8e420:	00837200 	call	83720 <__ledf2>
   8e424:	1002da16 	blt	r2,zero,8ef90 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
   8e428:	0000fc06 	br	8e81c <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
   8e42c:	e0bfd917 	ldw	r2,-156(fp)
   8e430:	10007a26 	beq	r2,zero,8e61c <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
   8e434:	e0bfd417 	ldw	r2,-176(fp)
   8e438:	10ffffc4 	addi	r3,r2,-1
   8e43c:	008002b4 	movhi	r2,10
   8e440:	10847804 	addi	r2,r2,4576
   8e444:	180690fa 	slli	r3,r3,3
   8e448:	10c9883a 	add	r4,r2,r3
   8e44c:	20800017 	ldw	r2,0(r4)
   8e450:	20c00117 	ldw	r3,4(r4)
   8e454:	100d883a 	mov	r6,r2
   8e458:	180f883a 	mov	r7,r3
   8e45c:	0009883a 	mov	r4,zero
   8e460:	014ff834 	movhi	r5,16352
   8e464:	0082c740 	call	82c74 <__divdf3>
   8e468:	1009883a 	mov	r4,r2
   8e46c:	180b883a 	mov	r5,r3
   8e470:	2011883a 	mov	r8,r4
   8e474:	2813883a 	mov	r9,r5
   8e478:	e0bff617 	ldw	r2,-40(fp)
   8e47c:	e0fff717 	ldw	r3,-36(fp)
   8e480:	100d883a 	mov	r6,r2
   8e484:	180f883a 	mov	r7,r3
   8e488:	4009883a 	mov	r4,r8
   8e48c:	480b883a 	mov	r5,r9
   8e490:	00840800 	call	84080 <__subdf3>
   8e494:	1009883a 	mov	r4,r2
   8e498:	180b883a 	mov	r5,r3
   8e49c:	2005883a 	mov	r2,r4
   8e4a0:	2807883a 	mov	r3,r5
   8e4a4:	e0bff615 	stw	r2,-40(fp)
   8e4a8:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
   8e4ac:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
   8e4b0:	e0bff217 	ldw	r2,-56(fp)
   8e4b4:	e0fff317 	ldw	r3,-52(fp)
   8e4b8:	1009883a 	mov	r4,r2
   8e4bc:	180b883a 	mov	r5,r3
   8e4c0:	008497c0 	call	8497c <__fixdfsi>
   8e4c4:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   8e4c8:	e43ff217 	ldw	r16,-56(fp)
   8e4cc:	e47ff317 	ldw	r17,-52(fp)
   8e4d0:	e13fed17 	ldw	r4,-76(fp)
   8e4d4:	00849fc0 	call	849fc <__floatsidf>
   8e4d8:	1009883a 	mov	r4,r2
   8e4dc:	180b883a 	mov	r5,r3
   8e4e0:	200d883a 	mov	r6,r4
   8e4e4:	280f883a 	mov	r7,r5
   8e4e8:	8009883a 	mov	r4,r16
   8e4ec:	880b883a 	mov	r5,r17
   8e4f0:	00840800 	call	84080 <__subdf3>
   8e4f4:	1009883a 	mov	r4,r2
   8e4f8:	180b883a 	mov	r5,r3
   8e4fc:	2005883a 	mov	r2,r4
   8e500:	2807883a 	mov	r3,r5
   8e504:	e0bff215 	stw	r2,-56(fp)
   8e508:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   8e50c:	e0bfe717 	ldw	r2,-100(fp)
   8e510:	10c00044 	addi	r3,r2,1
   8e514:	e0ffe715 	stw	r3,-100(fp)
   8e518:	e0ffed17 	ldw	r3,-76(fp)
   8e51c:	18c00c04 	addi	r3,r3,48
   8e520:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
   8e524:	e0bff217 	ldw	r2,-56(fp)
   8e528:	e0fff317 	ldw	r3,-52(fp)
   8e52c:	e13ff617 	ldw	r4,-40(fp)
   8e530:	e17ff717 	ldw	r5,-36(fp)
   8e534:	200d883a 	mov	r6,r4
   8e538:	280f883a 	mov	r7,r5
   8e53c:	1009883a 	mov	r4,r2
   8e540:	180b883a 	mov	r5,r3
   8e544:	00837200 	call	83720 <__ledf2>
   8e548:	1003c416 	blt	r2,zero,8f45c <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
   8e54c:	e0bff217 	ldw	r2,-56(fp)
   8e550:	e0fff317 	ldw	r3,-52(fp)
   8e554:	100d883a 	mov	r6,r2
   8e558:	180f883a 	mov	r7,r3
   8e55c:	0009883a 	mov	r4,zero
   8e560:	014ffc34 	movhi	r5,16368
   8e564:	00840800 	call	84080 <__subdf3>
   8e568:	1009883a 	mov	r4,r2
   8e56c:	180b883a 	mov	r5,r3
   8e570:	2011883a 	mov	r8,r4
   8e574:	2813883a 	mov	r9,r5
   8e578:	e0bff617 	ldw	r2,-40(fp)
   8e57c:	e0fff717 	ldw	r3,-36(fp)
   8e580:	100d883a 	mov	r6,r2
   8e584:	180f883a 	mov	r7,r3
   8e588:	4009883a 	mov	r4,r8
   8e58c:	480b883a 	mov	r5,r9
   8e590:	00837200 	call	83720 <__ledf2>
   8e594:	10012916 	blt	r2,zero,8ea3c <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
   8e598:	e0bfd217 	ldw	r2,-184(fp)
   8e59c:	10800044 	addi	r2,r2,1
   8e5a0:	e0bfd215 	stw	r2,-184(fp)
   8e5a4:	e0ffd217 	ldw	r3,-184(fp)
   8e5a8:	e0bfd417 	ldw	r2,-176(fp)
   8e5ac:	18809a0e 	bge	r3,r2,8e818 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
   8e5b0:	e0bff617 	ldw	r2,-40(fp)
   8e5b4:	e0fff717 	ldw	r3,-36(fp)
   8e5b8:	000d883a 	mov	r6,zero
   8e5bc:	01d00934 	movhi	r7,16420
   8e5c0:	1009883a 	mov	r4,r2
   8e5c4:	180b883a 	mov	r5,r3
   8e5c8:	00838140 	call	83814 <__muldf3>
   8e5cc:	1009883a 	mov	r4,r2
   8e5d0:	180b883a 	mov	r5,r3
   8e5d4:	2005883a 	mov	r2,r4
   8e5d8:	2807883a 	mov	r3,r5
   8e5dc:	e0bff615 	stw	r2,-40(fp)
   8e5e0:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
   8e5e4:	e0bff217 	ldw	r2,-56(fp)
   8e5e8:	e0fff317 	ldw	r3,-52(fp)
   8e5ec:	000d883a 	mov	r6,zero
   8e5f0:	01d00934 	movhi	r7,16420
   8e5f4:	1009883a 	mov	r4,r2
   8e5f8:	180b883a 	mov	r5,r3
   8e5fc:	00838140 	call	83814 <__muldf3>
   8e600:	1009883a 	mov	r4,r2
   8e604:	180b883a 	mov	r5,r3
   8e608:	2005883a 	mov	r2,r4
   8e60c:	2807883a 	mov	r3,r5
   8e610:	e0bff215 	stw	r2,-56(fp)
   8e614:	e0fff315 	stw	r3,-52(fp)
	    }
   8e618:	003fa506 	br	8e4b0 <__alt_data_end+0xfffdc4b0>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
   8e61c:	e0bff617 	ldw	r2,-40(fp)
   8e620:	e0fff717 	ldw	r3,-36(fp)
   8e624:	e13fd417 	ldw	r4,-176(fp)
   8e628:	217fffc4 	addi	r5,r4,-1
   8e62c:	010002b4 	movhi	r4,10
   8e630:	21047804 	addi	r4,r4,4576
   8e634:	280a90fa 	slli	r5,r5,3
   8e638:	214d883a 	add	r6,r4,r5
   8e63c:	31000017 	ldw	r4,0(r6)
   8e640:	31400117 	ldw	r5,4(r6)
   8e644:	200d883a 	mov	r6,r4
   8e648:	280f883a 	mov	r7,r5
   8e64c:	1009883a 	mov	r4,r2
   8e650:	180b883a 	mov	r5,r3
   8e654:	00838140 	call	83814 <__muldf3>
   8e658:	1009883a 	mov	r4,r2
   8e65c:	180b883a 	mov	r5,r3
   8e660:	2005883a 	mov	r2,r4
   8e664:	2807883a 	mov	r3,r5
   8e668:	e0bff615 	stw	r2,-40(fp)
   8e66c:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
   8e670:	00800044 	movi	r2,1
   8e674:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
   8e678:	e0bff217 	ldw	r2,-56(fp)
   8e67c:	e0fff317 	ldw	r3,-52(fp)
   8e680:	1009883a 	mov	r4,r2
   8e684:	180b883a 	mov	r5,r3
   8e688:	008497c0 	call	8497c <__fixdfsi>
   8e68c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   8e690:	e43ff217 	ldw	r16,-56(fp)
   8e694:	e47ff317 	ldw	r17,-52(fp)
   8e698:	e13fed17 	ldw	r4,-76(fp)
   8e69c:	00849fc0 	call	849fc <__floatsidf>
   8e6a0:	1009883a 	mov	r4,r2
   8e6a4:	180b883a 	mov	r5,r3
   8e6a8:	200d883a 	mov	r6,r4
   8e6ac:	280f883a 	mov	r7,r5
   8e6b0:	8009883a 	mov	r4,r16
   8e6b4:	880b883a 	mov	r5,r17
   8e6b8:	00840800 	call	84080 <__subdf3>
   8e6bc:	1009883a 	mov	r4,r2
   8e6c0:	180b883a 	mov	r5,r3
   8e6c4:	2005883a 	mov	r2,r4
   8e6c8:	2807883a 	mov	r3,r5
   8e6cc:	e0bff215 	stw	r2,-56(fp)
   8e6d0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   8e6d4:	e0bfe717 	ldw	r2,-100(fp)
   8e6d8:	10c00044 	addi	r3,r2,1
   8e6dc:	e0ffe715 	stw	r3,-100(fp)
   8e6e0:	e0ffed17 	ldw	r3,-76(fp)
   8e6e4:	18c00c04 	addi	r3,r3,48
   8e6e8:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
   8e6ec:	e0ffd217 	ldw	r3,-184(fp)
   8e6f0:	e0bfd417 	ldw	r2,-176(fp)
   8e6f4:	1880351e 	bne	r3,r2,8e7cc <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
   8e6f8:	e43ff217 	ldw	r16,-56(fp)
   8e6fc:	e47ff317 	ldw	r17,-52(fp)
   8e700:	e0bff617 	ldw	r2,-40(fp)
   8e704:	e0fff717 	ldw	r3,-36(fp)
   8e708:	000d883a 	mov	r6,zero
   8e70c:	01cff834 	movhi	r7,16352
   8e710:	1009883a 	mov	r4,r2
   8e714:	180b883a 	mov	r5,r3
   8e718:	00823c80 	call	823c8 <__adddf3>
   8e71c:	1009883a 	mov	r4,r2
   8e720:	180b883a 	mov	r5,r3
   8e724:	2005883a 	mov	r2,r4
   8e728:	2807883a 	mov	r3,r5
   8e72c:	100d883a 	mov	r6,r2
   8e730:	180f883a 	mov	r7,r3
   8e734:	8009883a 	mov	r4,r16
   8e738:	880b883a 	mov	r5,r17
   8e73c:	00836440 	call	83644 <__gedf2>
   8e740:	0080c016 	blt	zero,r2,8ea44 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
   8e744:	e43ff217 	ldw	r16,-56(fp)
   8e748:	e47ff317 	ldw	r17,-52(fp)
   8e74c:	e0bff617 	ldw	r2,-40(fp)
   8e750:	e0fff717 	ldw	r3,-36(fp)
   8e754:	100d883a 	mov	r6,r2
   8e758:	180f883a 	mov	r7,r3
   8e75c:	0009883a 	mov	r4,zero
   8e760:	014ff834 	movhi	r5,16352
   8e764:	00840800 	call	84080 <__subdf3>
   8e768:	1009883a 	mov	r4,r2
   8e76c:	180b883a 	mov	r5,r3
   8e770:	2005883a 	mov	r2,r4
   8e774:	2807883a 	mov	r3,r5
   8e778:	100d883a 	mov	r6,r2
   8e77c:	180f883a 	mov	r7,r3
   8e780:	8009883a 	mov	r4,r16
   8e784:	880b883a 	mov	r5,r17
   8e788:	00837200 	call	83720 <__ledf2>
   8e78c:	10000116 	blt	r2,zero,8e794 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
   8e790:	00002206 	br	8e81c <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
   8e794:	e0bfe717 	ldw	r2,-100(fp)
   8e798:	10bfffc4 	addi	r2,r2,-1
   8e79c:	e0bfe715 	stw	r2,-100(fp)
   8e7a0:	e0bfe717 	ldw	r2,-100(fp)
   8e7a4:	10800003 	ldbu	r2,0(r2)
   8e7a8:	10803fcc 	andi	r2,r2,255
   8e7ac:	1080201c 	xori	r2,r2,128
   8e7b0:	10bfe004 	addi	r2,r2,-128
   8e7b4:	10800c20 	cmpeqi	r2,r2,48
   8e7b8:	103ff61e 	bne	r2,zero,8e794 <__alt_data_end+0xfffdc794>
		      s++;
   8e7bc:	e0bfe717 	ldw	r2,-100(fp)
   8e7c0:	10800044 	addi	r2,r2,1
   8e7c4:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
   8e7c8:	00032506 	br	8f460 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
   8e7cc:	e0bfd217 	ldw	r2,-184(fp)
   8e7d0:	10800044 	addi	r2,r2,1
   8e7d4:	e0bfd215 	stw	r2,-184(fp)
   8e7d8:	e0bff217 	ldw	r2,-56(fp)
   8e7dc:	e0fff317 	ldw	r3,-52(fp)
   8e7e0:	000d883a 	mov	r6,zero
   8e7e4:	01d00934 	movhi	r7,16420
   8e7e8:	1009883a 	mov	r4,r2
   8e7ec:	180b883a 	mov	r5,r3
   8e7f0:	00838140 	call	83814 <__muldf3>
   8e7f4:	1009883a 	mov	r4,r2
   8e7f8:	180b883a 	mov	r5,r3
   8e7fc:	2005883a 	mov	r2,r4
   8e800:	2807883a 	mov	r3,r5
   8e804:	e0bff215 	stw	r2,-56(fp)
   8e808:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
   8e80c:	003f9a06 	br	8e678 <__alt_data_end+0xfffdc678>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
   8e810:	0001883a 	nop
   8e814:	00000106 	br	8e81c <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
   8e818:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
   8e81c:	e0bfe917 	ldw	r2,-92(fp)
   8e820:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
   8e824:	e0bff417 	ldw	r2,-48(fp)
   8e828:	e0fff517 	ldw	r3,-44(fp)
   8e82c:	e0bff215 	stw	r2,-56(fp)
   8e830:	e0fff315 	stw	r3,-52(fp)
      k = k0;
   8e834:	e0bfea17 	ldw	r2,-88(fp)
   8e838:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
   8e83c:	e0bfeb17 	ldw	r2,-84(fp)
   8e840:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
   8e844:	e0bff117 	ldw	r2,-60(fp)
   8e848:	1000b816 	blt	r2,zero,8eb2c <_dtoa_r+0x11e4>
   8e84c:	e0bfd717 	ldw	r2,-164(fp)
   8e850:	108003c8 	cmpgei	r2,r2,15
   8e854:	1000b51e 	bne	r2,zero,8eb2c <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
   8e858:	008002b4 	movhi	r2,10
   8e85c:	10847804 	addi	r2,r2,4576
   8e860:	e0ffd717 	ldw	r3,-164(fp)
   8e864:	180690fa 	slli	r3,r3,3
   8e868:	10c5883a 	add	r2,r2,r3
   8e86c:	10c00017 	ldw	r3,0(r2)
   8e870:	e0ffe515 	stw	r3,-108(fp)
   8e874:	10800117 	ldw	r2,4(r2)
   8e878:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
   8e87c:	e0800217 	ldw	r2,8(fp)
   8e880:	1000190e 	bge	r2,zero,8e8e8 <_dtoa_r+0xfa0>
   8e884:	e0bfd417 	ldw	r2,-176(fp)
   8e888:	00801716 	blt	zero,r2,8e8e8 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
   8e88c:	e03fe315 	stw	zero,-116(fp)
   8e890:	e0bfe317 	ldw	r2,-116(fp)
   8e894:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
   8e898:	e0bfd417 	ldw	r2,-176(fp)
   8e89c:	1001bd16 	blt	r2,zero,8ef94 <_dtoa_r+0x164c>
   8e8a0:	e43ff217 	ldw	r16,-56(fp)
   8e8a4:	e47ff317 	ldw	r17,-52(fp)
   8e8a8:	000d883a 	mov	r6,zero
   8e8ac:	01d00534 	movhi	r7,16404
   8e8b0:	e13fe517 	ldw	r4,-108(fp)
   8e8b4:	e17fe617 	ldw	r5,-104(fp)
   8e8b8:	00838140 	call	83814 <__muldf3>
   8e8bc:	1009883a 	mov	r4,r2
   8e8c0:	180b883a 	mov	r5,r3
   8e8c4:	2005883a 	mov	r2,r4
   8e8c8:	2807883a 	mov	r3,r5
   8e8cc:	100d883a 	mov	r6,r2
   8e8d0:	180f883a 	mov	r7,r3
   8e8d4:	8009883a 	mov	r4,r16
   8e8d8:	880b883a 	mov	r5,r17
   8e8dc:	00837200 	call	83720 <__ledf2>
   8e8e0:	0081ac0e 	bge	zero,r2,8ef94 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
   8e8e4:	0001b006 	br	8efa8 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
   8e8e8:	00800044 	movi	r2,1
   8e8ec:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
   8e8f0:	e0bff217 	ldw	r2,-56(fp)
   8e8f4:	e0fff317 	ldw	r3,-52(fp)
   8e8f8:	e1bfe517 	ldw	r6,-108(fp)
   8e8fc:	e1ffe617 	ldw	r7,-104(fp)
   8e900:	1009883a 	mov	r4,r2
   8e904:	180b883a 	mov	r5,r3
   8e908:	0082c740 	call	82c74 <__divdf3>
   8e90c:	1009883a 	mov	r4,r2
   8e910:	180b883a 	mov	r5,r3
   8e914:	2005883a 	mov	r2,r4
   8e918:	2807883a 	mov	r3,r5
   8e91c:	1009883a 	mov	r4,r2
   8e920:	180b883a 	mov	r5,r3
   8e924:	008497c0 	call	8497c <__fixdfsi>
   8e928:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
   8e92c:	e43ff217 	ldw	r16,-56(fp)
   8e930:	e47ff317 	ldw	r17,-52(fp)
   8e934:	e13fed17 	ldw	r4,-76(fp)
   8e938:	00849fc0 	call	849fc <__floatsidf>
   8e93c:	1011883a 	mov	r8,r2
   8e940:	1813883a 	mov	r9,r3
   8e944:	e1bfe517 	ldw	r6,-108(fp)
   8e948:	e1ffe617 	ldw	r7,-104(fp)
   8e94c:	4009883a 	mov	r4,r8
   8e950:	480b883a 	mov	r5,r9
   8e954:	00838140 	call	83814 <__muldf3>
   8e958:	1009883a 	mov	r4,r2
   8e95c:	180b883a 	mov	r5,r3
   8e960:	2005883a 	mov	r2,r4
   8e964:	2807883a 	mov	r3,r5
   8e968:	100d883a 	mov	r6,r2
   8e96c:	180f883a 	mov	r7,r3
   8e970:	8009883a 	mov	r4,r16
   8e974:	880b883a 	mov	r5,r17
   8e978:	00840800 	call	84080 <__subdf3>
   8e97c:	1009883a 	mov	r4,r2
   8e980:	180b883a 	mov	r5,r3
   8e984:	2005883a 	mov	r2,r4
   8e988:	2807883a 	mov	r3,r5
   8e98c:	e0bff215 	stw	r2,-56(fp)
   8e990:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
   8e994:	e0bfe717 	ldw	r2,-100(fp)
   8e998:	10c00044 	addi	r3,r2,1
   8e99c:	e0ffe715 	stw	r3,-100(fp)
   8e9a0:	e0ffed17 	ldw	r3,-76(fp)
   8e9a4:	18c00c04 	addi	r3,r3,48
   8e9a8:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   8e9ac:	e0ffd217 	ldw	r3,-184(fp)
   8e9b0:	e0bfd417 	ldw	r2,-176(fp)
   8e9b4:	1880401e 	bne	r3,r2,8eab8 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
   8e9b8:	e0bff217 	ldw	r2,-56(fp)
   8e9bc:	e0fff317 	ldw	r3,-52(fp)
   8e9c0:	100d883a 	mov	r6,r2
   8e9c4:	180f883a 	mov	r7,r3
   8e9c8:	1009883a 	mov	r4,r2
   8e9cc:	180b883a 	mov	r5,r3
   8e9d0:	00823c80 	call	823c8 <__adddf3>
   8e9d4:	1009883a 	mov	r4,r2
   8e9d8:	180b883a 	mov	r5,r3
   8e9dc:	2005883a 	mov	r2,r4
   8e9e0:	2807883a 	mov	r3,r5
   8e9e4:	e0bff215 	stw	r2,-56(fp)
   8e9e8:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
   8e9ec:	e0bff217 	ldw	r2,-56(fp)
   8e9f0:	e0fff317 	ldw	r3,-52(fp)
   8e9f4:	e1bfe517 	ldw	r6,-108(fp)
   8e9f8:	e1ffe617 	ldw	r7,-104(fp)
   8e9fc:	1009883a 	mov	r4,r2
   8ea00:	180b883a 	mov	r5,r3
   8ea04:	00836440 	call	83644 <__gedf2>
   8ea08:	00801a16 	blt	zero,r2,8ea74 <_dtoa_r+0x112c>
   8ea0c:	e0bff217 	ldw	r2,-56(fp)
   8ea10:	e0fff317 	ldw	r3,-52(fp)
   8ea14:	e1bfe517 	ldw	r6,-108(fp)
   8ea18:	e1ffe617 	ldw	r7,-104(fp)
   8ea1c:	1009883a 	mov	r4,r2
   8ea20:	180b883a 	mov	r5,r3
   8ea24:	009dde80 	call	9dde8 <__eqdf2>
   8ea28:	10003c1e 	bne	r2,zero,8eb1c <_dtoa_r+0x11d4>
   8ea2c:	e0bfed17 	ldw	r2,-76(fp)
   8ea30:	1080004c 	andi	r2,r2,1
   8ea34:	10003926 	beq	r2,zero,8eb1c <_dtoa_r+0x11d4>
   8ea38:	00000e06 	br	8ea74 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
   8ea3c:	0001883a 	nop
   8ea40:	00000c06 	br	8ea74 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
   8ea44:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   8ea48:	00000a06 	br	8ea74 <_dtoa_r+0x112c>
		    if (s == s0)
   8ea4c:	e0ffe717 	ldw	r3,-100(fp)
   8ea50:	e0bfe917 	ldw	r2,-92(fp)
   8ea54:	1880071e 	bne	r3,r2,8ea74 <_dtoa_r+0x112c>
		      {
			k++;
   8ea58:	e0bfd717 	ldw	r2,-164(fp)
   8ea5c:	10800044 	addi	r2,r2,1
   8ea60:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
   8ea64:	e0bfe717 	ldw	r2,-100(fp)
   8ea68:	00c00c04 	movi	r3,48
   8ea6c:	10c00005 	stb	r3,0(r2)
			break;
   8ea70:	00000a06 	br	8ea9c <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   8ea74:	e0bfe717 	ldw	r2,-100(fp)
   8ea78:	10bfffc4 	addi	r2,r2,-1
   8ea7c:	e0bfe715 	stw	r2,-100(fp)
   8ea80:	e0bfe717 	ldw	r2,-100(fp)
   8ea84:	10800003 	ldbu	r2,0(r2)
   8ea88:	10803fcc 	andi	r2,r2,255
   8ea8c:	1080201c 	xori	r2,r2,128
   8ea90:	10bfe004 	addi	r2,r2,-128
   8ea94:	10800e60 	cmpeqi	r2,r2,57
   8ea98:	103fec1e 	bne	r2,zero,8ea4c <__alt_data_end+0xfffdca4c>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
   8ea9c:	e0bfe717 	ldw	r2,-100(fp)
   8eaa0:	10c00044 	addi	r3,r2,1
   8eaa4:	e0ffe715 	stw	r3,-100(fp)
   8eaa8:	10c00003 	ldbu	r3,0(r2)
   8eaac:	18c00044 	addi	r3,r3,1
   8eab0:	10c00005 	stb	r3,0(r2)
		}
	      break;
   8eab4:	00001906 	br	8eb1c <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
   8eab8:	e0bff217 	ldw	r2,-56(fp)
   8eabc:	e0fff317 	ldw	r3,-52(fp)
   8eac0:	000d883a 	mov	r6,zero
   8eac4:	01d00934 	movhi	r7,16420
   8eac8:	1009883a 	mov	r4,r2
   8eacc:	180b883a 	mov	r5,r3
   8ead0:	00838140 	call	83814 <__muldf3>
   8ead4:	1009883a 	mov	r4,r2
   8ead8:	180b883a 	mov	r5,r3
   8eadc:	2005883a 	mov	r2,r4
   8eae0:	2807883a 	mov	r3,r5
   8eae4:	e0bff215 	stw	r2,-56(fp)
   8eae8:	e0fff315 	stw	r3,-52(fp)
   8eaec:	e0bff217 	ldw	r2,-56(fp)
   8eaf0:	e0fff317 	ldw	r3,-52(fp)
   8eaf4:	000d883a 	mov	r6,zero
   8eaf8:	000f883a 	mov	r7,zero
   8eafc:	1009883a 	mov	r4,r2
   8eb00:	180b883a 	mov	r5,r3
   8eb04:	009dde80 	call	9dde8 <__eqdf2>
   8eb08:	10000626 	beq	r2,zero,8eb24 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
   8eb0c:	e0bfd217 	ldw	r2,-184(fp)
   8eb10:	10800044 	addi	r2,r2,1
   8eb14:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
   8eb18:	003f7506 	br	8e8f0 <__alt_data_end+0xfffdc8f0>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
   8eb1c:	0001883a 	nop
   8eb20:	00024f06 	br	8f460 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
   8eb24:	0001883a 	nop
	}
      goto ret1;
   8eb28:	00024d06 	br	8f460 <_dtoa_r+0x1b18>
    }

  m2 = b2;
   8eb2c:	e0bfcf17 	ldw	r2,-196(fp)
   8eb30:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
   8eb34:	e0bfd017 	ldw	r2,-192(fp)
   8eb38:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
   8eb3c:	e03fe215 	stw	zero,-120(fp)
   8eb40:	e0bfe217 	ldw	r2,-120(fp)
   8eb44:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
   8eb48:	e0bfd917 	ldw	r2,-156(fp)
   8eb4c:	10003a26 	beq	r2,zero,8ec38 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
   8eb50:	e0bffb17 	ldw	r2,-20(fp)
   8eb54:	10800088 	cmpgei	r2,r2,2
   8eb58:	10000a1e 	bne	r2,zero,8eb84 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   8eb5c:	e0bfe017 	ldw	r2,-128(fp)
   8eb60:	10000326 	beq	r2,zero,8eb70 <_dtoa_r+0x1228>
   8eb64:	e0bff117 	ldw	r2,-60(fp)
   8eb68:	10810cc4 	addi	r2,r2,1075
   8eb6c:	00000306 	br	8eb7c <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
   8eb70:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   8eb74:	00c00d84 	movi	r3,54
   8eb78:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
   8eb7c:	e0bfd215 	stw	r2,-184(fp)
   8eb80:	00002106 	br	8ec08 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
   8eb84:	e0bfd417 	ldw	r2,-176(fp)
   8eb88:	10bfffc4 	addi	r2,r2,-1
   8eb8c:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
   8eb90:	e0ffdb17 	ldw	r3,-148(fp)
   8eb94:	e0bfd617 	ldw	r2,-168(fp)
   8eb98:	18800516 	blt	r3,r2,8ebb0 <_dtoa_r+0x1268>
	    m5 -= j;
   8eb9c:	e0ffdb17 	ldw	r3,-148(fp)
   8eba0:	e0bfd617 	ldw	r2,-168(fp)
   8eba4:	1885c83a 	sub	r2,r3,r2
   8eba8:	e0bfdb15 	stw	r2,-148(fp)
   8ebac:	00000d06 	br	8ebe4 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
   8ebb0:	e0ffd617 	ldw	r3,-168(fp)
   8ebb4:	e0bfdb17 	ldw	r2,-148(fp)
   8ebb8:	1885c83a 	sub	r2,r3,r2
   8ebbc:	e0bfd615 	stw	r2,-168(fp)
   8ebc0:	e0bfd617 	ldw	r2,-168(fp)
   8ebc4:	e0ffdd17 	ldw	r3,-140(fp)
   8ebc8:	1885883a 	add	r2,r3,r2
   8ebcc:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
   8ebd0:	e0ffd017 	ldw	r3,-192(fp)
   8ebd4:	e0bfd617 	ldw	r2,-168(fp)
   8ebd8:	1885883a 	add	r2,r3,r2
   8ebdc:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
   8ebe0:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
   8ebe4:	e0bfd417 	ldw	r2,-176(fp)
   8ebe8:	e0bfd215 	stw	r2,-184(fp)
   8ebec:	e0bfd217 	ldw	r2,-184(fp)
   8ebf0:	1000050e 	bge	r2,zero,8ec08 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
   8ebf4:	e0ffda17 	ldw	r3,-152(fp)
   8ebf8:	e0bfd217 	ldw	r2,-184(fp)
   8ebfc:	1885c83a 	sub	r2,r3,r2
   8ec00:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
   8ec04:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
   8ec08:	e0ffcf17 	ldw	r3,-196(fp)
   8ec0c:	e0bfd217 	ldw	r2,-184(fp)
   8ec10:	1885883a 	add	r2,r3,r2
   8ec14:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
   8ec18:	e0ffdc17 	ldw	r3,-144(fp)
   8ec1c:	e0bfd217 	ldw	r2,-184(fp)
   8ec20:	1885883a 	add	r2,r3,r2
   8ec24:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
   8ec28:	01400044 	movi	r5,1
   8ec2c:	e13ff817 	ldw	r4,-32(fp)
   8ec30:	009108c0 	call	9108c <__i2b>
   8ec34:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
   8ec38:	e0bfda17 	ldw	r2,-152(fp)
   8ec3c:	0080130e 	bge	zero,r2,8ec8c <_dtoa_r+0x1344>
   8ec40:	e0bfdc17 	ldw	r2,-144(fp)
   8ec44:	0080110e 	bge	zero,r2,8ec8c <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
   8ec48:	e0ffda17 	ldw	r3,-152(fp)
   8ec4c:	e0bfdc17 	ldw	r2,-144(fp)
   8ec50:	1880010e 	bge	r3,r2,8ec58 <_dtoa_r+0x1310>
   8ec54:	1805883a 	mov	r2,r3
   8ec58:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
   8ec5c:	e0ffcf17 	ldw	r3,-196(fp)
   8ec60:	e0bfd217 	ldw	r2,-184(fp)
   8ec64:	1885c83a 	sub	r2,r3,r2
   8ec68:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
   8ec6c:	e0ffda17 	ldw	r3,-152(fp)
   8ec70:	e0bfd217 	ldw	r2,-184(fp)
   8ec74:	1885c83a 	sub	r2,r3,r2
   8ec78:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
   8ec7c:	e0ffdc17 	ldw	r3,-144(fp)
   8ec80:	e0bfd217 	ldw	r2,-184(fp)
   8ec84:	1885c83a 	sub	r2,r3,r2
   8ec88:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
   8ec8c:	e0bfd017 	ldw	r2,-192(fp)
   8ec90:	0080240e 	bge	zero,r2,8ed24 <_dtoa_r+0x13dc>
    {
      if (leftright)
   8ec94:	e0bfd917 	ldw	r2,-156(fp)
   8ec98:	10001d26 	beq	r2,zero,8ed10 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
   8ec9c:	e0bfdb17 	ldw	r2,-148(fp)
   8eca0:	00800f0e 	bge	zero,r2,8ece0 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
   8eca4:	e1bfdb17 	ldw	r6,-148(fp)
   8eca8:	e17fe317 	ldw	r5,-116(fp)
   8ecac:	e13ff817 	ldw	r4,-32(fp)
   8ecb0:	00914d40 	call	914d4 <__pow5mult>
   8ecb4:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
   8ecb8:	e1bfe117 	ldw	r6,-124(fp)
   8ecbc:	e17fe317 	ldw	r5,-116(fp)
   8ecc0:	e13ff817 	ldw	r4,-32(fp)
   8ecc4:	00910e40 	call	910e4 <__multiply>
   8ecc8:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
   8eccc:	e17fe117 	ldw	r5,-124(fp)
   8ecd0:	e13ff817 	ldw	r4,-32(fp)
   8ecd4:	0090b5c0 	call	90b5c <_Bfree>
	      b = b1;
   8ecd8:	e0bfee17 	ldw	r2,-72(fp)
   8ecdc:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
   8ece0:	e0ffd017 	ldw	r3,-192(fp)
   8ece4:	e0bfdb17 	ldw	r2,-148(fp)
   8ece8:	1885c83a 	sub	r2,r3,r2
   8ecec:	e0bfd615 	stw	r2,-168(fp)
   8ecf0:	e0bfd617 	ldw	r2,-168(fp)
   8ecf4:	10000b26 	beq	r2,zero,8ed24 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
   8ecf8:	e1bfd617 	ldw	r6,-168(fp)
   8ecfc:	e17fe117 	ldw	r5,-124(fp)
   8ed00:	e13ff817 	ldw	r4,-32(fp)
   8ed04:	00914d40 	call	914d4 <__pow5mult>
   8ed08:	e0bfe115 	stw	r2,-124(fp)
   8ed0c:	00000506 	br	8ed24 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
   8ed10:	e1bfd017 	ldw	r6,-192(fp)
   8ed14:	e17fe117 	ldw	r5,-124(fp)
   8ed18:	e13ff817 	ldw	r4,-32(fp)
   8ed1c:	00914d40 	call	914d4 <__pow5mult>
   8ed20:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
   8ed24:	01400044 	movi	r5,1
   8ed28:	e13ff817 	ldw	r4,-32(fp)
   8ed2c:	009108c0 	call	9108c <__i2b>
   8ed30:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
   8ed34:	e0bfdd17 	ldw	r2,-140(fp)
   8ed38:	0080050e 	bge	zero,r2,8ed50 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
   8ed3c:	e1bfdd17 	ldw	r6,-140(fp)
   8ed40:	e17fe417 	ldw	r5,-112(fp)
   8ed44:	e13ff817 	ldw	r4,-32(fp)
   8ed48:	00914d40 	call	914d4 <__pow5mult>
   8ed4c:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
   8ed50:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
   8ed54:	e0bffb17 	ldw	r2,-20(fp)
   8ed58:	10800088 	cmpgei	r2,r2,2
   8ed5c:	1000121e 	bne	r2,zero,8eda8 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
   8ed60:	e0bff217 	ldw	r2,-56(fp)
   8ed64:	1000101e 	bne	r2,zero,8eda8 <_dtoa_r+0x1460>
   8ed68:	e0fff317 	ldw	r3,-52(fp)
   8ed6c:	00800434 	movhi	r2,16
   8ed70:	10bfffc4 	addi	r2,r2,-1
   8ed74:	1884703a 	and	r2,r3,r2
   8ed78:	10000b1e 	bne	r2,zero,8eda8 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
   8ed7c:	e0bff317 	ldw	r2,-52(fp)
   8ed80:	109ffc2c 	andhi	r2,r2,32752
   8ed84:	10000826 	beq	r2,zero,8eda8 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
   8ed88:	e0bfcf17 	ldw	r2,-196(fp)
   8ed8c:	10800044 	addi	r2,r2,1
   8ed90:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
   8ed94:	e0bfdc17 	ldw	r2,-144(fp)
   8ed98:	10800044 	addi	r2,r2,1
   8ed9c:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
   8eda0:	00800044 	movi	r2,1
   8eda4:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
   8eda8:	e0bfdd17 	ldw	r2,-140(fp)
   8edac:	10000f26 	beq	r2,zero,8edec <_dtoa_r+0x14a4>
   8edb0:	e0bfe417 	ldw	r2,-112(fp)
   8edb4:	10800417 	ldw	r2,16(r2)
   8edb8:	10bfffc4 	addi	r2,r2,-1
   8edbc:	e0ffe417 	ldw	r3,-112(fp)
   8edc0:	10800144 	addi	r2,r2,5
   8edc4:	1085883a 	add	r2,r2,r2
   8edc8:	1085883a 	add	r2,r2,r2
   8edcc:	1885883a 	add	r2,r3,r2
   8edd0:	10800017 	ldw	r2,0(r2)
   8edd4:	1009883a 	mov	r4,r2
   8edd8:	0090f100 	call	90f10 <__hi0bits>
   8eddc:	1007883a 	mov	r3,r2
   8ede0:	00800804 	movi	r2,32
   8ede4:	10c5c83a 	sub	r2,r2,r3
   8ede8:	00000106 	br	8edf0 <_dtoa_r+0x14a8>
   8edec:	00800044 	movi	r2,1
   8edf0:	e0ffdc17 	ldw	r3,-144(fp)
   8edf4:	10c5883a 	add	r2,r2,r3
   8edf8:	108007cc 	andi	r2,r2,31
   8edfc:	e0bfd215 	stw	r2,-184(fp)
   8ee00:	e0bfd217 	ldw	r2,-184(fp)
   8ee04:	10000426 	beq	r2,zero,8ee18 <_dtoa_r+0x14d0>
    i = 32 - i;
   8ee08:	00c00804 	movi	r3,32
   8ee0c:	e0bfd217 	ldw	r2,-184(fp)
   8ee10:	1885c83a 	sub	r2,r3,r2
   8ee14:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
   8ee18:	e0bfd217 	ldw	r2,-184(fp)
   8ee1c:	10800150 	cmplti	r2,r2,5
   8ee20:	1000101e 	bne	r2,zero,8ee64 <_dtoa_r+0x151c>
    {
      i -= 4;
   8ee24:	e0bfd217 	ldw	r2,-184(fp)
   8ee28:	10bfff04 	addi	r2,r2,-4
   8ee2c:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   8ee30:	e0ffcf17 	ldw	r3,-196(fp)
   8ee34:	e0bfd217 	ldw	r2,-184(fp)
   8ee38:	1885883a 	add	r2,r3,r2
   8ee3c:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   8ee40:	e0ffda17 	ldw	r3,-152(fp)
   8ee44:	e0bfd217 	ldw	r2,-184(fp)
   8ee48:	1885883a 	add	r2,r3,r2
   8ee4c:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   8ee50:	e0ffdc17 	ldw	r3,-144(fp)
   8ee54:	e0bfd217 	ldw	r2,-184(fp)
   8ee58:	1885883a 	add	r2,r3,r2
   8ee5c:	e0bfdc15 	stw	r2,-144(fp)
   8ee60:	00001206 	br	8eeac <_dtoa_r+0x1564>
    }
  else if (i < 4)
   8ee64:	e0bfd217 	ldw	r2,-184(fp)
   8ee68:	10800108 	cmpgei	r2,r2,4
   8ee6c:	10000f1e 	bne	r2,zero,8eeac <_dtoa_r+0x1564>
    {
      i += 28;
   8ee70:	e0bfd217 	ldw	r2,-184(fp)
   8ee74:	10800704 	addi	r2,r2,28
   8ee78:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   8ee7c:	e0ffcf17 	ldw	r3,-196(fp)
   8ee80:	e0bfd217 	ldw	r2,-184(fp)
   8ee84:	1885883a 	add	r2,r3,r2
   8ee88:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   8ee8c:	e0ffda17 	ldw	r3,-152(fp)
   8ee90:	e0bfd217 	ldw	r2,-184(fp)
   8ee94:	1885883a 	add	r2,r3,r2
   8ee98:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   8ee9c:	e0ffdc17 	ldw	r3,-144(fp)
   8eea0:	e0bfd217 	ldw	r2,-184(fp)
   8eea4:	1885883a 	add	r2,r3,r2
   8eea8:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
   8eeac:	e0bfcf17 	ldw	r2,-196(fp)
   8eeb0:	0080050e 	bge	zero,r2,8eec8 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
   8eeb4:	e1bfcf17 	ldw	r6,-196(fp)
   8eeb8:	e17fe117 	ldw	r5,-124(fp)
   8eebc:	e13ff817 	ldw	r4,-32(fp)
   8eec0:	009164c0 	call	9164c <__lshift>
   8eec4:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
   8eec8:	e0bfdc17 	ldw	r2,-144(fp)
   8eecc:	0080050e 	bge	zero,r2,8eee4 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
   8eed0:	e1bfdc17 	ldw	r6,-144(fp)
   8eed4:	e17fe417 	ldw	r5,-112(fp)
   8eed8:	e13ff817 	ldw	r4,-32(fp)
   8eedc:	009164c0 	call	9164c <__lshift>
   8eee0:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
   8eee4:	e0bfd817 	ldw	r2,-160(fp)
   8eee8:	10001726 	beq	r2,zero,8ef48 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
   8eeec:	e17fe417 	ldw	r5,-112(fp)
   8eef0:	e13fe117 	ldw	r4,-124(fp)
   8eef4:	00918440 	call	91844 <__mcmp>
   8eef8:	1000130e 	bge	r2,zero,8ef48 <_dtoa_r+0x1600>
	{
	  k--;
   8eefc:	e0bfd717 	ldw	r2,-164(fp)
   8ef00:	10bfffc4 	addi	r2,r2,-1
   8ef04:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
   8ef08:	000f883a 	mov	r7,zero
   8ef0c:	01800284 	movi	r6,10
   8ef10:	e17fe117 	ldw	r5,-124(fp)
   8ef14:	e13ff817 	ldw	r4,-32(fp)
   8ef18:	0090bd80 	call	90bd8 <__multadd>
   8ef1c:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
   8ef20:	e0bfd917 	ldw	r2,-156(fp)
   8ef24:	10000626 	beq	r2,zero,8ef40 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
   8ef28:	000f883a 	mov	r7,zero
   8ef2c:	01800284 	movi	r6,10
   8ef30:	e17fe317 	ldw	r5,-116(fp)
   8ef34:	e13ff817 	ldw	r4,-32(fp)
   8ef38:	0090bd80 	call	90bd8 <__multadd>
   8ef3c:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
   8ef40:	e0bfd517 	ldw	r2,-172(fp)
   8ef44:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
   8ef48:	e0bfd417 	ldw	r2,-176(fp)
   8ef4c:	00801f16 	blt	zero,r2,8efcc <_dtoa_r+0x1684>
   8ef50:	e0bffb17 	ldw	r2,-20(fp)
   8ef54:	108000d0 	cmplti	r2,r2,3
   8ef58:	10001c1e 	bne	r2,zero,8efcc <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
   8ef5c:	e0bfd417 	ldw	r2,-176(fp)
   8ef60:	10000c16 	blt	r2,zero,8ef94 <_dtoa_r+0x164c>
   8ef64:	000f883a 	mov	r7,zero
   8ef68:	01800144 	movi	r6,5
   8ef6c:	e17fe417 	ldw	r5,-112(fp)
   8ef70:	e13ff817 	ldw	r4,-32(fp)
   8ef74:	0090bd80 	call	90bd8 <__multadd>
   8ef78:	e0bfe415 	stw	r2,-112(fp)
   8ef7c:	e17fe417 	ldw	r5,-112(fp)
   8ef80:	e13fe117 	ldw	r4,-124(fp)
   8ef84:	00918440 	call	91844 <__mcmp>
   8ef88:	00800716 	blt	zero,r2,8efa8 <_dtoa_r+0x1660>
   8ef8c:	00000106 	br	8ef94 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
   8ef90:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
   8ef94:	e0800217 	ldw	r2,8(fp)
   8ef98:	0084303a 	nor	r2,zero,r2
   8ef9c:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
   8efa0:	00011d06 	br	8f418 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
   8efa4:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
   8efa8:	e0bfe717 	ldw	r2,-100(fp)
   8efac:	10c00044 	addi	r3,r2,1
   8efb0:	e0ffe715 	stw	r3,-100(fp)
   8efb4:	00c00c44 	movi	r3,49
   8efb8:	10c00005 	stb	r3,0(r2)
      k++;
   8efbc:	e0bfd717 	ldw	r2,-164(fp)
   8efc0:	10800044 	addi	r2,r2,1
   8efc4:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
   8efc8:	00011306 	br	8f418 <_dtoa_r+0x1ad0>
    }
  if (leftright)
   8efcc:	e0bfd917 	ldw	r2,-156(fp)
   8efd0:	1000ba26 	beq	r2,zero,8f2bc <_dtoa_r+0x1974>
    {
      if (m2 > 0)
   8efd4:	e0bfda17 	ldw	r2,-152(fp)
   8efd8:	0080050e 	bge	zero,r2,8eff0 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
   8efdc:	e1bfda17 	ldw	r6,-152(fp)
   8efe0:	e17fe317 	ldw	r5,-116(fp)
   8efe4:	e13ff817 	ldw	r4,-32(fp)
   8efe8:	009164c0 	call	9164c <__lshift>
   8efec:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
   8eff0:	e0bfe317 	ldw	r2,-116(fp)
   8eff4:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
   8eff8:	e0bfde17 	ldw	r2,-136(fp)
   8effc:	10001826 	beq	r2,zero,8f060 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
   8f000:	e0bfe317 	ldw	r2,-116(fp)
   8f004:	10800117 	ldw	r2,4(r2)
   8f008:	100b883a 	mov	r5,r2
   8f00c:	e13ff817 	ldw	r4,-32(fp)
   8f010:	0090a2c0 	call	90a2c <_Balloc>
   8f014:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
   8f018:	e0bfe317 	ldw	r2,-116(fp)
   8f01c:	10c00304 	addi	r3,r2,12
   8f020:	e0bfe217 	ldw	r2,-120(fp)
   8f024:	11000304 	addi	r4,r2,12
   8f028:	e0bfe217 	ldw	r2,-120(fp)
   8f02c:	10800417 	ldw	r2,16(r2)
   8f030:	10800084 	addi	r2,r2,2
   8f034:	1085883a 	add	r2,r2,r2
   8f038:	1085883a 	add	r2,r2,r2
   8f03c:	100d883a 	mov	r6,r2
   8f040:	200b883a 	mov	r5,r4
   8f044:	1809883a 	mov	r4,r3
   8f048:	009069c0 	call	9069c <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
   8f04c:	01800044 	movi	r6,1
   8f050:	e17fe317 	ldw	r5,-116(fp)
   8f054:	e13ff817 	ldw	r4,-32(fp)
   8f058:	009164c0 	call	9164c <__lshift>
   8f05c:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
   8f060:	00800044 	movi	r2,1
   8f064:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
   8f068:	e17fe417 	ldw	r5,-112(fp)
   8f06c:	e13fe117 	ldw	r4,-124(fp)
   8f070:	008d5840 	call	8d584 <quorem>
   8f074:	10800c04 	addi	r2,r2,48
   8f078:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
   8f07c:	e17fe217 	ldw	r5,-120(fp)
   8f080:	e13fe117 	ldw	r4,-124(fp)
   8f084:	00918440 	call	91844 <__mcmp>
   8f088:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
   8f08c:	e1bfe317 	ldw	r6,-116(fp)
   8f090:	e17fe417 	ldw	r5,-112(fp)
   8f094:	e13ff817 	ldw	r4,-32(fp)
   8f098:	00919580 	call	91958 <__mdiff>
   8f09c:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
   8f0a0:	e0bfef17 	ldw	r2,-68(fp)
   8f0a4:	10800317 	ldw	r2,12(r2)
   8f0a8:	1000041e 	bne	r2,zero,8f0bc <_dtoa_r+0x1774>
   8f0ac:	e17fef17 	ldw	r5,-68(fp)
   8f0b0:	e13fe117 	ldw	r4,-124(fp)
   8f0b4:	00918440 	call	91844 <__mcmp>
   8f0b8:	00000106 	br	8f0c0 <_dtoa_r+0x1778>
   8f0bc:	00800044 	movi	r2,1
   8f0c0:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
   8f0c4:	e17fef17 	ldw	r5,-68(fp)
   8f0c8:	e13ff817 	ldw	r4,-32(fp)
   8f0cc:	0090b5c0 	call	90b5c <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
   8f0d0:	e0bfec17 	ldw	r2,-80(fp)
   8f0d4:	1000131e 	bne	r2,zero,8f124 <_dtoa_r+0x17dc>
   8f0d8:	e0bffb17 	ldw	r2,-20(fp)
   8f0dc:	1000111e 	bne	r2,zero,8f124 <_dtoa_r+0x17dc>
   8f0e0:	e0bff217 	ldw	r2,-56(fp)
   8f0e4:	1080004c 	andi	r2,r2,1
   8f0e8:	10000e1e 	bne	r2,zero,8f124 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
   8f0ec:	e0bfd117 	ldw	r2,-188(fp)
   8f0f0:	10800e58 	cmpnei	r2,r2,57
   8f0f4:	10003726 	beq	r2,zero,8f1d4 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
   8f0f8:	e0bfd617 	ldw	r2,-168(fp)
   8f0fc:	0080030e 	bge	zero,r2,8f10c <_dtoa_r+0x17c4>
		dig++;
   8f100:	e0bfd117 	ldw	r2,-188(fp)
   8f104:	10800044 	addi	r2,r2,1
   8f108:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
   8f10c:	e0bfe717 	ldw	r2,-100(fp)
   8f110:	10c00044 	addi	r3,r2,1
   8f114:	e0ffe715 	stw	r3,-100(fp)
   8f118:	e0ffd117 	ldw	r3,-188(fp)
   8f11c:	10c00005 	stb	r3,0(r2)
	      goto ret;
   8f120:	0000bd06 	br	8f418 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
   8f124:	e0bfd617 	ldw	r2,-168(fp)
   8f128:	10000716 	blt	r2,zero,8f148 <_dtoa_r+0x1800>
   8f12c:	e0bfd617 	ldw	r2,-168(fp)
   8f130:	1000221e 	bne	r2,zero,8f1bc <_dtoa_r+0x1874>
   8f134:	e0bffb17 	ldw	r2,-20(fp)
   8f138:	1000201e 	bne	r2,zero,8f1bc <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
   8f13c:	e0bff217 	ldw	r2,-56(fp)
   8f140:	1080004c 	andi	r2,r2,1
   8f144:	10001d1e 	bne	r2,zero,8f1bc <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
   8f148:	e0bfec17 	ldw	r2,-80(fp)
   8f14c:	0080150e 	bge	zero,r2,8f1a4 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
   8f150:	01800044 	movi	r6,1
   8f154:	e17fe117 	ldw	r5,-124(fp)
   8f158:	e13ff817 	ldw	r4,-32(fp)
   8f15c:	009164c0 	call	9164c <__lshift>
   8f160:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
   8f164:	e17fe417 	ldw	r5,-112(fp)
   8f168:	e13fe117 	ldw	r4,-124(fp)
   8f16c:	00918440 	call	91844 <__mcmp>
   8f170:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
   8f174:	e0bfec17 	ldw	r2,-80(fp)
   8f178:	00800516 	blt	zero,r2,8f190 <_dtoa_r+0x1848>
   8f17c:	e0bfec17 	ldw	r2,-80(fp)
   8f180:	1000081e 	bne	r2,zero,8f1a4 <_dtoa_r+0x185c>
   8f184:	e0bfd117 	ldw	r2,-188(fp)
   8f188:	1080004c 	andi	r2,r2,1
   8f18c:	10000526 	beq	r2,zero,8f1a4 <_dtoa_r+0x185c>
		      && dig++ == '9')
   8f190:	e0bfd117 	ldw	r2,-188(fp)
   8f194:	10c00044 	addi	r3,r2,1
   8f198:	e0ffd115 	stw	r3,-188(fp)
   8f19c:	10800e58 	cmpnei	r2,r2,57
   8f1a0:	10000e26 	beq	r2,zero,8f1dc <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
   8f1a4:	e0bfe717 	ldw	r2,-100(fp)
   8f1a8:	10c00044 	addi	r3,r2,1
   8f1ac:	e0ffe715 	stw	r3,-100(fp)
   8f1b0:	e0ffd117 	ldw	r3,-188(fp)
   8f1b4:	10c00005 	stb	r3,0(r2)
	      goto ret;
   8f1b8:	00009706 	br	8f418 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
   8f1bc:	e0bfec17 	ldw	r2,-80(fp)
   8f1c0:	0080140e 	bge	zero,r2,8f214 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
   8f1c4:	e0bfd117 	ldw	r2,-188(fp)
   8f1c8:	10800e58 	cmpnei	r2,r2,57
   8f1cc:	10000a1e 	bne	r2,zero,8f1f8 <_dtoa_r+0x18b0>
   8f1d0:	00000306 	br	8f1e0 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
   8f1d4:	0001883a 	nop
   8f1d8:	00000106 	br	8f1e0 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
   8f1dc:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
   8f1e0:	e0bfe717 	ldw	r2,-100(fp)
   8f1e4:	10c00044 	addi	r3,r2,1
   8f1e8:	e0ffe715 	stw	r3,-100(fp)
   8f1ec:	00c00e44 	movi	r3,57
   8f1f0:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
   8f1f4:	00005d06 	br	8f36c <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
   8f1f8:	e0bfe717 	ldw	r2,-100(fp)
   8f1fc:	10c00044 	addi	r3,r2,1
   8f200:	e0ffe715 	stw	r3,-100(fp)
   8f204:	e0ffd117 	ldw	r3,-188(fp)
   8f208:	18c00044 	addi	r3,r3,1
   8f20c:	10c00005 	stb	r3,0(r2)
	      goto ret;
   8f210:	00008106 	br	8f418 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
   8f214:	e0bfe717 	ldw	r2,-100(fp)
   8f218:	10c00044 	addi	r3,r2,1
   8f21c:	e0ffe715 	stw	r3,-100(fp)
   8f220:	e0ffd117 	ldw	r3,-188(fp)
   8f224:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   8f228:	e0ffd217 	ldw	r3,-184(fp)
   8f22c:	e0bfd417 	ldw	r2,-176(fp)
   8f230:	18803b26 	beq	r3,r2,8f320 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
   8f234:	000f883a 	mov	r7,zero
   8f238:	01800284 	movi	r6,10
   8f23c:	e17fe117 	ldw	r5,-124(fp)
   8f240:	e13ff817 	ldw	r4,-32(fp)
   8f244:	0090bd80 	call	90bd8 <__multadd>
   8f248:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
   8f24c:	e0ffe217 	ldw	r3,-120(fp)
   8f250:	e0bfe317 	ldw	r2,-116(fp)
   8f254:	1880091e 	bne	r3,r2,8f27c <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
   8f258:	000f883a 	mov	r7,zero
   8f25c:	01800284 	movi	r6,10
   8f260:	e17fe317 	ldw	r5,-116(fp)
   8f264:	e13ff817 	ldw	r4,-32(fp)
   8f268:	0090bd80 	call	90bd8 <__multadd>
   8f26c:	e0bfe315 	stw	r2,-116(fp)
   8f270:	e0bfe317 	ldw	r2,-116(fp)
   8f274:	e0bfe215 	stw	r2,-120(fp)
   8f278:	00000c06 	br	8f2ac <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
   8f27c:	000f883a 	mov	r7,zero
   8f280:	01800284 	movi	r6,10
   8f284:	e17fe217 	ldw	r5,-120(fp)
   8f288:	e13ff817 	ldw	r4,-32(fp)
   8f28c:	0090bd80 	call	90bd8 <__multadd>
   8f290:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
   8f294:	000f883a 	mov	r7,zero
   8f298:	01800284 	movi	r6,10
   8f29c:	e17fe317 	ldw	r5,-116(fp)
   8f2a0:	e13ff817 	ldw	r4,-32(fp)
   8f2a4:	0090bd80 	call	90bd8 <__multadd>
   8f2a8:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
   8f2ac:	e0bfd217 	ldw	r2,-184(fp)
   8f2b0:	10800044 	addi	r2,r2,1
   8f2b4:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
   8f2b8:	003f6b06 	br	8f068 <__alt_data_end+0xfffdd068>
    }
  else
    for (i = 1;; i++)
   8f2bc:	00800044 	movi	r2,1
   8f2c0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
   8f2c4:	e43fe717 	ldw	r16,-100(fp)
   8f2c8:	80800044 	addi	r2,r16,1
   8f2cc:	e0bfe715 	stw	r2,-100(fp)
   8f2d0:	e17fe417 	ldw	r5,-112(fp)
   8f2d4:	e13fe117 	ldw	r4,-124(fp)
   8f2d8:	008d5840 	call	8d584 <quorem>
   8f2dc:	10800c04 	addi	r2,r2,48
   8f2e0:	e0bfd115 	stw	r2,-188(fp)
   8f2e4:	e0bfd117 	ldw	r2,-188(fp)
   8f2e8:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
   8f2ec:	e0ffd217 	ldw	r3,-184(fp)
   8f2f0:	e0bfd417 	ldw	r2,-176(fp)
   8f2f4:	18800c0e 	bge	r3,r2,8f328 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
   8f2f8:	000f883a 	mov	r7,zero
   8f2fc:	01800284 	movi	r6,10
   8f300:	e17fe117 	ldw	r5,-124(fp)
   8f304:	e13ff817 	ldw	r4,-32(fp)
   8f308:	0090bd80 	call	90bd8 <__multadd>
   8f30c:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
   8f310:	e0bfd217 	ldw	r2,-184(fp)
   8f314:	10800044 	addi	r2,r2,1
   8f318:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
   8f31c:	003fe906 	br	8f2c4 <__alt_data_end+0xfffdd2c4>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
   8f320:	0001883a 	nop
   8f324:	00000106 	br	8f32c <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
   8f328:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
   8f32c:	01800044 	movi	r6,1
   8f330:	e17fe117 	ldw	r5,-124(fp)
   8f334:	e13ff817 	ldw	r4,-32(fp)
   8f338:	009164c0 	call	9164c <__lshift>
   8f33c:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
   8f340:	e17fe417 	ldw	r5,-112(fp)
   8f344:	e13fe117 	ldw	r4,-124(fp)
   8f348:	00918440 	call	91844 <__mcmp>
   8f34c:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
   8f350:	e0bfd617 	ldw	r2,-168(fp)
   8f354:	00801216 	blt	zero,r2,8f3a0 <_dtoa_r+0x1a58>
   8f358:	e0bfd617 	ldw	r2,-168(fp)
   8f35c:	1000211e 	bne	r2,zero,8f3e4 <_dtoa_r+0x1a9c>
   8f360:	e0bfd117 	ldw	r2,-188(fp)
   8f364:	1080004c 	andi	r2,r2,1
   8f368:	10001e26 	beq	r2,zero,8f3e4 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
   8f36c:	00000c06 	br	8f3a0 <_dtoa_r+0x1a58>
	if (s == s0)
   8f370:	e0ffe717 	ldw	r3,-100(fp)
   8f374:	e0bfe917 	ldw	r2,-92(fp)
   8f378:	1880091e 	bne	r3,r2,8f3a0 <_dtoa_r+0x1a58>
	  {
	    k++;
   8f37c:	e0bfd717 	ldw	r2,-164(fp)
   8f380:	10800044 	addi	r2,r2,1
   8f384:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
   8f388:	e0bfe717 	ldw	r2,-100(fp)
   8f38c:	10c00044 	addi	r3,r2,1
   8f390:	e0ffe715 	stw	r3,-100(fp)
   8f394:	00c00c44 	movi	r3,49
   8f398:	10c00005 	stb	r3,0(r2)
	    goto ret;
   8f39c:	00001e06 	br	8f418 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
   8f3a0:	e0bfe717 	ldw	r2,-100(fp)
   8f3a4:	10bfffc4 	addi	r2,r2,-1
   8f3a8:	e0bfe715 	stw	r2,-100(fp)
   8f3ac:	e0bfe717 	ldw	r2,-100(fp)
   8f3b0:	10800003 	ldbu	r2,0(r2)
   8f3b4:	10803fcc 	andi	r2,r2,255
   8f3b8:	1080201c 	xori	r2,r2,128
   8f3bc:	10bfe004 	addi	r2,r2,-128
   8f3c0:	10800e60 	cmpeqi	r2,r2,57
   8f3c4:	103fea1e 	bne	r2,zero,8f370 <__alt_data_end+0xfffdd370>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
   8f3c8:	e0bfe717 	ldw	r2,-100(fp)
   8f3cc:	10c00044 	addi	r3,r2,1
   8f3d0:	e0ffe715 	stw	r3,-100(fp)
   8f3d4:	10c00003 	ldbu	r3,0(r2)
   8f3d8:	18c00044 	addi	r3,r3,1
   8f3dc:	10c00005 	stb	r3,0(r2)
   8f3e0:	00000d06 	br	8f418 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
   8f3e4:	e0bfe717 	ldw	r2,-100(fp)
   8f3e8:	10bfffc4 	addi	r2,r2,-1
   8f3ec:	e0bfe715 	stw	r2,-100(fp)
   8f3f0:	e0bfe717 	ldw	r2,-100(fp)
   8f3f4:	10800003 	ldbu	r2,0(r2)
   8f3f8:	10803fcc 	andi	r2,r2,255
   8f3fc:	1080201c 	xori	r2,r2,128
   8f400:	10bfe004 	addi	r2,r2,-128
   8f404:	10800c20 	cmpeqi	r2,r2,48
   8f408:	103ff61e 	bne	r2,zero,8f3e4 <__alt_data_end+0xfffdd3e4>
      s++;
   8f40c:	e0bfe717 	ldw	r2,-100(fp)
   8f410:	10800044 	addi	r2,r2,1
   8f414:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
   8f418:	e17fe417 	ldw	r5,-112(fp)
   8f41c:	e13ff817 	ldw	r4,-32(fp)
   8f420:	0090b5c0 	call	90b5c <_Bfree>
  if (mhi)
   8f424:	e0bfe317 	ldw	r2,-116(fp)
   8f428:	10000d26 	beq	r2,zero,8f460 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
   8f42c:	e0bfe217 	ldw	r2,-120(fp)
   8f430:	10000626 	beq	r2,zero,8f44c <_dtoa_r+0x1b04>
   8f434:	e0ffe217 	ldw	r3,-120(fp)
   8f438:	e0bfe317 	ldw	r2,-116(fp)
   8f43c:	18800326 	beq	r3,r2,8f44c <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
   8f440:	e17fe217 	ldw	r5,-120(fp)
   8f444:	e13ff817 	ldw	r4,-32(fp)
   8f448:	0090b5c0 	call	90b5c <_Bfree>
      Bfree (ptr, mhi);
   8f44c:	e17fe317 	ldw	r5,-116(fp)
   8f450:	e13ff817 	ldw	r4,-32(fp)
   8f454:	0090b5c0 	call	90b5c <_Bfree>
   8f458:	00000106 	br	8f460 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
   8f45c:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
   8f460:	e17fe117 	ldw	r5,-124(fp)
   8f464:	e13ff817 	ldw	r4,-32(fp)
   8f468:	0090b5c0 	call	90b5c <_Bfree>
  *s = 0;
   8f46c:	e0bfe717 	ldw	r2,-100(fp)
   8f470:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
   8f474:	e0bfd717 	ldw	r2,-164(fp)
   8f478:	10c00044 	addi	r3,r2,1
   8f47c:	e0800317 	ldw	r2,12(fp)
   8f480:	10c00015 	stw	r3,0(r2)
  if (rve)
   8f484:	e0800517 	ldw	r2,20(fp)
   8f488:	10000326 	beq	r2,zero,8f498 <_dtoa_r+0x1b50>
    *rve = s;
   8f48c:	e0800517 	ldw	r2,20(fp)
   8f490:	e0ffe717 	ldw	r3,-100(fp)
   8f494:	10c00015 	stw	r3,0(r2)
  return s0;
   8f498:	e0bfe917 	ldw	r2,-92(fp)
}
   8f49c:	e6fffc04 	addi	sp,fp,-16
   8f4a0:	dfc00517 	ldw	ra,20(sp)
   8f4a4:	df000417 	ldw	fp,16(sp)
   8f4a8:	dcc00317 	ldw	r19,12(sp)
   8f4ac:	dc800217 	ldw	r18,8(sp)
   8f4b0:	dc400117 	ldw	r17,4(sp)
   8f4b4:	dc000017 	ldw	r16,0(sp)
   8f4b8:	dec00604 	addi	sp,sp,24
   8f4bc:	f800283a 	ret

0008f4c0 <__sflags>:
int
_DEFUN(__sflags, (ptr, mode, optr),
       struct _reent *ptr  _AND
       register char *mode _AND
       int *optr)
{
   8f4c0:	defffa04 	addi	sp,sp,-24
   8f4c4:	df000515 	stw	fp,20(sp)
   8f4c8:	dc800415 	stw	r18,16(sp)
   8f4cc:	dc400315 	stw	r17,12(sp)
   8f4d0:	dc000215 	stw	r16,8(sp)
   8f4d4:	df000504 	addi	fp,sp,20
   8f4d8:	e13ffb15 	stw	r4,-20(fp)
   8f4dc:	2805883a 	mov	r2,r5
   8f4e0:	e1bffc15 	stw	r6,-16(fp)
  register int ret, m, o;

  switch (mode[0])
   8f4e4:	10c00003 	ldbu	r3,0(r2)
   8f4e8:	18c03fcc 	andi	r3,r3,255
   8f4ec:	18c0201c 	xori	r3,r3,128
   8f4f0:	18ffe004 	addi	r3,r3,-128
   8f4f4:	19001ca0 	cmpeqi	r4,r3,114
   8f4f8:	2000051e 	bne	r4,zero,8f510 <__sflags+0x50>
   8f4fc:	19001de0 	cmpeqi	r4,r3,119
   8f500:	2000071e 	bne	r4,zero,8f520 <__sflags+0x60>
   8f504:	18c01860 	cmpeqi	r3,r3,97
   8f508:	1800091e 	bne	r3,zero,8f530 <__sflags+0x70>
   8f50c:	00000c06 	br	8f540 <__sflags+0x80>
    {
    case 'r':			/* open for reading */
      ret = __SRD;
   8f510:	04400104 	movi	r17,4
      m = O_RDONLY;
   8f514:	0021883a 	mov	r16,zero
      o = 0;
   8f518:	0025883a 	mov	r18,zero
      break;
   8f51c:	00000d06 	br	8f554 <__sflags+0x94>

    case 'w':			/* open for writing */
      ret = __SWR;
   8f520:	04400204 	movi	r17,8
      m = O_WRONLY;
   8f524:	04000044 	movi	r16,1
      o = O_CREAT | O_TRUNC;
   8f528:	04818004 	movi	r18,1536
      break;
   8f52c:	00000906 	br	8f554 <__sflags+0x94>

    case 'a':			/* open for appending */
      ret = __SWR | __SAPP;
   8f530:	04404204 	movi	r17,264
      m = O_WRONLY;
   8f534:	04000044 	movi	r16,1
      o = O_CREAT | O_APPEND;
   8f538:	04808204 	movi	r18,520
      break;
   8f53c:	00000506 	br	8f554 <__sflags+0x94>
    default:			/* illegal mode */
      ptr->_errno = EINVAL;
   8f540:	e0bffb17 	ldw	r2,-20(fp)
   8f544:	00c00584 	movi	r3,22
   8f548:	10c00015 	stw	r3,0(r2)
      return (0);
   8f54c:	0005883a 	mov	r2,zero
   8f550:	00001f06 	br	8f5d0 <__sflags+0x110>
    }
  while (*++mode)
   8f554:	00001406 	br	8f5a8 <__sflags+0xe8>
    {
      switch (*mode)
   8f558:	10c00003 	ldbu	r3,0(r2)
   8f55c:	18c03fcc 	andi	r3,r3,255
   8f560:	18c0201c 	xori	r3,r3,128
   8f564:	18ffe004 	addi	r3,r3,-128
   8f568:	190018a0 	cmpeqi	r4,r3,98
   8f56c:	20000e1e 	bne	r4,zero,8f5a8 <__sflags+0xe8>
   8f570:	19001e20 	cmpeqi	r4,r3,120
   8f574:	2000091e 	bne	r4,zero,8f59c <__sflags+0xdc>
   8f578:	18c00ae0 	cmpeqi	r3,r3,43
   8f57c:	18000926 	beq	r3,zero,8f5a4 <__sflags+0xe4>
	{
	case '+':
	  ret = (ret & ~(__SRD | __SWR)) | __SRW;
   8f580:	00fff8c4 	movi	r3,-29
   8f584:	88c6703a 	and	r3,r17,r3
   8f588:	1c400414 	ori	r17,r3,16
	  m = (m & ~O_ACCMODE) | O_RDWR;
   8f58c:	00ffff04 	movi	r3,-4
   8f590:	80c6703a 	and	r3,r16,r3
   8f594:	1c000094 	ori	r16,r3,2
	  break;
   8f598:	00000306 	br	8f5a8 <__sflags+0xe8>
	case 'e':
	  m |= O_CLOEXEC;
	  break;
#endif
	case 'x':
	  m |= O_EXCL;
   8f59c:	84020014 	ori	r16,r16,2048
	  break;
   8f5a0:	00000106 	br	8f5a8 <__sflags+0xe8>
	default:
	  break;
   8f5a4:	0001883a 	nop
      break;
    default:			/* illegal mode */
      ptr->_errno = EINVAL;
      return (0);
    }
  while (*++mode)
   8f5a8:	10800044 	addi	r2,r2,1
   8f5ac:	10c00003 	ldbu	r3,0(r2)
   8f5b0:	18c03fcc 	andi	r3,r3,255
   8f5b4:	18c0201c 	xori	r3,r3,128
   8f5b8:	18ffe004 	addi	r3,r3,-128
   8f5bc:	183fe61e 	bne	r3,zero,8f558 <__alt_data_end+0xfffdd558>
    }
#if defined (O_TEXT) && !defined (__CYGWIN__)
  if (!(m | O_BINARY))
    m |= O_TEXT;
#endif
  *optr = m | o;
   8f5c0:	8486b03a 	or	r3,r16,r18
   8f5c4:	e0bffc17 	ldw	r2,-16(fp)
   8f5c8:	10c00015 	stw	r3,0(r2)
  return ret;
   8f5cc:	8805883a 	mov	r2,r17
}
   8f5d0:	e6fffd04 	addi	sp,fp,-12
   8f5d4:	df000317 	ldw	fp,12(sp)
   8f5d8:	dc800217 	ldw	r18,8(sp)
   8f5dc:	dc400117 	ldw	r17,4(sp)
   8f5e0:	dc000017 	ldw	r16,0(sp)
   8f5e4:	dec00404 	addi	sp,sp,16
   8f5e8:	f800283a 	ret

0008f5ec <_fread_r>:
       struct _reent * ptr _AND
       _PTR __restrict buf _AND
       size_t size _AND
       size_t count _AND
       FILE * __restrict fp)
{
   8f5ec:	defff004 	addi	sp,sp,-64
   8f5f0:	dfc00f15 	stw	ra,60(sp)
   8f5f4:	df000e15 	stw	fp,56(sp)
   8f5f8:	dc800d15 	stw	r18,52(sp)
   8f5fc:	dc400c15 	stw	r17,48(sp)
   8f600:	dc000b15 	stw	r16,44(sp)
   8f604:	df000e04 	addi	fp,sp,56
   8f608:	e13ff915 	stw	r4,-28(fp)
   8f60c:	e17ffa15 	stw	r5,-24(fp)
   8f610:	e1bffb15 	stw	r6,-20(fp)
   8f614:	e1fffc15 	stw	r7,-16(fp)
  register size_t resid;
  register char *p;
  register int r;
  size_t total;

  if ((resid = count * size) == 0)
   8f618:	e17ffb17 	ldw	r5,-20(fp)
   8f61c:	e13ffc17 	ldw	r4,-16(fp)
   8f620:	00823a00 	call	823a0 <__mulsi3>
   8f624:	1021883a 	mov	r16,r2
   8f628:	8000021e 	bne	r16,zero,8f634 <_fread_r+0x48>
    return 0;
   8f62c:	0005883a 	mov	r2,zero
   8f630:	0000b406 	br	8f904 <_fread_r+0x318>

  CHECK_INIT(ptr, fp);
   8f634:	e0bff917 	ldw	r2,-28(fp)
   8f638:	e0bff215 	stw	r2,-56(fp)
   8f63c:	e0bff217 	ldw	r2,-56(fp)
   8f640:	10000526 	beq	r2,zero,8f658 <_fread_r+0x6c>
   8f644:	e0bff217 	ldw	r2,-56(fp)
   8f648:	10800e17 	ldw	r2,56(r2)
   8f64c:	1000021e 	bne	r2,zero,8f658 <_fread_r+0x6c>
   8f650:	e13ff217 	ldw	r4,-56(fp)
   8f654:	008573c0 	call	8573c <__sinit>

  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   8f658:	e0800217 	ldw	r2,8(fp)
   8f65c:	1080030b 	ldhu	r2,12(r2)
   8f660:	10bfffcc 	andi	r2,r2,65535
   8f664:	1088000c 	andi	r2,r2,8192
   8f668:	10000c1e 	bne	r2,zero,8f69c <_fread_r+0xb0>
   8f66c:	e0800217 	ldw	r2,8(fp)
   8f670:	1080030b 	ldhu	r2,12(r2)
   8f674:	10880014 	ori	r2,r2,8192
   8f678:	1007883a 	mov	r3,r2
   8f67c:	e0800217 	ldw	r2,8(fp)
   8f680:	10c0030d 	sth	r3,12(r2)
   8f684:	e0800217 	ldw	r2,8(fp)
   8f688:	10c01917 	ldw	r3,100(r2)
   8f68c:	00b7ffc4 	movi	r2,-8193
   8f690:	1886703a 	and	r3,r3,r2
   8f694:	e0800217 	ldw	r2,8(fp)
   8f698:	10c01915 	stw	r3,100(r2)
  if (fp->_r < 0)
   8f69c:	e0800217 	ldw	r2,8(fp)
   8f6a0:	10800117 	ldw	r2,4(r2)
   8f6a4:	1000020e 	bge	r2,zero,8f6b0 <_fread_r+0xc4>
    fp->_r = 0;
   8f6a8:	e0800217 	ldw	r2,8(fp)
   8f6ac:	10000115 	stw	zero,4(r2)
  total = resid;
   8f6b0:	e43ff315 	stw	r16,-52(fp)
  p = buf;
   8f6b4:	e47ffa17 	ldw	r17,-24(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)

  /* Optimize unbuffered I/O.  */
  if (fp->_flags & __SNBF)
   8f6b8:	e0800217 	ldw	r2,8(fp)
   8f6bc:	1080030b 	ldhu	r2,12(r2)
   8f6c0:	10bfffcc 	andi	r2,r2,65535
   8f6c4:	1080008c 	andi	r2,r2,2
   8f6c8:	10007826 	beq	r2,zero,8f8ac <_fread_r+0x2c0>
    {
      /* First copy any available characters from ungetc buffer.  */
      int copy_size = resid > fp->_r ? fp->_r : resid;
   8f6cc:	e0800217 	ldw	r2,8(fp)
   8f6d0:	10800117 	ldw	r2,4(r2)
   8f6d4:	8080012e 	bgeu	r16,r2,8f6dc <_fread_r+0xf0>
   8f6d8:	8005883a 	mov	r2,r16
   8f6dc:	e0bff415 	stw	r2,-48(fp)
      _CAST_VOID memcpy ((_PTR) p, (_PTR) fp->_p, (size_t) copy_size);
   8f6e0:	e0800217 	ldw	r2,8(fp)
   8f6e4:	10800017 	ldw	r2,0(r2)
   8f6e8:	e0fff417 	ldw	r3,-48(fp)
   8f6ec:	180d883a 	mov	r6,r3
   8f6f0:	100b883a 	mov	r5,r2
   8f6f4:	8809883a 	mov	r4,r17
   8f6f8:	009069c0 	call	9069c <memcpy>
      fp->_p += copy_size;
   8f6fc:	e0800217 	ldw	r2,8(fp)
   8f700:	10c00017 	ldw	r3,0(r2)
   8f704:	e0bff417 	ldw	r2,-48(fp)
   8f708:	1887883a 	add	r3,r3,r2
   8f70c:	e0800217 	ldw	r2,8(fp)
   8f710:	10c00015 	stw	r3,0(r2)
      fp->_r -= copy_size;
   8f714:	e0800217 	ldw	r2,8(fp)
   8f718:	10c00117 	ldw	r3,4(r2)
   8f71c:	e0bff417 	ldw	r2,-48(fp)
   8f720:	1887c83a 	sub	r3,r3,r2
   8f724:	e0800217 	ldw	r2,8(fp)
   8f728:	10c00115 	stw	r3,4(r2)
      p += copy_size;
   8f72c:	e0bff417 	ldw	r2,-48(fp)
   8f730:	88a3883a 	add	r17,r17,r2
      resid -= copy_size;
   8f734:	e0bff417 	ldw	r2,-48(fp)
   8f738:	80a1c83a 	sub	r16,r16,r2

      /* If still more data needed, free any allocated ungetc buffer.  */
      if (HASUB (fp) && resid > 0)
   8f73c:	e0800217 	ldw	r2,8(fp)
   8f740:	10800c17 	ldw	r2,48(r2)
   8f744:	10003c26 	beq	r2,zero,8f838 <_fread_r+0x24c>
   8f748:	80003b26 	beq	r16,zero,8f838 <_fread_r+0x24c>
	FREEUB (ptr, fp);
   8f74c:	e0800217 	ldw	r2,8(fp)
   8f750:	10c00c17 	ldw	r3,48(r2)
   8f754:	e0800217 	ldw	r2,8(fp)
   8f758:	10801004 	addi	r2,r2,64
   8f75c:	18800526 	beq	r3,r2,8f774 <_fread_r+0x188>
   8f760:	e0800217 	ldw	r2,8(fp)
   8f764:	10800c17 	ldw	r2,48(r2)
   8f768:	100b883a 	mov	r5,r2
   8f76c:	e13ff917 	ldw	r4,-28(fp)
   8f770:	0085c480 	call	85c48 <_free_r>
   8f774:	e0800217 	ldw	r2,8(fp)
   8f778:	10000c15 	stw	zero,48(r2)

      /* Finally read directly into user's buffer if needed.  */
      while (resid > 0)
   8f77c:	00002e06 	br	8f838 <_fread_r+0x24c>
	{
	  int rc = 0;
   8f780:	e03ff515 	stw	zero,-44(fp)
	  /* save fp buffering state */
	  void *old_base = fp->_bf._base;
   8f784:	e0800217 	ldw	r2,8(fp)
   8f788:	10800417 	ldw	r2,16(r2)
   8f78c:	e0bff615 	stw	r2,-40(fp)
	  void * old_p = fp->_p;
   8f790:	e0800217 	ldw	r2,8(fp)
   8f794:	10800017 	ldw	r2,0(r2)
   8f798:	e0bff715 	stw	r2,-36(fp)
	  int old_size = fp->_bf._size;
   8f79c:	e0800217 	ldw	r2,8(fp)
   8f7a0:	10800517 	ldw	r2,20(r2)
   8f7a4:	e0bff815 	stw	r2,-32(fp)
	  /* allow __refill to use user's buffer */
	  fp->_bf._base = (unsigned char *) p;
   8f7a8:	e0800217 	ldw	r2,8(fp)
   8f7ac:	14400415 	stw	r17,16(r2)
	  fp->_bf._size = resid;
   8f7b0:	8007883a 	mov	r3,r16
   8f7b4:	e0800217 	ldw	r2,8(fp)
   8f7b8:	10c00515 	stw	r3,20(r2)
	  fp->_p = (unsigned char *) p;
   8f7bc:	e0800217 	ldw	r2,8(fp)
   8f7c0:	14400015 	stw	r17,0(r2)
	  rc = __srefill_r (ptr, fp);
   8f7c4:	e1400217 	ldw	r5,8(fp)
   8f7c8:	e13ff917 	ldw	r4,-28(fp)
   8f7cc:	008870c0 	call	8870c <__srefill_r>
   8f7d0:	e0bff515 	stw	r2,-44(fp)
	  /* restore fp buffering back to original state */
	  fp->_bf._base = old_base;
   8f7d4:	e0800217 	ldw	r2,8(fp)
   8f7d8:	e0fff617 	ldw	r3,-40(fp)
   8f7dc:	10c00415 	stw	r3,16(r2)
	  fp->_bf._size = old_size;
   8f7e0:	e0800217 	ldw	r2,8(fp)
   8f7e4:	e0fff817 	ldw	r3,-32(fp)
   8f7e8:	10c00515 	stw	r3,20(r2)
	  fp->_p = old_p;
   8f7ec:	e0800217 	ldw	r2,8(fp)
   8f7f0:	e0fff717 	ldw	r3,-36(fp)
   8f7f4:	10c00015 	stw	r3,0(r2)
	  resid -= fp->_r;
   8f7f8:	e0800217 	ldw	r2,8(fp)
   8f7fc:	10800117 	ldw	r2,4(r2)
   8f800:	80a1c83a 	sub	r16,r16,r2
	  p += fp->_r;
   8f804:	e0800217 	ldw	r2,8(fp)
   8f808:	10800117 	ldw	r2,4(r2)
   8f80c:	88a3883a 	add	r17,r17,r2
	  fp->_r = 0;
   8f810:	e0800217 	ldw	r2,8(fp)
   8f814:	10000115 	stw	zero,4(r2)
	  if (rc)
   8f818:	e0bff517 	ldw	r2,-44(fp)
   8f81c:	10000626 	beq	r2,zero,8f838 <_fread_r+0x24c>
	          _newlib_flockfile_exit (fp);
	          return crlf_r (ptr, fp, buf, total-resid, 1) / size;
	        }
#endif
	      _newlib_flockfile_exit (fp);
	      return (total - resid) / size;
   8f820:	e0bff317 	ldw	r2,-52(fp)
   8f824:	1405c83a 	sub	r2,r2,r16
   8f828:	e17ffb17 	ldw	r5,-20(fp)
   8f82c:	1009883a 	mov	r4,r2
   8f830:	00822e40 	call	822e4 <__udivsi3>
   8f834:	00003306 	br	8f904 <_fread_r+0x318>
      /* If still more data needed, free any allocated ungetc buffer.  */
      if (HASUB (fp) && resid > 0)
	FREEUB (ptr, fp);

      /* Finally read directly into user's buffer if needed.  */
      while (resid > 0)
   8f838:	803fd11e 	bne	r16,zero,8f780 <__alt_data_end+0xfffdd780>
   8f83c:	00003006 	br	8f900 <_fread_r+0x314>
  else
#endif /* !PREFER_SIZE_OVER_SPEED && !__OPTIMIZE_SIZE__ */
    {
      while (resid > (r = fp->_r))
	{
	  _CAST_VOID memcpy ((_PTR) p, (_PTR) fp->_p, (size_t) r);
   8f840:	e0800217 	ldw	r2,8(fp)
   8f844:	10800017 	ldw	r2,0(r2)
   8f848:	9007883a 	mov	r3,r18
   8f84c:	180d883a 	mov	r6,r3
   8f850:	100b883a 	mov	r5,r2
   8f854:	8809883a 	mov	r4,r17
   8f858:	009069c0 	call	9069c <memcpy>
	  fp->_p += r;
   8f85c:	e0800217 	ldw	r2,8(fp)
   8f860:	10800017 	ldw	r2,0(r2)
   8f864:	9007883a 	mov	r3,r18
   8f868:	10c7883a 	add	r3,r2,r3
   8f86c:	e0800217 	ldw	r2,8(fp)
   8f870:	10c00015 	stw	r3,0(r2)
	  /* fp->_r = 0 ... done in __srefill */
	  p += r;
   8f874:	9005883a 	mov	r2,r18
   8f878:	88a3883a 	add	r17,r17,r2
	  resid -= r;
   8f87c:	9005883a 	mov	r2,r18
   8f880:	80a1c83a 	sub	r16,r16,r2
	  if (__srefill_r (ptr, fp))
   8f884:	e1400217 	ldw	r5,8(fp)
   8f888:	e13ff917 	ldw	r4,-28(fp)
   8f88c:	008870c0 	call	8870c <__srefill_r>
   8f890:	10000626 	beq	r2,zero,8f8ac <_fread_r+0x2c0>
		  _newlib_flockfile_exit (fp);
		  return crlf_r (ptr, fp, buf, total-resid, 1) / size;
		}
#endif
	      _newlib_flockfile_exit (fp);
	      return (total - resid) / size;
   8f894:	e0bff317 	ldw	r2,-52(fp)
   8f898:	1405c83a 	sub	r2,r2,r16
   8f89c:	e17ffb17 	ldw	r5,-20(fp)
   8f8a0:	1009883a 	mov	r4,r2
   8f8a4:	00822e40 	call	822e4 <__udivsi3>
   8f8a8:	00001606 	br	8f904 <_fread_r+0x318>
	}
    }
  else
#endif /* !PREFER_SIZE_OVER_SPEED && !__OPTIMIZE_SIZE__ */
    {
      while (resid > (r = fp->_r))
   8f8ac:	e0800217 	ldw	r2,8(fp)
   8f8b0:	14800117 	ldw	r18,4(r2)
   8f8b4:	9005883a 	mov	r2,r18
   8f8b8:	143fe136 	bltu	r2,r16,8f840 <__alt_data_end+0xfffdd840>
#endif
	      _newlib_flockfile_exit (fp);
	      return (total - resid) / size;
	    }
	}
      _CAST_VOID memcpy ((_PTR) p, (_PTR) fp->_p, resid);
   8f8bc:	e0800217 	ldw	r2,8(fp)
   8f8c0:	10800017 	ldw	r2,0(r2)
   8f8c4:	800d883a 	mov	r6,r16
   8f8c8:	100b883a 	mov	r5,r2
   8f8cc:	8809883a 	mov	r4,r17
   8f8d0:	009069c0 	call	9069c <memcpy>
      fp->_r -= resid;
   8f8d4:	e0800217 	ldw	r2,8(fp)
   8f8d8:	10800117 	ldw	r2,4(r2)
   8f8dc:	1405c83a 	sub	r2,r2,r16
   8f8e0:	1007883a 	mov	r3,r2
   8f8e4:	e0800217 	ldw	r2,8(fp)
   8f8e8:	10c00115 	stw	r3,4(r2)
      fp->_p += resid;
   8f8ec:	e0800217 	ldw	r2,8(fp)
   8f8f0:	10800017 	ldw	r2,0(r2)
   8f8f4:	1407883a 	add	r3,r2,r16
   8f8f8:	e0800217 	ldw	r2,8(fp)
   8f8fc:	10c00015 	stw	r3,0(r2)
      _newlib_flockfile_exit (fp);
      return crlf_r(ptr, fp, buf, total, 0) / size;
    }
#endif
  _newlib_flockfile_end (fp);
  return count;
   8f900:	e0bffc17 	ldw	r2,-16(fp)
}
   8f904:	e6fffd04 	addi	sp,fp,-12
   8f908:	dfc00417 	ldw	ra,16(sp)
   8f90c:	df000317 	ldw	fp,12(sp)
   8f910:	dc800217 	ldw	r18,8(sp)
   8f914:	dc400117 	ldw	r17,4(sp)
   8f918:	dc000017 	ldw	r16,0(sp)
   8f91c:	dec00504 	addi	sp,sp,20
   8f920:	f800283a 	ret

0008f924 <fread>:
_DEFUN(fread, (buf, size, count, fp),
       _PTR __restrict  buf _AND
       size_t size _AND
       size_t count _AND
       FILE *__restrict fp)
{
   8f924:	defff904 	addi	sp,sp,-28
   8f928:	dfc00615 	stw	ra,24(sp)
   8f92c:	df000515 	stw	fp,20(sp)
   8f930:	df000504 	addi	fp,sp,20
   8f934:	e13ffc15 	stw	r4,-16(fp)
   8f938:	e17ffd15 	stw	r5,-12(fp)
   8f93c:	e1bffe15 	stw	r6,-8(fp)
   8f940:	e1ffff15 	stw	r7,-4(fp)
   return _fread_r (_REENT, buf, size, count, fp);
   8f944:	d0e00417 	ldw	r3,-32752(gp)
   8f948:	e0bfff17 	ldw	r2,-4(fp)
   8f94c:	d8800015 	stw	r2,0(sp)
   8f950:	e1fffe17 	ldw	r7,-8(fp)
   8f954:	e1bffd17 	ldw	r6,-12(fp)
   8f958:	e17ffc17 	ldw	r5,-16(fp)
   8f95c:	1809883a 	mov	r4,r3
   8f960:	008f5ec0 	call	8f5ec <_fread_r>
}
   8f964:	e037883a 	mov	sp,fp
   8f968:	dfc00117 	ldw	ra,4(sp)
   8f96c:	df000017 	ldw	fp,0(sp)
   8f970:	dec00204 	addi	sp,sp,8
   8f974:	f800283a 	ret

0008f978 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   8f978:	defff004 	addi	sp,sp,-64
   8f97c:	dfc00f15 	stw	ra,60(sp)
   8f980:	df000e15 	stw	fp,56(sp)
   8f984:	dd800d15 	stw	r22,52(sp)
   8f988:	dd400c15 	stw	r21,48(sp)
   8f98c:	dd000b15 	stw	r20,44(sp)
   8f990:	dcc00a15 	stw	r19,40(sp)
   8f994:	dc800915 	stw	r18,36(sp)
   8f998:	dc400815 	stw	r17,32(sp)
   8f99c:	dc000715 	stw	r16,28(sp)
   8f9a0:	df000e04 	addi	fp,sp,56
   8f9a4:	e13ff815 	stw	r4,-32(fp)
   8f9a8:	2821883a 	mov	r16,r5
   8f9ac:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
   8f9b0:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
   8f9b4:	ac400217 	ldw	r17,8(r21)
   8f9b8:	8800021e 	bne	r17,zero,8f9c4 <__sfvwrite_r+0x4c>
    return 0;
   8f9bc:	0005883a 	mov	r2,zero
   8f9c0:	00015b06 	br	8ff30 <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   8f9c4:	8080030b 	ldhu	r2,12(r16)
   8f9c8:	10bfffcc 	andi	r2,r2,65535
   8f9cc:	1080020c 	andi	r2,r2,8
   8f9d0:	10000226 	beq	r2,zero,8f9dc <__sfvwrite_r+0x64>
   8f9d4:	80800417 	ldw	r2,16(r16)
   8f9d8:	1000061e 	bne	r2,zero,8f9f4 <__sfvwrite_r+0x7c>
   8f9dc:	800b883a 	mov	r5,r16
   8f9e0:	e13ff817 	ldw	r4,-32(fp)
   8f9e4:	008d1980 	call	8d198 <__swsetup_r>
   8f9e8:	10000226 	beq	r2,zero,8f9f4 <__sfvwrite_r+0x7c>
    return EOF;
   8f9ec:	00bfffc4 	movi	r2,-1
   8f9f0:	00014f06 	br	8ff30 <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
   8f9f4:	ad000017 	ldw	r20,0(r21)
  len = 0;
   8f9f8:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   8f9fc:	8080030b 	ldhu	r2,12(r16)
   8fa00:	10bfffcc 	andi	r2,r2,65535
   8fa04:	1080008c 	andi	r2,r2,2
   8fa08:	10001f26 	beq	r2,zero,8fa88 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   8fa0c:	00000306 	br	8fa1c <__sfvwrite_r+0xa4>
   8fa10:	a4c00017 	ldw	r19,0(r20)
   8fa14:	a4400117 	ldw	r17,4(r20)
   8fa18:	a5000204 	addi	r20,r20,8
   8fa1c:	883ffc26 	beq	r17,zero,8fa10 <__alt_data_end+0xfffdda10>
	  w = fp->_write (ptr, fp->_cookie, p,
   8fa20:	82000917 	ldw	r8,36(r16)
   8fa24:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
   8fa28:	8805883a 	mov	r2,r17
   8fa2c:	00e00034 	movhi	r3,32768
   8fa30:	18ff0004 	addi	r3,r3,-1024
   8fa34:	1880022e 	bgeu	r3,r2,8fa40 <__sfvwrite_r+0xc8>
   8fa38:	00a00034 	movhi	r2,32768
   8fa3c:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
   8fa40:	100f883a 	mov	r7,r2
   8fa44:	980d883a 	mov	r6,r19
   8fa48:	200b883a 	mov	r5,r4
   8fa4c:	e13ff817 	ldw	r4,-32(fp)
   8fa50:	403ee83a 	callr	r8
   8fa54:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
   8fa58:	04812c0e 	bge	zero,r18,8ff0c <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
   8fa5c:	9005883a 	mov	r2,r18
   8fa60:	98a7883a 	add	r19,r19,r2
	  len -= w;
   8fa64:	9005883a 	mov	r2,r18
   8fa68:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   8fa6c:	a8800217 	ldw	r2,8(r21)
   8fa70:	9007883a 	mov	r3,r18
   8fa74:	10c5c83a 	sub	r2,r2,r3
   8fa78:	a8800215 	stw	r2,8(r21)
   8fa7c:	a8800217 	ldw	r2,8(r21)
   8fa80:	103fe61e 	bne	r2,zero,8fa1c <__alt_data_end+0xfffdda1c>
   8fa84:	00011f06 	br	8ff04 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
   8fa88:	8080030b 	ldhu	r2,12(r16)
   8fa8c:	10bfffcc 	andi	r2,r2,65535
   8fa90:	1080004c 	andi	r2,r2,1
   8fa94:	1000b81e 	bne	r2,zero,8fd78 <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   8fa98:	00000306 	br	8faa8 <__sfvwrite_r+0x130>
   8fa9c:	a4c00017 	ldw	r19,0(r20)
   8faa0:	a4400117 	ldw	r17,4(r20)
   8faa4:	a5000204 	addi	r20,r20,8
   8faa8:	883ffc26 	beq	r17,zero,8fa9c <__alt_data_end+0xfffdda9c>
	  w = fp->_w;
   8faac:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
   8fab0:	8080030b 	ldhu	r2,12(r16)
   8fab4:	10bfffcc 	andi	r2,r2,65535
   8fab8:	1080800c 	andi	r2,r2,512
   8fabc:	10006b26 	beq	r2,zero,8fc6c <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
   8fac0:	9005883a 	mov	r2,r18
   8fac4:	88805736 	bltu	r17,r2,8fc24 <__sfvwrite_r+0x2ac>
   8fac8:	8080030b 	ldhu	r2,12(r16)
   8facc:	10bfffcc 	andi	r2,r2,65535
   8fad0:	1081200c 	andi	r2,r2,1152
   8fad4:	10005326 	beq	r2,zero,8fc24 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   8fad8:	80800017 	ldw	r2,0(r16)
   8fadc:	1007883a 	mov	r3,r2
   8fae0:	80800417 	ldw	r2,16(r16)
   8fae4:	1885c83a 	sub	r2,r3,r2
   8fae8:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   8faec:	80c00517 	ldw	r3,20(r16)
   8faf0:	1805883a 	mov	r2,r3
   8faf4:	1085883a 	add	r2,r2,r2
   8faf8:	10c5883a 	add	r2,r2,r3
   8fafc:	1006d7fa 	srli	r3,r2,31
   8fb00:	1885883a 	add	r2,r3,r2
   8fb04:	1005d07a 	srai	r2,r2,1
   8fb08:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
   8fb0c:	e0bff617 	ldw	r2,-40(fp)
   8fb10:	1445883a 	add	r2,r2,r17
   8fb14:	10800044 	addi	r2,r2,1
   8fb18:	e0fff517 	ldw	r3,-44(fp)
   8fb1c:	1880042e 	bgeu	r3,r2,8fb30 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
   8fb20:	e0bff617 	ldw	r2,-40(fp)
   8fb24:	1445883a 	add	r2,r2,r17
   8fb28:	10800044 	addi	r2,r2,1
   8fb2c:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
   8fb30:	8080030b 	ldhu	r2,12(r16)
   8fb34:	10bfffcc 	andi	r2,r2,65535
   8fb38:	1081000c 	andi	r2,r2,1024
   8fb3c:	10001726 	beq	r2,zero,8fb9c <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
   8fb40:	e0bff517 	ldw	r2,-44(fp)
   8fb44:	100b883a 	mov	r5,r2
   8fb48:	e13ff817 	ldw	r4,-32(fp)
   8fb4c:	00874a40 	call	874a4 <_malloc_r>
   8fb50:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
   8fb54:	e0bff417 	ldw	r2,-48(fp)
   8fb58:	1000041e 	bne	r2,zero,8fb6c <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
   8fb5c:	e0bff817 	ldw	r2,-32(fp)
   8fb60:	00c00304 	movi	r3,12
   8fb64:	10c00015 	stw	r3,0(r2)
			  goto err;
   8fb68:	0000ed06 	br	8ff20 <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
   8fb6c:	80800417 	ldw	r2,16(r16)
   8fb70:	e0fff617 	ldw	r3,-40(fp)
   8fb74:	180d883a 	mov	r6,r3
   8fb78:	100b883a 	mov	r5,r2
   8fb7c:	e13ff417 	ldw	r4,-48(fp)
   8fb80:	009069c0 	call	9069c <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   8fb84:	80c0030b 	ldhu	r3,12(r16)
   8fb88:	00bedfc4 	movi	r2,-1153
   8fb8c:	1884703a 	and	r2,r3,r2
   8fb90:	10802014 	ori	r2,r2,128
   8fb94:	8080030d 	sth	r2,12(r16)
   8fb98:	00001506 	br	8fbf0 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   8fb9c:	80800417 	ldw	r2,16(r16)
   8fba0:	e0fff517 	ldw	r3,-44(fp)
   8fba4:	180d883a 	mov	r6,r3
   8fba8:	100b883a 	mov	r5,r2
   8fbac:	e13ff817 	ldw	r4,-32(fp)
   8fbb0:	009254c0 	call	9254c <_realloc_r>
   8fbb4:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
   8fbb8:	e0bff417 	ldw	r2,-48(fp)
   8fbbc:	10000c1e 	bne	r2,zero,8fbf0 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
   8fbc0:	80800417 	ldw	r2,16(r16)
   8fbc4:	100b883a 	mov	r5,r2
   8fbc8:	e13ff817 	ldw	r4,-32(fp)
   8fbcc:	0085c480 	call	85c48 <_free_r>
			  fp->_flags &=  ~__SMBF;
   8fbd0:	80c0030b 	ldhu	r3,12(r16)
   8fbd4:	00bfdfc4 	movi	r2,-129
   8fbd8:	1884703a 	and	r2,r3,r2
   8fbdc:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
   8fbe0:	e0bff817 	ldw	r2,-32(fp)
   8fbe4:	00c00304 	movi	r3,12
   8fbe8:	10c00015 	stw	r3,0(r2)
			  goto err;
   8fbec:	0000cc06 	br	8ff20 <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
   8fbf0:	e0bff417 	ldw	r2,-48(fp)
   8fbf4:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
   8fbf8:	e0bff617 	ldw	r2,-40(fp)
   8fbfc:	e0fff417 	ldw	r3,-48(fp)
   8fc00:	1885883a 	add	r2,r3,r2
   8fc04:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
   8fc08:	e0bff517 	ldw	r2,-44(fp)
   8fc0c:	80800515 	stw	r2,20(r16)
		  w = len;
   8fc10:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
   8fc14:	e0fff517 	ldw	r3,-44(fp)
   8fc18:	e0bff617 	ldw	r2,-40(fp)
   8fc1c:	1885c83a 	sub	r2,r3,r2
   8fc20:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
   8fc24:	9005883a 	mov	r2,r18
   8fc28:	8880012e 	bgeu	r17,r2,8fc30 <__sfvwrite_r+0x2b8>
		w = len;
   8fc2c:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
   8fc30:	80800017 	ldw	r2,0(r16)
   8fc34:	9007883a 	mov	r3,r18
   8fc38:	180d883a 	mov	r6,r3
   8fc3c:	980b883a 	mov	r5,r19
   8fc40:	1009883a 	mov	r4,r2
   8fc44:	00908240 	call	90824 <memmove>
	      fp->_w -= w;
   8fc48:	80800217 	ldw	r2,8(r16)
   8fc4c:	1485c83a 	sub	r2,r2,r18
   8fc50:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   8fc54:	80800017 	ldw	r2,0(r16)
   8fc58:	9007883a 	mov	r3,r18
   8fc5c:	10c5883a 	add	r2,r2,r3
   8fc60:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
   8fc64:	8825883a 	mov	r18,r17
   8fc68:	00003806 	br	8fd4c <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
   8fc6c:	80800017 	ldw	r2,0(r16)
   8fc70:	80c00417 	ldw	r3,16(r16)
   8fc74:	18800236 	bltu	r3,r2,8fc80 <__sfvwrite_r+0x308>
   8fc78:	80800517 	ldw	r2,20(r16)
   8fc7c:	8880182e 	bgeu	r17,r2,8fce0 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
   8fc80:	9005883a 	mov	r2,r18
   8fc84:	8880012e 	bgeu	r17,r2,8fc8c <__sfvwrite_r+0x314>
   8fc88:	8805883a 	mov	r2,r17
   8fc8c:	1025883a 	mov	r18,r2
	      COPY (w);
   8fc90:	80800017 	ldw	r2,0(r16)
   8fc94:	9007883a 	mov	r3,r18
   8fc98:	180d883a 	mov	r6,r3
   8fc9c:	980b883a 	mov	r5,r19
   8fca0:	1009883a 	mov	r4,r2
   8fca4:	00908240 	call	90824 <memmove>
	      fp->_w -= w;
   8fca8:	80800217 	ldw	r2,8(r16)
   8fcac:	1485c83a 	sub	r2,r2,r18
   8fcb0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   8fcb4:	80800017 	ldw	r2,0(r16)
   8fcb8:	9007883a 	mov	r3,r18
   8fcbc:	10c5883a 	add	r2,r2,r3
   8fcc0:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   8fcc4:	80800217 	ldw	r2,8(r16)
   8fcc8:	10001f1e 	bne	r2,zero,8fd48 <__sfvwrite_r+0x3d0>
   8fccc:	800b883a 	mov	r5,r16
   8fcd0:	e13ff817 	ldw	r4,-32(fp)
   8fcd4:	00852a40 	call	852a4 <_fflush_r>
   8fcd8:	10001b26 	beq	r2,zero,8fd48 <__sfvwrite_r+0x3d0>
		goto err;
   8fcdc:	00009006 	br	8ff20 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   8fce0:	8805883a 	mov	r2,r17
   8fce4:	00e00034 	movhi	r3,32768
   8fce8:	10c00236 	bltu	r2,r3,8fcf4 <__sfvwrite_r+0x37c>
   8fcec:	00a00034 	movhi	r2,32768
   8fcf0:	10bfffc4 	addi	r2,r2,-1
   8fcf4:	1007883a 	mov	r3,r2
   8fcf8:	80800517 	ldw	r2,20(r16)
   8fcfc:	100b883a 	mov	r5,r2
   8fd00:	1809883a 	mov	r4,r3
   8fd04:	00821ec0 	call	821ec <__divsi3>
   8fd08:	1007883a 	mov	r3,r2
   8fd0c:	80800517 	ldw	r2,20(r16)
   8fd10:	100b883a 	mov	r5,r2
   8fd14:	1809883a 	mov	r4,r3
   8fd18:	00823a00 	call	823a0 <__mulsi3>
   8fd1c:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
   8fd20:	80800917 	ldw	r2,36(r16)
   8fd24:	80c00717 	ldw	r3,28(r16)
   8fd28:	900f883a 	mov	r7,r18
   8fd2c:	980d883a 	mov	r6,r19
   8fd30:	180b883a 	mov	r5,r3
   8fd34:	e13ff817 	ldw	r4,-32(fp)
   8fd38:	103ee83a 	callr	r2
   8fd3c:	1025883a 	mov	r18,r2
	      if (w <= 0)
   8fd40:	0480740e 	bge	zero,r18,8ff14 <__sfvwrite_r+0x59c>
   8fd44:	00000106 	br	8fd4c <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   8fd48:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
   8fd4c:	9005883a 	mov	r2,r18
   8fd50:	98a7883a 	add	r19,r19,r2
	  len -= w;
   8fd54:	9005883a 	mov	r2,r18
   8fd58:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   8fd5c:	a8800217 	ldw	r2,8(r21)
   8fd60:	9007883a 	mov	r3,r18
   8fd64:	10c5c83a 	sub	r2,r2,r3
   8fd68:	a8800215 	stw	r2,8(r21)
   8fd6c:	a8800217 	ldw	r2,8(r21)
   8fd70:	103f4d1e 	bne	r2,zero,8faa8 <__alt_data_end+0xfffddaa8>
   8fd74:	00006306 	br	8ff04 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
   8fd78:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
   8fd7c:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
   8fd80:	00000406 	br	8fd94 <__sfvwrite_r+0x41c>
   8fd84:	e03ff215 	stw	zero,-56(fp)
   8fd88:	a4c00017 	ldw	r19,0(r20)
   8fd8c:	a4400117 	ldw	r17,4(r20)
   8fd90:	a5000204 	addi	r20,r20,8
   8fd94:	883ffb26 	beq	r17,zero,8fd84 <__alt_data_end+0xfffddd84>
	  if (!nlknown)
   8fd98:	e0bff217 	ldw	r2,-56(fp)
   8fd9c:	1000111e 	bne	r2,zero,8fde4 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
   8fda0:	880d883a 	mov	r6,r17
   8fda4:	01400284 	movi	r5,10
   8fda8:	9809883a 	mov	r4,r19
   8fdac:	00904e00 	call	904e0 <memchr>
   8fdb0:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
   8fdb4:	e0bff717 	ldw	r2,-36(fp)
   8fdb8:	10000626 	beq	r2,zero,8fdd4 <__sfvwrite_r+0x45c>
   8fdbc:	e0bff717 	ldw	r2,-36(fp)
   8fdc0:	10800044 	addi	r2,r2,1
   8fdc4:	1007883a 	mov	r3,r2
   8fdc8:	9805883a 	mov	r2,r19
   8fdcc:	1885c83a 	sub	r2,r3,r2
   8fdd0:	00000106 	br	8fdd8 <__sfvwrite_r+0x460>
   8fdd4:	88800044 	addi	r2,r17,1
   8fdd8:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
   8fddc:	00800044 	movi	r2,1
   8fde0:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
   8fde4:	e0bff317 	ldw	r2,-52(fp)
   8fde8:	8880012e 	bgeu	r17,r2,8fdf0 <__sfvwrite_r+0x478>
   8fdec:	8805883a 	mov	r2,r17
   8fdf0:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
   8fdf4:	80c00217 	ldw	r3,8(r16)
   8fdf8:	80800517 	ldw	r2,20(r16)
   8fdfc:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
   8fe00:	80800017 	ldw	r2,0(r16)
   8fe04:	80c00417 	ldw	r3,16(r16)
   8fe08:	1880102e 	bgeu	r3,r2,8fe4c <__sfvwrite_r+0x4d4>
   8fe0c:	95800f0e 	bge	r18,r22,8fe4c <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
   8fe10:	80800017 	ldw	r2,0(r16)
   8fe14:	9007883a 	mov	r3,r18
   8fe18:	180d883a 	mov	r6,r3
   8fe1c:	980b883a 	mov	r5,r19
   8fe20:	1009883a 	mov	r4,r2
   8fe24:	00908240 	call	90824 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
   8fe28:	80800017 	ldw	r2,0(r16)
   8fe2c:	9007883a 	mov	r3,r18
   8fe30:	10c5883a 	add	r2,r2,r3
   8fe34:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
   8fe38:	800b883a 	mov	r5,r16
   8fe3c:	e13ff817 	ldw	r4,-32(fp)
   8fe40:	00852a40 	call	852a4 <_fflush_r>
   8fe44:	10001b26 	beq	r2,zero,8feb4 <__sfvwrite_r+0x53c>
		goto err;
   8fe48:	00003506 	br	8ff20 <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
   8fe4c:	84800517 	ldw	r18,20(r16)
   8fe50:	b4800a16 	blt	r22,r18,8fe7c <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
   8fe54:	80800917 	ldw	r2,36(r16)
   8fe58:	80c00717 	ldw	r3,28(r16)
   8fe5c:	900f883a 	mov	r7,r18
   8fe60:	980d883a 	mov	r6,r19
   8fe64:	180b883a 	mov	r5,r3
   8fe68:	e13ff817 	ldw	r4,-32(fp)
   8fe6c:	103ee83a 	callr	r2
   8fe70:	1025883a 	mov	r18,r2
	      if (w <= 0)
   8fe74:	04800f16 	blt	zero,r18,8feb4 <__sfvwrite_r+0x53c>
		goto err;
   8fe78:	00002906 	br	8ff20 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
   8fe7c:	b025883a 	mov	r18,r22
	      COPY (w);
   8fe80:	80800017 	ldw	r2,0(r16)
   8fe84:	9007883a 	mov	r3,r18
   8fe88:	180d883a 	mov	r6,r3
   8fe8c:	980b883a 	mov	r5,r19
   8fe90:	1009883a 	mov	r4,r2
   8fe94:	00908240 	call	90824 <memmove>
	      fp->_w -= w;
   8fe98:	80800217 	ldw	r2,8(r16)
   8fe9c:	1485c83a 	sub	r2,r2,r18
   8fea0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   8fea4:	80800017 	ldw	r2,0(r16)
   8fea8:	9007883a 	mov	r3,r18
   8feac:	10c5883a 	add	r2,r2,r3
   8feb0:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
   8feb4:	e0bff317 	ldw	r2,-52(fp)
   8feb8:	1485c83a 	sub	r2,r2,r18
   8febc:	e0bff315 	stw	r2,-52(fp)
   8fec0:	e0bff317 	ldw	r2,-52(fp)
   8fec4:	1000051e 	bne	r2,zero,8fedc <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
   8fec8:	800b883a 	mov	r5,r16
   8fecc:	e13ff817 	ldw	r4,-32(fp)
   8fed0:	00852a40 	call	852a4 <_fflush_r>
   8fed4:	1000111e 	bne	r2,zero,8ff1c <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
   8fed8:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
   8fedc:	9005883a 	mov	r2,r18
   8fee0:	98a7883a 	add	r19,r19,r2
	  len -= w;
   8fee4:	9005883a 	mov	r2,r18
   8fee8:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   8feec:	a8800217 	ldw	r2,8(r21)
   8fef0:	9007883a 	mov	r3,r18
   8fef4:	10c5c83a 	sub	r2,r2,r3
   8fef8:	a8800215 	stw	r2,8(r21)
   8fefc:	a8800217 	ldw	r2,8(r21)
   8ff00:	103fa41e 	bne	r2,zero,8fd94 <__alt_data_end+0xfffddd94>
    }
  return 0;
   8ff04:	0005883a 	mov	r2,zero
   8ff08:	00000906 	br	8ff30 <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
   8ff0c:	0001883a 	nop
   8ff10:	00000306 	br	8ff20 <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
   8ff14:	0001883a 	nop
   8ff18:	00000106 	br	8ff20 <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
   8ff1c:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
   8ff20:	8080030b 	ldhu	r2,12(r16)
   8ff24:	10801014 	ori	r2,r2,64
   8ff28:	8080030d 	sth	r2,12(r16)
  return EOF;
   8ff2c:	00bfffc4 	movi	r2,-1
}
   8ff30:	e6fff904 	addi	sp,fp,-28
   8ff34:	dfc00817 	ldw	ra,32(sp)
   8ff38:	df000717 	ldw	fp,28(sp)
   8ff3c:	dd800617 	ldw	r22,24(sp)
   8ff40:	dd400517 	ldw	r21,20(sp)
   8ff44:	dd000417 	ldw	r20,16(sp)
   8ff48:	dcc00317 	ldw	r19,12(sp)
   8ff4c:	dc800217 	ldw	r18,8(sp)
   8ff50:	dc400117 	ldw	r17,4(sp)
   8ff54:	dc000017 	ldw	r16,0(sp)
   8ff58:	dec00904 	addi	sp,sp,36
   8ff5c:	f800283a 	ret

0008ff60 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   8ff60:	defffb04 	addi	sp,sp,-20
   8ff64:	dfc00415 	stw	ra,16(sp)
   8ff68:	df000315 	stw	fp,12(sp)
   8ff6c:	df000304 	addi	fp,sp,12
   8ff70:	e13ffe15 	stw	r4,-8(fp)
   8ff74:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   8ff78:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
   8ff7c:	e13fff17 	ldw	r4,-4(fp)
   8ff80:	009e1bc0 	call	9e1bc <isatty>
   8ff84:	e0bffd15 	stw	r2,-12(fp)
   8ff88:	e0bffd17 	ldw	r2,-12(fp)
   8ff8c:	10bfffd8 	cmpnei	r2,r2,-1
   8ff90:	1000051e 	bne	r2,zero,8ffa8 <_isatty_r+0x48>
   8ff94:	d0a70f17 	ldw	r2,-25540(gp)
   8ff98:	10000326 	beq	r2,zero,8ffa8 <_isatty_r+0x48>
    ptr->_errno = errno;
   8ff9c:	d0e70f17 	ldw	r3,-25540(gp)
   8ffa0:	e0bffe17 	ldw	r2,-8(fp)
   8ffa4:	10c00015 	stw	r3,0(r2)
  return ret;
   8ffa8:	e0bffd17 	ldw	r2,-12(fp)
}
   8ffac:	e037883a 	mov	sp,fp
   8ffb0:	dfc00117 	ldw	ra,4(sp)
   8ffb4:	df000017 	ldw	fp,0(sp)
   8ffb8:	dec00204 	addi	sp,sp,8
   8ffbc:	f800283a 	ret

0008ffc0 <iswspace>:
#include <string.h>
#include "local.h"

int
_DEFUN(iswspace,(c), wint_t c)
{
   8ffc0:	defffe04 	addi	sp,sp,-8
   8ffc4:	df000115 	stw	fp,4(sp)
   8ffc8:	df000104 	addi	fp,sp,4
   8ffcc:	e13fff15 	stw	r4,-4(fp)
	  (c >= 0x2000 && c <= 0x2006) ||
	  (c >= 0x2008 && c <= 0x200a) ||
	  c == 0x2028 || c == 0x2029 ||
	  c == 0x205f || c == 0x3000);
#else
  return (c < 0x100 ? isspace (c) : 0);
   8ffd0:	e0bfff17 	ldw	r2,-4(fp)
   8ffd4:	10804028 	cmpgeui	r2,r2,256
   8ffd8:	1000081e 	bne	r2,zero,8fffc <iswspace+0x3c>
   8ffdc:	d0e00817 	ldw	r3,-32736(gp)
   8ffe0:	e0bfff17 	ldw	r2,-4(fp)
   8ffe4:	10800044 	addi	r2,r2,1
   8ffe8:	1885883a 	add	r2,r3,r2
   8ffec:	10800003 	ldbu	r2,0(r2)
   8fff0:	10803fcc 	andi	r2,r2,255
   8fff4:	1080020c 	andi	r2,r2,8
   8fff8:	00000106 	br	90000 <iswspace+0x40>
   8fffc:	0005883a 	mov	r2,zero
#endif /* _MB_CAPABLE */
}
   90000:	e037883a 	mov	sp,fp
   90004:	df000017 	ldw	fp,0(sp)
   90008:	dec00104 	addi	sp,sp,4
   9000c:	f800283a 	ret

00090010 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
   90010:	defffb04 	addi	sp,sp,-20
   90014:	dfc00415 	stw	ra,16(sp)
   90018:	df000315 	stw	fp,12(sp)
   9001c:	df000304 	addi	fp,sp,12
   90020:	e13ffd15 	stw	r4,-12(fp)
   90024:	e17ffe15 	stw	r5,-8(fp)
   90028:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
   9002c:	e0bfff17 	ldw	r2,-4(fp)
   90030:	10001126 	beq	r2,zero,90078 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
   90034:	014002b4 	movhi	r5,10
   90038:	29447404 	addi	r5,r5,4560
   9003c:	e13fff17 	ldw	r4,-4(fp)
   90040:	00934dc0 	call	934dc <strcmp>
   90044:	10000c26 	beq	r2,zero,90078 <_setlocale_r+0x68>
   90048:	014002b4 	movhi	r5,10
   9004c:	29447604 	addi	r5,r5,4568
   90050:	e13fff17 	ldw	r4,-4(fp)
   90054:	00934dc0 	call	934dc <strcmp>
   90058:	10000726 	beq	r2,zero,90078 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
   9005c:	014002b4 	movhi	r5,10
   90060:	29447304 	addi	r5,r5,4556
   90064:	e13fff17 	ldw	r4,-4(fp)
   90068:	00934dc0 	call	934dc <strcmp>
   9006c:	10000226 	beq	r2,zero,90078 <_setlocale_r+0x68>
        return NULL;
   90070:	0005883a 	mov	r2,zero
   90074:	00000206 	br	90080 <_setlocale_r+0x70>
    }
  return "C";
   90078:	008002b4 	movhi	r2,10
   9007c:	10847604 	addi	r2,r2,4568
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
   90080:	e037883a 	mov	sp,fp
   90084:	dfc00117 	ldw	ra,4(sp)
   90088:	df000017 	ldw	fp,0(sp)
   9008c:	dec00204 	addi	sp,sp,8
   90090:	f800283a 	ret

00090094 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
   90094:	deffff04 	addi	sp,sp,-4
   90098:	df000015 	stw	fp,0(sp)
   9009c:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
   900a0:	008002b4 	movhi	r2,10
   900a4:	10879604 	addi	r2,r2,7768
#endif
}
   900a8:	e037883a 	mov	sp,fp
   900ac:	df000017 	ldw	fp,0(sp)
   900b0:	dec00104 	addi	sp,sp,4
   900b4:	f800283a 	ret

000900b8 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
   900b8:	deffff04 	addi	sp,sp,-4
   900bc:	df000015 	stw	fp,0(sp)
   900c0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
   900c4:	d0a00917 	ldw	r2,-32732(gp)
#endif
}
   900c8:	e037883a 	mov	sp,fp
   900cc:	df000017 	ldw	fp,0(sp)
   900d0:	dec00104 	addi	sp,sp,4
   900d4:	f800283a 	ret

000900d8 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
   900d8:	deffff04 	addi	sp,sp,-4
   900dc:	df000015 	stw	fp,0(sp)
   900e0:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
   900e4:	008002b4 	movhi	r2,10
   900e8:	10879e04 	addi	r2,r2,7800
#endif
}
   900ec:	e037883a 	mov	sp,fp
   900f0:	df000017 	ldw	fp,0(sp)
   900f4:	dec00104 	addi	sp,sp,4
   900f8:	f800283a 	ret

000900fc <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
   900fc:	deffff04 	addi	sp,sp,-4
   90100:	df000015 	stw	fp,0(sp)
   90104:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
   90108:	d0a71717 	ldw	r2,-25508(gp)
}
   9010c:	e037883a 	mov	sp,fp
   90110:	df000017 	ldw	fp,0(sp)
   90114:	dec00104 	addi	sp,sp,4
   90118:	f800283a 	ret

0009011c <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
   9011c:	defffe04 	addi	sp,sp,-8
   90120:	df000115 	stw	fp,4(sp)
   90124:	df000104 	addi	fp,sp,4
   90128:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
   9012c:	008002b4 	movhi	r2,10
   90130:	10878804 	addi	r2,r2,7712
}
   90134:	e037883a 	mov	sp,fp
   90138:	df000017 	ldw	fp,0(sp)
   9013c:	dec00104 	addi	sp,sp,4
   90140:	f800283a 	ret

00090144 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
   90144:	defffc04 	addi	sp,sp,-16
   90148:	dfc00315 	stw	ra,12(sp)
   9014c:	df000215 	stw	fp,8(sp)
   90150:	df000204 	addi	fp,sp,8
   90154:	e13ffe15 	stw	r4,-8(fp)
   90158:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
   9015c:	d0a00417 	ldw	r2,-32752(gp)
   90160:	e1bfff17 	ldw	r6,-4(fp)
   90164:	e17ffe17 	ldw	r5,-8(fp)
   90168:	1009883a 	mov	r4,r2
   9016c:	00900100 	call	90010 <_setlocale_r>
}
   90170:	e037883a 	mov	sp,fp
   90174:	dfc00117 	ldw	ra,4(sp)
   90178:	df000017 	ldw	fp,0(sp)
   9017c:	dec00204 	addi	sp,sp,8
   90180:	f800283a 	ret

00090184 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
   90184:	defffe04 	addi	sp,sp,-8
   90188:	dfc00115 	stw	ra,4(sp)
   9018c:	df000015 	stw	fp,0(sp)
   90190:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
   90194:	d0a00417 	ldw	r2,-32752(gp)
   90198:	1009883a 	mov	r4,r2
   9019c:	009011c0 	call	9011c <_localeconv_r>
}
   901a0:	e037883a 	mov	sp,fp
   901a4:	dfc00117 	ldw	ra,4(sp)
   901a8:	df000017 	ldw	fp,0(sp)
   901ac:	dec00204 	addi	sp,sp,8
   901b0:	f800283a 	ret

000901b4 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
   901b4:	defff904 	addi	sp,sp,-28
   901b8:	dfc00615 	stw	ra,24(sp)
   901bc:	df000515 	stw	fp,20(sp)
   901c0:	df000504 	addi	fp,sp,20
   901c4:	e13ffc15 	stw	r4,-16(fp)
   901c8:	e17ffd15 	stw	r5,-12(fp)
   901cc:	e1bffe15 	stw	r6,-8(fp)
   901d0:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
   901d4:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
   901d8:	e1bfff17 	ldw	r6,-4(fp)
   901dc:	e17ffe17 	ldw	r5,-8(fp)
   901e0:	e13ffd17 	ldw	r4,-12(fp)
   901e4:	009e3900 	call	9e390 <lseek>
   901e8:	e0bffb15 	stw	r2,-20(fp)
   901ec:	e0bffb17 	ldw	r2,-20(fp)
   901f0:	10bfffd8 	cmpnei	r2,r2,-1
   901f4:	1000051e 	bne	r2,zero,9020c <_lseek_r+0x58>
   901f8:	d0a70f17 	ldw	r2,-25540(gp)
   901fc:	10000326 	beq	r2,zero,9020c <_lseek_r+0x58>
    ptr->_errno = errno;
   90200:	d0e70f17 	ldw	r3,-25540(gp)
   90204:	e0bffc17 	ldw	r2,-16(fp)
   90208:	10c00015 	stw	r3,0(r2)
  return ret;
   9020c:	e0bffb17 	ldw	r2,-20(fp)
}
   90210:	e037883a 	mov	sp,fp
   90214:	dfc00117 	ldw	ra,4(sp)
   90218:	df000017 	ldw	fp,0(sp)
   9021c:	dec00204 	addi	sp,sp,8
   90220:	f800283a 	ret

00090224 <_mbrtowc_r>:
	struct _reent *ptr _AND
	wchar_t *pwc _AND
	const char *s _AND
	size_t n _AND
	mbstate_t *ps)
{
   90224:	defff604 	addi	sp,sp,-40
   90228:	dfc00915 	stw	ra,36(sp)
   9022c:	df000815 	stw	fp,32(sp)
   90230:	dc000715 	stw	r16,28(sp)
   90234:	df000804 	addi	fp,sp,32
   90238:	e13ffb15 	stw	r4,-20(fp)
   9023c:	e17ffc15 	stw	r5,-16(fp)
   90240:	e1bffd15 	stw	r6,-12(fp)
   90244:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
   90248:	e03ffa15 	stw	zero,-24(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_MBRTOWC_STATE(ptr));
    }
#endif

  if (s == NULL)
   9024c:	e0bffd17 	ldw	r2,-12(fp)
   90250:	10000e1e 	bne	r2,zero,9028c <_mbrtowc_r+0x68>
    retval = __mbtowc (ptr, NULL, "", 1, __locale_charset (), ps);
   90254:	d4200a17 	ldw	r16,-32728(gp)
   90258:	00900940 	call	90094 <__locale_charset>
   9025c:	1007883a 	mov	r3,r2
   90260:	e0800217 	ldw	r2,8(fp)
   90264:	d8800115 	stw	r2,4(sp)
   90268:	d8c00015 	stw	r3,0(sp)
   9026c:	01c00044 	movi	r7,1
   90270:	018002b4 	movhi	r6,10
   90274:	31847704 	addi	r6,r6,4572
   90278:	000b883a 	mov	r5,zero
   9027c:	e13ffb17 	ldw	r4,-20(fp)
   90280:	803ee83a 	callr	r16
   90284:	e0bffa15 	stw	r2,-24(fp)
   90288:	00000c06 	br	902bc <_mbrtowc_r+0x98>
  else
    retval = __mbtowc (ptr, pwc, s, n, __locale_charset (), ps);
   9028c:	d4200a17 	ldw	r16,-32728(gp)
   90290:	00900940 	call	90094 <__locale_charset>
   90294:	1007883a 	mov	r3,r2
   90298:	e0800217 	ldw	r2,8(fp)
   9029c:	d8800115 	stw	r2,4(sp)
   902a0:	d8c00015 	stw	r3,0(sp)
   902a4:	e1fffe17 	ldw	r7,-8(fp)
   902a8:	e1bffd17 	ldw	r6,-12(fp)
   902ac:	e17ffc17 	ldw	r5,-16(fp)
   902b0:	e13ffb17 	ldw	r4,-20(fp)
   902b4:	803ee83a 	callr	r16
   902b8:	e0bffa15 	stw	r2,-24(fp)

  if (retval == -1)
   902bc:	e0bffa17 	ldw	r2,-24(fp)
   902c0:	10bfffd8 	cmpnei	r2,r2,-1
   902c4:	1000071e 	bne	r2,zero,902e4 <_mbrtowc_r+0xc0>
    {
      ps->__count = 0;
   902c8:	e0800217 	ldw	r2,8(fp)
   902cc:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
   902d0:	e0bffb17 	ldw	r2,-20(fp)
   902d4:	00c02284 	movi	r3,138
   902d8:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   902dc:	00bfffc4 	movi	r2,-1
   902e0:	00000106 	br	902e8 <_mbrtowc_r+0xc4>
    }
  else
    return (size_t)retval;
   902e4:	e0bffa17 	ldw	r2,-24(fp)
}
   902e8:	e6ffff04 	addi	sp,fp,-4
   902ec:	dfc00217 	ldw	ra,8(sp)
   902f0:	df000117 	ldw	fp,4(sp)
   902f4:	dc000017 	ldw	r16,0(sp)
   902f8:	dec00304 	addi	sp,sp,12
   902fc:	f800283a 	ret

00090300 <mbrtowc>:
_DEFUN (mbrtowc, (pwc, s, n, ps),
	wchar_t *__restrict pwc _AND
	const char *__restrict s _AND
	size_t n _AND
	mbstate_t *__restrict ps)
{
   90300:	defff504 	addi	sp,sp,-44
   90304:	dfc00a15 	stw	ra,40(sp)
   90308:	df000915 	stw	fp,36(sp)
   9030c:	dc000815 	stw	r16,32(sp)
   90310:	df000904 	addi	fp,sp,36
   90314:	e13ffb15 	stw	r4,-20(fp)
   90318:	e17ffc15 	stw	r5,-16(fp)
   9031c:	e1bffd15 	stw	r6,-12(fp)
   90320:	e1fffe15 	stw	r7,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _mbrtowc_r (_REENT, pwc, s, n, ps);
#else
  int retval = 0;
   90324:	e03ff915 	stw	zero,-28(fp)
  struct _reent *reent = _REENT;
   90328:	d0a00417 	ldw	r2,-32752(gp)
   9032c:	e0bffa15 	stw	r2,-24(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_MBRTOWC_STATE(reent));
    }
#endif

  if (s == NULL)
   90330:	e0bffc17 	ldw	r2,-16(fp)
   90334:	10000e1e 	bne	r2,zero,90370 <mbrtowc+0x70>
    retval = __mbtowc (reent, NULL, "", 1, __locale_charset (), ps);
   90338:	d4200a17 	ldw	r16,-32728(gp)
   9033c:	00900940 	call	90094 <__locale_charset>
   90340:	1007883a 	mov	r3,r2
   90344:	e0bffe17 	ldw	r2,-8(fp)
   90348:	d8800115 	stw	r2,4(sp)
   9034c:	d8c00015 	stw	r3,0(sp)
   90350:	01c00044 	movi	r7,1
   90354:	018002b4 	movhi	r6,10
   90358:	31847704 	addi	r6,r6,4572
   9035c:	000b883a 	mov	r5,zero
   90360:	e13ffa17 	ldw	r4,-24(fp)
   90364:	803ee83a 	callr	r16
   90368:	e0bff915 	stw	r2,-28(fp)
   9036c:	00000c06 	br	903a0 <mbrtowc+0xa0>
  else
    retval = __mbtowc (reent, pwc, s, n, __locale_charset (), ps);
   90370:	d4200a17 	ldw	r16,-32728(gp)
   90374:	00900940 	call	90094 <__locale_charset>
   90378:	1007883a 	mov	r3,r2
   9037c:	e0bffe17 	ldw	r2,-8(fp)
   90380:	d8800115 	stw	r2,4(sp)
   90384:	d8c00015 	stw	r3,0(sp)
   90388:	e1fffd17 	ldw	r7,-12(fp)
   9038c:	e1bffc17 	ldw	r6,-16(fp)
   90390:	e17ffb17 	ldw	r5,-20(fp)
   90394:	e13ffa17 	ldw	r4,-24(fp)
   90398:	803ee83a 	callr	r16
   9039c:	e0bff915 	stw	r2,-28(fp)

  if (retval == -1)
   903a0:	e0bff917 	ldw	r2,-28(fp)
   903a4:	10bfffd8 	cmpnei	r2,r2,-1
   903a8:	1000071e 	bne	r2,zero,903c8 <mbrtowc+0xc8>
    {
      ps->__count = 0;
   903ac:	e0bffe17 	ldw	r2,-8(fp)
   903b0:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
   903b4:	e0bffa17 	ldw	r2,-24(fp)
   903b8:	00c02284 	movi	r3,138
   903bc:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   903c0:	00bfffc4 	movi	r2,-1
   903c4:	00000106 	br	903cc <mbrtowc+0xcc>
    }
  else
    return (size_t)retval;
   903c8:	e0bff917 	ldw	r2,-28(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   903cc:	e6ffff04 	addi	sp,fp,-4
   903d0:	dfc00217 	ldw	ra,8(sp)
   903d4:	df000117 	ldw	fp,4(sp)
   903d8:	dc000017 	ldw	r16,0(sp)
   903dc:	dec00304 	addi	sp,sp,12
   903e0:	f800283a 	ret

000903e4 <_mbtowc_r>:
        struct _reent *r   _AND
        wchar_t       *__restrict pwc _AND 
        const char    *__restrict s   _AND        
        size_t         n   _AND
        mbstate_t      *state)
{
   903e4:	defff704 	addi	sp,sp,-36
   903e8:	dfc00815 	stw	ra,32(sp)
   903ec:	df000715 	stw	fp,28(sp)
   903f0:	dc000615 	stw	r16,24(sp)
   903f4:	df000704 	addi	fp,sp,28
   903f8:	e13ffb15 	stw	r4,-20(fp)
   903fc:	e17ffc15 	stw	r5,-16(fp)
   90400:	e1bffd15 	stw	r6,-12(fp)
   90404:	e1fffe15 	stw	r7,-8(fp)
  return __mbtowc (r, pwc, s, n, __locale_charset (), state);
   90408:	d4200a17 	ldw	r16,-32728(gp)
   9040c:	00900940 	call	90094 <__locale_charset>
   90410:	1007883a 	mov	r3,r2
   90414:	e0800217 	ldw	r2,8(fp)
   90418:	d8800115 	stw	r2,4(sp)
   9041c:	d8c00015 	stw	r3,0(sp)
   90420:	e1fffe17 	ldw	r7,-8(fp)
   90424:	e1bffd17 	ldw	r6,-12(fp)
   90428:	e17ffc17 	ldw	r5,-16(fp)
   9042c:	e13ffb17 	ldw	r4,-20(fp)
   90430:	803ee83a 	callr	r16
}
   90434:	e6ffff04 	addi	sp,fp,-4
   90438:	dfc00217 	ldw	ra,8(sp)
   9043c:	df000117 	ldw	fp,4(sp)
   90440:	dc000017 	ldw	r16,0(sp)
   90444:	dec00304 	addi	sp,sp,12
   90448:	f800283a 	ret

0009044c <__ascii_mbtowc>:
        wchar_t       *pwc     _AND 
        const char    *s       _AND        
        size_t         n       _AND
	const char    *charset _AND
        mbstate_t      *state)
{
   9044c:	defff904 	addi	sp,sp,-28
   90450:	df000615 	stw	fp,24(sp)
   90454:	df000604 	addi	fp,sp,24
   90458:	e13ffc15 	stw	r4,-16(fp)
   9045c:	e17ffd15 	stw	r5,-12(fp)
   90460:	e1bffe15 	stw	r6,-8(fp)
   90464:	e1ffff15 	stw	r7,-4(fp)
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;
   90468:	e0bffe17 	ldw	r2,-8(fp)
   9046c:	e0bffa15 	stw	r2,-24(fp)

  if (pwc == NULL)
   90470:	e0bffd17 	ldw	r2,-12(fp)
   90474:	1000021e 	bne	r2,zero,90480 <__ascii_mbtowc+0x34>
    pwc = &dummy;
   90478:	e0bffb04 	addi	r2,fp,-20
   9047c:	e0bffd15 	stw	r2,-12(fp)

  if (s == NULL)
   90480:	e0bffe17 	ldw	r2,-8(fp)
   90484:	1000021e 	bne	r2,zero,90490 <__ascii_mbtowc+0x44>
    return 0;
   90488:	0005883a 	mov	r2,zero
   9048c:	00001006 	br	904d0 <__ascii_mbtowc+0x84>

  if (n == 0)
   90490:	e0bfff17 	ldw	r2,-4(fp)
   90494:	1000021e 	bne	r2,zero,904a0 <__ascii_mbtowc+0x54>
    return -2;
   90498:	00bfff84 	movi	r2,-2
   9049c:	00000c06 	br	904d0 <__ascii_mbtowc+0x84>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
   904a0:	e0bffa17 	ldw	r2,-24(fp)
   904a4:	10800003 	ldbu	r2,0(r2)
   904a8:	10c03fcc 	andi	r3,r2,255
   904ac:	e0bffd17 	ldw	r2,-12(fp)
   904b0:	10c00015 	stw	r3,0(r2)
  
  if (*t == '\0')
   904b4:	e0bffa17 	ldw	r2,-24(fp)
   904b8:	10800003 	ldbu	r2,0(r2)
   904bc:	10803fcc 	andi	r2,r2,255
   904c0:	1000021e 	bne	r2,zero,904cc <__ascii_mbtowc+0x80>
    return 0;
   904c4:	0005883a 	mov	r2,zero
   904c8:	00000106 	br	904d0 <__ascii_mbtowc+0x84>

  return 1;
   904cc:	00800044 	movi	r2,1
}
   904d0:	e037883a 	mov	sp,fp
   904d4:	df000017 	ldw	fp,0(sp)
   904d8:	dec00104 	addi	sp,sp,4
   904dc:	f800283a 	ret

000904e0 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
   904e0:	defff704 	addi	sp,sp,-36
   904e4:	df000815 	stw	fp,32(sp)
   904e8:	df000804 	addi	fp,sp,32
   904ec:	e13ffd15 	stw	r4,-12(fp)
   904f0:	e17ffe15 	stw	r5,-8(fp)
   904f4:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
   904f8:	e0bffd17 	ldw	r2,-12(fp)
   904fc:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
   90500:	e0bffe17 	ldw	r2,-8(fp)
   90504:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   90508:	00001006 	br	9054c <memchr+0x6c>
    {
      if (!length--)
   9050c:	e0bfff17 	ldw	r2,-4(fp)
   90510:	10ffffc4 	addi	r3,r2,-1
   90514:	e0ffff15 	stw	r3,-4(fp)
   90518:	1000021e 	bne	r2,zero,90524 <memchr+0x44>
        return NULL;
   9051c:	0005883a 	mov	r2,zero
   90520:	00005a06 	br	9068c <memchr+0x1ac>
      if (*src == d)
   90524:	e0bff817 	ldw	r2,-32(fp)
   90528:	10800003 	ldbu	r2,0(r2)
   9052c:	10c03fcc 	andi	r3,r2,255
   90530:	e0bffc03 	ldbu	r2,-16(fp)
   90534:	1880021e 	bne	r3,r2,90540 <memchr+0x60>
        return (void *) src;
   90538:	e0bff817 	ldw	r2,-32(fp)
   9053c:	00005306 	br	9068c <memchr+0x1ac>
      src++;
   90540:	e0bff817 	ldw	r2,-32(fp)
   90544:	10800044 	addi	r2,r2,1
   90548:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   9054c:	e0bff817 	ldw	r2,-32(fp)
   90550:	108000cc 	andi	r2,r2,3
   90554:	103fed1e 	bne	r2,zero,9050c <__alt_data_end+0xfffde50c>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
   90558:	e0bfff17 	ldw	r2,-4(fp)
   9055c:	10800130 	cmpltui	r2,r2,4
   90560:	1000451e 	bne	r2,zero,90678 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
   90564:	e0bff817 	ldw	r2,-32(fp)
   90568:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
   9056c:	e0bffc03 	ldbu	r2,-16(fp)
   90570:	1006923a 	slli	r3,r2,8
   90574:	e0bffc03 	ldbu	r2,-16(fp)
   90578:	1884b03a 	or	r2,r3,r2
   9057c:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
   90580:	e0bffa17 	ldw	r2,-24(fp)
   90584:	1004943a 	slli	r2,r2,16
   90588:	e0fffa17 	ldw	r3,-24(fp)
   9058c:	1884b03a 	or	r2,r3,r2
   90590:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   90594:	00800804 	movi	r2,32
   90598:	e0bffb15 	stw	r2,-20(fp)
   9059c:	00000906 	br	905c4 <memchr+0xe4>
        mask = (mask << i) | mask;
   905a0:	e0fffa17 	ldw	r3,-24(fp)
   905a4:	e0bffb17 	ldw	r2,-20(fp)
   905a8:	1884983a 	sll	r2,r3,r2
   905ac:	e0fffa17 	ldw	r3,-24(fp)
   905b0:	1884b03a 	or	r2,r3,r2
   905b4:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   905b8:	e0bffb17 	ldw	r2,-20(fp)
   905bc:	1085883a 	add	r2,r2,r2
   905c0:	e0bffb15 	stw	r2,-20(fp)
   905c4:	e0bffb17 	ldw	r2,-20(fp)
   905c8:	10800830 	cmpltui	r2,r2,32
   905cc:	103ff41e 	bne	r2,zero,905a0 <__alt_data_end+0xfffde5a0>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   905d0:	00001706 	br	90630 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
   905d4:	e0bff917 	ldw	r2,-28(fp)
   905d8:	10c00017 	ldw	r3,0(r2)
   905dc:	e0bffa17 	ldw	r2,-24(fp)
   905e0:	1886f03a 	xor	r3,r3,r2
   905e4:	00bfbff4 	movhi	r2,65279
   905e8:	10bfbfc4 	addi	r2,r2,-257
   905ec:	1887883a 	add	r3,r3,r2
   905f0:	e0bff917 	ldw	r2,-28(fp)
   905f4:	11000017 	ldw	r4,0(r2)
   905f8:	e0bffa17 	ldw	r2,-24(fp)
   905fc:	2084f03a 	xor	r2,r4,r2
   90600:	0084303a 	nor	r2,zero,r2
   90604:	1886703a 	and	r3,r3,r2
   90608:	00a02074 	movhi	r2,32897
   9060c:	10a02004 	addi	r2,r2,-32640
   90610:	1884703a 	and	r2,r3,r2
   90614:	10000a1e 	bne	r2,zero,90640 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
   90618:	e0bfff17 	ldw	r2,-4(fp)
   9061c:	10bfff04 	addi	r2,r2,-4
   90620:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
   90624:	e0bff917 	ldw	r2,-28(fp)
   90628:	10800104 	addi	r2,r2,4
   9062c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   90630:	e0bfff17 	ldw	r2,-4(fp)
   90634:	10800128 	cmpgeui	r2,r2,4
   90638:	103fe61e 	bne	r2,zero,905d4 <__alt_data_end+0xfffde5d4>
   9063c:	00000106 	br	90644 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
   90640:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
   90644:	e0bff917 	ldw	r2,-28(fp)
   90648:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   9064c:	00000a06 	br	90678 <memchr+0x198>
    {
      if (*src == d)
   90650:	e0bff817 	ldw	r2,-32(fp)
   90654:	10800003 	ldbu	r2,0(r2)
   90658:	10c03fcc 	andi	r3,r2,255
   9065c:	e0bffc03 	ldbu	r2,-16(fp)
   90660:	1880021e 	bne	r3,r2,9066c <memchr+0x18c>
        return (void *) src;
   90664:	e0bff817 	ldw	r2,-32(fp)
   90668:	00000806 	br	9068c <memchr+0x1ac>
      src++;
   9066c:	e0bff817 	ldw	r2,-32(fp)
   90670:	10800044 	addi	r2,r2,1
   90674:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   90678:	e0bfff17 	ldw	r2,-4(fp)
   9067c:	10ffffc4 	addi	r3,r2,-1
   90680:	e0ffff15 	stw	r3,-4(fp)
   90684:	103ff21e 	bne	r2,zero,90650 <__alt_data_end+0xfffde650>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
   90688:	0005883a 	mov	r2,zero
}
   9068c:	e037883a 	mov	sp,fp
   90690:	df000017 	ldw	fp,0(sp)
   90694:	dec00104 	addi	sp,sp,4
   90698:	f800283a 	ret

0009069c <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
   9069c:	defff804 	addi	sp,sp,-32
   906a0:	df000715 	stw	fp,28(sp)
   906a4:	df000704 	addi	fp,sp,28
   906a8:	e13ffd15 	stw	r4,-12(fp)
   906ac:	e17ffe15 	stw	r5,-8(fp)
   906b0:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
   906b4:	e0bffd17 	ldw	r2,-12(fp)
   906b8:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
   906bc:	e0bffe17 	ldw	r2,-8(fp)
   906c0:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
   906c4:	e0bfff17 	ldw	r2,-4(fp)
   906c8:	10800430 	cmpltui	r2,r2,16
   906cc:	10004c1e 	bne	r2,zero,90800 <memcpy+0x164>
   906d0:	e0fffa17 	ldw	r3,-24(fp)
   906d4:	e0bff917 	ldw	r2,-28(fp)
   906d8:	1884b03a 	or	r2,r3,r2
   906dc:	108000cc 	andi	r2,r2,3
   906e0:	1000471e 	bne	r2,zero,90800 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
   906e4:	e0bff917 	ldw	r2,-28(fp)
   906e8:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
   906ec:	e0bffa17 	ldw	r2,-24(fp)
   906f0:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   906f4:	00002306 	br	90784 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
   906f8:	e0bffb17 	ldw	r2,-20(fp)
   906fc:	10c00104 	addi	r3,r2,4
   90700:	e0fffb15 	stw	r3,-20(fp)
   90704:	e0fffc17 	ldw	r3,-16(fp)
   90708:	19000104 	addi	r4,r3,4
   9070c:	e13ffc15 	stw	r4,-16(fp)
   90710:	18c00017 	ldw	r3,0(r3)
   90714:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   90718:	e0bffb17 	ldw	r2,-20(fp)
   9071c:	10c00104 	addi	r3,r2,4
   90720:	e0fffb15 	stw	r3,-20(fp)
   90724:	e0fffc17 	ldw	r3,-16(fp)
   90728:	19000104 	addi	r4,r3,4
   9072c:	e13ffc15 	stw	r4,-16(fp)
   90730:	18c00017 	ldw	r3,0(r3)
   90734:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   90738:	e0bffb17 	ldw	r2,-20(fp)
   9073c:	10c00104 	addi	r3,r2,4
   90740:	e0fffb15 	stw	r3,-20(fp)
   90744:	e0fffc17 	ldw	r3,-16(fp)
   90748:	19000104 	addi	r4,r3,4
   9074c:	e13ffc15 	stw	r4,-16(fp)
   90750:	18c00017 	ldw	r3,0(r3)
   90754:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   90758:	e0bffb17 	ldw	r2,-20(fp)
   9075c:	10c00104 	addi	r3,r2,4
   90760:	e0fffb15 	stw	r3,-20(fp)
   90764:	e0fffc17 	ldw	r3,-16(fp)
   90768:	19000104 	addi	r4,r3,4
   9076c:	e13ffc15 	stw	r4,-16(fp)
   90770:	18c00017 	ldw	r3,0(r3)
   90774:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
   90778:	e0bfff17 	ldw	r2,-4(fp)
   9077c:	10bffc04 	addi	r2,r2,-16
   90780:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   90784:	e0bfff17 	ldw	r2,-4(fp)
   90788:	10800428 	cmpgeui	r2,r2,16
   9078c:	103fda1e 	bne	r2,zero,906f8 <__alt_data_end+0xfffde6f8>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   90790:	00000b06 	br	907c0 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
   90794:	e0bffb17 	ldw	r2,-20(fp)
   90798:	10c00104 	addi	r3,r2,4
   9079c:	e0fffb15 	stw	r3,-20(fp)
   907a0:	e0fffc17 	ldw	r3,-16(fp)
   907a4:	19000104 	addi	r4,r3,4
   907a8:	e13ffc15 	stw	r4,-16(fp)
   907ac:	18c00017 	ldw	r3,0(r3)
   907b0:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
   907b4:	e0bfff17 	ldw	r2,-4(fp)
   907b8:	10bfff04 	addi	r2,r2,-4
   907bc:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   907c0:	e0bfff17 	ldw	r2,-4(fp)
   907c4:	10800128 	cmpgeui	r2,r2,4
   907c8:	103ff21e 	bne	r2,zero,90794 <__alt_data_end+0xfffde794>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
   907cc:	e0bffb17 	ldw	r2,-20(fp)
   907d0:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
   907d4:	e0bffc17 	ldw	r2,-16(fp)
   907d8:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
   907dc:	00000806 	br	90800 <memcpy+0x164>
    *dst++ = *src++;
   907e0:	e0bff917 	ldw	r2,-28(fp)
   907e4:	10c00044 	addi	r3,r2,1
   907e8:	e0fff915 	stw	r3,-28(fp)
   907ec:	e0fffa17 	ldw	r3,-24(fp)
   907f0:	19000044 	addi	r4,r3,1
   907f4:	e13ffa15 	stw	r4,-24(fp)
   907f8:	18c00003 	ldbu	r3,0(r3)
   907fc:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
   90800:	e0bfff17 	ldw	r2,-4(fp)
   90804:	10ffffc4 	addi	r3,r2,-1
   90808:	e0ffff15 	stw	r3,-4(fp)
   9080c:	103ff41e 	bne	r2,zero,907e0 <__alt_data_end+0xfffde7e0>
    *dst++ = *src++;

  return dst0;
   90810:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   90814:	e037883a 	mov	sp,fp
   90818:	df000017 	ldw	fp,0(sp)
   9081c:	dec00104 	addi	sp,sp,4
   90820:	f800283a 	ret

00090824 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
   90824:	defff804 	addi	sp,sp,-32
   90828:	df000715 	stw	fp,28(sp)
   9082c:	df000704 	addi	fp,sp,28
   90830:	e13ffd15 	stw	r4,-12(fp)
   90834:	e17ffe15 	stw	r5,-8(fp)
   90838:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
   9083c:	e0bffd17 	ldw	r2,-12(fp)
   90840:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
   90844:	e0bffe17 	ldw	r2,-8(fp)
   90848:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   9084c:	e0fffa17 	ldw	r3,-24(fp)
   90850:	e0bff917 	ldw	r2,-28(fp)
   90854:	18801d2e 	bgeu	r3,r2,908cc <memmove+0xa8>
   90858:	e0fffa17 	ldw	r3,-24(fp)
   9085c:	e0bfff17 	ldw	r2,-4(fp)
   90860:	1885883a 	add	r2,r3,r2
   90864:	e0fff917 	ldw	r3,-28(fp)
   90868:	1880182e 	bgeu	r3,r2,908cc <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
   9086c:	e0fffa17 	ldw	r3,-24(fp)
   90870:	e0bfff17 	ldw	r2,-4(fp)
   90874:	1885883a 	add	r2,r3,r2
   90878:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
   9087c:	e0fff917 	ldw	r3,-28(fp)
   90880:	e0bfff17 	ldw	r2,-4(fp)
   90884:	1885883a 	add	r2,r3,r2
   90888:	e0bff915 	stw	r2,-28(fp)
      while (length--)
   9088c:	00000a06 	br	908b8 <memmove+0x94>
	{
	  *--dst = *--src;
   90890:	e0bff917 	ldw	r2,-28(fp)
   90894:	10bfffc4 	addi	r2,r2,-1
   90898:	e0bff915 	stw	r2,-28(fp)
   9089c:	e0bffa17 	ldw	r2,-24(fp)
   908a0:	10bfffc4 	addi	r2,r2,-1
   908a4:	e0bffa15 	stw	r2,-24(fp)
   908a8:	e0bffa17 	ldw	r2,-24(fp)
   908ac:	10c00003 	ldbu	r3,0(r2)
   908b0:	e0bff917 	ldw	r2,-28(fp)
   908b4:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
   908b8:	e0bfff17 	ldw	r2,-4(fp)
   908bc:	10ffffc4 	addi	r3,r2,-1
   908c0:	e0ffff15 	stw	r3,-4(fp)
   908c4:	103ff21e 	bne	r2,zero,90890 <__alt_data_end+0xfffde890>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   908c8:	00005306 	br	90a18 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
   908cc:	e0bfff17 	ldw	r2,-4(fp)
   908d0:	10800430 	cmpltui	r2,r2,16
   908d4:	10004c1e 	bne	r2,zero,90a08 <memmove+0x1e4>
   908d8:	e0fffa17 	ldw	r3,-24(fp)
   908dc:	e0bff917 	ldw	r2,-28(fp)
   908e0:	1884b03a 	or	r2,r3,r2
   908e4:	108000cc 	andi	r2,r2,3
   908e8:	1000471e 	bne	r2,zero,90a08 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
   908ec:	e0bff917 	ldw	r2,-28(fp)
   908f0:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
   908f4:	e0bffa17 	ldw	r2,-24(fp)
   908f8:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   908fc:	00002306 	br	9098c <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
   90900:	e0bffb17 	ldw	r2,-20(fp)
   90904:	10c00104 	addi	r3,r2,4
   90908:	e0fffb15 	stw	r3,-20(fp)
   9090c:	e0fffc17 	ldw	r3,-16(fp)
   90910:	19000104 	addi	r4,r3,4
   90914:	e13ffc15 	stw	r4,-16(fp)
   90918:	18c00017 	ldw	r3,0(r3)
   9091c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   90920:	e0bffb17 	ldw	r2,-20(fp)
   90924:	10c00104 	addi	r3,r2,4
   90928:	e0fffb15 	stw	r3,-20(fp)
   9092c:	e0fffc17 	ldw	r3,-16(fp)
   90930:	19000104 	addi	r4,r3,4
   90934:	e13ffc15 	stw	r4,-16(fp)
   90938:	18c00017 	ldw	r3,0(r3)
   9093c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   90940:	e0bffb17 	ldw	r2,-20(fp)
   90944:	10c00104 	addi	r3,r2,4
   90948:	e0fffb15 	stw	r3,-20(fp)
   9094c:	e0fffc17 	ldw	r3,-16(fp)
   90950:	19000104 	addi	r4,r3,4
   90954:	e13ffc15 	stw	r4,-16(fp)
   90958:	18c00017 	ldw	r3,0(r3)
   9095c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   90960:	e0bffb17 	ldw	r2,-20(fp)
   90964:	10c00104 	addi	r3,r2,4
   90968:	e0fffb15 	stw	r3,-20(fp)
   9096c:	e0fffc17 	ldw	r3,-16(fp)
   90970:	19000104 	addi	r4,r3,4
   90974:	e13ffc15 	stw	r4,-16(fp)
   90978:	18c00017 	ldw	r3,0(r3)
   9097c:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
   90980:	e0bfff17 	ldw	r2,-4(fp)
   90984:	10bffc04 	addi	r2,r2,-16
   90988:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   9098c:	e0bfff17 	ldw	r2,-4(fp)
   90990:	10800428 	cmpgeui	r2,r2,16
   90994:	103fda1e 	bne	r2,zero,90900 <__alt_data_end+0xfffde900>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   90998:	00000b06 	br	909c8 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
   9099c:	e0bffb17 	ldw	r2,-20(fp)
   909a0:	10c00104 	addi	r3,r2,4
   909a4:	e0fffb15 	stw	r3,-20(fp)
   909a8:	e0fffc17 	ldw	r3,-16(fp)
   909ac:	19000104 	addi	r4,r3,4
   909b0:	e13ffc15 	stw	r4,-16(fp)
   909b4:	18c00017 	ldw	r3,0(r3)
   909b8:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
   909bc:	e0bfff17 	ldw	r2,-4(fp)
   909c0:	10bfff04 	addi	r2,r2,-4
   909c4:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   909c8:	e0bfff17 	ldw	r2,-4(fp)
   909cc:	10800128 	cmpgeui	r2,r2,4
   909d0:	103ff21e 	bne	r2,zero,9099c <__alt_data_end+0xfffde99c>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
   909d4:	e0bffb17 	ldw	r2,-20(fp)
   909d8:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
   909dc:	e0bffc17 	ldw	r2,-16(fp)
   909e0:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
   909e4:	00000806 	br	90a08 <memmove+0x1e4>
        {
          *dst++ = *src++;
   909e8:	e0bff917 	ldw	r2,-28(fp)
   909ec:	10c00044 	addi	r3,r2,1
   909f0:	e0fff915 	stw	r3,-28(fp)
   909f4:	e0fffa17 	ldw	r3,-24(fp)
   909f8:	19000044 	addi	r4,r3,1
   909fc:	e13ffa15 	stw	r4,-24(fp)
   90a00:	18c00003 	ldbu	r3,0(r3)
   90a04:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   90a08:	e0bfff17 	ldw	r2,-4(fp)
   90a0c:	10ffffc4 	addi	r3,r2,-1
   90a10:	e0ffff15 	stw	r3,-4(fp)
   90a14:	103ff41e 	bne	r2,zero,909e8 <__alt_data_end+0xfffde9e8>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
   90a18:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   90a1c:	e037883a 	mov	sp,fp
   90a20:	df000017 	ldw	fp,0(sp)
   90a24:	dec00104 	addi	sp,sp,4
   90a28:	f800283a 	ret

00090a2c <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
   90a2c:	defffa04 	addi	sp,sp,-24
   90a30:	dfc00515 	stw	ra,20(sp)
   90a34:	df000415 	stw	fp,16(sp)
   90a38:	df000404 	addi	fp,sp,16
   90a3c:	e13ffe15 	stw	r4,-8(fp)
   90a40:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
   90a44:	e0bffe17 	ldw	r2,-8(fp)
   90a48:	10801317 	ldw	r2,76(r2)
   90a4c:	10000c1e 	bne	r2,zero,90a80 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
   90a50:	01800844 	movi	r6,33
   90a54:	01400104 	movi	r5,4
   90a58:	e13ffe17 	ldw	r4,-8(fp)
   90a5c:	009a1700 	call	9a170 <_calloc_r>
   90a60:	1007883a 	mov	r3,r2
   90a64:	e0bffe17 	ldw	r2,-8(fp)
   90a68:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
   90a6c:	e0bffe17 	ldw	r2,-8(fp)
   90a70:	10801317 	ldw	r2,76(r2)
   90a74:	1000021e 	bne	r2,zero,90a80 <_Balloc+0x54>
	{
	  return NULL;
   90a78:	0005883a 	mov	r2,zero
   90a7c:	00003206 	br	90b48 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
   90a80:	e0bffe17 	ldw	r2,-8(fp)
   90a84:	10c01317 	ldw	r3,76(r2)
   90a88:	e0bfff17 	ldw	r2,-4(fp)
   90a8c:	1085883a 	add	r2,r2,r2
   90a90:	1085883a 	add	r2,r2,r2
   90a94:	1885883a 	add	r2,r3,r2
   90a98:	10800017 	ldw	r2,0(r2)
   90a9c:	e0bffc15 	stw	r2,-16(fp)
   90aa0:	e0bffc17 	ldw	r2,-16(fp)
   90aa4:	10000a26 	beq	r2,zero,90ad0 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
   90aa8:	e0bffe17 	ldw	r2,-8(fp)
   90aac:	10c01317 	ldw	r3,76(r2)
   90ab0:	e0bfff17 	ldw	r2,-4(fp)
   90ab4:	1085883a 	add	r2,r2,r2
   90ab8:	1085883a 	add	r2,r2,r2
   90abc:	1885883a 	add	r2,r3,r2
   90ac0:	e0fffc17 	ldw	r3,-16(fp)
   90ac4:	18c00017 	ldw	r3,0(r3)
   90ac8:	10c00015 	stw	r3,0(r2)
   90acc:	00001706 	br	90b2c <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
   90ad0:	00c00044 	movi	r3,1
   90ad4:	e0bfff17 	ldw	r2,-4(fp)
   90ad8:	1884983a 	sll	r2,r3,r2
   90adc:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
   90ae0:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
   90ae4:	10800144 	addi	r2,r2,5
   90ae8:	1085883a 	add	r2,r2,r2
   90aec:	1085883a 	add	r2,r2,r2
   90af0:	100d883a 	mov	r6,r2
   90af4:	01400044 	movi	r5,1
   90af8:	e13ffe17 	ldw	r4,-8(fp)
   90afc:	009a1700 	call	9a170 <_calloc_r>
   90b00:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
   90b04:	e0bffc17 	ldw	r2,-16(fp)
   90b08:	1000021e 	bne	r2,zero,90b14 <_Balloc+0xe8>
   90b0c:	0005883a 	mov	r2,zero
   90b10:	00000d06 	br	90b48 <_Balloc+0x11c>
      rv->_k = k;
   90b14:	e0bffc17 	ldw	r2,-16(fp)
   90b18:	e0ffff17 	ldw	r3,-4(fp)
   90b1c:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
   90b20:	e0bffc17 	ldw	r2,-16(fp)
   90b24:	e0fffd17 	ldw	r3,-12(fp)
   90b28:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
   90b2c:	e0bffc17 	ldw	r2,-16(fp)
   90b30:	10000415 	stw	zero,16(r2)
   90b34:	e0bffc17 	ldw	r2,-16(fp)
   90b38:	10c00417 	ldw	r3,16(r2)
   90b3c:	e0bffc17 	ldw	r2,-16(fp)
   90b40:	10c00315 	stw	r3,12(r2)
  return rv;
   90b44:	e0bffc17 	ldw	r2,-16(fp)
}
   90b48:	e037883a 	mov	sp,fp
   90b4c:	dfc00117 	ldw	ra,4(sp)
   90b50:	df000017 	ldw	fp,0(sp)
   90b54:	dec00204 	addi	sp,sp,8
   90b58:	f800283a 	ret

00090b5c <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
   90b5c:	defffd04 	addi	sp,sp,-12
   90b60:	df000215 	stw	fp,8(sp)
   90b64:	df000204 	addi	fp,sp,8
   90b68:	e13ffe15 	stw	r4,-8(fp)
   90b6c:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
   90b70:	e0bfff17 	ldw	r2,-4(fp)
   90b74:	10001326 	beq	r2,zero,90bc4 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
   90b78:	e0bffe17 	ldw	r2,-8(fp)
   90b7c:	10c01317 	ldw	r3,76(r2)
   90b80:	e0bfff17 	ldw	r2,-4(fp)
   90b84:	10800117 	ldw	r2,4(r2)
   90b88:	1085883a 	add	r2,r2,r2
   90b8c:	1085883a 	add	r2,r2,r2
   90b90:	1885883a 	add	r2,r3,r2
   90b94:	10c00017 	ldw	r3,0(r2)
   90b98:	e0bfff17 	ldw	r2,-4(fp)
   90b9c:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
   90ba0:	e0bffe17 	ldw	r2,-8(fp)
   90ba4:	10c01317 	ldw	r3,76(r2)
   90ba8:	e0bfff17 	ldw	r2,-4(fp)
   90bac:	10800117 	ldw	r2,4(r2)
   90bb0:	1085883a 	add	r2,r2,r2
   90bb4:	1085883a 	add	r2,r2,r2
   90bb8:	1885883a 	add	r2,r3,r2
   90bbc:	e0ffff17 	ldw	r3,-4(fp)
   90bc0:	10c00015 	stw	r3,0(r2)
    }
}
   90bc4:	0001883a 	nop
   90bc8:	e037883a 	mov	sp,fp
   90bcc:	df000017 	ldw	fp,0(sp)
   90bd0:	dec00104 	addi	sp,sp,4
   90bd4:	f800283a 	ret

00090bd8 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
   90bd8:	defff304 	addi	sp,sp,-52
   90bdc:	dfc00c15 	stw	ra,48(sp)
   90be0:	df000b15 	stw	fp,44(sp)
   90be4:	df000b04 	addi	fp,sp,44
   90be8:	e13ffc15 	stw	r4,-16(fp)
   90bec:	e17ffd15 	stw	r5,-12(fp)
   90bf0:	e1bffe15 	stw	r6,-8(fp)
   90bf4:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
   90bf8:	e0bffd17 	ldw	r2,-12(fp)
   90bfc:	10800417 	ldw	r2,16(r2)
   90c00:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
   90c04:	e0bffd17 	ldw	r2,-12(fp)
   90c08:	10800504 	addi	r2,r2,20
   90c0c:	e0bff615 	stw	r2,-40(fp)
  i = 0;
   90c10:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
   90c14:	e0bff617 	ldw	r2,-40(fp)
   90c18:	10800017 	ldw	r2,0(r2)
   90c1c:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
   90c20:	e0bff817 	ldw	r2,-32(fp)
   90c24:	10bfffcc 	andi	r2,r2,65535
   90c28:	e0fffe17 	ldw	r3,-8(fp)
   90c2c:	180b883a 	mov	r5,r3
   90c30:	1009883a 	mov	r4,r2
   90c34:	00823a00 	call	823a0 <__mulsi3>
   90c38:	1007883a 	mov	r3,r2
   90c3c:	e0bfff17 	ldw	r2,-4(fp)
   90c40:	1885883a 	add	r2,r3,r2
   90c44:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
   90c48:	e0bff817 	ldw	r2,-32(fp)
   90c4c:	1004d43a 	srli	r2,r2,16
   90c50:	e0fffe17 	ldw	r3,-8(fp)
   90c54:	180b883a 	mov	r5,r3
   90c58:	1009883a 	mov	r4,r2
   90c5c:	00823a00 	call	823a0 <__mulsi3>
   90c60:	1007883a 	mov	r3,r2
   90c64:	e0bff917 	ldw	r2,-28(fp)
   90c68:	1004d43a 	srli	r2,r2,16
   90c6c:	1885883a 	add	r2,r3,r2
   90c70:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
   90c74:	e0bffa17 	ldw	r2,-24(fp)
   90c78:	1004d43a 	srli	r2,r2,16
   90c7c:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
   90c80:	e0bff617 	ldw	r2,-40(fp)
   90c84:	10c00104 	addi	r3,r2,4
   90c88:	e0fff615 	stw	r3,-40(fp)
   90c8c:	e0fffa17 	ldw	r3,-24(fp)
   90c90:	1808943a 	slli	r4,r3,16
   90c94:	e0fff917 	ldw	r3,-28(fp)
   90c98:	18ffffcc 	andi	r3,r3,65535
   90c9c:	20c7883a 	add	r3,r4,r3
   90ca0:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
   90ca4:	e0bff517 	ldw	r2,-44(fp)
   90ca8:	10800044 	addi	r2,r2,1
   90cac:	e0bff515 	stw	r2,-44(fp)
   90cb0:	e0fff517 	ldw	r3,-44(fp)
   90cb4:	e0bff717 	ldw	r2,-36(fp)
   90cb8:	18bfd616 	blt	r3,r2,90c14 <__alt_data_end+0xfffdec14>
  if (a)
   90cbc:	e0bfff17 	ldw	r2,-4(fp)
   90cc0:	10002a26 	beq	r2,zero,90d6c <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
   90cc4:	e0bffd17 	ldw	r2,-12(fp)
   90cc8:	10800217 	ldw	r2,8(r2)
   90ccc:	e0fff717 	ldw	r3,-36(fp)
   90cd0:	18801916 	blt	r3,r2,90d38 <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
   90cd4:	e0bffd17 	ldw	r2,-12(fp)
   90cd8:	10800117 	ldw	r2,4(r2)
   90cdc:	10800044 	addi	r2,r2,1
   90ce0:	100b883a 	mov	r5,r2
   90ce4:	e13ffc17 	ldw	r4,-16(fp)
   90ce8:	0090a2c0 	call	90a2c <_Balloc>
   90cec:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
   90cf0:	e0bffb17 	ldw	r2,-20(fp)
   90cf4:	10c00304 	addi	r3,r2,12
   90cf8:	e0bffd17 	ldw	r2,-12(fp)
   90cfc:	11000304 	addi	r4,r2,12
   90d00:	e0bffd17 	ldw	r2,-12(fp)
   90d04:	10800417 	ldw	r2,16(r2)
   90d08:	10800084 	addi	r2,r2,2
   90d0c:	1085883a 	add	r2,r2,r2
   90d10:	1085883a 	add	r2,r2,r2
   90d14:	100d883a 	mov	r6,r2
   90d18:	200b883a 	mov	r5,r4
   90d1c:	1809883a 	mov	r4,r3
   90d20:	009069c0 	call	9069c <memcpy>
	  Bfree (ptr, b);
   90d24:	e17ffd17 	ldw	r5,-12(fp)
   90d28:	e13ffc17 	ldw	r4,-16(fp)
   90d2c:	0090b5c0 	call	90b5c <_Bfree>
	  b = b1;
   90d30:	e0bffb17 	ldw	r2,-20(fp)
   90d34:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
   90d38:	e0bff717 	ldw	r2,-36(fp)
   90d3c:	10c00044 	addi	r3,r2,1
   90d40:	e0fff715 	stw	r3,-36(fp)
   90d44:	e0ffff17 	ldw	r3,-4(fp)
   90d48:	e13ffd17 	ldw	r4,-12(fp)
   90d4c:	10800144 	addi	r2,r2,5
   90d50:	1085883a 	add	r2,r2,r2
   90d54:	1085883a 	add	r2,r2,r2
   90d58:	2085883a 	add	r2,r4,r2
   90d5c:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
   90d60:	e0bffd17 	ldw	r2,-12(fp)
   90d64:	e0fff717 	ldw	r3,-36(fp)
   90d68:	10c00415 	stw	r3,16(r2)
    }
  return b;
   90d6c:	e0bffd17 	ldw	r2,-12(fp)
}
   90d70:	e037883a 	mov	sp,fp
   90d74:	dfc00117 	ldw	ra,4(sp)
   90d78:	df000017 	ldw	fp,0(sp)
   90d7c:	dec00204 	addi	sp,sp,8
   90d80:	f800283a 	ret

00090d84 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
   90d84:	defff504 	addi	sp,sp,-44
   90d88:	dfc00a15 	stw	ra,40(sp)
   90d8c:	df000915 	stw	fp,36(sp)
   90d90:	df000904 	addi	fp,sp,36
   90d94:	e13ffc15 	stw	r4,-16(fp)
   90d98:	e17ffd15 	stw	r5,-12(fp)
   90d9c:	e1bffe15 	stw	r6,-8(fp)
   90da0:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
   90da4:	e0bfff17 	ldw	r2,-4(fp)
   90da8:	10800204 	addi	r2,r2,8
   90dac:	01400244 	movi	r5,9
   90db0:	1009883a 	mov	r4,r2
   90db4:	00821ec0 	call	821ec <__divsi3>
   90db8:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
   90dbc:	e03ff915 	stw	zero,-28(fp)
   90dc0:	00800044 	movi	r2,1
   90dc4:	e0bffa15 	stw	r2,-24(fp)
   90dc8:	00000606 	br	90de4 <__s2b+0x60>
   90dcc:	e0bffa17 	ldw	r2,-24(fp)
   90dd0:	1085883a 	add	r2,r2,r2
   90dd4:	e0bffa15 	stw	r2,-24(fp)
   90dd8:	e0bff917 	ldw	r2,-28(fp)
   90ddc:	10800044 	addi	r2,r2,1
   90de0:	e0bff915 	stw	r2,-28(fp)
   90de4:	e0bffb17 	ldw	r2,-20(fp)
   90de8:	e0fffa17 	ldw	r3,-24(fp)
   90dec:	18bff716 	blt	r3,r2,90dcc <__alt_data_end+0xfffdedcc>
#ifdef Pack_32
  b = Balloc (ptr, k);
   90df0:	e17ff917 	ldw	r5,-28(fp)
   90df4:	e13ffc17 	ldw	r4,-16(fp)
   90df8:	0090a2c0 	call	90a2c <_Balloc>
   90dfc:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
   90e00:	e0bff717 	ldw	r2,-36(fp)
   90e04:	e0c00217 	ldw	r3,8(fp)
   90e08:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   90e0c:	e0bff717 	ldw	r2,-36(fp)
   90e10:	00c00044 	movi	r3,1
   90e14:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
   90e18:	00800244 	movi	r2,9
   90e1c:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
   90e20:	e0bffe17 	ldw	r2,-8(fp)
   90e24:	10800290 	cmplti	r2,r2,10
   90e28:	10001b1e 	bne	r2,zero,90e98 <__s2b+0x114>
    {
      s += 9;
   90e2c:	e0bffd17 	ldw	r2,-12(fp)
   90e30:	10800244 	addi	r2,r2,9
   90e34:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
   90e38:	e0bffd17 	ldw	r2,-12(fp)
   90e3c:	10c00044 	addi	r3,r2,1
   90e40:	e0fffd15 	stw	r3,-12(fp)
   90e44:	10800003 	ldbu	r2,0(r2)
   90e48:	10803fcc 	andi	r2,r2,255
   90e4c:	1080201c 	xori	r2,r2,128
   90e50:	10bfe004 	addi	r2,r2,-128
   90e54:	10bff404 	addi	r2,r2,-48
   90e58:	100f883a 	mov	r7,r2
   90e5c:	01800284 	movi	r6,10
   90e60:	e17ff717 	ldw	r5,-36(fp)
   90e64:	e13ffc17 	ldw	r4,-16(fp)
   90e68:	0090bd80 	call	90bd8 <__multadd>
   90e6c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
   90e70:	e0bff817 	ldw	r2,-32(fp)
   90e74:	10800044 	addi	r2,r2,1
   90e78:	e0bff815 	stw	r2,-32(fp)
   90e7c:	e0fff817 	ldw	r3,-32(fp)
   90e80:	e0bffe17 	ldw	r2,-8(fp)
   90e84:	18bfec16 	blt	r3,r2,90e38 <__alt_data_end+0xfffdee38>
      s++;
   90e88:	e0bffd17 	ldw	r2,-12(fp)
   90e8c:	10800044 	addi	r2,r2,1
   90e90:	e0bffd15 	stw	r2,-12(fp)
   90e94:	00001506 	br	90eec <__s2b+0x168>
    }
  else
    s += 10;
   90e98:	e0bffd17 	ldw	r2,-12(fp)
   90e9c:	10800284 	addi	r2,r2,10
   90ea0:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
   90ea4:	00001106 	br	90eec <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
   90ea8:	e0bffd17 	ldw	r2,-12(fp)
   90eac:	10c00044 	addi	r3,r2,1
   90eb0:	e0fffd15 	stw	r3,-12(fp)
   90eb4:	10800003 	ldbu	r2,0(r2)
   90eb8:	10803fcc 	andi	r2,r2,255
   90ebc:	1080201c 	xori	r2,r2,128
   90ec0:	10bfe004 	addi	r2,r2,-128
   90ec4:	10bff404 	addi	r2,r2,-48
   90ec8:	100f883a 	mov	r7,r2
   90ecc:	01800284 	movi	r6,10
   90ed0:	e17ff717 	ldw	r5,-36(fp)
   90ed4:	e13ffc17 	ldw	r4,-16(fp)
   90ed8:	0090bd80 	call	90bd8 <__multadd>
   90edc:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
   90ee0:	e0bff817 	ldw	r2,-32(fp)
   90ee4:	10800044 	addi	r2,r2,1
   90ee8:	e0bff815 	stw	r2,-32(fp)
   90eec:	e0fff817 	ldw	r3,-32(fp)
   90ef0:	e0bfff17 	ldw	r2,-4(fp)
   90ef4:	18bfec16 	blt	r3,r2,90ea8 <__alt_data_end+0xfffdeea8>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
   90ef8:	e0bff717 	ldw	r2,-36(fp)
}
   90efc:	e037883a 	mov	sp,fp
   90f00:	dfc00117 	ldw	ra,4(sp)
   90f04:	df000017 	ldw	fp,0(sp)
   90f08:	dec00204 	addi	sp,sp,8
   90f0c:	f800283a 	ret

00090f10 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
   90f10:	defffe04 	addi	sp,sp,-8
   90f14:	df000115 	stw	fp,4(sp)
   90f18:	dc000015 	stw	r16,0(sp)
   90f1c:	df000104 	addi	fp,sp,4
   90f20:	2005883a 	mov	r2,r4
  register int k = 0;
   90f24:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
   90f28:	10ffffec 	andhi	r3,r2,65535
   90f2c:	1800021e 	bne	r3,zero,90f38 <__hi0bits+0x28>
    {
      k = 16;
   90f30:	04000404 	movi	r16,16
      x <<= 16;
   90f34:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
   90f38:	10ffc02c 	andhi	r3,r2,65280
   90f3c:	1800021e 	bne	r3,zero,90f48 <__hi0bits+0x38>
    {
      k += 8;
   90f40:	84000204 	addi	r16,r16,8
      x <<= 8;
   90f44:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
   90f48:	10fc002c 	andhi	r3,r2,61440
   90f4c:	1800021e 	bne	r3,zero,90f58 <__hi0bits+0x48>
    {
      k += 4;
   90f50:	84000104 	addi	r16,r16,4
      x <<= 4;
   90f54:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
   90f58:	10f0002c 	andhi	r3,r2,49152
   90f5c:	1800031e 	bne	r3,zero,90f6c <__hi0bits+0x5c>
    {
      k += 2;
   90f60:	84000084 	addi	r16,r16,2
      x <<= 2;
   90f64:	1085883a 	add	r2,r2,r2
   90f68:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
   90f6c:	1007883a 	mov	r3,r2
   90f70:	18000516 	blt	r3,zero,90f88 <__hi0bits+0x78>
    {
      k++;
   90f74:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
   90f78:	1090002c 	andhi	r2,r2,16384
   90f7c:	1000021e 	bne	r2,zero,90f88 <__hi0bits+0x78>
	return 32;
   90f80:	00800804 	movi	r2,32
   90f84:	00000106 	br	90f8c <__hi0bits+0x7c>
    }
  return k;
   90f88:	8005883a 	mov	r2,r16
}
   90f8c:	e6ffff04 	addi	sp,fp,-4
   90f90:	df000117 	ldw	fp,4(sp)
   90f94:	dc000017 	ldw	r16,0(sp)
   90f98:	dec00204 	addi	sp,sp,8
   90f9c:	f800283a 	ret

00090fa0 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
   90fa0:	defffc04 	addi	sp,sp,-16
   90fa4:	df000315 	stw	fp,12(sp)
   90fa8:	dc400215 	stw	r17,8(sp)
   90fac:	dc000115 	stw	r16,4(sp)
   90fb0:	df000304 	addi	fp,sp,12
   90fb4:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
   90fb8:	e0bffd17 	ldw	r2,-12(fp)
   90fbc:	14000017 	ldw	r16,0(r2)

  if (x & 7)
   90fc0:	808001cc 	andi	r2,r16,7
   90fc4:	10001026 	beq	r2,zero,91008 <__lo0bits+0x68>
    {
      if (x & 1)
   90fc8:	8080004c 	andi	r2,r16,1
   90fcc:	10000226 	beq	r2,zero,90fd8 <__lo0bits+0x38>
	return 0;
   90fd0:	0005883a 	mov	r2,zero
   90fd4:	00002706 	br	91074 <__lo0bits+0xd4>
      if (x & 2)
   90fd8:	8080008c 	andi	r2,r16,2
   90fdc:	10000526 	beq	r2,zero,90ff4 <__lo0bits+0x54>
	{
	  *y = x >> 1;
   90fe0:	8006d07a 	srli	r3,r16,1
   90fe4:	e0bffd17 	ldw	r2,-12(fp)
   90fe8:	10c00015 	stw	r3,0(r2)
	  return 1;
   90fec:	00800044 	movi	r2,1
   90ff0:	00002006 	br	91074 <__lo0bits+0xd4>
	}
      *y = x >> 2;
   90ff4:	8006d0ba 	srli	r3,r16,2
   90ff8:	e0bffd17 	ldw	r2,-12(fp)
   90ffc:	10c00015 	stw	r3,0(r2)
      return 2;
   91000:	00800084 	movi	r2,2
   91004:	00001b06 	br	91074 <__lo0bits+0xd4>
    }
  k = 0;
   91008:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
   9100c:	80bfffcc 	andi	r2,r16,65535
   91010:	1000021e 	bne	r2,zero,9101c <__lo0bits+0x7c>
    {
      k = 16;
   91014:	04400404 	movi	r17,16
      x >>= 16;
   91018:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
   9101c:	80803fcc 	andi	r2,r16,255
   91020:	1000021e 	bne	r2,zero,9102c <__lo0bits+0x8c>
    {
      k += 8;
   91024:	8c400204 	addi	r17,r17,8
      x >>= 8;
   91028:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
   9102c:	808003cc 	andi	r2,r16,15
   91030:	1000021e 	bne	r2,zero,9103c <__lo0bits+0x9c>
    {
      k += 4;
   91034:	8c400104 	addi	r17,r17,4
      x >>= 4;
   91038:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
   9103c:	808000cc 	andi	r2,r16,3
   91040:	1000021e 	bne	r2,zero,9104c <__lo0bits+0xac>
    {
      k += 2;
   91044:	8c400084 	addi	r17,r17,2
      x >>= 2;
   91048:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
   9104c:	8080004c 	andi	r2,r16,1
   91050:	1000051e 	bne	r2,zero,91068 <__lo0bits+0xc8>
    {
      k++;
   91054:	8c400044 	addi	r17,r17,1
      x >>= 1;
   91058:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
   9105c:	8000021e 	bne	r16,zero,91068 <__lo0bits+0xc8>
	return 32;
   91060:	00800804 	movi	r2,32
   91064:	00000306 	br	91074 <__lo0bits+0xd4>
    }
  *y = x;
   91068:	e0bffd17 	ldw	r2,-12(fp)
   9106c:	14000015 	stw	r16,0(r2)
  return k;
   91070:	8805883a 	mov	r2,r17
}
   91074:	e6fffe04 	addi	sp,fp,-8
   91078:	df000217 	ldw	fp,8(sp)
   9107c:	dc400117 	ldw	r17,4(sp)
   91080:	dc000017 	ldw	r16,0(sp)
   91084:	dec00304 	addi	sp,sp,12
   91088:	f800283a 	ret

0009108c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
   9108c:	defffb04 	addi	sp,sp,-20
   91090:	dfc00415 	stw	ra,16(sp)
   91094:	df000315 	stw	fp,12(sp)
   91098:	df000304 	addi	fp,sp,12
   9109c:	e13ffe15 	stw	r4,-8(fp)
   910a0:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
   910a4:	01400044 	movi	r5,1
   910a8:	e13ffe17 	ldw	r4,-8(fp)
   910ac:	0090a2c0 	call	90a2c <_Balloc>
   910b0:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
   910b4:	e0ffff17 	ldw	r3,-4(fp)
   910b8:	e0bffd17 	ldw	r2,-12(fp)
   910bc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   910c0:	e0bffd17 	ldw	r2,-12(fp)
   910c4:	00c00044 	movi	r3,1
   910c8:	10c00415 	stw	r3,16(r2)
  return b;
   910cc:	e0bffd17 	ldw	r2,-12(fp)
}
   910d0:	e037883a 	mov	sp,fp
   910d4:	dfc00117 	ldw	ra,4(sp)
   910d8:	df000017 	ldw	fp,0(sp)
   910dc:	dec00204 	addi	sp,sp,8
   910e0:	f800283a 	ret

000910e4 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
   910e4:	deffeb04 	addi	sp,sp,-84
   910e8:	dfc01415 	stw	ra,80(sp)
   910ec:	df001315 	stw	fp,76(sp)
   910f0:	df001304 	addi	fp,sp,76
   910f4:	e13ffd15 	stw	r4,-12(fp)
   910f8:	e17ffe15 	stw	r5,-8(fp)
   910fc:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
   91100:	e0bffe17 	ldw	r2,-8(fp)
   91104:	10c00417 	ldw	r3,16(r2)
   91108:	e0bfff17 	ldw	r2,-4(fp)
   9110c:	10800417 	ldw	r2,16(r2)
   91110:	1880060e 	bge	r3,r2,9112c <__multiply+0x48>
    {
      c = a;
   91114:	e0bffe17 	ldw	r2,-8(fp)
   91118:	e0bff515 	stw	r2,-44(fp)
      a = b;
   9111c:	e0bfff17 	ldw	r2,-4(fp)
   91120:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   91124:	e0bff517 	ldw	r2,-44(fp)
   91128:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
   9112c:	e0bffe17 	ldw	r2,-8(fp)
   91130:	10800117 	ldw	r2,4(r2)
   91134:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
   91138:	e0bffe17 	ldw	r2,-8(fp)
   9113c:	10800417 	ldw	r2,16(r2)
   91140:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
   91144:	e0bfff17 	ldw	r2,-4(fp)
   91148:	10800417 	ldw	r2,16(r2)
   9114c:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
   91150:	e0fff617 	ldw	r3,-40(fp)
   91154:	e0bff717 	ldw	r2,-36(fp)
   91158:	1885883a 	add	r2,r3,r2
   9115c:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
   91160:	e0bffe17 	ldw	r2,-8(fp)
   91164:	10c00217 	ldw	r3,8(r2)
   91168:	e0bfee17 	ldw	r2,-72(fp)
   9116c:	1880030e 	bge	r3,r2,9117c <__multiply+0x98>
    k++;
   91170:	e0bfed17 	ldw	r2,-76(fp)
   91174:	10800044 	addi	r2,r2,1
   91178:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
   9117c:	e17fed17 	ldw	r5,-76(fp)
   91180:	e13ffd17 	ldw	r4,-12(fp)
   91184:	0090a2c0 	call	90a2c <_Balloc>
   91188:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
   9118c:	e0bff517 	ldw	r2,-44(fp)
   91190:	10800504 	addi	r2,r2,20
   91194:	e0bff015 	stw	r2,-64(fp)
   91198:	e0bfee17 	ldw	r2,-72(fp)
   9119c:	1085883a 	add	r2,r2,r2
   911a0:	1085883a 	add	r2,r2,r2
   911a4:	1007883a 	mov	r3,r2
   911a8:	e0bff017 	ldw	r2,-64(fp)
   911ac:	10c5883a 	add	r2,r2,r3
   911b0:	e0bff815 	stw	r2,-32(fp)
   911b4:	00000506 	br	911cc <__multiply+0xe8>
    *x = 0;
   911b8:	e0bff017 	ldw	r2,-64(fp)
   911bc:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
   911c0:	e0bff017 	ldw	r2,-64(fp)
   911c4:	10800104 	addi	r2,r2,4
   911c8:	e0bff015 	stw	r2,-64(fp)
   911cc:	e0fff017 	ldw	r3,-64(fp)
   911d0:	e0bff817 	ldw	r2,-32(fp)
   911d4:	18bff836 	bltu	r3,r2,911b8 <__alt_data_end+0xfffdf1b8>
    *x = 0;
  xa = a->_x;
   911d8:	e0bffe17 	ldw	r2,-8(fp)
   911dc:	10800504 	addi	r2,r2,20
   911e0:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
   911e4:	e0bff617 	ldw	r2,-40(fp)
   911e8:	1085883a 	add	r2,r2,r2
   911ec:	1085883a 	add	r2,r2,r2
   911f0:	1007883a 	mov	r3,r2
   911f4:	e0bff817 	ldw	r2,-32(fp)
   911f8:	10c5883a 	add	r2,r2,r3
   911fc:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   91200:	e0bfff17 	ldw	r2,-4(fp)
   91204:	10800504 	addi	r2,r2,20
   91208:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
   9120c:	e0bff717 	ldw	r2,-36(fp)
   91210:	1085883a 	add	r2,r2,r2
   91214:	1085883a 	add	r2,r2,r2
   91218:	1007883a 	mov	r3,r2
   9121c:	e0bff117 	ldw	r2,-60(fp)
   91220:	10c5883a 	add	r2,r2,r3
   91224:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
   91228:	e0bff517 	ldw	r2,-44(fp)
   9122c:	10800504 	addi	r2,r2,20
   91230:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   91234:	00008506 	br	9144c <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
   91238:	e0bff117 	ldw	r2,-60(fp)
   9123c:	10800017 	ldw	r2,0(r2)
   91240:	10bfffcc 	andi	r2,r2,65535
   91244:	e0bffb15 	stw	r2,-20(fp)
   91248:	e0bffb17 	ldw	r2,-20(fp)
   9124c:	10003826 	beq	r2,zero,91330 <__multiply+0x24c>
	{
	  x = xa;
   91250:	e0bff817 	ldw	r2,-32(fp)
   91254:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   91258:	e0bff317 	ldw	r2,-52(fp)
   9125c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   91260:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
   91264:	e0bff017 	ldw	r2,-64(fp)
   91268:	10800017 	ldw	r2,0(r2)
   9126c:	10bfffcc 	andi	r2,r2,65535
   91270:	e17ffb17 	ldw	r5,-20(fp)
   91274:	1009883a 	mov	r4,r2
   91278:	00823a00 	call	823a0 <__mulsi3>
   9127c:	1007883a 	mov	r3,r2
   91280:	e0bff217 	ldw	r2,-56(fp)
   91284:	10800017 	ldw	r2,0(r2)
   91288:	10bfffcc 	andi	r2,r2,65535
   9128c:	1887883a 	add	r3,r3,r2
   91290:	e0bfef17 	ldw	r2,-68(fp)
   91294:	1885883a 	add	r2,r3,r2
   91298:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   9129c:	e0bffc17 	ldw	r2,-16(fp)
   912a0:	1004d43a 	srli	r2,r2,16
   912a4:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
   912a8:	e0bff017 	ldw	r2,-64(fp)
   912ac:	10c00104 	addi	r3,r2,4
   912b0:	e0fff015 	stw	r3,-64(fp)
   912b4:	10800017 	ldw	r2,0(r2)
   912b8:	1004d43a 	srli	r2,r2,16
   912bc:	e17ffb17 	ldw	r5,-20(fp)
   912c0:	1009883a 	mov	r4,r2
   912c4:	00823a00 	call	823a0 <__mulsi3>
   912c8:	1007883a 	mov	r3,r2
   912cc:	e0bff217 	ldw	r2,-56(fp)
   912d0:	10800017 	ldw	r2,0(r2)
   912d4:	1004d43a 	srli	r2,r2,16
   912d8:	1887883a 	add	r3,r3,r2
   912dc:	e0bfef17 	ldw	r2,-68(fp)
   912e0:	1885883a 	add	r2,r3,r2
   912e4:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   912e8:	e0bff417 	ldw	r2,-48(fp)
   912ec:	1004d43a 	srli	r2,r2,16
   912f0:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
   912f4:	e0bff217 	ldw	r2,-56(fp)
   912f8:	10c00104 	addi	r3,r2,4
   912fc:	e0fff215 	stw	r3,-56(fp)
   91300:	e0fff417 	ldw	r3,-48(fp)
   91304:	1808943a 	slli	r4,r3,16
   91308:	e0fffc17 	ldw	r3,-16(fp)
   9130c:	18ffffcc 	andi	r3,r3,65535
   91310:	20c6b03a 	or	r3,r4,r3
   91314:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
   91318:	e0fff017 	ldw	r3,-64(fp)
   9131c:	e0bff917 	ldw	r2,-28(fp)
   91320:	18bfd036 	bltu	r3,r2,91264 <__alt_data_end+0xfffdf264>
	  *xc = carry;
   91324:	e0bff217 	ldw	r2,-56(fp)
   91328:	e0ffef17 	ldw	r3,-68(fp)
   9132c:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
   91330:	e0bff117 	ldw	r2,-60(fp)
   91334:	10800017 	ldw	r2,0(r2)
   91338:	1004d43a 	srli	r2,r2,16
   9133c:	e0bffb15 	stw	r2,-20(fp)
   91340:	e0bffb17 	ldw	r2,-20(fp)
   91344:	10003b26 	beq	r2,zero,91434 <__multiply+0x350>
	{
	  x = xa;
   91348:	e0bff817 	ldw	r2,-32(fp)
   9134c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   91350:	e0bff317 	ldw	r2,-52(fp)
   91354:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   91358:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
   9135c:	e0bff217 	ldw	r2,-56(fp)
   91360:	10800017 	ldw	r2,0(r2)
   91364:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
   91368:	e0bff017 	ldw	r2,-64(fp)
   9136c:	10800017 	ldw	r2,0(r2)
   91370:	10bfffcc 	andi	r2,r2,65535
   91374:	e17ffb17 	ldw	r5,-20(fp)
   91378:	1009883a 	mov	r4,r2
   9137c:	00823a00 	call	823a0 <__mulsi3>
   91380:	1007883a 	mov	r3,r2
   91384:	e0bff217 	ldw	r2,-56(fp)
   91388:	10800017 	ldw	r2,0(r2)
   9138c:	1004d43a 	srli	r2,r2,16
   91390:	1887883a 	add	r3,r3,r2
   91394:	e0bfef17 	ldw	r2,-68(fp)
   91398:	1885883a 	add	r2,r3,r2
   9139c:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   913a0:	e0bffc17 	ldw	r2,-16(fp)
   913a4:	1004d43a 	srli	r2,r2,16
   913a8:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
   913ac:	e0bff217 	ldw	r2,-56(fp)
   913b0:	10c00104 	addi	r3,r2,4
   913b4:	e0fff215 	stw	r3,-56(fp)
   913b8:	e0fffc17 	ldw	r3,-16(fp)
   913bc:	1808943a 	slli	r4,r3,16
   913c0:	e0fff417 	ldw	r3,-48(fp)
   913c4:	18ffffcc 	andi	r3,r3,65535
   913c8:	20c6b03a 	or	r3,r4,r3
   913cc:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
   913d0:	e0bff017 	ldw	r2,-64(fp)
   913d4:	10c00104 	addi	r3,r2,4
   913d8:	e0fff015 	stw	r3,-64(fp)
   913dc:	10800017 	ldw	r2,0(r2)
   913e0:	1004d43a 	srli	r2,r2,16
   913e4:	e17ffb17 	ldw	r5,-20(fp)
   913e8:	1009883a 	mov	r4,r2
   913ec:	00823a00 	call	823a0 <__mulsi3>
   913f0:	1007883a 	mov	r3,r2
   913f4:	e0bff217 	ldw	r2,-56(fp)
   913f8:	10800017 	ldw	r2,0(r2)
   913fc:	10bfffcc 	andi	r2,r2,65535
   91400:	1887883a 	add	r3,r3,r2
   91404:	e0bfef17 	ldw	r2,-68(fp)
   91408:	1885883a 	add	r2,r3,r2
   9140c:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   91410:	e0bff417 	ldw	r2,-48(fp)
   91414:	1004d43a 	srli	r2,r2,16
   91418:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
   9141c:	e0fff017 	ldw	r3,-64(fp)
   91420:	e0bff917 	ldw	r2,-28(fp)
   91424:	18bfd036 	bltu	r3,r2,91368 <__alt_data_end+0xfffdf368>
	  *xc = z2;
   91428:	e0bff217 	ldw	r2,-56(fp)
   9142c:	e0fff417 	ldw	r3,-48(fp)
   91430:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   91434:	e0bff117 	ldw	r2,-60(fp)
   91438:	10800104 	addi	r2,r2,4
   9143c:	e0bff115 	stw	r2,-60(fp)
   91440:	e0bff317 	ldw	r2,-52(fp)
   91444:	10800104 	addi	r2,r2,4
   91448:	e0bff315 	stw	r2,-52(fp)
   9144c:	e0fff117 	ldw	r3,-60(fp)
   91450:	e0bffa17 	ldw	r2,-24(fp)
   91454:	18bf7836 	bltu	r3,r2,91238 <__alt_data_end+0xfffdf238>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
   91458:	e0bff517 	ldw	r2,-44(fp)
   9145c:	10800504 	addi	r2,r2,20
   91460:	e0bff315 	stw	r2,-52(fp)
   91464:	e0bfee17 	ldw	r2,-72(fp)
   91468:	1085883a 	add	r2,r2,r2
   9146c:	1085883a 	add	r2,r2,r2
   91470:	1007883a 	mov	r3,r2
   91474:	e0bff317 	ldw	r2,-52(fp)
   91478:	10c5883a 	add	r2,r2,r3
   9147c:	e0bff215 	stw	r2,-56(fp)
   91480:	00000306 	br	91490 <__multiply+0x3ac>
   91484:	e0bfee17 	ldw	r2,-72(fp)
   91488:	10bfffc4 	addi	r2,r2,-1
   9148c:	e0bfee15 	stw	r2,-72(fp)
   91490:	e0bfee17 	ldw	r2,-72(fp)
   91494:	0080060e 	bge	zero,r2,914b0 <__multiply+0x3cc>
   91498:	e0bff217 	ldw	r2,-56(fp)
   9149c:	10bfff04 	addi	r2,r2,-4
   914a0:	e0bff215 	stw	r2,-56(fp)
   914a4:	e0bff217 	ldw	r2,-56(fp)
   914a8:	10800017 	ldw	r2,0(r2)
   914ac:	103ff526 	beq	r2,zero,91484 <__alt_data_end+0xfffdf484>
  c->_wds = wc;
   914b0:	e0bff517 	ldw	r2,-44(fp)
   914b4:	e0ffee17 	ldw	r3,-72(fp)
   914b8:	10c00415 	stw	r3,16(r2)
  return c;
   914bc:	e0bff517 	ldw	r2,-44(fp)
}
   914c0:	e037883a 	mov	sp,fp
   914c4:	dfc00117 	ldw	ra,4(sp)
   914c8:	df000017 	ldw	fp,0(sp)
   914cc:	dec00204 	addi	sp,sp,8
   914d0:	f800283a 	ret

000914d4 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   914d4:	defff704 	addi	sp,sp,-36
   914d8:	dfc00815 	stw	ra,32(sp)
   914dc:	df000715 	stw	fp,28(sp)
   914e0:	df000704 	addi	fp,sp,28
   914e4:	e13ffd15 	stw	r4,-12(fp)
   914e8:	e17ffe15 	stw	r5,-8(fp)
   914ec:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
   914f0:	e0bfff17 	ldw	r2,-4(fp)
   914f4:	108000cc 	andi	r2,r2,3
   914f8:	e0bffb15 	stw	r2,-20(fp)
   914fc:	e0bffb17 	ldw	r2,-20(fp)
   91500:	10000e26 	beq	r2,zero,9153c <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
   91504:	e0bffb17 	ldw	r2,-20(fp)
   91508:	10ffffc4 	addi	r3,r2,-1
   9150c:	008002b4 	movhi	r2,10
   91510:	1084be04 	addi	r2,r2,4856
   91514:	18c7883a 	add	r3,r3,r3
   91518:	18c7883a 	add	r3,r3,r3
   9151c:	10c5883a 	add	r2,r2,r3
   91520:	10800017 	ldw	r2,0(r2)
   91524:	000f883a 	mov	r7,zero
   91528:	100d883a 	mov	r6,r2
   9152c:	e17ffe17 	ldw	r5,-8(fp)
   91530:	e13ffd17 	ldw	r4,-12(fp)
   91534:	0090bd80 	call	90bd8 <__multadd>
   91538:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
   9153c:	e0bfff17 	ldw	r2,-4(fp)
   91540:	1005d0ba 	srai	r2,r2,2
   91544:	e0bfff15 	stw	r2,-4(fp)
   91548:	e0bfff17 	ldw	r2,-4(fp)
   9154c:	1000021e 	bne	r2,zero,91558 <__pow5mult+0x84>
    return b;
   91550:	e0bffe17 	ldw	r2,-8(fp)
   91554:	00003806 	br	91638 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
   91558:	e0bffd17 	ldw	r2,-12(fp)
   9155c:	10801217 	ldw	r2,72(r2)
   91560:	e0bff915 	stw	r2,-28(fp)
   91564:	e0bff917 	ldw	r2,-28(fp)
   91568:	10000b1e 	bne	r2,zero,91598 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
   9156c:	01409c44 	movi	r5,625
   91570:	e13ffd17 	ldw	r4,-12(fp)
   91574:	009108c0 	call	9108c <__i2b>
   91578:	1007883a 	mov	r3,r2
   9157c:	e0bffd17 	ldw	r2,-12(fp)
   91580:	10c01215 	stw	r3,72(r2)
   91584:	e0bffd17 	ldw	r2,-12(fp)
   91588:	10801217 	ldw	r2,72(r2)
   9158c:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
   91590:	e0bff917 	ldw	r2,-28(fp)
   91594:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
   91598:	e0bfff17 	ldw	r2,-4(fp)
   9159c:	1080004c 	andi	r2,r2,1
   915a0:	10000a26 	beq	r2,zero,915cc <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
   915a4:	e1bff917 	ldw	r6,-28(fp)
   915a8:	e17ffe17 	ldw	r5,-8(fp)
   915ac:	e13ffd17 	ldw	r4,-12(fp)
   915b0:	00910e40 	call	910e4 <__multiply>
   915b4:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
   915b8:	e17ffe17 	ldw	r5,-8(fp)
   915bc:	e13ffd17 	ldw	r4,-12(fp)
   915c0:	0090b5c0 	call	90b5c <_Bfree>
	  b = b1;
   915c4:	e0bffc17 	ldw	r2,-16(fp)
   915c8:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
   915cc:	e0bfff17 	ldw	r2,-4(fp)
   915d0:	1005d07a 	srai	r2,r2,1
   915d4:	e0bfff15 	stw	r2,-4(fp)
   915d8:	e0bfff17 	ldw	r2,-4(fp)
   915dc:	10001426 	beq	r2,zero,91630 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
   915e0:	e0bff917 	ldw	r2,-28(fp)
   915e4:	10800017 	ldw	r2,0(r2)
   915e8:	e0bffa15 	stw	r2,-24(fp)
   915ec:	e0bffa17 	ldw	r2,-24(fp)
   915f0:	10000c1e 	bne	r2,zero,91624 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
   915f4:	e1bff917 	ldw	r6,-28(fp)
   915f8:	e17ff917 	ldw	r5,-28(fp)
   915fc:	e13ffd17 	ldw	r4,-12(fp)
   91600:	00910e40 	call	910e4 <__multiply>
   91604:	1007883a 	mov	r3,r2
   91608:	e0bff917 	ldw	r2,-28(fp)
   9160c:	10c00015 	stw	r3,0(r2)
   91610:	e0bff917 	ldw	r2,-28(fp)
   91614:	10800017 	ldw	r2,0(r2)
   91618:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
   9161c:	e0bffa17 	ldw	r2,-24(fp)
   91620:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
   91624:	e0bffa17 	ldw	r2,-24(fp)
   91628:	e0bff915 	stw	r2,-28(fp)
    }
   9162c:	003fda06 	br	91598 <__alt_data_end+0xfffdf598>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
   91630:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
   91634:	e0bffe17 	ldw	r2,-8(fp)
}
   91638:	e037883a 	mov	sp,fp
   9163c:	dfc00117 	ldw	ra,4(sp)
   91640:	df000017 	ldw	fp,0(sp)
   91644:	dec00204 	addi	sp,sp,8
   91648:	f800283a 	ret

0009164c <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   9164c:	defff204 	addi	sp,sp,-56
   91650:	dfc00d15 	stw	ra,52(sp)
   91654:	df000c15 	stw	fp,48(sp)
   91658:	df000c04 	addi	fp,sp,48
   9165c:	e13ffd15 	stw	r4,-12(fp)
   91660:	e17ffe15 	stw	r5,-8(fp)
   91664:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
   91668:	e0bfff17 	ldw	r2,-4(fp)
   9166c:	1005d17a 	srai	r2,r2,5
   91670:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
   91674:	e0bffe17 	ldw	r2,-8(fp)
   91678:	10800117 	ldw	r2,4(r2)
   9167c:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
   91680:	e0bffe17 	ldw	r2,-8(fp)
   91684:	10c00417 	ldw	r3,16(r2)
   91688:	e0bffa17 	ldw	r2,-24(fp)
   9168c:	1885883a 	add	r2,r3,r2
   91690:	10800044 	addi	r2,r2,1
   91694:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
   91698:	e0bffe17 	ldw	r2,-8(fp)
   9169c:	10800217 	ldw	r2,8(r2)
   916a0:	e0bff415 	stw	r2,-48(fp)
   916a4:	00000606 	br	916c0 <__lshift+0x74>
    k1++;
   916a8:	e0bff517 	ldw	r2,-44(fp)
   916ac:	10800044 	addi	r2,r2,1
   916b0:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
   916b4:	e0bff417 	ldw	r2,-48(fp)
   916b8:	1085883a 	add	r2,r2,r2
   916bc:	e0bff415 	stw	r2,-48(fp)
   916c0:	e0bff617 	ldw	r2,-40(fp)
   916c4:	e0fff417 	ldw	r3,-48(fp)
   916c8:	18bff716 	blt	r3,r2,916a8 <__alt_data_end+0xfffdf6a8>
    k1++;
  b1 = Balloc (ptr, k1);
   916cc:	e17ff517 	ldw	r5,-44(fp)
   916d0:	e13ffd17 	ldw	r4,-12(fp)
   916d4:	0090a2c0 	call	90a2c <_Balloc>
   916d8:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
   916dc:	e0bffb17 	ldw	r2,-20(fp)
   916e0:	10800504 	addi	r2,r2,20
   916e4:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
   916e8:	e03ff415 	stw	zero,-48(fp)
   916ec:	00000706 	br	9170c <__lshift+0xc0>
    *x1++ = 0;
   916f0:	e0bff817 	ldw	r2,-32(fp)
   916f4:	10c00104 	addi	r3,r2,4
   916f8:	e0fff815 	stw	r3,-32(fp)
   916fc:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
   91700:	e0bff417 	ldw	r2,-48(fp)
   91704:	10800044 	addi	r2,r2,1
   91708:	e0bff415 	stw	r2,-48(fp)
   9170c:	e0fff417 	ldw	r3,-48(fp)
   91710:	e0bffa17 	ldw	r2,-24(fp)
   91714:	18bff616 	blt	r3,r2,916f0 <__alt_data_end+0xfffdf6f0>
    *x1++ = 0;
  x = b->_x;
   91718:	e0bffe17 	ldw	r2,-8(fp)
   9171c:	10800504 	addi	r2,r2,20
   91720:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
   91724:	e0bffe17 	ldw	r2,-8(fp)
   91728:	10800417 	ldw	r2,16(r2)
   9172c:	1085883a 	add	r2,r2,r2
   91730:	1085883a 	add	r2,r2,r2
   91734:	1007883a 	mov	r3,r2
   91738:	e0bff717 	ldw	r2,-36(fp)
   9173c:	10c5883a 	add	r2,r2,r3
   91740:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
   91744:	e0bfff17 	ldw	r2,-4(fp)
   91748:	108007cc 	andi	r2,r2,31
   9174c:	e0bfff15 	stw	r2,-4(fp)
   91750:	e0bfff17 	ldw	r2,-4(fp)
   91754:	10002326 	beq	r2,zero,917e4 <__lshift+0x198>
    {
      k1 = 32 - k;
   91758:	00c00804 	movi	r3,32
   9175c:	e0bfff17 	ldw	r2,-4(fp)
   91760:	1885c83a 	sub	r2,r3,r2
   91764:	e0bff515 	stw	r2,-44(fp)
      z = 0;
   91768:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
   9176c:	e0bff817 	ldw	r2,-32(fp)
   91770:	10c00104 	addi	r3,r2,4
   91774:	e0fff815 	stw	r3,-32(fp)
   91778:	e0fff717 	ldw	r3,-36(fp)
   9177c:	19000017 	ldw	r4,0(r3)
   91780:	e0ffff17 	ldw	r3,-4(fp)
   91784:	20c8983a 	sll	r4,r4,r3
   91788:	e0fff917 	ldw	r3,-28(fp)
   9178c:	20c6b03a 	or	r3,r4,r3
   91790:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
   91794:	e0bff717 	ldw	r2,-36(fp)
   91798:	10c00104 	addi	r3,r2,4
   9179c:	e0fff715 	stw	r3,-36(fp)
   917a0:	10c00017 	ldw	r3,0(r2)
   917a4:	e0bff517 	ldw	r2,-44(fp)
   917a8:	1884d83a 	srl	r2,r3,r2
   917ac:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
   917b0:	e0fff717 	ldw	r3,-36(fp)
   917b4:	e0bffc17 	ldw	r2,-16(fp)
   917b8:	18bfec36 	bltu	r3,r2,9176c <__alt_data_end+0xfffdf76c>
      if ((*x1 = z) != 0)
   917bc:	e0bff817 	ldw	r2,-32(fp)
   917c0:	e0fff917 	ldw	r3,-28(fp)
   917c4:	10c00015 	stw	r3,0(r2)
   917c8:	e0bff817 	ldw	r2,-32(fp)
   917cc:	10800017 	ldw	r2,0(r2)
   917d0:	10000f26 	beq	r2,zero,91810 <__lshift+0x1c4>
	++n1;
   917d4:	e0bff617 	ldw	r2,-40(fp)
   917d8:	10800044 	addi	r2,r2,1
   917dc:	e0bff615 	stw	r2,-40(fp)
   917e0:	00000b06 	br	91810 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
   917e4:	e0bff817 	ldw	r2,-32(fp)
   917e8:	10c00104 	addi	r3,r2,4
   917ec:	e0fff815 	stw	r3,-32(fp)
   917f0:	e0fff717 	ldw	r3,-36(fp)
   917f4:	19000104 	addi	r4,r3,4
   917f8:	e13ff715 	stw	r4,-36(fp)
   917fc:	18c00017 	ldw	r3,0(r3)
   91800:	10c00015 	stw	r3,0(r2)
    while (x < xe);
   91804:	e0fff717 	ldw	r3,-36(fp)
   91808:	e0bffc17 	ldw	r2,-16(fp)
   9180c:	18bff536 	bltu	r3,r2,917e4 <__alt_data_end+0xfffdf7e4>
  b1->_wds = n1 - 1;
   91810:	e0bff617 	ldw	r2,-40(fp)
   91814:	10ffffc4 	addi	r3,r2,-1
   91818:	e0bffb17 	ldw	r2,-20(fp)
   9181c:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
   91820:	e17ffe17 	ldw	r5,-8(fp)
   91824:	e13ffd17 	ldw	r4,-12(fp)
   91828:	0090b5c0 	call	90b5c <_Bfree>
  return b1;
   9182c:	e0bffb17 	ldw	r2,-20(fp)
}
   91830:	e037883a 	mov	sp,fp
   91834:	dfc00117 	ldw	ra,4(sp)
   91838:	df000017 	ldw	fp,0(sp)
   9183c:	dec00204 	addi	sp,sp,8
   91840:	f800283a 	ret

00091844 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
   91844:	defff704 	addi	sp,sp,-36
   91848:	df000815 	stw	fp,32(sp)
   9184c:	df000804 	addi	fp,sp,32
   91850:	e13ffe15 	stw	r4,-8(fp)
   91854:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
   91858:	e0bffe17 	ldw	r2,-8(fp)
   9185c:	10800417 	ldw	r2,16(r2)
   91860:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
   91864:	e0bfff17 	ldw	r2,-4(fp)
   91868:	10800417 	ldw	r2,16(r2)
   9186c:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
   91870:	e0fffa17 	ldw	r3,-24(fp)
   91874:	e0bffb17 	ldw	r2,-20(fp)
   91878:	1885c83a 	sub	r2,r3,r2
   9187c:	e0bffa15 	stw	r2,-24(fp)
   91880:	e0bffa17 	ldw	r2,-24(fp)
   91884:	10000226 	beq	r2,zero,91890 <__mcmp+0x4c>
    return i;
   91888:	e0bffa17 	ldw	r2,-24(fp)
   9188c:	00002e06 	br	91948 <__mcmp+0x104>
  xa0 = a->_x;
   91890:	e0bffe17 	ldw	r2,-8(fp)
   91894:	10800504 	addi	r2,r2,20
   91898:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
   9189c:	e0bffb17 	ldw	r2,-20(fp)
   918a0:	1085883a 	add	r2,r2,r2
   918a4:	1085883a 	add	r2,r2,r2
   918a8:	1007883a 	mov	r3,r2
   918ac:	e0bffc17 	ldw	r2,-16(fp)
   918b0:	10c5883a 	add	r2,r2,r3
   918b4:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
   918b8:	e0bfff17 	ldw	r2,-4(fp)
   918bc:	10800504 	addi	r2,r2,20
   918c0:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
   918c4:	e0bffb17 	ldw	r2,-20(fp)
   918c8:	1085883a 	add	r2,r2,r2
   918cc:	1085883a 	add	r2,r2,r2
   918d0:	1007883a 	mov	r3,r2
   918d4:	e0bffd17 	ldw	r2,-12(fp)
   918d8:	10c5883a 	add	r2,r2,r3
   918dc:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
   918e0:	e0bff817 	ldw	r2,-32(fp)
   918e4:	10bfff04 	addi	r2,r2,-4
   918e8:	e0bff815 	stw	r2,-32(fp)
   918ec:	e0bff817 	ldw	r2,-32(fp)
   918f0:	10c00017 	ldw	r3,0(r2)
   918f4:	e0bff917 	ldw	r2,-28(fp)
   918f8:	10bfff04 	addi	r2,r2,-4
   918fc:	e0bff915 	stw	r2,-28(fp)
   91900:	e0bff917 	ldw	r2,-28(fp)
   91904:	10800017 	ldw	r2,0(r2)
   91908:	18800926 	beq	r3,r2,91930 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
   9190c:	e0bff817 	ldw	r2,-32(fp)
   91910:	10c00017 	ldw	r3,0(r2)
   91914:	e0bff917 	ldw	r2,-28(fp)
   91918:	10800017 	ldw	r2,0(r2)
   9191c:	1880022e 	bgeu	r3,r2,91928 <__mcmp+0xe4>
   91920:	00bfffc4 	movi	r2,-1
   91924:	00000806 	br	91948 <__mcmp+0x104>
   91928:	00800044 	movi	r2,1
   9192c:	00000606 	br	91948 <__mcmp+0x104>
      if (xa <= xa0)
   91930:	e0bff817 	ldw	r2,-32(fp)
   91934:	e0fffc17 	ldw	r3,-16(fp)
   91938:	1880012e 	bgeu	r3,r2,91940 <__mcmp+0xfc>
	break;
    }
   9193c:	003fe806 	br	918e0 <__alt_data_end+0xfffdf8e0>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
   91940:	0001883a 	nop
    }
  return 0;
   91944:	0005883a 	mov	r2,zero
}
   91948:	e037883a 	mov	sp,fp
   9194c:	df000017 	ldw	fp,0(sp)
   91950:	dec00104 	addi	sp,sp,4
   91954:	f800283a 	ret

00091958 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
   91958:	deffef04 	addi	sp,sp,-68
   9195c:	dfc01015 	stw	ra,64(sp)
   91960:	df000f15 	stw	fp,60(sp)
   91964:	df000f04 	addi	fp,sp,60
   91968:	e13ffd15 	stw	r4,-12(fp)
   9196c:	e17ffe15 	stw	r5,-8(fp)
   91970:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
   91974:	e17fff17 	ldw	r5,-4(fp)
   91978:	e13ffe17 	ldw	r4,-8(fp)
   9197c:	00918440 	call	91844 <__mcmp>
   91980:	e0bff115 	stw	r2,-60(fp)
  if (!i)
   91984:	e0bff117 	ldw	r2,-60(fp)
   91988:	10000b1e 	bne	r2,zero,919b8 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
   9198c:	000b883a 	mov	r5,zero
   91990:	e13ffd17 	ldw	r4,-12(fp)
   91994:	0090a2c0 	call	90a2c <_Balloc>
   91998:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
   9199c:	e0bff717 	ldw	r2,-36(fp)
   919a0:	00c00044 	movi	r3,1
   919a4:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
   919a8:	e0bff717 	ldw	r2,-36(fp)
   919ac:	10000515 	stw	zero,20(r2)
      return c;
   919b0:	e0bff717 	ldw	r2,-36(fp)
   919b4:	00008c06 	br	91be8 <__mdiff+0x290>
    }
  if (i < 0)
   919b8:	e0bff117 	ldw	r2,-60(fp)
   919bc:	1000090e 	bge	r2,zero,919e4 <__mdiff+0x8c>
    {
      c = a;
   919c0:	e0bffe17 	ldw	r2,-8(fp)
   919c4:	e0bff715 	stw	r2,-36(fp)
      a = b;
   919c8:	e0bfff17 	ldw	r2,-4(fp)
   919cc:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   919d0:	e0bff717 	ldw	r2,-36(fp)
   919d4:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
   919d8:	00800044 	movi	r2,1
   919dc:	e0bff115 	stw	r2,-60(fp)
   919e0:	00000106 	br	919e8 <__mdiff+0x90>
    }
  else
    i = 0;
   919e4:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
   919e8:	e0bffe17 	ldw	r2,-8(fp)
   919ec:	10800117 	ldw	r2,4(r2)
   919f0:	100b883a 	mov	r5,r2
   919f4:	e13ffd17 	ldw	r4,-12(fp)
   919f8:	0090a2c0 	call	90a2c <_Balloc>
   919fc:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
   91a00:	e0bff717 	ldw	r2,-36(fp)
   91a04:	e0fff117 	ldw	r3,-60(fp)
   91a08:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
   91a0c:	e0bffe17 	ldw	r2,-8(fp)
   91a10:	10800417 	ldw	r2,16(r2)
   91a14:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
   91a18:	e0bffe17 	ldw	r2,-8(fp)
   91a1c:	10800504 	addi	r2,r2,20
   91a20:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
   91a24:	e0bff217 	ldw	r2,-56(fp)
   91a28:	1085883a 	add	r2,r2,r2
   91a2c:	1085883a 	add	r2,r2,r2
   91a30:	1007883a 	mov	r3,r2
   91a34:	e0bff417 	ldw	r2,-48(fp)
   91a38:	10c5883a 	add	r2,r2,r3
   91a3c:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
   91a40:	e0bfff17 	ldw	r2,-4(fp)
   91a44:	10800417 	ldw	r2,16(r2)
   91a48:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   91a4c:	e0bfff17 	ldw	r2,-4(fp)
   91a50:	10800504 	addi	r2,r2,20
   91a54:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
   91a58:	e0bff917 	ldw	r2,-28(fp)
   91a5c:	1085883a 	add	r2,r2,r2
   91a60:	1085883a 	add	r2,r2,r2
   91a64:	1007883a 	mov	r3,r2
   91a68:	e0bff517 	ldw	r2,-44(fp)
   91a6c:	10c5883a 	add	r2,r2,r3
   91a70:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
   91a74:	e0bff717 	ldw	r2,-36(fp)
   91a78:	10800504 	addi	r2,r2,20
   91a7c:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
   91a80:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
   91a84:	e0bff417 	ldw	r2,-48(fp)
   91a88:	10800017 	ldw	r2,0(r2)
   91a8c:	10ffffcc 	andi	r3,r2,65535
   91a90:	e0bff517 	ldw	r2,-44(fp)
   91a94:	10800017 	ldw	r2,0(r2)
   91a98:	10bfffcc 	andi	r2,r2,65535
   91a9c:	1887c83a 	sub	r3,r3,r2
   91aa0:	e0bff317 	ldw	r2,-52(fp)
   91aa4:	1885883a 	add	r2,r3,r2
   91aa8:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   91aac:	e0bffb17 	ldw	r2,-20(fp)
   91ab0:	1005d43a 	srai	r2,r2,16
   91ab4:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
   91ab8:	e0bff417 	ldw	r2,-48(fp)
   91abc:	10c00104 	addi	r3,r2,4
   91ac0:	e0fff415 	stw	r3,-48(fp)
   91ac4:	10800017 	ldw	r2,0(r2)
   91ac8:	1006d43a 	srli	r3,r2,16
   91acc:	e0bff517 	ldw	r2,-44(fp)
   91ad0:	11000104 	addi	r4,r2,4
   91ad4:	e13ff515 	stw	r4,-44(fp)
   91ad8:	10800017 	ldw	r2,0(r2)
   91adc:	1004d43a 	srli	r2,r2,16
   91ae0:	1887c83a 	sub	r3,r3,r2
   91ae4:	e0bff317 	ldw	r2,-52(fp)
   91ae8:	1885883a 	add	r2,r3,r2
   91aec:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   91af0:	e0bffc17 	ldw	r2,-16(fp)
   91af4:	1005d43a 	srai	r2,r2,16
   91af8:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   91afc:	e0bff617 	ldw	r2,-40(fp)
   91b00:	10c00104 	addi	r3,r2,4
   91b04:	e0fff615 	stw	r3,-40(fp)
   91b08:	e0fffc17 	ldw	r3,-16(fp)
   91b0c:	1808943a 	slli	r4,r3,16
   91b10:	e0fffb17 	ldw	r3,-20(fp)
   91b14:	18ffffcc 	andi	r3,r3,65535
   91b18:	20c6b03a 	or	r3,r4,r3
   91b1c:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
   91b20:	e0fff517 	ldw	r3,-44(fp)
   91b24:	e0bffa17 	ldw	r2,-24(fp)
   91b28:	18bfd636 	bltu	r3,r2,91a84 <__alt_data_end+0xfffdfa84>
  while (xa < xae)
   91b2c:	00001d06 	br	91ba4 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
   91b30:	e0bff417 	ldw	r2,-48(fp)
   91b34:	10800017 	ldw	r2,0(r2)
   91b38:	10ffffcc 	andi	r3,r2,65535
   91b3c:	e0bff317 	ldw	r2,-52(fp)
   91b40:	1885883a 	add	r2,r3,r2
   91b44:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   91b48:	e0bffb17 	ldw	r2,-20(fp)
   91b4c:	1005d43a 	srai	r2,r2,16
   91b50:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
   91b54:	e0bff417 	ldw	r2,-48(fp)
   91b58:	10c00104 	addi	r3,r2,4
   91b5c:	e0fff415 	stw	r3,-48(fp)
   91b60:	10800017 	ldw	r2,0(r2)
   91b64:	1006d43a 	srli	r3,r2,16
   91b68:	e0bff317 	ldw	r2,-52(fp)
   91b6c:	1885883a 	add	r2,r3,r2
   91b70:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   91b74:	e0bffc17 	ldw	r2,-16(fp)
   91b78:	1005d43a 	srai	r2,r2,16
   91b7c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   91b80:	e0bff617 	ldw	r2,-40(fp)
   91b84:	10c00104 	addi	r3,r2,4
   91b88:	e0fff615 	stw	r3,-40(fp)
   91b8c:	e0fffc17 	ldw	r3,-16(fp)
   91b90:	1808943a 	slli	r4,r3,16
   91b94:	e0fffb17 	ldw	r3,-20(fp)
   91b98:	18ffffcc 	andi	r3,r3,65535
   91b9c:	20c6b03a 	or	r3,r4,r3
   91ba0:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
   91ba4:	e0fff417 	ldw	r3,-48(fp)
   91ba8:	e0bff817 	ldw	r2,-32(fp)
   91bac:	18bfe036 	bltu	r3,r2,91b30 <__alt_data_end+0xfffdfb30>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   91bb0:	00000306 	br	91bc0 <__mdiff+0x268>
    wa--;
   91bb4:	e0bff217 	ldw	r2,-56(fp)
   91bb8:	10bfffc4 	addi	r2,r2,-1
   91bbc:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   91bc0:	e0bff617 	ldw	r2,-40(fp)
   91bc4:	10bfff04 	addi	r2,r2,-4
   91bc8:	e0bff615 	stw	r2,-40(fp)
   91bcc:	e0bff617 	ldw	r2,-40(fp)
   91bd0:	10800017 	ldw	r2,0(r2)
   91bd4:	103ff726 	beq	r2,zero,91bb4 <__alt_data_end+0xfffdfbb4>
    wa--;
  c->_wds = wa;
   91bd8:	e0bff717 	ldw	r2,-36(fp)
   91bdc:	e0fff217 	ldw	r3,-56(fp)
   91be0:	10c00415 	stw	r3,16(r2)
  return c;
   91be4:	e0bff717 	ldw	r2,-36(fp)
}
   91be8:	e037883a 	mov	sp,fp
   91bec:	dfc00117 	ldw	ra,4(sp)
   91bf0:	df000017 	ldw	fp,0(sp)
   91bf4:	dec00204 	addi	sp,sp,8
   91bf8:	f800283a 	ret

00091bfc <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
   91bfc:	defff804 	addi	sp,sp,-32
   91c00:	df000715 	stw	fp,28(sp)
   91c04:	dc000615 	stw	r16,24(sp)
   91c08:	df000704 	addi	fp,sp,28
   91c0c:	e13ffd15 	stw	r4,-12(fp)
   91c10:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
   91c14:	e0bffd17 	ldw	r2,-12(fp)
   91c18:	e0bff915 	stw	r2,-28(fp)
   91c1c:	e0bffe17 	ldw	r2,-8(fp)
   91c20:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
   91c24:	e0bffa17 	ldw	r2,-24(fp)
   91c28:	10dffc2c 	andhi	r3,r2,32752
   91c2c:	00bf3034 	movhi	r2,64704
   91c30:	1885883a 	add	r2,r3,r2
   91c34:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
   91c38:	0400040e 	bge	zero,r16,91c4c <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
   91c3c:	8005883a 	mov	r2,r16
   91c40:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
   91c44:	e03ffb15 	stw	zero,-20(fp)
   91c48:	00001406 	br	91c9c <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
   91c4c:	0405c83a 	sub	r2,zero,r16
   91c50:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
   91c54:	80800508 	cmpgei	r2,r16,20
   91c58:	1000051e 	bne	r2,zero,91c70 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
   91c5c:	00800234 	movhi	r2,8
   91c60:	1405d83a 	sra	r2,r2,r16
   91c64:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
   91c68:	e03ffb15 	stw	zero,-20(fp)
   91c6c:	00000b06 	br	91c9c <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
   91c70:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
   91c74:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
   91c78:	808007c8 	cmpgei	r2,r16,31
   91c7c:	1000051e 	bne	r2,zero,91c94 <__ulp+0x98>
   91c80:	008007c4 	movi	r2,31
   91c84:	1405c83a 	sub	r2,r2,r16
   91c88:	00c00044 	movi	r3,1
   91c8c:	1884983a 	sll	r2,r3,r2
   91c90:	00000106 	br	91c98 <__ulp+0x9c>
   91c94:	00800044 	movi	r2,1
   91c98:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
   91c9c:	e0bffb17 	ldw	r2,-20(fp)
   91ca0:	e0fffc17 	ldw	r3,-16(fp)
   91ca4:	1009883a 	mov	r4,r2
   91ca8:	180b883a 	mov	r5,r3
}
   91cac:	2005883a 	mov	r2,r4
   91cb0:	2807883a 	mov	r3,r5
   91cb4:	e6ffff04 	addi	sp,fp,-4
   91cb8:	df000117 	ldw	fp,4(sp)
   91cbc:	dc000017 	ldw	r16,0(sp)
   91cc0:	dec00204 	addi	sp,sp,8
   91cc4:	f800283a 	ret

00091cc8 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
   91cc8:	defff404 	addi	sp,sp,-48
   91ccc:	dfc00b15 	stw	ra,44(sp)
   91cd0:	df000a15 	stw	fp,40(sp)
   91cd4:	df000a04 	addi	fp,sp,40
   91cd8:	e13ffe15 	stw	r4,-8(fp)
   91cdc:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
   91ce0:	e0bffe17 	ldw	r2,-8(fp)
   91ce4:	10800504 	addi	r2,r2,20
   91ce8:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
   91cec:	e0bffe17 	ldw	r2,-8(fp)
   91cf0:	10800417 	ldw	r2,16(r2)
   91cf4:	1085883a 	add	r2,r2,r2
   91cf8:	1085883a 	add	r2,r2,r2
   91cfc:	1007883a 	mov	r3,r2
   91d00:	e0bff717 	ldw	r2,-36(fp)
   91d04:	10c5883a 	add	r2,r2,r3
   91d08:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
   91d0c:	e0bff617 	ldw	r2,-40(fp)
   91d10:	10bfff04 	addi	r2,r2,-4
   91d14:	e0bff615 	stw	r2,-40(fp)
   91d18:	e0bff617 	ldw	r2,-40(fp)
   91d1c:	10800017 	ldw	r2,0(r2)
   91d20:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
   91d24:	e13ff817 	ldw	r4,-32(fp)
   91d28:	0090f100 	call	90f10 <__hi0bits>
   91d2c:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
   91d30:	00c00804 	movi	r3,32
   91d34:	e0bff917 	ldw	r2,-28(fp)
   91d38:	1887c83a 	sub	r3,r3,r2
   91d3c:	e0bfff17 	ldw	r2,-4(fp)
   91d40:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
   91d44:	e0bff917 	ldw	r2,-28(fp)
   91d48:	108002c8 	cmpgei	r2,r2,11
   91d4c:	10001e1e 	bne	r2,zero,91dc8 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
   91d50:	00c002c4 	movi	r3,11
   91d54:	e0bff917 	ldw	r2,-28(fp)
   91d58:	1885c83a 	sub	r2,r3,r2
   91d5c:	e0fff817 	ldw	r3,-32(fp)
   91d60:	1884d83a 	srl	r2,r3,r2
   91d64:	108ffc34 	orhi	r2,r2,16368
   91d68:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
   91d6c:	e0bff617 	ldw	r2,-40(fp)
   91d70:	e0fff717 	ldw	r3,-36(fp)
   91d74:	1880062e 	bgeu	r3,r2,91d90 <__b2d+0xc8>
   91d78:	e0bff617 	ldw	r2,-40(fp)
   91d7c:	10bfff04 	addi	r2,r2,-4
   91d80:	e0bff615 	stw	r2,-40(fp)
   91d84:	e0bff617 	ldw	r2,-40(fp)
   91d88:	10800017 	ldw	r2,0(r2)
   91d8c:	00000106 	br	91d94 <__b2d+0xcc>
   91d90:	0005883a 	mov	r2,zero
   91d94:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
   91d98:	e0bff917 	ldw	r2,-28(fp)
   91d9c:	10800544 	addi	r2,r2,21
   91da0:	e0fff817 	ldw	r3,-32(fp)
   91da4:	1886983a 	sll	r3,r3,r2
   91da8:	010002c4 	movi	r4,11
   91dac:	e0bff917 	ldw	r2,-28(fp)
   91db0:	2085c83a 	sub	r2,r4,r2
   91db4:	e13ffa17 	ldw	r4,-24(fp)
   91db8:	2084d83a 	srl	r2,r4,r2
   91dbc:	1884b03a 	or	r2,r3,r2
   91dc0:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
   91dc4:	00003606 	br	91ea0 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
   91dc8:	e0bff617 	ldw	r2,-40(fp)
   91dcc:	e0fff717 	ldw	r3,-36(fp)
   91dd0:	1880062e 	bgeu	r3,r2,91dec <__b2d+0x124>
   91dd4:	e0bff617 	ldw	r2,-40(fp)
   91dd8:	10bfff04 	addi	r2,r2,-4
   91ddc:	e0bff615 	stw	r2,-40(fp)
   91de0:	e0bff617 	ldw	r2,-40(fp)
   91de4:	10800017 	ldw	r2,0(r2)
   91de8:	00000106 	br	91df0 <__b2d+0x128>
   91dec:	0005883a 	mov	r2,zero
   91df0:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
   91df4:	e0bff917 	ldw	r2,-28(fp)
   91df8:	10bffd44 	addi	r2,r2,-11
   91dfc:	e0bff915 	stw	r2,-28(fp)
   91e00:	e0bff917 	ldw	r2,-28(fp)
   91e04:	10002126 	beq	r2,zero,91e8c <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
   91e08:	e0fff817 	ldw	r3,-32(fp)
   91e0c:	e0bff917 	ldw	r2,-28(fp)
   91e10:	1886983a 	sll	r3,r3,r2
   91e14:	01000804 	movi	r4,32
   91e18:	e0bff917 	ldw	r2,-28(fp)
   91e1c:	2085c83a 	sub	r2,r4,r2
   91e20:	e13ffb17 	ldw	r4,-20(fp)
   91e24:	2084d83a 	srl	r2,r4,r2
   91e28:	1884b03a 	or	r2,r3,r2
   91e2c:	108ffc34 	orhi	r2,r2,16368
   91e30:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
   91e34:	e0bff617 	ldw	r2,-40(fp)
   91e38:	e0fff717 	ldw	r3,-36(fp)
   91e3c:	1880062e 	bgeu	r3,r2,91e58 <__b2d+0x190>
   91e40:	e0bff617 	ldw	r2,-40(fp)
   91e44:	10bfff04 	addi	r2,r2,-4
   91e48:	e0bff615 	stw	r2,-40(fp)
   91e4c:	e0bff617 	ldw	r2,-40(fp)
   91e50:	10800017 	ldw	r2,0(r2)
   91e54:	00000106 	br	91e5c <__b2d+0x194>
   91e58:	0005883a 	mov	r2,zero
   91e5c:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
   91e60:	e0fffb17 	ldw	r3,-20(fp)
   91e64:	e0bff917 	ldw	r2,-28(fp)
   91e68:	1886983a 	sll	r3,r3,r2
   91e6c:	01000804 	movi	r4,32
   91e70:	e0bff917 	ldw	r2,-28(fp)
   91e74:	2085c83a 	sub	r2,r4,r2
   91e78:	e13ff817 	ldw	r4,-32(fp)
   91e7c:	2084d83a 	srl	r2,r4,r2
   91e80:	1884b03a 	or	r2,r3,r2
   91e84:	e0bffc15 	stw	r2,-16(fp)
   91e88:	00000506 	br	91ea0 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
   91e8c:	e0bff817 	ldw	r2,-32(fp)
   91e90:	108ffc34 	orhi	r2,r2,16368
   91e94:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
   91e98:	e0bffb17 	ldw	r2,-20(fp)
   91e9c:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
   91ea0:	e0bffc17 	ldw	r2,-16(fp)
   91ea4:	e0fffd17 	ldw	r3,-12(fp)
   91ea8:	1009883a 	mov	r4,r2
   91eac:	180b883a 	mov	r5,r3
}
   91eb0:	2005883a 	mov	r2,r4
   91eb4:	2807883a 	mov	r3,r5
   91eb8:	e037883a 	mov	sp,fp
   91ebc:	dfc00117 	ldw	ra,4(sp)
   91ec0:	df000017 	ldw	fp,0(sp)
   91ec4:	dec00204 	addi	sp,sp,8
   91ec8:	f800283a 	ret

00091ecc <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
   91ecc:	defff004 	addi	sp,sp,-64
   91ed0:	dfc00f15 	stw	ra,60(sp)
   91ed4:	df000e15 	stw	fp,56(sp)
   91ed8:	dc000d15 	stw	r16,52(sp)
   91edc:	df000e04 	addi	fp,sp,56
   91ee0:	e13ffb15 	stw	r4,-20(fp)
   91ee4:	e17ffc15 	stw	r5,-16(fp)
   91ee8:	e1bffd15 	stw	r6,-12(fp)
   91eec:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
   91ef0:	e0bffc17 	ldw	r2,-16(fp)
   91ef4:	e0bff715 	stw	r2,-36(fp)
   91ef8:	e0bffd17 	ldw	r2,-12(fp)
   91efc:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
   91f00:	e0bffc17 	ldw	r2,-16(fp)
   91f04:	e0bff715 	stw	r2,-36(fp)
   91f08:	e0bffd17 	ldw	r2,-12(fp)
   91f0c:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
   91f10:	01400044 	movi	r5,1
   91f14:	e13ffb17 	ldw	r4,-20(fp)
   91f18:	0090a2c0 	call	90a2c <_Balloc>
   91f1c:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
   91f20:	e0bff417 	ldw	r2,-48(fp)
   91f24:	10800504 	addi	r2,r2,20
   91f28:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
   91f2c:	e0fff817 	ldw	r3,-32(fp)
   91f30:	00800434 	movhi	r2,16
   91f34:	10bfffc4 	addi	r2,r2,-1
   91f38:	1884703a 	and	r2,r3,r2
   91f3c:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
   91f40:	e0fff817 	ldw	r3,-32(fp)
   91f44:	00a00034 	movhi	r2,32768
   91f48:	10bfffc4 	addi	r2,r2,-1
   91f4c:	1884703a 	and	r2,r3,r2
   91f50:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
   91f54:	e0bff817 	ldw	r2,-32(fp)
   91f58:	1004d53a 	srli	r2,r2,20
   91f5c:	e0bff615 	stw	r2,-40(fp)
   91f60:	e0bff617 	ldw	r2,-40(fp)
   91f64:	10000326 	beq	r2,zero,91f74 <__d2b+0xa8>
    z |= Exp_msk1;
   91f68:	e0bffa17 	ldw	r2,-24(fp)
   91f6c:	10800434 	orhi	r2,r2,16
   91f70:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
   91f74:	e0bff717 	ldw	r2,-36(fp)
   91f78:	10002826 	beq	r2,zero,9201c <__d2b+0x150>
    {
      y = d1;
   91f7c:	e0bff717 	ldw	r2,-36(fp)
   91f80:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
   91f84:	e0bff904 	addi	r2,fp,-28
   91f88:	1009883a 	mov	r4,r2
   91f8c:	0090fa00 	call	90fa0 <__lo0bits>
   91f90:	e0bff315 	stw	r2,-52(fp)
      if (k)
   91f94:	e0bff317 	ldw	r2,-52(fp)
   91f98:	10000e26 	beq	r2,zero,91fd4 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
   91f9c:	e0fffa17 	ldw	r3,-24(fp)
   91fa0:	01000804 	movi	r4,32
   91fa4:	e0bff317 	ldw	r2,-52(fp)
   91fa8:	2085c83a 	sub	r2,r4,r2
   91fac:	1886983a 	sll	r3,r3,r2
   91fb0:	e0bff917 	ldw	r2,-28(fp)
   91fb4:	1886b03a 	or	r3,r3,r2
   91fb8:	e0bff517 	ldw	r2,-44(fp)
   91fbc:	10c00015 	stw	r3,0(r2)
	  z >>= k;
   91fc0:	e0fffa17 	ldw	r3,-24(fp)
   91fc4:	e0bff317 	ldw	r2,-52(fp)
   91fc8:	1884d83a 	srl	r2,r3,r2
   91fcc:	e0bffa15 	stw	r2,-24(fp)
   91fd0:	00000306 	br	91fe0 <__d2b+0x114>
	}
      else
	x[0] = y;
   91fd4:	e0fff917 	ldw	r3,-28(fp)
   91fd8:	e0bff517 	ldw	r2,-44(fp)
   91fdc:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
   91fe0:	e0bff517 	ldw	r2,-44(fp)
   91fe4:	10800104 	addi	r2,r2,4
   91fe8:	e0fffa17 	ldw	r3,-24(fp)
   91fec:	10c00015 	stw	r3,0(r2)
   91ff0:	10800017 	ldw	r2,0(r2)
   91ff4:	10000226 	beq	r2,zero,92000 <__d2b+0x134>
   91ff8:	00800084 	movi	r2,2
   91ffc:	00000106 	br	92004 <__d2b+0x138>
   92000:	00800044 	movi	r2,1
   92004:	e0fff417 	ldw	r3,-48(fp)
   92008:	18800415 	stw	r2,16(r3)
   9200c:	e0bff417 	ldw	r2,-48(fp)
   92010:	10800417 	ldw	r2,16(r2)
   92014:	e0bff215 	stw	r2,-56(fp)
   92018:	00001006 	br	9205c <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
   9201c:	e0bffa04 	addi	r2,fp,-24
   92020:	1009883a 	mov	r4,r2
   92024:	0090fa00 	call	90fa0 <__lo0bits>
   92028:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
   9202c:	e0fffa17 	ldw	r3,-24(fp)
   92030:	e0bff517 	ldw	r2,-44(fp)
   92034:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
   92038:	e0bff417 	ldw	r2,-48(fp)
   9203c:	00c00044 	movi	r3,1
   92040:	10c00415 	stw	r3,16(r2)
   92044:	e0bff417 	ldw	r2,-48(fp)
   92048:	10800417 	ldw	r2,16(r2)
   9204c:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
   92050:	e0bff317 	ldw	r2,-52(fp)
   92054:	10800804 	addi	r2,r2,32
   92058:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
   9205c:	e0bff617 	ldw	r2,-40(fp)
   92060:	10000c26 	beq	r2,zero,92094 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
   92064:	e0bff617 	ldw	r2,-40(fp)
   92068:	10fef344 	addi	r3,r2,-1075
   9206c:	e0bff317 	ldw	r2,-52(fp)
   92070:	1887883a 	add	r3,r3,r2
   92074:	e0bffe17 	ldw	r2,-8(fp)
   92078:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
   9207c:	00c00d44 	movi	r3,53
   92080:	e0bff317 	ldw	r2,-52(fp)
   92084:	1887c83a 	sub	r3,r3,r2
   92088:	e0800217 	ldw	r2,8(fp)
   9208c:	10c00015 	stw	r3,0(r2)
   92090:	00001706 	br	920f0 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
   92094:	e0bff617 	ldw	r2,-40(fp)
   92098:	10fef384 	addi	r3,r2,-1074
   9209c:	e0bff317 	ldw	r2,-52(fp)
   920a0:	1887883a 	add	r3,r3,r2
   920a4:	e0bffe17 	ldw	r2,-8(fp)
   920a8:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
   920ac:	e0bff217 	ldw	r2,-56(fp)
   920b0:	1020917a 	slli	r16,r2,5
   920b4:	e0fff217 	ldw	r3,-56(fp)
   920b8:	00900034 	movhi	r2,16384
   920bc:	10bfffc4 	addi	r2,r2,-1
   920c0:	1885883a 	add	r2,r3,r2
   920c4:	1085883a 	add	r2,r2,r2
   920c8:	1085883a 	add	r2,r2,r2
   920cc:	1007883a 	mov	r3,r2
   920d0:	e0bff517 	ldw	r2,-44(fp)
   920d4:	10c5883a 	add	r2,r2,r3
   920d8:	10800017 	ldw	r2,0(r2)
   920dc:	1009883a 	mov	r4,r2
   920e0:	0090f100 	call	90f10 <__hi0bits>
   920e4:	8087c83a 	sub	r3,r16,r2
   920e8:	e0800217 	ldw	r2,8(fp)
   920ec:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
   920f0:	e0bff417 	ldw	r2,-48(fp)
}
   920f4:	e6ffff04 	addi	sp,fp,-4
   920f8:	dfc00217 	ldw	ra,8(sp)
   920fc:	df000117 	ldw	fp,4(sp)
   92100:	dc000017 	ldw	r16,0(sp)
   92104:	dec00304 	addi	sp,sp,12
   92108:	f800283a 	ret

0009210c <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
   9210c:	defff504 	addi	sp,sp,-44
   92110:	dfc00a15 	stw	ra,40(sp)
   92114:	df000915 	stw	fp,36(sp)
   92118:	df000904 	addi	fp,sp,36
   9211c:	e13ffe15 	stw	r4,-8(fp)
   92120:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
   92124:	e0bffc04 	addi	r2,fp,-16
   92128:	100b883a 	mov	r5,r2
   9212c:	e13ffe17 	ldw	r4,-8(fp)
   92130:	0091cc80 	call	91cc8 <__b2d>
   92134:	1009883a 	mov	r4,r2
   92138:	180b883a 	mov	r5,r3
   9213c:	e13ff815 	stw	r4,-32(fp)
   92140:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
   92144:	e0bffd04 	addi	r2,fp,-12
   92148:	100b883a 	mov	r5,r2
   9214c:	e13fff17 	ldw	r4,-4(fp)
   92150:	0091cc80 	call	91cc8 <__b2d>
   92154:	1009883a 	mov	r4,r2
   92158:	180b883a 	mov	r5,r3
   9215c:	e13ffa15 	stw	r4,-24(fp)
   92160:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
   92164:	e0fffc17 	ldw	r3,-16(fp)
   92168:	e0bffd17 	ldw	r2,-12(fp)
   9216c:	1887c83a 	sub	r3,r3,r2
   92170:	e0bffe17 	ldw	r2,-8(fp)
   92174:	11000417 	ldw	r4,16(r2)
   92178:	e0bfff17 	ldw	r2,-4(fp)
   9217c:	10800417 	ldw	r2,16(r2)
   92180:	2085c83a 	sub	r2,r4,r2
   92184:	1004917a 	slli	r2,r2,5
   92188:	1885883a 	add	r2,r3,r2
   9218c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
   92190:	e0bff717 	ldw	r2,-36(fp)
   92194:	0080060e 	bge	zero,r2,921b0 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
   92198:	e0fff917 	ldw	r3,-28(fp)
   9219c:	e0bff717 	ldw	r2,-36(fp)
   921a0:	1004953a 	slli	r2,r2,20
   921a4:	1885883a 	add	r2,r3,r2
   921a8:	e0bff915 	stw	r2,-28(fp)
   921ac:	00000806 	br	921d0 <__ratio+0xc4>
  else
    {
      k = -k;
   921b0:	e0bff717 	ldw	r2,-36(fp)
   921b4:	0085c83a 	sub	r2,zero,r2
   921b8:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
   921bc:	e0fffb17 	ldw	r3,-20(fp)
   921c0:	e0bff717 	ldw	r2,-36(fp)
   921c4:	1004953a 	slli	r2,r2,20
   921c8:	1885883a 	add	r2,r3,r2
   921cc:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
   921d0:	e0bff817 	ldw	r2,-32(fp)
   921d4:	e0fff917 	ldw	r3,-28(fp)
   921d8:	e13ffa17 	ldw	r4,-24(fp)
   921dc:	e17ffb17 	ldw	r5,-20(fp)
   921e0:	200d883a 	mov	r6,r4
   921e4:	280f883a 	mov	r7,r5
   921e8:	1009883a 	mov	r4,r2
   921ec:	180b883a 	mov	r5,r3
   921f0:	0082c740 	call	82c74 <__divdf3>
   921f4:	100f883a 	mov	r7,r2
   921f8:	1811883a 	mov	r8,r3
   921fc:	380b883a 	mov	r5,r7
   92200:	400d883a 	mov	r6,r8
   92204:	2807883a 	mov	r3,r5
   92208:	3009883a 	mov	r4,r6
}
   9220c:	1805883a 	mov	r2,r3
   92210:	2007883a 	mov	r3,r4
   92214:	e037883a 	mov	sp,fp
   92218:	dfc00117 	ldw	ra,4(sp)
   9221c:	df000017 	ldw	fp,0(sp)
   92220:	dec00204 	addi	sp,sp,8
   92224:	f800283a 	ret

00092228 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
   92228:	defffb04 	addi	sp,sp,-20
   9222c:	dfc00415 	stw	ra,16(sp)
   92230:	df000315 	stw	fp,12(sp)
   92234:	df000304 	addi	fp,sp,12
   92238:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
   9223c:	e03ffd15 	stw	zero,-12(fp)
   92240:	008ffc34 	movhi	r2,16368
   92244:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
   92248:	e0bfff17 	ldw	r2,-4(fp)
   9224c:	10800608 	cmpgei	r2,r2,24
   92250:	1000141e 	bne	r2,zero,922a4 <_mprec_log10+0x7c>
    return tens[dig];
   92254:	008002b4 	movhi	r2,10
   92258:	10847804 	addi	r2,r2,4576
   9225c:	e0ffff17 	ldw	r3,-4(fp)
   92260:	180690fa 	slli	r3,r3,3
   92264:	10c9883a 	add	r4,r2,r3
   92268:	20800017 	ldw	r2,0(r4)
   9226c:	20c00117 	ldw	r3,4(r4)
   92270:	00001006 	br	922b4 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
   92274:	000d883a 	mov	r6,zero
   92278:	01d00934 	movhi	r7,16420
   9227c:	e13ffd17 	ldw	r4,-12(fp)
   92280:	e17ffe17 	ldw	r5,-8(fp)
   92284:	00838140 	call	83814 <__muldf3>
   92288:	1009883a 	mov	r4,r2
   9228c:	180b883a 	mov	r5,r3
   92290:	e13ffd15 	stw	r4,-12(fp)
   92294:	e17ffe15 	stw	r5,-8(fp)
      dig--;
   92298:	e0bfff17 	ldw	r2,-4(fp)
   9229c:	10bfffc4 	addi	r2,r2,-1
   922a0:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
   922a4:	e0bfff17 	ldw	r2,-4(fp)
   922a8:	00bff216 	blt	zero,r2,92274 <__alt_data_end+0xfffe0274>
    {
      v *= 10;
      dig--;
    }
  return v;
   922ac:	e0bffd17 	ldw	r2,-12(fp)
   922b0:	e0fffe17 	ldw	r3,-8(fp)
   922b4:	1009883a 	mov	r4,r2
   922b8:	180b883a 	mov	r5,r3
}
   922bc:	2005883a 	mov	r2,r4
   922c0:	2807883a 	mov	r3,r5
   922c4:	e037883a 	mov	sp,fp
   922c8:	dfc00117 	ldw	ra,4(sp)
   922cc:	df000017 	ldw	fp,0(sp)
   922d0:	dec00204 	addi	sp,sp,8
   922d4:	f800283a 	ret

000922d8 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
   922d8:	defff904 	addi	sp,sp,-28
   922dc:	df000615 	stw	fp,24(sp)
   922e0:	df000604 	addi	fp,sp,24
   922e4:	e13ffd15 	stw	r4,-12(fp)
   922e8:	e17ffe15 	stw	r5,-8(fp)
   922ec:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
   922f0:	e0bffe17 	ldw	r2,-8(fp)
   922f4:	10bfffc4 	addi	r2,r2,-1
   922f8:	1005d17a 	srai	r2,r2,5
   922fc:	10800044 	addi	r2,r2,1
   92300:	1085883a 	add	r2,r2,r2
   92304:	1085883a 	add	r2,r2,r2
   92308:	1007883a 	mov	r3,r2
   9230c:	e0bffd17 	ldw	r2,-12(fp)
   92310:	10c5883a 	add	r2,r2,r3
   92314:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
   92318:	e0bfff17 	ldw	r2,-4(fp)
   9231c:	10800504 	addi	r2,r2,20
   92320:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
   92324:	e0bfff17 	ldw	r2,-4(fp)
   92328:	10800417 	ldw	r2,16(r2)
   9232c:	1085883a 	add	r2,r2,r2
   92330:	1085883a 	add	r2,r2,r2
   92334:	1007883a 	mov	r3,r2
   92338:	e0bffa17 	ldw	r2,-24(fp)
   9233c:	10c5883a 	add	r2,r2,r3
   92340:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
   92344:	00000806 	br	92368 <__copybits+0x90>
		*c++ = *x++;
   92348:	e0bffd17 	ldw	r2,-12(fp)
   9234c:	10c00104 	addi	r3,r2,4
   92350:	e0fffd15 	stw	r3,-12(fp)
   92354:	e0fffa17 	ldw	r3,-24(fp)
   92358:	19000104 	addi	r4,r3,4
   9235c:	e13ffa15 	stw	r4,-24(fp)
   92360:	18c00017 	ldw	r3,0(r3)
   92364:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
   92368:	e0fffa17 	ldw	r3,-24(fp)
   9236c:	e0bffc17 	ldw	r2,-16(fp)
   92370:	18bff536 	bltu	r3,r2,92348 <__alt_data_end+0xfffe0348>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   92374:	00000406 	br	92388 <__copybits+0xb0>
		*c++ = 0;
   92378:	e0bffd17 	ldw	r2,-12(fp)
   9237c:	10c00104 	addi	r3,r2,4
   92380:	e0fffd15 	stw	r3,-12(fp)
   92384:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   92388:	e0fffd17 	ldw	r3,-12(fp)
   9238c:	e0bffb17 	ldw	r2,-20(fp)
   92390:	18bff936 	bltu	r3,r2,92378 <__alt_data_end+0xfffe0378>
		*c++ = 0;
}
   92394:	0001883a 	nop
   92398:	e037883a 	mov	sp,fp
   9239c:	df000017 	ldw	fp,0(sp)
   923a0:	dec00104 	addi	sp,sp,4
   923a4:	f800283a 	ret

000923a8 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
   923a8:	defff704 	addi	sp,sp,-36
   923ac:	df000815 	stw	fp,32(sp)
   923b0:	df000804 	addi	fp,sp,32
   923b4:	e13ffe15 	stw	r4,-8(fp)
   923b8:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
   923bc:	e0bffe17 	ldw	r2,-8(fp)
   923c0:	10800504 	addi	r2,r2,20
   923c4:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
   923c8:	e0bffe17 	ldw	r2,-8(fp)
   923cc:	10800417 	ldw	r2,16(r2)
   923d0:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
   923d4:	e0bfff17 	ldw	r2,-4(fp)
   923d8:	1005d17a 	srai	r2,r2,5
   923dc:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
   923e0:	e0bff817 	ldw	r2,-32(fp)
   923e4:	e0fffa17 	ldw	r3,-24(fp)
   923e8:	1880030e 	bge	r3,r2,923f8 <__any_on+0x50>
		n = nwds;
   923ec:	e0bffa17 	ldw	r2,-24(fp)
   923f0:	e0bff815 	stw	r2,-32(fp)
   923f4:	00001f06 	br	92474 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
   923f8:	e0fff817 	ldw	r3,-32(fp)
   923fc:	e0bffa17 	ldw	r2,-24(fp)
   92400:	18801c0e 	bge	r3,r2,92474 <__any_on+0xcc>
   92404:	e0bfff17 	ldw	r2,-4(fp)
   92408:	108007cc 	andi	r2,r2,31
   9240c:	e0bfff15 	stw	r2,-4(fp)
   92410:	e0bfff17 	ldw	r2,-4(fp)
   92414:	10001726 	beq	r2,zero,92474 <__any_on+0xcc>
		x1 = x2 = x[n];
   92418:	e0bff817 	ldw	r2,-32(fp)
   9241c:	1085883a 	add	r2,r2,r2
   92420:	1085883a 	add	r2,r2,r2
   92424:	1007883a 	mov	r3,r2
   92428:	e0bff917 	ldw	r2,-28(fp)
   9242c:	10c5883a 	add	r2,r2,r3
   92430:	10800017 	ldw	r2,0(r2)
   92434:	e0bffb15 	stw	r2,-20(fp)
   92438:	e0bffb17 	ldw	r2,-20(fp)
   9243c:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
   92440:	e0fffc17 	ldw	r3,-16(fp)
   92444:	e0bfff17 	ldw	r2,-4(fp)
   92448:	1884d83a 	srl	r2,r3,r2
   9244c:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
   92450:	e0fffc17 	ldw	r3,-16(fp)
   92454:	e0bfff17 	ldw	r2,-4(fp)
   92458:	1884983a 	sll	r2,r3,r2
   9245c:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
   92460:	e0fffc17 	ldw	r3,-16(fp)
   92464:	e0bffb17 	ldw	r2,-20(fp)
   92468:	18800226 	beq	r3,r2,92474 <__any_on+0xcc>
			return 1;
   9246c:	00800044 	movi	r2,1
   92470:	00001606 	br	924cc <__any_on+0x124>
		}
	x0 = x;
   92474:	e0bff917 	ldw	r2,-28(fp)
   92478:	e0bffd15 	stw	r2,-12(fp)
	x += n;
   9247c:	e0bff817 	ldw	r2,-32(fp)
   92480:	1085883a 	add	r2,r2,r2
   92484:	1085883a 	add	r2,r2,r2
   92488:	1007883a 	mov	r3,r2
   9248c:	e0bff917 	ldw	r2,-28(fp)
   92490:	10c5883a 	add	r2,r2,r3
   92494:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
   92498:	00000806 	br	924bc <__any_on+0x114>
		if (*--x)
   9249c:	e0bff917 	ldw	r2,-28(fp)
   924a0:	10bfff04 	addi	r2,r2,-4
   924a4:	e0bff915 	stw	r2,-28(fp)
   924a8:	e0bff917 	ldw	r2,-28(fp)
   924ac:	10800017 	ldw	r2,0(r2)
   924b0:	10000226 	beq	r2,zero,924bc <__any_on+0x114>
			return 1;
   924b4:	00800044 	movi	r2,1
   924b8:	00000406 	br	924cc <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
   924bc:	e0bff917 	ldw	r2,-28(fp)
   924c0:	e0fffd17 	ldw	r3,-12(fp)
   924c4:	18bff536 	bltu	r3,r2,9249c <__alt_data_end+0xfffe049c>
		if (*--x)
			return 1;
	return 0;
   924c8:	0005883a 	mov	r2,zero
}
   924cc:	e037883a 	mov	sp,fp
   924d0:	df000017 	ldw	fp,0(sp)
   924d4:	dec00104 	addi	sp,sp,4
   924d8:	f800283a 	ret

000924dc <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
   924dc:	defff904 	addi	sp,sp,-28
   924e0:	dfc00615 	stw	ra,24(sp)
   924e4:	df000515 	stw	fp,20(sp)
   924e8:	df000504 	addi	fp,sp,20
   924ec:	e13ffc15 	stw	r4,-16(fp)
   924f0:	e17ffd15 	stw	r5,-12(fp)
   924f4:	e1bffe15 	stw	r6,-8(fp)
   924f8:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   924fc:	d0270f15 	stw	zero,-25540(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
   92500:	e1bfff17 	ldw	r6,-4(fp)
   92504:	e17ffe17 	ldw	r5,-8(fp)
   92508:	e13ffd17 	ldw	r4,-12(fp)
   9250c:	009e7f00 	call	9e7f0 <read>
   92510:	e0bffb15 	stw	r2,-20(fp)
   92514:	e0bffb17 	ldw	r2,-20(fp)
   92518:	10bfffd8 	cmpnei	r2,r2,-1
   9251c:	1000051e 	bne	r2,zero,92534 <_read_r+0x58>
   92520:	d0a70f17 	ldw	r2,-25540(gp)
   92524:	10000326 	beq	r2,zero,92534 <_read_r+0x58>
    ptr->_errno = errno;
   92528:	d0e70f17 	ldw	r3,-25540(gp)
   9252c:	e0bffc17 	ldw	r2,-16(fp)
   92530:	10c00015 	stw	r3,0(r2)
  return ret;
   92534:	e0bffb17 	ldw	r2,-20(fp)
}
   92538:	e037883a 	mov	sp,fp
   9253c:	dfc00117 	ldw	ra,4(sp)
   92540:	df000017 	ldw	fp,0(sp)
   92544:	dec00204 	addi	sp,sp,8
   92548:	f800283a 	ret

0009254c <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
   9254c:	deffe104 	addi	sp,sp,-124
   92550:	dfc01e15 	stw	ra,120(sp)
   92554:	df001d15 	stw	fp,116(sp)
   92558:	df001d04 	addi	fp,sp,116
   9255c:	e13ffd15 	stw	r4,-12(fp)
   92560:	e17ffe15 	stw	r5,-8(fp)
   92564:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   92568:	e0bffe17 	ldw	r2,-8(fp)
   9256c:	1000041e 	bne	r2,zero,92580 <_realloc_r+0x34>
   92570:	e17fff17 	ldw	r5,-4(fp)
   92574:	e13ffd17 	ldw	r4,-12(fp)
   92578:	00874a40 	call	874a4 <_malloc_r>
   9257c:	0002ea06 	br	93128 <_realloc_r+0xbdc>

  MALLOC_LOCK;
   92580:	e13ffd17 	ldw	r4,-12(fp)
   92584:	009e4e80 	call	9e4e8 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
   92588:	e0bffe17 	ldw	r2,-8(fp)
   9258c:	10bffe04 	addi	r2,r2,-8
   92590:	e0bfef15 	stw	r2,-68(fp)
   92594:	e0bfef17 	ldw	r2,-68(fp)
   92598:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
   9259c:	e0bfef17 	ldw	r2,-68(fp)
   925a0:	10c00117 	ldw	r3,4(r2)
   925a4:	00bfff04 	movi	r2,-4
   925a8:	1884703a 	and	r2,r3,r2
   925ac:	e0bff015 	stw	r2,-64(fp)
   925b0:	e0bff017 	ldw	r2,-64(fp)
   925b4:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
   925b8:	e0bfff17 	ldw	r2,-4(fp)
   925bc:	108002c4 	addi	r2,r2,11
   925c0:	108005f0 	cmpltui	r2,r2,23
   925c4:	1000051e 	bne	r2,zero,925dc <_realloc_r+0x90>
   925c8:	e0bfff17 	ldw	r2,-4(fp)
   925cc:	10c002c4 	addi	r3,r2,11
   925d0:	00bffe04 	movi	r2,-8
   925d4:	1884703a 	and	r2,r3,r2
   925d8:	00000106 	br	925e0 <_realloc_r+0x94>
   925dc:	00800404 	movi	r2,16
   925e0:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   925e4:	e0bff117 	ldw	r2,-60(fp)
   925e8:	10000316 	blt	r2,zero,925f8 <_realloc_r+0xac>
   925ec:	e0fff117 	ldw	r3,-60(fp)
   925f0:	e0bfff17 	ldw	r2,-4(fp)
   925f4:	1880052e 	bgeu	r3,r2,9260c <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
   925f8:	e0bffd17 	ldw	r2,-12(fp)
   925fc:	00c00304 	movi	r3,12
   92600:	10c00015 	stw	r3,0(r2)
    return 0;
   92604:	0005883a 	mov	r2,zero
   92608:	0002c706 	br	93128 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   9260c:	e0fff017 	ldw	r3,-64(fp)
   92610:	e0bff117 	ldw	r2,-60(fp)
   92614:	18828b0e 	bge	r3,r2,93044 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
   92618:	e0ffef17 	ldw	r3,-68(fp)
   9261c:	e0bff017 	ldw	r2,-64(fp)
   92620:	1885883a 	add	r2,r3,r2
   92624:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
   92628:	008002b4 	movhi	r2,10
   9262c:	10868604 	addi	r2,r2,6680
   92630:	10c00217 	ldw	r3,8(r2)
   92634:	e0bfe517 	ldw	r2,-108(fp)
   92638:	18800926 	beq	r3,r2,92660 <_realloc_r+0x114>
   9263c:	e0bfe517 	ldw	r2,-108(fp)
   92640:	10c00117 	ldw	r3,4(r2)
   92644:	00bfff84 	movi	r2,-2
   92648:	1884703a 	and	r2,r3,r2
   9264c:	e0ffe517 	ldw	r3,-108(fp)
   92650:	1885883a 	add	r2,r3,r2
   92654:	10800117 	ldw	r2,4(r2)
   92658:	1080004c 	andi	r2,r2,1
   9265c:	1000461e 	bne	r2,zero,92778 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
   92660:	e0bfe517 	ldw	r2,-108(fp)
   92664:	10c00117 	ldw	r3,4(r2)
   92668:	00bfff04 	movi	r2,-4
   9266c:	1884703a 	and	r2,r3,r2
   92670:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
   92674:	008002b4 	movhi	r2,10
   92678:	10868604 	addi	r2,r2,6680
   9267c:	10c00217 	ldw	r3,8(r2)
   92680:	e0bfe517 	ldw	r2,-108(fp)
   92684:	1880251e 	bne	r3,r2,9271c <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
   92688:	e0ffe617 	ldw	r3,-104(fp)
   9268c:	e0bfe417 	ldw	r2,-112(fp)
   92690:	1885883a 	add	r2,r3,r2
   92694:	1007883a 	mov	r3,r2
   92698:	e0bff117 	ldw	r2,-60(fp)
   9269c:	10800404 	addi	r2,r2,16
   926a0:	18803816 	blt	r3,r2,92784 <_realloc_r+0x238>
        {
          newsize += nextsize;
   926a4:	e0ffe417 	ldw	r3,-112(fp)
   926a8:	e0bfe617 	ldw	r2,-104(fp)
   926ac:	1885883a 	add	r2,r3,r2
   926b0:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
   926b4:	008002b4 	movhi	r2,10
   926b8:	10868604 	addi	r2,r2,6680
   926bc:	e13fef17 	ldw	r4,-68(fp)
   926c0:	e0fff117 	ldw	r3,-60(fp)
   926c4:	20c7883a 	add	r3,r4,r3
   926c8:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
   926cc:	008002b4 	movhi	r2,10
   926d0:	10868604 	addi	r2,r2,6680
   926d4:	10800217 	ldw	r2,8(r2)
   926d8:	e13fe417 	ldw	r4,-112(fp)
   926dc:	e0fff117 	ldw	r3,-60(fp)
   926e0:	20c7c83a 	sub	r3,r4,r3
   926e4:	18c00054 	ori	r3,r3,1
   926e8:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
   926ec:	e0bfef17 	ldw	r2,-68(fp)
   926f0:	10800117 	ldw	r2,4(r2)
   926f4:	10c0004c 	andi	r3,r2,1
   926f8:	e0bff117 	ldw	r2,-60(fp)
   926fc:	1886b03a 	or	r3,r3,r2
   92700:	e0bfef17 	ldw	r2,-68(fp)
   92704:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
   92708:	e13ffd17 	ldw	r4,-12(fp)
   9270c:	009e50c0 	call	9e50c <__malloc_unlock>
          return chunk2mem(oldp);
   92710:	e0bfef17 	ldw	r2,-68(fp)
   92714:	10800204 	addi	r2,r2,8
   92718:	00028306 	br	93128 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
   9271c:	e0ffe617 	ldw	r3,-104(fp)
   92720:	e0bfe417 	ldw	r2,-112(fp)
   92724:	1885883a 	add	r2,r3,r2
   92728:	1007883a 	mov	r3,r2
   9272c:	e0bff117 	ldw	r2,-60(fp)
   92730:	18801416 	blt	r3,r2,92784 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
   92734:	e0bfe517 	ldw	r2,-108(fp)
   92738:	10800317 	ldw	r2,12(r2)
   9273c:	e0bff215 	stw	r2,-56(fp)
   92740:	e0bfe517 	ldw	r2,-108(fp)
   92744:	10800217 	ldw	r2,8(r2)
   92748:	e0bff315 	stw	r2,-52(fp)
   9274c:	e0bff317 	ldw	r2,-52(fp)
   92750:	e0fff217 	ldw	r3,-56(fp)
   92754:	10c00315 	stw	r3,12(r2)
   92758:	e0bff217 	ldw	r2,-56(fp)
   9275c:	e0fff317 	ldw	r3,-52(fp)
   92760:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
   92764:	e0ffe417 	ldw	r3,-112(fp)
   92768:	e0bfe617 	ldw	r2,-104(fp)
   9276c:	1885883a 	add	r2,r3,r2
   92770:	e0bfe415 	stw	r2,-112(fp)
        goto split;
   92774:	00023306 	br	93044 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
   92778:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
   9277c:	e03fe615 	stw	zero,-104(fp)
   92780:	00000106 	br	92788 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
   92784:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   92788:	e0bfef17 	ldw	r2,-68(fp)
   9278c:	10800117 	ldw	r2,4(r2)
   92790:	1080004c 	andi	r2,r2,1
   92794:	1001a91e 	bne	r2,zero,92e3c <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
   92798:	e0bfef17 	ldw	r2,-68(fp)
   9279c:	10800017 	ldw	r2,0(r2)
   927a0:	0085c83a 	sub	r2,zero,r2
   927a4:	e0ffef17 	ldw	r3,-68(fp)
   927a8:	1885883a 	add	r2,r3,r2
   927ac:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
   927b0:	e0bff417 	ldw	r2,-48(fp)
   927b4:	10c00117 	ldw	r3,4(r2)
   927b8:	00bfff04 	movi	r2,-4
   927bc:	1884703a 	and	r2,r3,r2
   927c0:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
   927c4:	e0bfe517 	ldw	r2,-108(fp)
   927c8:	10012226 	beq	r2,zero,92c54 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
   927cc:	008002b4 	movhi	r2,10
   927d0:	10868604 	addi	r2,r2,6680
   927d4:	10c00217 	ldw	r3,8(r2)
   927d8:	e0bfe517 	ldw	r2,-108(fp)
   927dc:	1880951e 	bne	r3,r2,92a34 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
   927e0:	e0ffe617 	ldw	r3,-104(fp)
   927e4:	e0bff517 	ldw	r2,-44(fp)
   927e8:	1887883a 	add	r3,r3,r2
   927ec:	e0bfe417 	ldw	r2,-112(fp)
   927f0:	1885883a 	add	r2,r3,r2
   927f4:	1007883a 	mov	r3,r2
   927f8:	e0bff117 	ldw	r2,-60(fp)
   927fc:	10800404 	addi	r2,r2,16
   92800:	18811416 	blt	r3,r2,92c54 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
   92804:	e0bff417 	ldw	r2,-48(fp)
   92808:	10800317 	ldw	r2,12(r2)
   9280c:	e0bff215 	stw	r2,-56(fp)
   92810:	e0bff417 	ldw	r2,-48(fp)
   92814:	10800217 	ldw	r2,8(r2)
   92818:	e0bff315 	stw	r2,-52(fp)
   9281c:	e0bff317 	ldw	r2,-52(fp)
   92820:	e0fff217 	ldw	r3,-56(fp)
   92824:	10c00315 	stw	r3,12(r2)
   92828:	e0bff217 	ldw	r2,-56(fp)
   9282c:	e0fff317 	ldw	r3,-52(fp)
   92830:	10c00215 	stw	r3,8(r2)
            newp = prev;
   92834:	e0bff417 	ldw	r2,-48(fp)
   92838:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
   9283c:	e0fff517 	ldw	r3,-44(fp)
   92840:	e0bfe617 	ldw	r2,-104(fp)
   92844:	1885883a 	add	r2,r3,r2
   92848:	e0ffe417 	ldw	r3,-112(fp)
   9284c:	1885883a 	add	r2,r3,r2
   92850:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
   92854:	e0bfe317 	ldw	r2,-116(fp)
   92858:	10800204 	addi	r2,r2,8
   9285c:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92860:	e0bff017 	ldw	r2,-64(fp)
   92864:	10bfff04 	addi	r2,r2,-4
   92868:	e0bff715 	stw	r2,-36(fp)
   9286c:	e0bff717 	ldw	r2,-36(fp)
   92870:	10800968 	cmpgeui	r2,r2,37
   92874:	1000521e 	bne	r2,zero,929c0 <_realloc_r+0x474>
   92878:	e0bffe17 	ldw	r2,-8(fp)
   9287c:	e0bfe715 	stw	r2,-100(fp)
   92880:	e0bff617 	ldw	r2,-40(fp)
   92884:	e0bfe815 	stw	r2,-96(fp)
   92888:	e0bff717 	ldw	r2,-36(fp)
   9288c:	10800530 	cmpltui	r2,r2,20
   92890:	1000361e 	bne	r2,zero,9296c <_realloc_r+0x420>
   92894:	e0bfe817 	ldw	r2,-96(fp)
   92898:	10c00104 	addi	r3,r2,4
   9289c:	e0ffe815 	stw	r3,-96(fp)
   928a0:	e0ffe717 	ldw	r3,-100(fp)
   928a4:	19000104 	addi	r4,r3,4
   928a8:	e13fe715 	stw	r4,-100(fp)
   928ac:	18c00017 	ldw	r3,0(r3)
   928b0:	10c00015 	stw	r3,0(r2)
   928b4:	e0bfe817 	ldw	r2,-96(fp)
   928b8:	10c00104 	addi	r3,r2,4
   928bc:	e0ffe815 	stw	r3,-96(fp)
   928c0:	e0ffe717 	ldw	r3,-100(fp)
   928c4:	19000104 	addi	r4,r3,4
   928c8:	e13fe715 	stw	r4,-100(fp)
   928cc:	18c00017 	ldw	r3,0(r3)
   928d0:	10c00015 	stw	r3,0(r2)
   928d4:	e0bff717 	ldw	r2,-36(fp)
   928d8:	10800730 	cmpltui	r2,r2,28
   928dc:	1000231e 	bne	r2,zero,9296c <_realloc_r+0x420>
   928e0:	e0bfe817 	ldw	r2,-96(fp)
   928e4:	10c00104 	addi	r3,r2,4
   928e8:	e0ffe815 	stw	r3,-96(fp)
   928ec:	e0ffe717 	ldw	r3,-100(fp)
   928f0:	19000104 	addi	r4,r3,4
   928f4:	e13fe715 	stw	r4,-100(fp)
   928f8:	18c00017 	ldw	r3,0(r3)
   928fc:	10c00015 	stw	r3,0(r2)
   92900:	e0bfe817 	ldw	r2,-96(fp)
   92904:	10c00104 	addi	r3,r2,4
   92908:	e0ffe815 	stw	r3,-96(fp)
   9290c:	e0ffe717 	ldw	r3,-100(fp)
   92910:	19000104 	addi	r4,r3,4
   92914:	e13fe715 	stw	r4,-100(fp)
   92918:	18c00017 	ldw	r3,0(r3)
   9291c:	10c00015 	stw	r3,0(r2)
   92920:	e0bff717 	ldw	r2,-36(fp)
   92924:	10800930 	cmpltui	r2,r2,36
   92928:	1000101e 	bne	r2,zero,9296c <_realloc_r+0x420>
   9292c:	e0bfe817 	ldw	r2,-96(fp)
   92930:	10c00104 	addi	r3,r2,4
   92934:	e0ffe815 	stw	r3,-96(fp)
   92938:	e0ffe717 	ldw	r3,-100(fp)
   9293c:	19000104 	addi	r4,r3,4
   92940:	e13fe715 	stw	r4,-100(fp)
   92944:	18c00017 	ldw	r3,0(r3)
   92948:	10c00015 	stw	r3,0(r2)
   9294c:	e0bfe817 	ldw	r2,-96(fp)
   92950:	10c00104 	addi	r3,r2,4
   92954:	e0ffe815 	stw	r3,-96(fp)
   92958:	e0ffe717 	ldw	r3,-100(fp)
   9295c:	19000104 	addi	r4,r3,4
   92960:	e13fe715 	stw	r4,-100(fp)
   92964:	18c00017 	ldw	r3,0(r3)
   92968:	10c00015 	stw	r3,0(r2)
   9296c:	e0bfe817 	ldw	r2,-96(fp)
   92970:	10c00104 	addi	r3,r2,4
   92974:	e0ffe815 	stw	r3,-96(fp)
   92978:	e0ffe717 	ldw	r3,-100(fp)
   9297c:	19000104 	addi	r4,r3,4
   92980:	e13fe715 	stw	r4,-100(fp)
   92984:	18c00017 	ldw	r3,0(r3)
   92988:	10c00015 	stw	r3,0(r2)
   9298c:	e0bfe817 	ldw	r2,-96(fp)
   92990:	10c00104 	addi	r3,r2,4
   92994:	e0ffe815 	stw	r3,-96(fp)
   92998:	e0ffe717 	ldw	r3,-100(fp)
   9299c:	19000104 	addi	r4,r3,4
   929a0:	e13fe715 	stw	r4,-100(fp)
   929a4:	18c00017 	ldw	r3,0(r3)
   929a8:	10c00015 	stw	r3,0(r2)
   929ac:	e0bfe717 	ldw	r2,-100(fp)
   929b0:	10c00017 	ldw	r3,0(r2)
   929b4:	e0bfe817 	ldw	r2,-96(fp)
   929b8:	10c00015 	stw	r3,0(r2)
   929bc:	00000406 	br	929d0 <_realloc_r+0x484>
   929c0:	e1bff717 	ldw	r6,-36(fp)
   929c4:	e17ffe17 	ldw	r5,-8(fp)
   929c8:	e13ff617 	ldw	r4,-40(fp)
   929cc:	00908240 	call	90824 <memmove>
            top = chunk_at_offset(newp, nb);
   929d0:	008002b4 	movhi	r2,10
   929d4:	10868604 	addi	r2,r2,6680
   929d8:	e13fe317 	ldw	r4,-116(fp)
   929dc:	e0fff117 	ldw	r3,-60(fp)
   929e0:	20c7883a 	add	r3,r4,r3
   929e4:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
   929e8:	008002b4 	movhi	r2,10
   929ec:	10868604 	addi	r2,r2,6680
   929f0:	10800217 	ldw	r2,8(r2)
   929f4:	e13fe417 	ldw	r4,-112(fp)
   929f8:	e0fff117 	ldw	r3,-60(fp)
   929fc:	20c7c83a 	sub	r3,r4,r3
   92a00:	18c00054 	ori	r3,r3,1
   92a04:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
   92a08:	e0bfe317 	ldw	r2,-116(fp)
   92a0c:	10800117 	ldw	r2,4(r2)
   92a10:	10c0004c 	andi	r3,r2,1
   92a14:	e0bff117 	ldw	r2,-60(fp)
   92a18:	1886b03a 	or	r3,r3,r2
   92a1c:	e0bfe317 	ldw	r2,-116(fp)
   92a20:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
   92a24:	e13ffd17 	ldw	r4,-12(fp)
   92a28:	009e50c0 	call	9e50c <__malloc_unlock>
            return newmem;
   92a2c:	e0bff617 	ldw	r2,-40(fp)
   92a30:	0001bd06 	br	93128 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
   92a34:	e0ffe617 	ldw	r3,-104(fp)
   92a38:	e0bff517 	ldw	r2,-44(fp)
   92a3c:	1887883a 	add	r3,r3,r2
   92a40:	e0bfe417 	ldw	r2,-112(fp)
   92a44:	1885883a 	add	r2,r3,r2
   92a48:	1007883a 	mov	r3,r2
   92a4c:	e0bff117 	ldw	r2,-60(fp)
   92a50:	18808016 	blt	r3,r2,92c54 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
   92a54:	e0bfe517 	ldw	r2,-108(fp)
   92a58:	10800317 	ldw	r2,12(r2)
   92a5c:	e0bff215 	stw	r2,-56(fp)
   92a60:	e0bfe517 	ldw	r2,-108(fp)
   92a64:	10800217 	ldw	r2,8(r2)
   92a68:	e0bff315 	stw	r2,-52(fp)
   92a6c:	e0bff317 	ldw	r2,-52(fp)
   92a70:	e0fff217 	ldw	r3,-56(fp)
   92a74:	10c00315 	stw	r3,12(r2)
   92a78:	e0bff217 	ldw	r2,-56(fp)
   92a7c:	e0fff317 	ldw	r3,-52(fp)
   92a80:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
   92a84:	e0bff417 	ldw	r2,-48(fp)
   92a88:	10800317 	ldw	r2,12(r2)
   92a8c:	e0bff215 	stw	r2,-56(fp)
   92a90:	e0bff417 	ldw	r2,-48(fp)
   92a94:	10800217 	ldw	r2,8(r2)
   92a98:	e0bff315 	stw	r2,-52(fp)
   92a9c:	e0bff317 	ldw	r2,-52(fp)
   92aa0:	e0fff217 	ldw	r3,-56(fp)
   92aa4:	10c00315 	stw	r3,12(r2)
   92aa8:	e0bff217 	ldw	r2,-56(fp)
   92aac:	e0fff317 	ldw	r3,-52(fp)
   92ab0:	10c00215 	stw	r3,8(r2)
          newp = prev;
   92ab4:	e0bff417 	ldw	r2,-48(fp)
   92ab8:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
   92abc:	e0ffe617 	ldw	r3,-104(fp)
   92ac0:	e0bff517 	ldw	r2,-44(fp)
   92ac4:	1885883a 	add	r2,r3,r2
   92ac8:	e0ffe417 	ldw	r3,-112(fp)
   92acc:	1885883a 	add	r2,r3,r2
   92ad0:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
   92ad4:	e0bfe317 	ldw	r2,-116(fp)
   92ad8:	10800204 	addi	r2,r2,8
   92adc:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92ae0:	e0bff017 	ldw	r2,-64(fp)
   92ae4:	10bfff04 	addi	r2,r2,-4
   92ae8:	e0bff815 	stw	r2,-32(fp)
   92aec:	e0bff817 	ldw	r2,-32(fp)
   92af0:	10800968 	cmpgeui	r2,r2,37
   92af4:	1000521e 	bne	r2,zero,92c40 <_realloc_r+0x6f4>
   92af8:	e0bffe17 	ldw	r2,-8(fp)
   92afc:	e0bfe915 	stw	r2,-92(fp)
   92b00:	e0bff617 	ldw	r2,-40(fp)
   92b04:	e0bfea15 	stw	r2,-88(fp)
   92b08:	e0bff817 	ldw	r2,-32(fp)
   92b0c:	10800530 	cmpltui	r2,r2,20
   92b10:	1000361e 	bne	r2,zero,92bec <_realloc_r+0x6a0>
   92b14:	e0bfea17 	ldw	r2,-88(fp)
   92b18:	10c00104 	addi	r3,r2,4
   92b1c:	e0ffea15 	stw	r3,-88(fp)
   92b20:	e0ffe917 	ldw	r3,-92(fp)
   92b24:	19000104 	addi	r4,r3,4
   92b28:	e13fe915 	stw	r4,-92(fp)
   92b2c:	18c00017 	ldw	r3,0(r3)
   92b30:	10c00015 	stw	r3,0(r2)
   92b34:	e0bfea17 	ldw	r2,-88(fp)
   92b38:	10c00104 	addi	r3,r2,4
   92b3c:	e0ffea15 	stw	r3,-88(fp)
   92b40:	e0ffe917 	ldw	r3,-92(fp)
   92b44:	19000104 	addi	r4,r3,4
   92b48:	e13fe915 	stw	r4,-92(fp)
   92b4c:	18c00017 	ldw	r3,0(r3)
   92b50:	10c00015 	stw	r3,0(r2)
   92b54:	e0bff817 	ldw	r2,-32(fp)
   92b58:	10800730 	cmpltui	r2,r2,28
   92b5c:	1000231e 	bne	r2,zero,92bec <_realloc_r+0x6a0>
   92b60:	e0bfea17 	ldw	r2,-88(fp)
   92b64:	10c00104 	addi	r3,r2,4
   92b68:	e0ffea15 	stw	r3,-88(fp)
   92b6c:	e0ffe917 	ldw	r3,-92(fp)
   92b70:	19000104 	addi	r4,r3,4
   92b74:	e13fe915 	stw	r4,-92(fp)
   92b78:	18c00017 	ldw	r3,0(r3)
   92b7c:	10c00015 	stw	r3,0(r2)
   92b80:	e0bfea17 	ldw	r2,-88(fp)
   92b84:	10c00104 	addi	r3,r2,4
   92b88:	e0ffea15 	stw	r3,-88(fp)
   92b8c:	e0ffe917 	ldw	r3,-92(fp)
   92b90:	19000104 	addi	r4,r3,4
   92b94:	e13fe915 	stw	r4,-92(fp)
   92b98:	18c00017 	ldw	r3,0(r3)
   92b9c:	10c00015 	stw	r3,0(r2)
   92ba0:	e0bff817 	ldw	r2,-32(fp)
   92ba4:	10800930 	cmpltui	r2,r2,36
   92ba8:	1000101e 	bne	r2,zero,92bec <_realloc_r+0x6a0>
   92bac:	e0bfea17 	ldw	r2,-88(fp)
   92bb0:	10c00104 	addi	r3,r2,4
   92bb4:	e0ffea15 	stw	r3,-88(fp)
   92bb8:	e0ffe917 	ldw	r3,-92(fp)
   92bbc:	19000104 	addi	r4,r3,4
   92bc0:	e13fe915 	stw	r4,-92(fp)
   92bc4:	18c00017 	ldw	r3,0(r3)
   92bc8:	10c00015 	stw	r3,0(r2)
   92bcc:	e0bfea17 	ldw	r2,-88(fp)
   92bd0:	10c00104 	addi	r3,r2,4
   92bd4:	e0ffea15 	stw	r3,-88(fp)
   92bd8:	e0ffe917 	ldw	r3,-92(fp)
   92bdc:	19000104 	addi	r4,r3,4
   92be0:	e13fe915 	stw	r4,-92(fp)
   92be4:	18c00017 	ldw	r3,0(r3)
   92be8:	10c00015 	stw	r3,0(r2)
   92bec:	e0bfea17 	ldw	r2,-88(fp)
   92bf0:	10c00104 	addi	r3,r2,4
   92bf4:	e0ffea15 	stw	r3,-88(fp)
   92bf8:	e0ffe917 	ldw	r3,-92(fp)
   92bfc:	19000104 	addi	r4,r3,4
   92c00:	e13fe915 	stw	r4,-92(fp)
   92c04:	18c00017 	ldw	r3,0(r3)
   92c08:	10c00015 	stw	r3,0(r2)
   92c0c:	e0bfea17 	ldw	r2,-88(fp)
   92c10:	10c00104 	addi	r3,r2,4
   92c14:	e0ffea15 	stw	r3,-88(fp)
   92c18:	e0ffe917 	ldw	r3,-92(fp)
   92c1c:	19000104 	addi	r4,r3,4
   92c20:	e13fe915 	stw	r4,-92(fp)
   92c24:	18c00017 	ldw	r3,0(r3)
   92c28:	10c00015 	stw	r3,0(r2)
   92c2c:	e0bfe917 	ldw	r2,-92(fp)
   92c30:	10c00017 	ldw	r3,0(r2)
   92c34:	e0bfea17 	ldw	r2,-88(fp)
   92c38:	10c00015 	stw	r3,0(r2)
          goto split;
   92c3c:	00010106 	br	93044 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92c40:	e1bff817 	ldw	r6,-32(fp)
   92c44:	e17ffe17 	ldw	r5,-8(fp)
   92c48:	e13ff617 	ldw	r4,-40(fp)
   92c4c:	00908240 	call	90824 <memmove>
          goto split;
   92c50:	0000fc06 	br	93044 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
   92c54:	e0bff417 	ldw	r2,-48(fp)
   92c58:	10007826 	beq	r2,zero,92e3c <_realloc_r+0x8f0>
   92c5c:	e0fff517 	ldw	r3,-44(fp)
   92c60:	e0bfe417 	ldw	r2,-112(fp)
   92c64:	1885883a 	add	r2,r3,r2
   92c68:	1007883a 	mov	r3,r2
   92c6c:	e0bff117 	ldw	r2,-60(fp)
   92c70:	18807216 	blt	r3,r2,92e3c <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
   92c74:	e0bff417 	ldw	r2,-48(fp)
   92c78:	10800317 	ldw	r2,12(r2)
   92c7c:	e0bff215 	stw	r2,-56(fp)
   92c80:	e0bff417 	ldw	r2,-48(fp)
   92c84:	10800217 	ldw	r2,8(r2)
   92c88:	e0bff315 	stw	r2,-52(fp)
   92c8c:	e0bff317 	ldw	r2,-52(fp)
   92c90:	e0fff217 	ldw	r3,-56(fp)
   92c94:	10c00315 	stw	r3,12(r2)
   92c98:	e0bff217 	ldw	r2,-56(fp)
   92c9c:	e0fff317 	ldw	r3,-52(fp)
   92ca0:	10c00215 	stw	r3,8(r2)
        newp = prev;
   92ca4:	e0bff417 	ldw	r2,-48(fp)
   92ca8:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
   92cac:	e0ffe417 	ldw	r3,-112(fp)
   92cb0:	e0bff517 	ldw	r2,-44(fp)
   92cb4:	1885883a 	add	r2,r3,r2
   92cb8:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
   92cbc:	e0bfe317 	ldw	r2,-116(fp)
   92cc0:	10800204 	addi	r2,r2,8
   92cc4:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92cc8:	e0bff017 	ldw	r2,-64(fp)
   92ccc:	10bfff04 	addi	r2,r2,-4
   92cd0:	e0bff915 	stw	r2,-28(fp)
   92cd4:	e0bff917 	ldw	r2,-28(fp)
   92cd8:	10800968 	cmpgeui	r2,r2,37
   92cdc:	1000521e 	bne	r2,zero,92e28 <_realloc_r+0x8dc>
   92ce0:	e0bffe17 	ldw	r2,-8(fp)
   92ce4:	e0bfeb15 	stw	r2,-84(fp)
   92ce8:	e0bff617 	ldw	r2,-40(fp)
   92cec:	e0bfec15 	stw	r2,-80(fp)
   92cf0:	e0bff917 	ldw	r2,-28(fp)
   92cf4:	10800530 	cmpltui	r2,r2,20
   92cf8:	1000361e 	bne	r2,zero,92dd4 <_realloc_r+0x888>
   92cfc:	e0bfec17 	ldw	r2,-80(fp)
   92d00:	10c00104 	addi	r3,r2,4
   92d04:	e0ffec15 	stw	r3,-80(fp)
   92d08:	e0ffeb17 	ldw	r3,-84(fp)
   92d0c:	19000104 	addi	r4,r3,4
   92d10:	e13feb15 	stw	r4,-84(fp)
   92d14:	18c00017 	ldw	r3,0(r3)
   92d18:	10c00015 	stw	r3,0(r2)
   92d1c:	e0bfec17 	ldw	r2,-80(fp)
   92d20:	10c00104 	addi	r3,r2,4
   92d24:	e0ffec15 	stw	r3,-80(fp)
   92d28:	e0ffeb17 	ldw	r3,-84(fp)
   92d2c:	19000104 	addi	r4,r3,4
   92d30:	e13feb15 	stw	r4,-84(fp)
   92d34:	18c00017 	ldw	r3,0(r3)
   92d38:	10c00015 	stw	r3,0(r2)
   92d3c:	e0bff917 	ldw	r2,-28(fp)
   92d40:	10800730 	cmpltui	r2,r2,28
   92d44:	1000231e 	bne	r2,zero,92dd4 <_realloc_r+0x888>
   92d48:	e0bfec17 	ldw	r2,-80(fp)
   92d4c:	10c00104 	addi	r3,r2,4
   92d50:	e0ffec15 	stw	r3,-80(fp)
   92d54:	e0ffeb17 	ldw	r3,-84(fp)
   92d58:	19000104 	addi	r4,r3,4
   92d5c:	e13feb15 	stw	r4,-84(fp)
   92d60:	18c00017 	ldw	r3,0(r3)
   92d64:	10c00015 	stw	r3,0(r2)
   92d68:	e0bfec17 	ldw	r2,-80(fp)
   92d6c:	10c00104 	addi	r3,r2,4
   92d70:	e0ffec15 	stw	r3,-80(fp)
   92d74:	e0ffeb17 	ldw	r3,-84(fp)
   92d78:	19000104 	addi	r4,r3,4
   92d7c:	e13feb15 	stw	r4,-84(fp)
   92d80:	18c00017 	ldw	r3,0(r3)
   92d84:	10c00015 	stw	r3,0(r2)
   92d88:	e0bff917 	ldw	r2,-28(fp)
   92d8c:	10800930 	cmpltui	r2,r2,36
   92d90:	1000101e 	bne	r2,zero,92dd4 <_realloc_r+0x888>
   92d94:	e0bfec17 	ldw	r2,-80(fp)
   92d98:	10c00104 	addi	r3,r2,4
   92d9c:	e0ffec15 	stw	r3,-80(fp)
   92da0:	e0ffeb17 	ldw	r3,-84(fp)
   92da4:	19000104 	addi	r4,r3,4
   92da8:	e13feb15 	stw	r4,-84(fp)
   92dac:	18c00017 	ldw	r3,0(r3)
   92db0:	10c00015 	stw	r3,0(r2)
   92db4:	e0bfec17 	ldw	r2,-80(fp)
   92db8:	10c00104 	addi	r3,r2,4
   92dbc:	e0ffec15 	stw	r3,-80(fp)
   92dc0:	e0ffeb17 	ldw	r3,-84(fp)
   92dc4:	19000104 	addi	r4,r3,4
   92dc8:	e13feb15 	stw	r4,-84(fp)
   92dcc:	18c00017 	ldw	r3,0(r3)
   92dd0:	10c00015 	stw	r3,0(r2)
   92dd4:	e0bfec17 	ldw	r2,-80(fp)
   92dd8:	10c00104 	addi	r3,r2,4
   92ddc:	e0ffec15 	stw	r3,-80(fp)
   92de0:	e0ffeb17 	ldw	r3,-84(fp)
   92de4:	19000104 	addi	r4,r3,4
   92de8:	e13feb15 	stw	r4,-84(fp)
   92dec:	18c00017 	ldw	r3,0(r3)
   92df0:	10c00015 	stw	r3,0(r2)
   92df4:	e0bfec17 	ldw	r2,-80(fp)
   92df8:	10c00104 	addi	r3,r2,4
   92dfc:	e0ffec15 	stw	r3,-80(fp)
   92e00:	e0ffeb17 	ldw	r3,-84(fp)
   92e04:	19000104 	addi	r4,r3,4
   92e08:	e13feb15 	stw	r4,-84(fp)
   92e0c:	18c00017 	ldw	r3,0(r3)
   92e10:	10c00015 	stw	r3,0(r2)
   92e14:	e0bfeb17 	ldw	r2,-84(fp)
   92e18:	10c00017 	ldw	r3,0(r2)
   92e1c:	e0bfec17 	ldw	r2,-80(fp)
   92e20:	10c00015 	stw	r3,0(r2)
        goto split;
   92e24:	00008706 	br	93044 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92e28:	e1bff917 	ldw	r6,-28(fp)
   92e2c:	e17ffe17 	ldw	r5,-8(fp)
   92e30:	e13ff617 	ldw	r4,-40(fp)
   92e34:	00908240 	call	90824 <memmove>
        goto split;
   92e38:	00008206 	br	93044 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
   92e3c:	e17fff17 	ldw	r5,-4(fp)
   92e40:	e13ffd17 	ldw	r4,-12(fp)
   92e44:	00874a40 	call	874a4 <_malloc_r>
   92e48:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
   92e4c:	e0bff617 	ldw	r2,-40(fp)
   92e50:	1000041e 	bne	r2,zero,92e64 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
   92e54:	e13ffd17 	ldw	r4,-12(fp)
   92e58:	009e50c0 	call	9e50c <__malloc_unlock>
      return 0;
   92e5c:	0005883a 	mov	r2,zero
   92e60:	0000b106 	br	93128 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
   92e64:	e0bff617 	ldw	r2,-40(fp)
   92e68:	10bffe04 	addi	r2,r2,-8
   92e6c:	e0bfe315 	stw	r2,-116(fp)
   92e70:	e0bfef17 	ldw	r2,-68(fp)
   92e74:	10c00117 	ldw	r3,4(r2)
   92e78:	00bfff84 	movi	r2,-2
   92e7c:	1884703a 	and	r2,r3,r2
   92e80:	e0ffef17 	ldw	r3,-68(fp)
   92e84:	1885883a 	add	r2,r3,r2
   92e88:	e0ffe317 	ldw	r3,-116(fp)
   92e8c:	18800a1e 	bne	r3,r2,92eb8 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
   92e90:	e0bfe317 	ldw	r2,-116(fp)
   92e94:	10c00117 	ldw	r3,4(r2)
   92e98:	00bfff04 	movi	r2,-4
   92e9c:	1884703a 	and	r2,r3,r2
   92ea0:	e0ffe417 	ldw	r3,-112(fp)
   92ea4:	1885883a 	add	r2,r3,r2
   92ea8:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
   92eac:	e0bfef17 	ldw	r2,-68(fp)
   92eb0:	e0bfe315 	stw	r2,-116(fp)
      goto split;
   92eb4:	00006306 	br	93044 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   92eb8:	e0bff017 	ldw	r2,-64(fp)
   92ebc:	10bfff04 	addi	r2,r2,-4
   92ec0:	e0bffa15 	stw	r2,-24(fp)
   92ec4:	e0bffa17 	ldw	r2,-24(fp)
   92ec8:	10800968 	cmpgeui	r2,r2,37
   92ecc:	1000521e 	bne	r2,zero,93018 <_realloc_r+0xacc>
   92ed0:	e0bffe17 	ldw	r2,-8(fp)
   92ed4:	e0bfed15 	stw	r2,-76(fp)
   92ed8:	e0bff617 	ldw	r2,-40(fp)
   92edc:	e0bfee15 	stw	r2,-72(fp)
   92ee0:	e0bffa17 	ldw	r2,-24(fp)
   92ee4:	10800530 	cmpltui	r2,r2,20
   92ee8:	1000361e 	bne	r2,zero,92fc4 <_realloc_r+0xa78>
   92eec:	e0bfee17 	ldw	r2,-72(fp)
   92ef0:	10c00104 	addi	r3,r2,4
   92ef4:	e0ffee15 	stw	r3,-72(fp)
   92ef8:	e0ffed17 	ldw	r3,-76(fp)
   92efc:	19000104 	addi	r4,r3,4
   92f00:	e13fed15 	stw	r4,-76(fp)
   92f04:	18c00017 	ldw	r3,0(r3)
   92f08:	10c00015 	stw	r3,0(r2)
   92f0c:	e0bfee17 	ldw	r2,-72(fp)
   92f10:	10c00104 	addi	r3,r2,4
   92f14:	e0ffee15 	stw	r3,-72(fp)
   92f18:	e0ffed17 	ldw	r3,-76(fp)
   92f1c:	19000104 	addi	r4,r3,4
   92f20:	e13fed15 	stw	r4,-76(fp)
   92f24:	18c00017 	ldw	r3,0(r3)
   92f28:	10c00015 	stw	r3,0(r2)
   92f2c:	e0bffa17 	ldw	r2,-24(fp)
   92f30:	10800730 	cmpltui	r2,r2,28
   92f34:	1000231e 	bne	r2,zero,92fc4 <_realloc_r+0xa78>
   92f38:	e0bfee17 	ldw	r2,-72(fp)
   92f3c:	10c00104 	addi	r3,r2,4
   92f40:	e0ffee15 	stw	r3,-72(fp)
   92f44:	e0ffed17 	ldw	r3,-76(fp)
   92f48:	19000104 	addi	r4,r3,4
   92f4c:	e13fed15 	stw	r4,-76(fp)
   92f50:	18c00017 	ldw	r3,0(r3)
   92f54:	10c00015 	stw	r3,0(r2)
   92f58:	e0bfee17 	ldw	r2,-72(fp)
   92f5c:	10c00104 	addi	r3,r2,4
   92f60:	e0ffee15 	stw	r3,-72(fp)
   92f64:	e0ffed17 	ldw	r3,-76(fp)
   92f68:	19000104 	addi	r4,r3,4
   92f6c:	e13fed15 	stw	r4,-76(fp)
   92f70:	18c00017 	ldw	r3,0(r3)
   92f74:	10c00015 	stw	r3,0(r2)
   92f78:	e0bffa17 	ldw	r2,-24(fp)
   92f7c:	10800930 	cmpltui	r2,r2,36
   92f80:	1000101e 	bne	r2,zero,92fc4 <_realloc_r+0xa78>
   92f84:	e0bfee17 	ldw	r2,-72(fp)
   92f88:	10c00104 	addi	r3,r2,4
   92f8c:	e0ffee15 	stw	r3,-72(fp)
   92f90:	e0ffed17 	ldw	r3,-76(fp)
   92f94:	19000104 	addi	r4,r3,4
   92f98:	e13fed15 	stw	r4,-76(fp)
   92f9c:	18c00017 	ldw	r3,0(r3)
   92fa0:	10c00015 	stw	r3,0(r2)
   92fa4:	e0bfee17 	ldw	r2,-72(fp)
   92fa8:	10c00104 	addi	r3,r2,4
   92fac:	e0ffee15 	stw	r3,-72(fp)
   92fb0:	e0ffed17 	ldw	r3,-76(fp)
   92fb4:	19000104 	addi	r4,r3,4
   92fb8:	e13fed15 	stw	r4,-76(fp)
   92fbc:	18c00017 	ldw	r3,0(r3)
   92fc0:	10c00015 	stw	r3,0(r2)
   92fc4:	e0bfee17 	ldw	r2,-72(fp)
   92fc8:	10c00104 	addi	r3,r2,4
   92fcc:	e0ffee15 	stw	r3,-72(fp)
   92fd0:	e0ffed17 	ldw	r3,-76(fp)
   92fd4:	19000104 	addi	r4,r3,4
   92fd8:	e13fed15 	stw	r4,-76(fp)
   92fdc:	18c00017 	ldw	r3,0(r3)
   92fe0:	10c00015 	stw	r3,0(r2)
   92fe4:	e0bfee17 	ldw	r2,-72(fp)
   92fe8:	10c00104 	addi	r3,r2,4
   92fec:	e0ffee15 	stw	r3,-72(fp)
   92ff0:	e0ffed17 	ldw	r3,-76(fp)
   92ff4:	19000104 	addi	r4,r3,4
   92ff8:	e13fed15 	stw	r4,-76(fp)
   92ffc:	18c00017 	ldw	r3,0(r3)
   93000:	10c00015 	stw	r3,0(r2)
   93004:	e0bfed17 	ldw	r2,-76(fp)
   93008:	10c00017 	ldw	r3,0(r2)
   9300c:	e0bfee17 	ldw	r2,-72(fp)
   93010:	10c00015 	stw	r3,0(r2)
   93014:	00000406 	br	93028 <_realloc_r+0xadc>
   93018:	e1bffa17 	ldw	r6,-24(fp)
   9301c:	e17ffe17 	ldw	r5,-8(fp)
   93020:	e13ff617 	ldw	r4,-40(fp)
   93024:	00908240 	call	90824 <memmove>
    fREe(RCALL oldmem);
   93028:	e17ffe17 	ldw	r5,-8(fp)
   9302c:	e13ffd17 	ldw	r4,-12(fp)
   93030:	0085c480 	call	85c48 <_free_r>
    MALLOC_UNLOCK;
   93034:	e13ffd17 	ldw	r4,-12(fp)
   93038:	009e50c0 	call	9e50c <__malloc_unlock>
    return newmem;
   9303c:	e0bff617 	ldw	r2,-40(fp)
   93040:	00003906 	br	93128 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
   93044:	e0ffe417 	ldw	r3,-112(fp)
   93048:	e0bff117 	ldw	r2,-60(fp)
   9304c:	1885c83a 	sub	r2,r3,r2
   93050:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
   93054:	e0bffb17 	ldw	r2,-20(fp)
   93058:	10800430 	cmpltui	r2,r2,16
   9305c:	10001e1e 	bne	r2,zero,930d8 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
   93060:	e0ffe317 	ldw	r3,-116(fp)
   93064:	e0bff117 	ldw	r2,-60(fp)
   93068:	1885883a 	add	r2,r3,r2
   9306c:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
   93070:	e0bfe317 	ldw	r2,-116(fp)
   93074:	10800117 	ldw	r2,4(r2)
   93078:	10c0004c 	andi	r3,r2,1
   9307c:	e0bff117 	ldw	r2,-60(fp)
   93080:	1886b03a 	or	r3,r3,r2
   93084:	e0bfe317 	ldw	r2,-116(fp)
   93088:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
   9308c:	e0bffb17 	ldw	r2,-20(fp)
   93090:	10c00054 	ori	r3,r2,1
   93094:	e0bffc17 	ldw	r2,-16(fp)
   93098:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
   9309c:	e0fffc17 	ldw	r3,-16(fp)
   930a0:	e0bffb17 	ldw	r2,-20(fp)
   930a4:	1885883a 	add	r2,r3,r2
   930a8:	e13ffc17 	ldw	r4,-16(fp)
   930ac:	e0fffb17 	ldw	r3,-20(fp)
   930b0:	20c7883a 	add	r3,r4,r3
   930b4:	18c00117 	ldw	r3,4(r3)
   930b8:	18c00054 	ori	r3,r3,1
   930bc:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   930c0:	e0bffc17 	ldw	r2,-16(fp)
   930c4:	10800204 	addi	r2,r2,8
   930c8:	100b883a 	mov	r5,r2
   930cc:	e13ffd17 	ldw	r4,-12(fp)
   930d0:	0085c480 	call	85c48 <_free_r>
   930d4:	00001006 	br	93118 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
   930d8:	e0bfe317 	ldw	r2,-116(fp)
   930dc:	10800117 	ldw	r2,4(r2)
   930e0:	10c0004c 	andi	r3,r2,1
   930e4:	e0bfe417 	ldw	r2,-112(fp)
   930e8:	1886b03a 	or	r3,r3,r2
   930ec:	e0bfe317 	ldw	r2,-116(fp)
   930f0:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
   930f4:	e0ffe317 	ldw	r3,-116(fp)
   930f8:	e0bfe417 	ldw	r2,-112(fp)
   930fc:	1885883a 	add	r2,r3,r2
   93100:	e13fe317 	ldw	r4,-116(fp)
   93104:	e0ffe417 	ldw	r3,-112(fp)
   93108:	20c7883a 	add	r3,r4,r3
   9310c:	18c00117 	ldw	r3,4(r3)
   93110:	18c00054 	ori	r3,r3,1
   93114:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
   93118:	e13ffd17 	ldw	r4,-12(fp)
   9311c:	009e50c0 	call	9e50c <__malloc_unlock>
  return chunk2mem(newp);
   93120:	e0bfe317 	ldw	r2,-116(fp)
   93124:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   93128:	e037883a 	mov	sp,fp
   9312c:	dfc00117 	ldw	ra,4(sp)
   93130:	df000017 	ldw	fp,0(sp)
   93134:	dec00204 	addi	sp,sp,8
   93138:	f800283a 	ret

0009313c <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
   9313c:	defff904 	addi	sp,sp,-28
   93140:	df000615 	stw	fp,24(sp)
   93144:	df000604 	addi	fp,sp,24
   93148:	e13ffe15 	stw	r4,-8(fp)
   9314c:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
   93150:	e0bffe17 	ldw	r2,-8(fp)
   93154:	e0bffc15 	stw	r2,-16(fp)
   93158:	e0bfff17 	ldw	r2,-4(fp)
   9315c:	e0bffd15 	stw	r2,-12(fp)
   93160:	e0bffd17 	ldw	r2,-12(fp)
   93164:	e0bffa15 	stw	r2,-24(fp)
   93168:	e0bffc17 	ldw	r2,-16(fp)
   9316c:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
   93170:	e0bffa17 	ldw	r2,-24(fp)
   93174:	1000021e 	bne	r2,zero,93180 <__fpclassifyd+0x44>
   93178:	e0bffb17 	ldw	r2,-20(fp)
   9317c:	10000526 	beq	r2,zero,93194 <__fpclassifyd+0x58>
   93180:	e0fffa17 	ldw	r3,-24(fp)
   93184:	00a00034 	movhi	r2,32768
   93188:	1880041e 	bne	r3,r2,9319c <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
   9318c:	e0bffb17 	ldw	r2,-20(fp)
   93190:	1000021e 	bne	r2,zero,9319c <__fpclassifyd+0x60>
    return FP_ZERO;
   93194:	00800084 	movi	r2,2
   93198:	00002506 	br	93230 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
   9319c:	e0fffa17 	ldw	r3,-24(fp)
   931a0:	00800434 	movhi	r2,16
   931a4:	18800336 	bltu	r3,r2,931b4 <__fpclassifyd+0x78>
   931a8:	e0fffa17 	ldw	r3,-24(fp)
   931ac:	009ffc34 	movhi	r2,32752
   931b0:	18800636 	bltu	r3,r2,931cc <__fpclassifyd+0x90>
   931b4:	e0fffa17 	ldw	r3,-24(fp)
   931b8:	00a00434 	movhi	r2,32784
   931bc:	18800536 	bltu	r3,r2,931d4 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
   931c0:	e0fffa17 	ldw	r3,-24(fp)
   931c4:	00bffc34 	movhi	r2,65520
   931c8:	1880022e 	bgeu	r3,r2,931d4 <__fpclassifyd+0x98>
    return FP_NORMAL;
   931cc:	00800104 	movi	r2,4
   931d0:	00001706 	br	93230 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   931d4:	e0fffa17 	ldw	r3,-24(fp)
   931d8:	00800434 	movhi	r2,16
   931dc:	18800536 	bltu	r3,r2,931f4 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   931e0:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   931e4:	1000050e 	bge	r2,zero,931fc <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   931e8:	e0fffa17 	ldw	r3,-24(fp)
   931ec:	00a00434 	movhi	r2,32784
   931f0:	1880022e 	bgeu	r3,r2,931fc <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
   931f4:	008000c4 	movi	r2,3
   931f8:	00000d06 	br	93230 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
   931fc:	e0fffa17 	ldw	r3,-24(fp)
   93200:	009ffc34 	movhi	r2,32752
   93204:	1880021e 	bne	r3,r2,93210 <__fpclassifyd+0xd4>
   93208:	e0bffb17 	ldw	r2,-20(fp)
   9320c:	10000526 	beq	r2,zero,93224 <__fpclassifyd+0xe8>
   93210:	e0fffa17 	ldw	r3,-24(fp)
   93214:	00bffc34 	movhi	r2,65520
   93218:	1880041e 	bne	r3,r2,9322c <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
   9321c:	e0bffb17 	ldw	r2,-20(fp)
   93220:	1000021e 	bne	r2,zero,9322c <__fpclassifyd+0xf0>
    return FP_INFINITE;
   93224:	00800044 	movi	r2,1
   93228:	00000106 	br	93230 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
   9322c:	0005883a 	mov	r2,zero
}
   93230:	e037883a 	mov	sp,fp
   93234:	df000017 	ldw	fp,0(sp)
   93238:	dec00104 	addi	sp,sp,4
   9323c:	f800283a 	ret

00093240 <__sccl>:

u_char *
_DEFUN(__sccl, (tab, fmt),
       register char *tab _AND
       register u_char *fmt)
{
   93240:	defffc04 	addi	sp,sp,-16
   93244:	df000315 	stw	fp,12(sp)
   93248:	dc800215 	stw	r18,8(sp)
   9324c:	dc400115 	stw	r17,4(sp)
   93250:	dc000015 	stw	r16,0(sp)
   93254:	df000304 	addi	fp,sp,12
   93258:	2007883a 	mov	r3,r4
   9325c:	2805883a 	mov	r2,r5
  register int c, n, v;

  /* first `clear' the whole table */
  c = *fmt++;			/* first char hat => negated scanset */
   93260:	1009883a 	mov	r4,r2
   93264:	20800044 	addi	r2,r4,1
   93268:	21000003 	ldbu	r4,0(r4)
   9326c:	24403fcc 	andi	r17,r4,255
  if (c == '^')
   93270:	89001798 	cmpnei	r4,r17,94
   93274:	2000061e 	bne	r4,zero,93290 <__sccl+0x50>
    {
      v = 1;			/* default => accept */
   93278:	04800044 	movi	r18,1
      c = *fmt++;		/* get new first char */
   9327c:	1009883a 	mov	r4,r2
   93280:	20800044 	addi	r2,r4,1
   93284:	21000003 	ldbu	r4,0(r4)
   93288:	24403fcc 	andi	r17,r4,255
   9328c:	00000106 	br	93294 <__sccl+0x54>
    }
  else
    v = 0;			/* default => reject */
   93290:	0025883a 	mov	r18,zero
  /* should probably use memset here */
  for (n = 0; n < 256; n++)
   93294:	0021883a 	mov	r16,zero
   93298:	00000506 	br	932b0 <__sccl+0x70>
    tab[n] = v;
   9329c:	8009883a 	mov	r4,r16
   932a0:	1909883a 	add	r4,r3,r4
   932a4:	900b883a 	mov	r5,r18
   932a8:	21400005 	stb	r5,0(r4)
      c = *fmt++;		/* get new first char */
    }
  else
    v = 0;			/* default => reject */
  /* should probably use memset here */
  for (n = 0; n < 256; n++)
   932ac:	84000044 	addi	r16,r16,1
   932b0:	81004010 	cmplti	r4,r16,256
   932b4:	203ff91e 	bne	r4,zero,9329c <__alt_data_end+0xfffe129c>
    tab[n] = v;
  if (c == 0)
   932b8:	8800021e 	bne	r17,zero,932c4 <__sccl+0x84>
    return fmt - 1;		/* format ended before closing ] */
   932bc:	10bfffc4 	addi	r2,r2,-1
   932c0:	00002306 	br	93350 <__sccl+0x110>
   *
   * The first character may be ']' (or '-') without being special; the
   * last character may be '-'.
   */

  v = 1 - v;
   932c4:	01000044 	movi	r4,1
   932c8:	24a5c83a 	sub	r18,r4,r18
  for (;;)
    {
      tab[c] = v;		/* take character c */
   932cc:	8809883a 	mov	r4,r17
   932d0:	1909883a 	add	r4,r3,r4
   932d4:	900b883a 	mov	r5,r18
   932d8:	21400005 	stb	r5,0(r4)
    doswitch:
      n = *fmt++;		/* and examine the next */
   932dc:	1009883a 	mov	r4,r2
   932e0:	20800044 	addi	r2,r4,1
   932e4:	21000003 	ldbu	r4,0(r4)
   932e8:	24003fcc 	andi	r16,r4,255
      switch (n)
   932ec:	81000b60 	cmpeqi	r4,r16,45
   932f0:	2000051e 	bne	r4,zero,93308 <__sccl+0xc8>
   932f4:	81001760 	cmpeqi	r4,r16,93
   932f8:	2000151e 	bne	r4,zero,93350 <__sccl+0x110>
   932fc:	8000111e 	bne	r16,zero,93344 <__sccl+0x104>
	{

	case 0:		/* format ended too soon */
	  return fmt - 1;
   93300:	10bfffc4 	addi	r2,r2,-1
   93304:	00001206 	br	93350 <__sccl+0x110>
	   * For compatibility, the `-' is not considerd to define a range if
	   * the character following it is either a close bracket (required by
	   * ANSI) or is not numerically greater than the character we just
	   * stored in the table (c).
	   */
	  n = *fmt;
   93308:	11000003 	ldbu	r4,0(r2)
   9330c:	24003fcc 	andi	r16,r4,255
	  if (n == ']' || n < c)
   93310:	81001760 	cmpeqi	r4,r16,93
   93314:	2000011e 	bne	r4,zero,9331c <__sccl+0xdc>
   93318:	8440020e 	bge	r16,r17,93324 <__sccl+0xe4>
	    {
	      c = '-';
   9331c:	04400b44 	movi	r17,45
	      break;		/* resume the for(;;) */
   93320:	00000a06 	br	9334c <__sccl+0x10c>
	    }
	  fmt++;
   93324:	10800044 	addi	r2,r2,1
	  do
	    {			/* fill in the range */
	      tab[++c] = v;
   93328:	8c400044 	addi	r17,r17,1
   9332c:	8809883a 	mov	r4,r17
   93330:	1909883a 	add	r4,r3,r4
   93334:	900b883a 	mov	r5,r18
   93338:	21400005 	stb	r5,0(r4)
	    }
	  while (c < n);
   9333c:	8c3ffa16 	blt	r17,r16,93328 <__alt_data_end+0xfffe1328>
	  /*
	   * Alas, the V7 Unix scanf also treats formats such
	   * as [a-c-e] as `the letters a through e'. This too
	   * is permitted by the standard....
	   */
	  goto doswitch;
   93340:	003fe606 	br	932dc <__alt_data_end+0xfffe12dc>

	case ']':		/* end of scanset */
	  return fmt;

	default:		/* just another character */
	  c = n;
   93344:	8023883a 	mov	r17,r16
	  break;
   93348:	0001883a 	nop
	}
    }
   9334c:	003fdf06 	br	932cc <__alt_data_end+0xfffe12cc>
  /* NOTREACHED */
}
   93350:	e6fffd04 	addi	sp,fp,-12
   93354:	df000317 	ldw	fp,12(sp)
   93358:	dc800217 	ldw	r18,8(sp)
   9335c:	dc400117 	ldw	r17,4(sp)
   93360:	dc000017 	ldw	r16,0(sp)
   93364:	dec00404 	addi	sp,sp,16
   93368:	f800283a 	ret

0009336c <nanf>:
 */

#include "fdlibm.h"

	float nanf(const char *unused)
{
   9336c:	defffd04 	addi	sp,sp,-12
   93370:	df000215 	stw	fp,8(sp)
   93374:	df000204 	addi	fp,sp,8
   93378:	e13fff15 	stw	r4,-4(fp)
	float x;

#if __GNUC_PREREQ (3, 3)
	x = __builtin_nanf("");
   9337c:	009ff034 	movhi	r2,32704
   93380:	e0bffe15 	stw	r2,-8(fp)
#else
	SET_FLOAT_WORD(x,0x7fc00000);
#endif
	return x;
   93384:	e0bffe17 	ldw	r2,-8(fp)
   93388:	1007883a 	mov	r3,r2
}
   9338c:	1805883a 	mov	r2,r3
   93390:	e037883a 	mov	sp,fp
   93394:	df000017 	ldw	fp,0(sp)
   93398:	dec00104 	addi	sp,sp,4
   9339c:	f800283a 	ret

000933a0 <_sprintf_r>:
           struct _reent *ptr;
           char *__restrict str;
           _CONST char *__restrict fmt;
           va_dcl
#endif
{
   933a0:	deffde04 	addi	sp,sp,-136
   933a4:	dfc02015 	stw	ra,128(sp)
   933a8:	df001f15 	stw	fp,124(sp)
   933ac:	df001f04 	addi	fp,sp,124
   933b0:	e13ffd15 	stw	r4,-12(fp)
   933b4:	e17ffe15 	stw	r5,-8(fp)
   933b8:	e1bfff15 	stw	r6,-4(fp)
   933bc:	e1c00215 	stw	r7,8(fp)
#else						/* AlteraSpecific */
  FILE f;
#endif						/* AlteraSpecific */


  f._flags = __SWR | __SSTR;
   933c0:	00808204 	movi	r2,520
   933c4:	e0bfe60d 	sth	r2,-104(fp)
  f._bf._base = f._p = (unsigned char *) str;
   933c8:	e0bffe17 	ldw	r2,-8(fp)
   933cc:	e0bfe315 	stw	r2,-116(fp)
   933d0:	e0bfe317 	ldw	r2,-116(fp)
   933d4:	e0bfe715 	stw	r2,-100(fp)
  f._bf._size = f._w = INT_MAX;
   933d8:	00a00034 	movhi	r2,32768
   933dc:	10bfffc4 	addi	r2,r2,-1
   933e0:	e0bfe515 	stw	r2,-108(fp)
   933e4:	e0bfe517 	ldw	r2,-108(fp)
   933e8:	e0bfe815 	stw	r2,-96(fp)
  f._file = -1;  /* No file. */
   933ec:	00bfffc4 	movi	r2,-1
   933f0:	e0bfe68d 	sth	r2,-102(fp)
#ifdef _HAVE_STDC
  va_start (ap, fmt);
   933f4:	e0800204 	addi	r2,fp,8
   933f8:	e0bfe215 	stw	r2,-120(fp)
  _FILE_INIT_STR_WRITE (&f);								/* AlteraSpecific */
/*ret =    _vfprintf_r          (ptr,         &f, fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret =  ___vfprintf_internal_r (ptr, (FILE *)&f, fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _svfprintf_r          (ptr,         &f, fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _svfprintf_r          (ptr, (FILE *)&f, fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___svfprintf_internal_r (ptr, (FILE *)&f, fmt, ap);		/* try2 */	/* AlteraSpecific */
   933fc:	e0ffe217 	ldw	r3,-120(fp)
   93400:	e0bfe304 	addi	r2,fp,-116
   93404:	180f883a 	mov	r7,r3
   93408:	e1bfff17 	ldw	r6,-4(fp)
   9340c:	100b883a 	mov	r5,r2
   93410:	e13ffd17 	ldw	r4,-12(fp)
   93414:	00964f80 	call	964f8 <___svfprintf_internal_r>
   93418:	e0bfe115 	stw	r2,-124(fp)
  va_end (ap);
  *f._p = '\0';	/* terminate the string */
   9341c:	e0bfe317 	ldw	r2,-116(fp)
   93420:	10000005 	stb	zero,0(r2)
  return (ret);
   93424:	e0bfe117 	ldw	r2,-124(fp)
}
   93428:	e037883a 	mov	sp,fp
   9342c:	dfc00117 	ldw	ra,4(sp)
   93430:	df000017 	ldw	fp,0(sp)
   93434:	dec00304 	addi	sp,sp,12
   93438:	f800283a 	ret

0009343c <sprintf>:
sprintf(str, fmt, va_alist)
        char *str;
        _CONST char *fmt;
        va_dcl
#endif
{
   9343c:	deffde04 	addi	sp,sp,-136
   93440:	dfc01f15 	stw	ra,124(sp)
   93444:	df001e15 	stw	fp,120(sp)
   93448:	df001e04 	addi	fp,sp,120
   9344c:	e13ffe15 	stw	r4,-8(fp)
   93450:	e17fff15 	stw	r5,-4(fp)
   93454:	e1800215 	stw	r6,8(fp)
   93458:	e1c00315 	stw	r7,12(fp)
  struct __sFILE_small_str f;
#else						/* AlteraSpecific */
  FILE f;
#endif						/* AlteraSpecific */

  f._flags = __SWR | __SSTR;
   9345c:	00808204 	movi	r2,520
   93460:	e0bfe70d 	sth	r2,-100(fp)
  f._bf._base = f._p = (unsigned char *) str;
   93464:	e0bffe17 	ldw	r2,-8(fp)
   93468:	e0bfe415 	stw	r2,-112(fp)
   9346c:	e0bfe417 	ldw	r2,-112(fp)
   93470:	e0bfe815 	stw	r2,-96(fp)
  f._bf._size = f._w = INT_MAX;
   93474:	00a00034 	movhi	r2,32768
   93478:	10bfffc4 	addi	r2,r2,-1
   9347c:	e0bfe615 	stw	r2,-104(fp)
   93480:	e0bfe617 	ldw	r2,-104(fp)
   93484:	e0bfe915 	stw	r2,-92(fp)
  f._file = -1;  /* No file. */
   93488:	00bfffc4 	movi	r2,-1
   9348c:	e0bfe78d 	sth	r2,-98(fp)
#ifdef _HAVE_STDC
  va_start (ap, fmt);
   93490:	e0800204 	addi	r2,fp,8
   93494:	e0bfe315 	stw	r2,-116(fp)
  _FILE_INIT_STR_WRITE (&f);								/* AlteraSpecific */
/*ret =    _vfprintf_r          (_REENT,         &f, fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret =  ___vfprintf_internal_r (_REENT, (FILE *)&f, fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _svfprintf_r          (_REENT,         &f, fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _svfprintf_r          (_REENT, (FILE *)&f, fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___svfprintf_internal_r (_REENT, (FILE *)&f, fmt, ap);		/* try2 */	/* AlteraSpecific */
   93498:	d0a00417 	ldw	r2,-32752(gp)
   9349c:	e13fe317 	ldw	r4,-116(fp)
   934a0:	e0ffe404 	addi	r3,fp,-112
   934a4:	200f883a 	mov	r7,r4
   934a8:	e1bfff17 	ldw	r6,-4(fp)
   934ac:	180b883a 	mov	r5,r3
   934b0:	1009883a 	mov	r4,r2
   934b4:	00964f80 	call	964f8 <___svfprintf_internal_r>
   934b8:	e0bfe215 	stw	r2,-120(fp)
  va_end (ap);
  *f._p = '\0';	/* terminate the string */
   934bc:	e0bfe417 	ldw	r2,-112(fp)
   934c0:	10000005 	stb	zero,0(r2)
  return (ret);
   934c4:	e0bfe217 	ldw	r2,-120(fp)
}
   934c8:	e037883a 	mov	sp,fp
   934cc:	dfc00117 	ldw	ra,4(sp)
   934d0:	df000017 	ldw	fp,0(sp)
   934d4:	dec00404 	addi	sp,sp,16
   934d8:	f800283a 	ret

000934dc <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
   934dc:	defffb04 	addi	sp,sp,-20
   934e0:	df000415 	stw	fp,16(sp)
   934e4:	df000404 	addi	fp,sp,16
   934e8:	e13ffe15 	stw	r4,-8(fp)
   934ec:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
   934f0:	e0fffe17 	ldw	r3,-8(fp)
   934f4:	e0bfff17 	ldw	r2,-4(fp)
   934f8:	1884b03a 	or	r2,r3,r2
   934fc:	108000cc 	andi	r2,r2,3
   93500:	10002a1e 	bne	r2,zero,935ac <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
   93504:	e0bffe17 	ldw	r2,-8(fp)
   93508:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
   9350c:	e0bfff17 	ldw	r2,-4(fp)
   93510:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
   93514:	00001506 	br	9356c <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
   93518:	e0bffc17 	ldw	r2,-16(fp)
   9351c:	10c00017 	ldw	r3,0(r2)
   93520:	00bfbff4 	movhi	r2,65279
   93524:	10bfbfc4 	addi	r2,r2,-257
   93528:	1887883a 	add	r3,r3,r2
   9352c:	e0bffc17 	ldw	r2,-16(fp)
   93530:	10800017 	ldw	r2,0(r2)
   93534:	0084303a 	nor	r2,zero,r2
   93538:	1886703a 	and	r3,r3,r2
   9353c:	00a02074 	movhi	r2,32897
   93540:	10a02004 	addi	r2,r2,-32640
   93544:	1884703a 	and	r2,r3,r2
   93548:	10000226 	beq	r2,zero,93554 <strcmp+0x78>
	    return 0;
   9354c:	0005883a 	mov	r2,zero
   93550:	00002e06 	br	9360c <strcmp+0x130>

          a1++;
   93554:	e0bffc17 	ldw	r2,-16(fp)
   93558:	10800104 	addi	r2,r2,4
   9355c:	e0bffc15 	stw	r2,-16(fp)
          a2++;
   93560:	e0bffd17 	ldw	r2,-12(fp)
   93564:	10800104 	addi	r2,r2,4
   93568:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
   9356c:	e0bffc17 	ldw	r2,-16(fp)
   93570:	10c00017 	ldw	r3,0(r2)
   93574:	e0bffd17 	ldw	r2,-12(fp)
   93578:	10800017 	ldw	r2,0(r2)
   9357c:	18bfe626 	beq	r3,r2,93518 <__alt_data_end+0xfffe1518>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
   93580:	e0bffc17 	ldw	r2,-16(fp)
   93584:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
   93588:	e0bffd17 	ldw	r2,-12(fp)
   9358c:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
   93590:	00000606 	br	935ac <strcmp+0xd0>
    {
      s1++;
   93594:	e0bffe17 	ldw	r2,-8(fp)
   93598:	10800044 	addi	r2,r2,1
   9359c:	e0bffe15 	stw	r2,-8(fp)
      s2++;
   935a0:	e0bfff17 	ldw	r2,-4(fp)
   935a4:	10800044 	addi	r2,r2,1
   935a8:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
   935ac:	e0bffe17 	ldw	r2,-8(fp)
   935b0:	10800003 	ldbu	r2,0(r2)
   935b4:	10803fcc 	andi	r2,r2,255
   935b8:	1080201c 	xori	r2,r2,128
   935bc:	10bfe004 	addi	r2,r2,-128
   935c0:	10000b26 	beq	r2,zero,935f0 <strcmp+0x114>
   935c4:	e0bffe17 	ldw	r2,-8(fp)
   935c8:	10c00003 	ldbu	r3,0(r2)
   935cc:	e0bfff17 	ldw	r2,-4(fp)
   935d0:	10800003 	ldbu	r2,0(r2)
   935d4:	18c03fcc 	andi	r3,r3,255
   935d8:	18c0201c 	xori	r3,r3,128
   935dc:	18ffe004 	addi	r3,r3,-128
   935e0:	10803fcc 	andi	r2,r2,255
   935e4:	1080201c 	xori	r2,r2,128
   935e8:	10bfe004 	addi	r2,r2,-128
   935ec:	18bfe926 	beq	r3,r2,93594 <__alt_data_end+0xfffe1594>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
   935f0:	e0bffe17 	ldw	r2,-8(fp)
   935f4:	10800003 	ldbu	r2,0(r2)
   935f8:	10c03fcc 	andi	r3,r2,255
   935fc:	e0bfff17 	ldw	r2,-4(fp)
   93600:	10800003 	ldbu	r2,0(r2)
   93604:	10803fcc 	andi	r2,r2,255
   93608:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   9360c:	e037883a 	mov	sp,fp
   93610:	df000017 	ldw	fp,0(sp)
   93614:	dec00104 	addi	sp,sp,4
   93618:	f800283a 	ret

0009361c <sulp>:
#ifdef Avoid_Underflow /*{*/
 static double
_DEFUN (sulp, (x, scale),
       	U x _AND
	int scale)
{
   9361c:	defff604 	addi	sp,sp,-40
   93620:	dfc00915 	stw	ra,36(sp)
   93624:	df000815 	stw	fp,32(sp)
   93628:	df000804 	addi	fp,sp,32
   9362c:	e13ffd15 	stw	r4,-12(fp)
   93630:	e17ffe15 	stw	r5,-8(fp)
   93634:	e1bfff15 	stw	r6,-4(fp)
        U u;
        double rv;
        int i;

        rv = ulp(dval(x));
   93638:	e0bffd17 	ldw	r2,-12(fp)
   9363c:	e0fffe17 	ldw	r3,-8(fp)
   93640:	1009883a 	mov	r4,r2
   93644:	180b883a 	mov	r5,r3
   93648:	0091bfc0 	call	91bfc <__ulp>
   9364c:	e0bff815 	stw	r2,-32(fp)
   93650:	e0fff915 	stw	r3,-28(fp)
        if (!scale || (i = 2*P + 1 - ((dword0(x) & Exp_mask) >> Exp_shift)) <= 0)
   93654:	e0bfff17 	ldw	r2,-4(fp)
   93658:	10000826 	beq	r2,zero,9367c <sulp+0x60>
   9365c:	e0bffe17 	ldw	r2,-8(fp)
   93660:	109ffc2c 	andhi	r2,r2,32752
   93664:	1004d53a 	srli	r2,r2,20
   93668:	00c01ac4 	movi	r3,107
   9366c:	1885c83a 	sub	r2,r3,r2
   93670:	e0bffa15 	stw	r2,-24(fp)
   93674:	e0bffa17 	ldw	r2,-24(fp)
   93678:	00800316 	blt	zero,r2,93688 <sulp+0x6c>
                return rv; /* Is there an example where i <= 0 ? */
   9367c:	e0bff817 	ldw	r2,-32(fp)
   93680:	e0fff917 	ldw	r3,-28(fp)
   93684:	00001206 	br	936d0 <sulp+0xb4>
        dword0(u) = Exp_1 + ((__int32_t)i << Exp_shift);
   93688:	e0bffa17 	ldw	r2,-24(fp)
   9368c:	1004953a 	slli	r2,r2,20
   93690:	1007883a 	mov	r3,r2
   93694:	008ffc34 	movhi	r2,16368
   93698:	1885883a 	add	r2,r3,r2
   9369c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
        dword1(u) = 0;
   936a0:	e03ffb15 	stw	zero,-20(fp)
#endif
        return rv * u.d;
   936a4:	e0bffb17 	ldw	r2,-20(fp)
   936a8:	e0fffc17 	ldw	r3,-16(fp)
   936ac:	e1bff817 	ldw	r6,-32(fp)
   936b0:	e1fff917 	ldw	r7,-28(fp)
   936b4:	1009883a 	mov	r4,r2
   936b8:	180b883a 	mov	r5,r3
   936bc:	00838140 	call	83814 <__muldf3>
   936c0:	1009883a 	mov	r4,r2
   936c4:	180b883a 	mov	r5,r3
   936c8:	2005883a 	mov	r2,r4
   936cc:	2807883a 	mov	r3,r5
   936d0:	1009883a 	mov	r4,r2
   936d4:	180b883a 	mov	r5,r3
        }
   936d8:	2005883a 	mov	r2,r4
   936dc:	2807883a 	mov	r3,r5
   936e0:	e037883a 	mov	sp,fp
   936e4:	dfc00117 	ldw	ra,4(sp)
   936e8:	df000017 	ldw	fp,0(sp)
   936ec:	dec00204 	addi	sp,sp,8
   936f0:	f800283a 	ret

000936f4 <ULtod>:
_DEFUN (ULtod, (L, bits, exp, k),
	__ULong *L _AND
	__ULong *bits _AND
	Long exp _AND
	int k)
{
   936f4:	defffb04 	addi	sp,sp,-20
   936f8:	df000415 	stw	fp,16(sp)
   936fc:	df000404 	addi	fp,sp,16
   93700:	e13ffc15 	stw	r4,-16(fp)
   93704:	e17ffd15 	stw	r5,-12(fp)
   93708:	e1bffe15 	stw	r6,-8(fp)
   9370c:	e1ffff15 	stw	r7,-4(fp)
	switch(k & STRTOG_Retmask) {
   93710:	e0bfff17 	ldw	r2,-4(fp)
   93714:	108001cc 	andi	r2,r2,7
   93718:	10c001e8 	cmpgeui	r3,r2,7
   9371c:	18003f1e 	bne	r3,zero,9381c <ULtod+0x128>
   93720:	100690ba 	slli	r3,r2,2
   93724:	00800274 	movhi	r2,9
   93728:	108dce04 	addi	r2,r2,14136
   9372c:	1885883a 	add	r2,r3,r2
   93730:	10800017 	ldw	r2,0(r2)
   93734:	1000683a 	jmp	r2
   93738:	00093754 	movui	zero,9437
   9373c:	00093798 	cmpnei	zero,zero,9438
   93740:	00093770 	cmpltui	zero,zero,9437
   93744:	000937e0 	cmpeqi	zero,zero,9439
   93748:	000937fc 	xorhi	zero,zero,9439
   9374c:	00093798 	cmpnei	zero,zero,9438
   93750:	00093754 	movui	zero,9437
	  case STRTOG_NoNumber:
	  case STRTOG_Zero:
		L[0] = L[1] = 0;
   93754:	e0bffc17 	ldw	r2,-16(fp)
   93758:	10800104 	addi	r2,r2,4
   9375c:	10000015 	stw	zero,0(r2)
   93760:	10c00017 	ldw	r3,0(r2)
   93764:	e0bffc17 	ldw	r2,-16(fp)
   93768:	10c00015 	stw	r3,0(r2)
		break;
   9376c:	00002b06 	br	9381c <ULtod+0x128>

	  case STRTOG_Denormal:
		L[_1] = bits[0];
   93770:	e0bffd17 	ldw	r2,-12(fp)
   93774:	10c00017 	ldw	r3,0(r2)
   93778:	e0bffc17 	ldw	r2,-16(fp)
   9377c:	10c00015 	stw	r3,0(r2)
		L[_0] = bits[1];
   93780:	e0bffc17 	ldw	r2,-16(fp)
   93784:	10800104 	addi	r2,r2,4
   93788:	e0fffd17 	ldw	r3,-12(fp)
   9378c:	18c00117 	ldw	r3,4(r3)
   93790:	10c00015 	stw	r3,0(r2)
		break;
   93794:	00002106 	br	9381c <ULtod+0x128>

	  case STRTOG_Normal:
	  case STRTOG_NaNbits:
		L[_1] = bits[0];
   93798:	e0bffd17 	ldw	r2,-12(fp)
   9379c:	10c00017 	ldw	r3,0(r2)
   937a0:	e0bffc17 	ldw	r2,-16(fp)
   937a4:	10c00015 	stw	r3,0(r2)
		L[_0] = (bits[1] & ~0x100000) | ((exp + 0x3ff + 52) << 20);
   937a8:	e0bffc17 	ldw	r2,-16(fp)
   937ac:	10c00104 	addi	r3,r2,4
   937b0:	e0bffd17 	ldw	r2,-12(fp)
   937b4:	10800104 	addi	r2,r2,4
   937b8:	11000017 	ldw	r4,0(r2)
   937bc:	00bffc34 	movhi	r2,65520
   937c0:	10bfffc4 	addi	r2,r2,-1
   937c4:	2084703a 	and	r2,r4,r2
   937c8:	e13ffe17 	ldw	r4,-8(fp)
   937cc:	21010cc4 	addi	r4,r4,1075
   937d0:	2008953a 	slli	r4,r4,20
   937d4:	1104b03a 	or	r2,r2,r4
   937d8:	18800015 	stw	r2,0(r3)
		break;
   937dc:	00000f06 	br	9381c <ULtod+0x128>

	  case STRTOG_Infinite:
		L[_0] = 0x7ff00000;
   937e0:	e0bffc17 	ldw	r2,-16(fp)
   937e4:	10800104 	addi	r2,r2,4
   937e8:	00dffc34 	movhi	r3,32752
   937ec:	10c00015 	stw	r3,0(r2)
		L[_1] = 0;
   937f0:	e0bffc17 	ldw	r2,-16(fp)
   937f4:	10000015 	stw	zero,0(r2)
		break;
   937f8:	00000806 	br	9381c <ULtod+0x128>

	  case STRTOG_NaN:
		L[_0] = 0x7fffffff;
   937fc:	e0bffc17 	ldw	r2,-16(fp)
   93800:	10c00104 	addi	r3,r2,4
   93804:	00a00034 	movhi	r2,32768
   93808:	10bfffc4 	addi	r2,r2,-1
   9380c:	18800015 	stw	r2,0(r3)
		L[_1] = (__ULong)-1;
   93810:	e0bffc17 	ldw	r2,-16(fp)
   93814:	00ffffc4 	movi	r3,-1
   93818:	10c00015 	stw	r3,0(r2)
	  }
	if (k & STRTOG_Neg)
   9381c:	e0bfff17 	ldw	r2,-4(fp)
   93820:	1080020c 	andi	r2,r2,8
   93824:	10000726 	beq	r2,zero,93844 <ULtod+0x150>
		L[_0] |= 0x80000000L;
   93828:	e0bffc17 	ldw	r2,-16(fp)
   9382c:	10800104 	addi	r2,r2,4
   93830:	e0fffc17 	ldw	r3,-16(fp)
   93834:	18c00104 	addi	r3,r3,4
   93838:	18c00017 	ldw	r3,0(r3)
   9383c:	18e00034 	orhi	r3,r3,32768
   93840:	10c00015 	stw	r3,0(r2)
}
   93844:	0001883a 	nop
   93848:	e037883a 	mov	sp,fp
   9384c:	df000017 	ldw	fp,0(sp)
   93850:	dec00104 	addi	sp,sp,4
   93854:	f800283a 	ret

00093858 <match>:
#ifdef INFNAN_CHECK
static int
_DEFUN (match, (sp, t),
	_CONST char **sp _AND
	char *t)
{
   93858:	defffa04 	addi	sp,sp,-24
   9385c:	df000515 	stw	fp,20(sp)
   93860:	df000504 	addi	fp,sp,20
   93864:	e13ffe15 	stw	r4,-8(fp)
   93868:	e17fff15 	stw	r5,-4(fp)
	int c, d;
	_CONST char *s = *sp;
   9386c:	e0bffe17 	ldw	r2,-8(fp)
   93870:	10800017 	ldw	r2,0(r2)
   93874:	e0bffc15 	stw	r2,-16(fp)

	while( (d = *t++) !=0) {
   93878:	00001706 	br	938d8 <match+0x80>
		if ((c = *++s) >= 'A' && c <= 'Z')
   9387c:	e0bffc17 	ldw	r2,-16(fp)
   93880:	10800044 	addi	r2,r2,1
   93884:	e0bffc15 	stw	r2,-16(fp)
   93888:	e0bffc17 	ldw	r2,-16(fp)
   9388c:	10800003 	ldbu	r2,0(r2)
   93890:	10803fcc 	andi	r2,r2,255
   93894:	1080201c 	xori	r2,r2,128
   93898:	10bfe004 	addi	r2,r2,-128
   9389c:	e0bffb15 	stw	r2,-20(fp)
   938a0:	e0bffb17 	ldw	r2,-20(fp)
   938a4:	10801050 	cmplti	r2,r2,65
   938a8:	1000061e 	bne	r2,zero,938c4 <match+0x6c>
   938ac:	e0bffb17 	ldw	r2,-20(fp)
   938b0:	108016c8 	cmpgei	r2,r2,91
   938b4:	1000031e 	bne	r2,zero,938c4 <match+0x6c>
			c += 'a' - 'A';
   938b8:	e0bffb17 	ldw	r2,-20(fp)
   938bc:	10800804 	addi	r2,r2,32
   938c0:	e0bffb15 	stw	r2,-20(fp)
		if (c != d)
   938c4:	e0fffb17 	ldw	r3,-20(fp)
   938c8:	e0bffd17 	ldw	r2,-12(fp)
   938cc:	18800226 	beq	r3,r2,938d8 <match+0x80>
			return 0;
   938d0:	0005883a 	mov	r2,zero
   938d4:	00000f06 	br	93914 <match+0xbc>
	char *t)
{
	int c, d;
	_CONST char *s = *sp;

	while( (d = *t++) !=0) {
   938d8:	e0bfff17 	ldw	r2,-4(fp)
   938dc:	10c00044 	addi	r3,r2,1
   938e0:	e0ffff15 	stw	r3,-4(fp)
   938e4:	10800003 	ldbu	r2,0(r2)
   938e8:	10803fcc 	andi	r2,r2,255
   938ec:	1080201c 	xori	r2,r2,128
   938f0:	10bfe004 	addi	r2,r2,-128
   938f4:	e0bffd15 	stw	r2,-12(fp)
   938f8:	e0bffd17 	ldw	r2,-12(fp)
   938fc:	103fdf1e 	bne	r2,zero,9387c <__alt_data_end+0xfffe187c>
		if ((c = *++s) >= 'A' && c <= 'Z')
			c += 'a' - 'A';
		if (c != d)
			return 0;
		}
	*sp = s + 1;
   93900:	e0bffc17 	ldw	r2,-16(fp)
   93904:	10c00044 	addi	r3,r2,1
   93908:	e0bffe17 	ldw	r2,-8(fp)
   9390c:	10c00015 	stw	r3,0(r2)
	return 1;
   93910:	00800044 	movi	r2,1
}
   93914:	e037883a 	mov	sp,fp
   93918:	df000017 	ldw	fp,0(sp)
   9391c:	dec00104 	addi	sp,sp,4
   93920:	f800283a 	ret

00093924 <_strtod_r>:
double
_DEFUN (_strtod_r, (ptr, s00, se),
	struct _reent *ptr _AND
	_CONST char *__restrict s00 _AND
	char **__restrict se)
{
   93924:	deffb504 	addi	sp,sp,-300
   93928:	dfc04a15 	stw	ra,296(sp)
   9392c:	df004915 	stw	fp,292(sp)
   93930:	ddc04815 	stw	r23,288(sp)
   93934:	dd804715 	stw	r22,284(sp)
   93938:	dd404615 	stw	r21,280(sp)
   9393c:	dd004515 	stw	r20,276(sp)
   93940:	dcc04415 	stw	r19,272(sp)
   93944:	dc804315 	stw	r18,268(sp)
   93948:	dc404215 	stw	r17,264(sp)
   9394c:	dc004115 	stw	r16,260(sp)
   93950:	df004904 	addi	fp,sp,292
   93954:	e13fed15 	stw	r4,-76(fp)
   93958:	e17fee15 	stw	r5,-72(fp)
   9395c:	e1bfef15 	stw	r6,-68(fp)
	_CONST char *s, *s0, *s1;
	double aadj, adj;
	U aadj1, rv, rv0;
	Long L;
	__ULong y, z;
	_Bigint *bb = NULL, *bb1, *bd = NULL, *bd0, *bs = NULL, *delta = NULL;
   93960:	e03fe715 	stw	zero,-100(fp)
   93964:	e03fd215 	stw	zero,-184(fp)
   93968:	e03fd415 	stw	zero,-176(fp)
   9396c:	e03fd515 	stw	zero,-172(fp)
#endif
#ifdef Honor_FLT_ROUNDS
	int rounding;
#endif

	delta = bs = bd = NULL;
   93970:	e03fd215 	stw	zero,-184(fp)
   93974:	e0bfd217 	ldw	r2,-184(fp)
   93978:	e0bfd415 	stw	r2,-176(fp)
   9397c:	e0bfd417 	ldw	r2,-176(fp)
   93980:	e0bfd515 	stw	r2,-172(fp)
	sign = nz0 = nz = decpt = 0;
   93984:	e03fc015 	stw	zero,-256(fp)
   93988:	e0bfc017 	ldw	r2,-256(fp)
   9398c:	e0bfc915 	stw	r2,-220(fp)
   93990:	e0bfc917 	ldw	r2,-220(fp)
   93994:	e0bfca15 	stw	r2,-216(fp)
   93998:	e0bfca17 	ldw	r2,-216(fp)
   9399c:	e0bfcb15 	stw	r2,-212(fp)
	dval(rv) = 0.;
   939a0:	e03fe315 	stw	zero,-116(fp)
   939a4:	e03fe415 	stw	zero,-112(fp)
	for(s = s00;;s++) switch(*s) {
   939a8:	e0bfee17 	ldw	r2,-72(fp)
   939ac:	e0bfe015 	stw	r2,-128(fp)
   939b0:	e0bfe017 	ldw	r2,-128(fp)
   939b4:	10800003 	ldbu	r2,0(r2)
   939b8:	10803fcc 	andi	r2,r2,255
   939bc:	1080201c 	xori	r2,r2,128
   939c0:	10bfe004 	addi	r2,r2,-128
   939c4:	10c00ba8 	cmpgeui	r3,r2,46
   939c8:	1800441e 	bne	r3,zero,93adc <_strtod_r+0x1b8>
   939cc:	100690ba 	slli	r3,r2,2
   939d0:	00800274 	movhi	r2,9
   939d4:	108e7904 	addi	r2,r2,14820
   939d8:	1885883a 	add	r2,r3,r2
   939dc:	10800017 	ldw	r2,0(r2)
   939e0:	1000683a 	jmp	r2
   939e4:	0009424c 	andi	zero,zero,9481
   939e8:	00093adc 	xori	zero,zero,9451
   939ec:	00093adc 	xori	zero,zero,9451
   939f0:	00093adc 	xori	zero,zero,9451
   939f4:	00093adc 	xori	zero,zero,9451
   939f8:	00093adc 	xori	zero,zero,9451
   939fc:	00093adc 	xori	zero,zero,9451
   93a00:	00093adc 	xori	zero,zero,9451
   93a04:	00093adc 	xori	zero,zero,9451
   93a08:	00093acc 	andi	zero,zero,9451
   93a0c:	00093acc 	andi	zero,zero,9451
   93a10:	00093acc 	andi	zero,zero,9451
   93a14:	00093acc 	andi	zero,zero,9451
   93a18:	00093acc 	andi	zero,zero,9451
   93a1c:	00093adc 	xori	zero,zero,9451
   93a20:	00093adc 	xori	zero,zero,9451
   93a24:	00093adc 	xori	zero,zero,9451
   93a28:	00093adc 	xori	zero,zero,9451
   93a2c:	00093adc 	xori	zero,zero,9451
   93a30:	00093adc 	xori	zero,zero,9451
   93a34:	00093adc 	xori	zero,zero,9451
   93a38:	00093adc 	xori	zero,zero,9451
   93a3c:	00093adc 	xori	zero,zero,9451
   93a40:	00093adc 	xori	zero,zero,9451
   93a44:	00093adc 	xori	zero,zero,9451
   93a48:	00093adc 	xori	zero,zero,9451
   93a4c:	00093adc 	xori	zero,zero,9451
   93a50:	00093adc 	xori	zero,zero,9451
   93a54:	00093adc 	xori	zero,zero,9451
   93a58:	00093adc 	xori	zero,zero,9451
   93a5c:	00093adc 	xori	zero,zero,9451
   93a60:	00093adc 	xori	zero,zero,9451
   93a64:	00093acc 	andi	zero,zero,9451
   93a68:	00093adc 	xori	zero,zero,9451
   93a6c:	00093adc 	xori	zero,zero,9451
   93a70:	00093adc 	xori	zero,zero,9451
   93a74:	00093adc 	xori	zero,zero,9451
   93a78:	00093adc 	xori	zero,zero,9451
   93a7c:	00093adc 	xori	zero,zero,9451
   93a80:	00093adc 	xori	zero,zero,9451
   93a84:	00093adc 	xori	zero,zero,9451
   93a88:	00093adc 	xori	zero,zero,9451
   93a8c:	00093adc 	xori	zero,zero,9451
   93a90:	00093aa4 	muli	zero,zero,9450
   93a94:	00093adc 	xori	zero,zero,9451
   93a98:	00093a9c 	xori	zero,zero,9450
		case '-':
			sign = 1;
   93a9c:	00800044 	movi	r2,1
   93aa0:	e0bfcb15 	stw	r2,-212(fp)
			/* no break */
		case '+':
			if (*++s)
   93aa4:	e0bfe017 	ldw	r2,-128(fp)
   93aa8:	10800044 	addi	r2,r2,1
   93aac:	e0bfe015 	stw	r2,-128(fp)
   93ab0:	e0bfe017 	ldw	r2,-128(fp)
   93ab4:	10800003 	ldbu	r2,0(r2)
   93ab8:	10803fcc 	andi	r2,r2,255
   93abc:	1080201c 	xori	r2,r2,128
   93ac0:	10bfe004 	addi	r2,r2,-128
   93ac4:	1001e126 	beq	r2,zero,9424c <_strtod_r+0x928>
				goto break2;
   93ac8:	00000506 	br	93ae0 <_strtod_r+0x1bc>
#endif

	delta = bs = bd = NULL;
	sign = nz0 = nz = decpt = 0;
	dval(rv) = 0.;
	for(s = s00;;s++) switch(*s) {
   93acc:	e0bfe017 	ldw	r2,-128(fp)
   93ad0:	10800044 	addi	r2,r2,1
   93ad4:	e0bfe015 	stw	r2,-128(fp)
		case '\r':
		case ' ':
			continue;
		default:
			goto break2;
		}
   93ad8:	003fb506 	br	939b0 <__alt_data_end+0xfffe19b0>
		case '\f':
		case '\r':
		case ' ':
			continue;
		default:
			goto break2;
   93adc:	0001883a 	nop
		}
 break2:
	if (*s == '0') {
   93ae0:	e0bfe017 	ldw	r2,-128(fp)
   93ae4:	10800003 	ldbu	r2,0(r2)
   93ae8:	10803fcc 	andi	r2,r2,255
   93aec:	1080201c 	xori	r2,r2,128
   93af0:	10bfe004 	addi	r2,r2,-128
   93af4:	10800c18 	cmpnei	r2,r2,48
   93af8:	10004f1e 	bne	r2,zero,93c38 <_strtod_r+0x314>
#ifndef NO_HEX_FP
		{
		static _CONST FPI fpi = { 53, 1-1023-53+1, 2046-1023-53+1, 1, SI };
		Long exp;
		__ULong bits[2];
		switch(s[1]) {
   93afc:	e0bfe017 	ldw	r2,-128(fp)
   93b00:	10800044 	addi	r2,r2,1
   93b04:	10800003 	ldbu	r2,0(r2)
   93b08:	10803fcc 	andi	r2,r2,255
   93b0c:	1080201c 	xori	r2,r2,128
   93b10:	10bfe004 	addi	r2,r2,-128
   93b14:	10c01620 	cmpeqi	r3,r2,88
   93b18:	1800021e 	bne	r3,zero,93b24 <_strtod_r+0x200>
   93b1c:	10801e20 	cmpeqi	r2,r2,120
   93b20:	10003226 	beq	r2,zero,93bec <_strtod_r+0x2c8>
		  case 'x':
		  case 'X':
			/* If the number is not hex, then the parse of
                           0 is still valid.  */
			s00 = s + 1;
   93b24:	e0bfe017 	ldw	r2,-128(fp)
   93b28:	10800044 	addi	r2,r2,1
   93b2c:	e0bfee15 	stw	r2,-72(fp)
			  case FE_DOWNWARD:	fpi1.rounding = 3;
			  }
#else
#define fpi1 fpi
#endif
			switch((i = gethex(ptr, &s, &fpi1, &exp, &bb, sign)) & STRTOG_Retmask) {
   93b30:	e13fe804 	addi	r4,fp,-96
   93b34:	e0ffe004 	addi	r3,fp,-128
   93b38:	e0bfcb17 	ldw	r2,-212(fp)
   93b3c:	d8800115 	stw	r2,4(sp)
   93b40:	e0bfe704 	addi	r2,fp,-100
   93b44:	d8800015 	stw	r2,0(sp)
   93b48:	200f883a 	mov	r7,r4
   93b4c:	018002b4 	movhi	r6,10
   93b50:	3184cf04 	addi	r6,r6,4924
   93b54:	180b883a 	mov	r5,r3
   93b58:	e13fed17 	ldw	r4,-76(fp)
   93b5c:	009a8b40 	call	9a8b4 <__gethex>
   93b60:	e0bfc415 	stw	r2,-240(fp)
   93b64:	e0bfc417 	ldw	r2,-240(fp)
   93b68:	108001cc 	andi	r2,r2,7
   93b6c:	10068526 	beq	r2,zero,95584 <_strtod_r+0x1c60>
   93b70:	108001a0 	cmpeqi	r2,r2,6
   93b74:	10000526 	beq	r2,zero,93b8c <_strtod_r+0x268>
			  case STRTOG_NoNumber:
				s = s00;
   93b78:	e0bfee17 	ldw	r2,-72(fp)
   93b7c:	e0bfe015 	stw	r2,-128(fp)
				sign = 0;
   93b80:	e03fcb15 	stw	zero,-212(fp)
				/* FALLTHROUGH */
			  case STRTOG_Zero:
				break;
   93b84:	0001883a 	nop
   93b88:	00067e06 	br	95584 <_strtod_r+0x1c60>
			  default:
				if (bb) {
   93b8c:	e0bfe717 	ldw	r2,-100(fp)
   93b90:	10000d26 	beq	r2,zero,93bc8 <_strtod_r+0x2a4>
					copybits(bits, fpi.nbits, bb);
   93b94:	008002b4 	movhi	r2,10
   93b98:	1084cf04 	addi	r2,r2,4924
   93b9c:	10c00017 	ldw	r3,0(r2)
   93ba0:	e13fe717 	ldw	r4,-100(fp)
   93ba4:	e0bfe904 	addi	r2,fp,-92
   93ba8:	200d883a 	mov	r6,r4
   93bac:	180b883a 	mov	r5,r3
   93bb0:	1009883a 	mov	r4,r2
   93bb4:	00922d80 	call	922d8 <__copybits>
					Bfree(ptr,bb);
   93bb8:	e0bfe717 	ldw	r2,-100(fp)
   93bbc:	100b883a 	mov	r5,r2
   93bc0:	e13fed17 	ldw	r4,-76(fp)
   93bc4:	0090b5c0 	call	90b5c <_Bfree>
					}
				ULtod(rv.i, bits, exp, i);
   93bc8:	e13fe817 	ldw	r4,-96(fp)
   93bcc:	e0ffe904 	addi	r3,fp,-92
   93bd0:	e0bfe304 	addi	r2,fp,-116
   93bd4:	e1ffc417 	ldw	r7,-240(fp)
   93bd8:	200d883a 	mov	r6,r4
   93bdc:	180b883a 	mov	r5,r3
   93be0:	1009883a 	mov	r4,r2
   93be4:	00936f40 	call	936f4 <ULtod>
			  }}
			goto ret;
   93be8:	00067106 	br	955b0 <_strtod_r+0x1c8c>
		  }
		}
#endif
		nz0 = 1;
   93bec:	00800044 	movi	r2,1
   93bf0:	e0bfca15 	stw	r2,-216(fp)
		while(*++s == '0') ;
   93bf4:	0001883a 	nop
   93bf8:	e0bfe017 	ldw	r2,-128(fp)
   93bfc:	10800044 	addi	r2,r2,1
   93c00:	e0bfe015 	stw	r2,-128(fp)
   93c04:	e0bfe017 	ldw	r2,-128(fp)
   93c08:	10800003 	ldbu	r2,0(r2)
   93c0c:	10803fcc 	andi	r2,r2,255
   93c10:	1080201c 	xori	r2,r2,128
   93c14:	10bfe004 	addi	r2,r2,-128
   93c18:	10800c20 	cmpeqi	r2,r2,48
   93c1c:	103ff61e 	bne	r2,zero,93bf8 <__alt_data_end+0xfffe1bf8>
		if (!*s)
   93c20:	e0bfe017 	ldw	r2,-128(fp)
   93c24:	10800003 	ldbu	r2,0(r2)
   93c28:	10803fcc 	andi	r2,r2,255
   93c2c:	1080201c 	xori	r2,r2,128
   93c30:	10bfe004 	addi	r2,r2,-128
   93c34:	10065526 	beq	r2,zero,9558c <_strtod_r+0x1c68>
			goto ret;
		}
	s0 = s;
   93c38:	e0bfe017 	ldw	r2,-128(fp)
   93c3c:	e0bfcc15 	stw	r2,-208(fp)
	y = z = 0;
   93c40:	e03fd115 	stw	zero,-188(fp)
   93c44:	e0bfd117 	ldw	r2,-188(fp)
   93c48:	e0bfd015 	stw	r2,-192(fp)
	for(nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd++, s++)
   93c4c:	e03fc815 	stw	zero,-224(fp)
   93c50:	e0bfc817 	ldw	r2,-224(fp)
   93c54:	e0bfc615 	stw	r2,-232(fp)
   93c58:	00001a06 	br	93cc4 <_strtod_r+0x3a0>
		if (nd < 9)
   93c5c:	e0bfc617 	ldw	r2,-232(fp)
   93c60:	10800248 	cmpgei	r2,r2,9
   93c64:	1000091e 	bne	r2,zero,93c8c <_strtod_r+0x368>
			y = 10*y + c - '0';
   93c68:	01400284 	movi	r5,10
   93c6c:	e13fd017 	ldw	r4,-192(fp)
   93c70:	00823a00 	call	823a0 <__mulsi3>
   93c74:	1007883a 	mov	r3,r2
   93c78:	e0bfbf17 	ldw	r2,-260(fp)
   93c7c:	1885883a 	add	r2,r3,r2
   93c80:	10bff404 	addi	r2,r2,-48
   93c84:	e0bfd015 	stw	r2,-192(fp)
   93c88:	00000806 	br	93cac <_strtod_r+0x388>
		else
			z = 10*z + c - '0';
   93c8c:	01400284 	movi	r5,10
   93c90:	e13fd117 	ldw	r4,-188(fp)
   93c94:	00823a00 	call	823a0 <__mulsi3>
   93c98:	1007883a 	mov	r3,r2
   93c9c:	e0bfbf17 	ldw	r2,-260(fp)
   93ca0:	1885883a 	add	r2,r3,r2
   93ca4:	10bff404 	addi	r2,r2,-48
   93ca8:	e0bfd115 	stw	r2,-188(fp)
		if (!*s)
			goto ret;
		}
	s0 = s;
	y = z = 0;
	for(nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd++, s++)
   93cac:	e0bfc617 	ldw	r2,-232(fp)
   93cb0:	10800044 	addi	r2,r2,1
   93cb4:	e0bfc615 	stw	r2,-232(fp)
   93cb8:	e0bfe017 	ldw	r2,-128(fp)
   93cbc:	10800044 	addi	r2,r2,1
   93cc0:	e0bfe015 	stw	r2,-128(fp)
   93cc4:	e0bfe017 	ldw	r2,-128(fp)
   93cc8:	10800003 	ldbu	r2,0(r2)
   93ccc:	10803fcc 	andi	r2,r2,255
   93cd0:	1080201c 	xori	r2,r2,128
   93cd4:	10bfe004 	addi	r2,r2,-128
   93cd8:	e0bfbf15 	stw	r2,-260(fp)
   93cdc:	e0bfbf17 	ldw	r2,-260(fp)
   93ce0:	10800c10 	cmplti	r2,r2,48
   93ce4:	1000031e 	bne	r2,zero,93cf4 <_strtod_r+0x3d0>
   93ce8:	e0bfbf17 	ldw	r2,-260(fp)
   93cec:	10800e90 	cmplti	r2,r2,58
   93cf0:	103fda1e 	bne	r2,zero,93c5c <__alt_data_end+0xfffe1c5c>
		if (nd < 9)
			y = 10*y + c - '0';
		else
			z = 10*z + c - '0';
	nd0 = nd;
   93cf4:	e0bfc617 	ldw	r2,-232(fp)
   93cf8:	e0bfc715 	stw	r2,-228(fp)
	if (strncmp (s, _localeconv_r (ptr)->decimal_point,
   93cfc:	e0bfe017 	ldw	r2,-128(fp)
   93d00:	e0bff015 	stw	r2,-64(fp)
   93d04:	e13fed17 	ldw	r4,-76(fp)
   93d08:	009011c0 	call	9011c <_localeconv_r>
   93d0c:	10800017 	ldw	r2,0(r2)
   93d10:	e0bff115 	stw	r2,-60(fp)
		     strlen (_localeconv_r (ptr)->decimal_point)) == 0)
   93d14:	e13fed17 	ldw	r4,-76(fp)
   93d18:	009011c0 	call	9011c <_localeconv_r>
   93d1c:	10800017 	ldw	r2,0(r2)
		if (nd < 9)
			y = 10*y + c - '0';
		else
			z = 10*z + c - '0';
	nd0 = nd;
	if (strncmp (s, _localeconv_r (ptr)->decimal_point,
   93d20:	1009883a 	mov	r4,r2
   93d24:	0088c340 	call	88c34 <strlen>
   93d28:	100d883a 	mov	r6,r2
   93d2c:	e17ff117 	ldw	r5,-60(fp)
   93d30:	e13ff017 	ldw	r4,-64(fp)
   93d34:	009b7500 	call	9b750 <strncmp>
   93d38:	1000801e 	bne	r2,zero,93f3c <_strtod_r+0x618>
		     strlen (_localeconv_r (ptr)->decimal_point)) == 0)
		{
		decpt = 1;
   93d3c:	00800044 	movi	r2,1
   93d40:	e0bfc015 	stw	r2,-256(fp)
		c = *(s += strlen (_localeconv_r (ptr)->decimal_point));
   93d44:	e13fed17 	ldw	r4,-76(fp)
   93d48:	009011c0 	call	9011c <_localeconv_r>
   93d4c:	10800017 	ldw	r2,0(r2)
   93d50:	1009883a 	mov	r4,r2
   93d54:	0088c340 	call	88c34 <strlen>
   93d58:	1007883a 	mov	r3,r2
   93d5c:	e0bfe017 	ldw	r2,-128(fp)
   93d60:	10c5883a 	add	r2,r2,r3
   93d64:	e0bfe015 	stw	r2,-128(fp)
   93d68:	e0bfe017 	ldw	r2,-128(fp)
   93d6c:	10800003 	ldbu	r2,0(r2)
   93d70:	10803fcc 	andi	r2,r2,255
   93d74:	1080201c 	xori	r2,r2,128
   93d78:	10bfe004 	addi	r2,r2,-128
   93d7c:	e0bfbf15 	stw	r2,-260(fp)
		if (!nd) {
   93d80:	e0bfc617 	ldw	r2,-232(fp)
   93d84:	1000651e 	bne	r2,zero,93f1c <_strtod_r+0x5f8>
			for(; c == '0'; c = *++s)
   93d88:	00000c06 	br	93dbc <_strtod_r+0x498>
				nz++;
   93d8c:	e0bfc917 	ldw	r2,-220(fp)
   93d90:	10800044 	addi	r2,r2,1
   93d94:	e0bfc915 	stw	r2,-220(fp)
		     strlen (_localeconv_r (ptr)->decimal_point)) == 0)
		{
		decpt = 1;
		c = *(s += strlen (_localeconv_r (ptr)->decimal_point));
		if (!nd) {
			for(; c == '0'; c = *++s)
   93d98:	e0bfe017 	ldw	r2,-128(fp)
   93d9c:	10800044 	addi	r2,r2,1
   93da0:	e0bfe015 	stw	r2,-128(fp)
   93da4:	e0bfe017 	ldw	r2,-128(fp)
   93da8:	10800003 	ldbu	r2,0(r2)
   93dac:	10803fcc 	andi	r2,r2,255
   93db0:	1080201c 	xori	r2,r2,128
   93db4:	10bfe004 	addi	r2,r2,-128
   93db8:	e0bfbf15 	stw	r2,-260(fp)
   93dbc:	e0bfbf17 	ldw	r2,-260(fp)
   93dc0:	10800c20 	cmpeqi	r2,r2,48
   93dc4:	103ff11e 	bne	r2,zero,93d8c <__alt_data_end+0xfffe1d8c>
				nz++;
			if (c > '0' && c <= '9') {
   93dc8:	e0bfbf17 	ldw	r2,-260(fp)
   93dcc:	10800c50 	cmplti	r2,r2,49
   93dd0:	1000591e 	bne	r2,zero,93f38 <_strtod_r+0x614>
   93dd4:	e0bfbf17 	ldw	r2,-260(fp)
   93dd8:	10800e88 	cmpgei	r2,r2,58
   93ddc:	1000561e 	bne	r2,zero,93f38 <_strtod_r+0x614>
				s0 = s;
   93de0:	e0bfe017 	ldw	r2,-128(fp)
   93de4:	e0bfcc15 	stw	r2,-208(fp)
				nf += nz;
   93de8:	e0ffc817 	ldw	r3,-224(fp)
   93dec:	e0bfc917 	ldw	r2,-220(fp)
   93df0:	1885883a 	add	r2,r3,r2
   93df4:	e0bfc815 	stw	r2,-224(fp)
				nz = 0;
   93df8:	e03fc915 	stw	zero,-220(fp)
				goto have_dig;
   93dfc:	0001883a 	nop
				}
			goto dig_done;
			}
		for(; c >= '0' && c <= '9'; c = *++s) {
 have_dig:
			nz++;
   93e00:	e0bfc917 	ldw	r2,-220(fp)
   93e04:	10800044 	addi	r2,r2,1
   93e08:	e0bfc915 	stw	r2,-220(fp)
			if (c -= '0') {
   93e0c:	e0bfbf17 	ldw	r2,-260(fp)
   93e10:	10bff404 	addi	r2,r2,-48
   93e14:	e0bfbf15 	stw	r2,-260(fp)
   93e18:	e0bfbf17 	ldw	r2,-260(fp)
   93e1c:	10003626 	beq	r2,zero,93ef8 <_strtod_r+0x5d4>
				nf += nz;
   93e20:	e0ffc817 	ldw	r3,-224(fp)
   93e24:	e0bfc917 	ldw	r2,-220(fp)
   93e28:	1885883a 	add	r2,r3,r2
   93e2c:	e0bfc815 	stw	r2,-224(fp)
				for(i = 1; i < nz; i++)
   93e30:	00800044 	movi	r2,1
   93e34:	e0bfc415 	stw	r2,-240(fp)
   93e38:	00001406 	br	93e8c <_strtod_r+0x568>
					if (nd++ < 9)
   93e3c:	e0bfc617 	ldw	r2,-232(fp)
   93e40:	10c00044 	addi	r3,r2,1
   93e44:	e0ffc615 	stw	r3,-232(fp)
   93e48:	10800248 	cmpgei	r2,r2,9
   93e4c:	1000051e 	bne	r2,zero,93e64 <_strtod_r+0x540>
						y *= 10;
   93e50:	01400284 	movi	r5,10
   93e54:	e13fd017 	ldw	r4,-192(fp)
   93e58:	00823a00 	call	823a0 <__mulsi3>
   93e5c:	e0bfd015 	stw	r2,-192(fp)
   93e60:	00000706 	br	93e80 <_strtod_r+0x55c>
					else if (nd <= DBL_DIG + 1)
   93e64:	e0bfc617 	ldw	r2,-232(fp)
   93e68:	10800448 	cmpgei	r2,r2,17
   93e6c:	1000041e 	bne	r2,zero,93e80 <_strtod_r+0x55c>
						z *= 10;
   93e70:	01400284 	movi	r5,10
   93e74:	e13fd117 	ldw	r4,-188(fp)
   93e78:	00823a00 	call	823a0 <__mulsi3>
   93e7c:	e0bfd115 	stw	r2,-188(fp)
		for(; c >= '0' && c <= '9'; c = *++s) {
 have_dig:
			nz++;
			if (c -= '0') {
				nf += nz;
				for(i = 1; i < nz; i++)
   93e80:	e0bfc417 	ldw	r2,-240(fp)
   93e84:	10800044 	addi	r2,r2,1
   93e88:	e0bfc415 	stw	r2,-240(fp)
   93e8c:	e0ffc417 	ldw	r3,-240(fp)
   93e90:	e0bfc917 	ldw	r2,-220(fp)
   93e94:	18bfe916 	blt	r3,r2,93e3c <__alt_data_end+0xfffe1e3c>
					if (nd++ < 9)
						y *= 10;
					else if (nd <= DBL_DIG + 1)
						z *= 10;
				if (nd++ < 9)
   93e98:	e0bfc617 	ldw	r2,-232(fp)
   93e9c:	10c00044 	addi	r3,r2,1
   93ea0:	e0ffc615 	stw	r3,-232(fp)
   93ea4:	10800248 	cmpgei	r2,r2,9
   93ea8:	1000081e 	bne	r2,zero,93ecc <_strtod_r+0x5a8>
					y = 10*y + c;
   93eac:	01400284 	movi	r5,10
   93eb0:	e13fd017 	ldw	r4,-192(fp)
   93eb4:	00823a00 	call	823a0 <__mulsi3>
   93eb8:	1007883a 	mov	r3,r2
   93ebc:	e0bfbf17 	ldw	r2,-260(fp)
   93ec0:	1885883a 	add	r2,r3,r2
   93ec4:	e0bfd015 	stw	r2,-192(fp)
   93ec8:	00000a06 	br	93ef4 <_strtod_r+0x5d0>
				else if (nd <= DBL_DIG + 1)
   93ecc:	e0bfc617 	ldw	r2,-232(fp)
   93ed0:	10800448 	cmpgei	r2,r2,17
   93ed4:	1000071e 	bne	r2,zero,93ef4 <_strtod_r+0x5d0>
					z = 10*z + c;
   93ed8:	01400284 	movi	r5,10
   93edc:	e13fd117 	ldw	r4,-188(fp)
   93ee0:	00823a00 	call	823a0 <__mulsi3>
   93ee4:	1007883a 	mov	r3,r2
   93ee8:	e0bfbf17 	ldw	r2,-260(fp)
   93eec:	1885883a 	add	r2,r3,r2
   93ef0:	e0bfd115 	stw	r2,-188(fp)
				nz = 0;
   93ef4:	e03fc915 	stw	zero,-220(fp)
				nz = 0;
				goto have_dig;
				}
			goto dig_done;
			}
		for(; c >= '0' && c <= '9'; c = *++s) {
   93ef8:	e0bfe017 	ldw	r2,-128(fp)
   93efc:	10800044 	addi	r2,r2,1
   93f00:	e0bfe015 	stw	r2,-128(fp)
   93f04:	e0bfe017 	ldw	r2,-128(fp)
   93f08:	10800003 	ldbu	r2,0(r2)
   93f0c:	10803fcc 	andi	r2,r2,255
   93f10:	1080201c 	xori	r2,r2,128
   93f14:	10bfe004 	addi	r2,r2,-128
   93f18:	e0bfbf15 	stw	r2,-260(fp)
   93f1c:	e0bfbf17 	ldw	r2,-260(fp)
   93f20:	10800c10 	cmplti	r2,r2,48
   93f24:	1000051e 	bne	r2,zero,93f3c <_strtod_r+0x618>
   93f28:	e0bfbf17 	ldw	r2,-260(fp)
   93f2c:	10800e90 	cmplti	r2,r2,58
   93f30:	103fb31e 	bne	r2,zero,93e00 <__alt_data_end+0xfffe1e00>
   93f34:	00000106 	br	93f3c <_strtod_r+0x618>
				s0 = s;
				nf += nz;
				nz = 0;
				goto have_dig;
				}
			goto dig_done;
   93f38:	0001883a 	nop
				nz = 0;
				}
			}
		}
 dig_done:
	e = 0;
   93f3c:	e03fc115 	stw	zero,-252(fp)
	if (c == 'e' || c == 'E') {
   93f40:	e0bfbf17 	ldw	r2,-260(fp)
   93f44:	10801960 	cmpeqi	r2,r2,101
   93f48:	1000031e 	bne	r2,zero,93f58 <_strtod_r+0x634>
   93f4c:	e0bfbf17 	ldw	r2,-260(fp)
   93f50:	10801158 	cmpnei	r2,r2,69
   93f54:	1000711e 	bne	r2,zero,9411c <_strtod_r+0x7f8>
		if (!nd && !nz && !nz0) {
   93f58:	e0bfc617 	ldw	r2,-232(fp)
   93f5c:	1000041e 	bne	r2,zero,93f70 <_strtod_r+0x64c>
   93f60:	e0bfc917 	ldw	r2,-220(fp)
   93f64:	1000021e 	bne	r2,zero,93f70 <_strtod_r+0x64c>
   93f68:	e0bfca17 	ldw	r2,-216(fp)
   93f6c:	1000b926 	beq	r2,zero,94254 <_strtod_r+0x930>
			goto ret0;
			}
		s00 = s;
   93f70:	e0bfe017 	ldw	r2,-128(fp)
   93f74:	e0bfee15 	stw	r2,-72(fp)
		esign = 0;
   93f78:	e03fc315 	stw	zero,-244(fp)
		switch(c = *++s) {
   93f7c:	e0bfe017 	ldw	r2,-128(fp)
   93f80:	10800044 	addi	r2,r2,1
   93f84:	e0bfe015 	stw	r2,-128(fp)
   93f88:	e0bfe017 	ldw	r2,-128(fp)
   93f8c:	10800003 	ldbu	r2,0(r2)
   93f90:	10803fcc 	andi	r2,r2,255
   93f94:	1080201c 	xori	r2,r2,128
   93f98:	10bfe004 	addi	r2,r2,-128
   93f9c:	e0bfbf15 	stw	r2,-260(fp)
   93fa0:	e0bfbf17 	ldw	r2,-260(fp)
   93fa4:	10c00ae0 	cmpeqi	r3,r2,43
   93fa8:	1800041e 	bne	r3,zero,93fbc <_strtod_r+0x698>
   93fac:	10800b60 	cmpeqi	r2,r2,45
   93fb0:	10000b26 	beq	r2,zero,93fe0 <_strtod_r+0x6bc>
			case '-':
				esign = 1;
   93fb4:	00800044 	movi	r2,1
   93fb8:	e0bfc315 	stw	r2,-244(fp)
			case '+':
				c = *++s;
   93fbc:	e0bfe017 	ldw	r2,-128(fp)
   93fc0:	10800044 	addi	r2,r2,1
   93fc4:	e0bfe015 	stw	r2,-128(fp)
   93fc8:	e0bfe017 	ldw	r2,-128(fp)
   93fcc:	10800003 	ldbu	r2,0(r2)
   93fd0:	10803fcc 	andi	r2,r2,255
   93fd4:	1080201c 	xori	r2,r2,128
   93fd8:	10bfe004 	addi	r2,r2,-128
   93fdc:	e0bfbf15 	stw	r2,-260(fp)
			}
		if (c >= '0' && c <= '9') {
   93fe0:	e0bfbf17 	ldw	r2,-260(fp)
   93fe4:	10800c10 	cmplti	r2,r2,48
   93fe8:	10004a1e 	bne	r2,zero,94114 <_strtod_r+0x7f0>
   93fec:	e0bfbf17 	ldw	r2,-260(fp)
   93ff0:	10800e88 	cmpgei	r2,r2,58
   93ff4:	1000471e 	bne	r2,zero,94114 <_strtod_r+0x7f0>
			while(c == '0')
   93ff8:	00000906 	br	94020 <_strtod_r+0x6fc>
				c = *++s;
   93ffc:	e0bfe017 	ldw	r2,-128(fp)
   94000:	10800044 	addi	r2,r2,1
   94004:	e0bfe015 	stw	r2,-128(fp)
   94008:	e0bfe017 	ldw	r2,-128(fp)
   9400c:	10800003 	ldbu	r2,0(r2)
   94010:	10803fcc 	andi	r2,r2,255
   94014:	1080201c 	xori	r2,r2,128
   94018:	10bfe004 	addi	r2,r2,-128
   9401c:	e0bfbf15 	stw	r2,-260(fp)
				esign = 1;
			case '+':
				c = *++s;
			}
		if (c >= '0' && c <= '9') {
			while(c == '0')
   94020:	e0bfbf17 	ldw	r2,-260(fp)
   94024:	10800c20 	cmpeqi	r2,r2,48
   94028:	103ff41e 	bne	r2,zero,93ffc <__alt_data_end+0xfffe1ffc>
				c = *++s;
			if (c > '0' && c <= '9') {
   9402c:	e0bfbf17 	ldw	r2,-260(fp)
   94030:	10800c50 	cmplti	r2,r2,49
   94034:	1000341e 	bne	r2,zero,94108 <_strtod_r+0x7e4>
   94038:	e0bfbf17 	ldw	r2,-260(fp)
   9403c:	10800e88 	cmpgei	r2,r2,58
   94040:	1000311e 	bne	r2,zero,94108 <_strtod_r+0x7e4>
				L = c - '0';
   94044:	e0bfbf17 	ldw	r2,-260(fp)
   94048:	10bff404 	addi	r2,r2,-48
   9404c:	e0bfcf15 	stw	r2,-196(fp)
				s1 = s;
   94050:	e0bfe017 	ldw	r2,-128(fp)
   94054:	e0bfd815 	stw	r2,-160(fp)
				while((c = *++s) >= '0' && c <= '9')
   94058:	00000806 	br	9407c <_strtod_r+0x758>
					L = 10*L + c - '0';
   9405c:	01400284 	movi	r5,10
   94060:	e13fcf17 	ldw	r4,-196(fp)
   94064:	00823a00 	call	823a0 <__mulsi3>
   94068:	1007883a 	mov	r3,r2
   9406c:	e0bfbf17 	ldw	r2,-260(fp)
   94070:	1885883a 	add	r2,r3,r2
   94074:	10bff404 	addi	r2,r2,-48
   94078:	e0bfcf15 	stw	r2,-196(fp)
			while(c == '0')
				c = *++s;
			if (c > '0' && c <= '9') {
				L = c - '0';
				s1 = s;
				while((c = *++s) >= '0' && c <= '9')
   9407c:	e0bfe017 	ldw	r2,-128(fp)
   94080:	10800044 	addi	r2,r2,1
   94084:	e0bfe015 	stw	r2,-128(fp)
   94088:	e0bfe017 	ldw	r2,-128(fp)
   9408c:	10800003 	ldbu	r2,0(r2)
   94090:	10803fcc 	andi	r2,r2,255
   94094:	1080201c 	xori	r2,r2,128
   94098:	10bfe004 	addi	r2,r2,-128
   9409c:	e0bfbf15 	stw	r2,-260(fp)
   940a0:	e0bfbf17 	ldw	r2,-260(fp)
   940a4:	10800c10 	cmplti	r2,r2,48
   940a8:	1000031e 	bne	r2,zero,940b8 <_strtod_r+0x794>
   940ac:	e0bfbf17 	ldw	r2,-260(fp)
   940b0:	10800e90 	cmplti	r2,r2,58
   940b4:	103fe91e 	bne	r2,zero,9405c <__alt_data_end+0xfffe205c>
					L = 10*L + c - '0';
				if (s - s1 > 8 || L > 19999)
   940b8:	e0bfe017 	ldw	r2,-128(fp)
   940bc:	1007883a 	mov	r3,r2
   940c0:	e0bfd817 	ldw	r2,-160(fp)
   940c4:	1885c83a 	sub	r2,r3,r2
   940c8:	10800248 	cmpgei	r2,r2,9
   940cc:	1000031e 	bne	r2,zero,940dc <_strtod_r+0x7b8>
   940d0:	e0bfcf17 	ldw	r2,-196(fp)
   940d4:	10938810 	cmplti	r2,r2,20000
   940d8:	1000031e 	bne	r2,zero,940e8 <_strtod_r+0x7c4>
					/* Avoid confusion from exponents
					 * so large that e might overflow.
					 */
					e = 19999; /* safe for 16 bit ints */
   940dc:	009387c4 	movi	r2,19999
   940e0:	e0bfc115 	stw	r2,-252(fp)
   940e4:	00000206 	br	940f0 <_strtod_r+0x7cc>
				else
					e = (int)L;
   940e8:	e0bfcf17 	ldw	r2,-196(fp)
   940ec:	e0bfc115 	stw	r2,-252(fp)
				if (esign)
   940f0:	e0bfc317 	ldw	r2,-244(fp)
   940f4:	10000626 	beq	r2,zero,94110 <_strtod_r+0x7ec>
					e = -e;
   940f8:	e0bfc117 	ldw	r2,-252(fp)
   940fc:	0085c83a 	sub	r2,zero,r2
   94100:	e0bfc115 	stw	r2,-252(fp)
					 * so large that e might overflow.
					 */
					e = 19999; /* safe for 16 bit ints */
				else
					e = (int)L;
				if (esign)
   94104:	00000206 	br	94110 <_strtod_r+0x7ec>
					e = -e;
				}
			else
				e = 0;
   94108:	e03fc115 	stw	zero,-252(fp)
				c = *++s;
			}
		if (c >= '0' && c <= '9') {
			while(c == '0')
				c = *++s;
			if (c > '0' && c <= '9') {
   9410c:	00000306 	br	9411c <_strtod_r+0x7f8>
   94110:	00000206 	br	9411c <_strtod_r+0x7f8>
				}
			else
				e = 0;
			}
		else
			s = s00;
   94114:	e0bfee17 	ldw	r2,-72(fp)
   94118:	e0bfe015 	stw	r2,-128(fp)
		}
	if (!nd) {
   9411c:	e0bfc617 	ldw	r2,-232(fp)
   94120:	1000531e 	bne	r2,zero,94270 <_strtod_r+0x94c>
		if (!nz && !nz0) {
   94124:	e0bfc917 	ldw	r2,-220(fp)
   94128:	10051a1e 	bne	r2,zero,95594 <_strtod_r+0x1c70>
   9412c:	e0bfca17 	ldw	r2,-216(fp)
   94130:	1005181e 	bne	r2,zero,95594 <_strtod_r+0x1c70>
#ifdef INFNAN_CHECK
			/* Check for Nan and Infinity */
			__ULong bits[2];
			static _CONST FPI fpinan =	/* only 52 explicit bits */
				{ 52, 1-1023-53+1, 2046-1023-53+1, 1, SI };
			if (!decpt)
   94134:	e0bfc017 	ldw	r2,-256(fp)
   94138:	1000491e 	bne	r2,zero,94260 <_strtod_r+0x93c>
			 switch(c) {
   9413c:	e0bfbf17 	ldw	r2,-260(fp)
   94140:	10c013a0 	cmpeqi	r3,r2,78
   94144:	1800201e 	bne	r3,zero,941c8 <_strtod_r+0x8a4>
   94148:	10c013c8 	cmpgei	r3,r2,79
   9414c:	1800031e 	bne	r3,zero,9415c <_strtod_r+0x838>
   94150:	10801260 	cmpeqi	r2,r2,73
   94154:	1000061e 	bne	r2,zero,94170 <_strtod_r+0x84c>
   94158:	00004106 	br	94260 <_strtod_r+0x93c>
   9415c:	10c01a60 	cmpeqi	r3,r2,105
   94160:	1800031e 	bne	r3,zero,94170 <_strtod_r+0x84c>
   94164:	10801ba0 	cmpeqi	r2,r2,110
   94168:	1000171e 	bne	r2,zero,941c8 <_strtod_r+0x8a4>
   9416c:	00003c06 	br	94260 <_strtod_r+0x93c>
			  case 'i':
			  case 'I':
				if (match(&s,"nf")) {
   94170:	e0bfe004 	addi	r2,fp,-128
   94174:	014002b4 	movhi	r5,10
   94178:	2944cb04 	addi	r5,r5,4908
   9417c:	1009883a 	mov	r4,r2
   94180:	00938580 	call	93858 <match>
   94184:	10003526 	beq	r2,zero,9425c <_strtod_r+0x938>
					--s;
   94188:	e0bfe017 	ldw	r2,-128(fp)
   9418c:	10bfffc4 	addi	r2,r2,-1
   94190:	e0bfe015 	stw	r2,-128(fp)
					if (!match(&s,"inity"))
   94194:	e0bfe004 	addi	r2,fp,-128
   94198:	014002b4 	movhi	r5,10
   9419c:	2944cc04 	addi	r5,r5,4912
   941a0:	1009883a 	mov	r4,r2
   941a4:	00938580 	call	93858 <match>
   941a8:	1000031e 	bne	r2,zero,941b8 <_strtod_r+0x894>
						++s;
   941ac:	e0bfe017 	ldw	r2,-128(fp)
   941b0:	10800044 	addi	r2,r2,1
   941b4:	e0bfe015 	stw	r2,-128(fp)
					dword0(rv) = 0x7ff00000;
   941b8:	009ffc34 	movhi	r2,32752
   941bc:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
					dword1(rv) = 0;
   941c0:	e03fe315 	stw	zero,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
					goto ret;
   941c4:	0004fa06 	br	955b0 <_strtod_r+0x1c8c>
					}
				break;
			  case 'n':
			  case 'N':
				if (match(&s, "an")) {
   941c8:	e0bfe004 	addi	r2,fp,-128
   941cc:	014002b4 	movhi	r5,10
   941d0:	2944ce04 	addi	r5,r5,4920
   941d4:	1009883a 	mov	r4,r2
   941d8:	00938580 	call	93858 <match>
   941dc:	10002026 	beq	r2,zero,94260 <_strtod_r+0x93c>
#ifndef No_Hex_NaN
					if (*s == '(' /*)*/
   941e0:	e0bfe017 	ldw	r2,-128(fp)
   941e4:	10800003 	ldbu	r2,0(r2)
   941e8:	10803fcc 	andi	r2,r2,255
   941ec:	1080201c 	xori	r2,r2,128
   941f0:	10bfe004 	addi	r2,r2,-128
   941f4:	10800a18 	cmpnei	r2,r2,40
   941f8:	10000f1e 	bne	r2,zero,94238 <_strtod_r+0x914>
					 && hexnan(&s, &fpinan, bits)
   941fc:	e0ffeb04 	addi	r3,fp,-84
   94200:	e0bfe004 	addi	r2,fp,-128
   94204:	180d883a 	mov	r6,r3
   94208:	014002b4 	movhi	r5,10
   9420c:	2944d404 	addi	r5,r5,4944
   94210:	1009883a 	mov	r4,r2
   94214:	009b4140 	call	9b414 <__hexnan>
   94218:	10800158 	cmpnei	r2,r2,5
   9421c:	1000061e 	bne	r2,zero,94238 <_strtod_r+0x914>
							== STRTOG_NaNbits) {
						dword0(rv) = 0x7ff00000 | bits[1];
   94220:	e0bfec17 	ldw	r2,-80(fp)
   94224:	109ffc34 	orhi	r2,r2,32752
   94228:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
						dword1(rv) = bits[0];
   9422c:	e0bfeb17 	ldw	r2,-84(fp)
   94230:	e0bfe315 	stw	r2,-116(fp)
						dword1(rv) = NAN_WORD1;
#endif /*!_DOUBLE_IS_32BITS*/
#ifndef No_Hex_NaN
						}
#endif
					goto ret;
   94234:	0004de06 	br	955b0 <_strtod_r+0x1c8c>
						dword1(rv) = bits[0];
#endif /*!_DOUBLE_IS_32BITS*/
						}
					else {
#endif
						dword0(rv) = NAN_WORD0;
   94238:	00bffe34 	movhi	r2,65528
   9423c:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
						dword1(rv) = NAN_WORD1;
   94240:	e03fe315 	stw	zero,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
#ifndef No_Hex_NaN
						}
#endif
					goto ret;
   94244:	0001883a 	nop
   94248:	0004d906 	br	955b0 <_strtod_r+0x1c8c>
		case '+':
			if (*++s)
				goto break2;
			/* no break */
		case 0:
			goto ret0;
   9424c:	0001883a 	nop
   94250:	00000306 	br	94260 <_strtod_r+0x93c>
		}
 dig_done:
	e = 0;
	if (c == 'e' || c == 'E') {
		if (!nd && !nz && !nz0) {
			goto ret0;
   94254:	0001883a 	nop
   94258:	00000106 	br	94260 <_strtod_r+0x93c>
#ifndef _DOUBLE_IS_32BITS
					dword1(rv) = 0;
#endif /*!_DOUBLE_IS_32BITS*/
					goto ret;
					}
				break;
   9425c:	0001883a 	nop
					goto ret;
					}
			  }
#endif /* INFNAN_CHECK */
 ret0:
			s = s00;
   94260:	e0bfee17 	ldw	r2,-72(fp)
   94264:	e0bfe015 	stw	r2,-128(fp)
			sign = 0;
   94268:	e03fcb15 	stw	zero,-212(fp)
			}
		goto ret;
   9426c:	0004c906 	br	95594 <_strtod_r+0x1c70>
		}
	e1 = e -= nf;
   94270:	e0ffc117 	ldw	r3,-252(fp)
   94274:	e0bfc817 	ldw	r2,-224(fp)
   94278:	1885c83a 	sub	r2,r3,r2
   9427c:	e0bfc115 	stw	r2,-252(fp)
   94280:	e0bfc117 	ldw	r2,-252(fp)
   94284:	e0bfc215 	stw	r2,-248(fp)
	/* Now we have nd0 digits, starting at s0, followed by a
	 * decimal point, followed by nd-nd0 digits.  The number we're
	 * after is the integer represented by those digits times
	 * 10**e */

	if (!nd0)
   94288:	e0bfc717 	ldw	r2,-228(fp)
   9428c:	1000021e 	bne	r2,zero,94298 <_strtod_r+0x974>
		nd0 = nd;
   94290:	e0bfc617 	ldw	r2,-232(fp)
   94294:	e0bfc715 	stw	r2,-228(fp)
	k = nd < DBL_DIG + 1 ? nd : DBL_DIG + 1;
   94298:	e0bfc617 	ldw	r2,-232(fp)
   9429c:	10c00450 	cmplti	r3,r2,17
   942a0:	1800011e 	bne	r3,zero,942a8 <_strtod_r+0x984>
   942a4:	00800404 	movi	r2,16
   942a8:	e0bfd915 	stw	r2,-156(fp)
	dval(rv) = y;
   942ac:	e13fd017 	ldw	r4,-192(fp)
   942b0:	009de700 	call	9de70 <__floatunsidf>
   942b4:	1009883a 	mov	r4,r2
   942b8:	180b883a 	mov	r5,r3
   942bc:	e13fe315 	stw	r4,-116(fp)
   942c0:	e17fe415 	stw	r5,-112(fp)
	if (k > 9) {
   942c4:	e0bfd917 	ldw	r2,-156(fp)
   942c8:	10800290 	cmplti	r2,r2,10
   942cc:	1000221e 	bne	r2,zero,94358 <_strtod_r+0xa34>
#ifdef SET_INEXACT
		if (k > DBL_DIG)
			oldinexact = get_inexact();
#endif
		dval(rv) = tens[k - 9] * dval(rv) + z;
   942d0:	e0bfd917 	ldw	r2,-156(fp)
   942d4:	10fffdc4 	addi	r3,r2,-9
   942d8:	008002b4 	movhi	r2,10
   942dc:	10847804 	addi	r2,r2,4576
   942e0:	180690fa 	slli	r3,r3,3
   942e4:	10c9883a 	add	r4,r2,r3
   942e8:	20800017 	ldw	r2,0(r4)
   942ec:	20c00117 	ldw	r3,4(r4)
   942f0:	e13fe317 	ldw	r4,-116(fp)
   942f4:	e17fe417 	ldw	r5,-112(fp)
   942f8:	200d883a 	mov	r6,r4
   942fc:	280f883a 	mov	r7,r5
   94300:	1009883a 	mov	r4,r2
   94304:	180b883a 	mov	r5,r3
   94308:	00838140 	call	83814 <__muldf3>
   9430c:	1009883a 	mov	r4,r2
   94310:	180b883a 	mov	r5,r3
   94314:	e13ff215 	stw	r4,-56(fp)
   94318:	e17ff315 	stw	r5,-52(fp)
   9431c:	e13fd117 	ldw	r4,-188(fp)
   94320:	009de700 	call	9de70 <__floatunsidf>
   94324:	1009883a 	mov	r4,r2
   94328:	180b883a 	mov	r5,r3
   9432c:	200d883a 	mov	r6,r4
   94330:	280f883a 	mov	r7,r5
   94334:	e13ff217 	ldw	r4,-56(fp)
   94338:	e17ff317 	ldw	r5,-52(fp)
   9433c:	00823c80 	call	823c8 <__adddf3>
   94340:	1009883a 	mov	r4,r2
   94344:	180b883a 	mov	r5,r3
   94348:	2005883a 	mov	r2,r4
   9434c:	2807883a 	mov	r3,r5
   94350:	e0bfe315 	stw	r2,-116(fp)
   94354:	e0ffe415 	stw	r3,-112(fp)
		}
	bd0 = 0;
   94358:	e03fd315 	stw	zero,-180(fp)
	if (nd <= DBL_DIG
   9435c:	e0bfc617 	ldw	r2,-232(fp)
   94360:	10800408 	cmpgei	r2,r2,16
   94364:	10006a1e 	bne	r2,zero,94510 <_strtod_r+0xbec>
#ifndef Honor_FLT_ROUNDS
		&& Flt_Rounds == 1
#endif
#endif
			) {
		if (!e)
   94368:	e0bfc117 	ldw	r2,-252(fp)
   9436c:	10048b26 	beq	r2,zero,9559c <_strtod_r+0x1c78>
			goto ret;
		if (e > 0) {
   94370:	e0bfc117 	ldw	r2,-252(fp)
   94374:	00804d0e 	bge	zero,r2,944ac <_strtod_r+0xb88>
			if (e <= Ten_pmax) {
   94378:	e0bfc117 	ldw	r2,-252(fp)
   9437c:	108005c8 	cmpgei	r2,r2,23
   94380:	1000151e 	bne	r2,zero,943d8 <_strtod_r+0xab4>
				if (sign) {
					dval(rv) = -dval(rv);
					sign = 0;
					}
#endif
				/* rv = */ rounded_product(dval(rv), tens[e]);
   94384:	e0bfe317 	ldw	r2,-116(fp)
   94388:	e0ffe417 	ldw	r3,-112(fp)
   9438c:	010002b4 	movhi	r4,10
   94390:	21047804 	addi	r4,r4,4576
   94394:	e17fc117 	ldw	r5,-252(fp)
   94398:	280a90fa 	slli	r5,r5,3
   9439c:	214d883a 	add	r6,r4,r5
   943a0:	31000017 	ldw	r4,0(r6)
   943a4:	31400117 	ldw	r5,4(r6)
   943a8:	200d883a 	mov	r6,r4
   943ac:	280f883a 	mov	r7,r5
   943b0:	1009883a 	mov	r4,r2
   943b4:	180b883a 	mov	r5,r3
   943b8:	00838140 	call	83814 <__muldf3>
   943bc:	1009883a 	mov	r4,r2
   943c0:	180b883a 	mov	r5,r3
   943c4:	2005883a 	mov	r2,r4
   943c8:	2807883a 	mov	r3,r5
   943cc:	e0bfe315 	stw	r2,-116(fp)
   943d0:	e0ffe415 	stw	r3,-112(fp)
				goto ret;
   943d4:	00047606 	br	955b0 <_strtod_r+0x1c8c>
#endif
				}
			i = DBL_DIG - nd;
   943d8:	00c003c4 	movi	r3,15
   943dc:	e0bfc617 	ldw	r2,-232(fp)
   943e0:	1885c83a 	sub	r2,r3,r2
   943e4:	e0bfc415 	stw	r2,-240(fp)
			if (e <= Ten_pmax + i) {
   943e8:	e0bfc417 	ldw	r2,-240(fp)
   943ec:	10c00584 	addi	r3,r2,22
   943f0:	e0bfc117 	ldw	r2,-252(fp)
   943f4:	18804616 	blt	r3,r2,94510 <_strtod_r+0xbec>
				if (sign) {
					dval(rv) = -dval(rv);
					sign = 0;
					}
#endif
				e -= i;
   943f8:	e0ffc117 	ldw	r3,-252(fp)
   943fc:	e0bfc417 	ldw	r2,-240(fp)
   94400:	1885c83a 	sub	r2,r3,r2
   94404:	e0bfc115 	stw	r2,-252(fp)
				dval(rv) *= tens[i];
   94408:	e0bfe317 	ldw	r2,-116(fp)
   9440c:	e0ffe417 	ldw	r3,-112(fp)
   94410:	010002b4 	movhi	r4,10
   94414:	21047804 	addi	r4,r4,4576
   94418:	e17fc417 	ldw	r5,-240(fp)
   9441c:	280a90fa 	slli	r5,r5,3
   94420:	214d883a 	add	r6,r4,r5
   94424:	31000017 	ldw	r4,0(r6)
   94428:	31400117 	ldw	r5,4(r6)
   9442c:	200d883a 	mov	r6,r4
   94430:	280f883a 	mov	r7,r5
   94434:	1009883a 	mov	r4,r2
   94438:	180b883a 	mov	r5,r3
   9443c:	00838140 	call	83814 <__muldf3>
   94440:	1009883a 	mov	r4,r2
   94444:	180b883a 	mov	r5,r3
   94448:	2005883a 	mov	r2,r4
   9444c:	2807883a 	mov	r3,r5
   94450:	e0bfe315 	stw	r2,-116(fp)
   94454:	e0ffe415 	stw	r3,-112(fp)
				if ((dword0(rv) & Exp_mask)
				 > Exp_msk1*(DBL_MAX_EXP+Bias-1-P))
					goto ovfl;
				dword0(rv) += P*Exp_msk1;
#else
				/* rv = */ rounded_product(dval(rv), tens[e]);
   94458:	e0bfe317 	ldw	r2,-116(fp)
   9445c:	e0ffe417 	ldw	r3,-112(fp)
   94460:	010002b4 	movhi	r4,10
   94464:	21047804 	addi	r4,r4,4576
   94468:	e17fc117 	ldw	r5,-252(fp)
   9446c:	280a90fa 	slli	r5,r5,3
   94470:	214d883a 	add	r6,r4,r5
   94474:	31000017 	ldw	r4,0(r6)
   94478:	31400117 	ldw	r5,4(r6)
   9447c:	200d883a 	mov	r6,r4
   94480:	280f883a 	mov	r7,r5
   94484:	1009883a 	mov	r4,r2
   94488:	180b883a 	mov	r5,r3
   9448c:	00838140 	call	83814 <__muldf3>
   94490:	1009883a 	mov	r4,r2
   94494:	180b883a 	mov	r5,r3
   94498:	2005883a 	mov	r2,r4
   9449c:	2807883a 	mov	r3,r5
   944a0:	e0bfe315 	stw	r2,-116(fp)
   944a4:	e0ffe415 	stw	r3,-112(fp)
#endif
				goto ret;
   944a8:	00044106 	br	955b0 <_strtod_r+0x1c8c>
				}
			}
#ifndef Inaccurate_Divide
		else if (e >= -Ten_pmax) {
   944ac:	e0bfc117 	ldw	r2,-252(fp)
   944b0:	10bffa90 	cmplti	r2,r2,-22
   944b4:	1000161e 	bne	r2,zero,94510 <_strtod_r+0xbec>
			if (sign) {
				dval(rv) = -dval(rv);
				sign = 0;
				}
#endif
			/* rv = */ rounded_quotient(dval(rv), tens[-e]);
   944b8:	e0bfe317 	ldw	r2,-116(fp)
   944bc:	e0ffe417 	ldw	r3,-112(fp)
   944c0:	e13fc117 	ldw	r4,-252(fp)
   944c4:	010bc83a 	sub	r5,zero,r4
   944c8:	010002b4 	movhi	r4,10
   944cc:	21047804 	addi	r4,r4,4576
   944d0:	280a90fa 	slli	r5,r5,3
   944d4:	214d883a 	add	r6,r4,r5
   944d8:	31000017 	ldw	r4,0(r6)
   944dc:	31400117 	ldw	r5,4(r6)
   944e0:	200d883a 	mov	r6,r4
   944e4:	280f883a 	mov	r7,r5
   944e8:	1009883a 	mov	r4,r2
   944ec:	180b883a 	mov	r5,r3
   944f0:	0082c740 	call	82c74 <__divdf3>
   944f4:	1009883a 	mov	r4,r2
   944f8:	180b883a 	mov	r5,r3
   944fc:	2005883a 	mov	r2,r4
   94500:	2807883a 	mov	r3,r5
   94504:	e0bfe315 	stw	r2,-116(fp)
   94508:	e0ffe415 	stw	r3,-112(fp)
			goto ret;
   9450c:	00042806 	br	955b0 <_strtod_r+0x1c8c>
			}
#endif
		}
	e1 += nd - k;
   94510:	e0ffc617 	ldw	r3,-232(fp)
   94514:	e0bfd917 	ldw	r2,-156(fp)
   94518:	1885c83a 	sub	r2,r3,r2
   9451c:	e0ffc217 	ldw	r3,-248(fp)
   94520:	1885883a 	add	r2,r3,r2
   94524:	e0bfc215 	stw	r2,-248(fp)
	inexact = 1;
	if (k <= DBL_DIG)
		oldinexact = get_inexact();
#endif
#ifdef Avoid_Underflow
	scale = 0;
   94528:	e03fb915 	stw	zero,-284(fp)
#endif
#endif /*IEEE_Arith*/

	/* Get starting approximation = rv * 10**e1 */

	if (e1 > 0) {
   9452c:	e0bfc217 	ldw	r2,-248(fp)
   94530:	0080980e 	bge	zero,r2,94794 <_strtod_r+0xe70>
		if ( (i = e1 & 15) !=0)
   94534:	e0bfc217 	ldw	r2,-248(fp)
   94538:	108003cc 	andi	r2,r2,15
   9453c:	e0bfc415 	stw	r2,-240(fp)
   94540:	e0bfc417 	ldw	r2,-240(fp)
   94544:	10001426 	beq	r2,zero,94598 <_strtod_r+0xc74>
			dval(rv) *= tens[i];
   94548:	e0bfe317 	ldw	r2,-116(fp)
   9454c:	e0ffe417 	ldw	r3,-112(fp)
   94550:	010002b4 	movhi	r4,10
   94554:	21047804 	addi	r4,r4,4576
   94558:	e17fc417 	ldw	r5,-240(fp)
   9455c:	280a90fa 	slli	r5,r5,3
   94560:	214d883a 	add	r6,r4,r5
   94564:	31000017 	ldw	r4,0(r6)
   94568:	31400117 	ldw	r5,4(r6)
   9456c:	200d883a 	mov	r6,r4
   94570:	280f883a 	mov	r7,r5
   94574:	1009883a 	mov	r4,r2
   94578:	180b883a 	mov	r5,r3
   9457c:	00838140 	call	83814 <__muldf3>
   94580:	1009883a 	mov	r4,r2
   94584:	180b883a 	mov	r5,r3
   94588:	2005883a 	mov	r2,r4
   9458c:	2807883a 	mov	r3,r5
   94590:	e0bfe315 	stw	r2,-116(fp)
   94594:	e0ffe415 	stw	r3,-112(fp)
		if (e1 &= ~15) {
   94598:	e0ffc217 	ldw	r3,-248(fp)
   9459c:	00bffc04 	movi	r2,-16
   945a0:	1884703a 	and	r2,r3,r2
   945a4:	e0bfc215 	stw	r2,-248(fp)
   945a8:	e0bfc217 	ldw	r2,-248(fp)
   945ac:	1000ff26 	beq	r2,zero,949ac <_strtod_r+0x1088>
			if (e1 > DBL_MAX_10_EXP) {
   945b0:	e0bfc217 	ldw	r2,-248(fp)
   945b4:	10804d50 	cmplti	r2,r2,309
   945b8:	1000251e 	bne	r2,zero,94650 <_strtod_r+0xd2c>
   945bc:	00001b06 	br	9462c <_strtod_r+0xd08>
		/* The last multiplication could overflow. */
			dword0(rv) -= P*Exp_msk1;
			dval(rv) *= bigtens[j];
			if ((z = dword0(rv) & Exp_mask)
			 > Exp_msk1*(DBL_MAX_EXP+Bias-P))
				goto ovfl;
   945c0:	0001883a 	nop
   945c4:	00001906 	br	9462c <_strtod_r+0xd08>

	/* Put digits into bd: true value = bd * 10^e */

	bd0 = s2b(ptr, s0, nd0, nd, y);
	if (bd0 == NULL)
		goto ovfl;
   945c8:	0001883a 	nop
   945cc:	00001706 	br	9462c <_strtod_r+0xd08>

	for(;;) {
		bd = Balloc(ptr,bd0->_k);
		if (bd == NULL)
			goto ovfl;
   945d0:	0001883a 	nop
   945d4:	00001506 	br	9462c <_strtod_r+0xd08>
		Bcopy(bd, bd0);
		bb = d2b(ptr,dval(rv), &bbe, &bbbits);	/* rv = bb * 2^bbe */
		if (bb == NULL)
			goto ovfl;
   945d8:	0001883a 	nop
   945dc:	00001306 	br	9462c <_strtod_r+0xd08>
		bs = i2b(ptr,1);
		if (bs == NULL)
			goto ovfl;
   945e0:	0001883a 	nop
   945e4:	00001106 	br	9462c <_strtod_r+0xd08>
			bs2 -= i;
			}
		if (bb5 > 0) {
			bs = pow5mult(ptr, bs, bb5);
			if (bs == NULL)
				goto ovfl;
   945e8:	0001883a 	nop
   945ec:	00000f06 	br	9462c <_strtod_r+0xd08>
			bb1 = mult(ptr, bs, bb);
			if (bb1 == NULL)
				goto ovfl;
   945f0:	0001883a 	nop
   945f4:	00000d06 	br	9462c <_strtod_r+0xd08>
			bb = bb1;
			}
		if (bb2 > 0) {
			bb = lshift(ptr, bb, bb2);
			if (bb == NULL)
				goto ovfl;
   945f8:	0001883a 	nop
   945fc:	00000b06 	br	9462c <_strtod_r+0xd08>
			}
		if (bd5 > 0) {
			bd = pow5mult(ptr, bd, bd5);
			if (bd == NULL)
				goto ovfl;
   94600:	0001883a 	nop
   94604:	00000906 	br	9462c <_strtod_r+0xd08>
			}
		if (bd2 > 0) {
			bd = lshift(ptr, bd, bd2);
			if (bd == NULL)
				goto ovfl;
   94608:	0001883a 	nop
   9460c:	00000706 	br	9462c <_strtod_r+0xd08>
			}
		if (bs2 > 0) {
			bs = lshift(ptr, bs, bs2);
			if (bs == NULL)
				goto ovfl;
   94610:	0001883a 	nop
   94614:	00000506 	br	9462c <_strtod_r+0xd08>
			}
		delta = diff(ptr, bb, bd);
		if (delta == NULL)
			goto ovfl;
   94618:	0001883a 	nop
   9461c:	00000306 	br	9462c <_strtod_r+0xd08>
		? (0xffffffff & (0xffffffff << (2*P+1-(y>>Exp_shift)))) :
#endif
						   0xffffffff)) {
					/*boundary case -- increment exponent*/
					if (dword0(rv) == Big0 && dword1(rv) == Big1)
						goto ovfl;
   94620:	0001883a 	nop
   94624:	00000106 	br	9462c <_strtod_r+0xd08>
			adj = dval(aadj1) * ulp(dval(rv));
			dval(rv) += adj;
			if ((dword0(rv) & Exp_mask) >=
					Exp_msk1*(DBL_MAX_EXP+Bias-P)) {
				if (dword0(rv0) == Big0 && dword1(rv0) == Big1)
					goto ovfl;
   94628:	0001883a 	nop
			dval(rv) *= tens[i];
		if (e1 &= ~15) {
			if (e1 > DBL_MAX_10_EXP) {
 ovfl:
#ifndef NO_ERRNO
				ptr->_errno = ERANGE;
   9462c:	e0bfed17 	ldw	r2,-76(fp)
   94630:	00c00884 	movi	r3,34
   94634:	10c00015 	stw	r3,0(r2)
#ifndef _DOUBLE_IS_32BITS
					dword1(rv) = 0;
#endif /*!_DOUBLE_IS_32BITS*/
				  }
#else /*Honor_FLT_ROUNDS*/
				dword0(rv) = Exp_mask;
   94638:	009ffc34 	movhi	r2,32752
   9463c:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
				dword1(rv) = 0;
   94640:	e03fe315 	stw	zero,-116(fp)
				dword0(rv) = Big0;
#ifndef _DOUBLE_IS_32BITS
				dword1(rv) = Big1;
#endif /*!_DOUBLE_IS_32BITS*/
#endif /*IEEE_Arith*/
				if (bd0)
   94644:	e0bfd317 	ldw	r2,-180(fp)
   94648:	1003d626 	beq	r2,zero,955a4 <_strtod_r+0x1c80>
					goto retfree;
   9464c:	0003bc06 	br	95540 <_strtod_r+0x1c1c>
				goto ret;
				}
			e1 >>= 4;
   94650:	e0bfc217 	ldw	r2,-248(fp)
   94654:	1005d13a 	srai	r2,r2,4
   94658:	e0bfc215 	stw	r2,-248(fp)
			for(j = 0; e1 > 1; j++, e1 >>= 1)
   9465c:	e03fc515 	stw	zero,-236(fp)
   94660:	00001d06 	br	946d8 <_strtod_r+0xdb4>
				if (e1 & 1)
   94664:	e0bfc217 	ldw	r2,-248(fp)
   94668:	1080004c 	andi	r2,r2,1
   9466c:	10001426 	beq	r2,zero,946c0 <_strtod_r+0xd9c>
					dval(rv) *= bigtens[j];
   94670:	e0bfe317 	ldw	r2,-116(fp)
   94674:	e0ffe417 	ldw	r3,-112(fp)
   94678:	010002b4 	movhi	r4,10
   9467c:	2104aa04 	addi	r4,r4,4776
   94680:	e17fc517 	ldw	r5,-236(fp)
   94684:	280a90fa 	slli	r5,r5,3
   94688:	214d883a 	add	r6,r4,r5
   9468c:	31000017 	ldw	r4,0(r6)
   94690:	31400117 	ldw	r5,4(r6)
   94694:	200d883a 	mov	r6,r4
   94698:	280f883a 	mov	r7,r5
   9469c:	1009883a 	mov	r4,r2
   946a0:	180b883a 	mov	r5,r3
   946a4:	00838140 	call	83814 <__muldf3>
   946a8:	1009883a 	mov	r4,r2
   946ac:	180b883a 	mov	r5,r3
   946b0:	2005883a 	mov	r2,r4
   946b4:	2807883a 	mov	r3,r5
   946b8:	e0bfe315 	stw	r2,-116(fp)
   946bc:	e0ffe415 	stw	r3,-112(fp)
				if (bd0)
					goto retfree;
				goto ret;
				}
			e1 >>= 4;
			for(j = 0; e1 > 1; j++, e1 >>= 1)
   946c0:	e0bfc517 	ldw	r2,-236(fp)
   946c4:	10800044 	addi	r2,r2,1
   946c8:	e0bfc515 	stw	r2,-236(fp)
   946cc:	e0bfc217 	ldw	r2,-248(fp)
   946d0:	1005d07a 	srai	r2,r2,1
   946d4:	e0bfc215 	stw	r2,-248(fp)
   946d8:	e0bfc217 	ldw	r2,-248(fp)
   946dc:	10800088 	cmpgei	r2,r2,2
   946e0:	103fe01e 	bne	r2,zero,94664 <__alt_data_end+0xfffe2664>
				if (e1 & 1)
					dval(rv) *= bigtens[j];
		/* The last multiplication could overflow. */
			dword0(rv) -= P*Exp_msk1;
   946e4:	e0ffe417 	ldw	r3,-112(fp)
   946e8:	00bf2c34 	movhi	r2,64688
   946ec:	1885883a 	add	r2,r3,r2
   946f0:	e0bfe415 	stw	r2,-112(fp)
			dval(rv) *= bigtens[j];
   946f4:	e0bfe317 	ldw	r2,-116(fp)
   946f8:	e0ffe417 	ldw	r3,-112(fp)
   946fc:	010002b4 	movhi	r4,10
   94700:	2104aa04 	addi	r4,r4,4776
   94704:	e17fc517 	ldw	r5,-236(fp)
   94708:	280a90fa 	slli	r5,r5,3
   9470c:	214d883a 	add	r6,r4,r5
   94710:	31000017 	ldw	r4,0(r6)
   94714:	31400117 	ldw	r5,4(r6)
   94718:	200d883a 	mov	r6,r4
   9471c:	280f883a 	mov	r7,r5
   94720:	1009883a 	mov	r4,r2
   94724:	180b883a 	mov	r5,r3
   94728:	00838140 	call	83814 <__muldf3>
   9472c:	1009883a 	mov	r4,r2
   94730:	180b883a 	mov	r5,r3
   94734:	2005883a 	mov	r2,r4
   94738:	2807883a 	mov	r3,r5
   9473c:	e0bfe315 	stw	r2,-116(fp)
   94740:	e0ffe415 	stw	r3,-112(fp)
			if ((z = dword0(rv) & Exp_mask)
   94744:	e0bfe417 	ldw	r2,-112(fp)
   94748:	109ffc2c 	andhi	r2,r2,32752
   9474c:	e0bfd115 	stw	r2,-188(fp)
   94750:	e0bfd117 	ldw	r2,-188(fp)
   94754:	00df2834 	movhi	r3,31904
   94758:	18bf9936 	bltu	r3,r2,945c0 <__alt_data_end+0xfffe25c0>
			 > Exp_msk1*(DBL_MAX_EXP+Bias-P))
				goto ovfl;
			if (z > Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
   9475c:	e0bfd117 	ldw	r2,-188(fp)
   94760:	00df2434 	movhi	r3,31888
   94764:	1880062e 	bgeu	r3,r2,94780 <_strtod_r+0xe5c>
				/* set to largest number */
				/* (Can't trust DBL_MAX) */
				dword0(rv) = Big0;
   94768:	009ffc34 	movhi	r2,32752
   9476c:	10bfffc4 	addi	r2,r2,-1
   94770:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
				dword1(rv) = Big1;
   94774:	00bfffc4 	movi	r2,-1
   94778:	e0bfe315 	stw	r2,-116(fp)
   9477c:	00008b06 	br	949ac <_strtod_r+0x1088>
#endif /*!_DOUBLE_IS_32BITS*/
				}
			else
				dword0(rv) += P*Exp_msk1;
   94780:	e0ffe417 	ldw	r3,-112(fp)
   94784:	0080d434 	movhi	r2,848
   94788:	1885883a 	add	r2,r3,r2
   9478c:	e0bfe415 	stw	r2,-112(fp)
   94790:	00008606 	br	949ac <_strtod_r+0x1088>
			}
		}
	else if (e1 < 0) {
   94794:	e0bfc217 	ldw	r2,-248(fp)
   94798:	1000840e 	bge	r2,zero,949ac <_strtod_r+0x1088>
		e1 = -e1;
   9479c:	e0bfc217 	ldw	r2,-248(fp)
   947a0:	0085c83a 	sub	r2,zero,r2
   947a4:	e0bfc215 	stw	r2,-248(fp)
		if ( (i = e1 & 15) !=0)
   947a8:	e0bfc217 	ldw	r2,-248(fp)
   947ac:	108003cc 	andi	r2,r2,15
   947b0:	e0bfc415 	stw	r2,-240(fp)
   947b4:	e0bfc417 	ldw	r2,-240(fp)
   947b8:	10001426 	beq	r2,zero,9480c <_strtod_r+0xee8>
			dval(rv) /= tens[i];
   947bc:	e0bfe317 	ldw	r2,-116(fp)
   947c0:	e0ffe417 	ldw	r3,-112(fp)
   947c4:	010002b4 	movhi	r4,10
   947c8:	21047804 	addi	r4,r4,4576
   947cc:	e17fc417 	ldw	r5,-240(fp)
   947d0:	280a90fa 	slli	r5,r5,3
   947d4:	214d883a 	add	r6,r4,r5
   947d8:	31000017 	ldw	r4,0(r6)
   947dc:	31400117 	ldw	r5,4(r6)
   947e0:	200d883a 	mov	r6,r4
   947e4:	280f883a 	mov	r7,r5
   947e8:	1009883a 	mov	r4,r2
   947ec:	180b883a 	mov	r5,r3
   947f0:	0082c740 	call	82c74 <__divdf3>
   947f4:	1009883a 	mov	r4,r2
   947f8:	180b883a 	mov	r5,r3
   947fc:	2005883a 	mov	r2,r4
   94800:	2807883a 	mov	r3,r5
   94804:	e0bfe315 	stw	r2,-116(fp)
   94808:	e0ffe415 	stw	r3,-112(fp)
		if (e1 >>= 4) {
   9480c:	e0bfc217 	ldw	r2,-248(fp)
   94810:	1005d13a 	srai	r2,r2,4
   94814:	e0bfc215 	stw	r2,-248(fp)
   94818:	e0bfc217 	ldw	r2,-248(fp)
   9481c:	10006326 	beq	r2,zero,949ac <_strtod_r+0x1088>
			if (e1 >= 1 << n_bigtens)
   94820:	e0bfc217 	ldw	r2,-248(fp)
   94824:	10800810 	cmplti	r2,r2,32
   94828:	10005126 	beq	r2,zero,94970 <_strtod_r+0x104c>
				goto undfl;
#ifdef Avoid_Underflow
			if (e1 & Scale_Bit)
   9482c:	e0bfc217 	ldw	r2,-248(fp)
   94830:	1080040c 	andi	r2,r2,16
   94834:	10000226 	beq	r2,zero,94840 <_strtod_r+0xf1c>
				scale = 2*P;
   94838:	00801a84 	movi	r2,106
   9483c:	e0bfb915 	stw	r2,-284(fp)
			for(j = 0; e1 > 0; j++, e1 >>= 1)
   94840:	e03fc515 	stw	zero,-236(fp)
   94844:	00001d06 	br	948bc <_strtod_r+0xf98>
				if (e1 & 1)
   94848:	e0bfc217 	ldw	r2,-248(fp)
   9484c:	1080004c 	andi	r2,r2,1
   94850:	10001426 	beq	r2,zero,948a4 <_strtod_r+0xf80>
					dval(rv) *= tinytens[j];
   94854:	e0bfe317 	ldw	r2,-116(fp)
   94858:	e0ffe417 	ldw	r3,-112(fp)
   9485c:	010002b4 	movhi	r4,10
   94860:	2104c104 	addi	r4,r4,4868
   94864:	e17fc517 	ldw	r5,-236(fp)
   94868:	280a90fa 	slli	r5,r5,3
   9486c:	214d883a 	add	r6,r4,r5
   94870:	31000017 	ldw	r4,0(r6)
   94874:	31400117 	ldw	r5,4(r6)
   94878:	200d883a 	mov	r6,r4
   9487c:	280f883a 	mov	r7,r5
   94880:	1009883a 	mov	r4,r2
   94884:	180b883a 	mov	r5,r3
   94888:	00838140 	call	83814 <__muldf3>
   9488c:	1009883a 	mov	r4,r2
   94890:	180b883a 	mov	r5,r3
   94894:	2005883a 	mov	r2,r4
   94898:	2807883a 	mov	r3,r5
   9489c:	e0bfe315 	stw	r2,-116(fp)
   948a0:	e0ffe415 	stw	r3,-112(fp)
			if (e1 >= 1 << n_bigtens)
				goto undfl;
#ifdef Avoid_Underflow
			if (e1 & Scale_Bit)
				scale = 2*P;
			for(j = 0; e1 > 0; j++, e1 >>= 1)
   948a4:	e0bfc517 	ldw	r2,-236(fp)
   948a8:	10800044 	addi	r2,r2,1
   948ac:	e0bfc515 	stw	r2,-236(fp)
   948b0:	e0bfc217 	ldw	r2,-248(fp)
   948b4:	1005d07a 	srai	r2,r2,1
   948b8:	e0bfc215 	stw	r2,-248(fp)
   948bc:	e0bfc217 	ldw	r2,-248(fp)
   948c0:	00bfe116 	blt	zero,r2,94848 <__alt_data_end+0xfffe2848>
				if (e1 & 1)
					dval(rv) *= tinytens[j];
			if (scale && (j = 2*P + 1 - ((dword0(rv) & Exp_mask)
   948c4:	e0bfb917 	ldw	r2,-284(fp)
   948c8:	10002026 	beq	r2,zero,9494c <_strtod_r+0x1028>
   948cc:	e0bfe417 	ldw	r2,-112(fp)
   948d0:	109ffc2c 	andhi	r2,r2,32752
						>> Exp_shift)) > 0) {
   948d4:	1004d53a 	srli	r2,r2,20
			if (e1 & Scale_Bit)
				scale = 2*P;
			for(j = 0; e1 > 0; j++, e1 >>= 1)
				if (e1 & 1)
					dval(rv) *= tinytens[j];
			if (scale && (j = 2*P + 1 - ((dword0(rv) & Exp_mask)
   948d8:	00c01ac4 	movi	r3,107
   948dc:	1885c83a 	sub	r2,r3,r2
   948e0:	e0bfc515 	stw	r2,-236(fp)
   948e4:	e0bfc517 	ldw	r2,-236(fp)
   948e8:	0080180e 	bge	zero,r2,9494c <_strtod_r+0x1028>
						>> Exp_shift)) > 0) {
				/* scaled rv is denormal; zap j low bits */
				if (j >= 32) {
   948ec:	e0bfc517 	ldw	r2,-236(fp)
   948f0:	10800810 	cmplti	r2,r2,32
   948f4:	10000f1e 	bne	r2,zero,94934 <_strtod_r+0x1010>
#ifndef _DOUBLE_IS_32BITS
					dword1(rv) = 0;
   948f8:	e03fe315 	stw	zero,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
					if (j >= 53)
   948fc:	e0bfc517 	ldw	r2,-236(fp)
   94900:	10800d50 	cmplti	r2,r2,53
   94904:	1000031e 	bne	r2,zero,94914 <_strtod_r+0xff0>
					 dword0(rv) = (P+2)*Exp_msk1;
   94908:	0080dc34 	movhi	r2,880
   9490c:	e0bfe415 	stw	r2,-112(fp)
   94910:	00000e06 	br	9494c <_strtod_r+0x1028>
					else
					 dword0(rv) &= 0xffffffff << (j-32);
   94914:	e0ffe417 	ldw	r3,-112(fp)
   94918:	e0bfc517 	ldw	r2,-236(fp)
   9491c:	10bff804 	addi	r2,r2,-32
   94920:	013fffc4 	movi	r4,-1
   94924:	2084983a 	sll	r2,r4,r2
   94928:	1884703a 	and	r2,r3,r2
   9492c:	e0bfe415 	stw	r2,-112(fp)
   94930:	00000606 	br	9494c <_strtod_r+0x1028>
					}
#ifndef _DOUBLE_IS_32BITS
				else
					dword1(rv) &= 0xffffffff << j;
   94934:	e0ffe317 	ldw	r3,-116(fp)
   94938:	013fffc4 	movi	r4,-1
   9493c:	e0bfc517 	ldw	r2,-236(fp)
   94940:	2084983a 	sll	r2,r4,r2
   94944:	1884703a 	and	r2,r3,r2
   94948:	e0bfe315 	stw	r2,-116(fp)
			dval(rv) *= tinytens[j];
			if (!dval(rv)) {
				dval(rv) = 2.*dval(rv0);
				dval(rv) *= tinytens[j];
#endif
				if (!dval(rv)) {
   9494c:	e0bfe317 	ldw	r2,-116(fp)
   94950:	e0ffe417 	ldw	r3,-112(fp)
   94954:	000d883a 	mov	r6,zero
   94958:	000f883a 	mov	r7,zero
   9495c:	1009883a 	mov	r4,r2
   94960:	180b883a 	mov	r5,r3
   94964:	009dde80 	call	9dde8 <__eqdf2>
   94968:	1000101e 	bne	r2,zero,949ac <_strtod_r+0x1088>
   9496c:	00000706 	br	9498c <_strtod_r+0x1068>
		e1 = -e1;
		if ( (i = e1 & 15) !=0)
			dval(rv) /= tens[i];
		if (e1 >>= 4) {
			if (e1 >= 1 << n_bigtens)
				goto undfl;
   94970:	0001883a 	nop
   94974:	00000506 	br	9498c <_strtod_r+0x1068>
						if (L > (P+2)*Exp_msk1)
							/* round even ==> */
							/* accept rv */
							break;
						/* rv = smallest denormal */
						goto undfl;
   94978:	0001883a 	nop
   9497c:	00000306 	br	9498c <_strtod_r+0x1068>
#else
				dval(rv) -= ulp(dval(rv));
#endif
#ifndef Sudden_Underflow
				if (!dval(rv))
					goto undfl;
   94980:	0001883a 	nop
   94984:	00000106 	br	9498c <_strtod_r+0x1068>
			if (dsign)
				aadj = dval(aadj1) = 1.;
			else if (dword1(rv) || dword0(rv) & Bndry_mask) {
#ifndef Sudden_Underflow
				if (dword1(rv) == Tiny1 && !dword0(rv))
					goto undfl;
   94988:	0001883a 	nop
				dval(rv) = 2.*dval(rv0);
				dval(rv) *= tinytens[j];
#endif
				if (!dval(rv)) {
 undfl:
					dval(rv) = 0.;
   9498c:	e03fe315 	stw	zero,-116(fp)
   94990:	e03fe415 	stw	zero,-112(fp)
#ifndef NO_ERRNO
					ptr->_errno = ERANGE;
   94994:	e0bfed17 	ldw	r2,-76(fp)
   94998:	00c00884 	movi	r3,34
   9499c:	10c00015 	stw	r3,0(r2)
#endif
					if (bd0)
   949a0:	e0bfd317 	ldw	r2,-180(fp)
   949a4:	10030126 	beq	r2,zero,955ac <_strtod_r+0x1c88>
						goto retfree;
   949a8:	0002e506 	br	95540 <_strtod_r+0x1c1c>

	/* Now the hard part -- adjusting rv to the correct value.*/

	/* Put digits into bd: true value = bd * 10^e */

	bd0 = s2b(ptr, s0, nd0, nd, y);
   949ac:	e0bfd017 	ldw	r2,-192(fp)
   949b0:	d8800015 	stw	r2,0(sp)
   949b4:	e1ffc617 	ldw	r7,-232(fp)
   949b8:	e1bfc717 	ldw	r6,-228(fp)
   949bc:	e17fcc17 	ldw	r5,-208(fp)
   949c0:	e13fed17 	ldw	r4,-76(fp)
   949c4:	0090d840 	call	90d84 <__s2b>
   949c8:	e0bfd315 	stw	r2,-180(fp)
	if (bd0 == NULL)
   949cc:	e0bfd317 	ldw	r2,-180(fp)
   949d0:	103efd26 	beq	r2,zero,945c8 <__alt_data_end+0xfffe25c8>
		goto ovfl;

	for(;;) {
		bd = Balloc(ptr,bd0->_k);
   949d4:	e0bfd317 	ldw	r2,-180(fp)
   949d8:	10800117 	ldw	r2,4(r2)
   949dc:	100b883a 	mov	r5,r2
   949e0:	e13fed17 	ldw	r4,-76(fp)
   949e4:	0090a2c0 	call	90a2c <_Balloc>
   949e8:	e0bfd215 	stw	r2,-184(fp)
		if (bd == NULL)
   949ec:	e0bfd217 	ldw	r2,-184(fp)
   949f0:	103ef726 	beq	r2,zero,945d0 <__alt_data_end+0xfffe25d0>
			goto ovfl;
		Bcopy(bd, bd0);
   949f4:	e0bfd217 	ldw	r2,-184(fp)
   949f8:	10c00304 	addi	r3,r2,12
   949fc:	e0bfd317 	ldw	r2,-180(fp)
   94a00:	11000304 	addi	r4,r2,12
   94a04:	e0bfd317 	ldw	r2,-180(fp)
   94a08:	10800417 	ldw	r2,16(r2)
   94a0c:	10800084 	addi	r2,r2,2
   94a10:	1085883a 	add	r2,r2,r2
   94a14:	1085883a 	add	r2,r2,r2
   94a18:	100d883a 	mov	r6,r2
   94a1c:	200b883a 	mov	r5,r4
   94a20:	1809883a 	mov	r4,r3
   94a24:	009069c0 	call	9069c <memcpy>
		bb = d2b(ptr,dval(rv), &bbe, &bbbits);	/* rv = bb * 2^bbe */
   94a28:	e0bfe317 	ldw	r2,-116(fp)
   94a2c:	e0ffe417 	ldw	r3,-112(fp)
   94a30:	e17fde04 	addi	r5,fp,-136
   94a34:	e13fdf04 	addi	r4,fp,-132
   94a38:	d9000015 	stw	r4,0(sp)
   94a3c:	280f883a 	mov	r7,r5
   94a40:	100b883a 	mov	r5,r2
   94a44:	180d883a 	mov	r6,r3
   94a48:	e13fed17 	ldw	r4,-76(fp)
   94a4c:	0091ecc0 	call	91ecc <__d2b>
   94a50:	e0bfe715 	stw	r2,-100(fp)
		if (bb == NULL)
   94a54:	e0bfe717 	ldw	r2,-100(fp)
   94a58:	103edf26 	beq	r2,zero,945d8 <__alt_data_end+0xfffe25d8>
			goto ovfl;
		bs = i2b(ptr,1);
   94a5c:	01400044 	movi	r5,1
   94a60:	e13fed17 	ldw	r4,-76(fp)
   94a64:	009108c0 	call	9108c <__i2b>
   94a68:	e0bfd415 	stw	r2,-176(fp)
		if (bs == NULL)
   94a6c:	e0bfd417 	ldw	r2,-176(fp)
   94a70:	103edb26 	beq	r2,zero,945e0 <__alt_data_end+0xfffe25e0>
			goto ovfl;

		if (e >= 0) {
   94a74:	e0bfc117 	ldw	r2,-252(fp)
   94a78:	10000816 	blt	r2,zero,94a9c <_strtod_r+0x1178>
			bb2 = bb5 = 0;
   94a7c:	e03fbb15 	stw	zero,-276(fp)
   94a80:	e0bfbb17 	ldw	r2,-276(fp)
   94a84:	e0bfba15 	stw	r2,-280(fp)
			bd2 = bd5 = e;
   94a88:	e0bfc117 	ldw	r2,-252(fp)
   94a8c:	e0bfbd15 	stw	r2,-268(fp)
   94a90:	e0bfbd17 	ldw	r2,-268(fp)
   94a94:	e0bfbc15 	stw	r2,-272(fp)
   94a98:	00000806 	br	94abc <_strtod_r+0x1198>
			}
		else {
			bb2 = bb5 = -e;
   94a9c:	e0bfc117 	ldw	r2,-252(fp)
   94aa0:	0085c83a 	sub	r2,zero,r2
   94aa4:	e0bfbb15 	stw	r2,-276(fp)
   94aa8:	e0bfbb17 	ldw	r2,-276(fp)
   94aac:	e0bfba15 	stw	r2,-280(fp)
			bd2 = bd5 = 0;
   94ab0:	e03fbd15 	stw	zero,-268(fp)
   94ab4:	e0bfbd17 	ldw	r2,-268(fp)
   94ab8:	e0bfbc15 	stw	r2,-272(fp)
			}
		if (bbe >= 0)
   94abc:	e0bfde17 	ldw	r2,-136(fp)
   94ac0:	10000516 	blt	r2,zero,94ad8 <_strtod_r+0x11b4>
			bb2 += bbe;
   94ac4:	e0bfde17 	ldw	r2,-136(fp)
   94ac8:	e0ffba17 	ldw	r3,-280(fp)
   94acc:	1885883a 	add	r2,r3,r2
   94ad0:	e0bfba15 	stw	r2,-280(fp)
   94ad4:	00000406 	br	94ae8 <_strtod_r+0x11c4>
		else
			bd2 -= bbe;
   94ad8:	e0bfde17 	ldw	r2,-136(fp)
   94adc:	e0ffbc17 	ldw	r3,-272(fp)
   94ae0:	1885c83a 	sub	r2,r3,r2
   94ae4:	e0bfbc15 	stw	r2,-272(fp)
		bs2 = bb2;
   94ae8:	e0bfba17 	ldw	r2,-280(fp)
   94aec:	e0bfbe15 	stw	r2,-264(fp)
#ifdef Honor_FLT_ROUNDS
		if (rounding != 1)
			bs2++;
#endif
#ifdef Avoid_Underflow
		Lsb = LSB;
   94af0:	00800044 	movi	r2,1
   94af4:	e0bfd615 	stw	r2,-168(fp)
		Lsb1 = 0;
   94af8:	e03fd715 	stw	zero,-164(fp)
		j = bbe - scale;
   94afc:	e0ffde17 	ldw	r3,-136(fp)
   94b00:	e0bfb917 	ldw	r2,-284(fp)
   94b04:	1885c83a 	sub	r2,r3,r2
   94b08:	e0bfc515 	stw	r2,-236(fp)
		i = j + bbbits - 1;	/* logb(rv) */
   94b0c:	e0ffdf17 	ldw	r3,-132(fp)
   94b10:	e0bfc517 	ldw	r2,-236(fp)
   94b14:	1885883a 	add	r2,r3,r2
   94b18:	10bfffc4 	addi	r2,r2,-1
   94b1c:	e0bfc415 	stw	r2,-240(fp)
		j = P + 1 - bbbits;
   94b20:	e0bfdf17 	ldw	r2,-132(fp)
   94b24:	00c00d84 	movi	r3,54
   94b28:	1885c83a 	sub	r2,r3,r2
   94b2c:	e0bfc515 	stw	r2,-236(fp)
		if (i < Emin) {	/* denormal */
   94b30:	e0bfc417 	ldw	r2,-240(fp)
   94b34:	10bf0088 	cmpgei	r2,r2,-1022
   94b38:	1000151e 	bne	r2,zero,94b90 <_strtod_r+0x126c>
			i = Emin - i;
   94b3c:	00ff0084 	movi	r3,-1022
   94b40:	e0bfc417 	ldw	r2,-240(fp)
   94b44:	1885c83a 	sub	r2,r3,r2
   94b48:	e0bfc415 	stw	r2,-240(fp)
			j -= i;
   94b4c:	e0ffc517 	ldw	r3,-236(fp)
   94b50:	e0bfc417 	ldw	r2,-240(fp)
   94b54:	1885c83a 	sub	r2,r3,r2
   94b58:	e0bfc515 	stw	r2,-236(fp)
			if (i < 32)
   94b5c:	e0bfc417 	ldw	r2,-240(fp)
   94b60:	10800808 	cmpgei	r2,r2,32
   94b64:	1000051e 	bne	r2,zero,94b7c <_strtod_r+0x1258>
				Lsb <<= i;
   94b68:	e0ffd617 	ldw	r3,-168(fp)
   94b6c:	e0bfc417 	ldw	r2,-240(fp)
   94b70:	1884983a 	sll	r2,r3,r2
   94b74:	e0bfd615 	stw	r2,-168(fp)
   94b78:	00000506 	br	94b90 <_strtod_r+0x126c>
			else
				Lsb1 = Lsb << (i-32);
   94b7c:	e0bfc417 	ldw	r2,-240(fp)
   94b80:	10bff804 	addi	r2,r2,-32
   94b84:	e0ffd617 	ldw	r3,-168(fp)
   94b88:	1884983a 	sll	r2,r3,r2
   94b8c:	e0bfd715 	stw	r2,-164(fp)
			j += P - Emin;
		else
			j = P + 1 - bbbits;
#endif /*Sudden_Underflow*/
#endif /*Avoid_Underflow*/
		bb2 += j;
   94b90:	e0ffba17 	ldw	r3,-280(fp)
   94b94:	e0bfc517 	ldw	r2,-236(fp)
   94b98:	1885883a 	add	r2,r3,r2
   94b9c:	e0bfba15 	stw	r2,-280(fp)
		bd2 += j;
   94ba0:	e0ffbc17 	ldw	r3,-272(fp)
   94ba4:	e0bfc517 	ldw	r2,-236(fp)
   94ba8:	1885883a 	add	r2,r3,r2
   94bac:	e0bfbc15 	stw	r2,-272(fp)
#ifdef Avoid_Underflow
		bd2 += scale;
   94bb0:	e0ffbc17 	ldw	r3,-272(fp)
   94bb4:	e0bfb917 	ldw	r2,-284(fp)
   94bb8:	1885883a 	add	r2,r3,r2
   94bbc:	e0bfbc15 	stw	r2,-272(fp)
#endif
		i = bb2 < bd2 ? bb2 : bd2;
   94bc0:	e0ffba17 	ldw	r3,-280(fp)
   94bc4:	e0bfbc17 	ldw	r2,-272(fp)
   94bc8:	1880010e 	bge	r3,r2,94bd0 <_strtod_r+0x12ac>
   94bcc:	1805883a 	mov	r2,r3
   94bd0:	e0bfc415 	stw	r2,-240(fp)
		if (i > bs2)
   94bd4:	e0bfc417 	ldw	r2,-240(fp)
   94bd8:	e0ffbe17 	ldw	r3,-264(fp)
   94bdc:	1880020e 	bge	r3,r2,94be8 <_strtod_r+0x12c4>
			i = bs2;
   94be0:	e0bfbe17 	ldw	r2,-264(fp)
   94be4:	e0bfc415 	stw	r2,-240(fp)
		if (i > 0) {
   94be8:	e0bfc417 	ldw	r2,-240(fp)
   94bec:	00800c0e 	bge	zero,r2,94c20 <_strtod_r+0x12fc>
			bb2 -= i;
   94bf0:	e0ffba17 	ldw	r3,-280(fp)
   94bf4:	e0bfc417 	ldw	r2,-240(fp)
   94bf8:	1885c83a 	sub	r2,r3,r2
   94bfc:	e0bfba15 	stw	r2,-280(fp)
			bd2 -= i;
   94c00:	e0ffbc17 	ldw	r3,-272(fp)
   94c04:	e0bfc417 	ldw	r2,-240(fp)
   94c08:	1885c83a 	sub	r2,r3,r2
   94c0c:	e0bfbc15 	stw	r2,-272(fp)
			bs2 -= i;
   94c10:	e0ffbe17 	ldw	r3,-264(fp)
   94c14:	e0bfc417 	ldw	r2,-240(fp)
   94c18:	1885c83a 	sub	r2,r3,r2
   94c1c:	e0bfbe15 	stw	r2,-264(fp)
			}
		if (bb5 > 0) {
   94c20:	e0bfbb17 	ldw	r2,-276(fp)
   94c24:	0080150e 	bge	zero,r2,94c7c <_strtod_r+0x1358>
			bs = pow5mult(ptr, bs, bb5);
   94c28:	e1bfbb17 	ldw	r6,-276(fp)
   94c2c:	e17fd417 	ldw	r5,-176(fp)
   94c30:	e13fed17 	ldw	r4,-76(fp)
   94c34:	00914d40 	call	914d4 <__pow5mult>
   94c38:	e0bfd415 	stw	r2,-176(fp)
			if (bs == NULL)
   94c3c:	e0bfd417 	ldw	r2,-176(fp)
   94c40:	103e6926 	beq	r2,zero,945e8 <__alt_data_end+0xfffe25e8>
				goto ovfl;
			bb1 = mult(ptr, bs, bb);
   94c44:	e0bfe717 	ldw	r2,-100(fp)
   94c48:	100d883a 	mov	r6,r2
   94c4c:	e17fd417 	ldw	r5,-176(fp)
   94c50:	e13fed17 	ldw	r4,-76(fp)
   94c54:	00910e40 	call	910e4 <__multiply>
   94c58:	e0bfda15 	stw	r2,-152(fp)
			if (bb1 == NULL)
   94c5c:	e0bfda17 	ldw	r2,-152(fp)
   94c60:	103e6326 	beq	r2,zero,945f0 <__alt_data_end+0xfffe25f0>
				goto ovfl;
			Bfree(ptr, bb);
   94c64:	e0bfe717 	ldw	r2,-100(fp)
   94c68:	100b883a 	mov	r5,r2
   94c6c:	e13fed17 	ldw	r4,-76(fp)
   94c70:	0090b5c0 	call	90b5c <_Bfree>
			bb = bb1;
   94c74:	e0bfda17 	ldw	r2,-152(fp)
   94c78:	e0bfe715 	stw	r2,-100(fp)
			}
		if (bb2 > 0) {
   94c7c:	e0bfba17 	ldw	r2,-280(fp)
   94c80:	0080080e 	bge	zero,r2,94ca4 <_strtod_r+0x1380>
			bb = lshift(ptr, bb, bb2);
   94c84:	e0bfe717 	ldw	r2,-100(fp)
   94c88:	e1bfba17 	ldw	r6,-280(fp)
   94c8c:	100b883a 	mov	r5,r2
   94c90:	e13fed17 	ldw	r4,-76(fp)
   94c94:	009164c0 	call	9164c <__lshift>
   94c98:	e0bfe715 	stw	r2,-100(fp)
			if (bb == NULL)
   94c9c:	e0bfe717 	ldw	r2,-100(fp)
   94ca0:	103e5526 	beq	r2,zero,945f8 <__alt_data_end+0xfffe25f8>
				goto ovfl;
			}
		if (bd5 > 0) {
   94ca4:	e0bfbd17 	ldw	r2,-268(fp)
   94ca8:	0080070e 	bge	zero,r2,94cc8 <_strtod_r+0x13a4>
			bd = pow5mult(ptr, bd, bd5);
   94cac:	e1bfbd17 	ldw	r6,-268(fp)
   94cb0:	e17fd217 	ldw	r5,-184(fp)
   94cb4:	e13fed17 	ldw	r4,-76(fp)
   94cb8:	00914d40 	call	914d4 <__pow5mult>
   94cbc:	e0bfd215 	stw	r2,-184(fp)
			if (bd == NULL)
   94cc0:	e0bfd217 	ldw	r2,-184(fp)
   94cc4:	103e4e26 	beq	r2,zero,94600 <__alt_data_end+0xfffe2600>
				goto ovfl;
			}
		if (bd2 > 0) {
   94cc8:	e0bfbc17 	ldw	r2,-272(fp)
   94ccc:	0080070e 	bge	zero,r2,94cec <_strtod_r+0x13c8>
			bd = lshift(ptr, bd, bd2);
   94cd0:	e1bfbc17 	ldw	r6,-272(fp)
   94cd4:	e17fd217 	ldw	r5,-184(fp)
   94cd8:	e13fed17 	ldw	r4,-76(fp)
   94cdc:	009164c0 	call	9164c <__lshift>
   94ce0:	e0bfd215 	stw	r2,-184(fp)
			if (bd == NULL)
   94ce4:	e0bfd217 	ldw	r2,-184(fp)
   94ce8:	103e4726 	beq	r2,zero,94608 <__alt_data_end+0xfffe2608>
				goto ovfl;
			}
		if (bs2 > 0) {
   94cec:	e0bfbe17 	ldw	r2,-264(fp)
   94cf0:	0080070e 	bge	zero,r2,94d10 <_strtod_r+0x13ec>
			bs = lshift(ptr, bs, bs2);
   94cf4:	e1bfbe17 	ldw	r6,-264(fp)
   94cf8:	e17fd417 	ldw	r5,-176(fp)
   94cfc:	e13fed17 	ldw	r4,-76(fp)
   94d00:	009164c0 	call	9164c <__lshift>
   94d04:	e0bfd415 	stw	r2,-176(fp)
			if (bs == NULL)
   94d08:	e0bfd417 	ldw	r2,-176(fp)
   94d0c:	103e4026 	beq	r2,zero,94610 <__alt_data_end+0xfffe2610>
				goto ovfl;
			}
		delta = diff(ptr, bb, bd);
   94d10:	e0bfe717 	ldw	r2,-100(fp)
   94d14:	e1bfd217 	ldw	r6,-184(fp)
   94d18:	100b883a 	mov	r5,r2
   94d1c:	e13fed17 	ldw	r4,-76(fp)
   94d20:	00919580 	call	91958 <__mdiff>
   94d24:	e0bfd515 	stw	r2,-172(fp)
		if (delta == NULL)
   94d28:	e0bfd517 	ldw	r2,-172(fp)
   94d2c:	103e3a26 	beq	r2,zero,94618 <__alt_data_end+0xfffe2618>
			goto ovfl;
		dsign = delta->_sign;
   94d30:	e0bfd517 	ldw	r2,-172(fp)
   94d34:	10800317 	ldw	r2,12(r2)
   94d38:	e0bfdb15 	stw	r2,-148(fp)
		delta->_sign = 0;
   94d3c:	e0bfd517 	ldw	r2,-172(fp)
   94d40:	10000315 	stw	zero,12(r2)
		i = cmp(delta, bs);
   94d44:	e17fd417 	ldw	r5,-176(fp)
   94d48:	e13fd517 	ldw	r4,-172(fp)
   94d4c:	00918440 	call	91844 <__mcmp>
   94d50:	e0bfc415 	stw	r2,-240(fp)
				dval(rv) -= adj;
			goto cont;
			}
#endif /*Honor_FLT_ROUNDS*/

		if (i < 0) {
   94d54:	e0bfc417 	ldw	r2,-240(fp)
   94d58:	10001e0e 	bge	r2,zero,94dd4 <_strtod_r+0x14b0>
			/* Error is less than half an ulp -- check for
			 * special case of mantissa a power of two.
			 */
			if (dsign || dword1(rv) || dword0(rv) & Bndry_mask
   94d5c:	e0bfdb17 	ldw	r2,-148(fp)
   94d60:	1001dc1e 	bne	r2,zero,954d4 <_strtod_r+0x1bb0>
   94d64:	e0bfe317 	ldw	r2,-116(fp)
   94d68:	1001da1e 	bne	r2,zero,954d4 <_strtod_r+0x1bb0>
   94d6c:	e0ffe417 	ldw	r3,-112(fp)
   94d70:	00800434 	movhi	r2,16
   94d74:	10bfffc4 	addi	r2,r2,-1
   94d78:	1884703a 	and	r2,r3,r2
   94d7c:	1001d51e 	bne	r2,zero,954d4 <_strtod_r+0x1bb0>
#ifdef IEEE_Arith
#ifdef Avoid_Underflow
			 || (dword0(rv) & Exp_mask) <= (2*P+1)*Exp_msk1
   94d80:	e0bfe417 	ldw	r2,-112(fp)
   94d84:	109ffc2c 	andhi	r2,r2,32752
   94d88:	00c1ac34 	movhi	r3,1712
   94d8c:	1881d12e 	bgeu	r3,r2,954d4 <_strtod_r+0x1bb0>
				if (!delta->x[0] && delta->wds <= 1)
					inexact = 0;
#endif
				break;
				}
			if (!delta->_x[0] && delta->_wds <= 1) {
   94d90:	e0bfd517 	ldw	r2,-172(fp)
   94d94:	10800517 	ldw	r2,20(r2)
   94d98:	1000041e 	bne	r2,zero,94dac <_strtod_r+0x1488>
   94d9c:	e0bfd517 	ldw	r2,-172(fp)
   94da0:	10800417 	ldw	r2,16(r2)
   94da4:	10800088 	cmpgei	r2,r2,2
   94da8:	1001c326 	beq	r2,zero,954b8 <_strtod_r+0x1b94>
#ifdef SET_INEXACT
				inexact = 0;
#endif
				break;
				}
			delta = lshift(ptr,delta,Log2P);
   94dac:	01800044 	movi	r6,1
   94db0:	e17fd517 	ldw	r5,-172(fp)
   94db4:	e13fed17 	ldw	r4,-76(fp)
   94db8:	009164c0 	call	9164c <__lshift>
   94dbc:	e0bfd515 	stw	r2,-172(fp)
			if (cmp(delta, bs) > 0)
   94dc0:	e17fd417 	ldw	r5,-176(fp)
   94dc4:	e13fd517 	ldw	r4,-172(fp)
   94dc8:	00918440 	call	91844 <__mcmp>
   94dcc:	0081bc0e 	bge	zero,r2,954c0 <_strtod_r+0x1b9c>
				goto drop_down;
   94dd0:	00003306 	br	94ea0 <_strtod_r+0x157c>
			break;
			}
		if (i == 0) {
   94dd4:	e0bfc417 	ldw	r2,-240(fp)
   94dd8:	10008b1e 	bne	r2,zero,95008 <_strtod_r+0x16e4>
			/* exactly half-way between */
			if (dsign) {
   94ddc:	e0bfdb17 	ldw	r2,-148(fp)
   94de0:	10002826 	beq	r2,zero,94e84 <_strtod_r+0x1560>
				if ((dword0(rv) & Bndry_mask1) == Bndry_mask1
   94de4:	e0ffe417 	ldw	r3,-112(fp)
   94de8:	00800434 	movhi	r2,16
   94dec:	10bfffc4 	addi	r2,r2,-1
   94df0:	1886703a 	and	r3,r3,r2
   94df4:	00800434 	movhi	r2,16
   94df8:	10bfffc4 	addi	r2,r2,-1
   94dfc:	1880411e 	bne	r3,r2,94f04 <_strtod_r+0x15e0>
				 &&  dword1(rv) == (
   94e00:	e0ffe317 	ldw	r3,-116(fp)
   94e04:	e0bfb917 	ldw	r2,-284(fp)
   94e08:	10000d26 	beq	r2,zero,94e40 <_strtod_r+0x151c>
#ifdef Avoid_Underflow
			(scale && (y = dword0(rv) & Exp_mask) <= 2*P*Exp_msk1)
   94e0c:	e0bfe417 	ldw	r2,-112(fp)
   94e10:	109ffc2c 	andhi	r2,r2,32752
   94e14:	e0bfd015 	stw	r2,-192(fp)
   94e18:	e0bfd017 	ldw	r2,-192(fp)
   94e1c:	0101a834 	movhi	r4,1696
   94e20:	20800736 	bltu	r4,r2,94e40 <_strtod_r+0x151c>
		? (0xffffffff & (0xffffffff << (2*P+1-(y>>Exp_shift)))) :
   94e24:	e0bfd017 	ldw	r2,-192(fp)
   94e28:	1004d53a 	srli	r2,r2,20
   94e2c:	01001ac4 	movi	r4,107
   94e30:	2085c83a 	sub	r2,r4,r2
			}
		if (i == 0) {
			/* exactly half-way between */
			if (dsign) {
				if ((dword0(rv) & Bndry_mask1) == Bndry_mask1
				 &&  dword1(rv) == (
   94e34:	013fffc4 	movi	r4,-1
   94e38:	2084983a 	sll	r2,r4,r2
   94e3c:	00000106 	br	94e44 <_strtod_r+0x1520>
   94e40:	00bfffc4 	movi	r2,-1
   94e44:	18802f1e 	bne	r3,r2,94f04 <_strtod_r+0x15e0>
			(scale && (y = dword0(rv) & Exp_mask) <= 2*P*Exp_msk1)
		? (0xffffffff & (0xffffffff << (2*P+1-(y>>Exp_shift)))) :
#endif
						   0xffffffff)) {
					/*boundary case -- increment exponent*/
					if (dword0(rv) == Big0 && dword1(rv) == Big1)
   94e48:	e0ffe417 	ldw	r3,-112(fp)
   94e4c:	009ffc34 	movhi	r2,32752
   94e50:	10bfffc4 	addi	r2,r2,-1
   94e54:	1880031e 	bne	r3,r2,94e64 <_strtod_r+0x1540>
   94e58:	e0bfe317 	ldw	r2,-116(fp)
   94e5c:	10bfffd8 	cmpnei	r2,r2,-1
   94e60:	103def26 	beq	r2,zero,94620 <__alt_data_end+0xfffe2620>
						goto ovfl;
					dword0(rv) = (dword0(rv) & Exp_mask)
   94e64:	e0bfe417 	ldw	r2,-112(fp)
   94e68:	10dffc2c 	andhi	r3,r2,32752
						+ Exp_msk1
   94e6c:	00800434 	movhi	r2,16
   94e70:	1885883a 	add	r2,r3,r2
#endif
						   0xffffffff)) {
					/*boundary case -- increment exponent*/
					if (dword0(rv) == Big0 && dword1(rv) == Big1)
						goto ovfl;
					dword0(rv) = (dword0(rv) & Exp_mask)
   94e74:	e0bfe415 	stw	r2,-112(fp)
#ifdef IBM
						| Exp_msk1 >> 4
#endif
						;
#ifndef _DOUBLE_IS_32BITS
					dword1(rv) = 0;
   94e78:	e03fe315 	stw	zero,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
#ifdef Avoid_Underflow
					dsign = 0;
   94e7c:	e03fdb15 	stw	zero,-148(fp)
#endif
					break;
   94e80:	00019406 	br	954d4 <_strtod_r+0x1bb0>
					}
				}
			else if (!(dword0(rv) & Bndry_mask) && !dword1(rv)) {
   94e84:	e0ffe417 	ldw	r3,-112(fp)
   94e88:	00800434 	movhi	r2,16
   94e8c:	10bfffc4 	addi	r2,r2,-1
   94e90:	1884703a 	and	r2,r3,r2
   94e94:	10001b1e 	bne	r2,zero,94f04 <_strtod_r+0x15e0>
   94e98:	e0bfe317 	ldw	r2,-116(fp)
   94e9c:	1000191e 	bne	r2,zero,94f04 <_strtod_r+0x15e0>
#endif /*IBM*/
					goto undfl;
				L -= Exp_msk1;
#else /*Sudden_Underflow}{*/
#ifdef Avoid_Underflow
				if (scale) {
   94ea0:	e0bfb917 	ldw	r2,-284(fp)
   94ea4:	10000a26 	beq	r2,zero,94ed0 <_strtod_r+0x15ac>
					L = dword0(rv) & Exp_mask;
   94ea8:	e0bfe417 	ldw	r2,-112(fp)
   94eac:	109ffc2c 	andhi	r2,r2,32752
   94eb0:	e0bfcf15 	stw	r2,-196(fp)
					if (L <= (2*P+1)*Exp_msk1) {
   94eb4:	e0bfcf17 	ldw	r2,-196(fp)
   94eb8:	00c1ac34 	movhi	r3,1712
   94ebc:	18800436 	bltu	r3,r2,94ed0 <_strtod_r+0x15ac>
						if (L > (P+2)*Exp_msk1)
   94ec0:	e0bfcf17 	ldw	r2,-196(fp)
   94ec4:	00c0dc34 	movhi	r3,880
   94ec8:	18beab2e 	bgeu	r3,r2,94978 <__alt_data_end+0xfffe2978>
							/* round even ==> */
							/* accept rv */
							break;
   94ecc:	00018106 	br	954d4 <_strtod_r+0x1bb0>
						/* rv = smallest denormal */
						goto undfl;
						}
					}
#endif /*Avoid_Underflow*/
				L = (dword0(rv) & Exp_mask) - Exp_msk1;
   94ed0:	e0bfe417 	ldw	r2,-112(fp)
   94ed4:	10dffc2c 	andhi	r3,r2,32752
   94ed8:	00bffc34 	movhi	r2,65520
   94edc:	1885883a 	add	r2,r3,r2
   94ee0:	e0bfcf15 	stw	r2,-196(fp)
#endif /*Sudden_Underflow}*/
				dword0(rv) = L | Bndry_mask1;
   94ee4:	e0ffcf17 	ldw	r3,-196(fp)
   94ee8:	00800434 	movhi	r2,16
   94eec:	10bfffc4 	addi	r2,r2,-1
   94ef0:	1884b03a 	or	r2,r3,r2
   94ef4:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
				dword1(rv) = 0xffffffff;
   94ef8:	00bfffc4 	movi	r2,-1
   94efc:	e0bfe315 	stw	r2,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
#ifdef IBM
				goto cont;
#else
				break;
   94f00:	00017406 	br	954d4 <_strtod_r+0x1bb0>
#endif
				}
#ifndef ROUND_BIASED
#ifdef Avoid_Underflow
			if (Lsb1) {
   94f04:	e0bfd717 	ldw	r2,-164(fp)
   94f08:	10000526 	beq	r2,zero,94f20 <_strtod_r+0x15fc>
				if (!(dword0(rv) & Lsb1))
   94f0c:	e0ffe417 	ldw	r3,-112(fp)
   94f10:	e0bfd717 	ldw	r2,-164(fp)
   94f14:	1884703a 	and	r2,r3,r2
   94f18:	1000051e 	bne	r2,zero,94f30 <_strtod_r+0x160c>
					break;
   94f1c:	00016d06 	br	954d4 <_strtod_r+0x1bb0>
				}
			else if (!(dword1(rv) & Lsb))
   94f20:	e0ffe317 	ldw	r3,-116(fp)
   94f24:	e0bfd617 	ldw	r2,-168(fp)
   94f28:	1884703a 	and	r2,r3,r2
   94f2c:	10016626 	beq	r2,zero,954c8 <_strtod_r+0x1ba4>
#else
			if (!(dword1(rv) & LSB))
				break;
#endif
#endif
			if (dsign)
   94f30:	e0bfdb17 	ldw	r2,-148(fp)
   94f34:	10001426 	beq	r2,zero,94f88 <_strtod_r+0x1664>
#ifdef Avoid_Underflow
				dval(rv) += sulp(rv, scale);
   94f38:	e1bfb917 	ldw	r6,-284(fp)
   94f3c:	e13fe317 	ldw	r4,-116(fp)
   94f40:	e17fe417 	ldw	r5,-112(fp)
   94f44:	009361c0 	call	9361c <sulp>
   94f48:	1009883a 	mov	r4,r2
   94f4c:	180b883a 	mov	r5,r3
   94f50:	e0bfe317 	ldw	r2,-116(fp)
   94f54:	e0ffe417 	ldw	r3,-112(fp)
   94f58:	200d883a 	mov	r6,r4
   94f5c:	280f883a 	mov	r7,r5
   94f60:	1009883a 	mov	r4,r2
   94f64:	180b883a 	mov	r5,r3
   94f68:	00823c80 	call	823c8 <__adddf3>
   94f6c:	1009883a 	mov	r4,r2
   94f70:	180b883a 	mov	r5,r3
   94f74:	2005883a 	mov	r2,r4
   94f78:	2807883a 	mov	r3,r5
   94f7c:	e0bfe315 	stw	r2,-116(fp)
   94f80:	e0ffe415 	stw	r3,-112(fp)
   94f84:	00001b06 	br	94ff4 <_strtod_r+0x16d0>
				dval(rv) += ulp(dval(rv));
#endif
#ifndef ROUND_BIASED
			else {
#ifdef Avoid_Underflow
				dval(rv) -= sulp(rv, scale);
   94f88:	e1bfb917 	ldw	r6,-284(fp)
   94f8c:	e13fe317 	ldw	r4,-116(fp)
   94f90:	e17fe417 	ldw	r5,-112(fp)
   94f94:	009361c0 	call	9361c <sulp>
   94f98:	1009883a 	mov	r4,r2
   94f9c:	180b883a 	mov	r5,r3
   94fa0:	e0bfe317 	ldw	r2,-116(fp)
   94fa4:	e0ffe417 	ldw	r3,-112(fp)
   94fa8:	200d883a 	mov	r6,r4
   94fac:	280f883a 	mov	r7,r5
   94fb0:	1009883a 	mov	r4,r2
   94fb4:	180b883a 	mov	r5,r3
   94fb8:	00840800 	call	84080 <__subdf3>
   94fbc:	1009883a 	mov	r4,r2
   94fc0:	180b883a 	mov	r5,r3
   94fc4:	2005883a 	mov	r2,r4
   94fc8:	2807883a 	mov	r3,r5
   94fcc:	e0bfe315 	stw	r2,-116(fp)
   94fd0:	e0ffe415 	stw	r3,-112(fp)
#else
				dval(rv) -= ulp(dval(rv));
#endif
#ifndef Sudden_Underflow
				if (!dval(rv))
   94fd4:	e0bfe317 	ldw	r2,-116(fp)
   94fd8:	e0ffe417 	ldw	r3,-112(fp)
   94fdc:	000d883a 	mov	r6,zero
   94fe0:	000f883a 	mov	r7,zero
   94fe4:	1009883a 	mov	r4,r2
   94fe8:	180b883a 	mov	r5,r3
   94fec:	009dde80 	call	9dde8 <__eqdf2>
   94ff0:	103e6326 	beq	r2,zero,94980 <__alt_data_end+0xfffe2980>
					goto undfl;
#endif
				}
#ifdef Avoid_Underflow
			dsign = 1 - dsign;
   94ff4:	00c00044 	movi	r3,1
   94ff8:	e0bfdb17 	ldw	r2,-148(fp)
   94ffc:	1885c83a 	sub	r2,r3,r2
   95000:	e0bfdb15 	stw	r2,-148(fp)
#endif
#endif
			break;
   95004:	00013306 	br	954d4 <_strtod_r+0x1bb0>
			}
		if ((aadj = ratio(delta, bs)) <= 2.) {
   95008:	e17fd417 	ldw	r5,-176(fp)
   9500c:	e13fd517 	ldw	r4,-172(fp)
   95010:	009210c0 	call	9210c <__ratio>
   95014:	e0bfcd15 	stw	r2,-204(fp)
   95018:	e0ffce15 	stw	r3,-200(fp)
   9501c:	000d883a 	mov	r6,zero
   95020:	01d00034 	movhi	r7,16384
   95024:	e13fcd17 	ldw	r4,-204(fp)
   95028:	e17fce17 	ldw	r5,-200(fp)
   9502c:	00837200 	call	83720 <__ledf2>
   95030:	00803616 	blt	zero,r2,9510c <_strtod_r+0x17e8>
			if (dsign)
   95034:	e0bfdb17 	ldw	r2,-148(fp)
   95038:	10000826 	beq	r2,zero,9505c <_strtod_r+0x1738>
				aadj = dval(aadj1) = 1.;
   9503c:	e03fe115 	stw	zero,-124(fp)
   95040:	008ffc34 	movhi	r2,16368
   95044:	e0bfe215 	stw	r2,-120(fp)
   95048:	e0bfe117 	ldw	r2,-124(fp)
   9504c:	e0bfcd15 	stw	r2,-204(fp)
   95050:	e0bfe217 	ldw	r2,-120(fp)
   95054:	e0bfce15 	stw	r2,-200(fp)
   95058:	00003f06 	br	95158 <_strtod_r+0x1834>
			else if (dword1(rv) || dword0(rv) & Bndry_mask) {
   9505c:	e0bfe317 	ldw	r2,-116(fp)
   95060:	1000051e 	bne	r2,zero,95078 <_strtod_r+0x1754>
   95064:	e0ffe417 	ldw	r3,-112(fp)
   95068:	00800434 	movhi	r2,16
   9506c:	10bfffc4 	addi	r2,r2,-1
   95070:	1884703a 	and	r2,r3,r2
   95074:	10000c26 	beq	r2,zero,950a8 <_strtod_r+0x1784>
#ifndef Sudden_Underflow
				if (dword1(rv) == Tiny1 && !dword0(rv))
   95078:	e0bfe317 	ldw	r2,-116(fp)
   9507c:	10800058 	cmpnei	r2,r2,1
   95080:	1000021e 	bne	r2,zero,9508c <_strtod_r+0x1768>
   95084:	e0bfe417 	ldw	r2,-112(fp)
   95088:	103e3f26 	beq	r2,zero,94988 <__alt_data_end+0xfffe2988>
					goto undfl;
#endif
				aadj = 1.;
   9508c:	e03fcd15 	stw	zero,-204(fp)
   95090:	008ffc34 	movhi	r2,16368
   95094:	e0bfce15 	stw	r2,-200(fp)
				dval(aadj1) = -1.;
   95098:	e03fe115 	stw	zero,-124(fp)
   9509c:	00affc34 	movhi	r2,49136
   950a0:	e0bfe215 	stw	r2,-120(fp)
   950a4:	00002c06 	br	95158 <_strtod_r+0x1834>
				}
			else {
				/* special case -- power of FLT_RADIX to be */
				/* rounded down... */

				if (aadj < 2./FLT_RADIX)
   950a8:	000d883a 	mov	r6,zero
   950ac:	01cffc34 	movhi	r7,16368
   950b0:	e13fcd17 	ldw	r4,-204(fp)
   950b4:	e17fce17 	ldw	r5,-200(fp)
   950b8:	00837200 	call	83720 <__ledf2>
   950bc:	1000040e 	bge	r2,zero,950d0 <_strtod_r+0x17ac>
					aadj = 1./FLT_RADIX;
   950c0:	e03fcd15 	stw	zero,-204(fp)
   950c4:	008ff834 	movhi	r2,16352
   950c8:	e0bfce15 	stw	r2,-200(fp)
   950cc:	00000906 	br	950f4 <_strtod_r+0x17d0>
				else
					aadj *= 0.5;
   950d0:	000d883a 	mov	r6,zero
   950d4:	01cff834 	movhi	r7,16352
   950d8:	e13fcd17 	ldw	r4,-204(fp)
   950dc:	e17fce17 	ldw	r5,-200(fp)
   950e0:	00838140 	call	83814 <__muldf3>
   950e4:	1009883a 	mov	r4,r2
   950e8:	180b883a 	mov	r5,r3
   950ec:	e13fcd15 	stw	r4,-204(fp)
   950f0:	e17fce15 	stw	r5,-200(fp)
				dval(aadj1) = -aadj;
   950f4:	e53fcd17 	ldw	r20,-204(fp)
   950f8:	e0bfce17 	ldw	r2,-200(fp)
   950fc:	1560003c 	xorhi	r21,r2,32768
   95100:	e53fe115 	stw	r20,-124(fp)
   95104:	e57fe215 	stw	r21,-120(fp)
   95108:	00001306 	br	95158 <_strtod_r+0x1834>
				}
			}
		else {
			aadj *= 0.5;
   9510c:	000d883a 	mov	r6,zero
   95110:	01cff834 	movhi	r7,16352
   95114:	e13fcd17 	ldw	r4,-204(fp)
   95118:	e17fce17 	ldw	r5,-200(fp)
   9511c:	00838140 	call	83814 <__muldf3>
   95120:	1009883a 	mov	r4,r2
   95124:	180b883a 	mov	r5,r3
   95128:	e13fcd15 	stw	r4,-204(fp)
   9512c:	e17fce15 	stw	r5,-200(fp)
			dval(aadj1) = dsign ? aadj : -aadj;
   95130:	e0bfdb17 	ldw	r2,-148(fp)
   95134:	1000041e 	bne	r2,zero,95148 <_strtod_r+0x1824>
   95138:	e43fcd17 	ldw	r16,-204(fp)
   9513c:	e0bfce17 	ldw	r2,-200(fp)
   95140:	1460003c 	xorhi	r17,r2,32768
   95144:	00000206 	br	95150 <_strtod_r+0x182c>
   95148:	e43fcd17 	ldw	r16,-204(fp)
   9514c:	e47fce17 	ldw	r17,-200(fp)
   95150:	e43fe115 	stw	r16,-124(fp)
   95154:	e47fe215 	stw	r17,-120(fp)
#else
			if (Flt_Rounds == 0)
				dval(aadj1) += 0.5;
#endif /*Check_FLT_ROUNDS*/
			}
		y = dword0(rv) & Exp_mask;
   95158:	e0bfe417 	ldw	r2,-112(fp)
   9515c:	109ffc2c 	andhi	r2,r2,32752
   95160:	e0bfd015 	stw	r2,-192(fp)

		/* Check for overflow */

		if (y == Exp_msk1*(DBL_MAX_EXP+Bias-1)) {
   95164:	e0ffd017 	ldw	r3,-192(fp)
   95168:	009ff834 	movhi	r2,32736
   9516c:	18803f1e 	bne	r3,r2,9526c <_strtod_r+0x1948>
			dval(rv0) = dval(rv);
   95170:	e0bfe317 	ldw	r2,-116(fp)
   95174:	e0ffe417 	ldw	r3,-112(fp)
   95178:	e0bfe515 	stw	r2,-108(fp)
   9517c:	e0ffe615 	stw	r3,-104(fp)
			dword0(rv) -= P*Exp_msk1;
   95180:	e0ffe417 	ldw	r3,-112(fp)
   95184:	00bf2c34 	movhi	r2,64688
   95188:	1885883a 	add	r2,r3,r2
   9518c:	e0bfe415 	stw	r2,-112(fp)
			adj = dval(aadj1) * ulp(dval(rv));
   95190:	e0bfe117 	ldw	r2,-124(fp)
   95194:	e0bff415 	stw	r2,-48(fp)
   95198:	e0bfe217 	ldw	r2,-120(fp)
   9519c:	e0bff515 	stw	r2,-44(fp)
   951a0:	e0bfe317 	ldw	r2,-116(fp)
   951a4:	e0ffe417 	ldw	r3,-112(fp)
   951a8:	1009883a 	mov	r4,r2
   951ac:	180b883a 	mov	r5,r3
   951b0:	0091bfc0 	call	91bfc <__ulp>
   951b4:	1009883a 	mov	r4,r2
   951b8:	180b883a 	mov	r5,r3
   951bc:	200d883a 	mov	r6,r4
   951c0:	280f883a 	mov	r7,r5
   951c4:	e13ff417 	ldw	r4,-48(fp)
   951c8:	e17ff517 	ldw	r5,-44(fp)
   951cc:	00838140 	call	83814 <__muldf3>
   951d0:	1009883a 	mov	r4,r2
   951d4:	180b883a 	mov	r5,r3
   951d8:	e13fdc15 	stw	r4,-144(fp)
   951dc:	e17fdd15 	stw	r5,-140(fp)
			dval(rv) += adj;
   951e0:	e0bfe317 	ldw	r2,-116(fp)
   951e4:	e0ffe417 	ldw	r3,-112(fp)
   951e8:	e1bfdc17 	ldw	r6,-144(fp)
   951ec:	e1ffdd17 	ldw	r7,-140(fp)
   951f0:	1009883a 	mov	r4,r2
   951f4:	180b883a 	mov	r5,r3
   951f8:	00823c80 	call	823c8 <__adddf3>
   951fc:	1009883a 	mov	r4,r2
   95200:	180b883a 	mov	r5,r3
   95204:	2005883a 	mov	r2,r4
   95208:	2807883a 	mov	r3,r5
   9520c:	e0bfe315 	stw	r2,-116(fp)
   95210:	e0ffe415 	stw	r3,-112(fp)
			if ((dword0(rv) & Exp_mask) >=
   95214:	e0bfe417 	ldw	r2,-112(fp)
   95218:	10dffc2c 	andhi	r3,r2,32752
   9521c:	009f2834 	movhi	r2,31904
   95220:	18800d36 	bltu	r3,r2,95258 <_strtod_r+0x1934>
					Exp_msk1*(DBL_MAX_EXP+Bias-P)) {
				if (dword0(rv0) == Big0 && dword1(rv0) == Big1)
   95224:	e0ffe617 	ldw	r3,-104(fp)
   95228:	009ffc34 	movhi	r2,32752
   9522c:	10bfffc4 	addi	r2,r2,-1
   95230:	1880031e 	bne	r3,r2,95240 <_strtod_r+0x191c>
   95234:	e0bfe517 	ldw	r2,-108(fp)
   95238:	10bfffd8 	cmpnei	r2,r2,-1
   9523c:	103cfa26 	beq	r2,zero,94628 <__alt_data_end+0xfffe2628>
					goto ovfl;
				dword0(rv) = Big0;
   95240:	009ffc34 	movhi	r2,32752
   95244:	10bfffc4 	addi	r2,r2,-1
   95248:	e0bfe415 	stw	r2,-112(fp)
#ifndef _DOUBLE_IS_32BITS
				dword1(rv) = Big1;
   9524c:	00bfffc4 	movi	r2,-1
   95250:	e0bfe315 	stw	r2,-116(fp)
#endif /*!_DOUBLE_IS_32BITS*/
				goto cont;
   95254:	00008a06 	br	95480 <_strtod_r+0x1b5c>
				}
			else
				dword0(rv) += P*Exp_msk1;
   95258:	e0ffe417 	ldw	r3,-112(fp)
   9525c:	0080d434 	movhi	r2,848
   95260:	1885883a 	add	r2,r3,r2
   95264:	e0bfe415 	stw	r2,-112(fp)
   95268:	00004b06 	br	95398 <_strtod_r+0x1a74>
			}
		else {
#ifdef Avoid_Underflow
			if (scale && y <= 2*P*Exp_msk1) {
   9526c:	e0bfb917 	ldw	r2,-284(fp)
   95270:	10002826 	beq	r2,zero,95314 <_strtod_r+0x19f0>
   95274:	e0bfd017 	ldw	r2,-192(fp)
   95278:	00c1a834 	movhi	r3,1696
   9527c:	18802536 	bltu	r3,r2,95314 <_strtod_r+0x19f0>
				if (aadj <= 0x7fffffff) {
   95280:	01bff034 	movhi	r6,65472
   95284:	01d07834 	movhi	r7,16864
   95288:	39ffffc4 	addi	r7,r7,-1
   9528c:	e13fcd17 	ldw	r4,-204(fp)
   95290:	e17fce17 	ldw	r5,-200(fp)
   95294:	00837200 	call	83720 <__ledf2>
   95298:	00801816 	blt	zero,r2,952fc <_strtod_r+0x19d8>
					if ((z = aadj) == 0)
   9529c:	e13fcd17 	ldw	r4,-204(fp)
   952a0:	e17fce17 	ldw	r5,-200(fp)
   952a4:	009d1b40 	call	9d1b4 <__fixunsdfsi>
   952a8:	e0bfd115 	stw	r2,-188(fp)
   952ac:	e0bfd117 	ldw	r2,-188(fp)
   952b0:	1000021e 	bne	r2,zero,952bc <_strtod_r+0x1998>
						z = 1;
   952b4:	00800044 	movi	r2,1
   952b8:	e0bfd115 	stw	r2,-188(fp)
					aadj = z;
   952bc:	e13fd117 	ldw	r4,-188(fp)
   952c0:	009de700 	call	9de70 <__floatunsidf>
   952c4:	1009883a 	mov	r4,r2
   952c8:	180b883a 	mov	r5,r3
   952cc:	e13fcd15 	stw	r4,-204(fp)
   952d0:	e17fce15 	stw	r5,-200(fp)
					dval(aadj1) = dsign ? aadj : -aadj;
   952d4:	e0bfdb17 	ldw	r2,-148(fp)
   952d8:	1000041e 	bne	r2,zero,952ec <_strtod_r+0x19c8>
   952dc:	e4bfcd17 	ldw	r18,-204(fp)
   952e0:	e0bfce17 	ldw	r2,-200(fp)
   952e4:	14e0003c 	xorhi	r19,r2,32768
   952e8:	00000206 	br	952f4 <_strtod_r+0x19d0>
   952ec:	e4bfcd17 	ldw	r18,-204(fp)
   952f0:	e4ffce17 	ldw	r19,-200(fp)
   952f4:	e4bfe115 	stw	r18,-124(fp)
   952f8:	e4ffe215 	stw	r19,-120(fp)
					}
				dword0(aadj1) += (2*P+1)*Exp_msk1 - y;
   952fc:	e0ffe217 	ldw	r3,-120(fp)
   95300:	e0bfd017 	ldw	r2,-192(fp)
   95304:	1887c83a 	sub	r3,r3,r2
   95308:	0081ac34 	movhi	r2,1712
   9530c:	1885883a 	add	r2,r3,r2
   95310:	e0bfe215 	stw	r2,-120(fp)
				}
			adj = dval(aadj1) * ulp(dval(rv));
   95314:	e0bfe117 	ldw	r2,-124(fp)
   95318:	e0bff615 	stw	r2,-40(fp)
   9531c:	e0bfe217 	ldw	r2,-120(fp)
   95320:	e0bff715 	stw	r2,-36(fp)
   95324:	e0bfe317 	ldw	r2,-116(fp)
   95328:	e0ffe417 	ldw	r3,-112(fp)
   9532c:	1009883a 	mov	r4,r2
   95330:	180b883a 	mov	r5,r3
   95334:	0091bfc0 	call	91bfc <__ulp>
   95338:	1009883a 	mov	r4,r2
   9533c:	180b883a 	mov	r5,r3
   95340:	200d883a 	mov	r6,r4
   95344:	280f883a 	mov	r7,r5
   95348:	e13ff617 	ldw	r4,-40(fp)
   9534c:	e17ff717 	ldw	r5,-36(fp)
   95350:	00838140 	call	83814 <__muldf3>
   95354:	1009883a 	mov	r4,r2
   95358:	180b883a 	mov	r5,r3
   9535c:	e13fdc15 	stw	r4,-144(fp)
   95360:	e17fdd15 	stw	r5,-140(fp)
			dval(rv) += adj;
   95364:	e0bfe317 	ldw	r2,-116(fp)
   95368:	e0ffe417 	ldw	r3,-112(fp)
   9536c:	e1bfdc17 	ldw	r6,-144(fp)
   95370:	e1ffdd17 	ldw	r7,-140(fp)
   95374:	1009883a 	mov	r4,r2
   95378:	180b883a 	mov	r5,r3
   9537c:	00823c80 	call	823c8 <__adddf3>
   95380:	1009883a 	mov	r4,r2
   95384:	180b883a 	mov	r5,r3
   95388:	2005883a 	mov	r2,r4
   9538c:	2807883a 	mov	r3,r5
   95390:	e0bfe315 	stw	r2,-116(fp)
   95394:	e0ffe415 	stw	r3,-112(fp)
			adj = dval(aadj1) * ulp(dval(rv));
			dval(rv) += adj;
#endif /*Sudden_Underflow*/
#endif /*Avoid_Underflow*/
			}
		z = dword0(rv) & Exp_mask;
   95398:	e0bfe417 	ldw	r2,-112(fp)
   9539c:	109ffc2c 	andhi	r2,r2,32752
   953a0:	e0bfd115 	stw	r2,-188(fp)
#ifndef SET_INEXACT
#ifdef Avoid_Underflow
		if (!scale)
   953a4:	e0bfb917 	ldw	r2,-284(fp)
   953a8:	1000351e 	bne	r2,zero,95480 <_strtod_r+0x1b5c>
#endif
		if (y == z) {
   953ac:	e0ffd017 	ldw	r3,-192(fp)
   953b0:	e0bfd117 	ldw	r2,-188(fp)
   953b4:	1880321e 	bne	r3,r2,95480 <_strtod_r+0x1b5c>
			/* Can we stop now? */
			L = (Long)aadj;
   953b8:	e13fcd17 	ldw	r4,-204(fp)
   953bc:	e17fce17 	ldw	r5,-200(fp)
   953c0:	008497c0 	call	8497c <__fixdfsi>
   953c4:	e0bfcf15 	stw	r2,-196(fp)
			aadj -= L;
   953c8:	e13fcf17 	ldw	r4,-196(fp)
   953cc:	00849fc0 	call	849fc <__floatsidf>
   953d0:	1009883a 	mov	r4,r2
   953d4:	180b883a 	mov	r5,r3
   953d8:	200d883a 	mov	r6,r4
   953dc:	280f883a 	mov	r7,r5
   953e0:	e13fcd17 	ldw	r4,-204(fp)
   953e4:	e17fce17 	ldw	r5,-200(fp)
   953e8:	00840800 	call	84080 <__subdf3>
   953ec:	1009883a 	mov	r4,r2
   953f0:	180b883a 	mov	r5,r3
   953f4:	e13fcd15 	stw	r4,-204(fp)
   953f8:	e17fce15 	stw	r5,-200(fp)
			/* The tolerances below are conservative. */
			if (dsign || dword1(rv) || dword0(rv) & Bndry_mask) {
   953fc:	e0bfdb17 	ldw	r2,-148(fp)
   95400:	1000071e 	bne	r2,zero,95420 <_strtod_r+0x1afc>
   95404:	e0bfe317 	ldw	r2,-116(fp)
   95408:	1000051e 	bne	r2,zero,95420 <_strtod_r+0x1afc>
   9540c:	e0ffe417 	ldw	r3,-112(fp)
   95410:	00800434 	movhi	r2,16
   95414:	10bfffc4 	addi	r2,r2,-1
   95418:	1884703a 	and	r2,r3,r2
   9541c:	10001026 	beq	r2,zero,95460 <_strtod_r+0x1b3c>
				if (aadj < .4999999 || aadj > .5000001)
   95420:	01a52834 	movhi	r6,38048
   95424:	318d6544 	addi	r6,r6,13717
   95428:	01cff834 	movhi	r7,16352
   9542c:	39ffffc4 	addi	r7,r7,-1
   95430:	e13fcd17 	ldw	r4,-204(fp)
   95434:	e17fce17 	ldw	r5,-200(fp)
   95438:	00837200 	call	83720 <__ledf2>
   9543c:	10002516 	blt	r2,zero,954d4 <_strtod_r+0x1bb0>
   95440:	018d6c34 	movhi	r6,13744
   95444:	31b94d44 	addi	r6,r6,-6859
   95448:	01cff834 	movhi	r7,16352
   9544c:	e13fcd17 	ldw	r4,-204(fp)
   95450:	e17fce17 	ldw	r5,-200(fp)
   95454:	00836440 	call	83644 <__gedf2>
   95458:	00801e16 	blt	zero,r2,954d4 <_strtod_r+0x1bb0>
   9545c:	00000806 	br	95480 <_strtod_r+0x1b5c>
					break;
				}
			else if (aadj < .4999999/FLT_RADIX)
   95460:	01a52834 	movhi	r6,38048
   95464:	318d6544 	addi	r6,r6,13717
   95468:	01cff434 	movhi	r7,16336
   9546c:	39ffffc4 	addi	r7,r7,-1
   95470:	e13fcd17 	ldw	r4,-204(fp)
   95474:	e17fce17 	ldw	r5,-200(fp)
   95478:	00837200 	call	83720 <__ledf2>
   9547c:	10001416 	blt	r2,zero,954d0 <_strtod_r+0x1bac>
				break;
			}
#endif
 cont:
		Bfree(ptr,bb);
   95480:	e0bfe717 	ldw	r2,-100(fp)
   95484:	100b883a 	mov	r5,r2
   95488:	e13fed17 	ldw	r4,-76(fp)
   9548c:	0090b5c0 	call	90b5c <_Bfree>
		Bfree(ptr,bd);
   95490:	e17fd217 	ldw	r5,-184(fp)
   95494:	e13fed17 	ldw	r4,-76(fp)
   95498:	0090b5c0 	call	90b5c <_Bfree>
		Bfree(ptr,bs);
   9549c:	e17fd417 	ldw	r5,-176(fp)
   954a0:	e13fed17 	ldw	r4,-76(fp)
   954a4:	0090b5c0 	call	90b5c <_Bfree>
		Bfree(ptr,delta);
   954a8:	e17fd517 	ldw	r5,-172(fp)
   954ac:	e13fed17 	ldw	r4,-76(fp)
   954b0:	0090b5c0 	call	90b5c <_Bfree>
		}
   954b4:	003d4706 	br	949d4 <__alt_data_end+0xfffe29d4>
			if (!delta->_x[0] && delta->_wds <= 1) {
				/* exact result */
#ifdef SET_INEXACT
				inexact = 0;
#endif
				break;
   954b8:	0001883a 	nop
   954bc:	00000506 	br	954d4 <_strtod_r+0x1bb0>
				}
			delta = lshift(ptr,delta,Log2P);
			if (cmp(delta, bs) > 0)
				goto drop_down;
			break;
   954c0:	0001883a 	nop
   954c4:	00000306 	br	954d4 <_strtod_r+0x1bb0>
			if (Lsb1) {
				if (!(dword0(rv) & Lsb1))
					break;
				}
			else if (!(dword1(rv) & Lsb))
				break;
   954c8:	0001883a 	nop
   954cc:	00000106 	br	954d4 <_strtod_r+0x1bb0>
			if (dsign || dword1(rv) || dword0(rv) & Bndry_mask) {
				if (aadj < .4999999 || aadj > .5000001)
					break;
				}
			else if (aadj < .4999999/FLT_RADIX)
				break;
   954d0:	0001883a 	nop
		}
	else if (!oldinexact)
		clear_inexact();
#endif
#ifdef Avoid_Underflow
	if (scale) {
   954d4:	e0bfb917 	ldw	r2,-284(fp)
   954d8:	10001926 	beq	r2,zero,95540 <_strtod_r+0x1c1c>
		dword0(rv0) = Exp_1 - 2*P*Exp_msk1;
   954dc:	008e5434 	movhi	r2,14672
   954e0:	e0bfe615 	stw	r2,-104(fp)
#ifndef _DOUBLE_IS_32BITS
		dword1(rv0) = 0;
   954e4:	e03fe515 	stw	zero,-108(fp)
#endif /*!_DOUBLE_IS_32BITS*/
		dval(rv) *= dval(rv0);
   954e8:	e0bfe317 	ldw	r2,-116(fp)
   954ec:	e0ffe417 	ldw	r3,-112(fp)
   954f0:	e13fe517 	ldw	r4,-108(fp)
   954f4:	e17fe617 	ldw	r5,-104(fp)
   954f8:	200d883a 	mov	r6,r4
   954fc:	280f883a 	mov	r7,r5
   95500:	1009883a 	mov	r4,r2
   95504:	180b883a 	mov	r5,r3
   95508:	00838140 	call	83814 <__muldf3>
   9550c:	1009883a 	mov	r4,r2
   95510:	180b883a 	mov	r5,r3
   95514:	2005883a 	mov	r2,r4
   95518:	2807883a 	mov	r3,r5
   9551c:	e0bfe315 	stw	r2,-116(fp)
   95520:	e0ffe415 	stw	r3,-112(fp)
#ifndef NO_ERRNO
		/* try to avoid the bug of testing an 8087 register value */
		if (dword0(rv) == 0 && dword1(rv) == 0)
   95524:	e0bfe417 	ldw	r2,-112(fp)
   95528:	1000051e 	bne	r2,zero,95540 <_strtod_r+0x1c1c>
   9552c:	e0bfe317 	ldw	r2,-116(fp)
   95530:	1000031e 	bne	r2,zero,95540 <_strtod_r+0x1c1c>
			ptr->_errno = ERANGE;
   95534:	e0bfed17 	ldw	r2,-76(fp)
   95538:	00c00884 	movi	r3,34
   9553c:	10c00015 	stw	r3,0(r2)
		dval(rv0) = 1e-300;
		dval(rv0) *= dval(rv0);
		}
#endif
 retfree:
	Bfree(ptr,bb);
   95540:	e0bfe717 	ldw	r2,-100(fp)
   95544:	100b883a 	mov	r5,r2
   95548:	e13fed17 	ldw	r4,-76(fp)
   9554c:	0090b5c0 	call	90b5c <_Bfree>
	Bfree(ptr,bd);
   95550:	e17fd217 	ldw	r5,-184(fp)
   95554:	e13fed17 	ldw	r4,-76(fp)
   95558:	0090b5c0 	call	90b5c <_Bfree>
	Bfree(ptr,bs);
   9555c:	e17fd417 	ldw	r5,-176(fp)
   95560:	e13fed17 	ldw	r4,-76(fp)
   95564:	0090b5c0 	call	90b5c <_Bfree>
	Bfree(ptr,bd0);
   95568:	e17fd317 	ldw	r5,-180(fp)
   9556c:	e13fed17 	ldw	r4,-76(fp)
   95570:	0090b5c0 	call	90b5c <_Bfree>
	Bfree(ptr,delta);
   95574:	e17fd517 	ldw	r5,-172(fp)
   95578:	e13fed17 	ldw	r4,-76(fp)
   9557c:	0090b5c0 	call	90b5c <_Bfree>
   95580:	00000b06 	br	955b0 <_strtod_r+0x1c8c>
			  case STRTOG_NoNumber:
				s = s00;
				sign = 0;
				/* FALLTHROUGH */
			  case STRTOG_Zero:
				break;
   95584:	0001883a 	nop
   95588:	00000906 	br	955b0 <_strtod_r+0x1c8c>
		}
#endif
		nz0 = 1;
		while(*++s == '0') ;
		if (!*s)
			goto ret;
   9558c:	0001883a 	nop
   95590:	00000706 	br	955b0 <_strtod_r+0x1c8c>
#endif /* INFNAN_CHECK */
 ret0:
			s = s00;
			sign = 0;
			}
		goto ret;
   95594:	0001883a 	nop
   95598:	00000506 	br	955b0 <_strtod_r+0x1c8c>
		&& Flt_Rounds == 1
#endif
#endif
			) {
		if (!e)
			goto ret;
   9559c:	0001883a 	nop
   955a0:	00000306 	br	955b0 <_strtod_r+0x1c8c>
				dword1(rv) = Big1;
#endif /*!_DOUBLE_IS_32BITS*/
#endif /*IEEE_Arith*/
				if (bd0)
					goto retfree;
				goto ret;
   955a4:	0001883a 	nop
   955a8:	00000106 	br	955b0 <_strtod_r+0x1c8c>
#ifndef NO_ERRNO
					ptr->_errno = ERANGE;
#endif
					if (bd0)
						goto retfree;
					goto ret;
   955ac:	0001883a 	nop
	Bfree(ptr,bd);
	Bfree(ptr,bs);
	Bfree(ptr,bd0);
	Bfree(ptr,delta);
 ret:
	if (se)
   955b0:	e0bfef17 	ldw	r2,-68(fp)
   955b4:	10000326 	beq	r2,zero,955c4 <_strtod_r+0x1ca0>
		*se = (char *)s;
   955b8:	e0ffe017 	ldw	r3,-128(fp)
   955bc:	e0bfef17 	ldw	r2,-68(fp)
   955c0:	10c00015 	stw	r3,0(r2)
	return sign ? -dval(rv) : dval(rv);
   955c4:	e0bfcb17 	ldw	r2,-212(fp)
   955c8:	10000526 	beq	r2,zero,955e0 <_strtod_r+0x1cbc>
   955cc:	e0bfe317 	ldw	r2,-116(fp)
   955d0:	e0ffe417 	ldw	r3,-112(fp)
   955d4:	102d883a 	mov	r22,r2
   955d8:	1de0003c 	xorhi	r23,r3,32768
   955dc:	00000206 	br	955e8 <_strtod_r+0x1cc4>
   955e0:	e5bfe317 	ldw	r22,-116(fp)
   955e4:	e5ffe417 	ldw	r23,-112(fp)
   955e8:	b007883a 	mov	r3,r22
   955ec:	b809883a 	mov	r4,r23
}
   955f0:	1805883a 	mov	r2,r3
   955f4:	2007883a 	mov	r3,r4
   955f8:	e6fff804 	addi	sp,fp,-32
   955fc:	dfc00917 	ldw	ra,36(sp)
   95600:	df000817 	ldw	fp,32(sp)
   95604:	ddc00717 	ldw	r23,28(sp)
   95608:	dd800617 	ldw	r22,24(sp)
   9560c:	dd400517 	ldw	r21,20(sp)
   95610:	dd000417 	ldw	r20,16(sp)
   95614:	dcc00317 	ldw	r19,12(sp)
   95618:	dc800217 	ldw	r18,8(sp)
   9561c:	dc400117 	ldw	r17,4(sp)
   95620:	dc000017 	ldw	r16,0(sp)
   95624:	dec00a04 	addi	sp,sp,40
   95628:	f800283a 	ret

0009562c <strtod>:
#ifndef _REENT_ONLY

double
_DEFUN (strtod, (s00, se),
	_CONST char *__restrict s00 _AND char **__restrict se)
{
   9562c:	defffc04 	addi	sp,sp,-16
   95630:	dfc00315 	stw	ra,12(sp)
   95634:	df000215 	stw	fp,8(sp)
   95638:	df000204 	addi	fp,sp,8
   9563c:	e13ffe15 	stw	r4,-8(fp)
   95640:	e17fff15 	stw	r5,-4(fp)
  return _strtod_r (_REENT, s00, se);
   95644:	d0a00417 	ldw	r2,-32752(gp)
   95648:	e1bfff17 	ldw	r6,-4(fp)
   9564c:	e17ffe17 	ldw	r5,-8(fp)
   95650:	1009883a 	mov	r4,r2
   95654:	00939240 	call	93924 <_strtod_r>
   95658:	100b883a 	mov	r5,r2
   9565c:	180d883a 	mov	r6,r3
   95660:	2807883a 	mov	r3,r5
   95664:	3009883a 	mov	r4,r6
}
   95668:	1805883a 	mov	r2,r3
   9566c:	2007883a 	mov	r3,r4
   95670:	e037883a 	mov	sp,fp
   95674:	dfc00117 	ldw	ra,4(sp)
   95678:	df000017 	ldw	fp,0(sp)
   9567c:	dec00204 	addi	sp,sp,8
   95680:	f800283a 	ret

00095684 <strtof>:

float
_DEFUN (strtof, (s00, se),
	_CONST char *__restrict s00 _AND
	char **__restrict se)
{
   95684:	defff804 	addi	sp,sp,-32
   95688:	dfc00715 	stw	ra,28(sp)
   9568c:	df000615 	stw	fp,24(sp)
   95690:	dc000515 	stw	r16,20(sp)
   95694:	df000604 	addi	fp,sp,24
   95698:	e13ffd15 	stw	r4,-12(fp)
   9569c:	e17ffe15 	stw	r5,-8(fp)
  double d;
  float retval;

  d = _strtod_r (_REENT, s00, se);
   956a0:	d0a00417 	ldw	r2,-32752(gp)
   956a4:	e1bffe17 	ldw	r6,-8(fp)
   956a8:	e17ffd17 	ldw	r5,-12(fp)
   956ac:	1009883a 	mov	r4,r2
   956b0:	00939240 	call	93924 <_strtod_r>
   956b4:	e0bffa15 	stw	r2,-24(fp)
   956b8:	e0fffb15 	stw	r3,-20(fp)
  retval = (float) d;
   956bc:	e13ffa17 	ldw	r4,-24(fp)
   956c0:	e17ffb17 	ldw	r5,-20(fp)
   956c4:	0084be80 	call	84be8 <__truncdfsf2>
   956c8:	1007883a 	mov	r3,r2
   956cc:	e0fffc15 	stw	r3,-16(fp)

#ifndef NO_ERRNO
  /* Check for out-of-range values.  */
  if (/* Underflow.  */
   956d0:	e0bffc17 	ldw	r2,-16(fp)
   956d4:	0007883a 	mov	r3,zero
   956d8:	10c5f8b2 	custom	226,r2,r2,r3
   956dc:	1000061e 	bne	r2,zero,956f8 <strtof+0x74>
      (!retval && d)
   956e0:	000d883a 	mov	r6,zero
   956e4:	000f883a 	mov	r7,zero
   956e8:	e13ffa17 	ldw	r4,-24(fp)
   956ec:	e17ffb17 	ldw	r5,-20(fp)
   956f0:	009dde80 	call	9dde8 <__eqdf2>
   956f4:	1000221e 	bne	r2,zero,95780 <strtof+0xfc>
      /* Positive overflow.  */
      || (retval == HUGE_VALF && d != HUGE_VAL)
   956f8:	e0fffc17 	ldw	r3,-16(fp)
   956fc:	009fe034 	movhi	r2,32640
   95700:	10bfffc4 	addi	r2,r2,-1
   95704:	1885f972 	custom	229,r2,r3,r2
   95708:	10000c26 	beq	r2,zero,9573c <strtof+0xb8>
   9570c:	04000044 	movi	r16,1
   95710:	01bfffc4 	movi	r6,-1
   95714:	01dffc34 	movhi	r7,32752
   95718:	39ffffc4 	addi	r7,r7,-1
   9571c:	e13ffa17 	ldw	r4,-24(fp)
   95720:	e17ffb17 	ldw	r5,-20(fp)
   95724:	00836440 	call	83644 <__gedf2>
   95728:	00800116 	blt	zero,r2,95730 <strtof+0xac>
   9572c:	0021883a 	mov	r16,zero
   95730:	8080005c 	xori	r2,r16,1
   95734:	10803fcc 	andi	r2,r2,255
   95738:	1000111e 	bne	r2,zero,95780 <strtof+0xfc>
      /* Negative overflow.  */
      || (retval == -HUGE_VALF && d != -HUGE_VAL))
   9573c:	e0fffc17 	ldw	r3,-16(fp)
   95740:	00bfe034 	movhi	r2,65408
   95744:	10bfffc4 	addi	r2,r2,-1
   95748:	1885f9f2 	custom	231,r2,r3,r2
   9574c:	10000f26 	beq	r2,zero,9578c <strtof+0x108>
   95750:	04000044 	movi	r16,1
   95754:	01bfffc4 	movi	r6,-1
   95758:	01fffc34 	movhi	r7,65520
   9575c:	39ffffc4 	addi	r7,r7,-1
   95760:	e13ffa17 	ldw	r4,-24(fp)
   95764:	e17ffb17 	ldw	r5,-20(fp)
   95768:	00837200 	call	83720 <__ledf2>
   9576c:	10000116 	blt	r2,zero,95774 <strtof+0xf0>
   95770:	0021883a 	mov	r16,zero
   95774:	8080005c 	xori	r2,r16,1
   95778:	10803fcc 	andi	r2,r2,255
   9577c:	10000326 	beq	r2,zero,9578c <strtof+0x108>
    _REENT->_errno = ERANGE;
   95780:	d0a00417 	ldw	r2,-32752(gp)
   95784:	00c00884 	movi	r3,34
   95788:	10c00015 	stw	r3,0(r2)
#endif

  return retval;
   9578c:	e0bffc17 	ldw	r2,-16(fp)
   95790:	1007883a 	mov	r3,r2
}
   95794:	1805883a 	mov	r2,r3
   95798:	e6ffff04 	addi	sp,fp,-4
   9579c:	dfc00217 	ldw	ra,8(sp)
   957a0:	df000117 	ldw	fp,4(sp)
   957a4:	dc000017 	ldw	r16,0(sp)
   957a8:	dec00304 	addi	sp,sp,12
   957ac:	f800283a 	ret

000957b0 <_strtol_r>:
_DEFUN (_strtol_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
   957b0:	defff304 	addi	sp,sp,-52
   957b4:	dfc00c15 	stw	ra,48(sp)
   957b8:	df000b15 	stw	fp,44(sp)
   957bc:	dd800a15 	stw	r22,40(sp)
   957c0:	dd400915 	stw	r21,36(sp)
   957c4:	dd000815 	stw	r20,32(sp)
   957c8:	dcc00715 	stw	r19,28(sp)
   957cc:	dc800615 	stw	r18,24(sp)
   957d0:	dc400515 	stw	r17,20(sp)
   957d4:	dc000415 	stw	r16,16(sp)
   957d8:	df000b04 	addi	fp,sp,44
   957dc:	e13ff515 	stw	r4,-44(fp)
   957e0:	e17ff615 	stw	r5,-40(fp)
   957e4:	e1bff715 	stw	r6,-36(fp)
   957e8:	e1fff815 	stw	r7,-32(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
   957ec:	e47ff617 	ldw	r17,-40(fp)
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   957f0:	0029883a 	mov	r20,zero
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   957f4:	8805883a 	mov	r2,r17
   957f8:	14400044 	addi	r17,r2,1
   957fc:	10800003 	ldbu	r2,0(r2)
   95800:	14003fcc 	andi	r16,r2,255
	} while (isspace(c));
   95804:	d0e00817 	ldw	r3,-32736(gp)
   95808:	8005883a 	mov	r2,r16
   9580c:	10800044 	addi	r2,r2,1
   95810:	1885883a 	add	r2,r3,r2
   95814:	10800003 	ldbu	r2,0(r2)
   95818:	10803fcc 	andi	r2,r2,255
   9581c:	1080020c 	andi	r2,r2,8
   95820:	103ff41e 	bne	r2,zero,957f4 <__alt_data_end+0xfffe37f4>
	if (c == '-') {
   95824:	80800b58 	cmpnei	r2,r16,45
   95828:	1000061e 	bne	r2,zero,95844 <_strtol_r+0x94>
		neg = 1;
   9582c:	05000044 	movi	r20,1
		c = *s++;
   95830:	8805883a 	mov	r2,r17
   95834:	14400044 	addi	r17,r2,1
   95838:	10800003 	ldbu	r2,0(r2)
   9583c:	14003fcc 	andi	r16,r2,255
   95840:	00000606 	br	9585c <_strtol_r+0xac>
	} else if (c == '+')
   95844:	80800ad8 	cmpnei	r2,r16,43
   95848:	1000041e 	bne	r2,zero,9585c <_strtol_r+0xac>
		c = *s++;
   9584c:	8805883a 	mov	r2,r17
   95850:	14400044 	addi	r17,r2,1
   95854:	10800003 	ldbu	r2,0(r2)
   95858:	14003fcc 	andi	r16,r2,255
	if ((base == 0 || base == 16) &&
   9585c:	e0bff817 	ldw	r2,-32(fp)
   95860:	10000326 	beq	r2,zero,95870 <_strtol_r+0xc0>
   95864:	e0bff817 	ldw	r2,-32(fp)
   95868:	10800418 	cmpnei	r2,r2,16
   9586c:	1000101e 	bne	r2,zero,958b0 <_strtol_r+0x100>
   95870:	80800c18 	cmpnei	r2,r16,48
   95874:	10000e1e 	bne	r2,zero,958b0 <_strtol_r+0x100>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   95878:	88800003 	ldbu	r2,0(r17)
   9587c:	10803fcc 	andi	r2,r2,255
   95880:	10801e20 	cmpeqi	r2,r2,120
   95884:	1000041e 	bne	r2,zero,95898 <_strtol_r+0xe8>
   95888:	88800003 	ldbu	r2,0(r17)
   9588c:	10803fcc 	andi	r2,r2,255
   95890:	10801618 	cmpnei	r2,r2,88
   95894:	1000061e 	bne	r2,zero,958b0 <_strtol_r+0x100>
		c = s[1];
   95898:	88800044 	addi	r2,r17,1
   9589c:	10800003 	ldbu	r2,0(r2)
   958a0:	14003fcc 	andi	r16,r2,255
		s += 2;
   958a4:	8c400084 	addi	r17,r17,2
		base = 16;
   958a8:	00800404 	movi	r2,16
   958ac:	e0bff815 	stw	r2,-32(fp)
	}
	if (base == 0)
   958b0:	e0bff817 	ldw	r2,-32(fp)
   958b4:	1000061e 	bne	r2,zero,958d0 <_strtol_r+0x120>
		base = c == '0' ? 8 : 10;
   958b8:	80800c18 	cmpnei	r2,r16,48
   958bc:	1000021e 	bne	r2,zero,958c8 <_strtol_r+0x118>
   958c0:	00800204 	movi	r2,8
   958c4:	00000106 	br	958cc <_strtol_r+0x11c>
   958c8:	00800284 	movi	r2,10
   958cc:	e0bff815 	stw	r2,-32(fp)
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   958d0:	a0000226 	beq	r20,zero,958dc <_strtol_r+0x12c>
   958d4:	00a00034 	movhi	r2,32768
   958d8:	00000206 	br	958e4 <_strtol_r+0x134>
   958dc:	00a00034 	movhi	r2,32768
   958e0:	10bfffc4 	addi	r2,r2,-1
   958e4:	102b883a 	mov	r21,r2
	cutlim = cutoff % (unsigned long)base;
   958e8:	e0bff817 	ldw	r2,-32(fp)
   958ec:	100b883a 	mov	r5,r2
   958f0:	a809883a 	mov	r4,r21
   958f4:	00823480 	call	82348 <__umodsi3>
   958f8:	102d883a 	mov	r22,r2
	cutoff /= (unsigned long)base;
   958fc:	e0bff817 	ldw	r2,-32(fp)
   95900:	100b883a 	mov	r5,r2
   95904:	a809883a 	mov	r4,r21
   95908:	00822e40 	call	822e4 <__udivsi3>
   9590c:	102b883a 	mov	r21,r2
	for (acc = 0, any = 0;; c = *s++) {
   95910:	0025883a 	mov	r18,zero
   95914:	0027883a 	mov	r19,zero
		if (isdigit(c))
   95918:	d0e00817 	ldw	r3,-32736(gp)
   9591c:	8005883a 	mov	r2,r16
   95920:	10800044 	addi	r2,r2,1
   95924:	1885883a 	add	r2,r3,r2
   95928:	10800003 	ldbu	r2,0(r2)
   9592c:	10803fcc 	andi	r2,r2,255
   95930:	1080010c 	andi	r2,r2,4
   95934:	10000226 	beq	r2,zero,95940 <_strtol_r+0x190>
			c -= '0';
   95938:	843ff404 	addi	r16,r16,-48
   9593c:	00001506 	br	95994 <_strtol_r+0x1e4>
		else if (isalpha(c))
   95940:	d0e00817 	ldw	r3,-32736(gp)
   95944:	8005883a 	mov	r2,r16
   95948:	10800044 	addi	r2,r2,1
   9594c:	1885883a 	add	r2,r3,r2
   95950:	10800003 	ldbu	r2,0(r2)
   95954:	10803fcc 	andi	r2,r2,255
   95958:	108000cc 	andi	r2,r2,3
   9595c:	10002226 	beq	r2,zero,959e8 <_strtol_r+0x238>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   95960:	d0e00817 	ldw	r3,-32736(gp)
   95964:	8005883a 	mov	r2,r16
   95968:	10800044 	addi	r2,r2,1
   9596c:	1885883a 	add	r2,r3,r2
   95970:	10800003 	ldbu	r2,0(r2)
   95974:	10803fcc 	andi	r2,r2,255
   95978:	108000cc 	andi	r2,r2,3
   9597c:	10800058 	cmpnei	r2,r2,1
   95980:	1000021e 	bne	r2,zero,9598c <_strtol_r+0x1dc>
   95984:	00800dc4 	movi	r2,55
   95988:	00000106 	br	95990 <_strtol_r+0x1e0>
   9598c:	008015c4 	movi	r2,87
   95990:	80a1c83a 	sub	r16,r16,r2
		else
			break;
		if (c >= base)
   95994:	e0bff817 	ldw	r2,-32(fp)
   95998:	8080150e 	bge	r16,r2,959f0 <_strtol_r+0x240>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   9599c:	98000316 	blt	r19,zero,959ac <_strtol_r+0x1fc>
   959a0:	ac800236 	bltu	r21,r18,959ac <_strtol_r+0x1fc>
   959a4:	9540031e 	bne	r18,r21,959b4 <_strtol_r+0x204>
   959a8:	b400020e 	bge	r22,r16,959b4 <_strtol_r+0x204>
			any = -1;
   959ac:	04ffffc4 	movi	r19,-1
   959b0:	00000806 	br	959d4 <_strtol_r+0x224>
		else {
			any = 1;
   959b4:	04c00044 	movi	r19,1
			acc *= base;
   959b8:	e0bff817 	ldw	r2,-32(fp)
   959bc:	100b883a 	mov	r5,r2
   959c0:	9009883a 	mov	r4,r18
   959c4:	00823a00 	call	823a0 <__mulsi3>
   959c8:	1025883a 	mov	r18,r2
			acc += c;
   959cc:	8005883a 	mov	r2,r16
   959d0:	90a5883a 	add	r18,r18,r2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   959d4:	8805883a 	mov	r2,r17
   959d8:	14400044 	addi	r17,r2,1
   959dc:	10800003 	ldbu	r2,0(r2)
   959e0:	14003fcc 	andi	r16,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   959e4:	003fcc06 	br	95918 <__alt_data_end+0xfffe3918>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   959e8:	0001883a 	nop
   959ec:	00000106 	br	959f4 <_strtol_r+0x244>
		if (c >= base)
			break;
   959f0:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   959f4:	98000a0e 	bge	r19,zero,95a20 <_strtol_r+0x270>
		acc = neg ? LONG_MIN : LONG_MAX;
   959f8:	a0000226 	beq	r20,zero,95a04 <_strtol_r+0x254>
   959fc:	00a00034 	movhi	r2,32768
   95a00:	00000206 	br	95a0c <_strtol_r+0x25c>
   95a04:	00a00034 	movhi	r2,32768
   95a08:	10bfffc4 	addi	r2,r2,-1
   95a0c:	1025883a 	mov	r18,r2
		rptr->_errno = ERANGE;
   95a10:	e0bff517 	ldw	r2,-44(fp)
   95a14:	00c00884 	movi	r3,34
   95a18:	10c00015 	stw	r3,0(r2)
   95a1c:	00000206 	br	95a28 <_strtol_r+0x278>
	} else if (neg)
   95a20:	a0000126 	beq	r20,zero,95a28 <_strtol_r+0x278>
		acc = -acc;
   95a24:	04a5c83a 	sub	r18,zero,r18
	if (endptr != 0)
   95a28:	e0bff717 	ldw	r2,-36(fp)
   95a2c:	10000626 	beq	r2,zero,95a48 <_strtol_r+0x298>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
   95a30:	98000226 	beq	r19,zero,95a3c <_strtol_r+0x28c>
   95a34:	88bfffc4 	addi	r2,r17,-1
   95a38:	00000106 	br	95a40 <_strtol_r+0x290>
   95a3c:	e0bff617 	ldw	r2,-40(fp)
   95a40:	e0fff717 	ldw	r3,-36(fp)
   95a44:	18800015 	stw	r2,0(r3)
	return (acc);
   95a48:	9005883a 	mov	r2,r18
}
   95a4c:	e6fff904 	addi	sp,fp,-28
   95a50:	dfc00817 	ldw	ra,32(sp)
   95a54:	df000717 	ldw	fp,28(sp)
   95a58:	dd800617 	ldw	r22,24(sp)
   95a5c:	dd400517 	ldw	r21,20(sp)
   95a60:	dd000417 	ldw	r20,16(sp)
   95a64:	dcc00317 	ldw	r19,12(sp)
   95a68:	dc800217 	ldw	r18,8(sp)
   95a6c:	dc400117 	ldw	r17,4(sp)
   95a70:	dc000017 	ldw	r16,0(sp)
   95a74:	dec00904 	addi	sp,sp,36
   95a78:	f800283a 	ret

00095a7c <strtol>:
long
_DEFUN (strtol, (s, ptr, base),
	_CONST char *__restrict s _AND
	char **__restrict ptr _AND
	int base)
{
   95a7c:	defffb04 	addi	sp,sp,-20
   95a80:	dfc00415 	stw	ra,16(sp)
   95a84:	df000315 	stw	fp,12(sp)
   95a88:	df000304 	addi	fp,sp,12
   95a8c:	e13ffd15 	stw	r4,-12(fp)
   95a90:	e17ffe15 	stw	r5,-8(fp)
   95a94:	e1bfff15 	stw	r6,-4(fp)
	return _strtol_r (_REENT, s, ptr, base);
   95a98:	d0a00417 	ldw	r2,-32752(gp)
   95a9c:	e1ffff17 	ldw	r7,-4(fp)
   95aa0:	e1bffe17 	ldw	r6,-8(fp)
   95aa4:	e17ffd17 	ldw	r5,-12(fp)
   95aa8:	1009883a 	mov	r4,r2
   95aac:	00957b00 	call	957b0 <_strtol_r>
}
   95ab0:	e037883a 	mov	sp,fp
   95ab4:	dfc00117 	ldw	ra,4(sp)
   95ab8:	df000017 	ldw	fp,0(sp)
   95abc:	dec00204 	addi	sp,sp,8
   95ac0:	f800283a 	ret

00095ac4 <_strtoll_r>:
_DEFUN (_strtoll_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
   95ac4:	deffed04 	addi	sp,sp,-76
   95ac8:	dfc01215 	stw	ra,72(sp)
   95acc:	df001115 	stw	fp,68(sp)
   95ad0:	ddc01015 	stw	r23,64(sp)
   95ad4:	dd800f15 	stw	r22,60(sp)
   95ad8:	dd400e15 	stw	r21,56(sp)
   95adc:	dd000d15 	stw	r20,52(sp)
   95ae0:	dcc00c15 	stw	r19,48(sp)
   95ae4:	dc800b15 	stw	r18,44(sp)
   95ae8:	dc400a15 	stw	r17,40(sp)
   95aec:	dc000915 	stw	r16,36(sp)
   95af0:	df001104 	addi	fp,sp,68
   95af4:	e13fef15 	stw	r4,-68(fp)
   95af8:	e17ff015 	stw	r5,-64(fp)
   95afc:	e1bff115 	stw	r6,-60(fp)
   95b00:	e1fff215 	stw	r7,-56(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
   95b04:	e57ff017 	ldw	r21,-64(fp)
	register unsigned long long acc;
	register int c;
	register unsigned long long cutoff;
	register int neg = 0, any, cutlim;
   95b08:	002f883a 	mov	r23,zero
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   95b0c:	a805883a 	mov	r2,r21
   95b10:	15400044 	addi	r21,r2,1
   95b14:	10800003 	ldbu	r2,0(r2)
   95b18:	14803fcc 	andi	r18,r2,255
	} while (isspace(c));
   95b1c:	d0e00817 	ldw	r3,-32736(gp)
   95b20:	9005883a 	mov	r2,r18
   95b24:	10800044 	addi	r2,r2,1
   95b28:	1885883a 	add	r2,r3,r2
   95b2c:	10800003 	ldbu	r2,0(r2)
   95b30:	10803fcc 	andi	r2,r2,255
   95b34:	1080020c 	andi	r2,r2,8
   95b38:	103ff41e 	bne	r2,zero,95b0c <__alt_data_end+0xfffe3b0c>
	if (c == '-') {
   95b3c:	90800b58 	cmpnei	r2,r18,45
   95b40:	1000061e 	bne	r2,zero,95b5c <_strtoll_r+0x98>
		neg = 1;
   95b44:	05c00044 	movi	r23,1
		c = *s++;
   95b48:	a805883a 	mov	r2,r21
   95b4c:	15400044 	addi	r21,r2,1
   95b50:	10800003 	ldbu	r2,0(r2)
   95b54:	14803fcc 	andi	r18,r2,255
   95b58:	00000606 	br	95b74 <_strtoll_r+0xb0>
	} else if (c == '+')
   95b5c:	90800ad8 	cmpnei	r2,r18,43
   95b60:	1000041e 	bne	r2,zero,95b74 <_strtoll_r+0xb0>
		c = *s++;
   95b64:	a805883a 	mov	r2,r21
   95b68:	15400044 	addi	r21,r2,1
   95b6c:	10800003 	ldbu	r2,0(r2)
   95b70:	14803fcc 	andi	r18,r2,255
	if ((base == 0 || base == 16) &&
   95b74:	e0bff217 	ldw	r2,-56(fp)
   95b78:	10000326 	beq	r2,zero,95b88 <_strtoll_r+0xc4>
   95b7c:	e0bff217 	ldw	r2,-56(fp)
   95b80:	10800418 	cmpnei	r2,r2,16
   95b84:	1000101e 	bne	r2,zero,95bc8 <_strtoll_r+0x104>
   95b88:	90800c18 	cmpnei	r2,r18,48
   95b8c:	10000e1e 	bne	r2,zero,95bc8 <_strtoll_r+0x104>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   95b90:	a8800003 	ldbu	r2,0(r21)
   95b94:	10803fcc 	andi	r2,r2,255
   95b98:	10801e20 	cmpeqi	r2,r2,120
   95b9c:	1000041e 	bne	r2,zero,95bb0 <_strtoll_r+0xec>
   95ba0:	a8800003 	ldbu	r2,0(r21)
   95ba4:	10803fcc 	andi	r2,r2,255
   95ba8:	10801618 	cmpnei	r2,r2,88
   95bac:	1000061e 	bne	r2,zero,95bc8 <_strtoll_r+0x104>
		c = s[1];
   95bb0:	a8800044 	addi	r2,r21,1
   95bb4:	10800003 	ldbu	r2,0(r2)
   95bb8:	14803fcc 	andi	r18,r2,255
		s += 2;
   95bbc:	ad400084 	addi	r21,r21,2
		base = 16;
   95bc0:	00800404 	movi	r2,16
   95bc4:	e0bff215 	stw	r2,-56(fp)
	}
	if (base == 0)
   95bc8:	e0bff217 	ldw	r2,-56(fp)
   95bcc:	1000061e 	bne	r2,zero,95be8 <_strtoll_r+0x124>
		base = c == '0' ? 8 : 10;
   95bd0:	90800c18 	cmpnei	r2,r18,48
   95bd4:	1000021e 	bne	r2,zero,95be0 <_strtoll_r+0x11c>
   95bd8:	00800204 	movi	r2,8
   95bdc:	00000106 	br	95be4 <_strtoll_r+0x120>
   95be0:	00800284 	movi	r2,10
   95be4:	e0bff215 	stw	r2,-56(fp)
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long long)LONG_LONG_MIN : LONG_LONG_MAX;
   95be8:	b8000326 	beq	r23,zero,95bf8 <_strtoll_r+0x134>
   95bec:	0005883a 	mov	r2,zero
   95bf0:	00e00034 	movhi	r3,32768
   95bf4:	00000306 	br	95c04 <_strtoll_r+0x140>
   95bf8:	00bfffc4 	movi	r2,-1
   95bfc:	00e00034 	movhi	r3,32768
   95c00:	18ffffc4 	addi	r3,r3,-1
   95c04:	1027883a 	mov	r19,r2
   95c08:	1829883a 	mov	r20,r3
	cutlim = cutoff % (unsigned long long)base;
   95c0c:	e0bff217 	ldw	r2,-56(fp)
   95c10:	1011883a 	mov	r8,r2
   95c14:	1005d7fa 	srai	r2,r2,31
   95c18:	1013883a 	mov	r9,r2
   95c1c:	400d883a 	mov	r6,r8
   95c20:	480f883a 	mov	r7,r9
   95c24:	9809883a 	mov	r4,r19
   95c28:	a00b883a 	mov	r5,r20
   95c2c:	009d8240 	call	9d824 <__umoddi3>
   95c30:	1009883a 	mov	r4,r2
   95c34:	180b883a 	mov	r5,r3
   95c38:	2005883a 	mov	r2,r4
   95c3c:	2807883a 	mov	r3,r5
   95c40:	e0bff315 	stw	r2,-52(fp)
	cutoff /= (unsigned long long)base;
   95c44:	e0bff217 	ldw	r2,-56(fp)
   95c48:	1021883a 	mov	r16,r2
   95c4c:	1005d7fa 	srai	r2,r2,31
   95c50:	1023883a 	mov	r17,r2
   95c54:	800d883a 	mov	r6,r16
   95c58:	880f883a 	mov	r7,r17
   95c5c:	9809883a 	mov	r4,r19
   95c60:	a00b883a 	mov	r5,r20
   95c64:	009d2280 	call	9d228 <__udivdi3>
   95c68:	1009883a 	mov	r4,r2
   95c6c:	180b883a 	mov	r5,r3
   95c70:	2027883a 	mov	r19,r4
   95c74:	2829883a 	mov	r20,r5
	for (acc = 0, any = 0;; c = *s++) {
   95c78:	0021883a 	mov	r16,zero
   95c7c:	0023883a 	mov	r17,zero
   95c80:	002d883a 	mov	r22,zero
		if (isdigit(c))
   95c84:	d0e00817 	ldw	r3,-32736(gp)
   95c88:	9005883a 	mov	r2,r18
   95c8c:	10800044 	addi	r2,r2,1
   95c90:	1885883a 	add	r2,r3,r2
   95c94:	10800003 	ldbu	r2,0(r2)
   95c98:	10803fcc 	andi	r2,r2,255
   95c9c:	1080010c 	andi	r2,r2,4
   95ca0:	10000226 	beq	r2,zero,95cac <_strtoll_r+0x1e8>
			c -= '0';
   95ca4:	94bff404 	addi	r18,r18,-48
   95ca8:	00001506 	br	95d00 <_strtoll_r+0x23c>
		else if (isalpha(c))
   95cac:	d0e00817 	ldw	r3,-32736(gp)
   95cb0:	9005883a 	mov	r2,r18
   95cb4:	10800044 	addi	r2,r2,1
   95cb8:	1885883a 	add	r2,r3,r2
   95cbc:	10800003 	ldbu	r2,0(r2)
   95cc0:	10803fcc 	andi	r2,r2,255
   95cc4:	108000cc 	andi	r2,r2,3
   95cc8:	10003826 	beq	r2,zero,95dac <_strtoll_r+0x2e8>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   95ccc:	d0e00817 	ldw	r3,-32736(gp)
   95cd0:	9005883a 	mov	r2,r18
   95cd4:	10800044 	addi	r2,r2,1
   95cd8:	1885883a 	add	r2,r3,r2
   95cdc:	10800003 	ldbu	r2,0(r2)
   95ce0:	10803fcc 	andi	r2,r2,255
   95ce4:	108000cc 	andi	r2,r2,3
   95ce8:	10800058 	cmpnei	r2,r2,1
   95cec:	1000021e 	bne	r2,zero,95cf8 <_strtoll_r+0x234>
   95cf0:	00800dc4 	movi	r2,55
   95cf4:	00000106 	br	95cfc <_strtoll_r+0x238>
   95cf8:	008015c4 	movi	r2,87
   95cfc:	90a5c83a 	sub	r18,r18,r2
		else
			break;
		if (c >= base)
   95d00:	e0bff217 	ldw	r2,-56(fp)
   95d04:	90802b0e 	bge	r18,r2,95db4 <_strtoll_r+0x2f0>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   95d08:	b0000716 	blt	r22,zero,95d28 <_strtoll_r+0x264>
   95d0c:	a4400636 	bltu	r20,r17,95d28 <_strtoll_r+0x264>
   95d10:	8d00011e 	bne	r17,r20,95d18 <_strtoll_r+0x254>
   95d14:	9c000436 	bltu	r19,r16,95d28 <_strtoll_r+0x264>
   95d18:	84c0051e 	bne	r16,r19,95d30 <_strtoll_r+0x26c>
   95d1c:	8d00041e 	bne	r17,r20,95d30 <_strtoll_r+0x26c>
   95d20:	e0bff317 	ldw	r2,-52(fp)
   95d24:	1480020e 	bge	r2,r18,95d30 <_strtoll_r+0x26c>
			any = -1;
   95d28:	05bfffc4 	movi	r22,-1
   95d2c:	00001a06 	br	95d98 <_strtoll_r+0x2d4>
		else {
			any = 1;
   95d30:	05800044 	movi	r22,1
			acc *= base;
   95d34:	e0bff217 	ldw	r2,-56(fp)
   95d38:	e0bff415 	stw	r2,-48(fp)
   95d3c:	1005d7fa 	srai	r2,r2,31
   95d40:	e0bff515 	stw	r2,-44(fp)
   95d44:	e1bff417 	ldw	r6,-48(fp)
   95d48:	e1fff517 	ldw	r7,-44(fp)
   95d4c:	8009883a 	mov	r4,r16
   95d50:	880b883a 	mov	r5,r17
   95d54:	009d0a80 	call	9d0a8 <__muldi3>
   95d58:	1009883a 	mov	r4,r2
   95d5c:	180b883a 	mov	r5,r3
   95d60:	2021883a 	mov	r16,r4
   95d64:	2823883a 	mov	r17,r5
			acc += c;
   95d68:	e4bff615 	stw	r18,-40(fp)
   95d6c:	9005d7fa 	srai	r2,r18,31
   95d70:	e0bff715 	stw	r2,-36(fp)
   95d74:	e13ff617 	ldw	r4,-40(fp)
   95d78:	8105883a 	add	r2,r16,r4
   95d7c:	1409803a 	cmpltu	r4,r2,r16
   95d80:	e17ff717 	ldw	r5,-36(fp)
   95d84:	8947883a 	add	r3,r17,r5
   95d88:	20c9883a 	add	r4,r4,r3
   95d8c:	2007883a 	mov	r3,r4
   95d90:	1021883a 	mov	r16,r2
   95d94:	1823883a 	mov	r17,r3
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long long)LONG_LONG_MIN : LONG_LONG_MAX;
	cutlim = cutoff % (unsigned long long)base;
	cutoff /= (unsigned long long)base;
	for (acc = 0, any = 0;; c = *s++) {
   95d98:	a805883a 	mov	r2,r21
   95d9c:	15400044 	addi	r21,r2,1
   95da0:	10800003 	ldbu	r2,0(r2)
   95da4:	14803fcc 	andi	r18,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   95da8:	003fb606 	br	95c84 <__alt_data_end+0xfffe3c84>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   95dac:	0001883a 	nop
   95db0:	00000106 	br	95db8 <_strtoll_r+0x2f4>
		if (c >= base)
			break;
   95db4:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   95db8:	b0000d0e 	bge	r22,zero,95df0 <_strtoll_r+0x32c>
		acc = neg ? LONG_LONG_MIN : LONG_LONG_MAX;
   95dbc:	b8000326 	beq	r23,zero,95dcc <_strtoll_r+0x308>
   95dc0:	0005883a 	mov	r2,zero
   95dc4:	00e00034 	movhi	r3,32768
   95dc8:	00000306 	br	95dd8 <_strtoll_r+0x314>
   95dcc:	00bfffc4 	movi	r2,-1
   95dd0:	00e00034 	movhi	r3,32768
   95dd4:	18ffffc4 	addi	r3,r3,-1
   95dd8:	1021883a 	mov	r16,r2
   95ddc:	1823883a 	mov	r17,r3
		rptr->_errno = ERANGE;
   95de0:	e0bfef17 	ldw	r2,-68(fp)
   95de4:	00c00884 	movi	r3,34
   95de8:	10c00015 	stw	r3,0(r2)
   95dec:	00000a06 	br	95e18 <_strtoll_r+0x354>
	} else if (neg)
   95df0:	b8000926 	beq	r23,zero,95e18 <_strtoll_r+0x354>
		acc = -acc;
   95df4:	0009883a 	mov	r4,zero
   95df8:	000b883a 	mov	r5,zero
   95dfc:	2405c83a 	sub	r2,r4,r16
   95e00:	208d803a 	cmpltu	r6,r4,r2
   95e04:	2c47c83a 	sub	r3,r5,r17
   95e08:	1989c83a 	sub	r4,r3,r6
   95e0c:	2007883a 	mov	r3,r4
   95e10:	1021883a 	mov	r16,r2
   95e14:	1823883a 	mov	r17,r3
	if (endptr != 0)
   95e18:	e0bff117 	ldw	r2,-60(fp)
   95e1c:	10000626 	beq	r2,zero,95e38 <_strtoll_r+0x374>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
   95e20:	b0000226 	beq	r22,zero,95e2c <_strtoll_r+0x368>
   95e24:	a8bfffc4 	addi	r2,r21,-1
   95e28:	00000106 	br	95e30 <_strtoll_r+0x36c>
   95e2c:	e0bff017 	ldw	r2,-64(fp)
   95e30:	e0fff117 	ldw	r3,-60(fp)
   95e34:	18800015 	stw	r2,0(r3)
	return (acc);
   95e38:	800b883a 	mov	r5,r16
   95e3c:	880d883a 	mov	r6,r17
   95e40:	2807883a 	mov	r3,r5
   95e44:	3009883a 	mov	r4,r6
}
   95e48:	1805883a 	mov	r2,r3
   95e4c:	2007883a 	mov	r3,r4
   95e50:	e6fff804 	addi	sp,fp,-32
   95e54:	dfc00917 	ldw	ra,36(sp)
   95e58:	df000817 	ldw	fp,32(sp)
   95e5c:	ddc00717 	ldw	r23,28(sp)
   95e60:	dd800617 	ldw	r22,24(sp)
   95e64:	dd400517 	ldw	r21,20(sp)
   95e68:	dd000417 	ldw	r20,16(sp)
   95e6c:	dcc00317 	ldw	r19,12(sp)
   95e70:	dc800217 	ldw	r18,8(sp)
   95e74:	dc400117 	ldw	r17,4(sp)
   95e78:	dc000017 	ldw	r16,0(sp)
   95e7c:	dec00a04 	addi	sp,sp,40
   95e80:	f800283a 	ret

00095e84 <_strtoul_r>:
_DEFUN (_strtoul_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
   95e84:	defff304 	addi	sp,sp,-52
   95e88:	dfc00c15 	stw	ra,48(sp)
   95e8c:	df000b15 	stw	fp,44(sp)
   95e90:	dd800a15 	stw	r22,40(sp)
   95e94:	dd400915 	stw	r21,36(sp)
   95e98:	dd000815 	stw	r20,32(sp)
   95e9c:	dcc00715 	stw	r19,28(sp)
   95ea0:	dc800615 	stw	r18,24(sp)
   95ea4:	dc400515 	stw	r17,20(sp)
   95ea8:	dc000415 	stw	r16,16(sp)
   95eac:	df000b04 	addi	fp,sp,44
   95eb0:	e13ff515 	stw	r4,-44(fp)
   95eb4:	e17ff615 	stw	r5,-40(fp)
   95eb8:	e1bff715 	stw	r6,-36(fp)
   95ebc:	e1fff815 	stw	r7,-32(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
   95ec0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   95ec4:	0029883a 	mov	r20,zero

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   95ec8:	8805883a 	mov	r2,r17
   95ecc:	14400044 	addi	r17,r2,1
   95ed0:	10800003 	ldbu	r2,0(r2)
   95ed4:	14003fcc 	andi	r16,r2,255
	} while (isspace(c));
   95ed8:	d0e00817 	ldw	r3,-32736(gp)
   95edc:	8005883a 	mov	r2,r16
   95ee0:	10800044 	addi	r2,r2,1
   95ee4:	1885883a 	add	r2,r3,r2
   95ee8:	10800003 	ldbu	r2,0(r2)
   95eec:	10803fcc 	andi	r2,r2,255
   95ef0:	1080020c 	andi	r2,r2,8
   95ef4:	103ff41e 	bne	r2,zero,95ec8 <__alt_data_end+0xfffe3ec8>
	if (c == '-') {
   95ef8:	80800b58 	cmpnei	r2,r16,45
   95efc:	1000061e 	bne	r2,zero,95f18 <_strtoul_r+0x94>
		neg = 1;
   95f00:	05000044 	movi	r20,1
		c = *s++;
   95f04:	8805883a 	mov	r2,r17
   95f08:	14400044 	addi	r17,r2,1
   95f0c:	10800003 	ldbu	r2,0(r2)
   95f10:	14003fcc 	andi	r16,r2,255
   95f14:	00000606 	br	95f30 <_strtoul_r+0xac>
	} else if (c == '+')
   95f18:	80800ad8 	cmpnei	r2,r16,43
   95f1c:	1000041e 	bne	r2,zero,95f30 <_strtoul_r+0xac>
		c = *s++;
   95f20:	8805883a 	mov	r2,r17
   95f24:	14400044 	addi	r17,r2,1
   95f28:	10800003 	ldbu	r2,0(r2)
   95f2c:	14003fcc 	andi	r16,r2,255
	if ((base == 0 || base == 16) &&
   95f30:	e0bff817 	ldw	r2,-32(fp)
   95f34:	10000326 	beq	r2,zero,95f44 <_strtoul_r+0xc0>
   95f38:	e0bff817 	ldw	r2,-32(fp)
   95f3c:	10800418 	cmpnei	r2,r2,16
   95f40:	1000101e 	bne	r2,zero,95f84 <_strtoul_r+0x100>
   95f44:	80800c18 	cmpnei	r2,r16,48
   95f48:	10000e1e 	bne	r2,zero,95f84 <_strtoul_r+0x100>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   95f4c:	88800003 	ldbu	r2,0(r17)
   95f50:	10803fcc 	andi	r2,r2,255
   95f54:	10801e20 	cmpeqi	r2,r2,120
   95f58:	1000041e 	bne	r2,zero,95f6c <_strtoul_r+0xe8>
   95f5c:	88800003 	ldbu	r2,0(r17)
   95f60:	10803fcc 	andi	r2,r2,255
   95f64:	10801618 	cmpnei	r2,r2,88
   95f68:	1000061e 	bne	r2,zero,95f84 <_strtoul_r+0x100>
		c = s[1];
   95f6c:	88800044 	addi	r2,r17,1
   95f70:	10800003 	ldbu	r2,0(r2)
   95f74:	14003fcc 	andi	r16,r2,255
		s += 2;
   95f78:	8c400084 	addi	r17,r17,2
		base = 16;
   95f7c:	00800404 	movi	r2,16
   95f80:	e0bff815 	stw	r2,-32(fp)
	}
	if (base == 0)
   95f84:	e0bff817 	ldw	r2,-32(fp)
   95f88:	1000061e 	bne	r2,zero,95fa4 <_strtoul_r+0x120>
		base = c == '0' ? 8 : 10;
   95f8c:	80800c18 	cmpnei	r2,r16,48
   95f90:	1000021e 	bne	r2,zero,95f9c <_strtoul_r+0x118>
   95f94:	00800204 	movi	r2,8
   95f98:	00000106 	br	95fa0 <_strtoul_r+0x11c>
   95f9c:	00800284 	movi	r2,10
   95fa0:	e0bff815 	stw	r2,-32(fp)
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   95fa4:	e0bff817 	ldw	r2,-32(fp)
   95fa8:	100b883a 	mov	r5,r2
   95fac:	013fffc4 	movi	r4,-1
   95fb0:	00822e40 	call	822e4 <__udivsi3>
   95fb4:	102b883a 	mov	r21,r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   95fb8:	e0fff817 	ldw	r3,-32(fp)
   95fbc:	00bfffc4 	movi	r2,-1
   95fc0:	180b883a 	mov	r5,r3
   95fc4:	1009883a 	mov	r4,r2
   95fc8:	00823480 	call	82348 <__umodsi3>
   95fcc:	102d883a 	mov	r22,r2
	for (acc = 0, any = 0;; c = *s++) {
   95fd0:	0025883a 	mov	r18,zero
   95fd4:	0027883a 	mov	r19,zero
		if (isdigit(c))
   95fd8:	d0e00817 	ldw	r3,-32736(gp)
   95fdc:	8005883a 	mov	r2,r16
   95fe0:	10800044 	addi	r2,r2,1
   95fe4:	1885883a 	add	r2,r3,r2
   95fe8:	10800003 	ldbu	r2,0(r2)
   95fec:	10803fcc 	andi	r2,r2,255
   95ff0:	1080010c 	andi	r2,r2,4
   95ff4:	10000226 	beq	r2,zero,96000 <_strtoul_r+0x17c>
			c -= '0';
   95ff8:	843ff404 	addi	r16,r16,-48
   95ffc:	00001506 	br	96054 <_strtoul_r+0x1d0>
		else if (isalpha(c))
   96000:	d0e00817 	ldw	r3,-32736(gp)
   96004:	8005883a 	mov	r2,r16
   96008:	10800044 	addi	r2,r2,1
   9600c:	1885883a 	add	r2,r3,r2
   96010:	10800003 	ldbu	r2,0(r2)
   96014:	10803fcc 	andi	r2,r2,255
   96018:	108000cc 	andi	r2,r2,3
   9601c:	10002226 	beq	r2,zero,960a8 <_strtoul_r+0x224>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   96020:	d0e00817 	ldw	r3,-32736(gp)
   96024:	8005883a 	mov	r2,r16
   96028:	10800044 	addi	r2,r2,1
   9602c:	1885883a 	add	r2,r3,r2
   96030:	10800003 	ldbu	r2,0(r2)
   96034:	10803fcc 	andi	r2,r2,255
   96038:	108000cc 	andi	r2,r2,3
   9603c:	10800058 	cmpnei	r2,r2,1
   96040:	1000021e 	bne	r2,zero,9604c <_strtoul_r+0x1c8>
   96044:	00800dc4 	movi	r2,55
   96048:	00000106 	br	96050 <_strtoul_r+0x1cc>
   9604c:	008015c4 	movi	r2,87
   96050:	80a1c83a 	sub	r16,r16,r2
		else
			break;
		if (c >= base)
   96054:	e0bff817 	ldw	r2,-32(fp)
   96058:	8080150e 	bge	r16,r2,960b0 <_strtoul_r+0x22c>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   9605c:	98000316 	blt	r19,zero,9606c <_strtoul_r+0x1e8>
   96060:	ac800236 	bltu	r21,r18,9606c <_strtoul_r+0x1e8>
   96064:	9540031e 	bne	r18,r21,96074 <_strtoul_r+0x1f0>
   96068:	b400020e 	bge	r22,r16,96074 <_strtoul_r+0x1f0>
			any = -1;
   9606c:	04ffffc4 	movi	r19,-1
   96070:	00000806 	br	96094 <_strtoul_r+0x210>
		else {
			any = 1;
   96074:	04c00044 	movi	r19,1
			acc *= base;
   96078:	e0bff817 	ldw	r2,-32(fp)
   9607c:	100b883a 	mov	r5,r2
   96080:	9009883a 	mov	r4,r18
   96084:	00823a00 	call	823a0 <__mulsi3>
   96088:	1025883a 	mov	r18,r2
			acc += c;
   9608c:	8005883a 	mov	r2,r16
   96090:	90a5883a 	add	r18,r18,r2
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   96094:	8805883a 	mov	r2,r17
   96098:	14400044 	addi	r17,r2,1
   9609c:	10800003 	ldbu	r2,0(r2)
   960a0:	14003fcc 	andi	r16,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   960a4:	003fcc06 	br	95fd8 <__alt_data_end+0xfffe3fd8>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   960a8:	0001883a 	nop
   960ac:	00000106 	br	960b4 <_strtoul_r+0x230>
		if (c >= base)
			break;
   960b0:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   960b4:	9800050e 	bge	r19,zero,960cc <_strtoul_r+0x248>
		acc = ULONG_MAX;
   960b8:	04bfffc4 	movi	r18,-1
		rptr->_errno = ERANGE;
   960bc:	e0bff517 	ldw	r2,-44(fp)
   960c0:	00c00884 	movi	r3,34
   960c4:	10c00015 	stw	r3,0(r2)
   960c8:	00000206 	br	960d4 <_strtoul_r+0x250>
	} else if (neg)
   960cc:	a0000126 	beq	r20,zero,960d4 <_strtoul_r+0x250>
		acc = -acc;
   960d0:	04a5c83a 	sub	r18,zero,r18
	if (endptr != 0)
   960d4:	e0bff717 	ldw	r2,-36(fp)
   960d8:	10000626 	beq	r2,zero,960f4 <_strtoul_r+0x270>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
   960dc:	98000226 	beq	r19,zero,960e8 <_strtoul_r+0x264>
   960e0:	88bfffc4 	addi	r2,r17,-1
   960e4:	00000106 	br	960ec <_strtoul_r+0x268>
   960e8:	e0bff617 	ldw	r2,-40(fp)
   960ec:	e0fff717 	ldw	r3,-36(fp)
   960f0:	18800015 	stw	r2,0(r3)
	return (acc);
   960f4:	9005883a 	mov	r2,r18
}
   960f8:	e6fff904 	addi	sp,fp,-28
   960fc:	dfc00817 	ldw	ra,32(sp)
   96100:	df000717 	ldw	fp,28(sp)
   96104:	dd800617 	ldw	r22,24(sp)
   96108:	dd400517 	ldw	r21,20(sp)
   9610c:	dd000417 	ldw	r20,16(sp)
   96110:	dcc00317 	ldw	r19,12(sp)
   96114:	dc800217 	ldw	r18,8(sp)
   96118:	dc400117 	ldw	r17,4(sp)
   9611c:	dc000017 	ldw	r16,0(sp)
   96120:	dec00904 	addi	sp,sp,36
   96124:	f800283a 	ret

00096128 <strtoul>:
unsigned long
_DEFUN (strtoul, (s, ptr, base),
	_CONST char *__restrict s _AND
	char **__restrict ptr _AND
	int base)
{
   96128:	defffb04 	addi	sp,sp,-20
   9612c:	dfc00415 	stw	ra,16(sp)
   96130:	df000315 	stw	fp,12(sp)
   96134:	df000304 	addi	fp,sp,12
   96138:	e13ffd15 	stw	r4,-12(fp)
   9613c:	e17ffe15 	stw	r5,-8(fp)
   96140:	e1bfff15 	stw	r6,-4(fp)
	return _strtoul_r (_REENT, s, ptr, base);
   96144:	d0a00417 	ldw	r2,-32752(gp)
   96148:	e1ffff17 	ldw	r7,-4(fp)
   9614c:	e1bffe17 	ldw	r6,-8(fp)
   96150:	e17ffd17 	ldw	r5,-12(fp)
   96154:	1009883a 	mov	r4,r2
   96158:	0095e840 	call	95e84 <_strtoul_r>
}
   9615c:	e037883a 	mov	sp,fp
   96160:	dfc00117 	ldw	ra,4(sp)
   96164:	df000017 	ldw	fp,0(sp)
   96168:	dec00204 	addi	sp,sp,8
   9616c:	f800283a 	ret

00096170 <_strtoull_r>:
_DEFUN (_strtoull_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
   96170:	deffed04 	addi	sp,sp,-76
   96174:	dfc01215 	stw	ra,72(sp)
   96178:	df001115 	stw	fp,68(sp)
   9617c:	ddc01015 	stw	r23,64(sp)
   96180:	dd800f15 	stw	r22,60(sp)
   96184:	dd400e15 	stw	r21,56(sp)
   96188:	dd000d15 	stw	r20,52(sp)
   9618c:	dcc00c15 	stw	r19,48(sp)
   96190:	dc800b15 	stw	r18,44(sp)
   96194:	dc400a15 	stw	r17,40(sp)
   96198:	dc000915 	stw	r16,36(sp)
   9619c:	df001104 	addi	fp,sp,68
   961a0:	e13fef15 	stw	r4,-68(fp)
   961a4:	e17ff015 	stw	r5,-64(fp)
   961a8:	e1bff115 	stw	r6,-60(fp)
   961ac:	e1fff215 	stw	r7,-56(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
   961b0:	e4fff017 	ldw	r19,-64(fp)
	register unsigned long long acc;
	register int c;
	register unsigned long long cutoff;
	register int neg = 0, any, cutlim;
   961b4:	002f883a 	mov	r23,zero

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   961b8:	9809883a 	mov	r4,r19
   961bc:	24c00044 	addi	r19,r4,1
   961c0:	21000003 	ldbu	r4,0(r4)
   961c4:	24803fcc 	andi	r18,r4,255
	} while (isspace(c));
   961c8:	d1600817 	ldw	r5,-32736(gp)
   961cc:	9009883a 	mov	r4,r18
   961d0:	21000044 	addi	r4,r4,1
   961d4:	2909883a 	add	r4,r5,r4
   961d8:	21000003 	ldbu	r4,0(r4)
   961dc:	21003fcc 	andi	r4,r4,255
   961e0:	2100020c 	andi	r4,r4,8
   961e4:	203ff41e 	bne	r4,zero,961b8 <__alt_data_end+0xfffe41b8>
	if (c == '-') {
   961e8:	91000b58 	cmpnei	r4,r18,45
   961ec:	2000061e 	bne	r4,zero,96208 <_strtoull_r+0x98>
		neg = 1;
   961f0:	05c00044 	movi	r23,1
		c = *s++;
   961f4:	9809883a 	mov	r4,r19
   961f8:	24c00044 	addi	r19,r4,1
   961fc:	21000003 	ldbu	r4,0(r4)
   96200:	24803fcc 	andi	r18,r4,255
   96204:	00000606 	br	96220 <_strtoull_r+0xb0>
	} else if (c == '+')
   96208:	91000ad8 	cmpnei	r4,r18,43
   9620c:	2000041e 	bne	r4,zero,96220 <_strtoull_r+0xb0>
		c = *s++;
   96210:	9809883a 	mov	r4,r19
   96214:	24c00044 	addi	r19,r4,1
   96218:	21000003 	ldbu	r4,0(r4)
   9621c:	24803fcc 	andi	r18,r4,255
	if ((base == 0 || base == 16) &&
   96220:	e13ff217 	ldw	r4,-56(fp)
   96224:	20000326 	beq	r4,zero,96234 <_strtoull_r+0xc4>
   96228:	e13ff217 	ldw	r4,-56(fp)
   9622c:	21000418 	cmpnei	r4,r4,16
   96230:	2000101e 	bne	r4,zero,96274 <_strtoull_r+0x104>
   96234:	91000c18 	cmpnei	r4,r18,48
   96238:	20000e1e 	bne	r4,zero,96274 <_strtoull_r+0x104>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   9623c:	99000003 	ldbu	r4,0(r19)
   96240:	21003fcc 	andi	r4,r4,255
   96244:	21001e20 	cmpeqi	r4,r4,120
   96248:	2000041e 	bne	r4,zero,9625c <_strtoull_r+0xec>
   9624c:	99000003 	ldbu	r4,0(r19)
   96250:	21003fcc 	andi	r4,r4,255
   96254:	21001618 	cmpnei	r4,r4,88
   96258:	2000061e 	bne	r4,zero,96274 <_strtoull_r+0x104>
		c = s[1];
   9625c:	99000044 	addi	r4,r19,1
   96260:	21000003 	ldbu	r4,0(r4)
   96264:	24803fcc 	andi	r18,r4,255
		s += 2;
   96268:	9cc00084 	addi	r19,r19,2
		base = 16;
   9626c:	01000404 	movi	r4,16
   96270:	e13ff215 	stw	r4,-56(fp)
	}
	if (base == 0)
   96274:	e13ff217 	ldw	r4,-56(fp)
   96278:	2000061e 	bne	r4,zero,96294 <_strtoull_r+0x124>
		base = c == '0' ? 8 : 10;
   9627c:	91000c18 	cmpnei	r4,r18,48
   96280:	2000021e 	bne	r4,zero,9628c <_strtoull_r+0x11c>
   96284:	01000204 	movi	r4,8
   96288:	00000106 	br	96290 <_strtoull_r+0x120>
   9628c:	01000284 	movi	r4,10
   96290:	e13ff215 	stw	r4,-56(fp)
	cutoff = (unsigned long long)ULONG_LONG_MAX / (unsigned long long)base;
   96294:	e13ff217 	ldw	r4,-56(fp)
   96298:	2005883a 	mov	r2,r4
   9629c:	2009d7fa 	srai	r4,r4,31
   962a0:	2007883a 	mov	r3,r4
   962a4:	100d883a 	mov	r6,r2
   962a8:	180f883a 	mov	r7,r3
   962ac:	013fffc4 	movi	r4,-1
   962b0:	017fffc4 	movi	r5,-1
   962b4:	009d2280 	call	9d228 <__udivdi3>
   962b8:	1009883a 	mov	r4,r2
   962bc:	180b883a 	mov	r5,r3
   962c0:	2029883a 	mov	r20,r4
   962c4:	282b883a 	mov	r21,r5
	cutlim = (unsigned long long)ULONG_LONG_MAX % (unsigned long long)base;
   962c8:	e0bff217 	ldw	r2,-56(fp)
   962cc:	1021883a 	mov	r16,r2
   962d0:	1005d7fa 	srai	r2,r2,31
   962d4:	1023883a 	mov	r17,r2
   962d8:	00bfffc4 	movi	r2,-1
   962dc:	00ffffc4 	movi	r3,-1
   962e0:	800d883a 	mov	r6,r16
   962e4:	880f883a 	mov	r7,r17
   962e8:	1009883a 	mov	r4,r2
   962ec:	180b883a 	mov	r5,r3
   962f0:	009d8240 	call	9d824 <__umoddi3>
   962f4:	1009883a 	mov	r4,r2
   962f8:	180b883a 	mov	r5,r3
   962fc:	2005883a 	mov	r2,r4
   96300:	2807883a 	mov	r3,r5
   96304:	e0bff315 	stw	r2,-52(fp)
	for (acc = 0, any = 0;; c = *s++) {
   96308:	0021883a 	mov	r16,zero
   9630c:	0023883a 	mov	r17,zero
   96310:	002d883a 	mov	r22,zero
		if (isdigit(c))
   96314:	d0e00817 	ldw	r3,-32736(gp)
   96318:	9005883a 	mov	r2,r18
   9631c:	10800044 	addi	r2,r2,1
   96320:	1885883a 	add	r2,r3,r2
   96324:	10800003 	ldbu	r2,0(r2)
   96328:	10803fcc 	andi	r2,r2,255
   9632c:	1080010c 	andi	r2,r2,4
   96330:	10000226 	beq	r2,zero,9633c <_strtoull_r+0x1cc>
			c -= '0';
   96334:	94bff404 	addi	r18,r18,-48
   96338:	00001506 	br	96390 <_strtoull_r+0x220>
		else if (isalpha(c))
   9633c:	d0e00817 	ldw	r3,-32736(gp)
   96340:	9005883a 	mov	r2,r18
   96344:	10800044 	addi	r2,r2,1
   96348:	1885883a 	add	r2,r3,r2
   9634c:	10800003 	ldbu	r2,0(r2)
   96350:	10803fcc 	andi	r2,r2,255
   96354:	108000cc 	andi	r2,r2,3
   96358:	10003826 	beq	r2,zero,9643c <_strtoull_r+0x2cc>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   9635c:	d0e00817 	ldw	r3,-32736(gp)
   96360:	9005883a 	mov	r2,r18
   96364:	10800044 	addi	r2,r2,1
   96368:	1885883a 	add	r2,r3,r2
   9636c:	10800003 	ldbu	r2,0(r2)
   96370:	10803fcc 	andi	r2,r2,255
   96374:	108000cc 	andi	r2,r2,3
   96378:	10800058 	cmpnei	r2,r2,1
   9637c:	1000021e 	bne	r2,zero,96388 <_strtoull_r+0x218>
   96380:	00800dc4 	movi	r2,55
   96384:	00000106 	br	9638c <_strtoull_r+0x21c>
   96388:	008015c4 	movi	r2,87
   9638c:	90a5c83a 	sub	r18,r18,r2
		else
			break;
		if (c >= base)
   96390:	e0bff217 	ldw	r2,-56(fp)
   96394:	90802b0e 	bge	r18,r2,96444 <_strtoull_r+0x2d4>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   96398:	b0000716 	blt	r22,zero,963b8 <_strtoull_r+0x248>
   9639c:	ac400636 	bltu	r21,r17,963b8 <_strtoull_r+0x248>
   963a0:	8d40011e 	bne	r17,r21,963a8 <_strtoull_r+0x238>
   963a4:	a4000436 	bltu	r20,r16,963b8 <_strtoull_r+0x248>
   963a8:	8500051e 	bne	r16,r20,963c0 <_strtoull_r+0x250>
   963ac:	8d40041e 	bne	r17,r21,963c0 <_strtoull_r+0x250>
   963b0:	e0bff317 	ldw	r2,-52(fp)
   963b4:	1480020e 	bge	r2,r18,963c0 <_strtoull_r+0x250>
			any = -1;
   963b8:	05bfffc4 	movi	r22,-1
   963bc:	00001a06 	br	96428 <_strtoull_r+0x2b8>
		else {
			any = 1;
   963c0:	05800044 	movi	r22,1
			acc *= base;
   963c4:	e0bff217 	ldw	r2,-56(fp)
   963c8:	e0bff415 	stw	r2,-48(fp)
   963cc:	1005d7fa 	srai	r2,r2,31
   963d0:	e0bff515 	stw	r2,-44(fp)
   963d4:	e1bff417 	ldw	r6,-48(fp)
   963d8:	e1fff517 	ldw	r7,-44(fp)
   963dc:	8009883a 	mov	r4,r16
   963e0:	880b883a 	mov	r5,r17
   963e4:	009d0a80 	call	9d0a8 <__muldi3>
   963e8:	1009883a 	mov	r4,r2
   963ec:	180b883a 	mov	r5,r3
   963f0:	2021883a 	mov	r16,r4
   963f4:	2823883a 	mov	r17,r5
			acc += c;
   963f8:	e4bff615 	stw	r18,-40(fp)
   963fc:	9005d7fa 	srai	r2,r18,31
   96400:	e0bff715 	stw	r2,-36(fp)
   96404:	e13ff617 	ldw	r4,-40(fp)
   96408:	8105883a 	add	r2,r16,r4
   9640c:	1409803a 	cmpltu	r4,r2,r16
   96410:	e17ff717 	ldw	r5,-36(fp)
   96414:	8947883a 	add	r3,r17,r5
   96418:	20c9883a 	add	r4,r4,r3
   9641c:	2007883a 	mov	r3,r4
   96420:	1021883a 	mov	r16,r2
   96424:	1823883a 	mov	r17,r3
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long long)ULONG_LONG_MAX / (unsigned long long)base;
	cutlim = (unsigned long long)ULONG_LONG_MAX % (unsigned long long)base;
	for (acc = 0, any = 0;; c = *s++) {
   96428:	9805883a 	mov	r2,r19
   9642c:	14c00044 	addi	r19,r2,1
   96430:	10800003 	ldbu	r2,0(r2)
   96434:	14803fcc 	andi	r18,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   96438:	003fb606 	br	96314 <__alt_data_end+0xfffe4314>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   9643c:	0001883a 	nop
   96440:	00000106 	br	96448 <_strtoull_r+0x2d8>
		if (c >= base)
			break;
   96444:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   96448:	b000060e 	bge	r22,zero,96464 <_strtoull_r+0x2f4>
		acc = ULONG_LONG_MAX;
   9644c:	043fffc4 	movi	r16,-1
   96450:	047fffc4 	movi	r17,-1
		rptr->_errno = ERANGE;
   96454:	e0bfef17 	ldw	r2,-68(fp)
   96458:	00c00884 	movi	r3,34
   9645c:	10c00015 	stw	r3,0(r2)
   96460:	00000a06 	br	9648c <_strtoull_r+0x31c>
	} else if (neg)
   96464:	b8000926 	beq	r23,zero,9648c <_strtoull_r+0x31c>
		acc = -acc;
   96468:	0009883a 	mov	r4,zero
   9646c:	000b883a 	mov	r5,zero
   96470:	2405c83a 	sub	r2,r4,r16
   96474:	208d803a 	cmpltu	r6,r4,r2
   96478:	2c47c83a 	sub	r3,r5,r17
   9647c:	1989c83a 	sub	r4,r3,r6
   96480:	2007883a 	mov	r3,r4
   96484:	1021883a 	mov	r16,r2
   96488:	1823883a 	mov	r17,r3
	if (endptr != 0)
   9648c:	e0bff117 	ldw	r2,-60(fp)
   96490:	10000626 	beq	r2,zero,964ac <_strtoull_r+0x33c>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
   96494:	b0000226 	beq	r22,zero,964a0 <_strtoull_r+0x330>
   96498:	98bfffc4 	addi	r2,r19,-1
   9649c:	00000106 	br	964a4 <_strtoull_r+0x334>
   964a0:	e0bff017 	ldw	r2,-64(fp)
   964a4:	e0fff117 	ldw	r3,-60(fp)
   964a8:	18800015 	stw	r2,0(r3)
	return (acc);
   964ac:	800b883a 	mov	r5,r16
   964b0:	880d883a 	mov	r6,r17
   964b4:	2807883a 	mov	r3,r5
   964b8:	3009883a 	mov	r4,r6
}
   964bc:	1805883a 	mov	r2,r3
   964c0:	2007883a 	mov	r3,r4
   964c4:	e6fff804 	addi	sp,fp,-32
   964c8:	dfc00917 	ldw	ra,36(sp)
   964cc:	df000817 	ldw	fp,32(sp)
   964d0:	ddc00717 	ldw	r23,28(sp)
   964d4:	dd800617 	ldw	r22,24(sp)
   964d8:	dd400517 	ldw	r21,20(sp)
   964dc:	dd000417 	ldw	r20,16(sp)
   964e0:	dcc00317 	ldw	r19,12(sp)
   964e4:	dc800217 	ldw	r18,8(sp)
   964e8:	dc400117 	ldw	r17,4(sp)
   964ec:	dc000017 	ldw	r16,0(sp)
   964f0:	dec00a04 	addi	sp,sp,40
   964f4:	f800283a 	ret

000964f8 <___svfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   964f8:	deffa504 	addi	sp,sp,-364
   964fc:	dfc05a15 	stw	ra,360(sp)
   96500:	df005915 	stw	fp,356(sp)
   96504:	ddc05815 	stw	r23,352(sp)
   96508:	dd805715 	stw	r22,348(sp)
   9650c:	dd405615 	stw	r21,344(sp)
   96510:	dd005515 	stw	r20,340(sp)
   96514:	dcc05415 	stw	r19,336(sp)
   96518:	dc805315 	stw	r18,332(sp)
   9651c:	dc405215 	stw	r17,328(sp)
   96520:	dc005115 	stw	r16,324(sp)
   96524:	df005904 	addi	fp,sp,356
   96528:	e13fe615 	stw	r4,-104(fp)
   9652c:	e17fe715 	stw	r5,-100(fp)
   96530:	e1bfe815 	stw	r6,-96(fp)
   96534:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
   96538:	e13fe617 	ldw	r4,-104(fp)
   9653c:	009011c0 	call	9011c <_localeconv_r>
   96540:	10800017 	ldw	r2,0(r2)
   96544:	e0bfbc15 	stw	r2,-272(fp)
	size_t decp_len = strlen (decimal_point);
   96548:	e13fbc17 	ldw	r4,-272(fp)
   9654c:	0088c340 	call	88c34 <strlen>
   96550:	e0bfbd15 	stw	r2,-268(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
   96554:	e03fc215 	stw	zero,-248(fp)
   96558:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
   9655c:	e03fb015 	stw	zero,-320(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
   96560:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   96564:	e03fb815 	stw	zero,-288(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   96568:	e03fb915 	stw	zero,-284(fp)
		return (__sbprintf (data, fp, fmt0, ap));
	}
#endif
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
   9656c:	e0bfe717 	ldw	r2,-100(fp)
   96570:	1080030b 	ldhu	r2,12(r2)
   96574:	10bfffcc 	andi	r2,r2,65535
   96578:	1080200c 	andi	r2,r2,128
   9657c:	10001826 	beq	r2,zero,965e0 <___svfprintf_internal_r+0xe8>
   96580:	e0bfe717 	ldw	r2,-100(fp)
   96584:	10800417 	ldw	r2,16(r2)
   96588:	1000151e 	bne	r2,zero,965e0 <___svfprintf_internal_r+0xe8>
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
   9658c:	01401004 	movi	r5,64
   96590:	e13fe617 	ldw	r4,-104(fp)
   96594:	00874a40 	call	874a4 <_malloc_r>
   96598:	1007883a 	mov	r3,r2
   9659c:	e0bfe717 	ldw	r2,-100(fp)
   965a0:	10c00015 	stw	r3,0(r2)
   965a4:	e0bfe717 	ldw	r2,-100(fp)
   965a8:	10c00017 	ldw	r3,0(r2)
   965ac:	e0bfe717 	ldw	r2,-100(fp)
   965b0:	10c00415 	stw	r3,16(r2)
		if (!fp->_p)
   965b4:	e0bfe717 	ldw	r2,-100(fp)
   965b8:	10800017 	ldw	r2,0(r2)
   965bc:	1000051e 	bne	r2,zero,965d4 <___svfprintf_internal_r+0xdc>
		{
			data->_errno = ENOMEM;
   965c0:	e0bfe617 	ldw	r2,-104(fp)
   965c4:	00c00304 	movi	r3,12
   965c8:	10c00015 	stw	r3,0(r2)
			return EOF;
   965cc:	00bfffc4 	movi	r2,-1
   965d0:	0007d906 	br	98538 <___svfprintf_internal_r+0x2040>
		}
		fp->_bf._size = 64;
   965d4:	e0bfe717 	ldw	r2,-100(fp)
   965d8:	00c01004 	movi	r3,64
   965dc:	10c00515 	stw	r3,20(r2)
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   965e0:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   965e4:	e47fcb04 	addi	r17,fp,-212
   965e8:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
   965ec:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   965f0:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   965f4:	e03fad15 	stw	zero,-332(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   965f8:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   965fc:	00000106 	br	96604 <___svfprintf_internal_r+0x10c>
                    fmt += 1;
   96600:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   96604:	a8800003 	ldbu	r2,0(r21)
   96608:	10803fcc 	andi	r2,r2,255
   9660c:	1080201c 	xori	r2,r2,128
   96610:	10bfe004 	addi	r2,r2,-128
   96614:	10000626 	beq	r2,zero,96630 <___svfprintf_internal_r+0x138>
   96618:	a8800003 	ldbu	r2,0(r21)
   9661c:	10803fcc 	andi	r2,r2,255
   96620:	1080201c 	xori	r2,r2,128
   96624:	10bfe004 	addi	r2,r2,-128
   96628:	10800958 	cmpnei	r2,r2,37
   9662c:	103ff41e 	bne	r2,zero,96600 <__alt_data_end+0xfffe4600>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   96630:	a807883a 	mov	r3,r21
   96634:	9005883a 	mov	r2,r18
   96638:	18a1c83a 	sub	r16,r3,r2
   9663c:	80001826 	beq	r16,zero,966a0 <___svfprintf_internal_r+0x1a8>
			PRINT (cp, m);
   96640:	8c800015 	stw	r18,0(r17)
   96644:	8005883a 	mov	r2,r16
   96648:	88800115 	stw	r2,4(r17)
   9664c:	e0bfca17 	ldw	r2,-216(fp)
   96650:	8007883a 	mov	r3,r16
   96654:	10c5883a 	add	r2,r2,r3
   96658:	e0bfca15 	stw	r2,-216(fp)
   9665c:	8c400204 	addi	r17,r17,8
   96660:	e0bfc917 	ldw	r2,-220(fp)
   96664:	10800044 	addi	r2,r2,1
   96668:	e0bfc915 	stw	r2,-220(fp)
   9666c:	e0bfc917 	ldw	r2,-220(fp)
   96670:	10800210 	cmplti	r2,r2,8
   96674:	1000071e 	bne	r2,zero,96694 <___svfprintf_internal_r+0x19c>
   96678:	e0bfc804 	addi	r2,fp,-224
   9667c:	100d883a 	mov	r6,r2
   96680:	e17fe717 	ldw	r5,-100(fp)
   96684:	e13fe617 	ldw	r4,-104(fp)
   96688:	009b8e40 	call	9b8e4 <__ssprint_r>
   9668c:	1007531e 	bne	r2,zero,983dc <___svfprintf_internal_r+0x1ee4>
   96690:	e47fcb04 	addi	r17,fp,-212
			ret += m;
   96694:	e0bfad17 	ldw	r2,-332(fp)
   96698:	1405883a 	add	r2,r2,r16
   9669c:	e0bfad15 	stw	r2,-332(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   966a0:	a8800003 	ldbu	r2,0(r21)
   966a4:	10803fcc 	andi	r2,r2,255
   966a8:	1080201c 	xori	r2,r2,128
   966ac:	10bfe004 	addi	r2,r2,-128
   966b0:	10073c26 	beq	r2,zero,983a4 <___svfprintf_internal_r+0x1eac>
                    goto done;
#endif
		fmt_anchor = fmt;
   966b4:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
   966b8:	ad400044 	addi	r21,r21,1

		flags = 0;
   966bc:	0027883a 	mov	r19,zero
		dprec = 0;
   966c0:	e03fb515 	stw	zero,-300(fp)
		width = 0;
   966c4:	e03fae15 	stw	zero,-328(fp)
		prec = -1;
   966c8:	00bfffc4 	movi	r2,-1
   966cc:	e0bfaf15 	stw	r2,-324(fp)
		sign = '\0';
   966d0:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
   966d4:	e03fb115 	stw	zero,-316(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   966d8:	a805883a 	mov	r2,r21
   966dc:	15400044 	addi	r21,r2,1
   966e0:	10800003 	ldbu	r2,0(r2)
   966e4:	15003fcc 	andi	r20,r2,255
   966e8:	a500201c 	xori	r20,r20,128
   966ec:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
   966f0:	a0bff804 	addi	r2,r20,-32
   966f4:	10c01668 	cmpgeui	r3,r2,89
   966f8:	18034f1e 	bne	r3,zero,97438 <___svfprintf_internal_r+0xf40>
   966fc:	100690ba 	slli	r3,r2,2
   96700:	00800274 	movhi	r2,9
   96704:	1099c504 	addi	r2,r2,26388
   96708:	1885883a 	add	r2,r3,r2
   9670c:	10800017 	ldw	r2,0(r2)
   96710:	1000683a 	jmp	r2
   96714:	00096878 	rdprs	zero,zero,9633
   96718:	00097438 	rdprs	zero,zero,9680
   9671c:	00097438 	rdprs	zero,zero,9680
   96720:	00096898 	cmpnei	zero,zero,9634
   96724:	00097438 	rdprs	zero,zero,9680
   96728:	00097438 	rdprs	zero,zero,9680
   9672c:	00097438 	rdprs	zero,zero,9680
   96730:	00097438 	rdprs	zero,zero,9680
   96734:	00097438 	rdprs	zero,zero,9680
   96738:	00097438 	rdprs	zero,zero,9680
   9673c:	000968a0 	cmpeqi	zero,zero,9634
   96740:	000968d4 	movui	zero,9635
   96744:	00097438 	rdprs	zero,zero,9680
   96748:	000968cc 	andi	zero,zero,9635
   9674c:	000968e0 	cmpeqi	zero,zero,9635
   96750:	00097438 	rdprs	zero,zero,9680
   96754:	00096980 	call	9698 <__alt_mem_MemoriaDados+0x9698>
   96758:	00096988 	cmpgei	zero,zero,9638
   9675c:	00096988 	cmpgei	zero,zero,9638
   96760:	00096988 	cmpgei	zero,zero,9638
   96764:	00096988 	cmpgei	zero,zero,9638
   96768:	00096988 	cmpgei	zero,zero,9638
   9676c:	00096988 	cmpgei	zero,zero,9638
   96770:	00096988 	cmpgei	zero,zero,9638
   96774:	00096988 	cmpgei	zero,zero,9638
   96778:	00096988 	cmpgei	zero,zero,9638
   9677c:	00097438 	rdprs	zero,zero,9680
   96780:	00097438 	rdprs	zero,zero,9680
   96784:	00097438 	rdprs	zero,zero,9680
   96788:	00097438 	rdprs	zero,zero,9680
   9678c:	00097438 	rdprs	zero,zero,9680
   96790:	00097438 	rdprs	zero,zero,9680
   96794:	00097438 	rdprs	zero,zero,9680
   96798:	00097438 	rdprs	zero,zero,9680
   9679c:	00097438 	rdprs	zero,zero,9680
   967a0:	00097438 	rdprs	zero,zero,9680
   967a4:	00096a3c 	xorhi	zero,zero,9640
   967a8:	00096b3c 	xorhi	zero,zero,9644
   967ac:	00097438 	rdprs	zero,zero,9680
   967b0:	00096b3c 	xorhi	zero,zero,9644
   967b4:	00097438 	rdprs	zero,zero,9680
   967b8:	00097438 	rdprs	zero,zero,9680
   967bc:	00097438 	rdprs	zero,zero,9680
   967c0:	00097438 	rdprs	zero,zero,9680
   967c4:	000969d0 	cmplti	zero,zero,9639
   967c8:	00097438 	rdprs	zero,zero,9680
   967cc:	00097438 	rdprs	zero,zero,9680
   967d0:	00096ed8 	cmpnei	zero,zero,9659
   967d4:	00097438 	rdprs	zero,zero,9680
   967d8:	00097438 	rdprs	zero,zero,9680
   967dc:	00097438 	rdprs	zero,zero,9680
   967e0:	00097438 	rdprs	zero,zero,9680
   967e4:	00097438 	rdprs	zero,zero,9680
   967e8:	00097054 	movui	zero,9665
   967ec:	00097438 	rdprs	zero,zero,9680
   967f0:	00097438 	rdprs	zero,zero,9680
   967f4:	00097114 	movui	zero,9668
   967f8:	00097438 	rdprs	zero,zero,9680
   967fc:	00097438 	rdprs	zero,zero,9680
   96800:	00097438 	rdprs	zero,zero,9680
   96804:	00097438 	rdprs	zero,zero,9680
   96808:	00097438 	rdprs	zero,zero,9680
   9680c:	00097438 	rdprs	zero,zero,9680
   96810:	00097438 	rdprs	zero,zero,9680
   96814:	00097438 	rdprs	zero,zero,9680
   96818:	00097438 	rdprs	zero,zero,9680
   9681c:	00097438 	rdprs	zero,zero,9680
   96820:	00096a14 	movui	zero,9640
   96824:	00096a40 	call	96a4 <__alt_mem_MemoriaDados+0x96a4>
   96828:	00096b3c 	xorhi	zero,zero,9644
   9682c:	00096b3c 	xorhi	zero,zero,9644
   96830:	00096b3c 	xorhi	zero,zero,9644
   96834:	000969d8 	cmpnei	zero,zero,9639
   96838:	00096a40 	call	96a4 <__alt_mem_MemoriaDados+0x96a4>
   9683c:	00097438 	rdprs	zero,zero,9680
   96840:	00097438 	rdprs	zero,zero,9680
   96844:	000969e0 	cmpeqi	zero,zero,9639
   96848:	00097438 	rdprs	zero,zero,9680
   9684c:	00096e38 	rdprs	zero,zero,9656
   96850:	00096edc 	xori	zero,zero,9659
   96854:	00096f7c 	xorhi	zero,zero,9661
   96858:	00096a0c 	andi	zero,zero,9640
   9685c:	00097438 	rdprs	zero,zero,9680
   96860:	00096fc4 	movi	zero,9663
   96864:	00097438 	rdprs	zero,zero,9680
   96868:	00097058 	cmpnei	zero,zero,9665
   9686c:	00097438 	rdprs	zero,zero,9680
   96870:	00097438 	rdprs	zero,zero,9680
   96874:	00097124 	muli	zero,zero,9668
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   96878:	e0bfc103 	ldbu	r2,-252(fp)
   9687c:	10803fcc 	andi	r2,r2,255
   96880:	1080201c 	xori	r2,r2,128
   96884:	10bfe004 	addi	r2,r2,-128
   96888:	103f931e 	bne	r2,zero,966d8 <__alt_data_end+0xfffe46d8>
				sign = ' ';
   9688c:	00800804 	movi	r2,32
   96890:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   96894:	003f9006 	br	966d8 <__alt_data_end+0xfffe46d8>
		case '#':
			flags |= ALT;
   96898:	9cc00054 	ori	r19,r19,1
			goto rflag;
   9689c:	003f8e06 	br	966d8 <__alt_data_end+0xfffe46d8>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   968a0:	e0bfe917 	ldw	r2,-92(fp)
   968a4:	10c00104 	addi	r3,r2,4
   968a8:	e0ffe915 	stw	r3,-92(fp)
   968ac:	10800017 	ldw	r2,0(r2)
   968b0:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   968b4:	e0bfae17 	ldw	r2,-328(fp)
   968b8:	10000116 	blt	r2,zero,968c0 <___svfprintf_internal_r+0x3c8>
				goto rflag;
   968bc:	003f8606 	br	966d8 <__alt_data_end+0xfffe46d8>
			width = -width;
   968c0:	e0bfae17 	ldw	r2,-328(fp)
   968c4:	0085c83a 	sub	r2,zero,r2
   968c8:	e0bfae15 	stw	r2,-328(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   968cc:	9cc00114 	ori	r19,r19,4
			goto rflag;
   968d0:	003f8106 	br	966d8 <__alt_data_end+0xfffe46d8>
		case '+':
			sign = '+';
   968d4:	00800ac4 	movi	r2,43
   968d8:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   968dc:	003f7e06 	br	966d8 <__alt_data_end+0xfffe46d8>
		case '.':
			if ((ch = *fmt++) == '*') {
   968e0:	a805883a 	mov	r2,r21
   968e4:	15400044 	addi	r21,r2,1
   968e8:	10800003 	ldbu	r2,0(r2)
   968ec:	15003fcc 	andi	r20,r2,255
   968f0:	a500201c 	xori	r20,r20,128
   968f4:	a53fe004 	addi	r20,r20,-128
   968f8:	a0800a98 	cmpnei	r2,r20,42
   968fc:	10000a1e 	bne	r2,zero,96928 <___svfprintf_internal_r+0x430>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   96900:	e0bfe917 	ldw	r2,-92(fp)
   96904:	10c00104 	addi	r3,r2,4
   96908:	e0ffe915 	stw	r3,-92(fp)
   9690c:	10800017 	ldw	r2,0(r2)
   96910:	e0bfaf15 	stw	r2,-324(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   96914:	e0bfaf17 	ldw	r2,-324(fp)
   96918:	103f6f0e 	bge	r2,zero,966d8 <__alt_data_end+0xfffe46d8>
					prec = -1;
   9691c:	00bfffc4 	movi	r2,-1
   96920:	e0bfaf15 	stw	r2,-324(fp)
				goto rflag;
   96924:	003f6c06 	br	966d8 <__alt_data_end+0xfffe46d8>
			}
			n = 0;
   96928:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   9692c:	00000c06 	br	96960 <___svfprintf_internal_r+0x468>
				n = 10 * n + to_digit (ch);
   96930:	01400284 	movi	r5,10
   96934:	8009883a 	mov	r4,r16
   96938:	00823a00 	call	823a0 <__mulsi3>
   9693c:	1007883a 	mov	r3,r2
   96940:	a0bff404 	addi	r2,r20,-48
   96944:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   96948:	a805883a 	mov	r2,r21
   9694c:	15400044 	addi	r21,r2,1
   96950:	10800003 	ldbu	r2,0(r2)
   96954:	15003fcc 	andi	r20,r2,255
   96958:	a500201c 	xori	r20,r20,128
   9695c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   96960:	a0bff404 	addi	r2,r20,-48
   96964:	108002b0 	cmpltui	r2,r2,10
   96968:	103ff11e 	bne	r2,zero,96930 <__alt_data_end+0xfffe4930>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   9696c:	8005883a 	mov	r2,r16
   96970:	1000010e 	bge	r2,zero,96978 <___svfprintf_internal_r+0x480>
   96974:	00bfffc4 	movi	r2,-1
   96978:	e0bfaf15 	stw	r2,-324(fp)
			goto reswitch;
   9697c:	003f5c06 	br	966f0 <__alt_data_end+0xfffe46f0>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   96980:	9cc02014 	ori	r19,r19,128
			goto rflag;
   96984:	003f5406 	br	966d8 <__alt_data_end+0xfffe46d8>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   96988:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   9698c:	01400284 	movi	r5,10
   96990:	8009883a 	mov	r4,r16
   96994:	00823a00 	call	823a0 <__mulsi3>
   96998:	1007883a 	mov	r3,r2
   9699c:	a0bff404 	addi	r2,r20,-48
   969a0:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   969a4:	a805883a 	mov	r2,r21
   969a8:	15400044 	addi	r21,r2,1
   969ac:	10800003 	ldbu	r2,0(r2)
   969b0:	15003fcc 	andi	r20,r2,255
   969b4:	a500201c 	xori	r20,r20,128
   969b8:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
   969bc:	a0bff404 	addi	r2,r20,-48
   969c0:	108002b0 	cmpltui	r2,r2,10
   969c4:	103ff11e 	bne	r2,zero,9698c <__alt_data_end+0xfffe498c>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   969c8:	e43fae15 	stw	r16,-328(fp)
			goto reswitch;
   969cc:	003f4806 	br	966f0 <__alt_data_end+0xfffe46f0>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   969d0:	9cc00214 	ori	r19,r19,8
			goto rflag;
   969d4:	003f4006 	br	966d8 <__alt_data_end+0xfffe46d8>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   969d8:	9cc01014 	ori	r19,r19,64
			goto rflag;
   969dc:	003f3e06 	br	966d8 <__alt_data_end+0xfffe46d8>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   969e0:	a8800003 	ldbu	r2,0(r21)
   969e4:	10803fcc 	andi	r2,r2,255
   969e8:	1080201c 	xori	r2,r2,128
   969ec:	10bfe004 	addi	r2,r2,-128
   969f0:	10801b18 	cmpnei	r2,r2,108
   969f4:	1000031e 	bne	r2,zero,96a04 <___svfprintf_internal_r+0x50c>
				fmt++;
   969f8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   969fc:	9cc00814 	ori	r19,r19,32
   96a00:	003f3506 	br	966d8 <__alt_data_end+0xfffe46d8>
			} else
#endif
				flags |= LONGINT;
   96a04:	9cc00414 	ori	r19,r19,16
			goto rflag;
   96a08:	003f3306 	br	966d8 <__alt_data_end+0xfffe46d8>
		case 'q': /* extension */
			flags |= QUADINT;
   96a0c:	9cc00814 	ori	r19,r19,32
			goto rflag;
   96a10:	003f3106 	br	966d8 <__alt_data_end+0xfffe46d8>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   96a14:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   96a18:	e0bfe917 	ldw	r2,-92(fp)
   96a1c:	10c00104 	addi	r3,r2,4
   96a20:	e0ffe915 	stw	r3,-92(fp)
   96a24:	10800017 	ldw	r2,0(r2)
   96a28:	90800005 	stb	r2,0(r18)
				size = 1;
   96a2c:	00800044 	movi	r2,1
   96a30:	e0bfb715 	stw	r2,-292(fp)
			}
			sign = '\0';
   96a34:	e03fc105 	stb	zero,-252(fp)
			break;
   96a38:	00028806 	br	9745c <___svfprintf_internal_r+0xf64>
		case 'D':  /* extension */
			flags |= LONGINT;
   96a3c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   96a40:	9880080c 	andi	r2,r19,32
   96a44:	10000826 	beq	r2,zero,96a68 <___svfprintf_internal_r+0x570>
   96a48:	e13fe917 	ldw	r4,-92(fp)
   96a4c:	20800204 	addi	r2,r4,8
   96a50:	e0bfe915 	stw	r2,-92(fp)
   96a54:	20800017 	ldw	r2,0(r4)
   96a58:	20c00117 	ldw	r3,4(r4)
   96a5c:	e0bfea15 	stw	r2,-88(fp)
   96a60:	e0ffeb15 	stw	r3,-84(fp)
   96a64:	00001e06 	br	96ae0 <___svfprintf_internal_r+0x5e8>
   96a68:	9880040c 	andi	r2,r19,16
   96a6c:	10000826 	beq	r2,zero,96a90 <___svfprintf_internal_r+0x598>
   96a70:	e0bfe917 	ldw	r2,-92(fp)
   96a74:	10c00104 	addi	r3,r2,4
   96a78:	e0ffe915 	stw	r3,-92(fp)
   96a7c:	10800017 	ldw	r2,0(r2)
   96a80:	e0bfea15 	stw	r2,-88(fp)
   96a84:	1005d7fa 	srai	r2,r2,31
   96a88:	e0bfeb15 	stw	r2,-84(fp)
   96a8c:	00001406 	br	96ae0 <___svfprintf_internal_r+0x5e8>
   96a90:	9880100c 	andi	r2,r19,64
   96a94:	10000b26 	beq	r2,zero,96ac4 <___svfprintf_internal_r+0x5cc>
   96a98:	e0bfe917 	ldw	r2,-92(fp)
   96a9c:	10c00104 	addi	r3,r2,4
   96aa0:	e0ffe915 	stw	r3,-92(fp)
   96aa4:	10800017 	ldw	r2,0(r2)
   96aa8:	10bfffcc 	andi	r2,r2,65535
   96aac:	10a0001c 	xori	r2,r2,32768
   96ab0:	10a00004 	addi	r2,r2,-32768
   96ab4:	e0bfea15 	stw	r2,-88(fp)
   96ab8:	1005d7fa 	srai	r2,r2,31
   96abc:	e0bfeb15 	stw	r2,-84(fp)
   96ac0:	00000706 	br	96ae0 <___svfprintf_internal_r+0x5e8>
   96ac4:	e0bfe917 	ldw	r2,-92(fp)
   96ac8:	10c00104 	addi	r3,r2,4
   96acc:	e0ffe915 	stw	r3,-92(fp)
   96ad0:	10800017 	ldw	r2,0(r2)
   96ad4:	e0bfea15 	stw	r2,-88(fp)
   96ad8:	1005d7fa 	srai	r2,r2,31
   96adc:	e0bfeb15 	stw	r2,-84(fp)
   96ae0:	e0bfea17 	ldw	r2,-88(fp)
   96ae4:	e0bfb215 	stw	r2,-312(fp)
   96ae8:	e0ffeb17 	ldw	r3,-84(fp)
   96aec:	e0ffb315 	stw	r3,-308(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   96af0:	e0bfb217 	ldw	r2,-312(fp)
   96af4:	e0ffb317 	ldw	r3,-308(fp)
   96af8:	18000d0e 	bge	r3,zero,96b30 <___svfprintf_internal_r+0x638>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   96afc:	000f883a 	mov	r7,zero
   96b00:	0011883a 	mov	r8,zero
   96b04:	e13fb217 	ldw	r4,-312(fp)
   96b08:	e17fb317 	ldw	r5,-308(fp)
   96b0c:	3905c83a 	sub	r2,r7,r4
   96b10:	388d803a 	cmpltu	r6,r7,r2
   96b14:	4147c83a 	sub	r3,r8,r5
   96b18:	1989c83a 	sub	r4,r3,r6
   96b1c:	2007883a 	mov	r3,r4
   96b20:	e0bfb215 	stw	r2,-312(fp)
   96b24:	e0ffb315 	stw	r3,-308(fp)
				sign = '-';
   96b28:	00800b44 	movi	r2,45
   96b2c:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
   96b30:	00800044 	movi	r2,1
   96b34:	e0bfb405 	stb	r2,-304(fp)
			goto number;
   96b38:	0001b706 	br	97218 <___svfprintf_internal_r+0xd20>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
   96b3c:	9880020c 	andi	r2,r19,8
   96b40:	10000826 	beq	r2,zero,96b64 <___svfprintf_internal_r+0x66c>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
   96b44:	e13fe917 	ldw	r4,-92(fp)
   96b48:	20800204 	addi	r2,r4,8
   96b4c:	e0bfe915 	stw	r2,-92(fp)
   96b50:	20800017 	ldw	r2,0(r4)
   96b54:	20c00117 	ldw	r3,4(r4)
   96b58:	e0bfc215 	stw	r2,-248(fp)
   96b5c:	e0ffc315 	stw	r3,-244(fp)
   96b60:	00000706 	br	96b80 <___svfprintf_internal_r+0x688>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
   96b64:	e13fe917 	ldw	r4,-92(fp)
   96b68:	20800204 	addi	r2,r4,8
   96b6c:	e0bfe915 	stw	r2,-92(fp)
   96b70:	20800017 	ldw	r2,0(r4)
   96b74:	20c00117 	ldw	r3,4(r4)
   96b78:	e0bfc215 	stw	r2,-248(fp)
   96b7c:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
   96b80:	e0bfc217 	ldw	r2,-248(fp)
   96b84:	e0ffc317 	ldw	r3,-244(fp)
   96b88:	1009883a 	mov	r4,r2
   96b8c:	180b883a 	mov	r5,r3
   96b90:	009313c0 	call	9313c <__fpclassifyd>
   96b94:	10800058 	cmpnei	r2,r2,1
   96b98:	1000161e 	bne	r2,zero,96bf4 <___svfprintf_internal_r+0x6fc>
				if (_fpvalue < 0)
   96b9c:	e0bfc217 	ldw	r2,-248(fp)
   96ba0:	e0ffc317 	ldw	r3,-244(fp)
   96ba4:	000d883a 	mov	r6,zero
   96ba8:	000f883a 	mov	r7,zero
   96bac:	1009883a 	mov	r4,r2
   96bb0:	180b883a 	mov	r5,r3
   96bb4:	00837200 	call	83720 <__ledf2>
   96bb8:	1000020e 	bge	r2,zero,96bc4 <___svfprintf_internal_r+0x6cc>
					sign = '-';
   96bbc:	00800b44 	movi	r2,45
   96bc0:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   96bc4:	a0801208 	cmpgei	r2,r20,72
   96bc8:	1000031e 	bne	r2,zero,96bd8 <___svfprintf_internal_r+0x6e0>
					cp = "INF";
   96bcc:	048002b4 	movhi	r18,10
   96bd0:	9484d904 	addi	r18,r18,4964
   96bd4:	00000206 	br	96be0 <___svfprintf_internal_r+0x6e8>
				else
					cp = "inf";
   96bd8:	048002b4 	movhi	r18,10
   96bdc:	9484da04 	addi	r18,r18,4968
				size = 3;
   96be0:	008000c4 	movi	r2,3
   96be4:	e0bfb715 	stw	r2,-292(fp)
				flags &= ~ZEROPAD;
   96be8:	00bfdfc4 	movi	r2,-129
   96bec:	98a6703a 	and	r19,r19,r2
				break;
   96bf0:	00021a06 	br	9745c <___svfprintf_internal_r+0xf64>
			}
			if (isnan (_fpvalue)) {
   96bf4:	e0bfc217 	ldw	r2,-248(fp)
   96bf8:	e0ffc317 	ldw	r3,-244(fp)
   96bfc:	1009883a 	mov	r4,r2
   96c00:	180b883a 	mov	r5,r3
   96c04:	009313c0 	call	9313c <__fpclassifyd>
   96c08:	10000c1e 	bne	r2,zero,96c3c <___svfprintf_internal_r+0x744>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   96c0c:	a0801208 	cmpgei	r2,r20,72
   96c10:	1000031e 	bne	r2,zero,96c20 <___svfprintf_internal_r+0x728>
					cp = "NAN";
   96c14:	048002b4 	movhi	r18,10
   96c18:	9484db04 	addi	r18,r18,4972
   96c1c:	00000206 	br	96c28 <___svfprintf_internal_r+0x730>
				else
					cp = "nan";
   96c20:	048002b4 	movhi	r18,10
   96c24:	9484dc04 	addi	r18,r18,4976
				size = 3;
   96c28:	008000c4 	movi	r2,3
   96c2c:	e0bfb715 	stw	r2,-292(fp)
				flags &= ~ZEROPAD;
   96c30:	00bfdfc4 	movi	r2,-129
   96c34:	98a6703a 	and	r19,r19,r2
				break;
   96c38:	00020806 	br	9745c <___svfprintf_internal_r+0xf64>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
   96c3c:	e0bfaf17 	ldw	r2,-324(fp)
   96c40:	10bfffd8 	cmpnei	r2,r2,-1
   96c44:	1000031e 	bne	r2,zero,96c54 <___svfprintf_internal_r+0x75c>
				prec = DEFPREC;
   96c48:	00800184 	movi	r2,6
   96c4c:	e0bfaf15 	stw	r2,-324(fp)
   96c50:	00000806 	br	96c74 <___svfprintf_internal_r+0x77c>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
   96c54:	a08019e0 	cmpeqi	r2,r20,103
   96c58:	1000021e 	bne	r2,zero,96c64 <___svfprintf_internal_r+0x76c>
   96c5c:	a08011d8 	cmpnei	r2,r20,71
   96c60:	1000041e 	bne	r2,zero,96c74 <___svfprintf_internal_r+0x77c>
   96c64:	e0bfaf17 	ldw	r2,-324(fp)
   96c68:	1000021e 	bne	r2,zero,96c74 <___svfprintf_internal_r+0x77c>
				prec = 1;
   96c6c:	00800044 	movi	r2,1
   96c70:	e0bfaf15 	stw	r2,-324(fp)
			}

			flags |= FPT;
   96c74:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
   96c78:	e0bfc217 	ldw	r2,-248(fp)
   96c7c:	e0ffc317 	ldw	r3,-244(fp)
   96c80:	dc800515 	stw	r18,20(sp)
   96c84:	e13fc704 	addi	r4,fp,-228
   96c88:	d9000415 	stw	r4,16(sp)
   96c8c:	dd000315 	stw	r20,12(sp)
   96c90:	e13fc404 	addi	r4,fp,-240
   96c94:	d9000215 	stw	r4,8(sp)
   96c98:	e13fc144 	addi	r4,fp,-251
   96c9c:	d9000115 	stw	r4,4(sp)
   96ca0:	dcc00015 	stw	r19,0(sp)
   96ca4:	e1ffaf17 	ldw	r7,-324(fp)
   96ca8:	100b883a 	mov	r5,r2
   96cac:	180d883a 	mov	r6,r3
   96cb0:	e13fe617 	ldw	r4,-104(fp)
   96cb4:	009856c0 	call	9856c <cvt>
   96cb8:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
   96cbc:	a08019e0 	cmpeqi	r2,r20,103
   96cc0:	1000021e 	bne	r2,zero,96ccc <___svfprintf_internal_r+0x7d4>
   96cc4:	a08011d8 	cmpnei	r2,r20,71
   96cc8:	1000091e 	bne	r2,zero,96cf0 <___svfprintf_internal_r+0x7f8>
				if (expt <= -4 || expt > prec)
   96ccc:	e0bfc417 	ldw	r2,-240(fp)
   96cd0:	10bfff50 	cmplti	r2,r2,-3
   96cd4:	1000031e 	bne	r2,zero,96ce4 <___svfprintf_internal_r+0x7ec>
   96cd8:	e0bfc417 	ldw	r2,-240(fp)
   96cdc:	e0ffaf17 	ldw	r3,-324(fp)
   96ce0:	1880020e 	bge	r3,r2,96cec <___svfprintf_internal_r+0x7f4>
					ch -= 2; /* 'e' or 'E' */
   96ce4:	a53fff84 	addi	r20,r20,-2
   96ce8:	00000106 	br	96cf0 <___svfprintf_internal_r+0x7f8>
				else
					ch = 'g';
   96cec:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
   96cf0:	a0801988 	cmpgei	r2,r20,102
   96cf4:	1000171e 	bne	r2,zero,96d54 <___svfprintf_internal_r+0x85c>
				--expt;
   96cf8:	e0bfc417 	ldw	r2,-240(fp)
   96cfc:	10bfffc4 	addi	r2,r2,-1
   96d00:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
   96d04:	e0bfc417 	ldw	r2,-240(fp)
   96d08:	e0ffc504 	addi	r3,fp,-236
   96d0c:	a00d883a 	mov	r6,r20
   96d10:	100b883a 	mov	r5,r2
   96d14:	1809883a 	mov	r4,r3
   96d18:	00987780 	call	98778 <exponent>
   96d1c:	e0bfb015 	stw	r2,-320(fp)
				size = expsize + ndig;
   96d20:	e0bfc717 	ldw	r2,-228(fp)
   96d24:	e0ffb017 	ldw	r3,-320(fp)
   96d28:	1885883a 	add	r2,r3,r2
   96d2c:	e0bfb715 	stw	r2,-292(fp)
				if (ndig > 1 || flags & ALT)
   96d30:	e0bfc717 	ldw	r2,-228(fp)
   96d34:	10800088 	cmpgei	r2,r2,2
   96d38:	1000021e 	bne	r2,zero,96d44 <___svfprintf_internal_r+0x84c>
   96d3c:	9880004c 	andi	r2,r19,1
   96d40:	10003526 	beq	r2,zero,96e18 <___svfprintf_internal_r+0x920>
					++size;
   96d44:	e0bfb717 	ldw	r2,-292(fp)
   96d48:	10800044 	addi	r2,r2,1
   96d4c:	e0bfb715 	stw	r2,-292(fp)
   96d50:	00003106 	br	96e18 <___svfprintf_internal_r+0x920>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
   96d54:	a0801998 	cmpnei	r2,r20,102
   96d58:	1000181e 	bne	r2,zero,96dbc <___svfprintf_internal_r+0x8c4>
					if (expt > 0) {
   96d5c:	e0bfc417 	ldw	r2,-240(fp)
   96d60:	00800c0e 	bge	zero,r2,96d94 <___svfprintf_internal_r+0x89c>
						size = expt;
   96d64:	e0bfc417 	ldw	r2,-240(fp)
   96d68:	e0bfb715 	stw	r2,-292(fp)
						if (prec || flags & ALT)
   96d6c:	e0bfaf17 	ldw	r2,-324(fp)
   96d70:	1000021e 	bne	r2,zero,96d7c <___svfprintf_internal_r+0x884>
   96d74:	9880004c 	andi	r2,r19,1
   96d78:	10002526 	beq	r2,zero,96e10 <___svfprintf_internal_r+0x918>
							size += prec + 1;
   96d7c:	e0bfaf17 	ldw	r2,-324(fp)
   96d80:	10800044 	addi	r2,r2,1
   96d84:	e0ffb717 	ldw	r3,-292(fp)
   96d88:	1885883a 	add	r2,r3,r2
   96d8c:	e0bfb715 	stw	r2,-292(fp)
   96d90:	00001f06 	br	96e10 <___svfprintf_internal_r+0x918>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
   96d94:	e0bfaf17 	ldw	r2,-324(fp)
   96d98:	1000021e 	bne	r2,zero,96da4 <___svfprintf_internal_r+0x8ac>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   96d9c:	9880004c 	andi	r2,r19,1
   96da0:	10000326 	beq	r2,zero,96db0 <___svfprintf_internal_r+0x8b8>
							  ? prec + 2
							  : 1;
   96da4:	e0bfaf17 	ldw	r2,-324(fp)
   96da8:	10800084 	addi	r2,r2,2
   96dac:	00000106 	br	96db4 <___svfprintf_internal_r+0x8bc>
   96db0:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   96db4:	e0bfb715 	stw	r2,-292(fp)
   96db8:	00001506 	br	96e10 <___svfprintf_internal_r+0x918>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
   96dbc:	e0ffc417 	ldw	r3,-240(fp)
   96dc0:	e0bfc717 	ldw	r2,-228(fp)
   96dc4:	18800816 	blt	r3,r2,96de8 <___svfprintf_internal_r+0x8f0>
					size = expt;
   96dc8:	e0bfc417 	ldw	r2,-240(fp)
   96dcc:	e0bfb715 	stw	r2,-292(fp)
					if (flags & ALT)
   96dd0:	9880004c 	andi	r2,r19,1
   96dd4:	10000e26 	beq	r2,zero,96e10 <___svfprintf_internal_r+0x918>
						++size;
   96dd8:	e0bfb717 	ldw	r2,-292(fp)
   96ddc:	10800044 	addi	r2,r2,1
   96de0:	e0bfb715 	stw	r2,-292(fp)
   96de4:	00000a06 	br	96e10 <___svfprintf_internal_r+0x918>
				} else
					size = ndig + (expt > 0 ?
   96de8:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
   96dec:	00800416 	blt	zero,r2,96e00 <___svfprintf_internal_r+0x908>
   96df0:	e0bfc417 	ldw	r2,-240(fp)
   96df4:	00c00084 	movi	r3,2
   96df8:	1885c83a 	sub	r2,r3,r2
   96dfc:	00000106 	br	96e04 <___svfprintf_internal_r+0x90c>
   96e00:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
   96e04:	e0ffc717 	ldw	r3,-228(fp)
   96e08:	10c5883a 	add	r2,r2,r3
   96e0c:	e0bfb715 	stw	r2,-292(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
   96e10:	e0bfc417 	ldw	r2,-240(fp)
   96e14:	e0bfb115 	stw	r2,-316(fp)
			}

			if (softsign)
   96e18:	e0bfc143 	ldbu	r2,-251(fp)
   96e1c:	10803fcc 	andi	r2,r2,255
   96e20:	1080201c 	xori	r2,r2,128
   96e24:	10bfe004 	addi	r2,r2,-128
   96e28:	10018b26 	beq	r2,zero,97458 <___svfprintf_internal_r+0xf60>
				sign = '-';
   96e2c:	00800b44 	movi	r2,45
   96e30:	e0bfc105 	stb	r2,-252(fp)
			break;
   96e34:	00018806 	br	97458 <___svfprintf_internal_r+0xf60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   96e38:	9880080c 	andi	r2,r19,32
   96e3c:	10000d26 	beq	r2,zero,96e74 <___svfprintf_internal_r+0x97c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   96e40:	e0bfe917 	ldw	r2,-92(fp)
   96e44:	10c00104 	addi	r3,r2,4
   96e48:	e0ffe915 	stw	r3,-92(fp)
   96e4c:	10800017 	ldw	r2,0(r2)
   96e50:	e0ffad17 	ldw	r3,-332(fp)
   96e54:	e0fff015 	stw	r3,-64(fp)
   96e58:	1807d7fa 	srai	r3,r3,31
   96e5c:	e0fff115 	stw	r3,-60(fp)
   96e60:	e0fff017 	ldw	r3,-64(fp)
   96e64:	10c00015 	stw	r3,0(r2)
   96e68:	e0fff117 	ldw	r3,-60(fp)
   96e6c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   96e70:	00054b06 	br	983a0 <___svfprintf_internal_r+0x1ea8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   96e74:	9880040c 	andi	r2,r19,16
   96e78:	10000726 	beq	r2,zero,96e98 <___svfprintf_internal_r+0x9a0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   96e7c:	e0bfe917 	ldw	r2,-92(fp)
   96e80:	10c00104 	addi	r3,r2,4
   96e84:	e0ffe915 	stw	r3,-92(fp)
   96e88:	10800017 	ldw	r2,0(r2)
   96e8c:	e0ffad17 	ldw	r3,-332(fp)
   96e90:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   96e94:	00054206 	br	983a0 <___svfprintf_internal_r+0x1ea8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   96e98:	9880100c 	andi	r2,r19,64
   96e9c:	10000726 	beq	r2,zero,96ebc <___svfprintf_internal_r+0x9c4>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   96ea0:	e0bfe917 	ldw	r2,-92(fp)
   96ea4:	10c00104 	addi	r3,r2,4
   96ea8:	e0ffe915 	stw	r3,-92(fp)
   96eac:	10800017 	ldw	r2,0(r2)
   96eb0:	e0ffad17 	ldw	r3,-332(fp)
   96eb4:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   96eb8:	00053906 	br	983a0 <___svfprintf_internal_r+0x1ea8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   96ebc:	e0bfe917 	ldw	r2,-92(fp)
   96ec0:	10c00104 	addi	r3,r2,4
   96ec4:	e0ffe915 	stw	r3,-92(fp)
   96ec8:	10800017 	ldw	r2,0(r2)
   96ecc:	e0ffad17 	ldw	r3,-332(fp)
   96ed0:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   96ed4:	00053206 	br	983a0 <___svfprintf_internal_r+0x1ea8>
		case 'O': /* extension */
			flags |= LONGINT;
   96ed8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   96edc:	9880080c 	andi	r2,r19,32
   96ee0:	10000626 	beq	r2,zero,96efc <___svfprintf_internal_r+0xa04>
   96ee4:	e0bfe917 	ldw	r2,-92(fp)
   96ee8:	10c00204 	addi	r3,r2,8
   96eec:	e0ffe915 	stw	r3,-92(fp)
   96ef0:	15800017 	ldw	r22,0(r2)
   96ef4:	15c00117 	ldw	r23,4(r2)
   96ef8:	00001c06 	br	96f6c <___svfprintf_internal_r+0xa74>
   96efc:	9880040c 	andi	r2,r19,16
   96f00:	10000726 	beq	r2,zero,96f20 <___svfprintf_internal_r+0xa28>
   96f04:	e0bfe917 	ldw	r2,-92(fp)
   96f08:	10c00104 	addi	r3,r2,4
   96f0c:	e0ffe915 	stw	r3,-92(fp)
   96f10:	10800017 	ldw	r2,0(r2)
   96f14:	102d883a 	mov	r22,r2
   96f18:	002f883a 	mov	r23,zero
   96f1c:	00001306 	br	96f6c <___svfprintf_internal_r+0xa74>
   96f20:	9880100c 	andi	r2,r19,64
   96f24:	10000b26 	beq	r2,zero,96f54 <___svfprintf_internal_r+0xa5c>
   96f28:	e0bfe917 	ldw	r2,-92(fp)
   96f2c:	10c00104 	addi	r3,r2,4
   96f30:	e0ffe915 	stw	r3,-92(fp)
   96f34:	10800017 	ldw	r2,0(r2)
   96f38:	e0bff215 	stw	r2,-56(fp)
   96f3c:	e03ff315 	stw	zero,-52(fp)
   96f40:	e0bff217 	ldw	r2,-56(fp)
   96f44:	15bfffcc 	andi	r22,r2,65535
   96f48:	e0fff317 	ldw	r3,-52(fp)
   96f4c:	182e703a 	and	r23,r3,zero
   96f50:	00000606 	br	96f6c <___svfprintf_internal_r+0xa74>
   96f54:	e0bfe917 	ldw	r2,-92(fp)
   96f58:	10c00104 	addi	r3,r2,4
   96f5c:	e0ffe915 	stw	r3,-92(fp)
   96f60:	10800017 	ldw	r2,0(r2)
   96f64:	102d883a 	mov	r22,r2
   96f68:	002f883a 	mov	r23,zero
   96f6c:	e5bfb215 	stw	r22,-312(fp)
   96f70:	e5ffb315 	stw	r23,-308(fp)
			base = OCT;
   96f74:	e03fb405 	stb	zero,-304(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   96f78:	0000a606 	br	97214 <___svfprintf_internal_r+0xd1c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   96f7c:	e0bfe917 	ldw	r2,-92(fp)
   96f80:	10c00104 	addi	r3,r2,4
   96f84:	e0ffe915 	stw	r3,-92(fp)
   96f88:	10800017 	ldw	r2,0(r2)
   96f8c:	e0bfb215 	stw	r2,-312(fp)
   96f90:	e03fb315 	stw	zero,-308(fp)
			base = HEX;
   96f94:	00800084 	movi	r2,2
   96f98:	e0bfb405 	stb	r2,-304(fp)
			xdigs = "0123456789abcdef";
   96f9c:	008002b4 	movhi	r2,10
   96fa0:	1084dd04 	addi	r2,r2,4980
   96fa4:	e0bfb815 	stw	r2,-288(fp)
			flags |= HEXPREFIX;
   96fa8:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   96fac:	00800c04 	movi	r2,48
   96fb0:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   96fb4:	05001e04 	movi	r20,120
   96fb8:	00801e04 	movi	r2,120
   96fbc:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   96fc0:	00009406 	br	97214 <___svfprintf_internal_r+0xd1c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   96fc4:	e0bfe917 	ldw	r2,-92(fp)
   96fc8:	10c00104 	addi	r3,r2,4
   96fcc:	e0ffe915 	stw	r3,-92(fp)
   96fd0:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   96fd4:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   96fd8:	9000081e 	bne	r18,zero,96ffc <___svfprintf_internal_r+0xb04>
				cp = "(null)";
   96fdc:	048002b4 	movhi	r18,10
   96fe0:	9484e204 	addi	r18,r18,5000
				size = ((unsigned) prec > 6U) ? 6 : prec;
   96fe4:	e0bfaf17 	ldw	r2,-324(fp)
   96fe8:	10c001f0 	cmpltui	r3,r2,7
   96fec:	1800011e 	bne	r3,zero,96ff4 <___svfprintf_internal_r+0xafc>
   96ff0:	00800184 	movi	r2,6
   96ff4:	e0bfb715 	stw	r2,-292(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   96ff8:	00011806 	br	9745c <___svfprintf_internal_r+0xf64>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   96ffc:	e0bfaf17 	ldw	r2,-324(fp)
   97000:	10001016 	blt	r2,zero,97044 <___svfprintf_internal_r+0xb4c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   97004:	e0bfaf17 	ldw	r2,-324(fp)
   97008:	100d883a 	mov	r6,r2
   9700c:	000b883a 	mov	r5,zero
   97010:	9009883a 	mov	r4,r18
   97014:	00904e00 	call	904e0 <memchr>
   97018:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
   9701c:	e0bfbf17 	ldw	r2,-260(fp)
   97020:	10000526 	beq	r2,zero,97038 <___svfprintf_internal_r+0xb40>
					size = p - cp;
   97024:	e0bfbf17 	ldw	r2,-260(fp)
   97028:	9007883a 	mov	r3,r18
   9702c:	10c5c83a 	sub	r2,r2,r3
   97030:	e0bfb715 	stw	r2,-292(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   97034:	00010906 	br	9745c <___svfprintf_internal_r+0xf64>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   97038:	e0bfaf17 	ldw	r2,-324(fp)
   9703c:	e0bfb715 	stw	r2,-292(fp)
			} else
				size = strlen (cp);

			break;
   97040:	00010606 	br	9745c <___svfprintf_internal_r+0xf64>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   97044:	9009883a 	mov	r4,r18
   97048:	0088c340 	call	88c34 <strlen>
   9704c:	e0bfb715 	stw	r2,-292(fp)

			break;
   97050:	00010206 	br	9745c <___svfprintf_internal_r+0xf64>
		case 'U': /* extension */
			flags |= LONGINT;
   97054:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   97058:	9880080c 	andi	r2,r19,32
   9705c:	10000826 	beq	r2,zero,97080 <___svfprintf_internal_r+0xb88>
   97060:	e0bfe917 	ldw	r2,-92(fp)
   97064:	10c00204 	addi	r3,r2,8
   97068:	e0ffe915 	stw	r3,-92(fp)
   9706c:	10c00017 	ldw	r3,0(r2)
   97070:	e0ffec15 	stw	r3,-80(fp)
   97074:	10c00117 	ldw	r3,4(r2)
   97078:	e0ffed15 	stw	r3,-76(fp)
   9707c:	00001e06 	br	970f8 <___svfprintf_internal_r+0xc00>
   97080:	9880040c 	andi	r2,r19,16
   97084:	10000726 	beq	r2,zero,970a4 <___svfprintf_internal_r+0xbac>
   97088:	e0bfe917 	ldw	r2,-92(fp)
   9708c:	10c00104 	addi	r3,r2,4
   97090:	e0ffe915 	stw	r3,-92(fp)
   97094:	10800017 	ldw	r2,0(r2)
   97098:	e0bfec15 	stw	r2,-80(fp)
   9709c:	e03fed15 	stw	zero,-76(fp)
   970a0:	00001506 	br	970f8 <___svfprintf_internal_r+0xc00>
   970a4:	9880100c 	andi	r2,r19,64
   970a8:	10000d26 	beq	r2,zero,970e0 <___svfprintf_internal_r+0xbe8>
   970ac:	e0bfe917 	ldw	r2,-92(fp)
   970b0:	10c00104 	addi	r3,r2,4
   970b4:	e0ffe915 	stw	r3,-92(fp)
   970b8:	10800017 	ldw	r2,0(r2)
   970bc:	e0bff415 	stw	r2,-48(fp)
   970c0:	e03ff515 	stw	zero,-44(fp)
   970c4:	e0bff417 	ldw	r2,-48(fp)
   970c8:	10bfffcc 	andi	r2,r2,65535
   970cc:	e0bfec15 	stw	r2,-80(fp)
   970d0:	e0fff517 	ldw	r3,-44(fp)
   970d4:	1806703a 	and	r3,r3,zero
   970d8:	e0ffed15 	stw	r3,-76(fp)
   970dc:	00000606 	br	970f8 <___svfprintf_internal_r+0xc00>
   970e0:	e0bfe917 	ldw	r2,-92(fp)
   970e4:	10c00104 	addi	r3,r2,4
   970e8:	e0ffe915 	stw	r3,-92(fp)
   970ec:	10800017 	ldw	r2,0(r2)
   970f0:	e0bfec15 	stw	r2,-80(fp)
   970f4:	e03fed15 	stw	zero,-76(fp)
   970f8:	e0bfec17 	ldw	r2,-80(fp)
   970fc:	e0bfb215 	stw	r2,-312(fp)
   97100:	e0ffed17 	ldw	r3,-76(fp)
   97104:	e0ffb315 	stw	r3,-308(fp)
			base = DEC;
   97108:	00800044 	movi	r2,1
   9710c:	e0bfb405 	stb	r2,-304(fp)
			goto nosign;
   97110:	00004006 	br	97214 <___svfprintf_internal_r+0xd1c>
		case 'X':
			xdigs = "0123456789ABCDEF";
   97114:	008002b4 	movhi	r2,10
   97118:	1084e404 	addi	r2,r2,5008
   9711c:	e0bfb815 	stw	r2,-288(fp)
			goto hex;
   97120:	00000306 	br	97130 <___svfprintf_internal_r+0xc38>
		case 'x':
			xdigs = "0123456789abcdef";
   97124:	008002b4 	movhi	r2,10
   97128:	1084dd04 	addi	r2,r2,4980
   9712c:	e0bfb815 	stw	r2,-288(fp)
hex:			_uquad = UARG ();
   97130:	9880080c 	andi	r2,r19,32
   97134:	10000826 	beq	r2,zero,97158 <___svfprintf_internal_r+0xc60>
   97138:	e0bfe917 	ldw	r2,-92(fp)
   9713c:	10c00204 	addi	r3,r2,8
   97140:	e0ffe915 	stw	r3,-92(fp)
   97144:	10c00017 	ldw	r3,0(r2)
   97148:	e0ffee15 	stw	r3,-72(fp)
   9714c:	10c00117 	ldw	r3,4(r2)
   97150:	e0ffef15 	stw	r3,-68(fp)
   97154:	00001e06 	br	971d0 <___svfprintf_internal_r+0xcd8>
   97158:	9880040c 	andi	r2,r19,16
   9715c:	10000726 	beq	r2,zero,9717c <___svfprintf_internal_r+0xc84>
   97160:	e0bfe917 	ldw	r2,-92(fp)
   97164:	10c00104 	addi	r3,r2,4
   97168:	e0ffe915 	stw	r3,-92(fp)
   9716c:	10800017 	ldw	r2,0(r2)
   97170:	e0bfee15 	stw	r2,-72(fp)
   97174:	e03fef15 	stw	zero,-68(fp)
   97178:	00001506 	br	971d0 <___svfprintf_internal_r+0xcd8>
   9717c:	9880100c 	andi	r2,r19,64
   97180:	10000d26 	beq	r2,zero,971b8 <___svfprintf_internal_r+0xcc0>
   97184:	e0bfe917 	ldw	r2,-92(fp)
   97188:	10c00104 	addi	r3,r2,4
   9718c:	e0ffe915 	stw	r3,-92(fp)
   97190:	10800017 	ldw	r2,0(r2)
   97194:	e0bff615 	stw	r2,-40(fp)
   97198:	e03ff715 	stw	zero,-36(fp)
   9719c:	e0bff617 	ldw	r2,-40(fp)
   971a0:	10bfffcc 	andi	r2,r2,65535
   971a4:	e0bfee15 	stw	r2,-72(fp)
   971a8:	e0fff717 	ldw	r3,-36(fp)
   971ac:	1806703a 	and	r3,r3,zero
   971b0:	e0ffef15 	stw	r3,-68(fp)
   971b4:	00000606 	br	971d0 <___svfprintf_internal_r+0xcd8>
   971b8:	e0bfe917 	ldw	r2,-92(fp)
   971bc:	10c00104 	addi	r3,r2,4
   971c0:	e0ffe915 	stw	r3,-92(fp)
   971c4:	10800017 	ldw	r2,0(r2)
   971c8:	e0bfee15 	stw	r2,-72(fp)
   971cc:	e03fef15 	stw	zero,-68(fp)
   971d0:	e0bfee17 	ldw	r2,-72(fp)
   971d4:	e0bfb215 	stw	r2,-312(fp)
   971d8:	e0ffef17 	ldw	r3,-68(fp)
   971dc:	e0ffb315 	stw	r3,-308(fp)
			base = HEX;
   971e0:	00800084 	movi	r2,2
   971e4:	e0bfb405 	stb	r2,-304(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   971e8:	9880004c 	andi	r2,r19,1
   971ec:	10000926 	beq	r2,zero,97214 <___svfprintf_internal_r+0xd1c>
   971f0:	e0bfb217 	ldw	r2,-312(fp)
   971f4:	e0ffb317 	ldw	r3,-308(fp)
   971f8:	10c4b03a 	or	r2,r2,r3
   971fc:	10000526 	beq	r2,zero,97214 <___svfprintf_internal_r+0xd1c>
				ox[0] = '0';
   97200:	00800c04 	movi	r2,48
   97204:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   97208:	a005883a 	mov	r2,r20
   9720c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   97210:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   97214:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   97218:	e0bfaf17 	ldw	r2,-324(fp)
   9721c:	e0bfb515 	stw	r2,-300(fp)
   97220:	e0bfb517 	ldw	r2,-300(fp)
   97224:	10000216 	blt	r2,zero,97230 <___svfprintf_internal_r+0xd38>
				flags &= ~ZEROPAD;
   97228:	00bfdfc4 	movi	r2,-129
   9722c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   97230:	e4bfdb04 	addi	r18,fp,-148
   97234:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
   97238:	e0bfb217 	ldw	r2,-312(fp)
   9723c:	e0ffb317 	ldw	r3,-308(fp)
   97240:	10c4b03a 	or	r2,r2,r3
   97244:	1000021e 	bne	r2,zero,97250 <___svfprintf_internal_r+0xd58>
   97248:	e0bfaf17 	ldw	r2,-324(fp)
   9724c:	10006c26 	beq	r2,zero,97400 <___svfprintf_internal_r+0xf08>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   97250:	e0bfb403 	ldbu	r2,-304(fp)
   97254:	10c00060 	cmpeqi	r3,r2,1
   97258:	1800211e 	bne	r3,zero,972e0 <___svfprintf_internal_r+0xde8>
   9725c:	10c000a0 	cmpeqi	r3,r2,2
   97260:	1800491e 	bne	r3,zero,97388 <___svfprintf_internal_r+0xe90>
   97264:	10005d1e 	bne	r2,zero,973dc <___svfprintf_internal_r+0xee4>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   97268:	94bfffc4 	addi	r18,r18,-1
   9726c:	e0bfb217 	ldw	r2,-312(fp)
   97270:	108001cc 	andi	r2,r2,7
   97274:	10800c04 	addi	r2,r2,48
   97278:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
   9727c:	e0bfb317 	ldw	r2,-308(fp)
   97280:	1004977a 	slli	r2,r2,29
   97284:	e0ffb217 	ldw	r3,-312(fp)
   97288:	1806d0fa 	srli	r3,r3,3
   9728c:	1884b03a 	or	r2,r3,r2
   97290:	e0bfb215 	stw	r2,-312(fp)
   97294:	e0bfb317 	ldw	r2,-308(fp)
   97298:	1004d0fa 	srli	r2,r2,3
   9729c:	e0bfb315 	stw	r2,-308(fp)
					} while (_uquad);
   972a0:	e0bfb217 	ldw	r2,-312(fp)
   972a4:	e0ffb317 	ldw	r3,-308(fp)
   972a8:	10c4b03a 	or	r2,r2,r3
   972ac:	103fee1e 	bne	r2,zero,97268 <__alt_data_end+0xfffe5268>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   972b0:	9880004c 	andi	r2,r19,1
   972b4:	10005026 	beq	r2,zero,973f8 <___svfprintf_internal_r+0xf00>
   972b8:	90800003 	ldbu	r2,0(r18)
   972bc:	10803fcc 	andi	r2,r2,255
   972c0:	1080201c 	xori	r2,r2,128
   972c4:	10bfe004 	addi	r2,r2,-128
   972c8:	10800c20 	cmpeqi	r2,r2,48
   972cc:	10004a1e 	bne	r2,zero,973f8 <___svfprintf_internal_r+0xf00>
						*--cp = '0';
   972d0:	94bfffc4 	addi	r18,r18,-1
   972d4:	00800c04 	movi	r2,48
   972d8:	90800005 	stb	r2,0(r18)
					break;
   972dc:	00004606 	br	973f8 <___svfprintf_internal_r+0xf00>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   972e0:	e0bfb317 	ldw	r2,-308(fp)
   972e4:	10000a1e 	bne	r2,zero,97310 <___svfprintf_internal_r+0xe18>
   972e8:	e0bfb317 	ldw	r2,-308(fp)
   972ec:	1000031e 	bne	r2,zero,972fc <___svfprintf_internal_r+0xe04>
   972f0:	e0bfb217 	ldw	r2,-312(fp)
   972f4:	108002a8 	cmpgeui	r2,r2,10
   972f8:	1000051e 	bne	r2,zero,97310 <___svfprintf_internal_r+0xe18>
						*--cp = to_char(_uquad);
   972fc:	94bfffc4 	addi	r18,r18,-1
   97300:	e0bfb217 	ldw	r2,-312(fp)
   97304:	10800c04 	addi	r2,r2,48
   97308:	90800005 	stb	r2,0(r18)
						break;
   9730c:	00003b06 	br	973fc <___svfprintf_internal_r+0xf04>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   97310:	94bfffc4 	addi	r18,r18,-1
   97314:	e0bfb217 	ldw	r2,-312(fp)
   97318:	e0ffb317 	ldw	r3,-308(fp)
   9731c:	01800284 	movi	r6,10
   97320:	000f883a 	mov	r7,zero
   97324:	1009883a 	mov	r4,r2
   97328:	180b883a 	mov	r5,r3
   9732c:	009d8240 	call	9d824 <__umoddi3>
   97330:	1009883a 	mov	r4,r2
   97334:	180b883a 	mov	r5,r3
   97338:	2005883a 	mov	r2,r4
   9733c:	2807883a 	mov	r3,r5
   97340:	10800c04 	addi	r2,r2,48
   97344:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   97348:	e0bfb217 	ldw	r2,-312(fp)
   9734c:	e0ffb317 	ldw	r3,-308(fp)
   97350:	01800284 	movi	r6,10
   97354:	000f883a 	mov	r7,zero
   97358:	1009883a 	mov	r4,r2
   9735c:	180b883a 	mov	r5,r3
   97360:	009d2280 	call	9d228 <__udivdi3>
   97364:	1009883a 	mov	r4,r2
   97368:	180b883a 	mov	r5,r3
   9736c:	e13fb215 	stw	r4,-312(fp)
   97370:	e17fb315 	stw	r5,-308(fp)
					} while (_uquad != 0);
   97374:	e0bfb217 	ldw	r2,-312(fp)
   97378:	e0ffb317 	ldw	r3,-308(fp)
   9737c:	10c4b03a 	or	r2,r2,r3
   97380:	103fe31e 	bne	r2,zero,97310 <__alt_data_end+0xfffe5310>
					break;
   97384:	00001d06 	br	973fc <___svfprintf_internal_r+0xf04>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   97388:	94bfffc4 	addi	r18,r18,-1
   9738c:	e0bfb217 	ldw	r2,-312(fp)
   97390:	108003cc 	andi	r2,r2,15
   97394:	e0ffb817 	ldw	r3,-288(fp)
   97398:	1885883a 	add	r2,r3,r2
   9739c:	10800003 	ldbu	r2,0(r2)
   973a0:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
   973a4:	e0bfb317 	ldw	r2,-308(fp)
   973a8:	1004973a 	slli	r2,r2,28
   973ac:	e0ffb217 	ldw	r3,-312(fp)
   973b0:	1806d13a 	srli	r3,r3,4
   973b4:	1884b03a 	or	r2,r3,r2
   973b8:	e0bfb215 	stw	r2,-312(fp)
   973bc:	e0bfb317 	ldw	r2,-308(fp)
   973c0:	1004d13a 	srli	r2,r2,4
   973c4:	e0bfb315 	stw	r2,-308(fp)
					} while (_uquad);
   973c8:	e0bfb217 	ldw	r2,-312(fp)
   973cc:	e0ffb317 	ldw	r3,-308(fp)
   973d0:	10c4b03a 	or	r2,r2,r3
   973d4:	103fec1e 	bne	r2,zero,97388 <__alt_data_end+0xfffe5388>
					break;
   973d8:	00000806 	br	973fc <___svfprintf_internal_r+0xf04>

				default:
					cp = "bug in vfprintf: bad base";
   973dc:	048002b4 	movhi	r18,10
   973e0:	9484e904 	addi	r18,r18,5028
					size = strlen (cp);
   973e4:	9009883a 	mov	r4,r18
   973e8:	0088c340 	call	88c34 <strlen>
   973ec:	e0bfb715 	stw	r2,-292(fp)
					goto skipsize;
   973f0:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   973f4:	00001906 	br	9745c <___svfprintf_internal_r+0xf64>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   973f8:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   973fc:	00000706 	br	9741c <___svfprintf_internal_r+0xf24>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   97400:	e0bfb403 	ldbu	r2,-304(fp)
   97404:	1000051e 	bne	r2,zero,9741c <___svfprintf_internal_r+0xf24>
   97408:	9880004c 	andi	r2,r19,1
   9740c:	10000326 	beq	r2,zero,9741c <___svfprintf_internal_r+0xf24>
                         *--cp = '0';
   97410:	94bfffc4 	addi	r18,r18,-1
   97414:	00800c04 	movi	r2,48
   97418:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
   9741c:	e0bfdb04 	addi	r2,fp,-148
   97420:	10800a04 	addi	r2,r2,40
   97424:	1007883a 	mov	r3,r2
   97428:	9005883a 	mov	r2,r18
   9742c:	1885c83a 	sub	r2,r3,r2
   97430:	e0bfb715 	stw	r2,-292(fp)
		skipsize:
			break;
   97434:	00000906 	br	9745c <___svfprintf_internal_r+0xf64>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   97438:	a003dc26 	beq	r20,zero,983ac <___svfprintf_internal_r+0x1eb4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   9743c:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
   97440:	a005883a 	mov	r2,r20
   97444:	90800005 	stb	r2,0(r18)
			size = 1;
   97448:	00800044 	movi	r2,1
   9744c:	e0bfb715 	stw	r2,-292(fp)
			sign = '\0';
   97450:	e03fc105 	stb	zero,-252(fp)
			break;
   97454:	00000106 	br	9745c <___svfprintf_internal_r+0xf64>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
   97458:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   9745c:	e0ffb517 	ldw	r3,-300(fp)
   97460:	e0bfb717 	ldw	r2,-292(fp)
   97464:	10c0010e 	bge	r2,r3,9746c <___svfprintf_internal_r+0xf74>
   97468:	1805883a 	mov	r2,r3
   9746c:	e0bfb615 	stw	r2,-296(fp)
		if (sign)
   97470:	e0bfc103 	ldbu	r2,-252(fp)
   97474:	10803fcc 	andi	r2,r2,255
   97478:	1080201c 	xori	r2,r2,128
   9747c:	10bfe004 	addi	r2,r2,-128
   97480:	10000326 	beq	r2,zero,97490 <___svfprintf_internal_r+0xf98>
			realsz++;
   97484:	e0bfb617 	ldw	r2,-296(fp)
   97488:	10800044 	addi	r2,r2,1
   9748c:	e0bfb615 	stw	r2,-296(fp)
		if (flags & HEXPREFIX)
   97490:	9880008c 	andi	r2,r19,2
   97494:	10000326 	beq	r2,zero,974a4 <___svfprintf_internal_r+0xfac>
			realsz+= 2;
   97498:	e0bfb617 	ldw	r2,-296(fp)
   9749c:	10800084 	addi	r2,r2,2
   974a0:	e0bfb615 	stw	r2,-296(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   974a4:	9880210c 	andi	r2,r19,132
   974a8:	1000351e 	bne	r2,zero,97580 <___svfprintf_internal_r+0x1088>
			PAD (width - realsz, blanks);
   974ac:	e0ffae17 	ldw	r3,-328(fp)
   974b0:	e0bfb617 	ldw	r2,-296(fp)
   974b4:	18a1c83a 	sub	r16,r3,r2
   974b8:	0400310e 	bge	zero,r16,97580 <___svfprintf_internal_r+0x1088>
   974bc:	00001706 	br	9751c <___svfprintf_internal_r+0x1024>
   974c0:	008002b4 	movhi	r2,10
   974c4:	1084f084 	addi	r2,r2,5058
   974c8:	88800015 	stw	r2,0(r17)
   974cc:	00800404 	movi	r2,16
   974d0:	88800115 	stw	r2,4(r17)
   974d4:	e0bfca17 	ldw	r2,-216(fp)
   974d8:	10800404 	addi	r2,r2,16
   974dc:	e0bfca15 	stw	r2,-216(fp)
   974e0:	8c400204 	addi	r17,r17,8
   974e4:	e0bfc917 	ldw	r2,-220(fp)
   974e8:	10800044 	addi	r2,r2,1
   974ec:	e0bfc915 	stw	r2,-220(fp)
   974f0:	e0bfc917 	ldw	r2,-220(fp)
   974f4:	10800210 	cmplti	r2,r2,8
   974f8:	1000071e 	bne	r2,zero,97518 <___svfprintf_internal_r+0x1020>
   974fc:	e0bfc804 	addi	r2,fp,-224
   97500:	100d883a 	mov	r6,r2
   97504:	e17fe717 	ldw	r5,-100(fp)
   97508:	e13fe617 	ldw	r4,-104(fp)
   9750c:	009b8e40 	call	9b8e4 <__ssprint_r>
   97510:	1003b41e 	bne	r2,zero,983e4 <___svfprintf_internal_r+0x1eec>
   97514:	e47fcb04 	addi	r17,fp,-212
   97518:	843ffc04 	addi	r16,r16,-16
   9751c:	80800448 	cmpgei	r2,r16,17
   97520:	103fe71e 	bne	r2,zero,974c0 <__alt_data_end+0xfffe54c0>
   97524:	008002b4 	movhi	r2,10
   97528:	1084f084 	addi	r2,r2,5058
   9752c:	88800015 	stw	r2,0(r17)
   97530:	8005883a 	mov	r2,r16
   97534:	88800115 	stw	r2,4(r17)
   97538:	e0bfca17 	ldw	r2,-216(fp)
   9753c:	8007883a 	mov	r3,r16
   97540:	10c5883a 	add	r2,r2,r3
   97544:	e0bfca15 	stw	r2,-216(fp)
   97548:	8c400204 	addi	r17,r17,8
   9754c:	e0bfc917 	ldw	r2,-220(fp)
   97550:	10800044 	addi	r2,r2,1
   97554:	e0bfc915 	stw	r2,-220(fp)
   97558:	e0bfc917 	ldw	r2,-220(fp)
   9755c:	10800210 	cmplti	r2,r2,8
   97560:	1000071e 	bne	r2,zero,97580 <___svfprintf_internal_r+0x1088>
   97564:	e0bfc804 	addi	r2,fp,-224
   97568:	100d883a 	mov	r6,r2
   9756c:	e17fe717 	ldw	r5,-100(fp)
   97570:	e13fe617 	ldw	r4,-104(fp)
   97574:	009b8e40 	call	9b8e4 <__ssprint_r>
   97578:	10039c1e 	bne	r2,zero,983ec <___svfprintf_internal_r+0x1ef4>
   9757c:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
   97580:	e0bfc103 	ldbu	r2,-252(fp)
   97584:	10803fcc 	andi	r2,r2,255
   97588:	1080201c 	xori	r2,r2,128
   9758c:	10bfe004 	addi	r2,r2,-128
   97590:	10001526 	beq	r2,zero,975e8 <___svfprintf_internal_r+0x10f0>
			PRINT (&sign, 1);
   97594:	e0bfc104 	addi	r2,fp,-252
   97598:	88800015 	stw	r2,0(r17)
   9759c:	00800044 	movi	r2,1
   975a0:	88800115 	stw	r2,4(r17)
   975a4:	e0bfca17 	ldw	r2,-216(fp)
   975a8:	10800044 	addi	r2,r2,1
   975ac:	e0bfca15 	stw	r2,-216(fp)
   975b0:	8c400204 	addi	r17,r17,8
   975b4:	e0bfc917 	ldw	r2,-220(fp)
   975b8:	10800044 	addi	r2,r2,1
   975bc:	e0bfc915 	stw	r2,-220(fp)
   975c0:	e0bfc917 	ldw	r2,-220(fp)
   975c4:	10800210 	cmplti	r2,r2,8
   975c8:	1000071e 	bne	r2,zero,975e8 <___svfprintf_internal_r+0x10f0>
   975cc:	e0bfc804 	addi	r2,fp,-224
   975d0:	100d883a 	mov	r6,r2
   975d4:	e17fe717 	ldw	r5,-100(fp)
   975d8:	e13fe617 	ldw	r4,-104(fp)
   975dc:	009b8e40 	call	9b8e4 <__ssprint_r>
   975e0:	1003841e 	bne	r2,zero,983f4 <___svfprintf_internal_r+0x1efc>
   975e4:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
   975e8:	9880008c 	andi	r2,r19,2
   975ec:	10001526 	beq	r2,zero,97644 <___svfprintf_internal_r+0x114c>
			PRINT (ox, 2);
   975f0:	e0bfe504 	addi	r2,fp,-108
   975f4:	88800015 	stw	r2,0(r17)
   975f8:	00800084 	movi	r2,2
   975fc:	88800115 	stw	r2,4(r17)
   97600:	e0bfca17 	ldw	r2,-216(fp)
   97604:	10800084 	addi	r2,r2,2
   97608:	e0bfca15 	stw	r2,-216(fp)
   9760c:	8c400204 	addi	r17,r17,8
   97610:	e0bfc917 	ldw	r2,-220(fp)
   97614:	10800044 	addi	r2,r2,1
   97618:	e0bfc915 	stw	r2,-220(fp)
   9761c:	e0bfc917 	ldw	r2,-220(fp)
   97620:	10800210 	cmplti	r2,r2,8
   97624:	1000071e 	bne	r2,zero,97644 <___svfprintf_internal_r+0x114c>
   97628:	e0bfc804 	addi	r2,fp,-224
   9762c:	100d883a 	mov	r6,r2
   97630:	e17fe717 	ldw	r5,-100(fp)
   97634:	e13fe617 	ldw	r4,-104(fp)
   97638:	009b8e40 	call	9b8e4 <__ssprint_r>
   9763c:	10036f1e 	bne	r2,zero,983fc <___svfprintf_internal_r+0x1f04>
   97640:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   97644:	9880210c 	andi	r2,r19,132
   97648:	10802018 	cmpnei	r2,r2,128
   9764c:	1000351e 	bne	r2,zero,97724 <___svfprintf_internal_r+0x122c>
			PAD (width - realsz, zeroes);
   97650:	e0ffae17 	ldw	r3,-328(fp)
   97654:	e0bfb617 	ldw	r2,-296(fp)
   97658:	18a1c83a 	sub	r16,r3,r2
   9765c:	0400310e 	bge	zero,r16,97724 <___svfprintf_internal_r+0x122c>
   97660:	00001706 	br	976c0 <___svfprintf_internal_r+0x11c8>
   97664:	008002b4 	movhi	r2,10
   97668:	1084f484 	addi	r2,r2,5074
   9766c:	88800015 	stw	r2,0(r17)
   97670:	00800404 	movi	r2,16
   97674:	88800115 	stw	r2,4(r17)
   97678:	e0bfca17 	ldw	r2,-216(fp)
   9767c:	10800404 	addi	r2,r2,16
   97680:	e0bfca15 	stw	r2,-216(fp)
   97684:	8c400204 	addi	r17,r17,8
   97688:	e0bfc917 	ldw	r2,-220(fp)
   9768c:	10800044 	addi	r2,r2,1
   97690:	e0bfc915 	stw	r2,-220(fp)
   97694:	e0bfc917 	ldw	r2,-220(fp)
   97698:	10800210 	cmplti	r2,r2,8
   9769c:	1000071e 	bne	r2,zero,976bc <___svfprintf_internal_r+0x11c4>
   976a0:	e0bfc804 	addi	r2,fp,-224
   976a4:	100d883a 	mov	r6,r2
   976a8:	e17fe717 	ldw	r5,-100(fp)
   976ac:	e13fe617 	ldw	r4,-104(fp)
   976b0:	009b8e40 	call	9b8e4 <__ssprint_r>
   976b4:	1003531e 	bne	r2,zero,98404 <___svfprintf_internal_r+0x1f0c>
   976b8:	e47fcb04 	addi	r17,fp,-212
   976bc:	843ffc04 	addi	r16,r16,-16
   976c0:	80800448 	cmpgei	r2,r16,17
   976c4:	103fe71e 	bne	r2,zero,97664 <__alt_data_end+0xfffe5664>
   976c8:	008002b4 	movhi	r2,10
   976cc:	1084f484 	addi	r2,r2,5074
   976d0:	88800015 	stw	r2,0(r17)
   976d4:	8005883a 	mov	r2,r16
   976d8:	88800115 	stw	r2,4(r17)
   976dc:	e0bfca17 	ldw	r2,-216(fp)
   976e0:	8007883a 	mov	r3,r16
   976e4:	10c5883a 	add	r2,r2,r3
   976e8:	e0bfca15 	stw	r2,-216(fp)
   976ec:	8c400204 	addi	r17,r17,8
   976f0:	e0bfc917 	ldw	r2,-220(fp)
   976f4:	10800044 	addi	r2,r2,1
   976f8:	e0bfc915 	stw	r2,-220(fp)
   976fc:	e0bfc917 	ldw	r2,-220(fp)
   97700:	10800210 	cmplti	r2,r2,8
   97704:	1000071e 	bne	r2,zero,97724 <___svfprintf_internal_r+0x122c>
   97708:	e0bfc804 	addi	r2,fp,-224
   9770c:	100d883a 	mov	r6,r2
   97710:	e17fe717 	ldw	r5,-100(fp)
   97714:	e13fe617 	ldw	r4,-104(fp)
   97718:	009b8e40 	call	9b8e4 <__ssprint_r>
   9771c:	10033b1e 	bne	r2,zero,9840c <___svfprintf_internal_r+0x1f14>
   97720:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   97724:	e0ffb517 	ldw	r3,-300(fp)
   97728:	e0bfb717 	ldw	r2,-292(fp)
   9772c:	18a1c83a 	sub	r16,r3,r2
   97730:	0400310e 	bge	zero,r16,977f8 <___svfprintf_internal_r+0x1300>
   97734:	00001706 	br	97794 <___svfprintf_internal_r+0x129c>
   97738:	008002b4 	movhi	r2,10
   9773c:	1084f484 	addi	r2,r2,5074
   97740:	88800015 	stw	r2,0(r17)
   97744:	00800404 	movi	r2,16
   97748:	88800115 	stw	r2,4(r17)
   9774c:	e0bfca17 	ldw	r2,-216(fp)
   97750:	10800404 	addi	r2,r2,16
   97754:	e0bfca15 	stw	r2,-216(fp)
   97758:	8c400204 	addi	r17,r17,8
   9775c:	e0bfc917 	ldw	r2,-220(fp)
   97760:	10800044 	addi	r2,r2,1
   97764:	e0bfc915 	stw	r2,-220(fp)
   97768:	e0bfc917 	ldw	r2,-220(fp)
   9776c:	10800210 	cmplti	r2,r2,8
   97770:	1000071e 	bne	r2,zero,97790 <___svfprintf_internal_r+0x1298>
   97774:	e0bfc804 	addi	r2,fp,-224
   97778:	100d883a 	mov	r6,r2
   9777c:	e17fe717 	ldw	r5,-100(fp)
   97780:	e13fe617 	ldw	r4,-104(fp)
   97784:	009b8e40 	call	9b8e4 <__ssprint_r>
   97788:	1003221e 	bne	r2,zero,98414 <___svfprintf_internal_r+0x1f1c>
   9778c:	e47fcb04 	addi	r17,fp,-212
   97790:	843ffc04 	addi	r16,r16,-16
   97794:	80800448 	cmpgei	r2,r16,17
   97798:	103fe71e 	bne	r2,zero,97738 <__alt_data_end+0xfffe5738>
   9779c:	008002b4 	movhi	r2,10
   977a0:	1084f484 	addi	r2,r2,5074
   977a4:	88800015 	stw	r2,0(r17)
   977a8:	8005883a 	mov	r2,r16
   977ac:	88800115 	stw	r2,4(r17)
   977b0:	e0bfca17 	ldw	r2,-216(fp)
   977b4:	8007883a 	mov	r3,r16
   977b8:	10c5883a 	add	r2,r2,r3
   977bc:	e0bfca15 	stw	r2,-216(fp)
   977c0:	8c400204 	addi	r17,r17,8
   977c4:	e0bfc917 	ldw	r2,-220(fp)
   977c8:	10800044 	addi	r2,r2,1
   977cc:	e0bfc915 	stw	r2,-220(fp)
   977d0:	e0bfc917 	ldw	r2,-220(fp)
   977d4:	10800210 	cmplti	r2,r2,8
   977d8:	1000071e 	bne	r2,zero,977f8 <___svfprintf_internal_r+0x1300>
   977dc:	e0bfc804 	addi	r2,fp,-224
   977e0:	100d883a 	mov	r6,r2
   977e4:	e17fe717 	ldw	r5,-100(fp)
   977e8:	e13fe617 	ldw	r4,-104(fp)
   977ec:	009b8e40 	call	9b8e4 <__ssprint_r>
   977f0:	10030a1e 	bne	r2,zero,9841c <___svfprintf_internal_r+0x1f24>
   977f4:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   977f8:	9880400c 	andi	r2,r19,256
   977fc:	1000161e 	bne	r2,zero,97858 <___svfprintf_internal_r+0x1360>
			PRINT (cp, size);
   97800:	8c800015 	stw	r18,0(r17)
   97804:	e0bfb717 	ldw	r2,-292(fp)
   97808:	88800115 	stw	r2,4(r17)
   9780c:	e0ffca17 	ldw	r3,-216(fp)
   97810:	e0bfb717 	ldw	r2,-292(fp)
   97814:	1885883a 	add	r2,r3,r2
   97818:	e0bfca15 	stw	r2,-216(fp)
   9781c:	8c400204 	addi	r17,r17,8
   97820:	e0bfc917 	ldw	r2,-220(fp)
   97824:	10800044 	addi	r2,r2,1
   97828:	e0bfc915 	stw	r2,-220(fp)
   9782c:	e0bfc917 	ldw	r2,-220(fp)
   97830:	10800210 	cmplti	r2,r2,8
   97834:	10028c1e 	bne	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
   97838:	e0bfc804 	addi	r2,fp,-224
   9783c:	100d883a 	mov	r6,r2
   97840:	e17fe717 	ldw	r5,-100(fp)
   97844:	e13fe617 	ldw	r4,-104(fp)
   97848:	009b8e40 	call	9b8e4 <__ssprint_r>
   9784c:	1002f51e 	bne	r2,zero,98424 <___svfprintf_internal_r+0x1f2c>
   97850:	e47fcb04 	addi	r17,fp,-212
   97854:	00028406 	br	98268 <___svfprintf_internal_r+0x1d70>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
   97858:	a0801990 	cmplti	r2,r20,102
   9785c:	1001d11e 	bne	r2,zero,97fa4 <___svfprintf_internal_r+0x1aac>
				if (_fpvalue == 0) {
   97860:	e0bfc217 	ldw	r2,-248(fp)
   97864:	e0ffc317 	ldw	r3,-244(fp)
   97868:	000d883a 	mov	r6,zero
   9786c:	000f883a 	mov	r7,zero
   97870:	1009883a 	mov	r4,r2
   97874:	180b883a 	mov	r5,r3
   97878:	009dde80 	call	9dde8 <__eqdf2>
   9787c:	1000661e 	bne	r2,zero,97a18 <___svfprintf_internal_r+0x1520>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   97880:	008002b4 	movhi	r2,10
   97884:	1084f004 	addi	r2,r2,5056
   97888:	88800015 	stw	r2,0(r17)
   9788c:	00800044 	movi	r2,1
   97890:	88800115 	stw	r2,4(r17)
   97894:	e0bfca17 	ldw	r2,-216(fp)
   97898:	10800044 	addi	r2,r2,1
   9789c:	e0bfca15 	stw	r2,-216(fp)
   978a0:	8c400204 	addi	r17,r17,8
   978a4:	e0bfc917 	ldw	r2,-220(fp)
   978a8:	10800044 	addi	r2,r2,1
   978ac:	e0bfc915 	stw	r2,-220(fp)
   978b0:	e0bfc917 	ldw	r2,-220(fp)
   978b4:	10800210 	cmplti	r2,r2,8
   978b8:	1000071e 	bne	r2,zero,978d8 <___svfprintf_internal_r+0x13e0>
   978bc:	e0bfc804 	addi	r2,fp,-224
   978c0:	100d883a 	mov	r6,r2
   978c4:	e17fe717 	ldw	r5,-100(fp)
   978c8:	e13fe617 	ldw	r4,-104(fp)
   978cc:	009b8e40 	call	9b8e4 <__ssprint_r>
   978d0:	1002d61e 	bne	r2,zero,9842c <___svfprintf_internal_r+0x1f34>
   978d4:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
   978d8:	e0ffc417 	ldw	r3,-240(fp)
   978dc:	e0bfc717 	ldw	r2,-228(fp)
   978e0:	18800216 	blt	r3,r2,978ec <___svfprintf_internal_r+0x13f4>
   978e4:	9880004c 	andi	r2,r19,1
   978e8:	10025f26 	beq	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
						PRINT (decimal_point, decp_len);
   978ec:	e0bfbc17 	ldw	r2,-272(fp)
   978f0:	88800015 	stw	r2,0(r17)
   978f4:	e0bfbd17 	ldw	r2,-268(fp)
   978f8:	88800115 	stw	r2,4(r17)
   978fc:	e0ffca17 	ldw	r3,-216(fp)
   97900:	e0bfbd17 	ldw	r2,-268(fp)
   97904:	1885883a 	add	r2,r3,r2
   97908:	e0bfca15 	stw	r2,-216(fp)
   9790c:	8c400204 	addi	r17,r17,8
   97910:	e0bfc917 	ldw	r2,-220(fp)
   97914:	10800044 	addi	r2,r2,1
   97918:	e0bfc915 	stw	r2,-220(fp)
   9791c:	e0bfc917 	ldw	r2,-220(fp)
   97920:	10800210 	cmplti	r2,r2,8
   97924:	1000071e 	bne	r2,zero,97944 <___svfprintf_internal_r+0x144c>
   97928:	e0bfc804 	addi	r2,fp,-224
   9792c:	100d883a 	mov	r6,r2
   97930:	e17fe717 	ldw	r5,-100(fp)
   97934:	e13fe617 	ldw	r4,-104(fp)
   97938:	009b8e40 	call	9b8e4 <__ssprint_r>
   9793c:	1002bd1e 	bne	r2,zero,98434 <___svfprintf_internal_r+0x1f3c>
   97940:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
   97944:	e0bfc717 	ldw	r2,-228(fp)
   97948:	143fffc4 	addi	r16,r2,-1
   9794c:	0402460e 	bge	zero,r16,98268 <___svfprintf_internal_r+0x1d70>
   97950:	00001706 	br	979b0 <___svfprintf_internal_r+0x14b8>
   97954:	008002b4 	movhi	r2,10
   97958:	1084f484 	addi	r2,r2,5074
   9795c:	88800015 	stw	r2,0(r17)
   97960:	00800404 	movi	r2,16
   97964:	88800115 	stw	r2,4(r17)
   97968:	e0bfca17 	ldw	r2,-216(fp)
   9796c:	10800404 	addi	r2,r2,16
   97970:	e0bfca15 	stw	r2,-216(fp)
   97974:	8c400204 	addi	r17,r17,8
   97978:	e0bfc917 	ldw	r2,-220(fp)
   9797c:	10800044 	addi	r2,r2,1
   97980:	e0bfc915 	stw	r2,-220(fp)
   97984:	e0bfc917 	ldw	r2,-220(fp)
   97988:	10800210 	cmplti	r2,r2,8
   9798c:	1000071e 	bne	r2,zero,979ac <___svfprintf_internal_r+0x14b4>
   97990:	e0bfc804 	addi	r2,fp,-224
   97994:	100d883a 	mov	r6,r2
   97998:	e17fe717 	ldw	r5,-100(fp)
   9799c:	e13fe617 	ldw	r4,-104(fp)
   979a0:	009b8e40 	call	9b8e4 <__ssprint_r>
   979a4:	1002a51e 	bne	r2,zero,9843c <___svfprintf_internal_r+0x1f44>
   979a8:	e47fcb04 	addi	r17,fp,-212
   979ac:	843ffc04 	addi	r16,r16,-16
   979b0:	80800448 	cmpgei	r2,r16,17
   979b4:	103fe71e 	bne	r2,zero,97954 <__alt_data_end+0xfffe5954>
   979b8:	008002b4 	movhi	r2,10
   979bc:	1084f484 	addi	r2,r2,5074
   979c0:	88800015 	stw	r2,0(r17)
   979c4:	8005883a 	mov	r2,r16
   979c8:	88800115 	stw	r2,4(r17)
   979cc:	e0bfca17 	ldw	r2,-216(fp)
   979d0:	8007883a 	mov	r3,r16
   979d4:	10c5883a 	add	r2,r2,r3
   979d8:	e0bfca15 	stw	r2,-216(fp)
   979dc:	8c400204 	addi	r17,r17,8
   979e0:	e0bfc917 	ldw	r2,-220(fp)
   979e4:	10800044 	addi	r2,r2,1
   979e8:	e0bfc915 	stw	r2,-220(fp)
   979ec:	e0bfc917 	ldw	r2,-220(fp)
   979f0:	10800210 	cmplti	r2,r2,8
   979f4:	10021c1e 	bne	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
   979f8:	e0bfc804 	addi	r2,fp,-224
   979fc:	100d883a 	mov	r6,r2
   97a00:	e17fe717 	ldw	r5,-100(fp)
   97a04:	e13fe617 	ldw	r4,-104(fp)
   97a08:	009b8e40 	call	9b8e4 <__ssprint_r>
   97a0c:	10028d1e 	bne	r2,zero,98444 <___svfprintf_internal_r+0x1f4c>
   97a10:	e47fcb04 	addi	r17,fp,-212
   97a14:	00021406 	br	98268 <___svfprintf_internal_r+0x1d70>
					}
				} else if (expt <= 0) {
   97a18:	e0bfc417 	ldw	r2,-240(fp)
   97a1c:	00807c16 	blt	zero,r2,97c10 <___svfprintf_internal_r+0x1718>
					PRINT ("0", 1);
   97a20:	008002b4 	movhi	r2,10
   97a24:	1084f004 	addi	r2,r2,5056
   97a28:	88800015 	stw	r2,0(r17)
   97a2c:	00800044 	movi	r2,1
   97a30:	88800115 	stw	r2,4(r17)
   97a34:	e0bfca17 	ldw	r2,-216(fp)
   97a38:	10800044 	addi	r2,r2,1
   97a3c:	e0bfca15 	stw	r2,-216(fp)
   97a40:	8c400204 	addi	r17,r17,8
   97a44:	e0bfc917 	ldw	r2,-220(fp)
   97a48:	10800044 	addi	r2,r2,1
   97a4c:	e0bfc915 	stw	r2,-220(fp)
   97a50:	e0bfc917 	ldw	r2,-220(fp)
   97a54:	10800210 	cmplti	r2,r2,8
   97a58:	1000071e 	bne	r2,zero,97a78 <___svfprintf_internal_r+0x1580>
   97a5c:	e0bfc804 	addi	r2,fp,-224
   97a60:	100d883a 	mov	r6,r2
   97a64:	e17fe717 	ldw	r5,-100(fp)
   97a68:	e13fe617 	ldw	r4,-104(fp)
   97a6c:	009b8e40 	call	9b8e4 <__ssprint_r>
   97a70:	1002761e 	bne	r2,zero,9844c <___svfprintf_internal_r+0x1f54>
   97a74:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
   97a78:	e0bfc417 	ldw	r2,-240(fp)
   97a7c:	1000041e 	bne	r2,zero,97a90 <___svfprintf_internal_r+0x1598>
   97a80:	e0bfc717 	ldw	r2,-228(fp)
   97a84:	1000021e 	bne	r2,zero,97a90 <___svfprintf_internal_r+0x1598>
   97a88:	9880004c 	andi	r2,r19,1
   97a8c:	1001f626 	beq	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
						PRINT (decimal_point, decp_len);
   97a90:	e0bfbc17 	ldw	r2,-272(fp)
   97a94:	88800015 	stw	r2,0(r17)
   97a98:	e0bfbd17 	ldw	r2,-268(fp)
   97a9c:	88800115 	stw	r2,4(r17)
   97aa0:	e0ffca17 	ldw	r3,-216(fp)
   97aa4:	e0bfbd17 	ldw	r2,-268(fp)
   97aa8:	1885883a 	add	r2,r3,r2
   97aac:	e0bfca15 	stw	r2,-216(fp)
   97ab0:	8c400204 	addi	r17,r17,8
   97ab4:	e0bfc917 	ldw	r2,-220(fp)
   97ab8:	10800044 	addi	r2,r2,1
   97abc:	e0bfc915 	stw	r2,-220(fp)
   97ac0:	e0bfc917 	ldw	r2,-220(fp)
   97ac4:	10800210 	cmplti	r2,r2,8
   97ac8:	1000071e 	bne	r2,zero,97ae8 <___svfprintf_internal_r+0x15f0>
   97acc:	e0bfc804 	addi	r2,fp,-224
   97ad0:	100d883a 	mov	r6,r2
   97ad4:	e17fe717 	ldw	r5,-100(fp)
   97ad8:	e13fe617 	ldw	r4,-104(fp)
   97adc:	009b8e40 	call	9b8e4 <__ssprint_r>
   97ae0:	10025c1e 	bne	r2,zero,98454 <___svfprintf_internal_r+0x1f5c>
   97ae4:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
   97ae8:	e0bfc417 	ldw	r2,-240(fp)
   97aec:	00a1c83a 	sub	r16,zero,r2
   97af0:	0400310e 	bge	zero,r16,97bb8 <___svfprintf_internal_r+0x16c0>
   97af4:	00001706 	br	97b54 <___svfprintf_internal_r+0x165c>
   97af8:	008002b4 	movhi	r2,10
   97afc:	1084f484 	addi	r2,r2,5074
   97b00:	88800015 	stw	r2,0(r17)
   97b04:	00800404 	movi	r2,16
   97b08:	88800115 	stw	r2,4(r17)
   97b0c:	e0bfca17 	ldw	r2,-216(fp)
   97b10:	10800404 	addi	r2,r2,16
   97b14:	e0bfca15 	stw	r2,-216(fp)
   97b18:	8c400204 	addi	r17,r17,8
   97b1c:	e0bfc917 	ldw	r2,-220(fp)
   97b20:	10800044 	addi	r2,r2,1
   97b24:	e0bfc915 	stw	r2,-220(fp)
   97b28:	e0bfc917 	ldw	r2,-220(fp)
   97b2c:	10800210 	cmplti	r2,r2,8
   97b30:	1000071e 	bne	r2,zero,97b50 <___svfprintf_internal_r+0x1658>
   97b34:	e0bfc804 	addi	r2,fp,-224
   97b38:	100d883a 	mov	r6,r2
   97b3c:	e17fe717 	ldw	r5,-100(fp)
   97b40:	e13fe617 	ldw	r4,-104(fp)
   97b44:	009b8e40 	call	9b8e4 <__ssprint_r>
   97b48:	1002441e 	bne	r2,zero,9845c <___svfprintf_internal_r+0x1f64>
   97b4c:	e47fcb04 	addi	r17,fp,-212
   97b50:	843ffc04 	addi	r16,r16,-16
   97b54:	80800448 	cmpgei	r2,r16,17
   97b58:	103fe71e 	bne	r2,zero,97af8 <__alt_data_end+0xfffe5af8>
   97b5c:	008002b4 	movhi	r2,10
   97b60:	1084f484 	addi	r2,r2,5074
   97b64:	88800015 	stw	r2,0(r17)
   97b68:	8005883a 	mov	r2,r16
   97b6c:	88800115 	stw	r2,4(r17)
   97b70:	e0bfca17 	ldw	r2,-216(fp)
   97b74:	8007883a 	mov	r3,r16
   97b78:	10c5883a 	add	r2,r2,r3
   97b7c:	e0bfca15 	stw	r2,-216(fp)
   97b80:	8c400204 	addi	r17,r17,8
   97b84:	e0bfc917 	ldw	r2,-220(fp)
   97b88:	10800044 	addi	r2,r2,1
   97b8c:	e0bfc915 	stw	r2,-220(fp)
   97b90:	e0bfc917 	ldw	r2,-220(fp)
   97b94:	10800210 	cmplti	r2,r2,8
   97b98:	1000071e 	bne	r2,zero,97bb8 <___svfprintf_internal_r+0x16c0>
   97b9c:	e0bfc804 	addi	r2,fp,-224
   97ba0:	100d883a 	mov	r6,r2
   97ba4:	e17fe717 	ldw	r5,-100(fp)
   97ba8:	e13fe617 	ldw	r4,-104(fp)
   97bac:	009b8e40 	call	9b8e4 <__ssprint_r>
   97bb0:	10022c1e 	bne	r2,zero,98464 <___svfprintf_internal_r+0x1f6c>
   97bb4:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
   97bb8:	8c800015 	stw	r18,0(r17)
   97bbc:	e0bfc717 	ldw	r2,-228(fp)
   97bc0:	88800115 	stw	r2,4(r17)
   97bc4:	e0bfca17 	ldw	r2,-216(fp)
   97bc8:	e0ffc717 	ldw	r3,-228(fp)
   97bcc:	10c5883a 	add	r2,r2,r3
   97bd0:	e0bfca15 	stw	r2,-216(fp)
   97bd4:	8c400204 	addi	r17,r17,8
   97bd8:	e0bfc917 	ldw	r2,-220(fp)
   97bdc:	10800044 	addi	r2,r2,1
   97be0:	e0bfc915 	stw	r2,-220(fp)
   97be4:	e0bfc917 	ldw	r2,-220(fp)
   97be8:	10800210 	cmplti	r2,r2,8
   97bec:	10019e1e 	bne	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
   97bf0:	e0bfc804 	addi	r2,fp,-224
   97bf4:	100d883a 	mov	r6,r2
   97bf8:	e17fe717 	ldw	r5,-100(fp)
   97bfc:	e13fe617 	ldw	r4,-104(fp)
   97c00:	009b8e40 	call	9b8e4 <__ssprint_r>
   97c04:	1002191e 	bne	r2,zero,9846c <___svfprintf_internal_r+0x1f74>
   97c08:	e47fcb04 	addi	r17,fp,-212
   97c0c:	00019606 	br	98268 <___svfprintf_internal_r+0x1d70>
					}
				} else {
					char *convbuf = cp;
   97c10:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
   97c14:	e0bfc717 	ldw	r2,-228(fp)
   97c18:	1007883a 	mov	r3,r2
   97c1c:	e0bfc017 	ldw	r2,-256(fp)
   97c20:	10c5883a 	add	r2,r2,r3
   97c24:	1007883a 	mov	r3,r2
   97c28:	9005883a 	mov	r2,r18
   97c2c:	1885c83a 	sub	r2,r3,r2
   97c30:	e0bfba15 	stw	r2,-280(fp)
   97c34:	e0bfba17 	ldw	r2,-280(fp)
   97c38:	e0ffb117 	ldw	r3,-316(fp)
   97c3c:	1880020e 	bge	r3,r2,97c48 <___svfprintf_internal_r+0x1750>
   97c40:	e0bfb117 	ldw	r2,-316(fp)
   97c44:	e0bfba15 	stw	r2,-280(fp)
   97c48:	e0bfba17 	ldw	r2,-280(fp)
   97c4c:	0080150e 	bge	zero,r2,97ca4 <___svfprintf_internal_r+0x17ac>
   97c50:	8c800015 	stw	r18,0(r17)
   97c54:	e0bfba17 	ldw	r2,-280(fp)
   97c58:	88800115 	stw	r2,4(r17)
   97c5c:	e0ffca17 	ldw	r3,-216(fp)
   97c60:	e0bfba17 	ldw	r2,-280(fp)
   97c64:	1885883a 	add	r2,r3,r2
   97c68:	e0bfca15 	stw	r2,-216(fp)
   97c6c:	8c400204 	addi	r17,r17,8
   97c70:	e0bfc917 	ldw	r2,-220(fp)
   97c74:	10800044 	addi	r2,r2,1
   97c78:	e0bfc915 	stw	r2,-220(fp)
   97c7c:	e0bfc917 	ldw	r2,-220(fp)
   97c80:	10800210 	cmplti	r2,r2,8
   97c84:	1000071e 	bne	r2,zero,97ca4 <___svfprintf_internal_r+0x17ac>
   97c88:	e0bfc804 	addi	r2,fp,-224
   97c8c:	100d883a 	mov	r6,r2
   97c90:	e17fe717 	ldw	r5,-100(fp)
   97c94:	e13fe617 	ldw	r4,-104(fp)
   97c98:	009b8e40 	call	9b8e4 <__ssprint_r>
   97c9c:	1001f51e 	bne	r2,zero,98474 <___svfprintf_internal_r+0x1f7c>
   97ca0:	e47fcb04 	addi	r17,fp,-212
   97ca4:	e0bfba17 	ldw	r2,-280(fp)
   97ca8:	1000010e 	bge	r2,zero,97cb0 <___svfprintf_internal_r+0x17b8>
   97cac:	0005883a 	mov	r2,zero
   97cb0:	e0ffb117 	ldw	r3,-316(fp)
   97cb4:	1885c83a 	sub	r2,r3,r2
   97cb8:	e0bfba15 	stw	r2,-280(fp)
   97cbc:	e0bfba17 	ldw	r2,-280(fp)
   97cc0:	0080340e 	bge	zero,r2,97d94 <___svfprintf_internal_r+0x189c>
   97cc4:	00001906 	br	97d2c <___svfprintf_internal_r+0x1834>
   97cc8:	008002b4 	movhi	r2,10
   97ccc:	1084f484 	addi	r2,r2,5074
   97cd0:	88800015 	stw	r2,0(r17)
   97cd4:	00800404 	movi	r2,16
   97cd8:	88800115 	stw	r2,4(r17)
   97cdc:	e0bfca17 	ldw	r2,-216(fp)
   97ce0:	10800404 	addi	r2,r2,16
   97ce4:	e0bfca15 	stw	r2,-216(fp)
   97ce8:	8c400204 	addi	r17,r17,8
   97cec:	e0bfc917 	ldw	r2,-220(fp)
   97cf0:	10800044 	addi	r2,r2,1
   97cf4:	e0bfc915 	stw	r2,-220(fp)
   97cf8:	e0bfc917 	ldw	r2,-220(fp)
   97cfc:	10800210 	cmplti	r2,r2,8
   97d00:	1000071e 	bne	r2,zero,97d20 <___svfprintf_internal_r+0x1828>
   97d04:	e0bfc804 	addi	r2,fp,-224
   97d08:	100d883a 	mov	r6,r2
   97d0c:	e17fe717 	ldw	r5,-100(fp)
   97d10:	e13fe617 	ldw	r4,-104(fp)
   97d14:	009b8e40 	call	9b8e4 <__ssprint_r>
   97d18:	1001d81e 	bne	r2,zero,9847c <___svfprintf_internal_r+0x1f84>
   97d1c:	e47fcb04 	addi	r17,fp,-212
   97d20:	e0bfba17 	ldw	r2,-280(fp)
   97d24:	10bffc04 	addi	r2,r2,-16
   97d28:	e0bfba15 	stw	r2,-280(fp)
   97d2c:	e0bfba17 	ldw	r2,-280(fp)
   97d30:	10800448 	cmpgei	r2,r2,17
   97d34:	103fe41e 	bne	r2,zero,97cc8 <__alt_data_end+0xfffe5cc8>
   97d38:	008002b4 	movhi	r2,10
   97d3c:	1084f484 	addi	r2,r2,5074
   97d40:	88800015 	stw	r2,0(r17)
   97d44:	e0bfba17 	ldw	r2,-280(fp)
   97d48:	88800115 	stw	r2,4(r17)
   97d4c:	e0ffca17 	ldw	r3,-216(fp)
   97d50:	e0bfba17 	ldw	r2,-280(fp)
   97d54:	1885883a 	add	r2,r3,r2
   97d58:	e0bfca15 	stw	r2,-216(fp)
   97d5c:	8c400204 	addi	r17,r17,8
   97d60:	e0bfc917 	ldw	r2,-220(fp)
   97d64:	10800044 	addi	r2,r2,1
   97d68:	e0bfc915 	stw	r2,-220(fp)
   97d6c:	e0bfc917 	ldw	r2,-220(fp)
   97d70:	10800210 	cmplti	r2,r2,8
   97d74:	1000071e 	bne	r2,zero,97d94 <___svfprintf_internal_r+0x189c>
   97d78:	e0bfc804 	addi	r2,fp,-224
   97d7c:	100d883a 	mov	r6,r2
   97d80:	e17fe717 	ldw	r5,-100(fp)
   97d84:	e13fe617 	ldw	r4,-104(fp)
   97d88:	009b8e40 	call	9b8e4 <__ssprint_r>
   97d8c:	1001bd1e 	bne	r2,zero,98484 <___svfprintf_internal_r+0x1f8c>
   97d90:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
   97d94:	e0bfb117 	ldw	r2,-316(fp)
   97d98:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
   97d9c:	e0ffc417 	ldw	r3,-240(fp)
   97da0:	e0bfc717 	ldw	r2,-228(fp)
   97da4:	18800216 	blt	r3,r2,97db0 <___svfprintf_internal_r+0x18b8>
   97da8:	9880004c 	andi	r2,r19,1
   97dac:	10001626 	beq	r2,zero,97e08 <___svfprintf_internal_r+0x1910>
					    PRINT (decimal_point, decp_len);
   97db0:	e0bfbc17 	ldw	r2,-272(fp)
   97db4:	88800015 	stw	r2,0(r17)
   97db8:	e0bfbd17 	ldw	r2,-268(fp)
   97dbc:	88800115 	stw	r2,4(r17)
   97dc0:	e0ffca17 	ldw	r3,-216(fp)
   97dc4:	e0bfbd17 	ldw	r2,-268(fp)
   97dc8:	1885883a 	add	r2,r3,r2
   97dcc:	e0bfca15 	stw	r2,-216(fp)
   97dd0:	8c400204 	addi	r17,r17,8
   97dd4:	e0bfc917 	ldw	r2,-220(fp)
   97dd8:	10800044 	addi	r2,r2,1
   97ddc:	e0bfc915 	stw	r2,-220(fp)
   97de0:	e0bfc917 	ldw	r2,-220(fp)
   97de4:	10800210 	cmplti	r2,r2,8
   97de8:	1000071e 	bne	r2,zero,97e08 <___svfprintf_internal_r+0x1910>
   97dec:	e0bfc804 	addi	r2,fp,-224
   97df0:	100d883a 	mov	r6,r2
   97df4:	e17fe717 	ldw	r5,-100(fp)
   97df8:	e13fe617 	ldw	r4,-104(fp)
   97dfc:	009b8e40 	call	9b8e4 <__ssprint_r>
   97e00:	1001a21e 	bne	r2,zero,9848c <___svfprintf_internal_r+0x1f94>
   97e04:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
   97e08:	e0bfc717 	ldw	r2,-228(fp)
   97e0c:	1007883a 	mov	r3,r2
   97e10:	e0bfc017 	ldw	r2,-256(fp)
   97e14:	10c5883a 	add	r2,r2,r3
   97e18:	1007883a 	mov	r3,r2
   97e1c:	9005883a 	mov	r2,r18
   97e20:	1885c83a 	sub	r2,r3,r2
   97e24:	e0bfbb15 	stw	r2,-276(fp)
   97e28:	e0ffc717 	ldw	r3,-228(fp)
   97e2c:	e0bfc417 	ldw	r2,-240(fp)
   97e30:	1887c83a 	sub	r3,r3,r2
   97e34:	e0bfbb17 	ldw	r2,-276(fp)
   97e38:	1880040e 	bge	r3,r2,97e4c <___svfprintf_internal_r+0x1954>
   97e3c:	e0ffc717 	ldw	r3,-228(fp)
   97e40:	e0bfc417 	ldw	r2,-240(fp)
   97e44:	1885c83a 	sub	r2,r3,r2
   97e48:	e0bfbb15 	stw	r2,-276(fp)
   97e4c:	e0bfbb17 	ldw	r2,-276(fp)
   97e50:	0080150e 	bge	zero,r2,97ea8 <___svfprintf_internal_r+0x19b0>
   97e54:	8c800015 	stw	r18,0(r17)
   97e58:	e0bfbb17 	ldw	r2,-276(fp)
   97e5c:	88800115 	stw	r2,4(r17)
   97e60:	e0ffca17 	ldw	r3,-216(fp)
   97e64:	e0bfbb17 	ldw	r2,-276(fp)
   97e68:	1885883a 	add	r2,r3,r2
   97e6c:	e0bfca15 	stw	r2,-216(fp)
   97e70:	8c400204 	addi	r17,r17,8
   97e74:	e0bfc917 	ldw	r2,-220(fp)
   97e78:	10800044 	addi	r2,r2,1
   97e7c:	e0bfc915 	stw	r2,-220(fp)
   97e80:	e0bfc917 	ldw	r2,-220(fp)
   97e84:	10800210 	cmplti	r2,r2,8
   97e88:	1000071e 	bne	r2,zero,97ea8 <___svfprintf_internal_r+0x19b0>
   97e8c:	e0bfc804 	addi	r2,fp,-224
   97e90:	100d883a 	mov	r6,r2
   97e94:	e17fe717 	ldw	r5,-100(fp)
   97e98:	e13fe617 	ldw	r4,-104(fp)
   97e9c:	009b8e40 	call	9b8e4 <__ssprint_r>
   97ea0:	10017c1e 	bne	r2,zero,98494 <___svfprintf_internal_r+0x1f9c>
   97ea4:	e47fcb04 	addi	r17,fp,-212
   97ea8:	e0ffc717 	ldw	r3,-228(fp)
   97eac:	e0bfc417 	ldw	r2,-240(fp)
   97eb0:	1887c83a 	sub	r3,r3,r2
   97eb4:	e0bfbb17 	ldw	r2,-276(fp)
   97eb8:	1000010e 	bge	r2,zero,97ec0 <___svfprintf_internal_r+0x19c8>
   97ebc:	0005883a 	mov	r2,zero
   97ec0:	1885c83a 	sub	r2,r3,r2
   97ec4:	e0bfbb15 	stw	r2,-276(fp)
   97ec8:	e0bfbb17 	ldw	r2,-276(fp)
   97ecc:	0080e60e 	bge	zero,r2,98268 <___svfprintf_internal_r+0x1d70>
   97ed0:	00001906 	br	97f38 <___svfprintf_internal_r+0x1a40>
   97ed4:	008002b4 	movhi	r2,10
   97ed8:	1084f484 	addi	r2,r2,5074
   97edc:	88800015 	stw	r2,0(r17)
   97ee0:	00800404 	movi	r2,16
   97ee4:	88800115 	stw	r2,4(r17)
   97ee8:	e0bfca17 	ldw	r2,-216(fp)
   97eec:	10800404 	addi	r2,r2,16
   97ef0:	e0bfca15 	stw	r2,-216(fp)
   97ef4:	8c400204 	addi	r17,r17,8
   97ef8:	e0bfc917 	ldw	r2,-220(fp)
   97efc:	10800044 	addi	r2,r2,1
   97f00:	e0bfc915 	stw	r2,-220(fp)
   97f04:	e0bfc917 	ldw	r2,-220(fp)
   97f08:	10800210 	cmplti	r2,r2,8
   97f0c:	1000071e 	bne	r2,zero,97f2c <___svfprintf_internal_r+0x1a34>
   97f10:	e0bfc804 	addi	r2,fp,-224
   97f14:	100d883a 	mov	r6,r2
   97f18:	e17fe717 	ldw	r5,-100(fp)
   97f1c:	e13fe617 	ldw	r4,-104(fp)
   97f20:	009b8e40 	call	9b8e4 <__ssprint_r>
   97f24:	10015d1e 	bne	r2,zero,9849c <___svfprintf_internal_r+0x1fa4>
   97f28:	e47fcb04 	addi	r17,fp,-212
   97f2c:	e0bfbb17 	ldw	r2,-276(fp)
   97f30:	10bffc04 	addi	r2,r2,-16
   97f34:	e0bfbb15 	stw	r2,-276(fp)
   97f38:	e0bfbb17 	ldw	r2,-276(fp)
   97f3c:	10800448 	cmpgei	r2,r2,17
   97f40:	103fe41e 	bne	r2,zero,97ed4 <__alt_data_end+0xfffe5ed4>
   97f44:	008002b4 	movhi	r2,10
   97f48:	1084f484 	addi	r2,r2,5074
   97f4c:	88800015 	stw	r2,0(r17)
   97f50:	e0bfbb17 	ldw	r2,-276(fp)
   97f54:	88800115 	stw	r2,4(r17)
   97f58:	e0ffca17 	ldw	r3,-216(fp)
   97f5c:	e0bfbb17 	ldw	r2,-276(fp)
   97f60:	1885883a 	add	r2,r3,r2
   97f64:	e0bfca15 	stw	r2,-216(fp)
   97f68:	8c400204 	addi	r17,r17,8
   97f6c:	e0bfc917 	ldw	r2,-220(fp)
   97f70:	10800044 	addi	r2,r2,1
   97f74:	e0bfc915 	stw	r2,-220(fp)
   97f78:	e0bfc917 	ldw	r2,-220(fp)
   97f7c:	10800210 	cmplti	r2,r2,8
   97f80:	1000b91e 	bne	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
   97f84:	e0bfc804 	addi	r2,fp,-224
   97f88:	100d883a 	mov	r6,r2
   97f8c:	e17fe717 	ldw	r5,-100(fp)
   97f90:	e13fe617 	ldw	r4,-104(fp)
   97f94:	009b8e40 	call	9b8e4 <__ssprint_r>
   97f98:	1001421e 	bne	r2,zero,984a4 <___svfprintf_internal_r+0x1fac>
   97f9c:	e47fcb04 	addi	r17,fp,-212
   97fa0:	0000b106 	br	98268 <___svfprintf_internal_r+0x1d70>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
   97fa4:	e0bfc717 	ldw	r2,-228(fp)
   97fa8:	10800088 	cmpgei	r2,r2,2
   97fac:	1000021e 	bne	r2,zero,97fb8 <___svfprintf_internal_r+0x1ac0>
   97fb0:	9880004c 	andi	r2,r19,1
   97fb4:	10008026 	beq	r2,zero,981b8 <___svfprintf_internal_r+0x1cc0>
					PRINT (cp, 1);
   97fb8:	8c800015 	stw	r18,0(r17)
   97fbc:	00800044 	movi	r2,1
   97fc0:	88800115 	stw	r2,4(r17)
   97fc4:	e0bfca17 	ldw	r2,-216(fp)
   97fc8:	10800044 	addi	r2,r2,1
   97fcc:	e0bfca15 	stw	r2,-216(fp)
   97fd0:	8c400204 	addi	r17,r17,8
   97fd4:	e0bfc917 	ldw	r2,-220(fp)
   97fd8:	10800044 	addi	r2,r2,1
   97fdc:	e0bfc915 	stw	r2,-220(fp)
   97fe0:	e0bfc917 	ldw	r2,-220(fp)
   97fe4:	10800210 	cmplti	r2,r2,8
   97fe8:	1000071e 	bne	r2,zero,98008 <___svfprintf_internal_r+0x1b10>
   97fec:	e0bfc804 	addi	r2,fp,-224
   97ff0:	100d883a 	mov	r6,r2
   97ff4:	e17fe717 	ldw	r5,-100(fp)
   97ff8:	e13fe617 	ldw	r4,-104(fp)
   97ffc:	009b8e40 	call	9b8e4 <__ssprint_r>
   98000:	10012a1e 	bne	r2,zero,984ac <___svfprintf_internal_r+0x1fb4>
   98004:	e47fcb04 	addi	r17,fp,-212
					cp++;
   98008:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
   9800c:	e0bfbc17 	ldw	r2,-272(fp)
   98010:	88800015 	stw	r2,0(r17)
   98014:	e0bfbd17 	ldw	r2,-268(fp)
   98018:	88800115 	stw	r2,4(r17)
   9801c:	e0ffca17 	ldw	r3,-216(fp)
   98020:	e0bfbd17 	ldw	r2,-268(fp)
   98024:	1885883a 	add	r2,r3,r2
   98028:	e0bfca15 	stw	r2,-216(fp)
   9802c:	8c400204 	addi	r17,r17,8
   98030:	e0bfc917 	ldw	r2,-220(fp)
   98034:	10800044 	addi	r2,r2,1
   98038:	e0bfc915 	stw	r2,-220(fp)
   9803c:	e0bfc917 	ldw	r2,-220(fp)
   98040:	10800210 	cmplti	r2,r2,8
   98044:	1000071e 	bne	r2,zero,98064 <___svfprintf_internal_r+0x1b6c>
   98048:	e0bfc804 	addi	r2,fp,-224
   9804c:	100d883a 	mov	r6,r2
   98050:	e17fe717 	ldw	r5,-100(fp)
   98054:	e13fe617 	ldw	r4,-104(fp)
   98058:	009b8e40 	call	9b8e4 <__ssprint_r>
   9805c:	1001151e 	bne	r2,zero,984b4 <___svfprintf_internal_r+0x1fbc>
   98060:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
   98064:	e0bfc217 	ldw	r2,-248(fp)
   98068:	e0ffc317 	ldw	r3,-244(fp)
   9806c:	000d883a 	mov	r6,zero
   98070:	000f883a 	mov	r7,zero
   98074:	1009883a 	mov	r4,r2
   98078:	180b883a 	mov	r5,r3
   9807c:	009dde80 	call	9dde8 <__eqdf2>
   98080:	10001826 	beq	r2,zero,980e4 <___svfprintf_internal_r+0x1bec>
						PRINT (cp, ndig - 1);
   98084:	8c800015 	stw	r18,0(r17)
   98088:	e0bfc717 	ldw	r2,-228(fp)
   9808c:	10bfffc4 	addi	r2,r2,-1
   98090:	88800115 	stw	r2,4(r17)
   98094:	e0bfca17 	ldw	r2,-216(fp)
   98098:	e0ffc717 	ldw	r3,-228(fp)
   9809c:	10c5883a 	add	r2,r2,r3
   980a0:	10bfffc4 	addi	r2,r2,-1
   980a4:	e0bfca15 	stw	r2,-216(fp)
   980a8:	8c400204 	addi	r17,r17,8
   980ac:	e0bfc917 	ldw	r2,-220(fp)
   980b0:	10800044 	addi	r2,r2,1
   980b4:	e0bfc915 	stw	r2,-220(fp)
   980b8:	e0bfc917 	ldw	r2,-220(fp)
   980bc:	10800210 	cmplti	r2,r2,8
   980c0:	1000521e 	bne	r2,zero,9820c <___svfprintf_internal_r+0x1d14>
   980c4:	e0bfc804 	addi	r2,fp,-224
   980c8:	100d883a 	mov	r6,r2
   980cc:	e17fe717 	ldw	r5,-100(fp)
   980d0:	e13fe617 	ldw	r4,-104(fp)
   980d4:	009b8e40 	call	9b8e4 <__ssprint_r>
   980d8:	1000f81e 	bne	r2,zero,984bc <___svfprintf_internal_r+0x1fc4>
   980dc:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   980e0:	00004a06 	br	9820c <___svfprintf_internal_r+0x1d14>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   980e4:	e0bfc717 	ldw	r2,-228(fp)
   980e8:	143fffc4 	addi	r16,r2,-1
   980ec:	0400470e 	bge	zero,r16,9820c <___svfprintf_internal_r+0x1d14>
   980f0:	00001706 	br	98150 <___svfprintf_internal_r+0x1c58>
   980f4:	008002b4 	movhi	r2,10
   980f8:	1084f484 	addi	r2,r2,5074
   980fc:	88800015 	stw	r2,0(r17)
   98100:	00800404 	movi	r2,16
   98104:	88800115 	stw	r2,4(r17)
   98108:	e0bfca17 	ldw	r2,-216(fp)
   9810c:	10800404 	addi	r2,r2,16
   98110:	e0bfca15 	stw	r2,-216(fp)
   98114:	8c400204 	addi	r17,r17,8
   98118:	e0bfc917 	ldw	r2,-220(fp)
   9811c:	10800044 	addi	r2,r2,1
   98120:	e0bfc915 	stw	r2,-220(fp)
   98124:	e0bfc917 	ldw	r2,-220(fp)
   98128:	10800210 	cmplti	r2,r2,8
   9812c:	1000071e 	bne	r2,zero,9814c <___svfprintf_internal_r+0x1c54>
   98130:	e0bfc804 	addi	r2,fp,-224
   98134:	100d883a 	mov	r6,r2
   98138:	e17fe717 	ldw	r5,-100(fp)
   9813c:	e13fe617 	ldw	r4,-104(fp)
   98140:	009b8e40 	call	9b8e4 <__ssprint_r>
   98144:	1000df1e 	bne	r2,zero,984c4 <___svfprintf_internal_r+0x1fcc>
   98148:	e47fcb04 	addi	r17,fp,-212
   9814c:	843ffc04 	addi	r16,r16,-16
   98150:	80800448 	cmpgei	r2,r16,17
   98154:	103fe71e 	bne	r2,zero,980f4 <__alt_data_end+0xfffe60f4>
   98158:	008002b4 	movhi	r2,10
   9815c:	1084f484 	addi	r2,r2,5074
   98160:	88800015 	stw	r2,0(r17)
   98164:	8005883a 	mov	r2,r16
   98168:	88800115 	stw	r2,4(r17)
   9816c:	e0bfca17 	ldw	r2,-216(fp)
   98170:	8007883a 	mov	r3,r16
   98174:	10c5883a 	add	r2,r2,r3
   98178:	e0bfca15 	stw	r2,-216(fp)
   9817c:	8c400204 	addi	r17,r17,8
   98180:	e0bfc917 	ldw	r2,-220(fp)
   98184:	10800044 	addi	r2,r2,1
   98188:	e0bfc915 	stw	r2,-220(fp)
   9818c:	e0bfc917 	ldw	r2,-220(fp)
   98190:	10800210 	cmplti	r2,r2,8
   98194:	10001d1e 	bne	r2,zero,9820c <___svfprintf_internal_r+0x1d14>
   98198:	e0bfc804 	addi	r2,fp,-224
   9819c:	100d883a 	mov	r6,r2
   981a0:	e17fe717 	ldw	r5,-100(fp)
   981a4:	e13fe617 	ldw	r4,-104(fp)
   981a8:	009b8e40 	call	9b8e4 <__ssprint_r>
   981ac:	1000c71e 	bne	r2,zero,984cc <___svfprintf_internal_r+0x1fd4>
   981b0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   981b4:	00001506 	br	9820c <___svfprintf_internal_r+0x1d14>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
   981b8:	8c800015 	stw	r18,0(r17)
   981bc:	00800044 	movi	r2,1
   981c0:	88800115 	stw	r2,4(r17)
   981c4:	e0bfca17 	ldw	r2,-216(fp)
   981c8:	10800044 	addi	r2,r2,1
   981cc:	e0bfca15 	stw	r2,-216(fp)
   981d0:	8c400204 	addi	r17,r17,8
   981d4:	e0bfc917 	ldw	r2,-220(fp)
   981d8:	10800044 	addi	r2,r2,1
   981dc:	e0bfc915 	stw	r2,-220(fp)
   981e0:	e0bfc917 	ldw	r2,-220(fp)
   981e4:	10800210 	cmplti	r2,r2,8
   981e8:	1000091e 	bne	r2,zero,98210 <___svfprintf_internal_r+0x1d18>
   981ec:	e0bfc804 	addi	r2,fp,-224
   981f0:	100d883a 	mov	r6,r2
   981f4:	e17fe717 	ldw	r5,-100(fp)
   981f8:	e13fe617 	ldw	r4,-104(fp)
   981fc:	009b8e40 	call	9b8e4 <__ssprint_r>
   98200:	1000b41e 	bne	r2,zero,984d4 <___svfprintf_internal_r+0x1fdc>
   98204:	e47fcb04 	addi	r17,fp,-212
   98208:	00000106 	br	98210 <___svfprintf_internal_r+0x1d18>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   9820c:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
   98210:	e0bfc504 	addi	r2,fp,-236
   98214:	88800015 	stw	r2,0(r17)
   98218:	e0bfb017 	ldw	r2,-320(fp)
   9821c:	88800115 	stw	r2,4(r17)
   98220:	e0ffca17 	ldw	r3,-216(fp)
   98224:	e0bfb017 	ldw	r2,-320(fp)
   98228:	1885883a 	add	r2,r3,r2
   9822c:	e0bfca15 	stw	r2,-216(fp)
   98230:	8c400204 	addi	r17,r17,8
   98234:	e0bfc917 	ldw	r2,-220(fp)
   98238:	10800044 	addi	r2,r2,1
   9823c:	e0bfc915 	stw	r2,-220(fp)
   98240:	e0bfc917 	ldw	r2,-220(fp)
   98244:	10800210 	cmplti	r2,r2,8
   98248:	1000071e 	bne	r2,zero,98268 <___svfprintf_internal_r+0x1d70>
   9824c:	e0bfc804 	addi	r2,fp,-224
   98250:	100d883a 	mov	r6,r2
   98254:	e17fe717 	ldw	r5,-100(fp)
   98258:	e13fe617 	ldw	r4,-104(fp)
   9825c:	009b8e40 	call	9b8e4 <__ssprint_r>
   98260:	10009e1e 	bne	r2,zero,984dc <___svfprintf_internal_r+0x1fe4>
   98264:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   98268:	9880010c 	andi	r2,r19,4
   9826c:	10003526 	beq	r2,zero,98344 <___svfprintf_internal_r+0x1e4c>
			PAD (width - realsz, blanks);
   98270:	e0ffae17 	ldw	r3,-328(fp)
   98274:	e0bfb617 	ldw	r2,-296(fp)
   98278:	18a1c83a 	sub	r16,r3,r2
   9827c:	0400310e 	bge	zero,r16,98344 <___svfprintf_internal_r+0x1e4c>
   98280:	00001706 	br	982e0 <___svfprintf_internal_r+0x1de8>
   98284:	008002b4 	movhi	r2,10
   98288:	1084f084 	addi	r2,r2,5058
   9828c:	88800015 	stw	r2,0(r17)
   98290:	00800404 	movi	r2,16
   98294:	88800115 	stw	r2,4(r17)
   98298:	e0bfca17 	ldw	r2,-216(fp)
   9829c:	10800404 	addi	r2,r2,16
   982a0:	e0bfca15 	stw	r2,-216(fp)
   982a4:	8c400204 	addi	r17,r17,8
   982a8:	e0bfc917 	ldw	r2,-220(fp)
   982ac:	10800044 	addi	r2,r2,1
   982b0:	e0bfc915 	stw	r2,-220(fp)
   982b4:	e0bfc917 	ldw	r2,-220(fp)
   982b8:	10800210 	cmplti	r2,r2,8
   982bc:	1000071e 	bne	r2,zero,982dc <___svfprintf_internal_r+0x1de4>
   982c0:	e0bfc804 	addi	r2,fp,-224
   982c4:	100d883a 	mov	r6,r2
   982c8:	e17fe717 	ldw	r5,-100(fp)
   982cc:	e13fe617 	ldw	r4,-104(fp)
   982d0:	009b8e40 	call	9b8e4 <__ssprint_r>
   982d4:	1000831e 	bne	r2,zero,984e4 <___svfprintf_internal_r+0x1fec>
   982d8:	e47fcb04 	addi	r17,fp,-212
   982dc:	843ffc04 	addi	r16,r16,-16
   982e0:	80800448 	cmpgei	r2,r16,17
   982e4:	103fe71e 	bne	r2,zero,98284 <__alt_data_end+0xfffe6284>
   982e8:	008002b4 	movhi	r2,10
   982ec:	1084f084 	addi	r2,r2,5058
   982f0:	88800015 	stw	r2,0(r17)
   982f4:	8005883a 	mov	r2,r16
   982f8:	88800115 	stw	r2,4(r17)
   982fc:	e0bfca17 	ldw	r2,-216(fp)
   98300:	8007883a 	mov	r3,r16
   98304:	10c5883a 	add	r2,r2,r3
   98308:	e0bfca15 	stw	r2,-216(fp)
   9830c:	8c400204 	addi	r17,r17,8
   98310:	e0bfc917 	ldw	r2,-220(fp)
   98314:	10800044 	addi	r2,r2,1
   98318:	e0bfc915 	stw	r2,-220(fp)
   9831c:	e0bfc917 	ldw	r2,-220(fp)
   98320:	10800210 	cmplti	r2,r2,8
   98324:	1000071e 	bne	r2,zero,98344 <___svfprintf_internal_r+0x1e4c>
   98328:	e0bfc804 	addi	r2,fp,-224
   9832c:	100d883a 	mov	r6,r2
   98330:	e17fe717 	ldw	r5,-100(fp)
   98334:	e13fe617 	ldw	r4,-104(fp)
   98338:	009b8e40 	call	9b8e4 <__ssprint_r>
   9833c:	10006b1e 	bne	r2,zero,984ec <___svfprintf_internal_r+0x1ff4>
   98340:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   98344:	e0ffae17 	ldw	r3,-328(fp)
   98348:	e0bfb617 	ldw	r2,-296(fp)
   9834c:	10c0010e 	bge	r2,r3,98354 <___svfprintf_internal_r+0x1e5c>
   98350:	1805883a 	mov	r2,r3
   98354:	e0ffad17 	ldw	r3,-332(fp)
   98358:	1885883a 	add	r2,r3,r2
   9835c:	e0bfad15 	stw	r2,-332(fp)

		FLUSH ();	/* copy out the I/O vectors */
   98360:	e0bfca17 	ldw	r2,-216(fp)
   98364:	10000626 	beq	r2,zero,98380 <___svfprintf_internal_r+0x1e88>
   98368:	e0bfc804 	addi	r2,fp,-224
   9836c:	100d883a 	mov	r6,r2
   98370:	e17fe717 	ldw	r5,-100(fp)
   98374:	e13fe617 	ldw	r4,-104(fp)
   98378:	009b8e40 	call	9b8e4 <__ssprint_r>
   9837c:	10005d1e 	bne	r2,zero,984f4 <___svfprintf_internal_r+0x1ffc>
   98380:	e03fc915 	stw	zero,-220(fp)
   98384:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
   98388:	e0bfb917 	ldw	r2,-284(fp)
   9838c:	10389a26 	beq	r2,zero,965f8 <__alt_data_end+0xfffe45f8>
			_free_r (data, malloc_buf);
   98390:	e17fb917 	ldw	r5,-284(fp)
   98394:	e13fe617 	ldw	r4,-104(fp)
   98398:	0085c480 	call	85c48 <_free_r>
			malloc_buf = NULL;
   9839c:	e03fb915 	stw	zero,-284(fp)
		}
	}
   983a0:	00389506 	br	965f8 <__alt_data_end+0xfffe45f8>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   983a4:	0001883a 	nop
   983a8:	00000106 	br	983b0 <___svfprintf_internal_r+0x1eb8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   983ac:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   983b0:	e0bfca17 	ldw	r2,-216(fp)
   983b4:	10000626 	beq	r2,zero,983d0 <___svfprintf_internal_r+0x1ed8>
   983b8:	e0bfc804 	addi	r2,fp,-224
   983bc:	100d883a 	mov	r6,r2
   983c0:	e17fe717 	ldw	r5,-100(fp)
   983c4:	e13fe617 	ldw	r4,-104(fp)
   983c8:	009b8e40 	call	9b8e4 <__ssprint_r>
   983cc:	10004b1e 	bne	r2,zero,984fc <___svfprintf_internal_r+0x2004>
   983d0:	e03fc915 	stw	zero,-220(fp)
   983d4:	e47fcb04 	addi	r17,fp,-212
   983d8:	00004906 	br	98500 <___svfprintf_internal_r+0x2008>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   983dc:	0001883a 	nop
   983e0:	00004706 	br	98500 <___svfprintf_internal_r+0x2008>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   983e4:	0001883a 	nop
   983e8:	00004506 	br	98500 <___svfprintf_internal_r+0x2008>
   983ec:	0001883a 	nop
   983f0:	00004306 	br	98500 <___svfprintf_internal_r+0x2008>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   983f4:	0001883a 	nop
   983f8:	00004106 	br	98500 <___svfprintf_internal_r+0x2008>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   983fc:	0001883a 	nop
   98400:	00003f06 	br	98500 <___svfprintf_internal_r+0x2008>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   98404:	0001883a 	nop
   98408:	00003d06 	br	98500 <___svfprintf_internal_r+0x2008>
   9840c:	0001883a 	nop
   98410:	00003b06 	br	98500 <___svfprintf_internal_r+0x2008>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   98414:	0001883a 	nop
   98418:	00003906 	br	98500 <___svfprintf_internal_r+0x2008>
   9841c:	0001883a 	nop
   98420:	00003706 	br	98500 <___svfprintf_internal_r+0x2008>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
   98424:	0001883a 	nop
   98428:	00003506 	br	98500 <___svfprintf_internal_r+0x2008>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   9842c:	0001883a 	nop
   98430:	00003306 	br	98500 <___svfprintf_internal_r+0x2008>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   98434:	0001883a 	nop
   98438:	00003106 	br	98500 <___svfprintf_internal_r+0x2008>
						PAD (ndig - 1, zeroes);
   9843c:	0001883a 	nop
   98440:	00002f06 	br	98500 <___svfprintf_internal_r+0x2008>
   98444:	0001883a 	nop
   98448:	00002d06 	br	98500 <___svfprintf_internal_r+0x2008>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
   9844c:	0001883a 	nop
   98450:	00002b06 	br	98500 <___svfprintf_internal_r+0x2008>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   98454:	0001883a 	nop
   98458:	00002906 	br	98500 <___svfprintf_internal_r+0x2008>
						PAD (-expt, zeroes);
   9845c:	0001883a 	nop
   98460:	00002706 	br	98500 <___svfprintf_internal_r+0x2008>
   98464:	0001883a 	nop
   98468:	00002506 	br	98500 <___svfprintf_internal_r+0x2008>
						PRINT (cp, ndig);
   9846c:	0001883a 	nop
   98470:	00002306 	br	98500 <___svfprintf_internal_r+0x2008>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
   98474:	0001883a 	nop
   98478:	00002106 	br	98500 <___svfprintf_internal_r+0x2008>
   9847c:	0001883a 	nop
   98480:	00001f06 	br	98500 <___svfprintf_internal_r+0x2008>
   98484:	0001883a 	nop
   98488:	00001d06 	br	98500 <___svfprintf_internal_r+0x2008>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
   9848c:	0001883a 	nop
   98490:	00001b06 	br	98500 <___svfprintf_internal_r+0x2008>
					PRINTANDPAD (cp, convbuf + ndig,
   98494:	0001883a 	nop
   98498:	00001906 	br	98500 <___svfprintf_internal_r+0x2008>
   9849c:	0001883a 	nop
   984a0:	00001706 	br	98500 <___svfprintf_internal_r+0x2008>
   984a4:	0001883a 	nop
   984a8:	00001506 	br	98500 <___svfprintf_internal_r+0x2008>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
   984ac:	0001883a 	nop
   984b0:	00001306 	br	98500 <___svfprintf_internal_r+0x2008>
					cp++;
					PRINT (decimal_point, decp_len);
   984b4:	0001883a 	nop
   984b8:	00001106 	br	98500 <___svfprintf_internal_r+0x2008>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
   984bc:	0001883a 	nop
   984c0:	00000f06 	br	98500 <___svfprintf_internal_r+0x2008>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   984c4:	0001883a 	nop
   984c8:	00000d06 	br	98500 <___svfprintf_internal_r+0x2008>
   984cc:	0001883a 	nop
   984d0:	00000b06 	br	98500 <___svfprintf_internal_r+0x2008>
				} else	/* XeYYY */
					PRINT (cp, 1);
   984d4:	0001883a 	nop
   984d8:	00000906 	br	98500 <___svfprintf_internal_r+0x2008>
				PRINT (expstr, expsize);
   984dc:	0001883a 	nop
   984e0:	00000706 	br	98500 <___svfprintf_internal_r+0x2008>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   984e4:	0001883a 	nop
   984e8:	00000506 	br	98500 <___svfprintf_internal_r+0x2008>
   984ec:	0001883a 	nop
   984f0:	00000306 	br	98500 <___svfprintf_internal_r+0x2008>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   984f4:	0001883a 	nop
   984f8:	00000106 	br	98500 <___svfprintf_internal_r+0x2008>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   984fc:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   98500:	e0bfb917 	ldw	r2,-284(fp)
   98504:	10000326 	beq	r2,zero,98514 <___svfprintf_internal_r+0x201c>
		_free_r (data, malloc_buf);
   98508:	e17fb917 	ldw	r5,-284(fp)
   9850c:	e13fe617 	ldw	r4,-104(fp)
   98510:	0085c480 	call	85c48 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   98514:	e0bfe717 	ldw	r2,-100(fp)
   98518:	1080030b 	ldhu	r2,12(r2)
   9851c:	10bfffcc 	andi	r2,r2,65535
   98520:	1080100c 	andi	r2,r2,64
   98524:	1000021e 	bne	r2,zero,98530 <___svfprintf_internal_r+0x2038>
   98528:	e0bfad17 	ldw	r2,-332(fp)
   9852c:	00000206 	br	98538 <___svfprintf_internal_r+0x2040>
   98530:	00bfffc4 	movi	r2,-1
   98534:	0001883a 	nop
	/* NOTREACHED */
}
   98538:	e6fff804 	addi	sp,fp,-32
   9853c:	dfc00917 	ldw	ra,36(sp)
   98540:	df000817 	ldw	fp,32(sp)
   98544:	ddc00717 	ldw	r23,28(sp)
   98548:	dd800617 	ldw	r22,24(sp)
   9854c:	dd400517 	ldw	r21,20(sp)
   98550:	dd000417 	ldw	r20,16(sp)
   98554:	dcc00317 	ldw	r19,12(sp)
   98558:	dc800217 	ldw	r18,8(sp)
   9855c:	dc400117 	ldw	r17,4(sp)
   98560:	dc000017 	ldw	r16,0(sp)
   98564:	dec00a04 	addi	sp,sp,40
   98568:	f800283a 	ret

0009856c <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
   9856c:	deffef04 	addi	sp,sp,-68
   98570:	dfc01015 	stw	ra,64(sp)
   98574:	df000f15 	stw	fp,60(sp)
   98578:	df000f04 	addi	fp,sp,60
   9857c:	e13ffc15 	stw	r4,-16(fp)
   98580:	e17ffd15 	stw	r5,-12(fp)
   98584:	e1bffe15 	stw	r6,-8(fp)
   98588:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
   9858c:	e0bffd17 	ldw	r2,-12(fp)
   98590:	e0bffa15 	stw	r2,-24(fp)
   98594:	e0bffe17 	ldw	r2,-8(fp)
   98598:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
   9859c:	e0bffb17 	ldw	r2,-20(fp)
   985a0:	1000090e 	bge	r2,zero,985c8 <cvt+0x5c>
		value = -value;
   985a4:	e0bffd17 	ldw	r2,-12(fp)
   985a8:	e0bffd15 	stw	r2,-12(fp)
   985ac:	e0bffe17 	ldw	r2,-8(fp)
   985b0:	10a0003c 	xorhi	r2,r2,32768
   985b4:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
   985b8:	e0800317 	ldw	r2,12(fp)
   985bc:	00c00b44 	movi	r3,45
   985c0:	10c00005 	stb	r3,0(r2)
   985c4:	00000206 	br	985d0 <cvt+0x64>
	} else
		*sign = '\000';
   985c8:	e0800317 	ldw	r2,12(fp)
   985cc:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
   985d0:	e0800517 	ldw	r2,20(fp)
   985d4:	108019a0 	cmpeqi	r2,r2,102
   985d8:	1000031e 	bne	r2,zero,985e8 <cvt+0x7c>
   985dc:	e0800517 	ldw	r2,20(fp)
   985e0:	10801198 	cmpnei	r2,r2,70
   985e4:	1000031e 	bne	r2,zero,985f4 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
   985e8:	008000c4 	movi	r2,3
   985ec:	e0bff515 	stw	r2,-44(fp)
   985f0:	00000b06 	br	98620 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
   985f4:	e0800517 	ldw	r2,20(fp)
   985f8:	10801960 	cmpeqi	r2,r2,101
   985fc:	1000031e 	bne	r2,zero,9860c <cvt+0xa0>
   98600:	e0800517 	ldw	r2,20(fp)
   98604:	10801158 	cmpnei	r2,r2,69
   98608:	1000031e 	bne	r2,zero,98618 <cvt+0xac>
			ndigits++;
   9860c:	e0bfff17 	ldw	r2,-4(fp)
   98610:	10800044 	addi	r2,r2,1
   98614:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
   98618:	00800084 	movi	r2,2
   9861c:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
   98620:	e0bff904 	addi	r2,fp,-28
   98624:	d8800315 	stw	r2,12(sp)
   98628:	e0bff804 	addi	r2,fp,-32
   9862c:	d8800215 	stw	r2,8(sp)
   98630:	e0800417 	ldw	r2,16(fp)
   98634:	d8800115 	stw	r2,4(sp)
   98638:	e0bfff17 	ldw	r2,-4(fp)
   9863c:	d8800015 	stw	r2,0(sp)
   98640:	e1fff517 	ldw	r7,-44(fp)
   98644:	e17ffd17 	ldw	r5,-12(fp)
   98648:	e1bffe17 	ldw	r6,-8(fp)
   9864c:	e13ffc17 	ldw	r4,-16(fp)
   98650:	008d9480 	call	8d948 <_dtoa_r>
   98654:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
   98658:	e0800517 	ldw	r2,20(fp)
   9865c:	108019e0 	cmpeqi	r2,r2,103
   98660:	1000031e 	bne	r2,zero,98670 <cvt+0x104>
   98664:	e0800517 	ldw	r2,20(fp)
   98668:	108011d8 	cmpnei	r2,r2,71
   9866c:	1000031e 	bne	r2,zero,9867c <cvt+0x110>
   98670:	e0800217 	ldw	r2,8(fp)
   98674:	1080004c 	andi	r2,r2,1
   98678:	10003326 	beq	r2,zero,98748 <cvt+0x1dc>
		bp = digits + ndigits;
   9867c:	e0bfff17 	ldw	r2,-4(fp)
   98680:	e0fff717 	ldw	r3,-36(fp)
   98684:	1885883a 	add	r2,r3,r2
   98688:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
   9868c:	e0800517 	ldw	r2,20(fp)
   98690:	108019a0 	cmpeqi	r2,r2,102
   98694:	1000031e 	bne	r2,zero,986a4 <cvt+0x138>
   98698:	e0800517 	ldw	r2,20(fp)
   9869c:	10801198 	cmpnei	r2,r2,70
   986a0:	1000181e 	bne	r2,zero,98704 <cvt+0x198>
			if (*digits == '0' && value)
   986a4:	e0bff717 	ldw	r2,-36(fp)
   986a8:	10800003 	ldbu	r2,0(r2)
   986ac:	10803fcc 	andi	r2,r2,255
   986b0:	1080201c 	xori	r2,r2,128
   986b4:	10bfe004 	addi	r2,r2,-128
   986b8:	10800c18 	cmpnei	r2,r2,48
   986bc:	10000b1e 	bne	r2,zero,986ec <cvt+0x180>
   986c0:	000d883a 	mov	r6,zero
   986c4:	000f883a 	mov	r7,zero
   986c8:	e13ffd17 	ldw	r4,-12(fp)
   986cc:	e17ffe17 	ldw	r5,-8(fp)
   986d0:	009dde80 	call	9dde8 <__eqdf2>
   986d4:	10000526 	beq	r2,zero,986ec <cvt+0x180>
				*decpt = -ndigits + 1;
   986d8:	00c00044 	movi	r3,1
   986dc:	e0bfff17 	ldw	r2,-4(fp)
   986e0:	1887c83a 	sub	r3,r3,r2
   986e4:	e0800417 	ldw	r2,16(fp)
   986e8:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
   986ec:	e0800417 	ldw	r2,16(fp)
   986f0:	10800017 	ldw	r2,0(r2)
   986f4:	1007883a 	mov	r3,r2
   986f8:	e0bff617 	ldw	r2,-40(fp)
   986fc:	10c5883a 	add	r2,r2,r3
   98700:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
   98704:	000d883a 	mov	r6,zero
   98708:	000f883a 	mov	r7,zero
   9870c:	e13ffd17 	ldw	r4,-12(fp)
   98710:	e17ffe17 	ldw	r5,-8(fp)
   98714:	009dde80 	call	9dde8 <__eqdf2>
   98718:	1000081e 	bne	r2,zero,9873c <cvt+0x1d0>
			rve = bp;
   9871c:	e0bff617 	ldw	r2,-40(fp)
   98720:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
   98724:	00000506 	br	9873c <cvt+0x1d0>
			*rve++ = '0';
   98728:	e0bff917 	ldw	r2,-28(fp)
   9872c:	10c00044 	addi	r3,r2,1
   98730:	e0fff915 	stw	r3,-28(fp)
   98734:	00c00c04 	movi	r3,48
   98738:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
   9873c:	e0fff917 	ldw	r3,-28(fp)
   98740:	e0bff617 	ldw	r2,-40(fp)
   98744:	18bff836 	bltu	r3,r2,98728 <__alt_data_end+0xfffe6728>
			*rve++ = '0';
	}
	*length = rve - digits;
   98748:	e0bff917 	ldw	r2,-28(fp)
   9874c:	1007883a 	mov	r3,r2
   98750:	e0bff717 	ldw	r2,-36(fp)
   98754:	1887c83a 	sub	r3,r3,r2
   98758:	e0800617 	ldw	r2,24(fp)
   9875c:	10c00015 	stw	r3,0(r2)
	return (digits);
   98760:	e0bff717 	ldw	r2,-36(fp)
}
   98764:	e037883a 	mov	sp,fp
   98768:	dfc00117 	ldw	ra,4(sp)
   9876c:	df000017 	ldw	fp,0(sp)
   98770:	dec00204 	addi	sp,sp,8
   98774:	f800283a 	ret

00098778 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
   98778:	defff704 	addi	sp,sp,-36
   9877c:	dfc00815 	stw	ra,32(sp)
   98780:	df000715 	stw	fp,28(sp)
   98784:	dc400615 	stw	r17,24(sp)
   98788:	dc000515 	stw	r16,20(sp)
   9878c:	df000704 	addi	fp,sp,28
   98790:	e13ffb15 	stw	r4,-20(fp)
   98794:	e17ffc15 	stw	r5,-16(fp)
   98798:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
   9879c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
   987a0:	8805883a 	mov	r2,r17
   987a4:	14400044 	addi	r17,r2,1
   987a8:	e0fffd17 	ldw	r3,-12(fp)
   987ac:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
   987b0:	e0bffc17 	ldw	r2,-16(fp)
   987b4:	1000080e 	bge	r2,zero,987d8 <exponent+0x60>
		exp = -exp;
   987b8:	e0bffc17 	ldw	r2,-16(fp)
   987bc:	0085c83a 	sub	r2,zero,r2
   987c0:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
   987c4:	8805883a 	mov	r2,r17
   987c8:	14400044 	addi	r17,r2,1
   987cc:	00c00b44 	movi	r3,45
   987d0:	10c00005 	stb	r3,0(r2)
   987d4:	00000406 	br	987e8 <exponent+0x70>
	}
	else
		*p++ = '+';
   987d8:	8805883a 	mov	r2,r17
   987dc:	14400044 	addi	r17,r2,1
   987e0:	00c00ac4 	movi	r3,43
   987e4:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
   987e8:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
   987ec:	e0bffc17 	ldw	r2,-16(fp)
   987f0:	10800290 	cmplti	r2,r2,10
   987f4:	10001d1e 	bne	r2,zero,9886c <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
   987f8:	843fffc4 	addi	r16,r16,-1
   987fc:	e0bffc17 	ldw	r2,-16(fp)
   98800:	01400284 	movi	r5,10
   98804:	1009883a 	mov	r4,r2
   98808:	00822700 	call	82270 <__modsi3>
   9880c:	10800c04 	addi	r2,r2,48
   98810:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
   98814:	e0bffc17 	ldw	r2,-16(fp)
   98818:	01400284 	movi	r5,10
   9881c:	1009883a 	mov	r4,r2
   98820:	00821ec0 	call	821ec <__divsi3>
   98824:	e0bffc15 	stw	r2,-16(fp)
   98828:	e0bffc17 	ldw	r2,-16(fp)
   9882c:	10800288 	cmpgei	r2,r2,10
   98830:	103ff11e 	bne	r2,zero,987f8 <__alt_data_end+0xfffe67f8>
		*--t = to_char (exp);
   98834:	843fffc4 	addi	r16,r16,-1
   98838:	e0bffc17 	ldw	r2,-16(fp)
   9883c:	10800c04 	addi	r2,r2,48
   98840:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
   98844:	00000606 	br	98860 <exponent+0xe8>
   98848:	8805883a 	mov	r2,r17
   9884c:	14400044 	addi	r17,r2,1
   98850:	8007883a 	mov	r3,r16
   98854:	1c000044 	addi	r16,r3,1
   98858:	18c00003 	ldbu	r3,0(r3)
   9885c:	10c00005 	stb	r3,0(r2)
   98860:	e0bffac4 	addi	r2,fp,-21
   98864:	80bff836 	bltu	r16,r2,98848 <__alt_data_end+0xfffe6848>
   98868:	00000906 	br	98890 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
   9886c:	8805883a 	mov	r2,r17
   98870:	14400044 	addi	r17,r2,1
   98874:	00c00c04 	movi	r3,48
   98878:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
   9887c:	8805883a 	mov	r2,r17
   98880:	14400044 	addi	r17,r2,1
   98884:	e0fffc17 	ldw	r3,-16(fp)
   98888:	18c00c04 	addi	r3,r3,48
   9888c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
   98890:	8807883a 	mov	r3,r17
   98894:	e0bffb17 	ldw	r2,-20(fp)
   98898:	1885c83a 	sub	r2,r3,r2
}
   9889c:	e6fffe04 	addi	sp,fp,-8
   988a0:	dfc00317 	ldw	ra,12(sp)
   988a4:	df000217 	ldw	fp,8(sp)
   988a8:	dc400117 	ldw	r17,4(sp)
   988ac:	dc000017 	ldw	r16,0(sp)
   988b0:	dec00404 	addi	sp,sp,16
   988b4:	f800283a 	ret

000988b8 <__submore>:
/*static*/
int
_DEFUN(__submore, (rptr, fp),
       struct _reent *rptr _AND
       register FILE *fp)
{
   988b8:	defffa04 	addi	sp,sp,-24
   988bc:	dfc00515 	stw	ra,20(sp)
   988c0:	df000415 	stw	fp,16(sp)
   988c4:	dc800315 	stw	r18,12(sp)
   988c8:	dc400215 	stw	r17,8(sp)
   988cc:	dc000115 	stw	r16,4(sp)
   988d0:	df000404 	addi	fp,sp,16
   988d4:	e13ffc15 	stw	r4,-16(fp)
   988d8:	2821883a 	mov	r16,r5
  register int i;
  register unsigned char *p;

  if (fp->_ub._base == fp->_ubuf)
   988dc:	80c00c17 	ldw	r3,48(r16)
   988e0:	80801004 	addi	r2,r16,64
   988e4:	1880181e 	bne	r3,r2,98948 <__submore+0x90>
    {
      /*
       * Get a new buffer (rather than expanding the old one).
       */
      if ((p = (unsigned char *) _malloc_r (rptr, (size_t) BUFSIZ)) == NULL)
   988e8:	01410004 	movi	r5,1024
   988ec:	e13ffc17 	ldw	r4,-16(fp)
   988f0:	00874a40 	call	874a4 <_malloc_r>
   988f4:	1025883a 	mov	r18,r2
   988f8:	9000021e 	bne	r18,zero,98904 <__submore+0x4c>
	return EOF;
   988fc:	00bfffc4 	movi	r2,-1
   98900:	00002a06 	br	989ac <__submore+0xf4>
      fp->_ub._base = p;
   98904:	84800c15 	stw	r18,48(r16)
      fp->_ub._size = BUFSIZ;
   98908:	00810004 	movi	r2,1024
   9890c:	80800d15 	stw	r2,52(r16)
      p += BUFSIZ - sizeof (fp->_ubuf);
   98910:	9480ff44 	addi	r18,r18,1021
      for (i = sizeof (fp->_ubuf); --i >= 0;)
   98914:	044000c4 	movi	r17,3
   98918:	00000606 	br	98934 <__submore+0x7c>
	p[i] = fp->_ubuf[i];
   9891c:	8805883a 	mov	r2,r17
   98920:	9085883a 	add	r2,r18,r2
   98924:	8447883a 	add	r3,r16,r17
   98928:	18c01004 	addi	r3,r3,64
   9892c:	18c00003 	ldbu	r3,0(r3)
   98930:	10c00005 	stb	r3,0(r2)
      if ((p = (unsigned char *) _malloc_r (rptr, (size_t) BUFSIZ)) == NULL)
	return EOF;
      fp->_ub._base = p;
      fp->_ub._size = BUFSIZ;
      p += BUFSIZ - sizeof (fp->_ubuf);
      for (i = sizeof (fp->_ubuf); --i >= 0;)
   98934:	8c7fffc4 	addi	r17,r17,-1
   98938:	883ff80e 	bge	r17,zero,9891c <__alt_data_end+0xfffe691c>
	p[i] = fp->_ubuf[i];
      fp->_p = p;
   9893c:	84800015 	stw	r18,0(r16)
      return 0;
   98940:	0005883a 	mov	r2,zero
   98944:	00001906 	br	989ac <__submore+0xf4>
    }
  i = fp->_ub._size;
   98948:	84400d17 	ldw	r17,52(r16)
  p = (unsigned char *) _realloc_r (rptr, (_PTR) (fp->_ub._base), i << 1);
   9894c:	80800c17 	ldw	r2,48(r16)
   98950:	8c47883a 	add	r3,r17,r17
   98954:	180d883a 	mov	r6,r3
   98958:	100b883a 	mov	r5,r2
   9895c:	e13ffc17 	ldw	r4,-16(fp)
   98960:	009254c0 	call	9254c <_realloc_r>
   98964:	1025883a 	mov	r18,r2
  if (p == NULL)
   98968:	9000021e 	bne	r18,zero,98974 <__submore+0xbc>
    return EOF;
   9896c:	00bfffc4 	movi	r2,-1
   98970:	00000e06 	br	989ac <__submore+0xf4>
  _CAST_VOID memcpy ((_PTR) (p + i), (_PTR) p, (size_t) i);
   98974:	8805883a 	mov	r2,r17
   98978:	9085883a 	add	r2,r18,r2
   9897c:	8807883a 	mov	r3,r17
   98980:	180d883a 	mov	r6,r3
   98984:	900b883a 	mov	r5,r18
   98988:	1009883a 	mov	r4,r2
   9898c:	009069c0 	call	9069c <memcpy>
  fp->_p = p + i;
   98990:	8805883a 	mov	r2,r17
   98994:	9085883a 	add	r2,r18,r2
   98998:	80800015 	stw	r2,0(r16)
  fp->_ub._base = p;
   9899c:	84800c15 	stw	r18,48(r16)
  fp->_ub._size = i << 1;
   989a0:	8c45883a 	add	r2,r17,r17
   989a4:	80800d15 	stw	r2,52(r16)
  return 0;
   989a8:	0005883a 	mov	r2,zero
}
   989ac:	e6fffd04 	addi	sp,fp,-12
   989b0:	dfc00417 	ldw	ra,16(sp)
   989b4:	df000317 	ldw	fp,12(sp)
   989b8:	dc800217 	ldw	r18,8(sp)
   989bc:	dc400117 	ldw	r17,4(sp)
   989c0:	dc000017 	ldw	r16,0(sp)
   989c4:	dec00504 	addi	sp,sp,20
   989c8:	f800283a 	ret

000989cc <_ungetc_r>:
int
_DEFUN(_ungetc_r, (rptr, c, fp),
       struct _reent *rptr _AND
       int c               _AND
       register FILE *fp)
{
   989cc:	defffa04 	addi	sp,sp,-24
   989d0:	dfc00515 	stw	ra,20(sp)
   989d4:	df000415 	stw	fp,16(sp)
   989d8:	dc000315 	stw	r16,12(sp)
   989dc:	df000404 	addi	fp,sp,16
   989e0:	e13ffd15 	stw	r4,-12(fp)
   989e4:	e17ffe15 	stw	r5,-8(fp)
   989e8:	3021883a 	mov	r16,r6
  if (c == EOF)
   989ec:	e0bffe17 	ldw	r2,-8(fp)
   989f0:	10bfffd8 	cmpnei	r2,r2,-1
   989f4:	1000021e 	bne	r2,zero,98a00 <_ungetc_r+0x34>
    return (EOF);
   989f8:	00bfffc4 	movi	r2,-1
   989fc:	00007006 	br	98bc0 <_ungetc_r+0x1f4>

  /* Ensure stdio has been initialized.
     ??? Might be able to remove this as some other stdio routine should
     have already been called to get the char we are un-getting.  */

  CHECK_INIT (rptr, fp);
   98a00:	e0bffd17 	ldw	r2,-12(fp)
   98a04:	e0bffc15 	stw	r2,-16(fp)
   98a08:	e0bffc17 	ldw	r2,-16(fp)
   98a0c:	10000526 	beq	r2,zero,98a24 <_ungetc_r+0x58>
   98a10:	e0bffc17 	ldw	r2,-16(fp)
   98a14:	10800e17 	ldw	r2,56(r2)
   98a18:	1000021e 	bne	r2,zero,98a24 <_ungetc_r+0x58>
   98a1c:	e13ffc17 	ldw	r4,-16(fp)
   98a20:	008573c0 	call	8573c <__sinit>

  _newlib_flockfile_start (fp);

  ORIENT (fp, -1);
   98a24:	8080030b 	ldhu	r2,12(r16)
   98a28:	10bfffcc 	andi	r2,r2,65535
   98a2c:	1088000c 	andi	r2,r2,8192
   98a30:	1000071e 	bne	r2,zero,98a50 <_ungetc_r+0x84>
   98a34:	8080030b 	ldhu	r2,12(r16)
   98a38:	10880014 	ori	r2,r2,8192
   98a3c:	8080030d 	sth	r2,12(r16)
   98a40:	80c01917 	ldw	r3,100(r16)
   98a44:	00b7ffc4 	movi	r2,-8193
   98a48:	1884703a 	and	r2,r3,r2
   98a4c:	80801915 	stw	r2,100(r16)

  /* After ungetc, we won't be at eof anymore */
  fp->_flags &= ~__SEOF;
   98a50:	80c0030b 	ldhu	r3,12(r16)
   98a54:	00bff7c4 	movi	r2,-33
   98a58:	1884703a 	and	r2,r3,r2
   98a5c:	8080030d 	sth	r2,12(r16)

  if ((fp->_flags & __SRD) == 0)
   98a60:	8080030b 	ldhu	r2,12(r16)
   98a64:	10bfffcc 	andi	r2,r2,65535
   98a68:	1080010c 	andi	r2,r2,4
   98a6c:	1000191e 	bne	r2,zero,98ad4 <_ungetc_r+0x108>
    {
      /*
       * Not already reading: no good unless reading-and-writing.
       * Otherwise, flush any current write stuff.
       */
      if ((fp->_flags & __SRW) == 0)
   98a70:	8080030b 	ldhu	r2,12(r16)
   98a74:	10bfffcc 	andi	r2,r2,65535
   98a78:	1080040c 	andi	r2,r2,16
   98a7c:	1000021e 	bne	r2,zero,98a88 <_ungetc_r+0xbc>
        {
          _newlib_flockfile_exit (fp);
          return EOF;
   98a80:	00bfffc4 	movi	r2,-1
   98a84:	00004e06 	br	98bc0 <_ungetc_r+0x1f4>
        }
      if (fp->_flags & __SWR)
   98a88:	8080030b 	ldhu	r2,12(r16)
   98a8c:	10bfffcc 	andi	r2,r2,65535
   98a90:	1080020c 	andi	r2,r2,8
   98a94:	10000c26 	beq	r2,zero,98ac8 <_ungetc_r+0xfc>
	{
	  if (_fflush_r (rptr, fp))
   98a98:	800b883a 	mov	r5,r16
   98a9c:	e13ffd17 	ldw	r4,-12(fp)
   98aa0:	00852a40 	call	852a4 <_fflush_r>
   98aa4:	10000226 	beq	r2,zero,98ab0 <_ungetc_r+0xe4>
            {
              _newlib_flockfile_exit (fp);
              return EOF;
   98aa8:	00bfffc4 	movi	r2,-1
   98aac:	00004406 	br	98bc0 <_ungetc_r+0x1f4>
            }
	  fp->_flags &= ~__SWR;
   98ab0:	80c0030b 	ldhu	r3,12(r16)
   98ab4:	00bffdc4 	movi	r2,-9
   98ab8:	1884703a 	and	r2,r3,r2
   98abc:	8080030d 	sth	r2,12(r16)
	  fp->_w = 0;
   98ac0:	80000215 	stw	zero,8(r16)
	  fp->_lbfsize = 0;
   98ac4:	80000615 	stw	zero,24(r16)
	}
      fp->_flags |= __SRD;
   98ac8:	8080030b 	ldhu	r2,12(r16)
   98acc:	10800114 	ori	r2,r2,4
   98ad0:	8080030d 	sth	r2,12(r16)
    }
  c = (unsigned char) c;
   98ad4:	e0bffe17 	ldw	r2,-8(fp)
   98ad8:	10803fcc 	andi	r2,r2,255
   98adc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * If we are in the middle of ungetc'ing, just continue.
   * This may require expanding the current ungetc buffer.
   */

  if (HASUB (fp))
   98ae0:	80800c17 	ldw	r2,48(r16)
   98ae4:	10001426 	beq	r2,zero,98b38 <_ungetc_r+0x16c>
    {
      if (fp->_r >= fp->_ub._size && __submore (rptr, fp))
   98ae8:	80c00117 	ldw	r3,4(r16)
   98aec:	80800d17 	ldw	r2,52(r16)
   98af0:	18800616 	blt	r3,r2,98b0c <_ungetc_r+0x140>
   98af4:	800b883a 	mov	r5,r16
   98af8:	e13ffd17 	ldw	r4,-12(fp)
   98afc:	00988b80 	call	988b8 <__submore>
   98b00:	10000226 	beq	r2,zero,98b0c <_ungetc_r+0x140>
        {
          _newlib_flockfile_exit (fp);
          return EOF;
   98b04:	00bfffc4 	movi	r2,-1
   98b08:	00002d06 	br	98bc0 <_ungetc_r+0x1f4>
        }
      *--fp->_p = c;
   98b0c:	80800017 	ldw	r2,0(r16)
   98b10:	10bfffc4 	addi	r2,r2,-1
   98b14:	80800015 	stw	r2,0(r16)
   98b18:	80800017 	ldw	r2,0(r16)
   98b1c:	e0fffe17 	ldw	r3,-8(fp)
   98b20:	10c00005 	stb	r3,0(r2)
      fp->_r++;
   98b24:	80800117 	ldw	r2,4(r16)
   98b28:	10800044 	addi	r2,r2,1
   98b2c:	80800115 	stw	r2,4(r16)
      _newlib_flockfile_exit (fp);
      return c;
   98b30:	e0bffe17 	ldw	r2,-8(fp)
   98b34:	00002206 	br	98bc0 <_ungetc_r+0x1f4>
   * If we can handle this by simply backing up, do so,
   * but never replace the original character.
   * (This makes sscanf() work when scanning `const' data.)
   */

  if (fp->_bf._base != NULL && fp->_p > fp->_bf._base && fp->_p[-1] == c)
   98b38:	80800417 	ldw	r2,16(r16)
   98b3c:	10001126 	beq	r2,zero,98b84 <_ungetc_r+0x1b8>
   98b40:	80800017 	ldw	r2,0(r16)
   98b44:	80c00417 	ldw	r3,16(r16)
   98b48:	18800e2e 	bgeu	r3,r2,98b84 <_ungetc_r+0x1b8>
   98b4c:	80800017 	ldw	r2,0(r16)
   98b50:	10bfffc4 	addi	r2,r2,-1
   98b54:	10800003 	ldbu	r2,0(r2)
   98b58:	10c03fcc 	andi	r3,r2,255
   98b5c:	e0bffe17 	ldw	r2,-8(fp)
   98b60:	1880081e 	bne	r3,r2,98b84 <_ungetc_r+0x1b8>
    {
      fp->_p--;
   98b64:	80800017 	ldw	r2,0(r16)
   98b68:	10bfffc4 	addi	r2,r2,-1
   98b6c:	80800015 	stw	r2,0(r16)
      fp->_r++;
   98b70:	80800117 	ldw	r2,4(r16)
   98b74:	10800044 	addi	r2,r2,1
   98b78:	80800115 	stw	r2,4(r16)
      _newlib_flockfile_exit (fp);
      return c;
   98b7c:	e0bffe17 	ldw	r2,-8(fp)
   98b80:	00000f06 	br	98bc0 <_ungetc_r+0x1f4>
  /*
   * Create an ungetc buffer.
   * Initially, we will use the `reserve' buffer.
   */

  fp->_ur = fp->_r;
   98b84:	80800117 	ldw	r2,4(r16)
   98b88:	80800f15 	stw	r2,60(r16)
  fp->_up = fp->_p;
   98b8c:	80800017 	ldw	r2,0(r16)
   98b90:	80800e15 	stw	r2,56(r16)
  fp->_ub._base = fp->_ubuf;
   98b94:	80801004 	addi	r2,r16,64
   98b98:	80800c15 	stw	r2,48(r16)
  fp->_ub._size = sizeof (fp->_ubuf);
   98b9c:	008000c4 	movi	r2,3
   98ba0:	80800d15 	stw	r2,52(r16)
  fp->_ubuf[sizeof (fp->_ubuf) - 1] = c;
   98ba4:	e0bffe17 	ldw	r2,-8(fp)
   98ba8:	80801085 	stb	r2,66(r16)
  fp->_p = &fp->_ubuf[sizeof (fp->_ubuf) - 1];
   98bac:	80801084 	addi	r2,r16,66
   98bb0:	80800015 	stw	r2,0(r16)
  fp->_r = 1;
   98bb4:	00800044 	movi	r2,1
   98bb8:	80800115 	stw	r2,4(r16)
  _newlib_flockfile_end (fp);
  return c;
   98bbc:	e0bffe17 	ldw	r2,-8(fp)
}
   98bc0:	e6ffff04 	addi	sp,fp,-4
   98bc4:	dfc00217 	ldw	ra,8(sp)
   98bc8:	df000117 	ldw	fp,4(sp)
   98bcc:	dc000017 	ldw	r16,0(sp)
   98bd0:	dec00304 	addi	sp,sp,12
   98bd4:	f800283a 	ret

00098bd8 <ungetc>:
#ifndef _REENT_ONLY
int
_DEFUN(ungetc, (c, fp),
       int c               _AND
       register FILE *fp)
{
   98bd8:	defffd04 	addi	sp,sp,-12
   98bdc:	dfc00215 	stw	ra,8(sp)
   98be0:	df000115 	stw	fp,4(sp)
   98be4:	df000104 	addi	fp,sp,4
   98be8:	e13fff15 	stw	r4,-4(fp)
   98bec:	2807883a 	mov	r3,r5
  return _ungetc_r (_REENT, c, fp);
   98bf0:	d0a00417 	ldw	r2,-32752(gp)
   98bf4:	180d883a 	mov	r6,r3
   98bf8:	e17fff17 	ldw	r5,-4(fp)
   98bfc:	1009883a 	mov	r4,r2
   98c00:	00989cc0 	call	989cc <_ungetc_r>
}
   98c04:	e037883a 	mov	sp,fp
   98c08:	dfc00117 	ldw	ra,4(sp)
   98c0c:	df000017 	ldw	fp,0(sp)
   98c10:	dec00204 	addi	sp,sp,8
   98c14:	f800283a 	ret

00098c18 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
   98c18:	defff604 	addi	sp,sp,-40
   98c1c:	dfc00915 	stw	ra,36(sp)
   98c20:	df000815 	stw	fp,32(sp)
   98c24:	dc400715 	stw	r17,28(sp)
   98c28:	dc000615 	stw	r16,24(sp)
   98c2c:	df000804 	addi	fp,sp,32
   98c30:	e13ffc15 	stw	r4,-16(fp)
   98c34:	e17ffd15 	stw	r5,-12(fp)
   98c38:	3021883a 	mov	r16,r6
	register int err = 0;
   98c3c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
   98c40:	80800217 	ldw	r2,8(r16)
   98c44:	1000031e 	bne	r2,zero,98c54 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
   98c48:	80000115 	stw	zero,4(r16)
		return (0);
   98c4c:	0005883a 	mov	r2,zero
   98c50:	00003906 	br	98d38 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
   98c54:	e0bffd17 	ldw	r2,-12(fp)
   98c58:	10801917 	ldw	r2,100(r2)
   98c5c:	1088000c 	andi	r2,r2,8192
   98c60:	10002d26 	beq	r2,zero,98d18 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
   98c64:	80800017 	ldw	r2,0(r16)
   98c68:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
   98c6c:	00002706 	br	98d0c <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
   98c70:	e0bff817 	ldw	r2,-32(fp)
   98c74:	10800017 	ldw	r2,0(r2)
   98c78:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
   98c7c:	e0bff817 	ldw	r2,-32(fp)
   98c80:	10800117 	ldw	r2,4(r2)
   98c84:	1004d0ba 	srli	r2,r2,2
   98c88:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
   98c8c:	e03ff915 	stw	zero,-28(fp)
   98c90:	00001206 	br	98cdc <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
   98c94:	e0bff917 	ldw	r2,-28(fp)
   98c98:	1085883a 	add	r2,r2,r2
   98c9c:	1085883a 	add	r2,r2,r2
   98ca0:	1007883a 	mov	r3,r2
   98ca4:	e0bffa17 	ldw	r2,-24(fp)
   98ca8:	10c5883a 	add	r2,r2,r3
   98cac:	10800017 	ldw	r2,0(r2)
   98cb0:	e1bffd17 	ldw	r6,-12(fp)
   98cb4:	100b883a 	mov	r5,r2
   98cb8:	e13ffc17 	ldw	r4,-16(fp)
   98cbc:	009a4c80 	call	9a4c8 <_fputwc_r>
   98cc0:	10bfffd8 	cmpnei	r2,r2,-1
   98cc4:	1000021e 	bne	r2,zero,98cd0 <__sprint_r+0xb8>
					err = -1;
   98cc8:	047fffc4 	movi	r17,-1
					goto out;
   98ccc:	00001706 	br	98d2c <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
   98cd0:	e0bff917 	ldw	r2,-28(fp)
   98cd4:	10800044 	addi	r2,r2,1
   98cd8:	e0bff915 	stw	r2,-28(fp)
   98cdc:	e0fff917 	ldw	r3,-28(fp)
   98ce0:	e0bffb17 	ldw	r2,-20(fp)
   98ce4:	18bfeb16 	blt	r3,r2,98c94 <__alt_data_end+0xfffe6c94>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
   98ce8:	80c00217 	ldw	r3,8(r16)
   98cec:	e0bffb17 	ldw	r2,-20(fp)
   98cf0:	1085883a 	add	r2,r2,r2
   98cf4:	1085883a 	add	r2,r2,r2
   98cf8:	1885c83a 	sub	r2,r3,r2
   98cfc:	80800215 	stw	r2,8(r16)
   98d00:	e0bff817 	ldw	r2,-32(fp)
   98d04:	10800204 	addi	r2,r2,8
   98d08:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
   98d0c:	80800217 	ldw	r2,8(r16)
   98d10:	103fd71e 	bne	r2,zero,98c70 <__alt_data_end+0xfffe6c70>
   98d14:	00000506 	br	98d2c <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
   98d18:	800d883a 	mov	r6,r16
   98d1c:	e17ffd17 	ldw	r5,-12(fp)
   98d20:	e13ffc17 	ldw	r4,-16(fp)
   98d24:	008f9780 	call	8f978 <__sfvwrite_r>
   98d28:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
   98d2c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
   98d30:	80000115 	stw	zero,4(r16)
	return (err);
   98d34:	8805883a 	mov	r2,r17
}
   98d38:	e6fffe04 	addi	sp,fp,-8
   98d3c:	dfc00317 	ldw	ra,12(sp)
   98d40:	df000217 	ldw	fp,8(sp)
   98d44:	dc400117 	ldw	r17,4(sp)
   98d48:	dc000017 	ldw	r16,0(sp)
   98d4c:	dec00404 	addi	sp,sp,16
   98d50:	f800283a 	ret

00098d54 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   98d54:	defedf04 	addi	sp,sp,-1156
   98d58:	dfc12015 	stw	ra,1152(sp)
   98d5c:	df011f15 	stw	fp,1148(sp)
   98d60:	dc011e15 	stw	r16,1144(sp)
   98d64:	df011f04 	addi	fp,sp,1148
   98d68:	e13ffc15 	stw	r4,-16(fp)
   98d6c:	2821883a 	mov	r16,r5
   98d70:	e1bffd15 	stw	r6,-12(fp)
   98d74:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   98d78:	80c0030b 	ldhu	r3,12(r16)
   98d7c:	00bfff44 	movi	r2,-3
   98d80:	1884703a 	and	r2,r3,r2
   98d84:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   98d88:	80801917 	ldw	r2,100(r16)
   98d8c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   98d90:	8080038b 	ldhu	r2,14(r16)
   98d94:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   98d98:	80800717 	ldw	r2,28(r16)
   98d9c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   98da0:	80800917 	ldw	r2,36(r16)
   98da4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   98da8:	e0befc04 	addi	r2,fp,-1040
   98dac:	e0bee215 	stw	r2,-1144(fp)
   98db0:	e0bee217 	ldw	r2,-1144(fp)
   98db4:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   98db8:	00810004 	movi	r2,1024
   98dbc:	e0bee415 	stw	r2,-1136(fp)
   98dc0:	e0bee417 	ldw	r2,-1136(fp)
   98dc4:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   98dc8:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   98dcc:	e0bee204 	addi	r2,fp,-1144
   98dd0:	e1fffe17 	ldw	r7,-8(fp)
   98dd4:	e1bffd17 	ldw	r6,-12(fp)
   98dd8:	100b883a 	mov	r5,r2
   98ddc:	e13ffc17 	ldw	r4,-16(fp)
   98de0:	0098e940 	call	98e94 <___vfiprintf_internal_r>
   98de4:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   98de8:	e0bee117 	ldw	r2,-1148(fp)
   98dec:	10000716 	blt	r2,zero,98e0c <__sbprintf+0xb8>
   98df0:	e0bee204 	addi	r2,fp,-1144
   98df4:	100b883a 	mov	r5,r2
   98df8:	e13ffc17 	ldw	r4,-16(fp)
   98dfc:	00852a40 	call	852a4 <_fflush_r>
   98e00:	10000226 	beq	r2,zero,98e0c <__sbprintf+0xb8>
		ret = EOF;
   98e04:	00bfffc4 	movi	r2,-1
   98e08:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   98e0c:	e0bee50b 	ldhu	r2,-1132(fp)
   98e10:	10bfffcc 	andi	r2,r2,65535
   98e14:	1080100c 	andi	r2,r2,64
   98e18:	10000326 	beq	r2,zero,98e28 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   98e1c:	8080030b 	ldhu	r2,12(r16)
   98e20:	10801014 	ori	r2,r2,64
   98e24:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   98e28:	e0bee117 	ldw	r2,-1148(fp)
}
   98e2c:	e6ffff04 	addi	sp,fp,-4
   98e30:	dfc00217 	ldw	ra,8(sp)
   98e34:	df000117 	ldw	fp,4(sp)
   98e38:	dc000017 	ldw	r16,0(sp)
   98e3c:	dec00304 	addi	sp,sp,12
   98e40:	f800283a 	ret

00098e44 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   98e44:	defffa04 	addi	sp,sp,-24
   98e48:	dfc00515 	stw	ra,20(sp)
   98e4c:	df000415 	stw	fp,16(sp)
   98e50:	df000404 	addi	fp,sp,16
   98e54:	e13ffd15 	stw	r4,-12(fp)
   98e58:	e17ffe15 	stw	r5,-8(fp)
   98e5c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   98e60:	d0a00417 	ldw	r2,-32752(gp)
   98e64:	e1ffff17 	ldw	r7,-4(fp)
   98e68:	e1bffe17 	ldw	r6,-8(fp)
   98e6c:	e17ffd17 	ldw	r5,-12(fp)
   98e70:	1009883a 	mov	r4,r2
   98e74:	0098e940 	call	98e94 <___vfiprintf_internal_r>
   98e78:	e0bffc15 	stw	r2,-16(fp)
  return result;
   98e7c:	e0bffc17 	ldw	r2,-16(fp)
}
   98e80:	e037883a 	mov	sp,fp
   98e84:	dfc00117 	ldw	ra,4(sp)
   98e88:	df000017 	ldw	fp,0(sp)
   98e8c:	dec00204 	addi	sp,sp,8
   98e90:	f800283a 	ret

00098e94 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   98e94:	deffb704 	addi	sp,sp,-292
   98e98:	dfc04815 	stw	ra,288(sp)
   98e9c:	df004715 	stw	fp,284(sp)
   98ea0:	ddc04615 	stw	r23,280(sp)
   98ea4:	dd804515 	stw	r22,276(sp)
   98ea8:	dd404415 	stw	r21,272(sp)
   98eac:	dd004315 	stw	r20,268(sp)
   98eb0:	dcc04215 	stw	r19,264(sp)
   98eb4:	dc804115 	stw	r18,260(sp)
   98eb8:	dc404015 	stw	r17,256(sp)
   98ebc:	dc003f15 	stw	r16,252(sp)
   98ec0:	df004704 	addi	fp,sp,284
   98ec4:	e13fe615 	stw	r4,-104(fp)
   98ec8:	e17fe715 	stw	r5,-100(fp)
   98ecc:	e1bfe815 	stw	r6,-96(fp)
   98ed0:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   98ed4:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   98ed8:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   98edc:	e0bfe617 	ldw	r2,-104(fp)
   98ee0:	e0bfc415 	stw	r2,-240(fp)
   98ee4:	e0bfc417 	ldw	r2,-240(fp)
   98ee8:	10000526 	beq	r2,zero,98f00 <___vfiprintf_internal_r+0x6c>
   98eec:	e0bfc417 	ldw	r2,-240(fp)
   98ef0:	10800e17 	ldw	r2,56(r2)
   98ef4:	1000021e 	bne	r2,zero,98f00 <___vfiprintf_internal_r+0x6c>
   98ef8:	e13fc417 	ldw	r4,-240(fp)
   98efc:	008573c0 	call	8573c <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   98f00:	e0bfe717 	ldw	r2,-100(fp)
   98f04:	1080030b 	ldhu	r2,12(r2)
   98f08:	10bfffcc 	andi	r2,r2,65535
   98f0c:	1088000c 	andi	r2,r2,8192
   98f10:	10000c1e 	bne	r2,zero,98f44 <___vfiprintf_internal_r+0xb0>
   98f14:	e0bfe717 	ldw	r2,-100(fp)
   98f18:	1080030b 	ldhu	r2,12(r2)
   98f1c:	10880014 	ori	r2,r2,8192
   98f20:	1007883a 	mov	r3,r2
   98f24:	e0bfe717 	ldw	r2,-100(fp)
   98f28:	10c0030d 	sth	r3,12(r2)
   98f2c:	e0bfe717 	ldw	r2,-100(fp)
   98f30:	10c01917 	ldw	r3,100(r2)
   98f34:	00b7ffc4 	movi	r2,-8193
   98f38:	1886703a 	and	r3,r3,r2
   98f3c:	e0bfe717 	ldw	r2,-100(fp)
   98f40:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   98f44:	e0bfe717 	ldw	r2,-100(fp)
   98f48:	1080030b 	ldhu	r2,12(r2)
   98f4c:	10bfffcc 	andi	r2,r2,65535
   98f50:	1080020c 	andi	r2,r2,8
   98f54:	10000326 	beq	r2,zero,98f64 <___vfiprintf_internal_r+0xd0>
   98f58:	e0bfe717 	ldw	r2,-100(fp)
   98f5c:	10800417 	ldw	r2,16(r2)
   98f60:	1000061e 	bne	r2,zero,98f7c <___vfiprintf_internal_r+0xe8>
   98f64:	e17fe717 	ldw	r5,-100(fp)
   98f68:	e13fe617 	ldw	r4,-104(fp)
   98f6c:	008d1980 	call	8d198 <__swsetup_r>
   98f70:	10000226 	beq	r2,zero,98f7c <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
   98f74:	00bfffc4 	movi	r2,-1
   98f78:	00047006 	br	9a13c <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   98f7c:	e0bfe717 	ldw	r2,-100(fp)
   98f80:	1080030b 	ldhu	r2,12(r2)
   98f84:	10bfffcc 	andi	r2,r2,65535
   98f88:	1080068c 	andi	r2,r2,26
   98f8c:	10800298 	cmpnei	r2,r2,10
   98f90:	10000c1e 	bne	r2,zero,98fc4 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
   98f94:	e0bfe717 	ldw	r2,-100(fp)
   98f98:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   98f9c:	10bfffcc 	andi	r2,r2,65535
   98fa0:	10a0001c 	xori	r2,r2,32768
   98fa4:	10a00004 	addi	r2,r2,-32768
   98fa8:	10000616 	blt	r2,zero,98fc4 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   98fac:	e1ffe917 	ldw	r7,-92(fp)
   98fb0:	e1bfe817 	ldw	r6,-96(fp)
   98fb4:	e17fe717 	ldw	r5,-100(fp)
   98fb8:	e13fe617 	ldw	r4,-104(fp)
   98fbc:	0098d540 	call	98d54 <__sbprintf>
   98fc0:	00045e06 	br	9a13c <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   98fc4:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   98fc8:	e4bfcb04 	addi	r18,fp,-212
   98fcc:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
   98fd0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   98fd4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   98fd8:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   98fdc:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   98fe0:	00000106 	br	98fe8 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
   98fe4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   98fe8:	a8800003 	ldbu	r2,0(r21)
   98fec:	10803fcc 	andi	r2,r2,255
   98ff0:	1080201c 	xori	r2,r2,128
   98ff4:	10bfe004 	addi	r2,r2,-128
   98ff8:	10000626 	beq	r2,zero,99014 <___vfiprintf_internal_r+0x180>
   98ffc:	a8800003 	ldbu	r2,0(r21)
   99000:	10803fcc 	andi	r2,r2,255
   99004:	1080201c 	xori	r2,r2,128
   99008:	10bfe004 	addi	r2,r2,-128
   9900c:	10800958 	cmpnei	r2,r2,37
   99010:	103ff41e 	bne	r2,zero,98fe4 <__alt_data_end+0xfffe6fe4>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   99014:	a807883a 	mov	r3,r21
   99018:	a005883a 	mov	r2,r20
   9901c:	18a1c83a 	sub	r16,r3,r2
   99020:	80001826 	beq	r16,zero,99084 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
   99024:	95000015 	stw	r20,0(r18)
   99028:	8005883a 	mov	r2,r16
   9902c:	90800115 	stw	r2,4(r18)
   99030:	e0bfca17 	ldw	r2,-216(fp)
   99034:	8007883a 	mov	r3,r16
   99038:	10c5883a 	add	r2,r2,r3
   9903c:	e0bfca15 	stw	r2,-216(fp)
   99040:	94800204 	addi	r18,r18,8
   99044:	e0bfc917 	ldw	r2,-220(fp)
   99048:	10800044 	addi	r2,r2,1
   9904c:	e0bfc915 	stw	r2,-220(fp)
   99050:	e0bfc917 	ldw	r2,-220(fp)
   99054:	10800210 	cmplti	r2,r2,8
   99058:	1000071e 	bne	r2,zero,99078 <___vfiprintf_internal_r+0x1e4>
   9905c:	e0bfc804 	addi	r2,fp,-224
   99060:	100d883a 	mov	r6,r2
   99064:	e17fe717 	ldw	r5,-100(fp)
   99068:	e13fe617 	ldw	r4,-104(fp)
   9906c:	0098c180 	call	98c18 <__sprint_r>
   99070:	1004091e 	bne	r2,zero,9a098 <___vfiprintf_internal_r+0x1204>
   99074:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
   99078:	e0bfb917 	ldw	r2,-284(fp)
   9907c:	1405883a 	add	r2,r2,r16
   99080:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   99084:	a8800003 	ldbu	r2,0(r21)
   99088:	10803fcc 	andi	r2,r2,255
   9908c:	1080201c 	xori	r2,r2,128
   99090:	10bfe004 	addi	r2,r2,-128
   99094:	1003f226 	beq	r2,zero,9a060 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
   99098:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
   9909c:	ad400044 	addi	r21,r21,1

		flags = 0;
   990a0:	0027883a 	mov	r19,zero
		dprec = 0;
   990a4:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
   990a8:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
   990ac:	00bfffc4 	movi	r2,-1
   990b0:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
   990b4:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   990b8:	a805883a 	mov	r2,r21
   990bc:	15400044 	addi	r21,r2,1
   990c0:	10800003 	ldbu	r2,0(r2)
   990c4:	14403fcc 	andi	r17,r2,255
   990c8:	8c40201c 	xori	r17,r17,128
   990cc:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
   990d0:	88bff804 	addi	r2,r17,-32
   990d4:	10c01668 	cmpgeui	r3,r2,89
   990d8:	18028e1e 	bne	r3,zero,99b14 <___vfiprintf_internal_r+0xc80>
   990dc:	100690ba 	slli	r3,r2,2
   990e0:	008002b4 	movhi	r2,10
   990e4:	10a43d04 	addi	r2,r2,-28428
   990e8:	1885883a 	add	r2,r3,r2
   990ec:	10800017 	ldw	r2,0(r2)
   990f0:	1000683a 	jmp	r2
   990f4:	00099258 	cmpnei	zero,zero,9801
   990f8:	00099b14 	movui	zero,9836
   990fc:	00099b14 	movui	zero,9836
   99100:	00099278 	rdprs	zero,zero,9801
   99104:	00099b14 	movui	zero,9836
   99108:	00099b14 	movui	zero,9836
   9910c:	00099b14 	movui	zero,9836
   99110:	00099b14 	movui	zero,9836
   99114:	00099b14 	movui	zero,9836
   99118:	00099b14 	movui	zero,9836
   9911c:	00099280 	call	9928 <__alt_mem_MemoriaDados+0x9928>
   99120:	000992b4 	movhi	zero,9802
   99124:	00099b14 	movui	zero,9836
   99128:	000992ac 	andhi	zero,zero,9802
   9912c:	000992c0 	call	992c <__alt_mem_MemoriaDados+0x992c>
   99130:	00099b14 	movui	zero,9836
   99134:	00099360 	cmpeqi	zero,zero,9805
   99138:	00099368 	cmpgeui	zero,zero,9805
   9913c:	00099368 	cmpgeui	zero,zero,9805
   99140:	00099368 	cmpgeui	zero,zero,9805
   99144:	00099368 	cmpgeui	zero,zero,9805
   99148:	00099368 	cmpgeui	zero,zero,9805
   9914c:	00099368 	cmpgeui	zero,zero,9805
   99150:	00099368 	cmpgeui	zero,zero,9805
   99154:	00099368 	cmpgeui	zero,zero,9805
   99158:	00099368 	cmpgeui	zero,zero,9805
   9915c:	00099b14 	movui	zero,9836
   99160:	00099b14 	movui	zero,9836
   99164:	00099b14 	movui	zero,9836
   99168:	00099b14 	movui	zero,9836
   9916c:	00099b14 	movui	zero,9836
   99170:	00099b14 	movui	zero,9836
   99174:	00099b14 	movui	zero,9836
   99178:	00099b14 	movui	zero,9836
   9917c:	00099b14 	movui	zero,9836
   99180:	00099b14 	movui	zero,9836
   99184:	00099414 	movui	zero,9808
   99188:	00099b14 	movui	zero,9836
   9918c:	00099b14 	movui	zero,9836
   99190:	00099b14 	movui	zero,9836
   99194:	00099b14 	movui	zero,9836
   99198:	00099b14 	movui	zero,9836
   9919c:	00099b14 	movui	zero,9836
   991a0:	00099b14 	movui	zero,9836
   991a4:	00099b14 	movui	zero,9836
   991a8:	00099b14 	movui	zero,9836
   991ac:	00099b14 	movui	zero,9836
   991b0:	000995b4 	movhi	zero,9814
   991b4:	00099b14 	movui	zero,9836
   991b8:	00099b14 	movui	zero,9836
   991bc:	00099b14 	movui	zero,9836
   991c0:	00099b14 	movui	zero,9836
   991c4:	00099b14 	movui	zero,9836
   991c8:	00099730 	cmpltui	zero,zero,9820
   991cc:	00099b14 	movui	zero,9836
   991d0:	00099b14 	movui	zero,9836
   991d4:	000997f0 	cmpltui	zero,zero,9823
   991d8:	00099b14 	movui	zero,9836
   991dc:	00099b14 	movui	zero,9836
   991e0:	00099b14 	movui	zero,9836
   991e4:	00099b14 	movui	zero,9836
   991e8:	00099b14 	movui	zero,9836
   991ec:	00099b14 	movui	zero,9836
   991f0:	00099b14 	movui	zero,9836
   991f4:	00099b14 	movui	zero,9836
   991f8:	00099b14 	movui	zero,9836
   991fc:	00099b14 	movui	zero,9836
   99200:	000993ec 	andhi	zero,zero,9807
   99204:	00099418 	cmpnei	zero,zero,9808
   99208:	00099b14 	movui	zero,9836
   9920c:	00099b14 	movui	zero,9836
   99210:	00099b14 	movui	zero,9836
   99214:	000993b0 	cmpltui	zero,zero,9806
   99218:	00099418 	cmpnei	zero,zero,9808
   9921c:	00099b14 	movui	zero,9836
   99220:	00099b14 	movui	zero,9836
   99224:	000993b8 	rdprs	zero,zero,9806
   99228:	00099b14 	movui	zero,9836
   9922c:	00099514 	movui	zero,9812
   99230:	000995b8 	rdprs	zero,zero,9814
   99234:	00099658 	cmpnei	zero,zero,9817
   99238:	000993e4 	muli	zero,zero,9807
   9923c:	00099b14 	movui	zero,9836
   99240:	000996a0 	cmpeqi	zero,zero,9818
   99244:	00099b14 	movui	zero,9836
   99248:	00099734 	movhi	zero,9820
   9924c:	00099b14 	movui	zero,9836
   99250:	00099b14 	movui	zero,9836
   99254:	00099800 	call	9980 <__alt_mem_MemoriaDados+0x9980>
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   99258:	e0bfc703 	ldbu	r2,-228(fp)
   9925c:	10803fcc 	andi	r2,r2,255
   99260:	1080201c 	xori	r2,r2,128
   99264:	10bfe004 	addi	r2,r2,-128
   99268:	103f931e 	bne	r2,zero,990b8 <__alt_data_end+0xfffe70b8>
				sign = ' ';
   9926c:	00800804 	movi	r2,32
   99270:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   99274:	003f9006 	br	990b8 <__alt_data_end+0xfffe70b8>
		case '#':
			flags |= ALT;
   99278:	9cc00054 	ori	r19,r19,1
			goto rflag;
   9927c:	003f8e06 	br	990b8 <__alt_data_end+0xfffe70b8>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   99280:	e0bfe917 	ldw	r2,-92(fp)
   99284:	10c00104 	addi	r3,r2,4
   99288:	e0ffe915 	stw	r3,-92(fp)
   9928c:	10800017 	ldw	r2,0(r2)
   99290:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   99294:	e0bfba17 	ldw	r2,-280(fp)
   99298:	10000116 	blt	r2,zero,992a0 <___vfiprintf_internal_r+0x40c>
				goto rflag;
   9929c:	003f8606 	br	990b8 <__alt_data_end+0xfffe70b8>
			width = -width;
   992a0:	e0bfba17 	ldw	r2,-280(fp)
   992a4:	0085c83a 	sub	r2,zero,r2
   992a8:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   992ac:	9cc00114 	ori	r19,r19,4
			goto rflag;
   992b0:	003f8106 	br	990b8 <__alt_data_end+0xfffe70b8>
		case '+':
			sign = '+';
   992b4:	00800ac4 	movi	r2,43
   992b8:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   992bc:	003f7e06 	br	990b8 <__alt_data_end+0xfffe70b8>
		case '.':
			if ((ch = *fmt++) == '*') {
   992c0:	a805883a 	mov	r2,r21
   992c4:	15400044 	addi	r21,r2,1
   992c8:	10800003 	ldbu	r2,0(r2)
   992cc:	14403fcc 	andi	r17,r2,255
   992d0:	8c40201c 	xori	r17,r17,128
   992d4:	8c7fe004 	addi	r17,r17,-128
   992d8:	88800a98 	cmpnei	r2,r17,42
   992dc:	10000a1e 	bne	r2,zero,99308 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   992e0:	e0bfe917 	ldw	r2,-92(fp)
   992e4:	10c00104 	addi	r3,r2,4
   992e8:	e0ffe915 	stw	r3,-92(fp)
   992ec:	10800017 	ldw	r2,0(r2)
   992f0:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   992f4:	e0bfbb17 	ldw	r2,-276(fp)
   992f8:	103f6f0e 	bge	r2,zero,990b8 <__alt_data_end+0xfffe70b8>
					prec = -1;
   992fc:	00bfffc4 	movi	r2,-1
   99300:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
   99304:	003f6c06 	br	990b8 <__alt_data_end+0xfffe70b8>
			}
			n = 0;
   99308:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   9930c:	00000c06 	br	99340 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
   99310:	01400284 	movi	r5,10
   99314:	8009883a 	mov	r4,r16
   99318:	00823a00 	call	823a0 <__mulsi3>
   9931c:	1007883a 	mov	r3,r2
   99320:	88bff404 	addi	r2,r17,-48
   99324:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   99328:	a805883a 	mov	r2,r21
   9932c:	15400044 	addi	r21,r2,1
   99330:	10800003 	ldbu	r2,0(r2)
   99334:	14403fcc 	andi	r17,r2,255
   99338:	8c40201c 	xori	r17,r17,128
   9933c:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   99340:	88bff404 	addi	r2,r17,-48
   99344:	108002b0 	cmpltui	r2,r2,10
   99348:	103ff11e 	bne	r2,zero,99310 <__alt_data_end+0xfffe7310>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   9934c:	8005883a 	mov	r2,r16
   99350:	1000010e 	bge	r2,zero,99358 <___vfiprintf_internal_r+0x4c4>
   99354:	00bfffc4 	movi	r2,-1
   99358:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
   9935c:	003f5c06 	br	990d0 <__alt_data_end+0xfffe70d0>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   99360:	9cc02014 	ori	r19,r19,128
			goto rflag;
   99364:	003f5406 	br	990b8 <__alt_data_end+0xfffe70b8>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   99368:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   9936c:	01400284 	movi	r5,10
   99370:	8009883a 	mov	r4,r16
   99374:	00823a00 	call	823a0 <__mulsi3>
   99378:	1007883a 	mov	r3,r2
   9937c:	88bff404 	addi	r2,r17,-48
   99380:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   99384:	a805883a 	mov	r2,r21
   99388:	15400044 	addi	r21,r2,1
   9938c:	10800003 	ldbu	r2,0(r2)
   99390:	14403fcc 	andi	r17,r2,255
   99394:	8c40201c 	xori	r17,r17,128
   99398:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
   9939c:	88bff404 	addi	r2,r17,-48
   993a0:	108002b0 	cmpltui	r2,r2,10
   993a4:	103ff11e 	bne	r2,zero,9936c <__alt_data_end+0xfffe736c>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   993a8:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
   993ac:	003f4806 	br	990d0 <__alt_data_end+0xfffe70d0>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   993b0:	9cc01014 	ori	r19,r19,64
			goto rflag;
   993b4:	003f4006 	br	990b8 <__alt_data_end+0xfffe70b8>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   993b8:	a8800003 	ldbu	r2,0(r21)
   993bc:	10803fcc 	andi	r2,r2,255
   993c0:	1080201c 	xori	r2,r2,128
   993c4:	10bfe004 	addi	r2,r2,-128
   993c8:	10801b18 	cmpnei	r2,r2,108
   993cc:	1000031e 	bne	r2,zero,993dc <___vfiprintf_internal_r+0x548>
				fmt++;
   993d0:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   993d4:	9cc00814 	ori	r19,r19,32
   993d8:	003f3706 	br	990b8 <__alt_data_end+0xfffe70b8>
			} else
#endif
				flags |= LONGINT;
   993dc:	9cc00414 	ori	r19,r19,16
			goto rflag;
   993e0:	003f3506 	br	990b8 <__alt_data_end+0xfffe70b8>
		case 'q': /* extension */
			flags |= QUADINT;
   993e4:	9cc00814 	ori	r19,r19,32
			goto rflag;
   993e8:	003f3306 	br	990b8 <__alt_data_end+0xfffe70b8>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   993ec:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   993f0:	e0bfe917 	ldw	r2,-92(fp)
   993f4:	10c00104 	addi	r3,r2,4
   993f8:	e0ffe915 	stw	r3,-92(fp)
   993fc:	10800017 	ldw	r2,0(r2)
   99400:	a0800005 	stb	r2,0(r20)
				size = 1;
   99404:	00800044 	movi	r2,1
   99408:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
   9940c:	e03fc705 	stb	zero,-228(fp)
			break;
   99410:	0001c806 	br	99b34 <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
   99414:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   99418:	9880080c 	andi	r2,r19,32
   9941c:	10000826 	beq	r2,zero,99440 <___vfiprintf_internal_r+0x5ac>
   99420:	e13fe917 	ldw	r4,-92(fp)
   99424:	20800204 	addi	r2,r4,8
   99428:	e0bfe915 	stw	r2,-92(fp)
   9942c:	20800017 	ldw	r2,0(r4)
   99430:	20c00117 	ldw	r3,4(r4)
   99434:	e0bfea15 	stw	r2,-88(fp)
   99438:	e0ffeb15 	stw	r3,-84(fp)
   9943c:	00001e06 	br	994b8 <___vfiprintf_internal_r+0x624>
   99440:	9880040c 	andi	r2,r19,16
   99444:	10000826 	beq	r2,zero,99468 <___vfiprintf_internal_r+0x5d4>
   99448:	e0bfe917 	ldw	r2,-92(fp)
   9944c:	10c00104 	addi	r3,r2,4
   99450:	e0ffe915 	stw	r3,-92(fp)
   99454:	10800017 	ldw	r2,0(r2)
   99458:	e0bfea15 	stw	r2,-88(fp)
   9945c:	1005d7fa 	srai	r2,r2,31
   99460:	e0bfeb15 	stw	r2,-84(fp)
   99464:	00001406 	br	994b8 <___vfiprintf_internal_r+0x624>
   99468:	9880100c 	andi	r2,r19,64
   9946c:	10000b26 	beq	r2,zero,9949c <___vfiprintf_internal_r+0x608>
   99470:	e0bfe917 	ldw	r2,-92(fp)
   99474:	10c00104 	addi	r3,r2,4
   99478:	e0ffe915 	stw	r3,-92(fp)
   9947c:	10800017 	ldw	r2,0(r2)
   99480:	10bfffcc 	andi	r2,r2,65535
   99484:	10a0001c 	xori	r2,r2,32768
   99488:	10a00004 	addi	r2,r2,-32768
   9948c:	e0bfea15 	stw	r2,-88(fp)
   99490:	1005d7fa 	srai	r2,r2,31
   99494:	e0bfeb15 	stw	r2,-84(fp)
   99498:	00000706 	br	994b8 <___vfiprintf_internal_r+0x624>
   9949c:	e0bfe917 	ldw	r2,-92(fp)
   994a0:	10c00104 	addi	r3,r2,4
   994a4:	e0ffe915 	stw	r3,-92(fp)
   994a8:	10800017 	ldw	r2,0(r2)
   994ac:	e0bfea15 	stw	r2,-88(fp)
   994b0:	1005d7fa 	srai	r2,r2,31
   994b4:	e0bfeb15 	stw	r2,-84(fp)
   994b8:	e0bfea17 	ldw	r2,-88(fp)
   994bc:	e0bfbc15 	stw	r2,-272(fp)
   994c0:	e0ffeb17 	ldw	r3,-84(fp)
   994c4:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   994c8:	e0bfbc17 	ldw	r2,-272(fp)
   994cc:	e0ffbd17 	ldw	r3,-268(fp)
   994d0:	18000d0e 	bge	r3,zero,99508 <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   994d4:	000d883a 	mov	r6,zero
   994d8:	000f883a 	mov	r7,zero
   994dc:	e13fbc17 	ldw	r4,-272(fp)
   994e0:	e17fbd17 	ldw	r5,-268(fp)
   994e4:	3105c83a 	sub	r2,r6,r4
   994e8:	3091803a 	cmpltu	r8,r6,r2
   994ec:	3947c83a 	sub	r3,r7,r5
   994f0:	1a09c83a 	sub	r4,r3,r8
   994f4:	2007883a 	mov	r3,r4
   994f8:	e0bfbc15 	stw	r2,-272(fp)
   994fc:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
   99500:	00800b44 	movi	r2,45
   99504:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
   99508:	00800044 	movi	r2,1
   9950c:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
   99510:	0000f806 	br	998f4 <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   99514:	9880080c 	andi	r2,r19,32
   99518:	10000d26 	beq	r2,zero,99550 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   9951c:	e0bfe917 	ldw	r2,-92(fp)
   99520:	10c00104 	addi	r3,r2,4
   99524:	e0ffe915 	stw	r3,-92(fp)
   99528:	10800017 	ldw	r2,0(r2)
   9952c:	e0ffb917 	ldw	r3,-284(fp)
   99530:	e0fff015 	stw	r3,-64(fp)
   99534:	1807d7fa 	srai	r3,r3,31
   99538:	e0fff115 	stw	r3,-60(fp)
   9953c:	e0fff017 	ldw	r3,-64(fp)
   99540:	10c00015 	stw	r3,0(r2)
   99544:	e0fff117 	ldw	r3,-60(fp)
   99548:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   9954c:	0002c306 	br	9a05c <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   99550:	9880040c 	andi	r2,r19,16
   99554:	10000726 	beq	r2,zero,99574 <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   99558:	e0bfe917 	ldw	r2,-92(fp)
   9955c:	10c00104 	addi	r3,r2,4
   99560:	e0ffe915 	stw	r3,-92(fp)
   99564:	10800017 	ldw	r2,0(r2)
   99568:	e0ffb917 	ldw	r3,-284(fp)
   9956c:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   99570:	0002ba06 	br	9a05c <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   99574:	9880100c 	andi	r2,r19,64
   99578:	10000726 	beq	r2,zero,99598 <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   9957c:	e0bfe917 	ldw	r2,-92(fp)
   99580:	10c00104 	addi	r3,r2,4
   99584:	e0ffe915 	stw	r3,-92(fp)
   99588:	10800017 	ldw	r2,0(r2)
   9958c:	e0ffb917 	ldw	r3,-284(fp)
   99590:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   99594:	0002b106 	br	9a05c <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   99598:	e0bfe917 	ldw	r2,-92(fp)
   9959c:	10c00104 	addi	r3,r2,4
   995a0:	e0ffe915 	stw	r3,-92(fp)
   995a4:	10800017 	ldw	r2,0(r2)
   995a8:	e0ffb917 	ldw	r3,-284(fp)
   995ac:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   995b0:	0002aa06 	br	9a05c <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
   995b4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   995b8:	9880080c 	andi	r2,r19,32
   995bc:	10000626 	beq	r2,zero,995d8 <___vfiprintf_internal_r+0x744>
   995c0:	e0bfe917 	ldw	r2,-92(fp)
   995c4:	10c00204 	addi	r3,r2,8
   995c8:	e0ffe915 	stw	r3,-92(fp)
   995cc:	15800017 	ldw	r22,0(r2)
   995d0:	15c00117 	ldw	r23,4(r2)
   995d4:	00001c06 	br	99648 <___vfiprintf_internal_r+0x7b4>
   995d8:	9880040c 	andi	r2,r19,16
   995dc:	10000726 	beq	r2,zero,995fc <___vfiprintf_internal_r+0x768>
   995e0:	e0bfe917 	ldw	r2,-92(fp)
   995e4:	10c00104 	addi	r3,r2,4
   995e8:	e0ffe915 	stw	r3,-92(fp)
   995ec:	10800017 	ldw	r2,0(r2)
   995f0:	102d883a 	mov	r22,r2
   995f4:	002f883a 	mov	r23,zero
   995f8:	00001306 	br	99648 <___vfiprintf_internal_r+0x7b4>
   995fc:	9880100c 	andi	r2,r19,64
   99600:	10000b26 	beq	r2,zero,99630 <___vfiprintf_internal_r+0x79c>
   99604:	e0bfe917 	ldw	r2,-92(fp)
   99608:	10c00104 	addi	r3,r2,4
   9960c:	e0ffe915 	stw	r3,-92(fp)
   99610:	10800017 	ldw	r2,0(r2)
   99614:	e0bff215 	stw	r2,-56(fp)
   99618:	e03ff315 	stw	zero,-52(fp)
   9961c:	e0bff217 	ldw	r2,-56(fp)
   99620:	15bfffcc 	andi	r22,r2,65535
   99624:	e0fff317 	ldw	r3,-52(fp)
   99628:	182e703a 	and	r23,r3,zero
   9962c:	00000606 	br	99648 <___vfiprintf_internal_r+0x7b4>
   99630:	e0bfe917 	ldw	r2,-92(fp)
   99634:	10c00104 	addi	r3,r2,4
   99638:	e0ffe915 	stw	r3,-92(fp)
   9963c:	10800017 	ldw	r2,0(r2)
   99640:	102d883a 	mov	r22,r2
   99644:	002f883a 	mov	r23,zero
   99648:	e5bfbc15 	stw	r22,-272(fp)
   9964c:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
   99650:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   99654:	0000a606 	br	998f0 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   99658:	e0bfe917 	ldw	r2,-92(fp)
   9965c:	10c00104 	addi	r3,r2,4
   99660:	e0ffe915 	stw	r3,-92(fp)
   99664:	10800017 	ldw	r2,0(r2)
   99668:	e0bfbc15 	stw	r2,-272(fp)
   9966c:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
   99670:	00800084 	movi	r2,2
   99674:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
   99678:	008002b4 	movhi	r2,10
   9967c:	1084f904 	addi	r2,r2,5092
   99680:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
   99684:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   99688:	00800c04 	movi	r2,48
   9968c:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   99690:	04401e04 	movi	r17,120
   99694:	00801e04 	movi	r2,120
   99698:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   9969c:	00009406 	br	998f0 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   996a0:	e0bfe917 	ldw	r2,-92(fp)
   996a4:	10c00104 	addi	r3,r2,4
   996a8:	e0ffe915 	stw	r3,-92(fp)
   996ac:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   996b0:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   996b4:	a000081e 	bne	r20,zero,996d8 <___vfiprintf_internal_r+0x844>
				cp = "(null)";
   996b8:	050002b4 	movhi	r20,10
   996bc:	a504fe04 	addi	r20,r20,5112
				size = ((unsigned) prec > 6U) ? 6 : prec;
   996c0:	e0bfbb17 	ldw	r2,-276(fp)
   996c4:	10c001f0 	cmpltui	r3,r2,7
   996c8:	1800011e 	bne	r3,zero,996d0 <___vfiprintf_internal_r+0x83c>
   996cc:	00800184 	movi	r2,6
   996d0:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   996d4:	00011706 	br	99b34 <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   996d8:	e0bfbb17 	ldw	r2,-276(fp)
   996dc:	10001016 	blt	r2,zero,99720 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   996e0:	e0bfbb17 	ldw	r2,-276(fp)
   996e4:	100d883a 	mov	r6,r2
   996e8:	000b883a 	mov	r5,zero
   996ec:	a009883a 	mov	r4,r20
   996f0:	00904e00 	call	904e0 <memchr>
   996f4:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
   996f8:	e0bfc617 	ldw	r2,-232(fp)
   996fc:	10000526 	beq	r2,zero,99714 <___vfiprintf_internal_r+0x880>
					size = p - cp;
   99700:	e0bfc617 	ldw	r2,-232(fp)
   99704:	a007883a 	mov	r3,r20
   99708:	10c5c83a 	sub	r2,r2,r3
   9970c:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   99710:	00010806 	br	99b34 <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   99714:	e0bfbb17 	ldw	r2,-276(fp)
   99718:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
   9971c:	00010506 	br	99b34 <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   99720:	a009883a 	mov	r4,r20
   99724:	0088c340 	call	88c34 <strlen>
   99728:	e0bfc115 	stw	r2,-252(fp)

			break;
   9972c:	00010106 	br	99b34 <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
   99730:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   99734:	9880080c 	andi	r2,r19,32
   99738:	10000826 	beq	r2,zero,9975c <___vfiprintf_internal_r+0x8c8>
   9973c:	e0bfe917 	ldw	r2,-92(fp)
   99740:	10c00204 	addi	r3,r2,8
   99744:	e0ffe915 	stw	r3,-92(fp)
   99748:	10c00017 	ldw	r3,0(r2)
   9974c:	e0ffec15 	stw	r3,-80(fp)
   99750:	10c00117 	ldw	r3,4(r2)
   99754:	e0ffed15 	stw	r3,-76(fp)
   99758:	00001e06 	br	997d4 <___vfiprintf_internal_r+0x940>
   9975c:	9880040c 	andi	r2,r19,16
   99760:	10000726 	beq	r2,zero,99780 <___vfiprintf_internal_r+0x8ec>
   99764:	e0bfe917 	ldw	r2,-92(fp)
   99768:	10c00104 	addi	r3,r2,4
   9976c:	e0ffe915 	stw	r3,-92(fp)
   99770:	10800017 	ldw	r2,0(r2)
   99774:	e0bfec15 	stw	r2,-80(fp)
   99778:	e03fed15 	stw	zero,-76(fp)
   9977c:	00001506 	br	997d4 <___vfiprintf_internal_r+0x940>
   99780:	9880100c 	andi	r2,r19,64
   99784:	10000d26 	beq	r2,zero,997bc <___vfiprintf_internal_r+0x928>
   99788:	e0bfe917 	ldw	r2,-92(fp)
   9978c:	10c00104 	addi	r3,r2,4
   99790:	e0ffe915 	stw	r3,-92(fp)
   99794:	10800017 	ldw	r2,0(r2)
   99798:	e0bff415 	stw	r2,-48(fp)
   9979c:	e03ff515 	stw	zero,-44(fp)
   997a0:	e0bff417 	ldw	r2,-48(fp)
   997a4:	10bfffcc 	andi	r2,r2,65535
   997a8:	e0bfec15 	stw	r2,-80(fp)
   997ac:	e0fff517 	ldw	r3,-44(fp)
   997b0:	1806703a 	and	r3,r3,zero
   997b4:	e0ffed15 	stw	r3,-76(fp)
   997b8:	00000606 	br	997d4 <___vfiprintf_internal_r+0x940>
   997bc:	e0bfe917 	ldw	r2,-92(fp)
   997c0:	10c00104 	addi	r3,r2,4
   997c4:	e0ffe915 	stw	r3,-92(fp)
   997c8:	10800017 	ldw	r2,0(r2)
   997cc:	e0bfec15 	stw	r2,-80(fp)
   997d0:	e03fed15 	stw	zero,-76(fp)
   997d4:	e0bfec17 	ldw	r2,-80(fp)
   997d8:	e0bfbc15 	stw	r2,-272(fp)
   997dc:	e0ffed17 	ldw	r3,-76(fp)
   997e0:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
   997e4:	00800044 	movi	r2,1
   997e8:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
   997ec:	00004006 	br	998f0 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
   997f0:	008002b4 	movhi	r2,10
   997f4:	10850004 	addi	r2,r2,5120
   997f8:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
   997fc:	00000306 	br	9980c <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
   99800:	008002b4 	movhi	r2,10
   99804:	1084f904 	addi	r2,r2,5092
   99808:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
   9980c:	9880080c 	andi	r2,r19,32
   99810:	10000826 	beq	r2,zero,99834 <___vfiprintf_internal_r+0x9a0>
   99814:	e0bfe917 	ldw	r2,-92(fp)
   99818:	10c00204 	addi	r3,r2,8
   9981c:	e0ffe915 	stw	r3,-92(fp)
   99820:	10c00017 	ldw	r3,0(r2)
   99824:	e0ffee15 	stw	r3,-72(fp)
   99828:	10c00117 	ldw	r3,4(r2)
   9982c:	e0ffef15 	stw	r3,-68(fp)
   99830:	00001e06 	br	998ac <___vfiprintf_internal_r+0xa18>
   99834:	9880040c 	andi	r2,r19,16
   99838:	10000726 	beq	r2,zero,99858 <___vfiprintf_internal_r+0x9c4>
   9983c:	e0bfe917 	ldw	r2,-92(fp)
   99840:	10c00104 	addi	r3,r2,4
   99844:	e0ffe915 	stw	r3,-92(fp)
   99848:	10800017 	ldw	r2,0(r2)
   9984c:	e0bfee15 	stw	r2,-72(fp)
   99850:	e03fef15 	stw	zero,-68(fp)
   99854:	00001506 	br	998ac <___vfiprintf_internal_r+0xa18>
   99858:	9880100c 	andi	r2,r19,64
   9985c:	10000d26 	beq	r2,zero,99894 <___vfiprintf_internal_r+0xa00>
   99860:	e0bfe917 	ldw	r2,-92(fp)
   99864:	10c00104 	addi	r3,r2,4
   99868:	e0ffe915 	stw	r3,-92(fp)
   9986c:	10800017 	ldw	r2,0(r2)
   99870:	e0bff615 	stw	r2,-40(fp)
   99874:	e03ff715 	stw	zero,-36(fp)
   99878:	e0bff617 	ldw	r2,-40(fp)
   9987c:	10bfffcc 	andi	r2,r2,65535
   99880:	e0bfee15 	stw	r2,-72(fp)
   99884:	e0fff717 	ldw	r3,-36(fp)
   99888:	1806703a 	and	r3,r3,zero
   9988c:	e0ffef15 	stw	r3,-68(fp)
   99890:	00000606 	br	998ac <___vfiprintf_internal_r+0xa18>
   99894:	e0bfe917 	ldw	r2,-92(fp)
   99898:	10c00104 	addi	r3,r2,4
   9989c:	e0ffe915 	stw	r3,-92(fp)
   998a0:	10800017 	ldw	r2,0(r2)
   998a4:	e0bfee15 	stw	r2,-72(fp)
   998a8:	e03fef15 	stw	zero,-68(fp)
   998ac:	e0bfee17 	ldw	r2,-72(fp)
   998b0:	e0bfbc15 	stw	r2,-272(fp)
   998b4:	e0ffef17 	ldw	r3,-68(fp)
   998b8:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
   998bc:	00800084 	movi	r2,2
   998c0:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   998c4:	9880004c 	andi	r2,r19,1
   998c8:	10000926 	beq	r2,zero,998f0 <___vfiprintf_internal_r+0xa5c>
   998cc:	e0bfbc17 	ldw	r2,-272(fp)
   998d0:	e0ffbd17 	ldw	r3,-268(fp)
   998d4:	10c4b03a 	or	r2,r2,r3
   998d8:	10000526 	beq	r2,zero,998f0 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
   998dc:	00800c04 	movi	r2,48
   998e0:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   998e4:	8805883a 	mov	r2,r17
   998e8:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   998ec:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   998f0:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   998f4:	e0bfbb17 	ldw	r2,-276(fp)
   998f8:	e0bfbf15 	stw	r2,-260(fp)
   998fc:	e0bfbf17 	ldw	r2,-260(fp)
   99900:	10000216 	blt	r2,zero,9990c <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
   99904:	00bfdfc4 	movi	r2,-129
   99908:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   9990c:	e53fdb04 	addi	r20,fp,-148
   99910:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
   99914:	e0bfbc17 	ldw	r2,-272(fp)
   99918:	e0ffbd17 	ldw	r3,-268(fp)
   9991c:	10c4b03a 	or	r2,r2,r3
   99920:	1000021e 	bne	r2,zero,9992c <___vfiprintf_internal_r+0xa98>
   99924:	e0bfbb17 	ldw	r2,-276(fp)
   99928:	10006c26 	beq	r2,zero,99adc <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   9992c:	e0bfbe03 	ldbu	r2,-264(fp)
   99930:	10c00060 	cmpeqi	r3,r2,1
   99934:	1800211e 	bne	r3,zero,999bc <___vfiprintf_internal_r+0xb28>
   99938:	10c000a0 	cmpeqi	r3,r2,2
   9993c:	1800491e 	bne	r3,zero,99a64 <___vfiprintf_internal_r+0xbd0>
   99940:	10005d1e 	bne	r2,zero,99ab8 <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   99944:	a53fffc4 	addi	r20,r20,-1
   99948:	e0bfbc17 	ldw	r2,-272(fp)
   9994c:	108001cc 	andi	r2,r2,7
   99950:	10800c04 	addi	r2,r2,48
   99954:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
   99958:	e0bfbd17 	ldw	r2,-268(fp)
   9995c:	1004977a 	slli	r2,r2,29
   99960:	e0ffbc17 	ldw	r3,-272(fp)
   99964:	1806d0fa 	srli	r3,r3,3
   99968:	1884b03a 	or	r2,r3,r2
   9996c:	e0bfbc15 	stw	r2,-272(fp)
   99970:	e0bfbd17 	ldw	r2,-268(fp)
   99974:	1004d0fa 	srli	r2,r2,3
   99978:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   9997c:	e0bfbc17 	ldw	r2,-272(fp)
   99980:	e0ffbd17 	ldw	r3,-268(fp)
   99984:	10c4b03a 	or	r2,r2,r3
   99988:	103fee1e 	bne	r2,zero,99944 <__alt_data_end+0xfffe7944>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   9998c:	9880004c 	andi	r2,r19,1
   99990:	10005026 	beq	r2,zero,99ad4 <___vfiprintf_internal_r+0xc40>
   99994:	a0800003 	ldbu	r2,0(r20)
   99998:	10803fcc 	andi	r2,r2,255
   9999c:	1080201c 	xori	r2,r2,128
   999a0:	10bfe004 	addi	r2,r2,-128
   999a4:	10800c20 	cmpeqi	r2,r2,48
   999a8:	10004a1e 	bne	r2,zero,99ad4 <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
   999ac:	a53fffc4 	addi	r20,r20,-1
   999b0:	00800c04 	movi	r2,48
   999b4:	a0800005 	stb	r2,0(r20)
					break;
   999b8:	00004606 	br	99ad4 <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   999bc:	e0bfbd17 	ldw	r2,-268(fp)
   999c0:	10000a1e 	bne	r2,zero,999ec <___vfiprintf_internal_r+0xb58>
   999c4:	e0bfbd17 	ldw	r2,-268(fp)
   999c8:	1000031e 	bne	r2,zero,999d8 <___vfiprintf_internal_r+0xb44>
   999cc:	e0bfbc17 	ldw	r2,-272(fp)
   999d0:	108002a8 	cmpgeui	r2,r2,10
   999d4:	1000051e 	bne	r2,zero,999ec <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
   999d8:	a53fffc4 	addi	r20,r20,-1
   999dc:	e0bfbc17 	ldw	r2,-272(fp)
   999e0:	10800c04 	addi	r2,r2,48
   999e4:	a0800005 	stb	r2,0(r20)
						break;
   999e8:	00003b06 	br	99ad8 <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   999ec:	a53fffc4 	addi	r20,r20,-1
   999f0:	e0bfbc17 	ldw	r2,-272(fp)
   999f4:	e0ffbd17 	ldw	r3,-268(fp)
   999f8:	01800284 	movi	r6,10
   999fc:	000f883a 	mov	r7,zero
   99a00:	1009883a 	mov	r4,r2
   99a04:	180b883a 	mov	r5,r3
   99a08:	009d8240 	call	9d824 <__umoddi3>
   99a0c:	1009883a 	mov	r4,r2
   99a10:	180b883a 	mov	r5,r3
   99a14:	2005883a 	mov	r2,r4
   99a18:	2807883a 	mov	r3,r5
   99a1c:	10800c04 	addi	r2,r2,48
   99a20:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   99a24:	e0bfbc17 	ldw	r2,-272(fp)
   99a28:	e0ffbd17 	ldw	r3,-268(fp)
   99a2c:	01800284 	movi	r6,10
   99a30:	000f883a 	mov	r7,zero
   99a34:	1009883a 	mov	r4,r2
   99a38:	180b883a 	mov	r5,r3
   99a3c:	009d2280 	call	9d228 <__udivdi3>
   99a40:	1009883a 	mov	r4,r2
   99a44:	180b883a 	mov	r5,r3
   99a48:	e13fbc15 	stw	r4,-272(fp)
   99a4c:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
   99a50:	e0bfbc17 	ldw	r2,-272(fp)
   99a54:	e0ffbd17 	ldw	r3,-268(fp)
   99a58:	10c4b03a 	or	r2,r2,r3
   99a5c:	103fe31e 	bne	r2,zero,999ec <__alt_data_end+0xfffe79ec>
					break;
   99a60:	00001d06 	br	99ad8 <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   99a64:	a53fffc4 	addi	r20,r20,-1
   99a68:	e0bfbc17 	ldw	r2,-272(fp)
   99a6c:	108003cc 	andi	r2,r2,15
   99a70:	e0ffc217 	ldw	r3,-248(fp)
   99a74:	1885883a 	add	r2,r3,r2
   99a78:	10800003 	ldbu	r2,0(r2)
   99a7c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
   99a80:	e0bfbd17 	ldw	r2,-268(fp)
   99a84:	1004973a 	slli	r2,r2,28
   99a88:	e0ffbc17 	ldw	r3,-272(fp)
   99a8c:	1806d13a 	srli	r3,r3,4
   99a90:	1884b03a 	or	r2,r3,r2
   99a94:	e0bfbc15 	stw	r2,-272(fp)
   99a98:	e0bfbd17 	ldw	r2,-268(fp)
   99a9c:	1004d13a 	srli	r2,r2,4
   99aa0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   99aa4:	e0bfbc17 	ldw	r2,-272(fp)
   99aa8:	e0ffbd17 	ldw	r3,-268(fp)
   99aac:	10c4b03a 	or	r2,r2,r3
   99ab0:	103fec1e 	bne	r2,zero,99a64 <__alt_data_end+0xfffe7a64>
					break;
   99ab4:	00000806 	br	99ad8 <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
   99ab8:	050002b4 	movhi	r20,10
   99abc:	a5050504 	addi	r20,r20,5140
					size = strlen (cp);
   99ac0:	a009883a 	mov	r4,r20
   99ac4:	0088c340 	call	88c34 <strlen>
   99ac8:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
   99acc:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   99ad0:	00001806 	br	99b34 <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   99ad4:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   99ad8:	00000706 	br	99af8 <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   99adc:	e0bfbe03 	ldbu	r2,-264(fp)
   99ae0:	1000051e 	bne	r2,zero,99af8 <___vfiprintf_internal_r+0xc64>
   99ae4:	9880004c 	andi	r2,r19,1
   99ae8:	10000326 	beq	r2,zero,99af8 <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
   99aec:	a53fffc4 	addi	r20,r20,-1
   99af0:	00800c04 	movi	r2,48
   99af4:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
   99af8:	e0bfdb04 	addi	r2,fp,-148
   99afc:	10800a04 	addi	r2,r2,40
   99b00:	1007883a 	mov	r3,r2
   99b04:	a005883a 	mov	r2,r20
   99b08:	1885c83a 	sub	r2,r3,r2
   99b0c:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
   99b10:	00000806 	br	99b34 <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   99b14:	88015426 	beq	r17,zero,9a068 <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   99b18:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
   99b1c:	8805883a 	mov	r2,r17
   99b20:	a0800005 	stb	r2,0(r20)
			size = 1;
   99b24:	00800044 	movi	r2,1
   99b28:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
   99b2c:	e03fc705 	stb	zero,-228(fp)
			break;
   99b30:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   99b34:	e0ffbf17 	ldw	r3,-260(fp)
   99b38:	e0bfc117 	ldw	r2,-252(fp)
   99b3c:	10c0010e 	bge	r2,r3,99b44 <___vfiprintf_internal_r+0xcb0>
   99b40:	1805883a 	mov	r2,r3
   99b44:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
   99b48:	e0bfc703 	ldbu	r2,-228(fp)
   99b4c:	10803fcc 	andi	r2,r2,255
   99b50:	1080201c 	xori	r2,r2,128
   99b54:	10bfe004 	addi	r2,r2,-128
   99b58:	10000326 	beq	r2,zero,99b68 <___vfiprintf_internal_r+0xcd4>
			realsz++;
   99b5c:	e0bfc017 	ldw	r2,-256(fp)
   99b60:	10800044 	addi	r2,r2,1
   99b64:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
   99b68:	9880008c 	andi	r2,r19,2
   99b6c:	10000326 	beq	r2,zero,99b7c <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
   99b70:	e0bfc017 	ldw	r2,-256(fp)
   99b74:	10800084 	addi	r2,r2,2
   99b78:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   99b7c:	9880210c 	andi	r2,r19,132
   99b80:	1000351e 	bne	r2,zero,99c58 <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
   99b84:	e0ffba17 	ldw	r3,-280(fp)
   99b88:	e0bfc017 	ldw	r2,-256(fp)
   99b8c:	18a1c83a 	sub	r16,r3,r2
   99b90:	0400310e 	bge	zero,r16,99c58 <___vfiprintf_internal_r+0xdc4>
   99b94:	00001706 	br	99bf4 <___vfiprintf_internal_r+0xd60>
   99b98:	008002b4 	movhi	r2,10
   99b9c:	10850b84 	addi	r2,r2,5166
   99ba0:	90800015 	stw	r2,0(r18)
   99ba4:	00800404 	movi	r2,16
   99ba8:	90800115 	stw	r2,4(r18)
   99bac:	e0bfca17 	ldw	r2,-216(fp)
   99bb0:	10800404 	addi	r2,r2,16
   99bb4:	e0bfca15 	stw	r2,-216(fp)
   99bb8:	94800204 	addi	r18,r18,8
   99bbc:	e0bfc917 	ldw	r2,-220(fp)
   99bc0:	10800044 	addi	r2,r2,1
   99bc4:	e0bfc915 	stw	r2,-220(fp)
   99bc8:	e0bfc917 	ldw	r2,-220(fp)
   99bcc:	10800210 	cmplti	r2,r2,8
   99bd0:	1000071e 	bne	r2,zero,99bf0 <___vfiprintf_internal_r+0xd5c>
   99bd4:	e0bfc804 	addi	r2,fp,-224
   99bd8:	100d883a 	mov	r6,r2
   99bdc:	e17fe717 	ldw	r5,-100(fp)
   99be0:	e13fe617 	ldw	r4,-104(fp)
   99be4:	0098c180 	call	98c18 <__sprint_r>
   99be8:	10012d1e 	bne	r2,zero,9a0a0 <___vfiprintf_internal_r+0x120c>
   99bec:	e4bfcb04 	addi	r18,fp,-212
   99bf0:	843ffc04 	addi	r16,r16,-16
   99bf4:	80800448 	cmpgei	r2,r16,17
   99bf8:	103fe71e 	bne	r2,zero,99b98 <__alt_data_end+0xfffe7b98>
   99bfc:	008002b4 	movhi	r2,10
   99c00:	10850b84 	addi	r2,r2,5166
   99c04:	90800015 	stw	r2,0(r18)
   99c08:	8005883a 	mov	r2,r16
   99c0c:	90800115 	stw	r2,4(r18)
   99c10:	e0bfca17 	ldw	r2,-216(fp)
   99c14:	8007883a 	mov	r3,r16
   99c18:	10c5883a 	add	r2,r2,r3
   99c1c:	e0bfca15 	stw	r2,-216(fp)
   99c20:	94800204 	addi	r18,r18,8
   99c24:	e0bfc917 	ldw	r2,-220(fp)
   99c28:	10800044 	addi	r2,r2,1
   99c2c:	e0bfc915 	stw	r2,-220(fp)
   99c30:	e0bfc917 	ldw	r2,-220(fp)
   99c34:	10800210 	cmplti	r2,r2,8
   99c38:	1000071e 	bne	r2,zero,99c58 <___vfiprintf_internal_r+0xdc4>
   99c3c:	e0bfc804 	addi	r2,fp,-224
   99c40:	100d883a 	mov	r6,r2
   99c44:	e17fe717 	ldw	r5,-100(fp)
   99c48:	e13fe617 	ldw	r4,-104(fp)
   99c4c:	0098c180 	call	98c18 <__sprint_r>
   99c50:	1001151e 	bne	r2,zero,9a0a8 <___vfiprintf_internal_r+0x1214>
   99c54:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
   99c58:	e0bfc703 	ldbu	r2,-228(fp)
   99c5c:	10803fcc 	andi	r2,r2,255
   99c60:	1080201c 	xori	r2,r2,128
   99c64:	10bfe004 	addi	r2,r2,-128
   99c68:	10001526 	beq	r2,zero,99cc0 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
   99c6c:	e0bfc704 	addi	r2,fp,-228
   99c70:	90800015 	stw	r2,0(r18)
   99c74:	00800044 	movi	r2,1
   99c78:	90800115 	stw	r2,4(r18)
   99c7c:	e0bfca17 	ldw	r2,-216(fp)
   99c80:	10800044 	addi	r2,r2,1
   99c84:	e0bfca15 	stw	r2,-216(fp)
   99c88:	94800204 	addi	r18,r18,8
   99c8c:	e0bfc917 	ldw	r2,-220(fp)
   99c90:	10800044 	addi	r2,r2,1
   99c94:	e0bfc915 	stw	r2,-220(fp)
   99c98:	e0bfc917 	ldw	r2,-220(fp)
   99c9c:	10800210 	cmplti	r2,r2,8
   99ca0:	1000071e 	bne	r2,zero,99cc0 <___vfiprintf_internal_r+0xe2c>
   99ca4:	e0bfc804 	addi	r2,fp,-224
   99ca8:	100d883a 	mov	r6,r2
   99cac:	e17fe717 	ldw	r5,-100(fp)
   99cb0:	e13fe617 	ldw	r4,-104(fp)
   99cb4:	0098c180 	call	98c18 <__sprint_r>
   99cb8:	1000fd1e 	bne	r2,zero,9a0b0 <___vfiprintf_internal_r+0x121c>
   99cbc:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
   99cc0:	9880008c 	andi	r2,r19,2
   99cc4:	10001526 	beq	r2,zero,99d1c <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
   99cc8:	e0bfe504 	addi	r2,fp,-108
   99ccc:	90800015 	stw	r2,0(r18)
   99cd0:	00800084 	movi	r2,2
   99cd4:	90800115 	stw	r2,4(r18)
   99cd8:	e0bfca17 	ldw	r2,-216(fp)
   99cdc:	10800084 	addi	r2,r2,2
   99ce0:	e0bfca15 	stw	r2,-216(fp)
   99ce4:	94800204 	addi	r18,r18,8
   99ce8:	e0bfc917 	ldw	r2,-220(fp)
   99cec:	10800044 	addi	r2,r2,1
   99cf0:	e0bfc915 	stw	r2,-220(fp)
   99cf4:	e0bfc917 	ldw	r2,-220(fp)
   99cf8:	10800210 	cmplti	r2,r2,8
   99cfc:	1000071e 	bne	r2,zero,99d1c <___vfiprintf_internal_r+0xe88>
   99d00:	e0bfc804 	addi	r2,fp,-224
   99d04:	100d883a 	mov	r6,r2
   99d08:	e17fe717 	ldw	r5,-100(fp)
   99d0c:	e13fe617 	ldw	r4,-104(fp)
   99d10:	0098c180 	call	98c18 <__sprint_r>
   99d14:	1000e81e 	bne	r2,zero,9a0b8 <___vfiprintf_internal_r+0x1224>
   99d18:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   99d1c:	9880210c 	andi	r2,r19,132
   99d20:	10802018 	cmpnei	r2,r2,128
   99d24:	1000351e 	bne	r2,zero,99dfc <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
   99d28:	e0ffba17 	ldw	r3,-280(fp)
   99d2c:	e0bfc017 	ldw	r2,-256(fp)
   99d30:	18a1c83a 	sub	r16,r3,r2
   99d34:	0400310e 	bge	zero,r16,99dfc <___vfiprintf_internal_r+0xf68>
   99d38:	00001706 	br	99d98 <___vfiprintf_internal_r+0xf04>
   99d3c:	008002b4 	movhi	r2,10
   99d40:	10850f84 	addi	r2,r2,5182
   99d44:	90800015 	stw	r2,0(r18)
   99d48:	00800404 	movi	r2,16
   99d4c:	90800115 	stw	r2,4(r18)
   99d50:	e0bfca17 	ldw	r2,-216(fp)
   99d54:	10800404 	addi	r2,r2,16
   99d58:	e0bfca15 	stw	r2,-216(fp)
   99d5c:	94800204 	addi	r18,r18,8
   99d60:	e0bfc917 	ldw	r2,-220(fp)
   99d64:	10800044 	addi	r2,r2,1
   99d68:	e0bfc915 	stw	r2,-220(fp)
   99d6c:	e0bfc917 	ldw	r2,-220(fp)
   99d70:	10800210 	cmplti	r2,r2,8
   99d74:	1000071e 	bne	r2,zero,99d94 <___vfiprintf_internal_r+0xf00>
   99d78:	e0bfc804 	addi	r2,fp,-224
   99d7c:	100d883a 	mov	r6,r2
   99d80:	e17fe717 	ldw	r5,-100(fp)
   99d84:	e13fe617 	ldw	r4,-104(fp)
   99d88:	0098c180 	call	98c18 <__sprint_r>
   99d8c:	1000cc1e 	bne	r2,zero,9a0c0 <___vfiprintf_internal_r+0x122c>
   99d90:	e4bfcb04 	addi	r18,fp,-212
   99d94:	843ffc04 	addi	r16,r16,-16
   99d98:	80800448 	cmpgei	r2,r16,17
   99d9c:	103fe71e 	bne	r2,zero,99d3c <__alt_data_end+0xfffe7d3c>
   99da0:	008002b4 	movhi	r2,10
   99da4:	10850f84 	addi	r2,r2,5182
   99da8:	90800015 	stw	r2,0(r18)
   99dac:	8005883a 	mov	r2,r16
   99db0:	90800115 	stw	r2,4(r18)
   99db4:	e0bfca17 	ldw	r2,-216(fp)
   99db8:	8007883a 	mov	r3,r16
   99dbc:	10c5883a 	add	r2,r2,r3
   99dc0:	e0bfca15 	stw	r2,-216(fp)
   99dc4:	94800204 	addi	r18,r18,8
   99dc8:	e0bfc917 	ldw	r2,-220(fp)
   99dcc:	10800044 	addi	r2,r2,1
   99dd0:	e0bfc915 	stw	r2,-220(fp)
   99dd4:	e0bfc917 	ldw	r2,-220(fp)
   99dd8:	10800210 	cmplti	r2,r2,8
   99ddc:	1000071e 	bne	r2,zero,99dfc <___vfiprintf_internal_r+0xf68>
   99de0:	e0bfc804 	addi	r2,fp,-224
   99de4:	100d883a 	mov	r6,r2
   99de8:	e17fe717 	ldw	r5,-100(fp)
   99dec:	e13fe617 	ldw	r4,-104(fp)
   99df0:	0098c180 	call	98c18 <__sprint_r>
   99df4:	1000b41e 	bne	r2,zero,9a0c8 <___vfiprintf_internal_r+0x1234>
   99df8:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   99dfc:	e0ffbf17 	ldw	r3,-260(fp)
   99e00:	e0bfc117 	ldw	r2,-252(fp)
   99e04:	18a1c83a 	sub	r16,r3,r2
   99e08:	0400310e 	bge	zero,r16,99ed0 <___vfiprintf_internal_r+0x103c>
   99e0c:	00001706 	br	99e6c <___vfiprintf_internal_r+0xfd8>
   99e10:	008002b4 	movhi	r2,10
   99e14:	10850f84 	addi	r2,r2,5182
   99e18:	90800015 	stw	r2,0(r18)
   99e1c:	00800404 	movi	r2,16
   99e20:	90800115 	stw	r2,4(r18)
   99e24:	e0bfca17 	ldw	r2,-216(fp)
   99e28:	10800404 	addi	r2,r2,16
   99e2c:	e0bfca15 	stw	r2,-216(fp)
   99e30:	94800204 	addi	r18,r18,8
   99e34:	e0bfc917 	ldw	r2,-220(fp)
   99e38:	10800044 	addi	r2,r2,1
   99e3c:	e0bfc915 	stw	r2,-220(fp)
   99e40:	e0bfc917 	ldw	r2,-220(fp)
   99e44:	10800210 	cmplti	r2,r2,8
   99e48:	1000071e 	bne	r2,zero,99e68 <___vfiprintf_internal_r+0xfd4>
   99e4c:	e0bfc804 	addi	r2,fp,-224
   99e50:	100d883a 	mov	r6,r2
   99e54:	e17fe717 	ldw	r5,-100(fp)
   99e58:	e13fe617 	ldw	r4,-104(fp)
   99e5c:	0098c180 	call	98c18 <__sprint_r>
   99e60:	10009b1e 	bne	r2,zero,9a0d0 <___vfiprintf_internal_r+0x123c>
   99e64:	e4bfcb04 	addi	r18,fp,-212
   99e68:	843ffc04 	addi	r16,r16,-16
   99e6c:	80800448 	cmpgei	r2,r16,17
   99e70:	103fe71e 	bne	r2,zero,99e10 <__alt_data_end+0xfffe7e10>
   99e74:	008002b4 	movhi	r2,10
   99e78:	10850f84 	addi	r2,r2,5182
   99e7c:	90800015 	stw	r2,0(r18)
   99e80:	8005883a 	mov	r2,r16
   99e84:	90800115 	stw	r2,4(r18)
   99e88:	e0bfca17 	ldw	r2,-216(fp)
   99e8c:	8007883a 	mov	r3,r16
   99e90:	10c5883a 	add	r2,r2,r3
   99e94:	e0bfca15 	stw	r2,-216(fp)
   99e98:	94800204 	addi	r18,r18,8
   99e9c:	e0bfc917 	ldw	r2,-220(fp)
   99ea0:	10800044 	addi	r2,r2,1
   99ea4:	e0bfc915 	stw	r2,-220(fp)
   99ea8:	e0bfc917 	ldw	r2,-220(fp)
   99eac:	10800210 	cmplti	r2,r2,8
   99eb0:	1000071e 	bne	r2,zero,99ed0 <___vfiprintf_internal_r+0x103c>
   99eb4:	e0bfc804 	addi	r2,fp,-224
   99eb8:	100d883a 	mov	r6,r2
   99ebc:	e17fe717 	ldw	r5,-100(fp)
   99ec0:	e13fe617 	ldw	r4,-104(fp)
   99ec4:	0098c180 	call	98c18 <__sprint_r>
   99ec8:	1000831e 	bne	r2,zero,9a0d8 <___vfiprintf_internal_r+0x1244>
   99ecc:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   99ed0:	95000015 	stw	r20,0(r18)
   99ed4:	e0bfc117 	ldw	r2,-252(fp)
   99ed8:	90800115 	stw	r2,4(r18)
   99edc:	e0ffca17 	ldw	r3,-216(fp)
   99ee0:	e0bfc117 	ldw	r2,-252(fp)
   99ee4:	1885883a 	add	r2,r3,r2
   99ee8:	e0bfca15 	stw	r2,-216(fp)
   99eec:	94800204 	addi	r18,r18,8
   99ef0:	e0bfc917 	ldw	r2,-220(fp)
   99ef4:	10800044 	addi	r2,r2,1
   99ef8:	e0bfc915 	stw	r2,-220(fp)
   99efc:	e0bfc917 	ldw	r2,-220(fp)
   99f00:	10800210 	cmplti	r2,r2,8
   99f04:	1000071e 	bne	r2,zero,99f24 <___vfiprintf_internal_r+0x1090>
   99f08:	e0bfc804 	addi	r2,fp,-224
   99f0c:	100d883a 	mov	r6,r2
   99f10:	e17fe717 	ldw	r5,-100(fp)
   99f14:	e13fe617 	ldw	r4,-104(fp)
   99f18:	0098c180 	call	98c18 <__sprint_r>
   99f1c:	1000701e 	bne	r2,zero,9a0e0 <___vfiprintf_internal_r+0x124c>
   99f20:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   99f24:	9880010c 	andi	r2,r19,4
   99f28:	10003526 	beq	r2,zero,9a000 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
   99f2c:	e0ffba17 	ldw	r3,-280(fp)
   99f30:	e0bfc017 	ldw	r2,-256(fp)
   99f34:	18a1c83a 	sub	r16,r3,r2
   99f38:	0400310e 	bge	zero,r16,9a000 <___vfiprintf_internal_r+0x116c>
   99f3c:	00001706 	br	99f9c <___vfiprintf_internal_r+0x1108>
   99f40:	008002b4 	movhi	r2,10
   99f44:	10850b84 	addi	r2,r2,5166
   99f48:	90800015 	stw	r2,0(r18)
   99f4c:	00800404 	movi	r2,16
   99f50:	90800115 	stw	r2,4(r18)
   99f54:	e0bfca17 	ldw	r2,-216(fp)
   99f58:	10800404 	addi	r2,r2,16
   99f5c:	e0bfca15 	stw	r2,-216(fp)
   99f60:	94800204 	addi	r18,r18,8
   99f64:	e0bfc917 	ldw	r2,-220(fp)
   99f68:	10800044 	addi	r2,r2,1
   99f6c:	e0bfc915 	stw	r2,-220(fp)
   99f70:	e0bfc917 	ldw	r2,-220(fp)
   99f74:	10800210 	cmplti	r2,r2,8
   99f78:	1000071e 	bne	r2,zero,99f98 <___vfiprintf_internal_r+0x1104>
   99f7c:	e0bfc804 	addi	r2,fp,-224
   99f80:	100d883a 	mov	r6,r2
   99f84:	e17fe717 	ldw	r5,-100(fp)
   99f88:	e13fe617 	ldw	r4,-104(fp)
   99f8c:	0098c180 	call	98c18 <__sprint_r>
   99f90:	1000551e 	bne	r2,zero,9a0e8 <___vfiprintf_internal_r+0x1254>
   99f94:	e4bfcb04 	addi	r18,fp,-212
   99f98:	843ffc04 	addi	r16,r16,-16
   99f9c:	80800448 	cmpgei	r2,r16,17
   99fa0:	103fe71e 	bne	r2,zero,99f40 <__alt_data_end+0xfffe7f40>
   99fa4:	008002b4 	movhi	r2,10
   99fa8:	10850b84 	addi	r2,r2,5166
   99fac:	90800015 	stw	r2,0(r18)
   99fb0:	8005883a 	mov	r2,r16
   99fb4:	90800115 	stw	r2,4(r18)
   99fb8:	e0bfca17 	ldw	r2,-216(fp)
   99fbc:	8007883a 	mov	r3,r16
   99fc0:	10c5883a 	add	r2,r2,r3
   99fc4:	e0bfca15 	stw	r2,-216(fp)
   99fc8:	94800204 	addi	r18,r18,8
   99fcc:	e0bfc917 	ldw	r2,-220(fp)
   99fd0:	10800044 	addi	r2,r2,1
   99fd4:	e0bfc915 	stw	r2,-220(fp)
   99fd8:	e0bfc917 	ldw	r2,-220(fp)
   99fdc:	10800210 	cmplti	r2,r2,8
   99fe0:	1000071e 	bne	r2,zero,9a000 <___vfiprintf_internal_r+0x116c>
   99fe4:	e0bfc804 	addi	r2,fp,-224
   99fe8:	100d883a 	mov	r6,r2
   99fec:	e17fe717 	ldw	r5,-100(fp)
   99ff0:	e13fe617 	ldw	r4,-104(fp)
   99ff4:	0098c180 	call	98c18 <__sprint_r>
   99ff8:	10003d1e 	bne	r2,zero,9a0f0 <___vfiprintf_internal_r+0x125c>
   99ffc:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   9a000:	e0ffba17 	ldw	r3,-280(fp)
   9a004:	e0bfc017 	ldw	r2,-256(fp)
   9a008:	10c0010e 	bge	r2,r3,9a010 <___vfiprintf_internal_r+0x117c>
   9a00c:	1805883a 	mov	r2,r3
   9a010:	e0ffb917 	ldw	r3,-284(fp)
   9a014:	1885883a 	add	r2,r3,r2
   9a018:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
   9a01c:	e0bfca17 	ldw	r2,-216(fp)
   9a020:	10000626 	beq	r2,zero,9a03c <___vfiprintf_internal_r+0x11a8>
   9a024:	e0bfc804 	addi	r2,fp,-224
   9a028:	100d883a 	mov	r6,r2
   9a02c:	e17fe717 	ldw	r5,-100(fp)
   9a030:	e13fe617 	ldw	r4,-104(fp)
   9a034:	0098c180 	call	98c18 <__sprint_r>
   9a038:	10002f1e 	bne	r2,zero,9a0f8 <___vfiprintf_internal_r+0x1264>
   9a03c:	e03fc915 	stw	zero,-220(fp)
   9a040:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
   9a044:	e0bfc317 	ldw	r2,-244(fp)
   9a048:	103be426 	beq	r2,zero,98fdc <__alt_data_end+0xfffe6fdc>
			_free_r (data, malloc_buf);
   9a04c:	e17fc317 	ldw	r5,-244(fp)
   9a050:	e13fe617 	ldw	r4,-104(fp)
   9a054:	0085c480 	call	85c48 <_free_r>
			malloc_buf = NULL;
   9a058:	e03fc315 	stw	zero,-244(fp)
		}
	}
   9a05c:	003bdf06 	br	98fdc <__alt_data_end+0xfffe6fdc>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   9a060:	0001883a 	nop
   9a064:	00000106 	br	9a06c <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   9a068:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   9a06c:	e0bfca17 	ldw	r2,-216(fp)
   9a070:	10000626 	beq	r2,zero,9a08c <___vfiprintf_internal_r+0x11f8>
   9a074:	e0bfc804 	addi	r2,fp,-224
   9a078:	100d883a 	mov	r6,r2
   9a07c:	e17fe717 	ldw	r5,-100(fp)
   9a080:	e13fe617 	ldw	r4,-104(fp)
   9a084:	0098c180 	call	98c18 <__sprint_r>
   9a088:	10001d1e 	bne	r2,zero,9a100 <___vfiprintf_internal_r+0x126c>
   9a08c:	e03fc915 	stw	zero,-220(fp)
   9a090:	e4bfcb04 	addi	r18,fp,-212
   9a094:	00001b06 	br	9a104 <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   9a098:	0001883a 	nop
   9a09c:	00001906 	br	9a104 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   9a0a0:	0001883a 	nop
   9a0a4:	00001706 	br	9a104 <___vfiprintf_internal_r+0x1270>
   9a0a8:	0001883a 	nop
   9a0ac:	00001506 	br	9a104 <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   9a0b0:	0001883a 	nop
   9a0b4:	00001306 	br	9a104 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   9a0b8:	0001883a 	nop
   9a0bc:	00001106 	br	9a104 <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   9a0c0:	0001883a 	nop
   9a0c4:	00000f06 	br	9a104 <___vfiprintf_internal_r+0x1270>
   9a0c8:	0001883a 	nop
   9a0cc:	00000d06 	br	9a104 <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   9a0d0:	0001883a 	nop
   9a0d4:	00000b06 	br	9a104 <___vfiprintf_internal_r+0x1270>
   9a0d8:	0001883a 	nop
   9a0dc:	00000906 	br	9a104 <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   9a0e0:	0001883a 	nop
   9a0e4:	00000706 	br	9a104 <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   9a0e8:	0001883a 	nop
   9a0ec:	00000506 	br	9a104 <___vfiprintf_internal_r+0x1270>
   9a0f0:	0001883a 	nop
   9a0f4:	00000306 	br	9a104 <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   9a0f8:	0001883a 	nop
   9a0fc:	00000106 	br	9a104 <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   9a100:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   9a104:	e0bfc317 	ldw	r2,-244(fp)
   9a108:	10000326 	beq	r2,zero,9a118 <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
   9a10c:	e17fc317 	ldw	r5,-244(fp)
   9a110:	e13fe617 	ldw	r4,-104(fp)
   9a114:	0085c480 	call	85c48 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   9a118:	e0bfe717 	ldw	r2,-100(fp)
   9a11c:	1080030b 	ldhu	r2,12(r2)
   9a120:	10bfffcc 	andi	r2,r2,65535
   9a124:	1080100c 	andi	r2,r2,64
   9a128:	1000021e 	bne	r2,zero,9a134 <___vfiprintf_internal_r+0x12a0>
   9a12c:	e0bfb917 	ldw	r2,-284(fp)
   9a130:	00000206 	br	9a13c <___vfiprintf_internal_r+0x12a8>
   9a134:	00bfffc4 	movi	r2,-1
   9a138:	0001883a 	nop
	/* NOTREACHED */
}
   9a13c:	e6fff804 	addi	sp,fp,-32
   9a140:	dfc00917 	ldw	ra,36(sp)
   9a144:	df000817 	ldw	fp,32(sp)
   9a148:	ddc00717 	ldw	r23,28(sp)
   9a14c:	dd800617 	ldw	r22,24(sp)
   9a150:	dd400517 	ldw	r21,20(sp)
   9a154:	dd000417 	ldw	r20,16(sp)
   9a158:	dcc00317 	ldw	r19,12(sp)
   9a15c:	dc800217 	ldw	r18,8(sp)
   9a160:	dc400117 	ldw	r17,4(sp)
   9a164:	dc000017 	ldw	r16,0(sp)
   9a168:	dec00a04 	addi	sp,sp,40
   9a16c:	f800283a 	ret

0009a170 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
   9a170:	defff504 	addi	sp,sp,-44
   9a174:	dfc00a15 	stw	ra,40(sp)
   9a178:	df000915 	stw	fp,36(sp)
   9a17c:	df000904 	addi	fp,sp,36
   9a180:	e13ffd15 	stw	r4,-12(fp)
   9a184:	e17ffe15 	stw	r5,-8(fp)
   9a188:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
   9a18c:	e17fff17 	ldw	r5,-4(fp)
   9a190:	e13ffe17 	ldw	r4,-8(fp)
   9a194:	00823a00 	call	823a0 <__mulsi3>
   9a198:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
   9a19c:	e17ff817 	ldw	r5,-32(fp)
   9a1a0:	e13ffd17 	ldw	r4,-12(fp)
   9a1a4:	00874a40 	call	874a4 <_malloc_r>
   9a1a8:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
   9a1ac:	e0bff917 	ldw	r2,-28(fp)
   9a1b0:	1000021e 	bne	r2,zero,9a1bc <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
   9a1b4:	0005883a 	mov	r2,zero
   9a1b8:	00004106 	br	9a2c0 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
   9a1bc:	e0bff917 	ldw	r2,-28(fp)
   9a1c0:	10bffe04 	addi	r2,r2,-8
   9a1c4:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
   9a1c8:	e0bffa17 	ldw	r2,-24(fp)
   9a1cc:	10c00117 	ldw	r3,4(r2)
   9a1d0:	00bfff04 	movi	r2,-4
   9a1d4:	1884703a 	and	r2,r3,r2
   9a1d8:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
   9a1dc:	e0bffb17 	ldw	r2,-20(fp)
   9a1e0:	10bfff04 	addi	r2,r2,-4
   9a1e4:	e0bffc15 	stw	r2,-16(fp)
   9a1e8:	e0bffc17 	ldw	r2,-16(fp)
   9a1ec:	10800968 	cmpgeui	r2,r2,37
   9a1f0:	10002e1e 	bne	r2,zero,9a2ac <_calloc_r+0x13c>
   9a1f4:	e0bff917 	ldw	r2,-28(fp)
   9a1f8:	e0bff715 	stw	r2,-36(fp)
   9a1fc:	e0bffc17 	ldw	r2,-16(fp)
   9a200:	10800530 	cmpltui	r2,r2,20
   9a204:	10001e1e 	bne	r2,zero,9a280 <_calloc_r+0x110>
   9a208:	e0bff717 	ldw	r2,-36(fp)
   9a20c:	10c00104 	addi	r3,r2,4
   9a210:	e0fff715 	stw	r3,-36(fp)
   9a214:	10000015 	stw	zero,0(r2)
   9a218:	e0bff717 	ldw	r2,-36(fp)
   9a21c:	10c00104 	addi	r3,r2,4
   9a220:	e0fff715 	stw	r3,-36(fp)
   9a224:	10000015 	stw	zero,0(r2)
   9a228:	e0bffc17 	ldw	r2,-16(fp)
   9a22c:	10800730 	cmpltui	r2,r2,28
   9a230:	1000131e 	bne	r2,zero,9a280 <_calloc_r+0x110>
   9a234:	e0bff717 	ldw	r2,-36(fp)
   9a238:	10c00104 	addi	r3,r2,4
   9a23c:	e0fff715 	stw	r3,-36(fp)
   9a240:	10000015 	stw	zero,0(r2)
   9a244:	e0bff717 	ldw	r2,-36(fp)
   9a248:	10c00104 	addi	r3,r2,4
   9a24c:	e0fff715 	stw	r3,-36(fp)
   9a250:	10000015 	stw	zero,0(r2)
   9a254:	e0bffc17 	ldw	r2,-16(fp)
   9a258:	10800930 	cmpltui	r2,r2,36
   9a25c:	1000081e 	bne	r2,zero,9a280 <_calloc_r+0x110>
   9a260:	e0bff717 	ldw	r2,-36(fp)
   9a264:	10c00104 	addi	r3,r2,4
   9a268:	e0fff715 	stw	r3,-36(fp)
   9a26c:	10000015 	stw	zero,0(r2)
   9a270:	e0bff717 	ldw	r2,-36(fp)
   9a274:	10c00104 	addi	r3,r2,4
   9a278:	e0fff715 	stw	r3,-36(fp)
   9a27c:	10000015 	stw	zero,0(r2)
   9a280:	e0bff717 	ldw	r2,-36(fp)
   9a284:	10c00104 	addi	r3,r2,4
   9a288:	e0fff715 	stw	r3,-36(fp)
   9a28c:	10000015 	stw	zero,0(r2)
   9a290:	e0bff717 	ldw	r2,-36(fp)
   9a294:	10c00104 	addi	r3,r2,4
   9a298:	e0fff715 	stw	r3,-36(fp)
   9a29c:	10000015 	stw	zero,0(r2)
   9a2a0:	e0bff717 	ldw	r2,-36(fp)
   9a2a4:	10000015 	stw	zero,0(r2)
   9a2a8:	00000406 	br	9a2bc <_calloc_r+0x14c>
   9a2ac:	e1bffc17 	ldw	r6,-16(fp)
   9a2b0:	000b883a 	mov	r5,zero
   9a2b4:	e13ff917 	ldw	r4,-28(fp)
   9a2b8:	00880200 	call	88020 <memset>
    return mem;
   9a2bc:	e0bff917 	ldw	r2,-28(fp)
  }
}
   9a2c0:	e037883a 	mov	sp,fp
   9a2c4:	dfc00117 	ldw	ra,4(sp)
   9a2c8:	df000017 	ldw	fp,0(sp)
   9a2cc:	dec00204 	addi	sp,sp,8
   9a2d0:	f800283a 	ret

0009a2d4 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   9a2d4:	defff804 	addi	sp,sp,-32
   9a2d8:	dfc00715 	stw	ra,28(sp)
   9a2dc:	df000615 	stw	fp,24(sp)
   9a2e0:	df000604 	addi	fp,sp,24
   9a2e4:	e13ffd15 	stw	r4,-12(fp)
   9a2e8:	e17ffe15 	stw	r5,-8(fp)
   9a2ec:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
   9a2f0:	00900b80 	call	900b8 <__locale_mb_cur_max>
   9a2f4:	10800058 	cmpnei	r2,r2,1
   9a2f8:	10000a1e 	bne	r2,zero,9a324 <__fputwc+0x50>
   9a2fc:	e0bffe17 	ldw	r2,-8(fp)
   9a300:	0080080e 	bge	zero,r2,9a324 <__fputwc+0x50>
   9a304:	e0bffe17 	ldw	r2,-8(fp)
   9a308:	10804008 	cmpgei	r2,r2,256
   9a30c:	1000051e 	bne	r2,zero,9a324 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
   9a310:	e0bffe17 	ldw	r2,-8(fp)
   9a314:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
   9a318:	00800044 	movi	r2,1
   9a31c:	e0bffb15 	stw	r2,-20(fp)
   9a320:	00001406 	br	9a374 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
   9a324:	e0bfff17 	ldw	r2,-4(fp)
   9a328:	10c01704 	addi	r3,r2,92
   9a32c:	e0bffc04 	addi	r2,fp,-16
   9a330:	180f883a 	mov	r7,r3
   9a334:	e1bffe17 	ldw	r6,-8(fp)
   9a338:	100b883a 	mov	r5,r2
   9a33c:	e13ffd17 	ldw	r4,-12(fp)
   9a340:	009ce200 	call	9ce20 <_wcrtomb_r>
   9a344:	e0bffb15 	stw	r2,-20(fp)
   9a348:	e0bffb17 	ldw	r2,-20(fp)
   9a34c:	10bfffd8 	cmpnei	r2,r2,-1
   9a350:	1000081e 	bne	r2,zero,9a374 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
   9a354:	e0bfff17 	ldw	r2,-4(fp)
   9a358:	1080030b 	ldhu	r2,12(r2)
   9a35c:	10801014 	ori	r2,r2,64
   9a360:	1007883a 	mov	r3,r2
   9a364:	e0bfff17 	ldw	r2,-4(fp)
   9a368:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
   9a36c:	00bfffc4 	movi	r2,-1
   9a370:	00005006 	br	9a4b4 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
   9a374:	e03ffa15 	stw	zero,-24(fp)
   9a378:	00004a06 	br	9a4a4 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
   9a37c:	e0bfff17 	ldw	r2,-4(fp)
   9a380:	10800217 	ldw	r2,8(r2)
   9a384:	10ffffc4 	addi	r3,r2,-1
   9a388:	e0bfff17 	ldw	r2,-4(fp)
   9a38c:	10c00215 	stw	r3,8(r2)
   9a390:	e0bfff17 	ldw	r2,-4(fp)
   9a394:	10800217 	ldw	r2,8(r2)
   9a398:	10002c0e 	bge	r2,zero,9a44c <__fputwc+0x178>
   9a39c:	e0bfff17 	ldw	r2,-4(fp)
   9a3a0:	10c00217 	ldw	r3,8(r2)
   9a3a4:	e0bfff17 	ldw	r2,-4(fp)
   9a3a8:	10800617 	ldw	r2,24(r2)
   9a3ac:	18801c16 	blt	r3,r2,9a420 <__fputwc+0x14c>
   9a3b0:	e0bfff17 	ldw	r2,-4(fp)
   9a3b4:	10800017 	ldw	r2,0(r2)
   9a3b8:	e13ffc04 	addi	r4,fp,-16
   9a3bc:	e0fffa17 	ldw	r3,-24(fp)
   9a3c0:	20c7883a 	add	r3,r4,r3
   9a3c4:	18c00003 	ldbu	r3,0(r3)
   9a3c8:	10c00005 	stb	r3,0(r2)
   9a3cc:	e0bfff17 	ldw	r2,-4(fp)
   9a3d0:	10800017 	ldw	r2,0(r2)
   9a3d4:	10800003 	ldbu	r2,0(r2)
   9a3d8:	10803fcc 	andi	r2,r2,255
   9a3dc:	108002a0 	cmpeqi	r2,r2,10
   9a3e0:	1000091e 	bne	r2,zero,9a408 <__fputwc+0x134>
   9a3e4:	e0bfff17 	ldw	r2,-4(fp)
   9a3e8:	10800017 	ldw	r2,0(r2)
   9a3ec:	11000044 	addi	r4,r2,1
   9a3f0:	e0ffff17 	ldw	r3,-4(fp)
   9a3f4:	19000015 	stw	r4,0(r3)
   9a3f8:	10800003 	ldbu	r2,0(r2)
   9a3fc:	10803fcc 	andi	r2,r2,255
   9a400:	10bfffe0 	cmpeqi	r2,r2,-1
   9a404:	00002006 	br	9a488 <__fputwc+0x1b4>
   9a408:	e1bfff17 	ldw	r6,-4(fp)
   9a40c:	01400284 	movi	r5,10
   9a410:	e13ffd17 	ldw	r4,-12(fp)
   9a414:	008cf800 	call	8cf80 <__swbuf_r>
   9a418:	10bfffe0 	cmpeqi	r2,r2,-1
   9a41c:	00001a06 	br	9a488 <__fputwc+0x1b4>
   9a420:	e0fffc04 	addi	r3,fp,-16
   9a424:	e0bffa17 	ldw	r2,-24(fp)
   9a428:	1885883a 	add	r2,r3,r2
   9a42c:	10800003 	ldbu	r2,0(r2)
   9a430:	10803fcc 	andi	r2,r2,255
   9a434:	e1bfff17 	ldw	r6,-4(fp)
   9a438:	100b883a 	mov	r5,r2
   9a43c:	e13ffd17 	ldw	r4,-12(fp)
   9a440:	008cf800 	call	8cf80 <__swbuf_r>
   9a444:	10bfffe0 	cmpeqi	r2,r2,-1
   9a448:	00000f06 	br	9a488 <__fputwc+0x1b4>
   9a44c:	e0bfff17 	ldw	r2,-4(fp)
   9a450:	10800017 	ldw	r2,0(r2)
   9a454:	e13ffc04 	addi	r4,fp,-16
   9a458:	e0fffa17 	ldw	r3,-24(fp)
   9a45c:	20c7883a 	add	r3,r4,r3
   9a460:	18c00003 	ldbu	r3,0(r3)
   9a464:	10c00005 	stb	r3,0(r2)
   9a468:	e0bfff17 	ldw	r2,-4(fp)
   9a46c:	10800017 	ldw	r2,0(r2)
   9a470:	11000044 	addi	r4,r2,1
   9a474:	e0ffff17 	ldw	r3,-4(fp)
   9a478:	19000015 	stw	r4,0(r3)
   9a47c:	10800003 	ldbu	r2,0(r2)
   9a480:	10803fcc 	andi	r2,r2,255
   9a484:	10bfffe0 	cmpeqi	r2,r2,-1
   9a488:	10803fcc 	andi	r2,r2,255
   9a48c:	10000226 	beq	r2,zero,9a498 <__fputwc+0x1c4>
      return WEOF;
   9a490:	00bfffc4 	movi	r2,-1
   9a494:	00000706 	br	9a4b4 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
   9a498:	e0bffa17 	ldw	r2,-24(fp)
   9a49c:	10800044 	addi	r2,r2,1
   9a4a0:	e0bffa15 	stw	r2,-24(fp)
   9a4a4:	e0fffa17 	ldw	r3,-24(fp)
   9a4a8:	e0bffb17 	ldw	r2,-20(fp)
   9a4ac:	18bfb336 	bltu	r3,r2,9a37c <__alt_data_end+0xfffe837c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
   9a4b0:	e0bffe17 	ldw	r2,-8(fp)
}
   9a4b4:	e037883a 	mov	sp,fp
   9a4b8:	dfc00117 	ldw	ra,4(sp)
   9a4bc:	df000017 	ldw	fp,0(sp)
   9a4c0:	dec00204 	addi	sp,sp,8
   9a4c4:	f800283a 	ret

0009a4c8 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   9a4c8:	defffa04 	addi	sp,sp,-24
   9a4cc:	dfc00515 	stw	ra,20(sp)
   9a4d0:	df000415 	stw	fp,16(sp)
   9a4d4:	df000404 	addi	fp,sp,16
   9a4d8:	e13ffd15 	stw	r4,-12(fp)
   9a4dc:	e17ffe15 	stw	r5,-8(fp)
   9a4e0:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
   9a4e4:	e0bfff17 	ldw	r2,-4(fp)
   9a4e8:	1080030b 	ldhu	r2,12(r2)
   9a4ec:	10bfffcc 	andi	r2,r2,65535
   9a4f0:	1088000c 	andi	r2,r2,8192
   9a4f4:	10000b1e 	bne	r2,zero,9a524 <_fputwc_r+0x5c>
   9a4f8:	e0bfff17 	ldw	r2,-4(fp)
   9a4fc:	1080030b 	ldhu	r2,12(r2)
   9a500:	10880014 	ori	r2,r2,8192
   9a504:	1007883a 	mov	r3,r2
   9a508:	e0bfff17 	ldw	r2,-4(fp)
   9a50c:	10c0030d 	sth	r3,12(r2)
   9a510:	e0bfff17 	ldw	r2,-4(fp)
   9a514:	10801917 	ldw	r2,100(r2)
   9a518:	10c80014 	ori	r3,r2,8192
   9a51c:	e0bfff17 	ldw	r2,-4(fp)
   9a520:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
   9a524:	e1bfff17 	ldw	r6,-4(fp)
   9a528:	e17ffe17 	ldw	r5,-8(fp)
   9a52c:	e13ffd17 	ldw	r4,-12(fp)
   9a530:	009a2d40 	call	9a2d4 <__fputwc>
   9a534:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
   9a538:	e0bffc17 	ldw	r2,-16(fp)
}
   9a53c:	e037883a 	mov	sp,fp
   9a540:	dfc00117 	ldw	ra,4(sp)
   9a544:	df000017 	ldw	fp,0(sp)
   9a548:	dec00204 	addi	sp,sp,8
   9a54c:	f800283a 	ret

0009a550 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
   9a550:	defffa04 	addi	sp,sp,-24
   9a554:	dfc00515 	stw	ra,20(sp)
   9a558:	df000415 	stw	fp,16(sp)
   9a55c:	df000404 	addi	fp,sp,16
   9a560:	e13ffe15 	stw	r4,-8(fp)
   9a564:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
   9a568:	d0a00417 	ldw	r2,-32752(gp)
   9a56c:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
   9a570:	e0bffc17 	ldw	r2,-16(fp)
   9a574:	e0bffd15 	stw	r2,-12(fp)
   9a578:	e0bffd17 	ldw	r2,-12(fp)
   9a57c:	10000526 	beq	r2,zero,9a594 <fputwc+0x44>
   9a580:	e0bffd17 	ldw	r2,-12(fp)
   9a584:	10800e17 	ldw	r2,56(r2)
   9a588:	1000021e 	bne	r2,zero,9a594 <fputwc+0x44>
   9a58c:	e13ffd17 	ldw	r4,-12(fp)
   9a590:	008573c0 	call	8573c <__sinit>
  return _fputwc_r (reent, wc, fp);
   9a594:	e1bfff17 	ldw	r6,-4(fp)
   9a598:	e17ffe17 	ldw	r5,-8(fp)
   9a59c:	e13ffc17 	ldw	r4,-16(fp)
   9a5a0:	009a4c80 	call	9a4c8 <_fputwc_r>
}
   9a5a4:	e037883a 	mov	sp,fp
   9a5a8:	dfc00117 	ldw	ra,4(sp)
   9a5ac:	df000017 	ldw	fp,0(sp)
   9a5b0:	dec00204 	addi	sp,sp,8
   9a5b4:	f800283a 	ret

0009a5b8 <rshift>:

static void
_DEFUN(rshift, (b, k),
	_Bigint *b _AND
	int k)
{
   9a5b8:	defff804 	addi	sp,sp,-32
   9a5bc:	df000715 	stw	fp,28(sp)
   9a5c0:	df000704 	addi	fp,sp,28
   9a5c4:	e13ffe15 	stw	r4,-8(fp)
   9a5c8:	e17fff15 	stw	r5,-4(fp)
	__ULong *x, *x1, *xe, y;
	int n;

	x = x1 = b->_x;
   9a5cc:	e0bffe17 	ldw	r2,-8(fp)
   9a5d0:	10800504 	addi	r2,r2,20
   9a5d4:	e0bffa15 	stw	r2,-24(fp)
   9a5d8:	e0bffa17 	ldw	r2,-24(fp)
   9a5dc:	e0bff915 	stw	r2,-28(fp)
	n = k >> kshift;
   9a5e0:	e0bfff17 	ldw	r2,-4(fp)
   9a5e4:	1005d17a 	srai	r2,r2,5
   9a5e8:	e0bffc15 	stw	r2,-16(fp)
	if (n < b->_wds) {
   9a5ec:	e0bffe17 	ldw	r2,-8(fp)
   9a5f0:	10800417 	ldw	r2,16(r2)
   9a5f4:	e0fffc17 	ldw	r3,-16(fp)
   9a5f8:	1880490e 	bge	r3,r2,9a720 <rshift+0x168>
		xe = x + b->_wds;
   9a5fc:	e0bffe17 	ldw	r2,-8(fp)
   9a600:	10800417 	ldw	r2,16(r2)
   9a604:	1085883a 	add	r2,r2,r2
   9a608:	1085883a 	add	r2,r2,r2
   9a60c:	1007883a 	mov	r3,r2
   9a610:	e0bff917 	ldw	r2,-28(fp)
   9a614:	10c5883a 	add	r2,r2,r3
   9a618:	e0bffd15 	stw	r2,-12(fp)
		x += n;
   9a61c:	e0bffc17 	ldw	r2,-16(fp)
   9a620:	1085883a 	add	r2,r2,r2
   9a624:	1085883a 	add	r2,r2,r2
   9a628:	1007883a 	mov	r3,r2
   9a62c:	e0bff917 	ldw	r2,-28(fp)
   9a630:	10c5883a 	add	r2,r2,r3
   9a634:	e0bff915 	stw	r2,-28(fp)
		if (k &= kmask) {
   9a638:	e0bfff17 	ldw	r2,-4(fp)
   9a63c:	108007cc 	andi	r2,r2,31
   9a640:	e0bfff15 	stw	r2,-4(fp)
   9a644:	e0bfff17 	ldw	r2,-4(fp)
   9a648:	10003226 	beq	r2,zero,9a714 <rshift+0x15c>
			n = ULbits - k;
   9a64c:	00c00804 	movi	r3,32
   9a650:	e0bfff17 	ldw	r2,-4(fp)
   9a654:	1885c83a 	sub	r2,r3,r2
   9a658:	e0bffc15 	stw	r2,-16(fp)
			y = *x++ >> k;
   9a65c:	e0bff917 	ldw	r2,-28(fp)
   9a660:	10c00104 	addi	r3,r2,4
   9a664:	e0fff915 	stw	r3,-28(fp)
   9a668:	10c00017 	ldw	r3,0(r2)
   9a66c:	e0bfff17 	ldw	r2,-4(fp)
   9a670:	1884d83a 	srl	r2,r3,r2
   9a674:	e0bffb15 	stw	r2,-20(fp)
			while(x < xe) {
   9a678:	00001106 	br	9a6c0 <rshift+0x108>
				*x1++ = (y | (*x << n)) & ALL_ON;
   9a67c:	e0bffa17 	ldw	r2,-24(fp)
   9a680:	10c00104 	addi	r3,r2,4
   9a684:	e0fffa15 	stw	r3,-24(fp)
   9a688:	e0fff917 	ldw	r3,-28(fp)
   9a68c:	19000017 	ldw	r4,0(r3)
   9a690:	e0fffc17 	ldw	r3,-16(fp)
   9a694:	20c8983a 	sll	r4,r4,r3
   9a698:	e0fffb17 	ldw	r3,-20(fp)
   9a69c:	20c6b03a 	or	r3,r4,r3
   9a6a0:	10c00015 	stw	r3,0(r2)
				y = *x++ >> k;
   9a6a4:	e0bff917 	ldw	r2,-28(fp)
   9a6a8:	10c00104 	addi	r3,r2,4
   9a6ac:	e0fff915 	stw	r3,-28(fp)
   9a6b0:	10c00017 	ldw	r3,0(r2)
   9a6b4:	e0bfff17 	ldw	r2,-4(fp)
   9a6b8:	1884d83a 	srl	r2,r3,r2
   9a6bc:	e0bffb15 	stw	r2,-20(fp)
		xe = x + b->_wds;
		x += n;
		if (k &= kmask) {
			n = ULbits - k;
			y = *x++ >> k;
			while(x < xe) {
   9a6c0:	e0fff917 	ldw	r3,-28(fp)
   9a6c4:	e0bffd17 	ldw	r2,-12(fp)
   9a6c8:	18bfec36 	bltu	r3,r2,9a67c <__alt_data_end+0xfffe867c>
				*x1++ = (y | (*x << n)) & ALL_ON;
				y = *x++ >> k;
				}
			if ((*x1 = y) !=0)
   9a6cc:	e0bffa17 	ldw	r2,-24(fp)
   9a6d0:	e0fffb17 	ldw	r3,-20(fp)
   9a6d4:	10c00015 	stw	r3,0(r2)
   9a6d8:	e0bffa17 	ldw	r2,-24(fp)
   9a6dc:	10800017 	ldw	r2,0(r2)
   9a6e0:	10000f26 	beq	r2,zero,9a720 <rshift+0x168>
				x1++;
   9a6e4:	e0bffa17 	ldw	r2,-24(fp)
   9a6e8:	10800104 	addi	r2,r2,4
   9a6ec:	e0bffa15 	stw	r2,-24(fp)
   9a6f0:	00000b06 	br	9a720 <rshift+0x168>
			}
		else
			while(x < xe)
				*x1++ = *x++;
   9a6f4:	e0bffa17 	ldw	r2,-24(fp)
   9a6f8:	10c00104 	addi	r3,r2,4
   9a6fc:	e0fffa15 	stw	r3,-24(fp)
   9a700:	e0fff917 	ldw	r3,-28(fp)
   9a704:	19000104 	addi	r4,r3,4
   9a708:	e13ff915 	stw	r4,-28(fp)
   9a70c:	18c00017 	ldw	r3,0(r3)
   9a710:	10c00015 	stw	r3,0(r2)
				}
			if ((*x1 = y) !=0)
				x1++;
			}
		else
			while(x < xe)
   9a714:	e0fff917 	ldw	r3,-28(fp)
   9a718:	e0bffd17 	ldw	r2,-12(fp)
   9a71c:	18bff536 	bltu	r3,r2,9a6f4 <__alt_data_end+0xfffe86f4>
				*x1++ = *x++;
		}
	if ((b->_wds = x1 - b->_x) == 0)
   9a720:	e0bffa17 	ldw	r2,-24(fp)
   9a724:	e0fffe17 	ldw	r3,-8(fp)
   9a728:	18c00504 	addi	r3,r3,20
   9a72c:	10c5c83a 	sub	r2,r2,r3
   9a730:	1005d0ba 	srai	r2,r2,2
   9a734:	1007883a 	mov	r3,r2
   9a738:	e0bffe17 	ldw	r2,-8(fp)
   9a73c:	10c00415 	stw	r3,16(r2)
   9a740:	e0bffe17 	ldw	r2,-8(fp)
   9a744:	10800417 	ldw	r2,16(r2)
   9a748:	1000021e 	bne	r2,zero,9a754 <rshift+0x19c>
		b->_x[0] = 0;
   9a74c:	e0bffe17 	ldw	r2,-8(fp)
   9a750:	10000515 	stw	zero,20(r2)
}
   9a754:	0001883a 	nop
   9a758:	e037883a 	mov	sp,fp
   9a75c:	df000017 	ldw	fp,0(sp)
   9a760:	dec00104 	addi	sp,sp,4
   9a764:	f800283a 	ret

0009a768 <increment>:

static _Bigint *
_DEFUN (increment, (ptr, b),
	struct _reent *ptr _AND
	_Bigint *b)
{
   9a768:	defff904 	addi	sp,sp,-28
   9a76c:	dfc00615 	stw	ra,24(sp)
   9a770:	df000515 	stw	fp,20(sp)
   9a774:	df000504 	addi	fp,sp,20
   9a778:	e13ffe15 	stw	r4,-8(fp)
   9a77c:	e17fff15 	stw	r5,-4(fp)
	_Bigint *b1;
#ifdef Pack_16
	__ULong carry = 1, y;
#endif

	x = b->_x;
   9a780:	e0bfff17 	ldw	r2,-4(fp)
   9a784:	10800504 	addi	r2,r2,20
   9a788:	e0bffb15 	stw	r2,-20(fp)
	xe = x + b->_wds;
   9a78c:	e0bfff17 	ldw	r2,-4(fp)
   9a790:	10800417 	ldw	r2,16(r2)
   9a794:	1085883a 	add	r2,r2,r2
   9a798:	1085883a 	add	r2,r2,r2
   9a79c:	1007883a 	mov	r3,r2
   9a7a0:	e0bffb17 	ldw	r2,-20(fp)
   9a7a4:	10c5883a 	add	r2,r2,r3
   9a7a8:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
	do {
		if (*x < (__ULong)0xffffffffL) {
   9a7ac:	e0bffb17 	ldw	r2,-20(fp)
   9a7b0:	10800017 	ldw	r2,0(r2)
   9a7b4:	10bfffe0 	cmpeqi	r2,r2,-1
   9a7b8:	1000071e 	bne	r2,zero,9a7d8 <increment+0x70>
			++*x;
   9a7bc:	e0bffb17 	ldw	r2,-20(fp)
   9a7c0:	10800017 	ldw	r2,0(r2)
   9a7c4:	10c00044 	addi	r3,r2,1
   9a7c8:	e0bffb17 	ldw	r2,-20(fp)
   9a7cc:	10c00015 	stw	r3,0(r2)
			return b;
   9a7d0:	e0bfff17 	ldw	r2,-4(fp)
   9a7d4:	00003206 	br	9a8a0 <increment+0x138>
			}
		*x++ = 0;
   9a7d8:	e0bffb17 	ldw	r2,-20(fp)
   9a7dc:	10c00104 	addi	r3,r2,4
   9a7e0:	e0fffb15 	stw	r3,-20(fp)
   9a7e4:	10000015 	stw	zero,0(r2)
		} while(x < xe);
   9a7e8:	e0fffb17 	ldw	r3,-20(fp)
   9a7ec:	e0bffc17 	ldw	r2,-16(fp)
   9a7f0:	18bfee36 	bltu	r3,r2,9a7ac <__alt_data_end+0xfffe87ac>
			return b;
		} while(x < xe);
	if (carry)
#endif
	{
		if (b->_wds >= b->_maxwds) {
   9a7f4:	e0bfff17 	ldw	r2,-4(fp)
   9a7f8:	10c00417 	ldw	r3,16(r2)
   9a7fc:	e0bfff17 	ldw	r2,-4(fp)
   9a800:	10800217 	ldw	r2,8(r2)
   9a804:	18801916 	blt	r3,r2,9a86c <increment+0x104>
			b1 = Balloc(ptr, b->_k+1);
   9a808:	e0bfff17 	ldw	r2,-4(fp)
   9a80c:	10800117 	ldw	r2,4(r2)
   9a810:	10800044 	addi	r2,r2,1
   9a814:	100b883a 	mov	r5,r2
   9a818:	e13ffe17 	ldw	r4,-8(fp)
   9a81c:	0090a2c0 	call	90a2c <_Balloc>
   9a820:	e0bffd15 	stw	r2,-12(fp)
			Bcopy(b1, b);
   9a824:	e0bffd17 	ldw	r2,-12(fp)
   9a828:	10c00304 	addi	r3,r2,12
   9a82c:	e0bfff17 	ldw	r2,-4(fp)
   9a830:	11000304 	addi	r4,r2,12
   9a834:	e0bfff17 	ldw	r2,-4(fp)
   9a838:	10800417 	ldw	r2,16(r2)
   9a83c:	10800084 	addi	r2,r2,2
   9a840:	1085883a 	add	r2,r2,r2
   9a844:	1085883a 	add	r2,r2,r2
   9a848:	100d883a 	mov	r6,r2
   9a84c:	200b883a 	mov	r5,r4
   9a850:	1809883a 	mov	r4,r3
   9a854:	009069c0 	call	9069c <memcpy>
			Bfree(ptr, b);
   9a858:	e17fff17 	ldw	r5,-4(fp)
   9a85c:	e13ffe17 	ldw	r4,-8(fp)
   9a860:	0090b5c0 	call	90b5c <_Bfree>
			b = b1;
   9a864:	e0bffd17 	ldw	r2,-12(fp)
   9a868:	e0bfff15 	stw	r2,-4(fp)
			}
		b->_x[b->_wds++] = 1;
   9a86c:	e0bfff17 	ldw	r2,-4(fp)
   9a870:	10800417 	ldw	r2,16(r2)
   9a874:	11000044 	addi	r4,r2,1
   9a878:	e0ffff17 	ldw	r3,-4(fp)
   9a87c:	19000415 	stw	r4,16(r3)
   9a880:	e0ffff17 	ldw	r3,-4(fp)
   9a884:	10800144 	addi	r2,r2,5
   9a888:	1085883a 	add	r2,r2,r2
   9a88c:	1085883a 	add	r2,r2,r2
   9a890:	1885883a 	add	r2,r3,r2
   9a894:	00c00044 	movi	r3,1
   9a898:	10c00015 	stw	r3,0(r2)
		}
	return b;
   9a89c:	e0bfff17 	ldw	r2,-4(fp)
}
   9a8a0:	e037883a 	mov	sp,fp
   9a8a4:	dfc00117 	ldw	ra,4(sp)
   9a8a8:	df000017 	ldw	fp,0(sp)
   9a8ac:	dec00204 	addi	sp,sp,8
   9a8b0:	f800283a 	ret

0009a8b4 <__gethex>:
	_CONST char **sp _AND
	_CONST FPI *fpi _AND
	Long *exp _AND
	_Bigint **bp _AND
	int sign)
{
   9a8b4:	deffe404 	addi	sp,sp,-112
   9a8b8:	dfc01b15 	stw	ra,108(sp)
   9a8bc:	df001a15 	stw	fp,104(sp)
   9a8c0:	dc001915 	stw	r16,100(sp)
   9a8c4:	df001a04 	addi	fp,sp,104
   9a8c8:	e13ffb15 	stw	r4,-20(fp)
   9a8cc:	e17ffc15 	stw	r5,-16(fp)
   9a8d0:	e1bffd15 	stw	r6,-12(fp)
   9a8d4:	e1fffe15 	stw	r7,-8(fp)
	_CONST unsigned char *decpt, *s0, *s, *s1;
	int esign, havedig, irv, k, n, nbits, up, zret;
	__ULong L, lostbits, *x;
	Long e, e1;
	unsigned char *decimalpoint = (unsigned char *)
				      _localeconv_r (ptr)->decimal_point;
   9a8d8:	e13ffb17 	ldw	r4,-20(fp)
   9a8dc:	009011c0 	call	9011c <_localeconv_r>
	_Bigint *b;
	_CONST unsigned char *decpt, *s0, *s, *s1;
	int esign, havedig, irv, k, n, nbits, up, zret;
	__ULong L, lostbits, *x;
	Long e, e1;
	unsigned char *decimalpoint = (unsigned char *)
   9a8e0:	10800017 	ldw	r2,0(r2)
   9a8e4:	e0bff815 	stw	r2,-32(fp)
				      _localeconv_r (ptr)->decimal_point;
	size_t decp_len = strlen ((const char *) decimalpoint);
   9a8e8:	e13ff817 	ldw	r4,-32(fp)
   9a8ec:	0088c340 	call	88c34 <strlen>
   9a8f0:	e0bff915 	stw	r2,-28(fp)
	unsigned char decp_end = decimalpoint[decp_len - 1];
   9a8f4:	e0bff917 	ldw	r2,-28(fp)
   9a8f8:	10bfffc4 	addi	r2,r2,-1
   9a8fc:	e0fff817 	ldw	r3,-32(fp)
   9a900:	1885883a 	add	r2,r3,r2
   9a904:	10800003 	ldbu	r2,0(r2)
   9a908:	e0bffa05 	stb	r2,-24(fp)

	havedig = 0;
   9a90c:	e03fec15 	stw	zero,-80(fp)
	s0 = *(_CONST unsigned char **)sp + 2;
   9a910:	e0bffc17 	ldw	r2,-16(fp)
   9a914:	10800017 	ldw	r2,0(r2)
   9a918:	10800084 	addi	r2,r2,2
   9a91c:	e0bfe815 	stw	r2,-96(fp)
	while(s0[havedig] == '0')
   9a920:	00000306 	br	9a930 <__gethex+0x7c>
		havedig++;
   9a924:	e0bfec17 	ldw	r2,-80(fp)
   9a928:	10800044 	addi	r2,r2,1
   9a92c:	e0bfec15 	stw	r2,-80(fp)
	size_t decp_len = strlen ((const char *) decimalpoint);
	unsigned char decp_end = decimalpoint[decp_len - 1];

	havedig = 0;
	s0 = *(_CONST unsigned char **)sp + 2;
	while(s0[havedig] == '0')
   9a930:	e0bfec17 	ldw	r2,-80(fp)
   9a934:	e0ffe817 	ldw	r3,-96(fp)
   9a938:	1885883a 	add	r2,r3,r2
   9a93c:	10800003 	ldbu	r2,0(r2)
   9a940:	10803fcc 	andi	r2,r2,255
   9a944:	10800c20 	cmpeqi	r2,r2,48
   9a948:	103ff61e 	bne	r2,zero,9a924 <__alt_data_end+0xfffe8924>
		havedig++;
	s0 += havedig;
   9a94c:	e0bfec17 	ldw	r2,-80(fp)
   9a950:	e0ffe817 	ldw	r3,-96(fp)
   9a954:	1885883a 	add	r2,r3,r2
   9a958:	e0bfe815 	stw	r2,-96(fp)
	s = s0;
   9a95c:	e0bfe817 	ldw	r2,-96(fp)
   9a960:	e0bfe915 	stw	r2,-92(fp)
	decpt = 0;
   9a964:	e03fe715 	stw	zero,-100(fp)
	zret = 0;
   9a968:	e03ff215 	stw	zero,-56(fp)
	e = 0;
   9a96c:	e03ff615 	stw	zero,-40(fp)
	if (!__get_hexdig(*s)) {
   9a970:	e0bfe917 	ldw	r2,-92(fp)
   9a974:	10800003 	ldbu	r2,0(r2)
   9a978:	10c03fcc 	andi	r3,r2,255
   9a97c:	008002b4 	movhi	r2,10
   9a980:	10851384 	addi	r2,r2,5198
   9a984:	10c5883a 	add	r2,r2,r3
   9a988:	10800003 	ldbu	r2,0(r2)
   9a98c:	10803fcc 	andi	r2,r2,255
   9a990:	1000311e 	bne	r2,zero,9aa58 <__gethex+0x1a4>
		zret = 1;
   9a994:	00800044 	movi	r2,1
   9a998:	e0bff215 	stw	r2,-56(fp)
		if (strncmp ((const char *) s, (const char *) decimalpoint,
   9a99c:	e1bff917 	ldw	r6,-28(fp)
   9a9a0:	e17ff817 	ldw	r5,-32(fp)
   9a9a4:	e13fe917 	ldw	r4,-92(fp)
   9a9a8:	009b7500 	call	9b750 <strncmp>
   9a9ac:	1000571e 	bne	r2,zero,9ab0c <__gethex+0x258>
			     decp_len) != 0)
			goto pcheck;
		decpt = (s += decp_len);
   9a9b0:	e0ffe917 	ldw	r3,-92(fp)
   9a9b4:	e0bff917 	ldw	r2,-28(fp)
   9a9b8:	1885883a 	add	r2,r3,r2
   9a9bc:	e0bfe915 	stw	r2,-92(fp)
   9a9c0:	e0bfe917 	ldw	r2,-92(fp)
   9a9c4:	e0bfe715 	stw	r2,-100(fp)
		if (!__get_hexdig(*s))
   9a9c8:	e0bfe917 	ldw	r2,-92(fp)
   9a9cc:	10800003 	ldbu	r2,0(r2)
   9a9d0:	10c03fcc 	andi	r3,r2,255
   9a9d4:	008002b4 	movhi	r2,10
   9a9d8:	10851384 	addi	r2,r2,5198
   9a9dc:	10c5883a 	add	r2,r2,r3
   9a9e0:	10800003 	ldbu	r2,0(r2)
   9a9e4:	10803fcc 	andi	r2,r2,255
   9a9e8:	10004a26 	beq	r2,zero,9ab14 <__gethex+0x260>
			goto pcheck;
		while(*s == '0')
   9a9ec:	00000306 	br	9a9fc <__gethex+0x148>
			s++;
   9a9f0:	e0bfe917 	ldw	r2,-92(fp)
   9a9f4:	10800044 	addi	r2,r2,1
   9a9f8:	e0bfe915 	stw	r2,-92(fp)
			     decp_len) != 0)
			goto pcheck;
		decpt = (s += decp_len);
		if (!__get_hexdig(*s))
			goto pcheck;
		while(*s == '0')
   9a9fc:	e0bfe917 	ldw	r2,-92(fp)
   9aa00:	10800003 	ldbu	r2,0(r2)
   9aa04:	10803fcc 	andi	r2,r2,255
   9aa08:	10800c20 	cmpeqi	r2,r2,48
   9aa0c:	103ff81e 	bne	r2,zero,9a9f0 <__alt_data_end+0xfffe89f0>
			s++;
		if (__get_hexdig(*s))
   9aa10:	e0bfe917 	ldw	r2,-92(fp)
   9aa14:	10800003 	ldbu	r2,0(r2)
   9aa18:	10c03fcc 	andi	r3,r2,255
   9aa1c:	008002b4 	movhi	r2,10
   9aa20:	10851384 	addi	r2,r2,5198
   9aa24:	10c5883a 	add	r2,r2,r3
   9aa28:	10800003 	ldbu	r2,0(r2)
   9aa2c:	10803fcc 	andi	r2,r2,255
   9aa30:	10000126 	beq	r2,zero,9aa38 <__gethex+0x184>
			zret = 0;
   9aa34:	e03ff215 	stw	zero,-56(fp)
		havedig = 1;
   9aa38:	00800044 	movi	r2,1
   9aa3c:	e0bfec15 	stw	r2,-80(fp)
		s0 = s;
   9aa40:	e0bfe917 	ldw	r2,-92(fp)
   9aa44:	e0bfe815 	stw	r2,-96(fp)
		}
	while(__get_hexdig(*s))
   9aa48:	00000306 	br	9aa58 <__gethex+0x1a4>
		s++;
   9aa4c:	e0bfe917 	ldw	r2,-92(fp)
   9aa50:	10800044 	addi	r2,r2,1
   9aa54:	e0bfe915 	stw	r2,-92(fp)
		if (__get_hexdig(*s))
			zret = 0;
		havedig = 1;
		s0 = s;
		}
	while(__get_hexdig(*s))
   9aa58:	e0bfe917 	ldw	r2,-92(fp)
   9aa5c:	10800003 	ldbu	r2,0(r2)
   9aa60:	10c03fcc 	andi	r3,r2,255
   9aa64:	008002b4 	movhi	r2,10
   9aa68:	10851384 	addi	r2,r2,5198
   9aa6c:	10c5883a 	add	r2,r2,r3
   9aa70:	10800003 	ldbu	r2,0(r2)
   9aa74:	10803fcc 	andi	r2,r2,255
   9aa78:	103ff41e 	bne	r2,zero,9aa4c <__alt_data_end+0xfffe8a4c>
		s++;
	if (strncmp ((const char *) s, (const char *) decimalpoint,
   9aa7c:	e1bff917 	ldw	r6,-28(fp)
   9aa80:	e17ff817 	ldw	r5,-32(fp)
   9aa84:	e13fe917 	ldw	r4,-92(fp)
   9aa88:	009b7500 	call	9b750 <strncmp>
   9aa8c:	1000151e 	bne	r2,zero,9aae4 <__gethex+0x230>
		     decp_len) == 0
	    && !decpt) {
   9aa90:	e0bfe717 	ldw	r2,-100(fp)
   9aa94:	1000131e 	bne	r2,zero,9aae4 <__gethex+0x230>
		decpt = (s += decp_len);
   9aa98:	e0ffe917 	ldw	r3,-92(fp)
   9aa9c:	e0bff917 	ldw	r2,-28(fp)
   9aaa0:	1885883a 	add	r2,r3,r2
   9aaa4:	e0bfe915 	stw	r2,-92(fp)
   9aaa8:	e0bfe917 	ldw	r2,-92(fp)
   9aaac:	e0bfe715 	stw	r2,-100(fp)
		while(__get_hexdig(*s))
   9aab0:	00000306 	br	9aac0 <__gethex+0x20c>
			s++;
   9aab4:	e0bfe917 	ldw	r2,-92(fp)
   9aab8:	10800044 	addi	r2,r2,1
   9aabc:	e0bfe915 	stw	r2,-92(fp)
		s++;
	if (strncmp ((const char *) s, (const char *) decimalpoint,
		     decp_len) == 0
	    && !decpt) {
		decpt = (s += decp_len);
		while(__get_hexdig(*s))
   9aac0:	e0bfe917 	ldw	r2,-92(fp)
   9aac4:	10800003 	ldbu	r2,0(r2)
   9aac8:	10c03fcc 	andi	r3,r2,255
   9aacc:	008002b4 	movhi	r2,10
   9aad0:	10851384 	addi	r2,r2,5198
   9aad4:	10c5883a 	add	r2,r2,r3
   9aad8:	10800003 	ldbu	r2,0(r2)
   9aadc:	10803fcc 	andi	r2,r2,255
   9aae0:	103ff41e 	bne	r2,zero,9aab4 <__alt_data_end+0xfffe8ab4>
			s++;
		}
	if (decpt)
   9aae4:	e0bfe717 	ldw	r2,-100(fp)
   9aae8:	10000b26 	beq	r2,zero,9ab18 <__gethex+0x264>
		e = -(((Long)(s-decpt)) << 2);
   9aaec:	e0ffe917 	ldw	r3,-92(fp)
   9aaf0:	e0bfe717 	ldw	r2,-100(fp)
   9aaf4:	1885c83a 	sub	r2,r3,r2
   9aaf8:	1085883a 	add	r2,r2,r2
   9aafc:	1085883a 	add	r2,r2,r2
   9ab00:	0085c83a 	sub	r2,zero,r2
   9ab04:	e0bff615 	stw	r2,-40(fp)
   9ab08:	00000306 	br	9ab18 <__gethex+0x264>
	e = 0;
	if (!__get_hexdig(*s)) {
		zret = 1;
		if (strncmp ((const char *) s, (const char *) decimalpoint,
			     decp_len) != 0)
			goto pcheck;
   9ab0c:	0001883a 	nop
   9ab10:	00000106 	br	9ab18 <__gethex+0x264>
		decpt = (s += decp_len);
		if (!__get_hexdig(*s))
			goto pcheck;
   9ab14:	0001883a 	nop
			s++;
		}
	if (decpt)
		e = -(((Long)(s-decpt)) << 2);
 pcheck:
	s1 = s;
   9ab18:	e0bfe917 	ldw	r2,-92(fp)
   9ab1c:	e0bfea15 	stw	r2,-88(fp)
	switch(*s) {
   9ab20:	e0bfe917 	ldw	r2,-92(fp)
   9ab24:	10800003 	ldbu	r2,0(r2)
   9ab28:	10803fcc 	andi	r2,r2,255
   9ab2c:	10c01420 	cmpeqi	r3,r2,80
   9ab30:	1800021e 	bne	r3,zero,9ab3c <__gethex+0x288>
   9ab34:	10801c20 	cmpeqi	r2,r2,112
   9ab38:	10004726 	beq	r2,zero,9ac58 <__gethex+0x3a4>
	  case 'p':
	  case 'P':
		esign = 0;
   9ab3c:	e03feb15 	stw	zero,-84(fp)
		switch(*++s) {
   9ab40:	e0bfe917 	ldw	r2,-92(fp)
   9ab44:	10800044 	addi	r2,r2,1
   9ab48:	e0bfe915 	stw	r2,-92(fp)
   9ab4c:	e0bfe917 	ldw	r2,-92(fp)
   9ab50:	10800003 	ldbu	r2,0(r2)
   9ab54:	10803fcc 	andi	r2,r2,255
   9ab58:	10c00ae0 	cmpeqi	r3,r2,43
   9ab5c:	1800041e 	bne	r3,zero,9ab70 <__gethex+0x2bc>
   9ab60:	10800b60 	cmpeqi	r2,r2,45
   9ab64:	10000526 	beq	r2,zero,9ab7c <__gethex+0x2c8>
		  case '-':
			esign = 1;
   9ab68:	00800044 	movi	r2,1
   9ab6c:	e0bfeb15 	stw	r2,-84(fp)
			/* no break */
		  case '+':
			s++;
   9ab70:	e0bfe917 	ldw	r2,-92(fp)
   9ab74:	10800044 	addi	r2,r2,1
   9ab78:	e0bfe915 	stw	r2,-92(fp)
		  }
		if ((n = __get_hexdig(*s)) == 0 || n > 0x19) {
   9ab7c:	e0bfe917 	ldw	r2,-92(fp)
   9ab80:	10800003 	ldbu	r2,0(r2)
   9ab84:	10c03fcc 	andi	r3,r2,255
   9ab88:	008002b4 	movhi	r2,10
   9ab8c:	10851384 	addi	r2,r2,5198
   9ab90:	10c5883a 	add	r2,r2,r3
   9ab94:	10800003 	ldbu	r2,0(r2)
   9ab98:	10803fcc 	andi	r2,r2,255
   9ab9c:	e0bfef15 	stw	r2,-68(fp)
   9aba0:	e0bfef17 	ldw	r2,-68(fp)
   9aba4:	10000326 	beq	r2,zero,9abb4 <__gethex+0x300>
   9aba8:	e0bfef17 	ldw	r2,-68(fp)
   9abac:	10800690 	cmplti	r2,r2,26
   9abb0:	1000031e 	bne	r2,zero,9abc0 <__gethex+0x30c>
			s = s1;
   9abb4:	e0bfea17 	ldw	r2,-88(fp)
   9abb8:	e0bfe915 	stw	r2,-92(fp)
			break;
   9abbc:	00002606 	br	9ac58 <__gethex+0x3a4>
			}
		e1 = n - 0x10;
   9abc0:	e0bfef17 	ldw	r2,-68(fp)
   9abc4:	10bffc04 	addi	r2,r2,-16
   9abc8:	e0bff715 	stw	r2,-36(fp)
		while((n = __get_hexdig(*++s)) !=0 && n <= 0x19)
   9abcc:	00000806 	br	9abf0 <__gethex+0x33c>
			e1 = 10*e1 + n - 0x10;
   9abd0:	01400284 	movi	r5,10
   9abd4:	e13ff717 	ldw	r4,-36(fp)
   9abd8:	00823a00 	call	823a0 <__mulsi3>
   9abdc:	1007883a 	mov	r3,r2
   9abe0:	e0bfef17 	ldw	r2,-68(fp)
   9abe4:	1885883a 	add	r2,r3,r2
   9abe8:	10bffc04 	addi	r2,r2,-16
   9abec:	e0bff715 	stw	r2,-36(fp)
		if ((n = __get_hexdig(*s)) == 0 || n > 0x19) {
			s = s1;
			break;
			}
		e1 = n - 0x10;
		while((n = __get_hexdig(*++s)) !=0 && n <= 0x19)
   9abf0:	e0bfe917 	ldw	r2,-92(fp)
   9abf4:	10800044 	addi	r2,r2,1
   9abf8:	e0bfe915 	stw	r2,-92(fp)
   9abfc:	e0bfe917 	ldw	r2,-92(fp)
   9ac00:	10800003 	ldbu	r2,0(r2)
   9ac04:	10c03fcc 	andi	r3,r2,255
   9ac08:	008002b4 	movhi	r2,10
   9ac0c:	10851384 	addi	r2,r2,5198
   9ac10:	10c5883a 	add	r2,r2,r3
   9ac14:	10800003 	ldbu	r2,0(r2)
   9ac18:	10803fcc 	andi	r2,r2,255
   9ac1c:	e0bfef15 	stw	r2,-68(fp)
   9ac20:	e0bfef17 	ldw	r2,-68(fp)
   9ac24:	10000326 	beq	r2,zero,9ac34 <__gethex+0x380>
   9ac28:	e0bfef17 	ldw	r2,-68(fp)
   9ac2c:	10800690 	cmplti	r2,r2,26
   9ac30:	103fe71e 	bne	r2,zero,9abd0 <__alt_data_end+0xfffe8bd0>
			e1 = 10*e1 + n - 0x10;
		if (esign)
   9ac34:	e0bfeb17 	ldw	r2,-84(fp)
   9ac38:	10000326 	beq	r2,zero,9ac48 <__gethex+0x394>
			e1 = -e1;
   9ac3c:	e0bff717 	ldw	r2,-36(fp)
   9ac40:	0085c83a 	sub	r2,zero,r2
   9ac44:	e0bff715 	stw	r2,-36(fp)
		e += e1;
   9ac48:	e0fff617 	ldw	r3,-40(fp)
   9ac4c:	e0bff717 	ldw	r2,-36(fp)
   9ac50:	1885883a 	add	r2,r3,r2
   9ac54:	e0bff615 	stw	r2,-40(fp)
	  }
	*sp = (char*)s;
   9ac58:	e0bffc17 	ldw	r2,-16(fp)
   9ac5c:	e0ffe917 	ldw	r3,-92(fp)
   9ac60:	10c00015 	stw	r3,0(r2)
	if (zret)
   9ac64:	e0bff217 	ldw	r2,-56(fp)
   9ac68:	10000626 	beq	r2,zero,9ac84 <__gethex+0x3d0>
		return havedig ? STRTOG_Zero : STRTOG_NoNumber;
   9ac6c:	e0bfec17 	ldw	r2,-80(fp)
   9ac70:	10000226 	beq	r2,zero,9ac7c <__gethex+0x3c8>
   9ac74:	0005883a 	mov	r2,zero
   9ac78:	0001b106 	br	9b340 <__gethex+0xa8c>
   9ac7c:	00800184 	movi	r2,6
   9ac80:	0001af06 	br	9b340 <__gethex+0xa8c>
	n = s1 - s0 - 1;
   9ac84:	e0ffea17 	ldw	r3,-88(fp)
   9ac88:	e0bfe817 	ldw	r2,-96(fp)
   9ac8c:	1885c83a 	sub	r2,r3,r2
   9ac90:	10bfffc4 	addi	r2,r2,-1
   9ac94:	e0bfef15 	stw	r2,-68(fp)
	for(k = 0; n > 7; n >>= 1)
   9ac98:	e03fee15 	stw	zero,-72(fp)
   9ac9c:	00000606 	br	9acb8 <__gethex+0x404>
		k++;
   9aca0:	e0bfee17 	ldw	r2,-72(fp)
   9aca4:	10800044 	addi	r2,r2,1
   9aca8:	e0bfee15 	stw	r2,-72(fp)
	  }
	*sp = (char*)s;
	if (zret)
		return havedig ? STRTOG_Zero : STRTOG_NoNumber;
	n = s1 - s0 - 1;
	for(k = 0; n > 7; n >>= 1)
   9acac:	e0bfef17 	ldw	r2,-68(fp)
   9acb0:	1005d07a 	srai	r2,r2,1
   9acb4:	e0bfef15 	stw	r2,-68(fp)
   9acb8:	e0bfef17 	ldw	r2,-68(fp)
   9acbc:	10800208 	cmpgei	r2,r2,8
   9acc0:	103ff71e 	bne	r2,zero,9aca0 <__alt_data_end+0xfffe8ca0>
		k++;
	b = Balloc(ptr, k);
   9acc4:	e17fee17 	ldw	r5,-72(fp)
   9acc8:	e13ffb17 	ldw	r4,-20(fp)
   9accc:	0090a2c0 	call	90a2c <_Balloc>
   9acd0:	e0bfe615 	stw	r2,-104(fp)
	x = b->_x;
   9acd4:	e0bfe617 	ldw	r2,-104(fp)
   9acd8:	10800504 	addi	r2,r2,20
   9acdc:	e0bff515 	stw	r2,-44(fp)
	n = 0;
   9ace0:	e03fef15 	stw	zero,-68(fp)
	L = 0;
   9ace4:	e03ff315 	stw	zero,-52(fp)
	while(s1 > s0) {
   9ace8:	00003c06 	br	9addc <__gethex+0x528>
		if (*--s1 == decp_end && s1 - decp_len + 1 >= s0
   9acec:	e0bfea17 	ldw	r2,-88(fp)
   9acf0:	10bfffc4 	addi	r2,r2,-1
   9acf4:	e0bfea15 	stw	r2,-88(fp)
   9acf8:	e0bfea17 	ldw	r2,-88(fp)
   9acfc:	10800003 	ldbu	r2,0(r2)
   9ad00:	10c03fcc 	andi	r3,r2,255
   9ad04:	e0bffa03 	ldbu	r2,-24(fp)
   9ad08:	1880181e 	bne	r3,r2,9ad6c <__gethex+0x4b8>
   9ad0c:	00c00044 	movi	r3,1
   9ad10:	e0bff917 	ldw	r2,-28(fp)
   9ad14:	1885c83a 	sub	r2,r3,r2
   9ad18:	e0ffea17 	ldw	r3,-88(fp)
   9ad1c:	1887883a 	add	r3,r3,r2
   9ad20:	e0bfe817 	ldw	r2,-96(fp)
   9ad24:	18801136 	bltu	r3,r2,9ad6c <__gethex+0x4b8>
		    && strncmp ((const char *) s1 - decp_len + 1,
   9ad28:	00c00044 	movi	r3,1
   9ad2c:	e0bff917 	ldw	r2,-28(fp)
   9ad30:	1885c83a 	sub	r2,r3,r2
   9ad34:	e0ffea17 	ldw	r3,-88(fp)
   9ad38:	1885883a 	add	r2,r3,r2
   9ad3c:	e1bff917 	ldw	r6,-28(fp)
   9ad40:	e17ff817 	ldw	r5,-32(fp)
   9ad44:	1009883a 	mov	r4,r2
   9ad48:	009b7500 	call	9b750 <strncmp>
   9ad4c:	1000071e 	bne	r2,zero,9ad6c <__gethex+0x4b8>
				(const char *) decimalpoint, decp_len) == 0) {
			s1 -= decp_len - 1; /* Note the --s1 above! */
   9ad50:	00c00044 	movi	r3,1
   9ad54:	e0bff917 	ldw	r2,-28(fp)
   9ad58:	1885c83a 	sub	r2,r3,r2
   9ad5c:	e0ffea17 	ldw	r3,-88(fp)
   9ad60:	1885883a 	add	r2,r3,r2
   9ad64:	e0bfea15 	stw	r2,-88(fp)
			continue;
   9ad68:	00001c06 	br	9addc <__gethex+0x528>
		}
		if (n == 32) {
   9ad6c:	e0bfef17 	ldw	r2,-68(fp)
   9ad70:	10800818 	cmpnei	r2,r2,32
   9ad74:	1000071e 	bne	r2,zero,9ad94 <__gethex+0x4e0>
			*x++ = L;
   9ad78:	e0bff517 	ldw	r2,-44(fp)
   9ad7c:	10c00104 	addi	r3,r2,4
   9ad80:	e0fff515 	stw	r3,-44(fp)
   9ad84:	e0fff317 	ldw	r3,-52(fp)
   9ad88:	10c00015 	stw	r3,0(r2)
			L = 0;
   9ad8c:	e03ff315 	stw	zero,-52(fp)
			n = 0;
   9ad90:	e03fef15 	stw	zero,-68(fp)
			}
		L |= (__get_hexdig(*s1) & 0x0f) << n;
   9ad94:	e0bfea17 	ldw	r2,-88(fp)
   9ad98:	10800003 	ldbu	r2,0(r2)
   9ad9c:	10c03fcc 	andi	r3,r2,255
   9ada0:	008002b4 	movhi	r2,10
   9ada4:	10851384 	addi	r2,r2,5198
   9ada8:	10c5883a 	add	r2,r2,r3
   9adac:	10800003 	ldbu	r2,0(r2)
   9adb0:	10803fcc 	andi	r2,r2,255
   9adb4:	10c003cc 	andi	r3,r2,15
   9adb8:	e0bfef17 	ldw	r2,-68(fp)
   9adbc:	1884983a 	sll	r2,r3,r2
   9adc0:	1007883a 	mov	r3,r2
   9adc4:	e0bff317 	ldw	r2,-52(fp)
   9adc8:	10c4b03a 	or	r2,r2,r3
   9adcc:	e0bff315 	stw	r2,-52(fp)
		n += 4;
   9add0:	e0bfef17 	ldw	r2,-68(fp)
   9add4:	10800104 	addi	r2,r2,4
   9add8:	e0bfef15 	stw	r2,-68(fp)
		k++;
	b = Balloc(ptr, k);
	x = b->_x;
	n = 0;
	L = 0;
	while(s1 > s0) {
   9addc:	e0bfea17 	ldw	r2,-88(fp)
   9ade0:	e0ffe817 	ldw	r3,-96(fp)
   9ade4:	18bfc136 	bltu	r3,r2,9acec <__alt_data_end+0xfffe8cec>
			n = 0;
			}
		L |= (__get_hexdig(*s1) & 0x0f) << n;
		n += 4;
		}
	*x++ = L;
   9ade8:	e0bff517 	ldw	r2,-44(fp)
   9adec:	10c00104 	addi	r3,r2,4
   9adf0:	e0fff515 	stw	r3,-44(fp)
   9adf4:	e0fff317 	ldw	r3,-52(fp)
   9adf8:	10c00015 	stw	r3,0(r2)
	b->_wds = n = x - b->_x;
   9adfc:	e0bff517 	ldw	r2,-44(fp)
   9ae00:	e0ffe617 	ldw	r3,-104(fp)
   9ae04:	18c00504 	addi	r3,r3,20
   9ae08:	10c5c83a 	sub	r2,r2,r3
   9ae0c:	1005d0ba 	srai	r2,r2,2
   9ae10:	e0bfef15 	stw	r2,-68(fp)
   9ae14:	e0bfe617 	ldw	r2,-104(fp)
   9ae18:	e0ffef17 	ldw	r3,-68(fp)
   9ae1c:	10c00415 	stw	r3,16(r2)
	n = 32*n - hi0bits(L);
   9ae20:	e0bfef17 	ldw	r2,-68(fp)
   9ae24:	1020917a 	slli	r16,r2,5
   9ae28:	e13ff317 	ldw	r4,-52(fp)
   9ae2c:	0090f100 	call	90f10 <__hi0bits>
   9ae30:	8085c83a 	sub	r2,r16,r2
   9ae34:	e0bfef15 	stw	r2,-68(fp)
	nbits = fpi->nbits;
   9ae38:	e0bffd17 	ldw	r2,-12(fp)
   9ae3c:	10800017 	ldw	r2,0(r2)
   9ae40:	e0bff015 	stw	r2,-64(fp)
	lostbits = 0;
   9ae44:	e03ff415 	stw	zero,-48(fp)
	x = b->_x;
   9ae48:	e0bfe617 	ldw	r2,-104(fp)
   9ae4c:	10800504 	addi	r2,r2,20
   9ae50:	e0bff515 	stw	r2,-44(fp)
	if (n > nbits) {
   9ae54:	e0bfef17 	ldw	r2,-68(fp)
   9ae58:	e0fff017 	ldw	r3,-64(fp)
   9ae5c:	1880300e 	bge	r3,r2,9af20 <__gethex+0x66c>
		n -= nbits;
   9ae60:	e0ffef17 	ldw	r3,-68(fp)
   9ae64:	e0bff017 	ldw	r2,-64(fp)
   9ae68:	1885c83a 	sub	r2,r3,r2
   9ae6c:	e0bfef15 	stw	r2,-68(fp)
		if (any_on(b,n)) {
   9ae70:	e17fef17 	ldw	r5,-68(fp)
   9ae74:	e13fe617 	ldw	r4,-104(fp)
   9ae78:	00923a80 	call	923a8 <__any_on>
   9ae7c:	10002026 	beq	r2,zero,9af00 <__gethex+0x64c>
			lostbits = 1;
   9ae80:	00800044 	movi	r2,1
   9ae84:	e0bff415 	stw	r2,-48(fp)
			k = n - 1;
   9ae88:	e0bfef17 	ldw	r2,-68(fp)
   9ae8c:	10bfffc4 	addi	r2,r2,-1
   9ae90:	e0bfee15 	stw	r2,-72(fp)
			if (x[k>>kshift] & 1 << (k & kmask)) {
   9ae94:	e0bfee17 	ldw	r2,-72(fp)
   9ae98:	1005d17a 	srai	r2,r2,5
   9ae9c:	1085883a 	add	r2,r2,r2
   9aea0:	1085883a 	add	r2,r2,r2
   9aea4:	1007883a 	mov	r3,r2
   9aea8:	e0bff517 	ldw	r2,-44(fp)
   9aeac:	10c5883a 	add	r2,r2,r3
   9aeb0:	10800017 	ldw	r2,0(r2)
   9aeb4:	e0ffee17 	ldw	r3,-72(fp)
   9aeb8:	18c007cc 	andi	r3,r3,31
   9aebc:	01000044 	movi	r4,1
   9aec0:	20c6983a 	sll	r3,r4,r3
   9aec4:	10c4703a 	and	r2,r2,r3
   9aec8:	10000d26 	beq	r2,zero,9af00 <__gethex+0x64c>
				lostbits = 2;
   9aecc:	00800084 	movi	r2,2
   9aed0:	e0bff415 	stw	r2,-48(fp)
				if (k > 1 && any_on(b,k-1))
   9aed4:	e0bfee17 	ldw	r2,-72(fp)
   9aed8:	10800090 	cmplti	r2,r2,2
   9aedc:	1000081e 	bne	r2,zero,9af00 <__gethex+0x64c>
   9aee0:	e0bfee17 	ldw	r2,-72(fp)
   9aee4:	10bfffc4 	addi	r2,r2,-1
   9aee8:	100b883a 	mov	r5,r2
   9aeec:	e13fe617 	ldw	r4,-104(fp)
   9aef0:	00923a80 	call	923a8 <__any_on>
   9aef4:	10000226 	beq	r2,zero,9af00 <__gethex+0x64c>
					lostbits = 3;
   9aef8:	008000c4 	movi	r2,3
   9aefc:	e0bff415 	stw	r2,-48(fp)
				}
			}
		rshift(b, n);
   9af00:	e17fef17 	ldw	r5,-68(fp)
   9af04:	e13fe617 	ldw	r4,-104(fp)
   9af08:	009a5b80 	call	9a5b8 <rshift>
		e += n;
   9af0c:	e0fff617 	ldw	r3,-40(fp)
   9af10:	e0bfef17 	ldw	r2,-68(fp)
   9af14:	1885883a 	add	r2,r3,r2
   9af18:	e0bff615 	stw	r2,-40(fp)
   9af1c:	00001306 	br	9af6c <__gethex+0x6b8>
		}
	else if (n < nbits) {
   9af20:	e0ffef17 	ldw	r3,-68(fp)
   9af24:	e0bff017 	ldw	r2,-64(fp)
   9af28:	1880100e 	bge	r3,r2,9af6c <__gethex+0x6b8>
		n = nbits - n;
   9af2c:	e0fff017 	ldw	r3,-64(fp)
   9af30:	e0bfef17 	ldw	r2,-68(fp)
   9af34:	1885c83a 	sub	r2,r3,r2
   9af38:	e0bfef15 	stw	r2,-68(fp)
		b = lshift(ptr, b, n);
   9af3c:	e1bfef17 	ldw	r6,-68(fp)
   9af40:	e17fe617 	ldw	r5,-104(fp)
   9af44:	e13ffb17 	ldw	r4,-20(fp)
   9af48:	009164c0 	call	9164c <__lshift>
   9af4c:	e0bfe615 	stw	r2,-104(fp)
		e -= n;
   9af50:	e0fff617 	ldw	r3,-40(fp)
   9af54:	e0bfef17 	ldw	r2,-68(fp)
   9af58:	1885c83a 	sub	r2,r3,r2
   9af5c:	e0bff615 	stw	r2,-40(fp)
		x = b->_x;
   9af60:	e0bfe617 	ldw	r2,-104(fp)
   9af64:	10800504 	addi	r2,r2,20
   9af68:	e0bff515 	stw	r2,-44(fp)
		}
	if (e > fpi->emax) {
   9af6c:	e0bffd17 	ldw	r2,-12(fp)
   9af70:	10c00217 	ldw	r3,8(r2)
   9af74:	e0bff617 	ldw	r2,-40(fp)
   9af78:	1880090e 	bge	r3,r2,9afa0 <__gethex+0x6ec>
   9af7c:	00000106 	br	9af84 <__gethex+0x6d0>
			else if ((b->_wds > k)
			 || ((n = nbits & kmask) !=0
			     && (hi0bits(x[k-1]) < 32-n))) {
				rshift(b,1);
				if (++e > fpi->emax)
					goto ovfl;
   9af80:	0001883a 	nop
		e -= n;
		x = b->_x;
		}
	if (e > fpi->emax) {
 ovfl:
		Bfree(ptr, b);
   9af84:	e17fe617 	ldw	r5,-104(fp)
   9af88:	e13ffb17 	ldw	r4,-20(fp)
   9af8c:	0090b5c0 	call	90b5c <_Bfree>
		*bp = 0;
   9af90:	e0800217 	ldw	r2,8(fp)
   9af94:	10000015 	stw	zero,0(r2)
		return STRTOG_Infinite | STRTOG_Overflow | STRTOG_Inexhi;
   9af98:	008028c4 	movi	r2,163
   9af9c:	0000e806 	br	9b340 <__gethex+0xa8c>
		}
	irv = STRTOG_Normal;
   9afa0:	00800044 	movi	r2,1
   9afa4:	e0bfed15 	stw	r2,-76(fp)
	if (e < fpi->emin) {
   9afa8:	e0bffd17 	ldw	r2,-12(fp)
   9afac:	10800117 	ldw	r2,4(r2)
   9afb0:	e0fff617 	ldw	r3,-40(fp)
   9afb4:	1880660e 	bge	r3,r2,9b150 <__gethex+0x89c>
		irv = STRTOG_Denormal;
   9afb8:	00800084 	movi	r2,2
   9afbc:	e0bfed15 	stw	r2,-76(fp)
		n = fpi->emin - e;
   9afc0:	e0bffd17 	ldw	r2,-12(fp)
   9afc4:	10c00117 	ldw	r3,4(r2)
   9afc8:	e0bff617 	ldw	r2,-40(fp)
   9afcc:	1885c83a 	sub	r2,r3,r2
   9afd0:	e0bfef15 	stw	r2,-68(fp)
		if (n >= nbits) {
   9afd4:	e0ffef17 	ldw	r3,-68(fp)
   9afd8:	e0bff017 	ldw	r2,-64(fp)
   9afdc:	18803316 	blt	r3,r2,9b0ac <__gethex+0x7f8>
			switch (fpi->rounding) {
   9afe0:	e0bffd17 	ldw	r2,-12(fp)
   9afe4:	10800317 	ldw	r2,12(r2)
   9afe8:	10c000a0 	cmpeqi	r3,r2,2
   9afec:	1800111e 	bne	r3,zero,9b034 <__gethex+0x780>
   9aff0:	10c000e0 	cmpeqi	r3,r2,3
   9aff4:	1800121e 	bne	r3,zero,9b040 <__gethex+0x78c>
   9aff8:	10800060 	cmpeqi	r2,r2,1
   9affc:	10002426 	beq	r2,zero,9b090 <__gethex+0x7dc>
			  case FPI_Round_near:
				if (n == nbits && (n < 2 || any_on(b,n-1)))
   9b000:	e0ffef17 	ldw	r3,-68(fp)
   9b004:	e0bff017 	ldw	r2,-64(fp)
   9b008:	18801e1e 	bne	r3,r2,9b084 <__gethex+0x7d0>
   9b00c:	e0bfef17 	ldw	r2,-68(fp)
   9b010:	10800090 	cmplti	r2,r2,2
   9b014:	10000c1e 	bne	r2,zero,9b048 <__gethex+0x794>
   9b018:	e0bfef17 	ldw	r2,-68(fp)
   9b01c:	10bfffc4 	addi	r2,r2,-1
   9b020:	100b883a 	mov	r5,r2
   9b024:	e13fe617 	ldw	r4,-104(fp)
   9b028:	00923a80 	call	923a8 <__any_on>
   9b02c:	1000061e 	bne	r2,zero,9b048 <__gethex+0x794>
					goto one_bit;
				break;
   9b030:	00001406 	br	9b084 <__gethex+0x7d0>
			  case FPI_Round_up:
				if (!sign)
   9b034:	e0800317 	ldw	r2,12(fp)
   9b038:	1000141e 	bne	r2,zero,9b08c <__gethex+0x7d8>
					goto one_bit;
   9b03c:	00000206 	br	9b048 <__gethex+0x794>
				break;
			  case FPI_Round_down:
				if (sign) {
   9b040:	e0800317 	ldw	r2,12(fp)
   9b044:	10001226 	beq	r2,zero,9b090 <__gethex+0x7dc>
 one_bit:
					*exp = fpi->emin;
   9b048:	e0bffd17 	ldw	r2,-12(fp)
   9b04c:	10c00117 	ldw	r3,4(r2)
   9b050:	e0bffe17 	ldw	r2,-8(fp)
   9b054:	10c00015 	stw	r3,0(r2)
					x[0] = b->_wds = 1;
   9b058:	e0bfe617 	ldw	r2,-104(fp)
   9b05c:	00c00044 	movi	r3,1
   9b060:	10c00415 	stw	r3,16(r2)
   9b064:	e0bff517 	ldw	r2,-44(fp)
   9b068:	00c00044 	movi	r3,1
   9b06c:	10c00015 	stw	r3,0(r2)
					*bp = b;
   9b070:	e0800217 	ldw	r2,8(fp)
   9b074:	e0ffe617 	ldw	r3,-104(fp)
   9b078:	10c00015 	stw	r3,0(r2)
					return STRTOG_Denormal | STRTOG_Inexhi
   9b07c:	00801884 	movi	r2,98
   9b080:	0000af06 	br	9b340 <__gethex+0xa8c>
		if (n >= nbits) {
			switch (fpi->rounding) {
			  case FPI_Round_near:
				if (n == nbits && (n < 2 || any_on(b,n-1)))
					goto one_bit;
				break;
   9b084:	0001883a 	nop
   9b088:	00000106 	br	9b090 <__gethex+0x7dc>
			  case FPI_Round_up:
				if (!sign)
					goto one_bit;
				break;
   9b08c:	0001883a 	nop
					*bp = b;
					return STRTOG_Denormal | STRTOG_Inexhi
						| STRTOG_Underflow;
					}
			  }
			Bfree(ptr, b);
   9b090:	e17fe617 	ldw	r5,-104(fp)
   9b094:	e13ffb17 	ldw	r4,-20(fp)
   9b098:	0090b5c0 	call	90b5c <_Bfree>
			*bp = 0;
   9b09c:	e0800217 	ldw	r2,8(fp)
   9b0a0:	10000015 	stw	zero,0(r2)
			return STRTOG_Zero | STRTOG_Inexlo | STRTOG_Underflow;
   9b0a4:	00801404 	movi	r2,80
   9b0a8:	0000a506 	br	9b340 <__gethex+0xa8c>
			}
		k = n - 1;
   9b0ac:	e0bfef17 	ldw	r2,-68(fp)
   9b0b0:	10bfffc4 	addi	r2,r2,-1
   9b0b4:	e0bfee15 	stw	r2,-72(fp)
		if (lostbits)
   9b0b8:	e0bff417 	ldw	r2,-48(fp)
   9b0bc:	10000326 	beq	r2,zero,9b0cc <__gethex+0x818>
			lostbits = 1;
   9b0c0:	00800044 	movi	r2,1
   9b0c4:	e0bff415 	stw	r2,-48(fp)
   9b0c8:	00000606 	br	9b0e4 <__gethex+0x830>
		else if (k > 0)
   9b0cc:	e0bfee17 	ldw	r2,-72(fp)
   9b0d0:	0080040e 	bge	zero,r2,9b0e4 <__gethex+0x830>
			lostbits = any_on(b,k);
   9b0d4:	e17fee17 	ldw	r5,-72(fp)
   9b0d8:	e13fe617 	ldw	r4,-104(fp)
   9b0dc:	00923a80 	call	923a8 <__any_on>
   9b0e0:	e0bff415 	stw	r2,-48(fp)
		if (x[k>>kshift] & 1 << (k & kmask))
   9b0e4:	e0bfee17 	ldw	r2,-72(fp)
   9b0e8:	1005d17a 	srai	r2,r2,5
   9b0ec:	1085883a 	add	r2,r2,r2
   9b0f0:	1085883a 	add	r2,r2,r2
   9b0f4:	1007883a 	mov	r3,r2
   9b0f8:	e0bff517 	ldw	r2,-44(fp)
   9b0fc:	10c5883a 	add	r2,r2,r3
   9b100:	10800017 	ldw	r2,0(r2)
   9b104:	e0ffee17 	ldw	r3,-72(fp)
   9b108:	18c007cc 	andi	r3,r3,31
   9b10c:	01000044 	movi	r4,1
   9b110:	20c6983a 	sll	r3,r4,r3
   9b114:	10c4703a 	and	r2,r2,r3
   9b118:	10000326 	beq	r2,zero,9b128 <__gethex+0x874>
			lostbits |= 2;
   9b11c:	e0bff417 	ldw	r2,-48(fp)
   9b120:	10800094 	ori	r2,r2,2
   9b124:	e0bff415 	stw	r2,-48(fp)
		nbits -= n;
   9b128:	e0fff017 	ldw	r3,-64(fp)
   9b12c:	e0bfef17 	ldw	r2,-68(fp)
   9b130:	1885c83a 	sub	r2,r3,r2
   9b134:	e0bff015 	stw	r2,-64(fp)
		rshift(b,n);
   9b138:	e17fef17 	ldw	r5,-68(fp)
   9b13c:	e13fe617 	ldw	r4,-104(fp)
   9b140:	009a5b80 	call	9a5b8 <rshift>
		e = fpi->emin;
   9b144:	e0bffd17 	ldw	r2,-12(fp)
   9b148:	10800117 	ldw	r2,4(r2)
   9b14c:	e0bff615 	stw	r2,-40(fp)
		}
	if (lostbits) {
   9b150:	e0bff417 	ldw	r2,-48(fp)
   9b154:	10007326 	beq	r2,zero,9b324 <__gethex+0xa70>
		up = 0;
   9b158:	e03ff115 	stw	zero,-60(fp)
		switch(fpi->rounding) {
   9b15c:	e0bffd17 	ldw	r2,-12(fp)
   9b160:	10800317 	ldw	r2,12(r2)
   9b164:	10c00060 	cmpeqi	r3,r2,1
   9b168:	1800071e 	bne	r3,zero,9b188 <__gethex+0x8d4>
   9b16c:	10c00088 	cmpgei	r3,r2,2
   9b170:	18001926 	beq	r3,zero,9b1d8 <__gethex+0x924>
   9b174:	10c000a0 	cmpeqi	r3,r2,2
   9b178:	18000f1e 	bne	r3,zero,9b1b8 <__gethex+0x904>
   9b17c:	108000e0 	cmpeqi	r2,r2,3
   9b180:	1000121e 	bne	r2,zero,9b1cc <__gethex+0x918>
   9b184:	00001706 	br	9b1e4 <__gethex+0x930>
		  case FPI_Round_zero:
			break;
		  case FPI_Round_near:
		    if ((lostbits & 2)
   9b188:	e0bff417 	ldw	r2,-48(fp)
   9b18c:	1080008c 	andi	r2,r2,2
   9b190:	10001326 	beq	r2,zero,9b1e0 <__gethex+0x92c>
			    && ((lostbits & 1) | (x[0] & 1)))
   9b194:	e0bff517 	ldw	r2,-44(fp)
   9b198:	10c00017 	ldw	r3,0(r2)
   9b19c:	e0bff417 	ldw	r2,-48(fp)
   9b1a0:	1884b03a 	or	r2,r3,r2
   9b1a4:	1080004c 	andi	r2,r2,1
   9b1a8:	10000d26 	beq	r2,zero,9b1e0 <__gethex+0x92c>
				up = 1;
   9b1ac:	00800044 	movi	r2,1
   9b1b0:	e0bff115 	stw	r2,-60(fp)
			break;
   9b1b4:	00000a06 	br	9b1e0 <__gethex+0x92c>
		  case FPI_Round_up:
			up = 1 - sign;
   9b1b8:	00c00044 	movi	r3,1
   9b1bc:	e0800317 	ldw	r2,12(fp)
   9b1c0:	1885c83a 	sub	r2,r3,r2
   9b1c4:	e0bff115 	stw	r2,-60(fp)
			break;
   9b1c8:	00000606 	br	9b1e4 <__gethex+0x930>
		  case FPI_Round_down:
			up = sign;
   9b1cc:	e0800317 	ldw	r2,12(fp)
   9b1d0:	e0bff115 	stw	r2,-60(fp)
   9b1d4:	00000306 	br	9b1e4 <__gethex+0x930>
		}
	if (lostbits) {
		up = 0;
		switch(fpi->rounding) {
		  case FPI_Round_zero:
			break;
   9b1d8:	0001883a 	nop
   9b1dc:	00000106 	br	9b1e4 <__gethex+0x930>
		  case FPI_Round_near:
		    if ((lostbits & 2)
			    && ((lostbits & 1) | (x[0] & 1)))
				up = 1;
			break;
   9b1e0:	0001883a 	nop
			up = 1 - sign;
			break;
		  case FPI_Round_down:
			up = sign;
		  }
		if (up) {
   9b1e4:	e0bff117 	ldw	r2,-60(fp)
   9b1e8:	10004b26 	beq	r2,zero,9b318 <__gethex+0xa64>
			k = b->_wds;
   9b1ec:	e0bfe617 	ldw	r2,-104(fp)
   9b1f0:	10800417 	ldw	r2,16(r2)
   9b1f4:	e0bfee15 	stw	r2,-72(fp)
			b = increment(ptr, b);
   9b1f8:	e17fe617 	ldw	r5,-104(fp)
   9b1fc:	e13ffb17 	ldw	r4,-20(fp)
   9b200:	009a7680 	call	9a768 <increment>
   9b204:	e0bfe615 	stw	r2,-104(fp)
			x = b->_x;
   9b208:	e0bfe617 	ldw	r2,-104(fp)
   9b20c:	10800504 	addi	r2,r2,20
   9b210:	e0bff515 	stw	r2,-44(fp)
			if (irv == STRTOG_Denormal) {
   9b214:	e0bfed17 	ldw	r2,-76(fp)
   9b218:	10800098 	cmpnei	r2,r2,2
   9b21c:	1000161e 	bne	r2,zero,9b278 <__gethex+0x9c4>
				if (nbits == fpi->nbits - 1
   9b220:	e0bffd17 	ldw	r2,-12(fp)
   9b224:	10800017 	ldw	r2,0(r2)
   9b228:	10ffffc4 	addi	r3,r2,-1
   9b22c:	e0bff017 	ldw	r2,-64(fp)
   9b230:	1880351e 	bne	r3,r2,9b308 <__gethex+0xa54>
				 && x[nbits >> kshift] & 1 << (nbits & kmask))
   9b234:	e0bff017 	ldw	r2,-64(fp)
   9b238:	1005d17a 	srai	r2,r2,5
   9b23c:	1085883a 	add	r2,r2,r2
   9b240:	1085883a 	add	r2,r2,r2
   9b244:	1007883a 	mov	r3,r2
   9b248:	e0bff517 	ldw	r2,-44(fp)
   9b24c:	10c5883a 	add	r2,r2,r3
   9b250:	10800017 	ldw	r2,0(r2)
   9b254:	e0fff017 	ldw	r3,-64(fp)
   9b258:	18c007cc 	andi	r3,r3,31
   9b25c:	01000044 	movi	r4,1
   9b260:	20c6983a 	sll	r3,r4,r3
   9b264:	10c4703a 	and	r2,r2,r3
   9b268:	10002726 	beq	r2,zero,9b308 <__gethex+0xa54>
					irv =  STRTOG_Normal;
   9b26c:	00800044 	movi	r2,1
   9b270:	e0bfed15 	stw	r2,-76(fp)
   9b274:	00002406 	br	9b308 <__gethex+0xa54>
				}
			else if ((b->_wds > k)
   9b278:	e0bfe617 	ldw	r2,-104(fp)
   9b27c:	10800417 	ldw	r2,16(r2)
   9b280:	e0ffee17 	ldw	r3,-72(fp)
   9b284:	18801616 	blt	r3,r2,9b2e0 <__gethex+0xa2c>
			 || ((n = nbits & kmask) !=0
   9b288:	e0bff017 	ldw	r2,-64(fp)
   9b28c:	108007cc 	andi	r2,r2,31
   9b290:	e0bfef15 	stw	r2,-68(fp)
   9b294:	e0bfef17 	ldw	r2,-68(fp)
   9b298:	10001b26 	beq	r2,zero,9b308 <__gethex+0xa54>
			     && (hi0bits(x[k-1]) < 32-n))) {
   9b29c:	e0ffee17 	ldw	r3,-72(fp)
   9b2a0:	00900034 	movhi	r2,16384
   9b2a4:	10bfffc4 	addi	r2,r2,-1
   9b2a8:	1885883a 	add	r2,r3,r2
   9b2ac:	1085883a 	add	r2,r2,r2
   9b2b0:	1085883a 	add	r2,r2,r2
   9b2b4:	1007883a 	mov	r3,r2
   9b2b8:	e0bff517 	ldw	r2,-44(fp)
   9b2bc:	10c5883a 	add	r2,r2,r3
   9b2c0:	10800017 	ldw	r2,0(r2)
   9b2c4:	1009883a 	mov	r4,r2
   9b2c8:	0090f100 	call	90f10 <__hi0bits>
   9b2cc:	1009883a 	mov	r4,r2
   9b2d0:	00c00804 	movi	r3,32
   9b2d4:	e0bfef17 	ldw	r2,-68(fp)
   9b2d8:	1885c83a 	sub	r2,r3,r2
   9b2dc:	20800a0e 	bge	r4,r2,9b308 <__gethex+0xa54>
				rshift(b,1);
   9b2e0:	01400044 	movi	r5,1
   9b2e4:	e13fe617 	ldw	r4,-104(fp)
   9b2e8:	009a5b80 	call	9a5b8 <rshift>
				if (++e > fpi->emax)
   9b2ec:	e0bff617 	ldw	r2,-40(fp)
   9b2f0:	10800044 	addi	r2,r2,1
   9b2f4:	e0bff615 	stw	r2,-40(fp)
   9b2f8:	e0bffd17 	ldw	r2,-12(fp)
   9b2fc:	10c00217 	ldw	r3,8(r2)
   9b300:	e0bff617 	ldw	r2,-40(fp)
   9b304:	18bf1e16 	blt	r3,r2,9af80 <__alt_data_end+0xfffe8f80>
					goto ovfl;
				}
			irv |= STRTOG_Inexhi;
   9b308:	e0bfed17 	ldw	r2,-76(fp)
   9b30c:	10800814 	ori	r2,r2,32
   9b310:	e0bfed15 	stw	r2,-76(fp)
   9b314:	00000306 	br	9b324 <__gethex+0xa70>
			}
		else
			irv |= STRTOG_Inexlo;
   9b318:	e0bfed17 	ldw	r2,-76(fp)
   9b31c:	10800414 	ori	r2,r2,16
   9b320:	e0bfed15 	stw	r2,-76(fp)
		}
	*bp = b;
   9b324:	e0800217 	ldw	r2,8(fp)
   9b328:	e0ffe617 	ldw	r3,-104(fp)
   9b32c:	10c00015 	stw	r3,0(r2)
	*exp = e;
   9b330:	e0bffe17 	ldw	r2,-8(fp)
   9b334:	e0fff617 	ldw	r3,-40(fp)
   9b338:	10c00015 	stw	r3,0(r2)
	return irv;
   9b33c:	e0bfed17 	ldw	r2,-76(fp)
}
   9b340:	e6ffff04 	addi	sp,fp,-4
   9b344:	dfc00217 	ldw	ra,8(sp)
   9b348:	df000117 	ldw	fp,4(sp)
   9b34c:	dc000017 	ldw	r16,0(sp)
   9b350:	dec00304 	addi	sp,sp,12
   9b354:	f800283a 	ret

0009b358 <L_shift>:
static void
_DEFUN (L_shift, (x, x1, i),
	__ULong *x _AND
	__ULong *x1 _AND
	int i)
{
   9b358:	defffb04 	addi	sp,sp,-20
   9b35c:	df000415 	stw	fp,16(sp)
   9b360:	df000404 	addi	fp,sp,16
   9b364:	e13ffd15 	stw	r4,-12(fp)
   9b368:	e17ffe15 	stw	r5,-8(fp)
   9b36c:	e1bfff15 	stw	r6,-4(fp)
	int j;

	i = 8 - i;
   9b370:	00c00204 	movi	r3,8
   9b374:	e0bfff17 	ldw	r2,-4(fp)
   9b378:	1885c83a 	sub	r2,r3,r2
   9b37c:	e0bfff15 	stw	r2,-4(fp)
	i <<= 2;
   9b380:	e0bfff17 	ldw	r2,-4(fp)
   9b384:	1085883a 	add	r2,r2,r2
   9b388:	1085883a 	add	r2,r2,r2
   9b38c:	e0bfff15 	stw	r2,-4(fp)
	j = ULbits - i;
   9b390:	00c00804 	movi	r3,32
   9b394:	e0bfff17 	ldw	r2,-4(fp)
   9b398:	1885c83a 	sub	r2,r3,r2
   9b39c:	e0bffc15 	stw	r2,-16(fp)
	do {
		*x |= x[1] << j;
   9b3a0:	e0bffd17 	ldw	r2,-12(fp)
   9b3a4:	10c00017 	ldw	r3,0(r2)
   9b3a8:	e0bffd17 	ldw	r2,-12(fp)
   9b3ac:	10800104 	addi	r2,r2,4
   9b3b0:	11000017 	ldw	r4,0(r2)
   9b3b4:	e0bffc17 	ldw	r2,-16(fp)
   9b3b8:	2084983a 	sll	r2,r4,r2
   9b3bc:	1886b03a 	or	r3,r3,r2
   9b3c0:	e0bffd17 	ldw	r2,-12(fp)
   9b3c4:	10c00015 	stw	r3,0(r2)
		x[1] >>= i;
   9b3c8:	e0bffd17 	ldw	r2,-12(fp)
   9b3cc:	10800104 	addi	r2,r2,4
   9b3d0:	e0fffd17 	ldw	r3,-12(fp)
   9b3d4:	18c00104 	addi	r3,r3,4
   9b3d8:	19000017 	ldw	r4,0(r3)
   9b3dc:	e0ffff17 	ldw	r3,-4(fp)
   9b3e0:	20c6d83a 	srl	r3,r4,r3
   9b3e4:	10c00015 	stw	r3,0(r2)
		} while(++x < x1);
   9b3e8:	e0bffd17 	ldw	r2,-12(fp)
   9b3ec:	10800104 	addi	r2,r2,4
   9b3f0:	e0bffd15 	stw	r2,-12(fp)
   9b3f4:	e0fffd17 	ldw	r3,-12(fp)
   9b3f8:	e0bffe17 	ldw	r2,-8(fp)
   9b3fc:	18bfe836 	bltu	r3,r2,9b3a0 <__alt_data_end+0xfffe93a0>
}
   9b400:	0001883a 	nop
   9b404:	e037883a 	mov	sp,fp
   9b408:	df000017 	ldw	fp,0(sp)
   9b40c:	dec00104 	addi	sp,sp,4
   9b410:	f800283a 	ret

0009b414 <__hexnan>:
int
_DEFUN (hexnan, (sp, fpi, x0),
	_CONST char **sp _AND
	_CONST FPI *fpi _AND
	__ULong *x0)
{
   9b414:	defff104 	addi	sp,sp,-60
   9b418:	dfc00e15 	stw	ra,56(sp)
   9b41c:	df000d15 	stw	fp,52(sp)
   9b420:	df000d04 	addi	fp,sp,52
   9b424:	e13ffd15 	stw	r4,-12(fp)
   9b428:	e17ffe15 	stw	r5,-8(fp)
   9b42c:	e1bfff15 	stw	r6,-4(fp)
	__ULong c, h, *x, *x1, *xe;
	_CONST char *s;
	int havedig, hd0, i, nbits;

	nbits = fpi->nbits;
   9b430:	e0bffe17 	ldw	r2,-8(fp)
   9b434:	10800017 	ldw	r2,0(r2)
   9b438:	e0bff915 	stw	r2,-28(fp)
	x = x0 + (nbits >> kshift);
   9b43c:	e0bff917 	ldw	r2,-28(fp)
   9b440:	1005d17a 	srai	r2,r2,5
   9b444:	1085883a 	add	r2,r2,r2
   9b448:	1085883a 	add	r2,r2,r2
   9b44c:	1007883a 	mov	r3,r2
   9b450:	e0bfff17 	ldw	r2,-4(fp)
   9b454:	10c5883a 	add	r2,r2,r3
   9b458:	e0bff315 	stw	r2,-52(fp)
	if (nbits & kmask)
   9b45c:	e0bff917 	ldw	r2,-28(fp)
   9b460:	108007cc 	andi	r2,r2,31
   9b464:	10000326 	beq	r2,zero,9b474 <__hexnan+0x60>
		x++;
   9b468:	e0bff317 	ldw	r2,-52(fp)
   9b46c:	10800104 	addi	r2,r2,4
   9b470:	e0bff315 	stw	r2,-52(fp)
	*--x = 0;
   9b474:	e0bff317 	ldw	r2,-52(fp)
   9b478:	10bfff04 	addi	r2,r2,-4
   9b47c:	e0bff315 	stw	r2,-52(fp)
   9b480:	e0bff317 	ldw	r2,-52(fp)
   9b484:	10000015 	stw	zero,0(r2)
	x1 = xe = x;
   9b488:	e0bff317 	ldw	r2,-52(fp)
   9b48c:	e0bffa15 	stw	r2,-24(fp)
   9b490:	e0bffa17 	ldw	r2,-24(fp)
   9b494:	e0bff415 	stw	r2,-48(fp)
	havedig = hd0 = i = 0;
   9b498:	e03ff815 	stw	zero,-32(fp)
   9b49c:	e0bff817 	ldw	r2,-32(fp)
   9b4a0:	e0bff715 	stw	r2,-36(fp)
   9b4a4:	e0bff717 	ldw	r2,-36(fp)
   9b4a8:	e0bff615 	stw	r2,-40(fp)
	s = *sp;
   9b4ac:	e0bffd17 	ldw	r2,-12(fp)
   9b4b0:	10800017 	ldw	r2,0(r2)
   9b4b4:	e0bff515 	stw	r2,-44(fp)
	while((c = *(_CONST unsigned char*)++s)) {
   9b4b8:	00005006 	br	9b5fc <__hexnan+0x1e8>
		if (!(h = __get_hexdig(c))) {
   9b4bc:	008002b4 	movhi	r2,10
   9b4c0:	10851384 	addi	r2,r2,5198
   9b4c4:	e0fffb17 	ldw	r3,-20(fp)
   9b4c8:	10c5883a 	add	r2,r2,r3
   9b4cc:	10800003 	ldbu	r2,0(r2)
   9b4d0:	10803fcc 	andi	r2,r2,255
   9b4d4:	e0bffc15 	stw	r2,-16(fp)
   9b4d8:	e0bffc17 	ldw	r2,-16(fp)
   9b4dc:	10002b1e 	bne	r2,zero,9b58c <__hexnan+0x178>
			if (c <= ' ') {
   9b4e0:	e0bffb17 	ldw	r2,-20(fp)
   9b4e4:	10800868 	cmpgeui	r2,r2,33
   9b4e8:	10001e1e 	bne	r2,zero,9b564 <__hexnan+0x150>
				if (hd0 < havedig) {
   9b4ec:	e0fff717 	ldw	r3,-36(fp)
   9b4f0:	e0bff617 	ldw	r2,-40(fp)
   9b4f4:	1880410e 	bge	r3,r2,9b5fc <__hexnan+0x1e8>
					if (x < x1 && i < 8)
   9b4f8:	e0fff317 	ldw	r3,-52(fp)
   9b4fc:	e0bff417 	ldw	r2,-48(fp)
   9b500:	1880072e 	bgeu	r3,r2,9b520 <__hexnan+0x10c>
   9b504:	e0bff817 	ldw	r2,-32(fp)
   9b508:	10800208 	cmpgei	r2,r2,8
   9b50c:	1000041e 	bne	r2,zero,9b520 <__hexnan+0x10c>
						L_shift(x, x1, i);
   9b510:	e1bff817 	ldw	r6,-32(fp)
   9b514:	e17ff417 	ldw	r5,-48(fp)
   9b518:	e13ff317 	ldw	r4,-52(fp)
   9b51c:	009b3580 	call	9b358 <L_shift>
					if (x <= x0) {
   9b520:	e0bff317 	ldw	r2,-52(fp)
   9b524:	e0ffff17 	ldw	r3,-4(fp)
   9b528:	18800336 	bltu	r3,r2,9b538 <__hexnan+0x124>
						i = 8;
   9b52c:	00800204 	movi	r2,8
   9b530:	e0bff815 	stw	r2,-32(fp)
						continue;
   9b534:	00003106 	br	9b5fc <__hexnan+0x1e8>
						}
					hd0 = havedig;
   9b538:	e0bff617 	ldw	r2,-40(fp)
   9b53c:	e0bff715 	stw	r2,-36(fp)
					*--x = 0;
   9b540:	e0bff317 	ldw	r2,-52(fp)
   9b544:	10bfff04 	addi	r2,r2,-4
   9b548:	e0bff315 	stw	r2,-52(fp)
   9b54c:	e0bff317 	ldw	r2,-52(fp)
   9b550:	10000015 	stw	zero,0(r2)
					x1 = x;
   9b554:	e0bff317 	ldw	r2,-52(fp)
   9b558:	e0bff415 	stw	r2,-48(fp)
					i = 0;
   9b55c:	e03ff815 	stw	zero,-32(fp)
					}
				continue;
   9b560:	00002606 	br	9b5fc <__hexnan+0x1e8>
				}
			if (/*(*/ c == ')') {
   9b564:	e0bffb17 	ldw	r2,-20(fp)
   9b568:	10800a58 	cmpnei	r2,r2,41
   9b56c:	1000051e 	bne	r2,zero,9b584 <__hexnan+0x170>
				*sp = s + 1;
   9b570:	e0bff517 	ldw	r2,-44(fp)
   9b574:	10c00044 	addi	r3,r2,1
   9b578:	e0bffd17 	ldw	r2,-12(fp)
   9b57c:	10c00015 	stw	r3,0(r2)
				break;
   9b580:	00002706 	br	9b620 <__hexnan+0x20c>
				}
			return STRTOG_NaN;
   9b584:	00800104 	movi	r2,4
   9b588:	00006c06 	br	9b73c <__hexnan+0x328>
			}
		havedig++;
   9b58c:	e0bff617 	ldw	r2,-40(fp)
   9b590:	10800044 	addi	r2,r2,1
   9b594:	e0bff615 	stw	r2,-40(fp)
		if (++i > 8) {
   9b598:	e0bff817 	ldw	r2,-32(fp)
   9b59c:	10800044 	addi	r2,r2,1
   9b5a0:	e0bff815 	stw	r2,-32(fp)
   9b5a4:	e0bff817 	ldw	r2,-32(fp)
   9b5a8:	10800250 	cmplti	r2,r2,9
   9b5ac:	10000b1e 	bne	r2,zero,9b5dc <__hexnan+0x1c8>
			if (x <= x0)
   9b5b0:	e0bff317 	ldw	r2,-52(fp)
   9b5b4:	e0ffff17 	ldw	r3,-4(fp)
   9b5b8:	18800136 	bltu	r3,r2,9b5c0 <__hexnan+0x1ac>
				continue;
   9b5bc:	00000f06 	br	9b5fc <__hexnan+0x1e8>
			i = 1;
   9b5c0:	00800044 	movi	r2,1
   9b5c4:	e0bff815 	stw	r2,-32(fp)
			*--x = 0;
   9b5c8:	e0bff317 	ldw	r2,-52(fp)
   9b5cc:	10bfff04 	addi	r2,r2,-4
   9b5d0:	e0bff315 	stw	r2,-52(fp)
   9b5d4:	e0bff317 	ldw	r2,-52(fp)
   9b5d8:	10000015 	stw	zero,0(r2)
			}
		*x = ((*x << 4) | (h & 0xf));
   9b5dc:	e0bff317 	ldw	r2,-52(fp)
   9b5e0:	10800017 	ldw	r2,0(r2)
   9b5e4:	1006913a 	slli	r3,r2,4
   9b5e8:	e0bffc17 	ldw	r2,-16(fp)
   9b5ec:	108003cc 	andi	r2,r2,15
   9b5f0:	1886b03a 	or	r3,r3,r2
   9b5f4:	e0bff317 	ldw	r2,-52(fp)
   9b5f8:	10c00015 	stw	r3,0(r2)
		x++;
	*--x = 0;
	x1 = xe = x;
	havedig = hd0 = i = 0;
	s = *sp;
	while((c = *(_CONST unsigned char*)++s)) {
   9b5fc:	e0bff517 	ldw	r2,-44(fp)
   9b600:	10800044 	addi	r2,r2,1
   9b604:	e0bff515 	stw	r2,-44(fp)
   9b608:	e0bff517 	ldw	r2,-44(fp)
   9b60c:	10800003 	ldbu	r2,0(r2)
   9b610:	10803fcc 	andi	r2,r2,255
   9b614:	e0bffb15 	stw	r2,-20(fp)
   9b618:	e0bffb17 	ldw	r2,-20(fp)
   9b61c:	103fa71e 	bne	r2,zero,9b4bc <__alt_data_end+0xfffe94bc>
			i = 1;
			*--x = 0;
			}
		*x = ((*x << 4) | (h & 0xf));
		}
	if (!havedig)
   9b620:	e0bff617 	ldw	r2,-40(fp)
   9b624:	1000021e 	bne	r2,zero,9b630 <__hexnan+0x21c>
		return STRTOG_NaN;
   9b628:	00800104 	movi	r2,4
   9b62c:	00004306 	br	9b73c <__hexnan+0x328>
	if (x < x1 && i < 8)
   9b630:	e0fff317 	ldw	r3,-52(fp)
   9b634:	e0bff417 	ldw	r2,-48(fp)
   9b638:	1880072e 	bgeu	r3,r2,9b658 <__hexnan+0x244>
   9b63c:	e0bff817 	ldw	r2,-32(fp)
   9b640:	10800208 	cmpgei	r2,r2,8
   9b644:	1000041e 	bne	r2,zero,9b658 <__hexnan+0x244>
		L_shift(x, x1, i);
   9b648:	e1bff817 	ldw	r6,-32(fp)
   9b64c:	e17ff417 	ldw	r5,-48(fp)
   9b650:	e13ff317 	ldw	r4,-52(fp)
   9b654:	009b3580 	call	9b358 <L_shift>
	if (x > x0) {
   9b658:	e0bff317 	ldw	r2,-52(fp)
   9b65c:	e0ffff17 	ldw	r3,-4(fp)
   9b660:	1880152e 	bgeu	r3,r2,9b6b8 <__hexnan+0x2a4>
		x1 = x0;
   9b664:	e0bfff17 	ldw	r2,-4(fp)
   9b668:	e0bff415 	stw	r2,-48(fp)
		do *x1++ = *x++;
   9b66c:	e0bff417 	ldw	r2,-48(fp)
   9b670:	10c00104 	addi	r3,r2,4
   9b674:	e0fff415 	stw	r3,-48(fp)
   9b678:	e0fff317 	ldw	r3,-52(fp)
   9b67c:	19000104 	addi	r4,r3,4
   9b680:	e13ff315 	stw	r4,-52(fp)
   9b684:	18c00017 	ldw	r3,0(r3)
   9b688:	10c00015 	stw	r3,0(r2)
			while(x <= xe);
   9b68c:	e0bff317 	ldw	r2,-52(fp)
   9b690:	e0fffa17 	ldw	r3,-24(fp)
   9b694:	18bff52e 	bgeu	r3,r2,9b66c <__alt_data_end+0xfffe966c>
		do *x1++ = 0;
   9b698:	e0bff417 	ldw	r2,-48(fp)
   9b69c:	10c00104 	addi	r3,r2,4
   9b6a0:	e0fff415 	stw	r3,-48(fp)
   9b6a4:	10000015 	stw	zero,0(r2)
			while(x1 <= xe);
   9b6a8:	e0bff417 	ldw	r2,-48(fp)
   9b6ac:	e0fffa17 	ldw	r3,-24(fp)
   9b6b0:	18bff92e 	bgeu	r3,r2,9b698 <__alt_data_end+0xfffe9698>
   9b6b4:	00000f06 	br	9b6f4 <__hexnan+0x2e0>
		}
	else {
		/* truncate high-order word if necessary */
		if ( (i = nbits & (ULbits-1)) !=0)
   9b6b8:	e0bff917 	ldw	r2,-28(fp)
   9b6bc:	108007cc 	andi	r2,r2,31
   9b6c0:	e0bff815 	stw	r2,-32(fp)
   9b6c4:	e0bff817 	ldw	r2,-32(fp)
   9b6c8:	10000a26 	beq	r2,zero,9b6f4 <__hexnan+0x2e0>
			*xe &= ((__ULong)0xffffffff) >> (ULbits - i);
   9b6cc:	e0bffa17 	ldw	r2,-24(fp)
   9b6d0:	10c00017 	ldw	r3,0(r2)
   9b6d4:	01000804 	movi	r4,32
   9b6d8:	e0bff817 	ldw	r2,-32(fp)
   9b6dc:	2085c83a 	sub	r2,r4,r2
   9b6e0:	013fffc4 	movi	r4,-1
   9b6e4:	2084d83a 	srl	r2,r4,r2
   9b6e8:	1886703a 	and	r3,r3,r2
   9b6ec:	e0bffa17 	ldw	r2,-24(fp)
   9b6f0:	10c00015 	stw	r3,0(r2)
		}
	for(x1 = xe;; --x1) {
   9b6f4:	e0bffa17 	ldw	r2,-24(fp)
   9b6f8:	e0bff415 	stw	r2,-48(fp)
		if (*x1 != 0)
   9b6fc:	e0bff417 	ldw	r2,-48(fp)
   9b700:	10800017 	ldw	r2,0(r2)
   9b704:	10000b1e 	bne	r2,zero,9b734 <__hexnan+0x320>
			break;
		if (x1 == x0) {
   9b708:	e0fff417 	ldw	r3,-48(fp)
   9b70c:	e0bfff17 	ldw	r2,-4(fp)
   9b710:	1880041e 	bne	r3,r2,9b724 <__hexnan+0x310>
			*x1 = 1;
   9b714:	e0bff417 	ldw	r2,-48(fp)
   9b718:	00c00044 	movi	r3,1
   9b71c:	10c00015 	stw	r3,0(r2)
			break;
   9b720:	00000506 	br	9b738 <__hexnan+0x324>
	else {
		/* truncate high-order word if necessary */
		if ( (i = nbits & (ULbits-1)) !=0)
			*xe &= ((__ULong)0xffffffff) >> (ULbits - i);
		}
	for(x1 = xe;; --x1) {
   9b724:	e0bff417 	ldw	r2,-48(fp)
   9b728:	10bfff04 	addi	r2,r2,-4
   9b72c:	e0bff415 	stw	r2,-48(fp)
			break;
		if (x1 == x0) {
			*x1 = 1;
			break;
			}
		}
   9b730:	003ff206 	br	9b6fc <__alt_data_end+0xfffe96fc>
		if ( (i = nbits & (ULbits-1)) !=0)
			*xe &= ((__ULong)0xffffffff) >> (ULbits - i);
		}
	for(x1 = xe;; --x1) {
		if (*x1 != 0)
			break;
   9b734:	0001883a 	nop
		if (x1 == x0) {
			*x1 = 1;
			break;
			}
		}
	return STRTOG_NaNbits;
   9b738:	00800144 	movi	r2,5
}
   9b73c:	e037883a 	mov	sp,fp
   9b740:	dfc00117 	ldw	ra,4(sp)
   9b744:	df000017 	ldw	fp,0(sp)
   9b748:	dec00204 	addi	sp,sp,8
   9b74c:	f800283a 	ret

0009b750 <strncmp>:
int 
_DEFUN (strncmp, (s1, s2, n),
	_CONST char *s1 _AND
	_CONST char *s2 _AND
	size_t n)
{
   9b750:	defffa04 	addi	sp,sp,-24
   9b754:	df000515 	stw	fp,20(sp)
   9b758:	df000504 	addi	fp,sp,20
   9b75c:	e13ffd15 	stw	r4,-12(fp)
   9b760:	e17ffe15 	stw	r5,-8(fp)
   9b764:	e1bfff15 	stw	r6,-4(fp)
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#else
  unsigned long *a1;
  unsigned long *a2;

  if (n == 0)
   9b768:	e0bfff17 	ldw	r2,-4(fp)
   9b76c:	1000021e 	bne	r2,zero,9b778 <strncmp+0x28>
    return 0;
   9b770:	0005883a 	mov	r2,zero
   9b774:	00005706 	br	9b8d4 <strncmp+0x184>

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
   9b778:	e0fffd17 	ldw	r3,-12(fp)
   9b77c:	e0bffe17 	ldw	r2,-8(fp)
   9b780:	1884b03a 	or	r2,r3,r2
   9b784:	108000cc 	andi	r2,r2,3
   9b788:	10003c1e 	bne	r2,zero,9b87c <strncmp+0x12c>
    {
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
   9b78c:	e0bffd17 	ldw	r2,-12(fp)
   9b790:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*)s2;
   9b794:	e0bffe17 	ldw	r2,-8(fp)
   9b798:	e0bffc15 	stw	r2,-16(fp)
      while (n >= sizeof (long) && *a1 == *a2)
   9b79c:	00001a06 	br	9b808 <strncmp+0xb8>
        {
          n -= sizeof (long);
   9b7a0:	e0bfff17 	ldw	r2,-4(fp)
   9b7a4:	10bfff04 	addi	r2,r2,-4
   9b7a8:	e0bfff15 	stw	r2,-4(fp)

          /* If we've run out of bytes or hit a null, return zero
	     since we already know *a1 == *a2.  */
          if (n == 0 || DETECTNULL (*a1))
   9b7ac:	e0bfff17 	ldw	r2,-4(fp)
   9b7b0:	10000d26 	beq	r2,zero,9b7e8 <strncmp+0x98>
   9b7b4:	e0bffb17 	ldw	r2,-20(fp)
   9b7b8:	10c00017 	ldw	r3,0(r2)
   9b7bc:	00bfbff4 	movhi	r2,65279
   9b7c0:	10bfbfc4 	addi	r2,r2,-257
   9b7c4:	1887883a 	add	r3,r3,r2
   9b7c8:	e0bffb17 	ldw	r2,-20(fp)
   9b7cc:	10800017 	ldw	r2,0(r2)
   9b7d0:	0084303a 	nor	r2,zero,r2
   9b7d4:	1886703a 	and	r3,r3,r2
   9b7d8:	00a02074 	movhi	r2,32897
   9b7dc:	10a02004 	addi	r2,r2,-32640
   9b7e0:	1884703a 	and	r2,r3,r2
   9b7e4:	10000226 	beq	r2,zero,9b7f0 <strncmp+0xa0>
	    return 0;
   9b7e8:	0005883a 	mov	r2,zero
   9b7ec:	00003906 	br	9b8d4 <strncmp+0x184>

          a1++;
   9b7f0:	e0bffb17 	ldw	r2,-20(fp)
   9b7f4:	10800104 	addi	r2,r2,4
   9b7f8:	e0bffb15 	stw	r2,-20(fp)
          a2++;
   9b7fc:	e0bffc17 	ldw	r2,-16(fp)
   9b800:	10800104 	addi	r2,r2,4
   9b804:	e0bffc15 	stw	r2,-16(fp)
  if (!UNALIGNED (s1, s2))
    {
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (n >= sizeof (long) && *a1 == *a2)
   9b808:	e0bfff17 	ldw	r2,-4(fp)
   9b80c:	10800130 	cmpltui	r2,r2,4
   9b810:	1000051e 	bne	r2,zero,9b828 <strncmp+0xd8>
   9b814:	e0bffb17 	ldw	r2,-20(fp)
   9b818:	10c00017 	ldw	r3,0(r2)
   9b81c:	e0bffc17 	ldw	r2,-16(fp)
   9b820:	10800017 	ldw	r2,0(r2)
   9b824:	18bfde26 	beq	r3,r2,9b7a0 <__alt_data_end+0xfffe97a0>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
   9b828:	e0bffb17 	ldw	r2,-20(fp)
   9b82c:	e0bffd15 	stw	r2,-12(fp)
      s2 = (char*)a2;
   9b830:	e0bffc17 	ldw	r2,-16(fp)
   9b834:	e0bffe15 	stw	r2,-8(fp)
    }

  while (n-- > 0 && *s1 == *s2)
   9b838:	00001006 	br	9b87c <strncmp+0x12c>
    {
      /* If we've run out of bytes or hit a null, return zero
	 since we already know *s1 == *s2.  */
      if (n == 0 || *s1 == '\0')
   9b83c:	e0bfff17 	ldw	r2,-4(fp)
   9b840:	10000626 	beq	r2,zero,9b85c <strncmp+0x10c>
   9b844:	e0bffd17 	ldw	r2,-12(fp)
   9b848:	10800003 	ldbu	r2,0(r2)
   9b84c:	10803fcc 	andi	r2,r2,255
   9b850:	1080201c 	xori	r2,r2,128
   9b854:	10bfe004 	addi	r2,r2,-128
   9b858:	1000021e 	bne	r2,zero,9b864 <strncmp+0x114>
	return 0;
   9b85c:	0005883a 	mov	r2,zero
   9b860:	00001c06 	br	9b8d4 <strncmp+0x184>
      s1++;
   9b864:	e0bffd17 	ldw	r2,-12(fp)
   9b868:	10800044 	addi	r2,r2,1
   9b86c:	e0bffd15 	stw	r2,-12(fp)
      s2++;
   9b870:	e0bffe17 	ldw	r2,-8(fp)
   9b874:	10800044 	addi	r2,r2,1
   9b878:	e0bffe15 	stw	r2,-8(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (n-- > 0 && *s1 == *s2)
   9b87c:	e0bfff17 	ldw	r2,-4(fp)
   9b880:	10ffffc4 	addi	r3,r2,-1
   9b884:	e0ffff15 	stw	r3,-4(fp)
   9b888:	10000b26 	beq	r2,zero,9b8b8 <strncmp+0x168>
   9b88c:	e0bffd17 	ldw	r2,-12(fp)
   9b890:	10c00003 	ldbu	r3,0(r2)
   9b894:	e0bffe17 	ldw	r2,-8(fp)
   9b898:	10800003 	ldbu	r2,0(r2)
   9b89c:	18c03fcc 	andi	r3,r3,255
   9b8a0:	18c0201c 	xori	r3,r3,128
   9b8a4:	18ffe004 	addi	r3,r3,-128
   9b8a8:	10803fcc 	andi	r2,r2,255
   9b8ac:	1080201c 	xori	r2,r2,128
   9b8b0:	10bfe004 	addi	r2,r2,-128
   9b8b4:	18bfe126 	beq	r3,r2,9b83c <__alt_data_end+0xfffe983c>
      if (n == 0 || *s1 == '\0')
	return 0;
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
   9b8b8:	e0bffd17 	ldw	r2,-12(fp)
   9b8bc:	10800003 	ldbu	r2,0(r2)
   9b8c0:	10c03fcc 	andi	r3,r2,255
   9b8c4:	e0bffe17 	ldw	r2,-8(fp)
   9b8c8:	10800003 	ldbu	r2,0(r2)
   9b8cc:	10803fcc 	andi	r2,r2,255
   9b8d0:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   9b8d4:	e037883a 	mov	sp,fp
   9b8d8:	df000017 	ldw	fp,0(sp)
   9b8dc:	dec00104 	addi	sp,sp,4
   9b8e0:	f800283a 	ret

0009b8e4 <__ssprint_r>:
int
_DEFUN(__ssprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
   9b8e4:	defff404 	addi	sp,sp,-48
   9b8e8:	dfc00b15 	stw	ra,44(sp)
   9b8ec:	df000a15 	stw	fp,40(sp)
   9b8f0:	dd000915 	stw	r20,36(sp)
   9b8f4:	dcc00815 	stw	r19,32(sp)
   9b8f8:	dc800715 	stw	r18,28(sp)
   9b8fc:	dc400615 	stw	r17,24(sp)
   9b900:	dc000515 	stw	r16,20(sp)
   9b904:	df000a04 	addi	fp,sp,40
   9b908:	e13ff915 	stw	r4,-28(fp)
   9b90c:	e17ffa15 	stw	r5,-24(fp)
   9b910:	3021883a 	mov	r16,r6
	register size_t len;
	register int w;
	register struct __siov *iov;
	register _CONST char *p = NULL;
   9b914:	0029883a 	mov	r20,zero

	iov = uio->uio_iov;
   9b918:	84c00017 	ldw	r19,0(r16)
	len = 0;
   9b91c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
   9b920:	80800217 	ldw	r2,8(r16)
   9b924:	1000061e 	bne	r2,zero,9b940 <__ssprint_r+0x5c>
		uio->uio_iovcnt = 0;
   9b928:	80000115 	stw	zero,4(r16)
		return (0);
   9b92c:	0005883a 	mov	r2,zero
   9b930:	00009706 	br	9bb90 <__ssprint_r+0x2ac>
	}

        do {
		while (len == 0) {
			p = iov->iov_base;
   9b934:	9d000017 	ldw	r20,0(r19)
			len = iov->iov_len;
   9b938:	9c400117 	ldw	r17,4(r19)
			iov++;
   9b93c:	9cc00204 	addi	r19,r19,8
		uio->uio_iovcnt = 0;
		return (0);
	}

        do {
		while (len == 0) {
   9b940:	883ffc26 	beq	r17,zero,9b934 <__alt_data_end+0xfffe9934>
			p = iov->iov_base;
			len = iov->iov_len;
			iov++;
		}
		w = fp->_w;
   9b944:	e0bffa17 	ldw	r2,-24(fp)
   9b948:	14800217 	ldw	r18,8(r2)
		if (len >= w && fp->_flags & (__SMBF | __SOPT)) {
   9b94c:	9005883a 	mov	r2,r18
   9b950:	88806236 	bltu	r17,r2,9badc <__ssprint_r+0x1f8>
   9b954:	e0bffa17 	ldw	r2,-24(fp)
   9b958:	1080030b 	ldhu	r2,12(r2)
   9b95c:	10bfffcc 	andi	r2,r2,65535
   9b960:	1081200c 	andi	r2,r2,1152
   9b964:	10005d26 	beq	r2,zero,9badc <__ssprint_r+0x1f8>
			/* must be asprintf family */
			unsigned char *str;
			int curpos = (fp->_p - fp->_bf._base);
   9b968:	e0bffa17 	ldw	r2,-24(fp)
   9b96c:	10800017 	ldw	r2,0(r2)
   9b970:	1007883a 	mov	r3,r2
   9b974:	e0bffa17 	ldw	r2,-24(fp)
   9b978:	10800417 	ldw	r2,16(r2)
   9b97c:	1885c83a 	sub	r2,r3,r2
   9b980:	e0bff815 	stw	r2,-32(fp)
			 * than (1+sqrt(5))/2 to accomodate malloc
		 	 * overhead. asprintf EXPECTS us to overallocate, so
		 	 * that it can add a trailing \0 without
		 	 * reallocating.  The new allocation should thus be
		 	 * max(prev_size*1.5, curpos+len+1). */
			int newsize = fp->_bf._size * 3 / 2;
   9b984:	e0bffa17 	ldw	r2,-24(fp)
   9b988:	10c00517 	ldw	r3,20(r2)
   9b98c:	1805883a 	mov	r2,r3
   9b990:	1085883a 	add	r2,r2,r2
   9b994:	10c5883a 	add	r2,r2,r3
   9b998:	1006d7fa 	srli	r3,r2,31
   9b99c:	1885883a 	add	r2,r3,r2
   9b9a0:	1005d07a 	srai	r2,r2,1
   9b9a4:	e0bff715 	stw	r2,-36(fp)
			if (newsize < curpos + len + 1)
   9b9a8:	e0bff817 	ldw	r2,-32(fp)
   9b9ac:	1445883a 	add	r2,r2,r17
   9b9b0:	10800044 	addi	r2,r2,1
   9b9b4:	e0fff717 	ldw	r3,-36(fp)
   9b9b8:	1880042e 	bgeu	r3,r2,9b9cc <__ssprint_r+0xe8>
				newsize = curpos + len + 1;
   9b9bc:	e0bff817 	ldw	r2,-32(fp)
   9b9c0:	1445883a 	add	r2,r2,r17
   9b9c4:	10800044 	addi	r2,r2,1
   9b9c8:	e0bff715 	stw	r2,-36(fp)
			if (fp->_flags & __SOPT)
   9b9cc:	e0bffa17 	ldw	r2,-24(fp)
   9b9d0:	1080030b 	ldhu	r2,12(r2)
   9b9d4:	10bfffcc 	andi	r2,r2,65535
   9b9d8:	1081000c 	andi	r2,r2,1024
   9b9dc:	10001b26 	beq	r2,zero,9ba4c <__ssprint_r+0x168>
			{
				/* asnprintf leaves original buffer alone.  */
				str = (unsigned char *)_malloc_r (ptr, newsize);
   9b9e0:	e0bff717 	ldw	r2,-36(fp)
   9b9e4:	100b883a 	mov	r5,r2
   9b9e8:	e13ff917 	ldw	r4,-28(fp)
   9b9ec:	00874a40 	call	874a4 <_malloc_r>
   9b9f0:	e0bff615 	stw	r2,-40(fp)
				if (!str)
   9b9f4:	e0bff617 	ldw	r2,-40(fp)
   9b9f8:	1000041e 	bne	r2,zero,9ba0c <__ssprint_r+0x128>
				{
					ptr->_errno = ENOMEM;
   9b9fc:	e0bff917 	ldw	r2,-28(fp)
   9ba00:	00c00304 	movi	r3,12
   9ba04:	10c00015 	stw	r3,0(r2)
					goto err;
   9ba08:	00005806 	br	9bb6c <__ssprint_r+0x288>
				}
				memcpy (str, fp->_bf._base, curpos);
   9ba0c:	e0bffa17 	ldw	r2,-24(fp)
   9ba10:	10800417 	ldw	r2,16(r2)
   9ba14:	e0fff817 	ldw	r3,-32(fp)
   9ba18:	180d883a 	mov	r6,r3
   9ba1c:	100b883a 	mov	r5,r2
   9ba20:	e13ff617 	ldw	r4,-40(fp)
   9ba24:	009069c0 	call	9069c <memcpy>
				fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   9ba28:	e0bffa17 	ldw	r2,-24(fp)
   9ba2c:	10c0030b 	ldhu	r3,12(r2)
   9ba30:	00bedfc4 	movi	r2,-1153
   9ba34:	1884703a 	and	r2,r3,r2
   9ba38:	10802014 	ori	r2,r2,128
   9ba3c:	1007883a 	mov	r3,r2
   9ba40:	e0bffa17 	ldw	r2,-24(fp)
   9ba44:	10c0030d 	sth	r3,12(r2)
   9ba48:	00001306 	br	9ba98 <__ssprint_r+0x1b4>
			}
			else
			{
				str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   9ba4c:	e0bffa17 	ldw	r2,-24(fp)
   9ba50:	10800417 	ldw	r2,16(r2)
   9ba54:	e0fff717 	ldw	r3,-36(fp)
   9ba58:	180d883a 	mov	r6,r3
   9ba5c:	100b883a 	mov	r5,r2
   9ba60:	e13ff917 	ldw	r4,-28(fp)
   9ba64:	009254c0 	call	9254c <_realloc_r>
   9ba68:	e0bff615 	stw	r2,-40(fp)
						newsize);
				if (!str) {
   9ba6c:	e0bff617 	ldw	r2,-40(fp)
   9ba70:	1000091e 	bne	r2,zero,9ba98 <__ssprint_r+0x1b4>
					/* Free unneeded buffer.  */
					_free_r (ptr, fp->_bf._base);
   9ba74:	e0bffa17 	ldw	r2,-24(fp)
   9ba78:	10800417 	ldw	r2,16(r2)
   9ba7c:	100b883a 	mov	r5,r2
   9ba80:	e13ff917 	ldw	r4,-28(fp)
   9ba84:	0085c480 	call	85c48 <_free_r>
					/* Ensure correct errno, even if free
					 * changed it.  */
					ptr->_errno = ENOMEM;
   9ba88:	e0bff917 	ldw	r2,-28(fp)
   9ba8c:	00c00304 	movi	r3,12
   9ba90:	10c00015 	stw	r3,0(r2)
					goto err;
   9ba94:	00003506 	br	9bb6c <__ssprint_r+0x288>
				}
			}
			fp->_bf._base = str;
   9ba98:	e0bffa17 	ldw	r2,-24(fp)
   9ba9c:	e0fff617 	ldw	r3,-40(fp)
   9baa0:	10c00415 	stw	r3,16(r2)
			fp->_p = str + curpos;
   9baa4:	e0bff817 	ldw	r2,-32(fp)
   9baa8:	e0fff617 	ldw	r3,-40(fp)
   9baac:	1887883a 	add	r3,r3,r2
   9bab0:	e0bffa17 	ldw	r2,-24(fp)
   9bab4:	10c00015 	stw	r3,0(r2)
			fp->_bf._size = newsize;
   9bab8:	e0bffa17 	ldw	r2,-24(fp)
   9babc:	e0fff717 	ldw	r3,-36(fp)
   9bac0:	10c00515 	stw	r3,20(r2)
			w = len;
   9bac4:	8825883a 	mov	r18,r17
			fp->_w = newsize - curpos;
   9bac8:	e0fff717 	ldw	r3,-36(fp)
   9bacc:	e0bff817 	ldw	r2,-32(fp)
   9bad0:	1887c83a 	sub	r3,r3,r2
   9bad4:	e0bffa17 	ldw	r2,-24(fp)
   9bad8:	10c00215 	stw	r3,8(r2)
		}
		if (len < w)
   9badc:	9005883a 	mov	r2,r18
   9bae0:	8880012e 	bgeu	r17,r2,9bae8 <__ssprint_r+0x204>
			w = len;
   9bae4:	8825883a 	mov	r18,r17
		(void)memmove ((_PTR) fp->_p, (_PTR) p, (size_t) (w));
   9bae8:	e0bffa17 	ldw	r2,-24(fp)
   9baec:	10800017 	ldw	r2,0(r2)
   9baf0:	9007883a 	mov	r3,r18
   9baf4:	180d883a 	mov	r6,r3
   9baf8:	a00b883a 	mov	r5,r20
   9bafc:	1009883a 	mov	r4,r2
   9bb00:	00908240 	call	90824 <memmove>
		fp->_w -= w;
   9bb04:	e0bffa17 	ldw	r2,-24(fp)
   9bb08:	10800217 	ldw	r2,8(r2)
   9bb0c:	1487c83a 	sub	r3,r2,r18
   9bb10:	e0bffa17 	ldw	r2,-24(fp)
   9bb14:	10c00215 	stw	r3,8(r2)
		fp->_p += w;
   9bb18:	e0bffa17 	ldw	r2,-24(fp)
   9bb1c:	10800017 	ldw	r2,0(r2)
   9bb20:	9007883a 	mov	r3,r18
   9bb24:	10c7883a 	add	r3,r2,r3
   9bb28:	e0bffa17 	ldw	r2,-24(fp)
   9bb2c:	10c00015 	stw	r3,0(r2)
		w = len;          /* pretend we copied all */
   9bb30:	8825883a 	mov	r18,r17
		p += w;
   9bb34:	9005883a 	mov	r2,r18
   9bb38:	a0a9883a 	add	r20,r20,r2
		len -= w;
   9bb3c:	9005883a 	mov	r2,r18
   9bb40:	88a3c83a 	sub	r17,r17,r2
        } while ((uio->uio_resid -= w) != 0);
   9bb44:	80800217 	ldw	r2,8(r16)
   9bb48:	9007883a 	mov	r3,r18
   9bb4c:	10c5c83a 	sub	r2,r2,r3
   9bb50:	80800215 	stw	r2,8(r16)
   9bb54:	80800217 	ldw	r2,8(r16)
   9bb58:	103f791e 	bne	r2,zero,9b940 <__alt_data_end+0xfffe9940>

	uio->uio_resid = 0;
   9bb5c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
   9bb60:	80000115 	stw	zero,4(r16)
	return 0;
   9bb64:	0005883a 	mov	r2,zero
   9bb68:	00000906 	br	9bb90 <__ssprint_r+0x2ac>

err:
  fp->_flags |= __SERR;
   9bb6c:	e0bffa17 	ldw	r2,-24(fp)
   9bb70:	1080030b 	ldhu	r2,12(r2)
   9bb74:	10801014 	ori	r2,r2,64
   9bb78:	1007883a 	mov	r3,r2
   9bb7c:	e0bffa17 	ldw	r2,-24(fp)
   9bb80:	10c0030d 	sth	r3,12(r2)
  uio->uio_resid = 0;
   9bb84:	80000215 	stw	zero,8(r16)
  uio->uio_iovcnt = 0;
   9bb88:	80000115 	stw	zero,4(r16)
  return EOF;
   9bb8c:	00bfffc4 	movi	r2,-1
}
   9bb90:	e6fffb04 	addi	sp,fp,-20
   9bb94:	dfc00617 	ldw	ra,24(sp)
   9bb98:	df000517 	ldw	fp,20(sp)
   9bb9c:	dd000417 	ldw	r20,16(sp)
   9bba0:	dcc00317 	ldw	r19,12(sp)
   9bba4:	dc800217 	ldw	r18,8(sp)
   9bba8:	dc400117 	ldw	r17,4(sp)
   9bbac:	dc000017 	ldw	r16,0(sp)
   9bbb0:	dec00704 	addi	sp,sp,28
   9bbb4:	f800283a 	ret

0009bbb8 <___svfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   9bbb8:	deffb804 	addi	sp,sp,-288
   9bbbc:	dfc04715 	stw	ra,284(sp)
   9bbc0:	df004615 	stw	fp,280(sp)
   9bbc4:	ddc04515 	stw	r23,276(sp)
   9bbc8:	dd804415 	stw	r22,272(sp)
   9bbcc:	dd404315 	stw	r21,268(sp)
   9bbd0:	dd004215 	stw	r20,264(sp)
   9bbd4:	dcc04115 	stw	r19,260(sp)
   9bbd8:	dc804015 	stw	r18,256(sp)
   9bbdc:	dc403f15 	stw	r17,252(sp)
   9bbe0:	dc003e15 	stw	r16,248(sp)
   9bbe4:	df004604 	addi	fp,sp,280
   9bbe8:	e13fe615 	stw	r4,-104(fp)
   9bbec:	e17fe715 	stw	r5,-100(fp)
   9bbf0:	e1bfe815 	stw	r6,-96(fp)
   9bbf4:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   9bbf8:	e03fc315 	stw	zero,-244(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   9bbfc:	e03fc415 	stw	zero,-240(fp)
		return (__sbprintf (data, fp, fmt0, ap));
	}
#endif
#else /* STRING_ONLY */
        /* Create initial buffer if we are called by asprintf family.  */
        if (fp->_flags & __SMBF && !fp->_bf._base)
   9bc00:	e0bfe717 	ldw	r2,-100(fp)
   9bc04:	1080030b 	ldhu	r2,12(r2)
   9bc08:	10bfffcc 	andi	r2,r2,65535
   9bc0c:	1080200c 	andi	r2,r2,128
   9bc10:	10001826 	beq	r2,zero,9bc74 <___svfiprintf_internal_r+0xbc>
   9bc14:	e0bfe717 	ldw	r2,-100(fp)
   9bc18:	10800417 	ldw	r2,16(r2)
   9bc1c:	1000151e 	bne	r2,zero,9bc74 <___svfiprintf_internal_r+0xbc>
        {
		fp->_bf._base = fp->_p = _malloc_r (data, 64);
   9bc20:	01401004 	movi	r5,64
   9bc24:	e13fe617 	ldw	r4,-104(fp)
   9bc28:	00874a40 	call	874a4 <_malloc_r>
   9bc2c:	1007883a 	mov	r3,r2
   9bc30:	e0bfe717 	ldw	r2,-100(fp)
   9bc34:	10c00015 	stw	r3,0(r2)
   9bc38:	e0bfe717 	ldw	r2,-100(fp)
   9bc3c:	10c00017 	ldw	r3,0(r2)
   9bc40:	e0bfe717 	ldw	r2,-100(fp)
   9bc44:	10c00415 	stw	r3,16(r2)
		if (!fp->_p)
   9bc48:	e0bfe717 	ldw	r2,-100(fp)
   9bc4c:	10800017 	ldw	r2,0(r2)
   9bc50:	1000051e 	bne	r2,zero,9bc68 <___svfiprintf_internal_r+0xb0>
		{
			data->_errno = ENOMEM;
   9bc54:	e0bfe617 	ldw	r2,-104(fp)
   9bc58:	00c00304 	movi	r3,12
   9bc5c:	10c00015 	stw	r3,0(r2)
			return EOF;
   9bc60:	00bfffc4 	movi	r2,-1
   9bc64:	00046106 	br	9cdec <___svfiprintf_internal_r+0x1234>
		}
		fp->_bf._size = 64;
   9bc68:	e0bfe717 	ldw	r2,-100(fp)
   9bc6c:	00c01004 	movi	r3,64
   9bc70:	10c00515 	stw	r3,20(r2)
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   9bc74:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   9bc78:	e4bfcb04 	addi	r18,fp,-212
   9bc7c:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
   9bc80:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   9bc84:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   9bc88:	e03fba15 	stw	zero,-280(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   9bc8c:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   9bc90:	00000106 	br	9bc98 <___svfiprintf_internal_r+0xe0>
                    fmt += 1;
   9bc94:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   9bc98:	a8800003 	ldbu	r2,0(r21)
   9bc9c:	10803fcc 	andi	r2,r2,255
   9bca0:	1080201c 	xori	r2,r2,128
   9bca4:	10bfe004 	addi	r2,r2,-128
   9bca8:	10000626 	beq	r2,zero,9bcc4 <___svfiprintf_internal_r+0x10c>
   9bcac:	a8800003 	ldbu	r2,0(r21)
   9bcb0:	10803fcc 	andi	r2,r2,255
   9bcb4:	1080201c 	xori	r2,r2,128
   9bcb8:	10bfe004 	addi	r2,r2,-128
   9bcbc:	10800958 	cmpnei	r2,r2,37
   9bcc0:	103ff41e 	bne	r2,zero,9bc94 <__alt_data_end+0xfffe9c94>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   9bcc4:	a807883a 	mov	r3,r21
   9bcc8:	a005883a 	mov	r2,r20
   9bccc:	18a1c83a 	sub	r16,r3,r2
   9bcd0:	80001826 	beq	r16,zero,9bd34 <___svfiprintf_internal_r+0x17c>
			PRINT (cp, m);
   9bcd4:	95000015 	stw	r20,0(r18)
   9bcd8:	8005883a 	mov	r2,r16
   9bcdc:	90800115 	stw	r2,4(r18)
   9bce0:	e0bfca17 	ldw	r2,-216(fp)
   9bce4:	8007883a 	mov	r3,r16
   9bce8:	10c5883a 	add	r2,r2,r3
   9bcec:	e0bfca15 	stw	r2,-216(fp)
   9bcf0:	94800204 	addi	r18,r18,8
   9bcf4:	e0bfc917 	ldw	r2,-220(fp)
   9bcf8:	10800044 	addi	r2,r2,1
   9bcfc:	e0bfc915 	stw	r2,-220(fp)
   9bd00:	e0bfc917 	ldw	r2,-220(fp)
   9bd04:	10800210 	cmplti	r2,r2,8
   9bd08:	1000071e 	bne	r2,zero,9bd28 <___svfiprintf_internal_r+0x170>
   9bd0c:	e0bfc804 	addi	r2,fp,-224
   9bd10:	100d883a 	mov	r6,r2
   9bd14:	e17fe717 	ldw	r5,-100(fp)
   9bd18:	e13fe617 	ldw	r4,-104(fp)
   9bd1c:	009b8e40 	call	9b8e4 <__ssprint_r>
   9bd20:	1004091e 	bne	r2,zero,9cd48 <___svfiprintf_internal_r+0x1190>
   9bd24:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
   9bd28:	e0bfba17 	ldw	r2,-280(fp)
   9bd2c:	1405883a 	add	r2,r2,r16
   9bd30:	e0bfba15 	stw	r2,-280(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   9bd34:	a8800003 	ldbu	r2,0(r21)
   9bd38:	10803fcc 	andi	r2,r2,255
   9bd3c:	1080201c 	xori	r2,r2,128
   9bd40:	10bfe004 	addi	r2,r2,-128
   9bd44:	1003f226 	beq	r2,zero,9cd10 <___svfiprintf_internal_r+0x1158>
                    goto done;
#endif
		fmt_anchor = fmt;
   9bd48:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
   9bd4c:	ad400044 	addi	r21,r21,1

		flags = 0;
   9bd50:	0027883a 	mov	r19,zero
		dprec = 0;
   9bd54:	e03fc015 	stw	zero,-256(fp)
		width = 0;
   9bd58:	e03fbb15 	stw	zero,-276(fp)
		prec = -1;
   9bd5c:	00bfffc4 	movi	r2,-1
   9bd60:	e0bfbc15 	stw	r2,-272(fp)
		sign = '\0';
   9bd64:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   9bd68:	a805883a 	mov	r2,r21
   9bd6c:	15400044 	addi	r21,r2,1
   9bd70:	10800003 	ldbu	r2,0(r2)
   9bd74:	14403fcc 	andi	r17,r2,255
   9bd78:	8c40201c 	xori	r17,r17,128
   9bd7c:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
   9bd80:	88bff804 	addi	r2,r17,-32
   9bd84:	10c01668 	cmpgeui	r3,r2,89
   9bd88:	18028e1e 	bne	r3,zero,9c7c4 <___svfiprintf_internal_r+0xc0c>
   9bd8c:	100690ba 	slli	r3,r2,2
   9bd90:	008002b4 	movhi	r2,10
   9bd94:	10af6904 	addi	r2,r2,-16988
   9bd98:	1885883a 	add	r2,r3,r2
   9bd9c:	10800017 	ldw	r2,0(r2)
   9bda0:	1000683a 	jmp	r2
   9bda4:	0009bf08 	cmpgei	zero,zero,9980
   9bda8:	0009c7c4 	movi	zero,10015
   9bdac:	0009c7c4 	movi	zero,10015
   9bdb0:	0009bf28 	cmpgeui	zero,zero,9980
   9bdb4:	0009c7c4 	movi	zero,10015
   9bdb8:	0009c7c4 	movi	zero,10015
   9bdbc:	0009c7c4 	movi	zero,10015
   9bdc0:	0009c7c4 	movi	zero,10015
   9bdc4:	0009c7c4 	movi	zero,10015
   9bdc8:	0009c7c4 	movi	zero,10015
   9bdcc:	0009bf30 	cmpltui	zero,zero,9980
   9bdd0:	0009bf64 	muli	zero,zero,9981
   9bdd4:	0009c7c4 	movi	zero,10015
   9bdd8:	0009bf5c 	xori	zero,zero,9981
   9bddc:	0009bf70 	cmpltui	zero,zero,9981
   9bde0:	0009c7c4 	movi	zero,10015
   9bde4:	0009c010 	cmplti	zero,zero,9984
   9bde8:	0009c018 	cmpnei	zero,zero,9984
   9bdec:	0009c018 	cmpnei	zero,zero,9984
   9bdf0:	0009c018 	cmpnei	zero,zero,9984
   9bdf4:	0009c018 	cmpnei	zero,zero,9984
   9bdf8:	0009c018 	cmpnei	zero,zero,9984
   9bdfc:	0009c018 	cmpnei	zero,zero,9984
   9be00:	0009c018 	cmpnei	zero,zero,9984
   9be04:	0009c018 	cmpnei	zero,zero,9984
   9be08:	0009c018 	cmpnei	zero,zero,9984
   9be0c:	0009c7c4 	movi	zero,10015
   9be10:	0009c7c4 	movi	zero,10015
   9be14:	0009c7c4 	movi	zero,10015
   9be18:	0009c7c4 	movi	zero,10015
   9be1c:	0009c7c4 	movi	zero,10015
   9be20:	0009c7c4 	movi	zero,10015
   9be24:	0009c7c4 	movi	zero,10015
   9be28:	0009c7c4 	movi	zero,10015
   9be2c:	0009c7c4 	movi	zero,10015
   9be30:	0009c7c4 	movi	zero,10015
   9be34:	0009c0c4 	movi	zero,9987
   9be38:	0009c7c4 	movi	zero,10015
   9be3c:	0009c7c4 	movi	zero,10015
   9be40:	0009c7c4 	movi	zero,10015
   9be44:	0009c7c4 	movi	zero,10015
   9be48:	0009c7c4 	movi	zero,10015
   9be4c:	0009c7c4 	movi	zero,10015
   9be50:	0009c7c4 	movi	zero,10015
   9be54:	0009c7c4 	movi	zero,10015
   9be58:	0009c7c4 	movi	zero,10015
   9be5c:	0009c7c4 	movi	zero,10015
   9be60:	0009c264 	muli	zero,zero,9993
   9be64:	0009c7c4 	movi	zero,10015
   9be68:	0009c7c4 	movi	zero,10015
   9be6c:	0009c7c4 	movi	zero,10015
   9be70:	0009c7c4 	movi	zero,10015
   9be74:	0009c7c4 	movi	zero,10015
   9be78:	0009c3e0 	cmpeqi	zero,zero,9999
   9be7c:	0009c7c4 	movi	zero,10015
   9be80:	0009c7c4 	movi	zero,10015
   9be84:	0009c4a0 	cmpeqi	zero,zero,10002
   9be88:	0009c7c4 	movi	zero,10015
   9be8c:	0009c7c4 	movi	zero,10015
   9be90:	0009c7c4 	movi	zero,10015
   9be94:	0009c7c4 	movi	zero,10015
   9be98:	0009c7c4 	movi	zero,10015
   9be9c:	0009c7c4 	movi	zero,10015
   9bea0:	0009c7c4 	movi	zero,10015
   9bea4:	0009c7c4 	movi	zero,10015
   9bea8:	0009c7c4 	movi	zero,10015
   9beac:	0009c7c4 	movi	zero,10015
   9beb0:	0009c09c 	xori	zero,zero,9986
   9beb4:	0009c0c8 	cmpgei	zero,zero,9987
   9beb8:	0009c7c4 	movi	zero,10015
   9bebc:	0009c7c4 	movi	zero,10015
   9bec0:	0009c7c4 	movi	zero,10015
   9bec4:	0009c060 	cmpeqi	zero,zero,9985
   9bec8:	0009c0c8 	cmpgei	zero,zero,9987
   9becc:	0009c7c4 	movi	zero,10015
   9bed0:	0009c7c4 	movi	zero,10015
   9bed4:	0009c068 	cmpgeui	zero,zero,9985
   9bed8:	0009c7c4 	movi	zero,10015
   9bedc:	0009c1c4 	movi	zero,9991
   9bee0:	0009c268 	cmpgeui	zero,zero,9993
   9bee4:	0009c308 	cmpgei	zero,zero,9996
   9bee8:	0009c094 	movui	zero,9986
   9beec:	0009c7c4 	movi	zero,10015
   9bef0:	0009c350 	cmplti	zero,zero,9997
   9bef4:	0009c7c4 	movi	zero,10015
   9bef8:	0009c3e4 	muli	zero,zero,9999
   9befc:	0009c7c4 	movi	zero,10015
   9bf00:	0009c7c4 	movi	zero,10015
   9bf04:	0009c4b0 	cmpltui	zero,zero,10002
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   9bf08:	e0bfc703 	ldbu	r2,-228(fp)
   9bf0c:	10803fcc 	andi	r2,r2,255
   9bf10:	1080201c 	xori	r2,r2,128
   9bf14:	10bfe004 	addi	r2,r2,-128
   9bf18:	103f931e 	bne	r2,zero,9bd68 <__alt_data_end+0xfffe9d68>
				sign = ' ';
   9bf1c:	00800804 	movi	r2,32
   9bf20:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   9bf24:	003f9006 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case '#':
			flags |= ALT;
   9bf28:	9cc00054 	ori	r19,r19,1
			goto rflag;
   9bf2c:	003f8e06 	br	9bd68 <__alt_data_end+0xfffe9d68>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   9bf30:	e0bfe917 	ldw	r2,-92(fp)
   9bf34:	10c00104 	addi	r3,r2,4
   9bf38:	e0ffe915 	stw	r3,-92(fp)
   9bf3c:	10800017 	ldw	r2,0(r2)
   9bf40:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   9bf44:	e0bfbb17 	ldw	r2,-276(fp)
   9bf48:	10000116 	blt	r2,zero,9bf50 <___svfiprintf_internal_r+0x398>
				goto rflag;
   9bf4c:	003f8606 	br	9bd68 <__alt_data_end+0xfffe9d68>
			width = -width;
   9bf50:	e0bfbb17 	ldw	r2,-276(fp)
   9bf54:	0085c83a 	sub	r2,zero,r2
   9bf58:	e0bfbb15 	stw	r2,-276(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   9bf5c:	9cc00114 	ori	r19,r19,4
			goto rflag;
   9bf60:	003f8106 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case '+':
			sign = '+';
   9bf64:	00800ac4 	movi	r2,43
   9bf68:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   9bf6c:	003f7e06 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case '.':
			if ((ch = *fmt++) == '*') {
   9bf70:	a805883a 	mov	r2,r21
   9bf74:	15400044 	addi	r21,r2,1
   9bf78:	10800003 	ldbu	r2,0(r2)
   9bf7c:	14403fcc 	andi	r17,r2,255
   9bf80:	8c40201c 	xori	r17,r17,128
   9bf84:	8c7fe004 	addi	r17,r17,-128
   9bf88:	88800a98 	cmpnei	r2,r17,42
   9bf8c:	10000a1e 	bne	r2,zero,9bfb8 <___svfiprintf_internal_r+0x400>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   9bf90:	e0bfe917 	ldw	r2,-92(fp)
   9bf94:	10c00104 	addi	r3,r2,4
   9bf98:	e0ffe915 	stw	r3,-92(fp)
   9bf9c:	10800017 	ldw	r2,0(r2)
   9bfa0:	e0bfbc15 	stw	r2,-272(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   9bfa4:	e0bfbc17 	ldw	r2,-272(fp)
   9bfa8:	103f6f0e 	bge	r2,zero,9bd68 <__alt_data_end+0xfffe9d68>
					prec = -1;
   9bfac:	00bfffc4 	movi	r2,-1
   9bfb0:	e0bfbc15 	stw	r2,-272(fp)
				goto rflag;
   9bfb4:	003f6c06 	br	9bd68 <__alt_data_end+0xfffe9d68>
			}
			n = 0;
   9bfb8:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   9bfbc:	00000c06 	br	9bff0 <___svfiprintf_internal_r+0x438>
				n = 10 * n + to_digit (ch);
   9bfc0:	01400284 	movi	r5,10
   9bfc4:	8009883a 	mov	r4,r16
   9bfc8:	00823a00 	call	823a0 <__mulsi3>
   9bfcc:	1007883a 	mov	r3,r2
   9bfd0:	88bff404 	addi	r2,r17,-48
   9bfd4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   9bfd8:	a805883a 	mov	r2,r21
   9bfdc:	15400044 	addi	r21,r2,1
   9bfe0:	10800003 	ldbu	r2,0(r2)
   9bfe4:	14403fcc 	andi	r17,r2,255
   9bfe8:	8c40201c 	xori	r17,r17,128
   9bfec:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   9bff0:	88bff404 	addi	r2,r17,-48
   9bff4:	108002b0 	cmpltui	r2,r2,10
   9bff8:	103ff11e 	bne	r2,zero,9bfc0 <__alt_data_end+0xfffe9fc0>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   9bffc:	8005883a 	mov	r2,r16
   9c000:	1000010e 	bge	r2,zero,9c008 <___svfiprintf_internal_r+0x450>
   9c004:	00bfffc4 	movi	r2,-1
   9c008:	e0bfbc15 	stw	r2,-272(fp)
			goto reswitch;
   9c00c:	003f5c06 	br	9bd80 <__alt_data_end+0xfffe9d80>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   9c010:	9cc02014 	ori	r19,r19,128
			goto rflag;
   9c014:	003f5406 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   9c018:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   9c01c:	01400284 	movi	r5,10
   9c020:	8009883a 	mov	r4,r16
   9c024:	00823a00 	call	823a0 <__mulsi3>
   9c028:	1007883a 	mov	r3,r2
   9c02c:	88bff404 	addi	r2,r17,-48
   9c030:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   9c034:	a805883a 	mov	r2,r21
   9c038:	15400044 	addi	r21,r2,1
   9c03c:	10800003 	ldbu	r2,0(r2)
   9c040:	14403fcc 	andi	r17,r2,255
   9c044:	8c40201c 	xori	r17,r17,128
   9c048:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
   9c04c:	88bff404 	addi	r2,r17,-48
   9c050:	108002b0 	cmpltui	r2,r2,10
   9c054:	103ff11e 	bne	r2,zero,9c01c <__alt_data_end+0xfffea01c>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   9c058:	e43fbb15 	stw	r16,-276(fp)
			goto reswitch;
   9c05c:	003f4806 	br	9bd80 <__alt_data_end+0xfffe9d80>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   9c060:	9cc01014 	ori	r19,r19,64
			goto rflag;
   9c064:	003f4006 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   9c068:	a8800003 	ldbu	r2,0(r21)
   9c06c:	10803fcc 	andi	r2,r2,255
   9c070:	1080201c 	xori	r2,r2,128
   9c074:	10bfe004 	addi	r2,r2,-128
   9c078:	10801b18 	cmpnei	r2,r2,108
   9c07c:	1000031e 	bne	r2,zero,9c08c <___svfiprintf_internal_r+0x4d4>
				fmt++;
   9c080:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   9c084:	9cc00814 	ori	r19,r19,32
   9c088:	003f3706 	br	9bd68 <__alt_data_end+0xfffe9d68>
			} else
#endif
				flags |= LONGINT;
   9c08c:	9cc00414 	ori	r19,r19,16
			goto rflag;
   9c090:	003f3506 	br	9bd68 <__alt_data_end+0xfffe9d68>
		case 'q': /* extension */
			flags |= QUADINT;
   9c094:	9cc00814 	ori	r19,r19,32
			goto rflag;
   9c098:	003f3306 	br	9bd68 <__alt_data_end+0xfffe9d68>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   9c09c:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   9c0a0:	e0bfe917 	ldw	r2,-92(fp)
   9c0a4:	10c00104 	addi	r3,r2,4
   9c0a8:	e0ffe915 	stw	r3,-92(fp)
   9c0ac:	10800017 	ldw	r2,0(r2)
   9c0b0:	a0800005 	stb	r2,0(r20)
				size = 1;
   9c0b4:	00800044 	movi	r2,1
   9c0b8:	e0bfc215 	stw	r2,-248(fp)
			}
			sign = '\0';
   9c0bc:	e03fc705 	stb	zero,-228(fp)
			break;
   9c0c0:	0001c806 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
		case 'D':  /* extension */
			flags |= LONGINT;
   9c0c4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   9c0c8:	9880080c 	andi	r2,r19,32
   9c0cc:	10000826 	beq	r2,zero,9c0f0 <___svfiprintf_internal_r+0x538>
   9c0d0:	e13fe917 	ldw	r4,-92(fp)
   9c0d4:	20800204 	addi	r2,r4,8
   9c0d8:	e0bfe915 	stw	r2,-92(fp)
   9c0dc:	20800017 	ldw	r2,0(r4)
   9c0e0:	20c00117 	ldw	r3,4(r4)
   9c0e4:	e0bfea15 	stw	r2,-88(fp)
   9c0e8:	e0ffeb15 	stw	r3,-84(fp)
   9c0ec:	00001e06 	br	9c168 <___svfiprintf_internal_r+0x5b0>
   9c0f0:	9880040c 	andi	r2,r19,16
   9c0f4:	10000826 	beq	r2,zero,9c118 <___svfiprintf_internal_r+0x560>
   9c0f8:	e0bfe917 	ldw	r2,-92(fp)
   9c0fc:	10c00104 	addi	r3,r2,4
   9c100:	e0ffe915 	stw	r3,-92(fp)
   9c104:	10800017 	ldw	r2,0(r2)
   9c108:	e0bfea15 	stw	r2,-88(fp)
   9c10c:	1005d7fa 	srai	r2,r2,31
   9c110:	e0bfeb15 	stw	r2,-84(fp)
   9c114:	00001406 	br	9c168 <___svfiprintf_internal_r+0x5b0>
   9c118:	9880100c 	andi	r2,r19,64
   9c11c:	10000b26 	beq	r2,zero,9c14c <___svfiprintf_internal_r+0x594>
   9c120:	e0bfe917 	ldw	r2,-92(fp)
   9c124:	10c00104 	addi	r3,r2,4
   9c128:	e0ffe915 	stw	r3,-92(fp)
   9c12c:	10800017 	ldw	r2,0(r2)
   9c130:	10bfffcc 	andi	r2,r2,65535
   9c134:	10a0001c 	xori	r2,r2,32768
   9c138:	10a00004 	addi	r2,r2,-32768
   9c13c:	e0bfea15 	stw	r2,-88(fp)
   9c140:	1005d7fa 	srai	r2,r2,31
   9c144:	e0bfeb15 	stw	r2,-84(fp)
   9c148:	00000706 	br	9c168 <___svfiprintf_internal_r+0x5b0>
   9c14c:	e0bfe917 	ldw	r2,-92(fp)
   9c150:	10c00104 	addi	r3,r2,4
   9c154:	e0ffe915 	stw	r3,-92(fp)
   9c158:	10800017 	ldw	r2,0(r2)
   9c15c:	e0bfea15 	stw	r2,-88(fp)
   9c160:	1005d7fa 	srai	r2,r2,31
   9c164:	e0bfeb15 	stw	r2,-84(fp)
   9c168:	e0bfea17 	ldw	r2,-88(fp)
   9c16c:	e0bfbd15 	stw	r2,-268(fp)
   9c170:	e0ffeb17 	ldw	r3,-84(fp)
   9c174:	e0ffbe15 	stw	r3,-264(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   9c178:	e0bfbd17 	ldw	r2,-268(fp)
   9c17c:	e0ffbe17 	ldw	r3,-264(fp)
   9c180:	18000d0e 	bge	r3,zero,9c1b8 <___svfiprintf_internal_r+0x600>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   9c184:	000d883a 	mov	r6,zero
   9c188:	000f883a 	mov	r7,zero
   9c18c:	e13fbd17 	ldw	r4,-268(fp)
   9c190:	e17fbe17 	ldw	r5,-264(fp)
   9c194:	3105c83a 	sub	r2,r6,r4
   9c198:	3091803a 	cmpltu	r8,r6,r2
   9c19c:	3947c83a 	sub	r3,r7,r5
   9c1a0:	1a09c83a 	sub	r4,r3,r8
   9c1a4:	2007883a 	mov	r3,r4
   9c1a8:	e0bfbd15 	stw	r2,-268(fp)
   9c1ac:	e0ffbe15 	stw	r3,-264(fp)
				sign = '-';
   9c1b0:	00800b44 	movi	r2,45
   9c1b4:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
   9c1b8:	00800044 	movi	r2,1
   9c1bc:	e0bfbf05 	stb	r2,-260(fp)
			goto number;
   9c1c0:	0000f806 	br	9c5a4 <___svfiprintf_internal_r+0x9ec>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   9c1c4:	9880080c 	andi	r2,r19,32
   9c1c8:	10000d26 	beq	r2,zero,9c200 <___svfiprintf_internal_r+0x648>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   9c1cc:	e0bfe917 	ldw	r2,-92(fp)
   9c1d0:	10c00104 	addi	r3,r2,4
   9c1d4:	e0ffe915 	stw	r3,-92(fp)
   9c1d8:	10800017 	ldw	r2,0(r2)
   9c1dc:	e0ffba17 	ldw	r3,-280(fp)
   9c1e0:	e0fff015 	stw	r3,-64(fp)
   9c1e4:	1807d7fa 	srai	r3,r3,31
   9c1e8:	e0fff115 	stw	r3,-60(fp)
   9c1ec:	e0fff017 	ldw	r3,-64(fp)
   9c1f0:	10c00015 	stw	r3,0(r2)
   9c1f4:	e0fff117 	ldw	r3,-60(fp)
   9c1f8:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   9c1fc:	0002c306 	br	9cd0c <___svfiprintf_internal_r+0x1154>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   9c200:	9880040c 	andi	r2,r19,16
   9c204:	10000726 	beq	r2,zero,9c224 <___svfiprintf_internal_r+0x66c>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   9c208:	e0bfe917 	ldw	r2,-92(fp)
   9c20c:	10c00104 	addi	r3,r2,4
   9c210:	e0ffe915 	stw	r3,-92(fp)
   9c214:	10800017 	ldw	r2,0(r2)
   9c218:	e0ffba17 	ldw	r3,-280(fp)
   9c21c:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   9c220:	0002ba06 	br	9cd0c <___svfiprintf_internal_r+0x1154>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   9c224:	9880100c 	andi	r2,r19,64
   9c228:	10000726 	beq	r2,zero,9c248 <___svfiprintf_internal_r+0x690>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   9c22c:	e0bfe917 	ldw	r2,-92(fp)
   9c230:	10c00104 	addi	r3,r2,4
   9c234:	e0ffe915 	stw	r3,-92(fp)
   9c238:	10800017 	ldw	r2,0(r2)
   9c23c:	e0ffba17 	ldw	r3,-280(fp)
   9c240:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   9c244:	0002b106 	br	9cd0c <___svfiprintf_internal_r+0x1154>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   9c248:	e0bfe917 	ldw	r2,-92(fp)
   9c24c:	10c00104 	addi	r3,r2,4
   9c250:	e0ffe915 	stw	r3,-92(fp)
   9c254:	10800017 	ldw	r2,0(r2)
   9c258:	e0ffba17 	ldw	r3,-280(fp)
   9c25c:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   9c260:	0002aa06 	br	9cd0c <___svfiprintf_internal_r+0x1154>
		case 'O': /* extension */
			flags |= LONGINT;
   9c264:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   9c268:	9880080c 	andi	r2,r19,32
   9c26c:	10000626 	beq	r2,zero,9c288 <___svfiprintf_internal_r+0x6d0>
   9c270:	e0bfe917 	ldw	r2,-92(fp)
   9c274:	10c00204 	addi	r3,r2,8
   9c278:	e0ffe915 	stw	r3,-92(fp)
   9c27c:	15800017 	ldw	r22,0(r2)
   9c280:	15c00117 	ldw	r23,4(r2)
   9c284:	00001c06 	br	9c2f8 <___svfiprintf_internal_r+0x740>
   9c288:	9880040c 	andi	r2,r19,16
   9c28c:	10000726 	beq	r2,zero,9c2ac <___svfiprintf_internal_r+0x6f4>
   9c290:	e0bfe917 	ldw	r2,-92(fp)
   9c294:	10c00104 	addi	r3,r2,4
   9c298:	e0ffe915 	stw	r3,-92(fp)
   9c29c:	10800017 	ldw	r2,0(r2)
   9c2a0:	102d883a 	mov	r22,r2
   9c2a4:	002f883a 	mov	r23,zero
   9c2a8:	00001306 	br	9c2f8 <___svfiprintf_internal_r+0x740>
   9c2ac:	9880100c 	andi	r2,r19,64
   9c2b0:	10000b26 	beq	r2,zero,9c2e0 <___svfiprintf_internal_r+0x728>
   9c2b4:	e0bfe917 	ldw	r2,-92(fp)
   9c2b8:	10c00104 	addi	r3,r2,4
   9c2bc:	e0ffe915 	stw	r3,-92(fp)
   9c2c0:	10800017 	ldw	r2,0(r2)
   9c2c4:	e0bff215 	stw	r2,-56(fp)
   9c2c8:	e03ff315 	stw	zero,-52(fp)
   9c2cc:	e0bff217 	ldw	r2,-56(fp)
   9c2d0:	15bfffcc 	andi	r22,r2,65535
   9c2d4:	e0fff317 	ldw	r3,-52(fp)
   9c2d8:	182e703a 	and	r23,r3,zero
   9c2dc:	00000606 	br	9c2f8 <___svfiprintf_internal_r+0x740>
   9c2e0:	e0bfe917 	ldw	r2,-92(fp)
   9c2e4:	10c00104 	addi	r3,r2,4
   9c2e8:	e0ffe915 	stw	r3,-92(fp)
   9c2ec:	10800017 	ldw	r2,0(r2)
   9c2f0:	102d883a 	mov	r22,r2
   9c2f4:	002f883a 	mov	r23,zero
   9c2f8:	e5bfbd15 	stw	r22,-268(fp)
   9c2fc:	e5ffbe15 	stw	r23,-264(fp)
			base = OCT;
   9c300:	e03fbf05 	stb	zero,-260(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   9c304:	0000a606 	br	9c5a0 <___svfiprintf_internal_r+0x9e8>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   9c308:	e0bfe917 	ldw	r2,-92(fp)
   9c30c:	10c00104 	addi	r3,r2,4
   9c310:	e0ffe915 	stw	r3,-92(fp)
   9c314:	10800017 	ldw	r2,0(r2)
   9c318:	e0bfbd15 	stw	r2,-268(fp)
   9c31c:	e03fbe15 	stw	zero,-264(fp)
			base = HEX;
   9c320:	00800084 	movi	r2,2
   9c324:	e0bfbf05 	stb	r2,-260(fp)
			xdigs = "0123456789abcdef";
   9c328:	008002b4 	movhi	r2,10
   9c32c:	10855404 	addi	r2,r2,5456
   9c330:	e0bfc315 	stw	r2,-244(fp)
			flags |= HEXPREFIX;
   9c334:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   9c338:	00800c04 	movi	r2,48
   9c33c:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   9c340:	04401e04 	movi	r17,120
   9c344:	00801e04 	movi	r2,120
   9c348:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   9c34c:	00009406 	br	9c5a0 <___svfiprintf_internal_r+0x9e8>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   9c350:	e0bfe917 	ldw	r2,-92(fp)
   9c354:	10c00104 	addi	r3,r2,4
   9c358:	e0ffe915 	stw	r3,-92(fp)
   9c35c:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   9c360:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   9c364:	a000081e 	bne	r20,zero,9c388 <___svfiprintf_internal_r+0x7d0>
				cp = "(null)";
   9c368:	050002b4 	movhi	r20,10
   9c36c:	a5055904 	addi	r20,r20,5476
				size = ((unsigned) prec > 6U) ? 6 : prec;
   9c370:	e0bfbc17 	ldw	r2,-272(fp)
   9c374:	10c001f0 	cmpltui	r3,r2,7
   9c378:	1800011e 	bne	r3,zero,9c380 <___svfiprintf_internal_r+0x7c8>
   9c37c:	00800184 	movi	r2,6
   9c380:	e0bfc215 	stw	r2,-248(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   9c384:	00011706 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   9c388:	e0bfbc17 	ldw	r2,-272(fp)
   9c38c:	10001016 	blt	r2,zero,9c3d0 <___svfiprintf_internal_r+0x818>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   9c390:	e0bfbc17 	ldw	r2,-272(fp)
   9c394:	100d883a 	mov	r6,r2
   9c398:	000b883a 	mov	r5,zero
   9c39c:	a009883a 	mov	r4,r20
   9c3a0:	00904e00 	call	904e0 <memchr>
   9c3a4:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
   9c3a8:	e0bfc617 	ldw	r2,-232(fp)
   9c3ac:	10000526 	beq	r2,zero,9c3c4 <___svfiprintf_internal_r+0x80c>
					size = p - cp;
   9c3b0:	e0bfc617 	ldw	r2,-232(fp)
   9c3b4:	a007883a 	mov	r3,r20
   9c3b8:	10c5c83a 	sub	r2,r2,r3
   9c3bc:	e0bfc215 	stw	r2,-248(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   9c3c0:	00010806 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   9c3c4:	e0bfbc17 	ldw	r2,-272(fp)
   9c3c8:	e0bfc215 	stw	r2,-248(fp)
			} else
				size = strlen (cp);

			break;
   9c3cc:	00010506 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   9c3d0:	a009883a 	mov	r4,r20
   9c3d4:	0088c340 	call	88c34 <strlen>
   9c3d8:	e0bfc215 	stw	r2,-248(fp)

			break;
   9c3dc:	00010106 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
		case 'U': /* extension */
			flags |= LONGINT;
   9c3e0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   9c3e4:	9880080c 	andi	r2,r19,32
   9c3e8:	10000826 	beq	r2,zero,9c40c <___svfiprintf_internal_r+0x854>
   9c3ec:	e0bfe917 	ldw	r2,-92(fp)
   9c3f0:	10c00204 	addi	r3,r2,8
   9c3f4:	e0ffe915 	stw	r3,-92(fp)
   9c3f8:	10c00017 	ldw	r3,0(r2)
   9c3fc:	e0ffec15 	stw	r3,-80(fp)
   9c400:	10c00117 	ldw	r3,4(r2)
   9c404:	e0ffed15 	stw	r3,-76(fp)
   9c408:	00001e06 	br	9c484 <___svfiprintf_internal_r+0x8cc>
   9c40c:	9880040c 	andi	r2,r19,16
   9c410:	10000726 	beq	r2,zero,9c430 <___svfiprintf_internal_r+0x878>
   9c414:	e0bfe917 	ldw	r2,-92(fp)
   9c418:	10c00104 	addi	r3,r2,4
   9c41c:	e0ffe915 	stw	r3,-92(fp)
   9c420:	10800017 	ldw	r2,0(r2)
   9c424:	e0bfec15 	stw	r2,-80(fp)
   9c428:	e03fed15 	stw	zero,-76(fp)
   9c42c:	00001506 	br	9c484 <___svfiprintf_internal_r+0x8cc>
   9c430:	9880100c 	andi	r2,r19,64
   9c434:	10000d26 	beq	r2,zero,9c46c <___svfiprintf_internal_r+0x8b4>
   9c438:	e0bfe917 	ldw	r2,-92(fp)
   9c43c:	10c00104 	addi	r3,r2,4
   9c440:	e0ffe915 	stw	r3,-92(fp)
   9c444:	10800017 	ldw	r2,0(r2)
   9c448:	e0bff415 	stw	r2,-48(fp)
   9c44c:	e03ff515 	stw	zero,-44(fp)
   9c450:	e0bff417 	ldw	r2,-48(fp)
   9c454:	10bfffcc 	andi	r2,r2,65535
   9c458:	e0bfec15 	stw	r2,-80(fp)
   9c45c:	e0fff517 	ldw	r3,-44(fp)
   9c460:	1806703a 	and	r3,r3,zero
   9c464:	e0ffed15 	stw	r3,-76(fp)
   9c468:	00000606 	br	9c484 <___svfiprintf_internal_r+0x8cc>
   9c46c:	e0bfe917 	ldw	r2,-92(fp)
   9c470:	10c00104 	addi	r3,r2,4
   9c474:	e0ffe915 	stw	r3,-92(fp)
   9c478:	10800017 	ldw	r2,0(r2)
   9c47c:	e0bfec15 	stw	r2,-80(fp)
   9c480:	e03fed15 	stw	zero,-76(fp)
   9c484:	e0bfec17 	ldw	r2,-80(fp)
   9c488:	e0bfbd15 	stw	r2,-268(fp)
   9c48c:	e0ffed17 	ldw	r3,-76(fp)
   9c490:	e0ffbe15 	stw	r3,-264(fp)
			base = DEC;
   9c494:	00800044 	movi	r2,1
   9c498:	e0bfbf05 	stb	r2,-260(fp)
			goto nosign;
   9c49c:	00004006 	br	9c5a0 <___svfiprintf_internal_r+0x9e8>
		case 'X':
			xdigs = "0123456789ABCDEF";
   9c4a0:	008002b4 	movhi	r2,10
   9c4a4:	10855b04 	addi	r2,r2,5484
   9c4a8:	e0bfc315 	stw	r2,-244(fp)
			goto hex;
   9c4ac:	00000306 	br	9c4bc <___svfiprintf_internal_r+0x904>
		case 'x':
			xdigs = "0123456789abcdef";
   9c4b0:	008002b4 	movhi	r2,10
   9c4b4:	10855404 	addi	r2,r2,5456
   9c4b8:	e0bfc315 	stw	r2,-244(fp)
hex:			_uquad = UARG ();
   9c4bc:	9880080c 	andi	r2,r19,32
   9c4c0:	10000826 	beq	r2,zero,9c4e4 <___svfiprintf_internal_r+0x92c>
   9c4c4:	e0bfe917 	ldw	r2,-92(fp)
   9c4c8:	10c00204 	addi	r3,r2,8
   9c4cc:	e0ffe915 	stw	r3,-92(fp)
   9c4d0:	10c00017 	ldw	r3,0(r2)
   9c4d4:	e0ffee15 	stw	r3,-72(fp)
   9c4d8:	10c00117 	ldw	r3,4(r2)
   9c4dc:	e0ffef15 	stw	r3,-68(fp)
   9c4e0:	00001e06 	br	9c55c <___svfiprintf_internal_r+0x9a4>
   9c4e4:	9880040c 	andi	r2,r19,16
   9c4e8:	10000726 	beq	r2,zero,9c508 <___svfiprintf_internal_r+0x950>
   9c4ec:	e0bfe917 	ldw	r2,-92(fp)
   9c4f0:	10c00104 	addi	r3,r2,4
   9c4f4:	e0ffe915 	stw	r3,-92(fp)
   9c4f8:	10800017 	ldw	r2,0(r2)
   9c4fc:	e0bfee15 	stw	r2,-72(fp)
   9c500:	e03fef15 	stw	zero,-68(fp)
   9c504:	00001506 	br	9c55c <___svfiprintf_internal_r+0x9a4>
   9c508:	9880100c 	andi	r2,r19,64
   9c50c:	10000d26 	beq	r2,zero,9c544 <___svfiprintf_internal_r+0x98c>
   9c510:	e0bfe917 	ldw	r2,-92(fp)
   9c514:	10c00104 	addi	r3,r2,4
   9c518:	e0ffe915 	stw	r3,-92(fp)
   9c51c:	10800017 	ldw	r2,0(r2)
   9c520:	e0bff615 	stw	r2,-40(fp)
   9c524:	e03ff715 	stw	zero,-36(fp)
   9c528:	e0bff617 	ldw	r2,-40(fp)
   9c52c:	10bfffcc 	andi	r2,r2,65535
   9c530:	e0bfee15 	stw	r2,-72(fp)
   9c534:	e0fff717 	ldw	r3,-36(fp)
   9c538:	1806703a 	and	r3,r3,zero
   9c53c:	e0ffef15 	stw	r3,-68(fp)
   9c540:	00000606 	br	9c55c <___svfiprintf_internal_r+0x9a4>
   9c544:	e0bfe917 	ldw	r2,-92(fp)
   9c548:	10c00104 	addi	r3,r2,4
   9c54c:	e0ffe915 	stw	r3,-92(fp)
   9c550:	10800017 	ldw	r2,0(r2)
   9c554:	e0bfee15 	stw	r2,-72(fp)
   9c558:	e03fef15 	stw	zero,-68(fp)
   9c55c:	e0bfee17 	ldw	r2,-72(fp)
   9c560:	e0bfbd15 	stw	r2,-268(fp)
   9c564:	e0ffef17 	ldw	r3,-68(fp)
   9c568:	e0ffbe15 	stw	r3,-264(fp)
			base = HEX;
   9c56c:	00800084 	movi	r2,2
   9c570:	e0bfbf05 	stb	r2,-260(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   9c574:	9880004c 	andi	r2,r19,1
   9c578:	10000926 	beq	r2,zero,9c5a0 <___svfiprintf_internal_r+0x9e8>
   9c57c:	e0bfbd17 	ldw	r2,-268(fp)
   9c580:	e0ffbe17 	ldw	r3,-264(fp)
   9c584:	10c4b03a 	or	r2,r2,r3
   9c588:	10000526 	beq	r2,zero,9c5a0 <___svfiprintf_internal_r+0x9e8>
				ox[0] = '0';
   9c58c:	00800c04 	movi	r2,48
   9c590:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   9c594:	8805883a 	mov	r2,r17
   9c598:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   9c59c:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   9c5a0:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   9c5a4:	e0bfbc17 	ldw	r2,-272(fp)
   9c5a8:	e0bfc015 	stw	r2,-256(fp)
   9c5ac:	e0bfc017 	ldw	r2,-256(fp)
   9c5b0:	10000216 	blt	r2,zero,9c5bc <___svfiprintf_internal_r+0xa04>
				flags &= ~ZEROPAD;
   9c5b4:	00bfdfc4 	movi	r2,-129
   9c5b8:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   9c5bc:	e53fdb04 	addi	r20,fp,-148
   9c5c0:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
   9c5c4:	e0bfbd17 	ldw	r2,-268(fp)
   9c5c8:	e0ffbe17 	ldw	r3,-264(fp)
   9c5cc:	10c4b03a 	or	r2,r2,r3
   9c5d0:	1000021e 	bne	r2,zero,9c5dc <___svfiprintf_internal_r+0xa24>
   9c5d4:	e0bfbc17 	ldw	r2,-272(fp)
   9c5d8:	10006c26 	beq	r2,zero,9c78c <___svfiprintf_internal_r+0xbd4>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   9c5dc:	e0bfbf03 	ldbu	r2,-260(fp)
   9c5e0:	10c00060 	cmpeqi	r3,r2,1
   9c5e4:	1800211e 	bne	r3,zero,9c66c <___svfiprintf_internal_r+0xab4>
   9c5e8:	10c000a0 	cmpeqi	r3,r2,2
   9c5ec:	1800491e 	bne	r3,zero,9c714 <___svfiprintf_internal_r+0xb5c>
   9c5f0:	10005d1e 	bne	r2,zero,9c768 <___svfiprintf_internal_r+0xbb0>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   9c5f4:	a53fffc4 	addi	r20,r20,-1
   9c5f8:	e0bfbd17 	ldw	r2,-268(fp)
   9c5fc:	108001cc 	andi	r2,r2,7
   9c600:	10800c04 	addi	r2,r2,48
   9c604:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
   9c608:	e0bfbe17 	ldw	r2,-264(fp)
   9c60c:	1004977a 	slli	r2,r2,29
   9c610:	e0ffbd17 	ldw	r3,-268(fp)
   9c614:	1806d0fa 	srli	r3,r3,3
   9c618:	1884b03a 	or	r2,r3,r2
   9c61c:	e0bfbd15 	stw	r2,-268(fp)
   9c620:	e0bfbe17 	ldw	r2,-264(fp)
   9c624:	1004d0fa 	srli	r2,r2,3
   9c628:	e0bfbe15 	stw	r2,-264(fp)
					} while (_uquad);
   9c62c:	e0bfbd17 	ldw	r2,-268(fp)
   9c630:	e0ffbe17 	ldw	r3,-264(fp)
   9c634:	10c4b03a 	or	r2,r2,r3
   9c638:	103fee1e 	bne	r2,zero,9c5f4 <__alt_data_end+0xfffea5f4>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   9c63c:	9880004c 	andi	r2,r19,1
   9c640:	10005026 	beq	r2,zero,9c784 <___svfiprintf_internal_r+0xbcc>
   9c644:	a0800003 	ldbu	r2,0(r20)
   9c648:	10803fcc 	andi	r2,r2,255
   9c64c:	1080201c 	xori	r2,r2,128
   9c650:	10bfe004 	addi	r2,r2,-128
   9c654:	10800c20 	cmpeqi	r2,r2,48
   9c658:	10004a1e 	bne	r2,zero,9c784 <___svfiprintf_internal_r+0xbcc>
						*--cp = '0';
   9c65c:	a53fffc4 	addi	r20,r20,-1
   9c660:	00800c04 	movi	r2,48
   9c664:	a0800005 	stb	r2,0(r20)
					break;
   9c668:	00004606 	br	9c784 <___svfiprintf_internal_r+0xbcc>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   9c66c:	e0bfbe17 	ldw	r2,-264(fp)
   9c670:	10000a1e 	bne	r2,zero,9c69c <___svfiprintf_internal_r+0xae4>
   9c674:	e0bfbe17 	ldw	r2,-264(fp)
   9c678:	1000031e 	bne	r2,zero,9c688 <___svfiprintf_internal_r+0xad0>
   9c67c:	e0bfbd17 	ldw	r2,-268(fp)
   9c680:	108002a8 	cmpgeui	r2,r2,10
   9c684:	1000051e 	bne	r2,zero,9c69c <___svfiprintf_internal_r+0xae4>
						*--cp = to_char(_uquad);
   9c688:	a53fffc4 	addi	r20,r20,-1
   9c68c:	e0bfbd17 	ldw	r2,-268(fp)
   9c690:	10800c04 	addi	r2,r2,48
   9c694:	a0800005 	stb	r2,0(r20)
						break;
   9c698:	00003b06 	br	9c788 <___svfiprintf_internal_r+0xbd0>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   9c69c:	a53fffc4 	addi	r20,r20,-1
   9c6a0:	e0bfbd17 	ldw	r2,-268(fp)
   9c6a4:	e0ffbe17 	ldw	r3,-264(fp)
   9c6a8:	01800284 	movi	r6,10
   9c6ac:	000f883a 	mov	r7,zero
   9c6b0:	1009883a 	mov	r4,r2
   9c6b4:	180b883a 	mov	r5,r3
   9c6b8:	009d8240 	call	9d824 <__umoddi3>
   9c6bc:	1009883a 	mov	r4,r2
   9c6c0:	180b883a 	mov	r5,r3
   9c6c4:	2005883a 	mov	r2,r4
   9c6c8:	2807883a 	mov	r3,r5
   9c6cc:	10800c04 	addi	r2,r2,48
   9c6d0:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   9c6d4:	e0bfbd17 	ldw	r2,-268(fp)
   9c6d8:	e0ffbe17 	ldw	r3,-264(fp)
   9c6dc:	01800284 	movi	r6,10
   9c6e0:	000f883a 	mov	r7,zero
   9c6e4:	1009883a 	mov	r4,r2
   9c6e8:	180b883a 	mov	r5,r3
   9c6ec:	009d2280 	call	9d228 <__udivdi3>
   9c6f0:	1009883a 	mov	r4,r2
   9c6f4:	180b883a 	mov	r5,r3
   9c6f8:	e13fbd15 	stw	r4,-268(fp)
   9c6fc:	e17fbe15 	stw	r5,-264(fp)
					} while (_uquad != 0);
   9c700:	e0bfbd17 	ldw	r2,-268(fp)
   9c704:	e0ffbe17 	ldw	r3,-264(fp)
   9c708:	10c4b03a 	or	r2,r2,r3
   9c70c:	103fe31e 	bne	r2,zero,9c69c <__alt_data_end+0xfffea69c>
					break;
   9c710:	00001d06 	br	9c788 <___svfiprintf_internal_r+0xbd0>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   9c714:	a53fffc4 	addi	r20,r20,-1
   9c718:	e0bfbd17 	ldw	r2,-268(fp)
   9c71c:	108003cc 	andi	r2,r2,15
   9c720:	e0ffc317 	ldw	r3,-244(fp)
   9c724:	1885883a 	add	r2,r3,r2
   9c728:	10800003 	ldbu	r2,0(r2)
   9c72c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
   9c730:	e0bfbe17 	ldw	r2,-264(fp)
   9c734:	1004973a 	slli	r2,r2,28
   9c738:	e0ffbd17 	ldw	r3,-268(fp)
   9c73c:	1806d13a 	srli	r3,r3,4
   9c740:	1884b03a 	or	r2,r3,r2
   9c744:	e0bfbd15 	stw	r2,-268(fp)
   9c748:	e0bfbe17 	ldw	r2,-264(fp)
   9c74c:	1004d13a 	srli	r2,r2,4
   9c750:	e0bfbe15 	stw	r2,-264(fp)
					} while (_uquad);
   9c754:	e0bfbd17 	ldw	r2,-268(fp)
   9c758:	e0ffbe17 	ldw	r3,-264(fp)
   9c75c:	10c4b03a 	or	r2,r2,r3
   9c760:	103fec1e 	bne	r2,zero,9c714 <__alt_data_end+0xfffea714>
					break;
   9c764:	00000806 	br	9c788 <___svfiprintf_internal_r+0xbd0>

				default:
					cp = "bug in vfprintf: bad base";
   9c768:	050002b4 	movhi	r20,10
   9c76c:	a5056004 	addi	r20,r20,5504
					size = strlen (cp);
   9c770:	a009883a 	mov	r4,r20
   9c774:	0088c340 	call	88c34 <strlen>
   9c778:	e0bfc215 	stw	r2,-248(fp)
					goto skipsize;
   9c77c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   9c780:	00001806 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   9c784:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   9c788:	00000706 	br	9c7a8 <___svfiprintf_internal_r+0xbf0>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   9c78c:	e0bfbf03 	ldbu	r2,-260(fp)
   9c790:	1000051e 	bne	r2,zero,9c7a8 <___svfiprintf_internal_r+0xbf0>
   9c794:	9880004c 	andi	r2,r19,1
   9c798:	10000326 	beq	r2,zero,9c7a8 <___svfiprintf_internal_r+0xbf0>
                         *--cp = '0';
   9c79c:	a53fffc4 	addi	r20,r20,-1
   9c7a0:	00800c04 	movi	r2,48
   9c7a4:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
   9c7a8:	e0bfdb04 	addi	r2,fp,-148
   9c7ac:	10800a04 	addi	r2,r2,40
   9c7b0:	1007883a 	mov	r3,r2
   9c7b4:	a005883a 	mov	r2,r20
   9c7b8:	1885c83a 	sub	r2,r3,r2
   9c7bc:	e0bfc215 	stw	r2,-248(fp)
		skipsize:
			break;
   9c7c0:	00000806 	br	9c7e4 <___svfiprintf_internal_r+0xc2c>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   9c7c4:	88015426 	beq	r17,zero,9cd18 <___svfiprintf_internal_r+0x1160>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   9c7c8:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
   9c7cc:	8805883a 	mov	r2,r17
   9c7d0:	a0800005 	stb	r2,0(r20)
			size = 1;
   9c7d4:	00800044 	movi	r2,1
   9c7d8:	e0bfc215 	stw	r2,-248(fp)
			sign = '\0';
   9c7dc:	e03fc705 	stb	zero,-228(fp)
			break;
   9c7e0:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   9c7e4:	e0ffc017 	ldw	r3,-256(fp)
   9c7e8:	e0bfc217 	ldw	r2,-248(fp)
   9c7ec:	10c0010e 	bge	r2,r3,9c7f4 <___svfiprintf_internal_r+0xc3c>
   9c7f0:	1805883a 	mov	r2,r3
   9c7f4:	e0bfc115 	stw	r2,-252(fp)
		if (sign)
   9c7f8:	e0bfc703 	ldbu	r2,-228(fp)
   9c7fc:	10803fcc 	andi	r2,r2,255
   9c800:	1080201c 	xori	r2,r2,128
   9c804:	10bfe004 	addi	r2,r2,-128
   9c808:	10000326 	beq	r2,zero,9c818 <___svfiprintf_internal_r+0xc60>
			realsz++;
   9c80c:	e0bfc117 	ldw	r2,-252(fp)
   9c810:	10800044 	addi	r2,r2,1
   9c814:	e0bfc115 	stw	r2,-252(fp)
		if (flags & HEXPREFIX)
   9c818:	9880008c 	andi	r2,r19,2
   9c81c:	10000326 	beq	r2,zero,9c82c <___svfiprintf_internal_r+0xc74>
			realsz+= 2;
   9c820:	e0bfc117 	ldw	r2,-252(fp)
   9c824:	10800084 	addi	r2,r2,2
   9c828:	e0bfc115 	stw	r2,-252(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   9c82c:	9880210c 	andi	r2,r19,132
   9c830:	1000351e 	bne	r2,zero,9c908 <___svfiprintf_internal_r+0xd50>
			PAD (width - realsz, blanks);
   9c834:	e0ffbb17 	ldw	r3,-276(fp)
   9c838:	e0bfc117 	ldw	r2,-252(fp)
   9c83c:	18a1c83a 	sub	r16,r3,r2
   9c840:	0400310e 	bge	zero,r16,9c908 <___svfiprintf_internal_r+0xd50>
   9c844:	00001706 	br	9c8a4 <___svfiprintf_internal_r+0xcec>
   9c848:	008002b4 	movhi	r2,10
   9c84c:	10856684 	addi	r2,r2,5530
   9c850:	90800015 	stw	r2,0(r18)
   9c854:	00800404 	movi	r2,16
   9c858:	90800115 	stw	r2,4(r18)
   9c85c:	e0bfca17 	ldw	r2,-216(fp)
   9c860:	10800404 	addi	r2,r2,16
   9c864:	e0bfca15 	stw	r2,-216(fp)
   9c868:	94800204 	addi	r18,r18,8
   9c86c:	e0bfc917 	ldw	r2,-220(fp)
   9c870:	10800044 	addi	r2,r2,1
   9c874:	e0bfc915 	stw	r2,-220(fp)
   9c878:	e0bfc917 	ldw	r2,-220(fp)
   9c87c:	10800210 	cmplti	r2,r2,8
   9c880:	1000071e 	bne	r2,zero,9c8a0 <___svfiprintf_internal_r+0xce8>
   9c884:	e0bfc804 	addi	r2,fp,-224
   9c888:	100d883a 	mov	r6,r2
   9c88c:	e17fe717 	ldw	r5,-100(fp)
   9c890:	e13fe617 	ldw	r4,-104(fp)
   9c894:	009b8e40 	call	9b8e4 <__ssprint_r>
   9c898:	10012d1e 	bne	r2,zero,9cd50 <___svfiprintf_internal_r+0x1198>
   9c89c:	e4bfcb04 	addi	r18,fp,-212
   9c8a0:	843ffc04 	addi	r16,r16,-16
   9c8a4:	80800448 	cmpgei	r2,r16,17
   9c8a8:	103fe71e 	bne	r2,zero,9c848 <__alt_data_end+0xfffea848>
   9c8ac:	008002b4 	movhi	r2,10
   9c8b0:	10856684 	addi	r2,r2,5530
   9c8b4:	90800015 	stw	r2,0(r18)
   9c8b8:	8005883a 	mov	r2,r16
   9c8bc:	90800115 	stw	r2,4(r18)
   9c8c0:	e0bfca17 	ldw	r2,-216(fp)
   9c8c4:	8007883a 	mov	r3,r16
   9c8c8:	10c5883a 	add	r2,r2,r3
   9c8cc:	e0bfca15 	stw	r2,-216(fp)
   9c8d0:	94800204 	addi	r18,r18,8
   9c8d4:	e0bfc917 	ldw	r2,-220(fp)
   9c8d8:	10800044 	addi	r2,r2,1
   9c8dc:	e0bfc915 	stw	r2,-220(fp)
   9c8e0:	e0bfc917 	ldw	r2,-220(fp)
   9c8e4:	10800210 	cmplti	r2,r2,8
   9c8e8:	1000071e 	bne	r2,zero,9c908 <___svfiprintf_internal_r+0xd50>
   9c8ec:	e0bfc804 	addi	r2,fp,-224
   9c8f0:	100d883a 	mov	r6,r2
   9c8f4:	e17fe717 	ldw	r5,-100(fp)
   9c8f8:	e13fe617 	ldw	r4,-104(fp)
   9c8fc:	009b8e40 	call	9b8e4 <__ssprint_r>
   9c900:	1001151e 	bne	r2,zero,9cd58 <___svfiprintf_internal_r+0x11a0>
   9c904:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
   9c908:	e0bfc703 	ldbu	r2,-228(fp)
   9c90c:	10803fcc 	andi	r2,r2,255
   9c910:	1080201c 	xori	r2,r2,128
   9c914:	10bfe004 	addi	r2,r2,-128
   9c918:	10001526 	beq	r2,zero,9c970 <___svfiprintf_internal_r+0xdb8>
			PRINT (&sign, 1);
   9c91c:	e0bfc704 	addi	r2,fp,-228
   9c920:	90800015 	stw	r2,0(r18)
   9c924:	00800044 	movi	r2,1
   9c928:	90800115 	stw	r2,4(r18)
   9c92c:	e0bfca17 	ldw	r2,-216(fp)
   9c930:	10800044 	addi	r2,r2,1
   9c934:	e0bfca15 	stw	r2,-216(fp)
   9c938:	94800204 	addi	r18,r18,8
   9c93c:	e0bfc917 	ldw	r2,-220(fp)
   9c940:	10800044 	addi	r2,r2,1
   9c944:	e0bfc915 	stw	r2,-220(fp)
   9c948:	e0bfc917 	ldw	r2,-220(fp)
   9c94c:	10800210 	cmplti	r2,r2,8
   9c950:	1000071e 	bne	r2,zero,9c970 <___svfiprintf_internal_r+0xdb8>
   9c954:	e0bfc804 	addi	r2,fp,-224
   9c958:	100d883a 	mov	r6,r2
   9c95c:	e17fe717 	ldw	r5,-100(fp)
   9c960:	e13fe617 	ldw	r4,-104(fp)
   9c964:	009b8e40 	call	9b8e4 <__ssprint_r>
   9c968:	1000fd1e 	bne	r2,zero,9cd60 <___svfiprintf_internal_r+0x11a8>
   9c96c:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
   9c970:	9880008c 	andi	r2,r19,2
   9c974:	10001526 	beq	r2,zero,9c9cc <___svfiprintf_internal_r+0xe14>
			PRINT (ox, 2);
   9c978:	e0bfe504 	addi	r2,fp,-108
   9c97c:	90800015 	stw	r2,0(r18)
   9c980:	00800084 	movi	r2,2
   9c984:	90800115 	stw	r2,4(r18)
   9c988:	e0bfca17 	ldw	r2,-216(fp)
   9c98c:	10800084 	addi	r2,r2,2
   9c990:	e0bfca15 	stw	r2,-216(fp)
   9c994:	94800204 	addi	r18,r18,8
   9c998:	e0bfc917 	ldw	r2,-220(fp)
   9c99c:	10800044 	addi	r2,r2,1
   9c9a0:	e0bfc915 	stw	r2,-220(fp)
   9c9a4:	e0bfc917 	ldw	r2,-220(fp)
   9c9a8:	10800210 	cmplti	r2,r2,8
   9c9ac:	1000071e 	bne	r2,zero,9c9cc <___svfiprintf_internal_r+0xe14>
   9c9b0:	e0bfc804 	addi	r2,fp,-224
   9c9b4:	100d883a 	mov	r6,r2
   9c9b8:	e17fe717 	ldw	r5,-100(fp)
   9c9bc:	e13fe617 	ldw	r4,-104(fp)
   9c9c0:	009b8e40 	call	9b8e4 <__ssprint_r>
   9c9c4:	1000e81e 	bne	r2,zero,9cd68 <___svfiprintf_internal_r+0x11b0>
   9c9c8:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   9c9cc:	9880210c 	andi	r2,r19,132
   9c9d0:	10802018 	cmpnei	r2,r2,128
   9c9d4:	1000351e 	bne	r2,zero,9caac <___svfiprintf_internal_r+0xef4>
			PAD (width - realsz, zeroes);
   9c9d8:	e0ffbb17 	ldw	r3,-276(fp)
   9c9dc:	e0bfc117 	ldw	r2,-252(fp)
   9c9e0:	18a1c83a 	sub	r16,r3,r2
   9c9e4:	0400310e 	bge	zero,r16,9caac <___svfiprintf_internal_r+0xef4>
   9c9e8:	00001706 	br	9ca48 <___svfiprintf_internal_r+0xe90>
   9c9ec:	008002b4 	movhi	r2,10
   9c9f0:	10856a84 	addi	r2,r2,5546
   9c9f4:	90800015 	stw	r2,0(r18)
   9c9f8:	00800404 	movi	r2,16
   9c9fc:	90800115 	stw	r2,4(r18)
   9ca00:	e0bfca17 	ldw	r2,-216(fp)
   9ca04:	10800404 	addi	r2,r2,16
   9ca08:	e0bfca15 	stw	r2,-216(fp)
   9ca0c:	94800204 	addi	r18,r18,8
   9ca10:	e0bfc917 	ldw	r2,-220(fp)
   9ca14:	10800044 	addi	r2,r2,1
   9ca18:	e0bfc915 	stw	r2,-220(fp)
   9ca1c:	e0bfc917 	ldw	r2,-220(fp)
   9ca20:	10800210 	cmplti	r2,r2,8
   9ca24:	1000071e 	bne	r2,zero,9ca44 <___svfiprintf_internal_r+0xe8c>
   9ca28:	e0bfc804 	addi	r2,fp,-224
   9ca2c:	100d883a 	mov	r6,r2
   9ca30:	e17fe717 	ldw	r5,-100(fp)
   9ca34:	e13fe617 	ldw	r4,-104(fp)
   9ca38:	009b8e40 	call	9b8e4 <__ssprint_r>
   9ca3c:	1000cc1e 	bne	r2,zero,9cd70 <___svfiprintf_internal_r+0x11b8>
   9ca40:	e4bfcb04 	addi	r18,fp,-212
   9ca44:	843ffc04 	addi	r16,r16,-16
   9ca48:	80800448 	cmpgei	r2,r16,17
   9ca4c:	103fe71e 	bne	r2,zero,9c9ec <__alt_data_end+0xfffea9ec>
   9ca50:	008002b4 	movhi	r2,10
   9ca54:	10856a84 	addi	r2,r2,5546
   9ca58:	90800015 	stw	r2,0(r18)
   9ca5c:	8005883a 	mov	r2,r16
   9ca60:	90800115 	stw	r2,4(r18)
   9ca64:	e0bfca17 	ldw	r2,-216(fp)
   9ca68:	8007883a 	mov	r3,r16
   9ca6c:	10c5883a 	add	r2,r2,r3
   9ca70:	e0bfca15 	stw	r2,-216(fp)
   9ca74:	94800204 	addi	r18,r18,8
   9ca78:	e0bfc917 	ldw	r2,-220(fp)
   9ca7c:	10800044 	addi	r2,r2,1
   9ca80:	e0bfc915 	stw	r2,-220(fp)
   9ca84:	e0bfc917 	ldw	r2,-220(fp)
   9ca88:	10800210 	cmplti	r2,r2,8
   9ca8c:	1000071e 	bne	r2,zero,9caac <___svfiprintf_internal_r+0xef4>
   9ca90:	e0bfc804 	addi	r2,fp,-224
   9ca94:	100d883a 	mov	r6,r2
   9ca98:	e17fe717 	ldw	r5,-100(fp)
   9ca9c:	e13fe617 	ldw	r4,-104(fp)
   9caa0:	009b8e40 	call	9b8e4 <__ssprint_r>
   9caa4:	1000b41e 	bne	r2,zero,9cd78 <___svfiprintf_internal_r+0x11c0>
   9caa8:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   9caac:	e0ffc017 	ldw	r3,-256(fp)
   9cab0:	e0bfc217 	ldw	r2,-248(fp)
   9cab4:	18a1c83a 	sub	r16,r3,r2
   9cab8:	0400310e 	bge	zero,r16,9cb80 <___svfiprintf_internal_r+0xfc8>
   9cabc:	00001706 	br	9cb1c <___svfiprintf_internal_r+0xf64>
   9cac0:	008002b4 	movhi	r2,10
   9cac4:	10856a84 	addi	r2,r2,5546
   9cac8:	90800015 	stw	r2,0(r18)
   9cacc:	00800404 	movi	r2,16
   9cad0:	90800115 	stw	r2,4(r18)
   9cad4:	e0bfca17 	ldw	r2,-216(fp)
   9cad8:	10800404 	addi	r2,r2,16
   9cadc:	e0bfca15 	stw	r2,-216(fp)
   9cae0:	94800204 	addi	r18,r18,8
   9cae4:	e0bfc917 	ldw	r2,-220(fp)
   9cae8:	10800044 	addi	r2,r2,1
   9caec:	e0bfc915 	stw	r2,-220(fp)
   9caf0:	e0bfc917 	ldw	r2,-220(fp)
   9caf4:	10800210 	cmplti	r2,r2,8
   9caf8:	1000071e 	bne	r2,zero,9cb18 <___svfiprintf_internal_r+0xf60>
   9cafc:	e0bfc804 	addi	r2,fp,-224
   9cb00:	100d883a 	mov	r6,r2
   9cb04:	e17fe717 	ldw	r5,-100(fp)
   9cb08:	e13fe617 	ldw	r4,-104(fp)
   9cb0c:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cb10:	10009b1e 	bne	r2,zero,9cd80 <___svfiprintf_internal_r+0x11c8>
   9cb14:	e4bfcb04 	addi	r18,fp,-212
   9cb18:	843ffc04 	addi	r16,r16,-16
   9cb1c:	80800448 	cmpgei	r2,r16,17
   9cb20:	103fe71e 	bne	r2,zero,9cac0 <__alt_data_end+0xfffeaac0>
   9cb24:	008002b4 	movhi	r2,10
   9cb28:	10856a84 	addi	r2,r2,5546
   9cb2c:	90800015 	stw	r2,0(r18)
   9cb30:	8005883a 	mov	r2,r16
   9cb34:	90800115 	stw	r2,4(r18)
   9cb38:	e0bfca17 	ldw	r2,-216(fp)
   9cb3c:	8007883a 	mov	r3,r16
   9cb40:	10c5883a 	add	r2,r2,r3
   9cb44:	e0bfca15 	stw	r2,-216(fp)
   9cb48:	94800204 	addi	r18,r18,8
   9cb4c:	e0bfc917 	ldw	r2,-220(fp)
   9cb50:	10800044 	addi	r2,r2,1
   9cb54:	e0bfc915 	stw	r2,-220(fp)
   9cb58:	e0bfc917 	ldw	r2,-220(fp)
   9cb5c:	10800210 	cmplti	r2,r2,8
   9cb60:	1000071e 	bne	r2,zero,9cb80 <___svfiprintf_internal_r+0xfc8>
   9cb64:	e0bfc804 	addi	r2,fp,-224
   9cb68:	100d883a 	mov	r6,r2
   9cb6c:	e17fe717 	ldw	r5,-100(fp)
   9cb70:	e13fe617 	ldw	r4,-104(fp)
   9cb74:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cb78:	1000831e 	bne	r2,zero,9cd88 <___svfiprintf_internal_r+0x11d0>
   9cb7c:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   9cb80:	95000015 	stw	r20,0(r18)
   9cb84:	e0bfc217 	ldw	r2,-248(fp)
   9cb88:	90800115 	stw	r2,4(r18)
   9cb8c:	e0ffca17 	ldw	r3,-216(fp)
   9cb90:	e0bfc217 	ldw	r2,-248(fp)
   9cb94:	1885883a 	add	r2,r3,r2
   9cb98:	e0bfca15 	stw	r2,-216(fp)
   9cb9c:	94800204 	addi	r18,r18,8
   9cba0:	e0bfc917 	ldw	r2,-220(fp)
   9cba4:	10800044 	addi	r2,r2,1
   9cba8:	e0bfc915 	stw	r2,-220(fp)
   9cbac:	e0bfc917 	ldw	r2,-220(fp)
   9cbb0:	10800210 	cmplti	r2,r2,8
   9cbb4:	1000071e 	bne	r2,zero,9cbd4 <___svfiprintf_internal_r+0x101c>
   9cbb8:	e0bfc804 	addi	r2,fp,-224
   9cbbc:	100d883a 	mov	r6,r2
   9cbc0:	e17fe717 	ldw	r5,-100(fp)
   9cbc4:	e13fe617 	ldw	r4,-104(fp)
   9cbc8:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cbcc:	1000701e 	bne	r2,zero,9cd90 <___svfiprintf_internal_r+0x11d8>
   9cbd0:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   9cbd4:	9880010c 	andi	r2,r19,4
   9cbd8:	10003526 	beq	r2,zero,9ccb0 <___svfiprintf_internal_r+0x10f8>
			PAD (width - realsz, blanks);
   9cbdc:	e0ffbb17 	ldw	r3,-276(fp)
   9cbe0:	e0bfc117 	ldw	r2,-252(fp)
   9cbe4:	18a1c83a 	sub	r16,r3,r2
   9cbe8:	0400310e 	bge	zero,r16,9ccb0 <___svfiprintf_internal_r+0x10f8>
   9cbec:	00001706 	br	9cc4c <___svfiprintf_internal_r+0x1094>
   9cbf0:	008002b4 	movhi	r2,10
   9cbf4:	10856684 	addi	r2,r2,5530
   9cbf8:	90800015 	stw	r2,0(r18)
   9cbfc:	00800404 	movi	r2,16
   9cc00:	90800115 	stw	r2,4(r18)
   9cc04:	e0bfca17 	ldw	r2,-216(fp)
   9cc08:	10800404 	addi	r2,r2,16
   9cc0c:	e0bfca15 	stw	r2,-216(fp)
   9cc10:	94800204 	addi	r18,r18,8
   9cc14:	e0bfc917 	ldw	r2,-220(fp)
   9cc18:	10800044 	addi	r2,r2,1
   9cc1c:	e0bfc915 	stw	r2,-220(fp)
   9cc20:	e0bfc917 	ldw	r2,-220(fp)
   9cc24:	10800210 	cmplti	r2,r2,8
   9cc28:	1000071e 	bne	r2,zero,9cc48 <___svfiprintf_internal_r+0x1090>
   9cc2c:	e0bfc804 	addi	r2,fp,-224
   9cc30:	100d883a 	mov	r6,r2
   9cc34:	e17fe717 	ldw	r5,-100(fp)
   9cc38:	e13fe617 	ldw	r4,-104(fp)
   9cc3c:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cc40:	1000551e 	bne	r2,zero,9cd98 <___svfiprintf_internal_r+0x11e0>
   9cc44:	e4bfcb04 	addi	r18,fp,-212
   9cc48:	843ffc04 	addi	r16,r16,-16
   9cc4c:	80800448 	cmpgei	r2,r16,17
   9cc50:	103fe71e 	bne	r2,zero,9cbf0 <__alt_data_end+0xfffeabf0>
   9cc54:	008002b4 	movhi	r2,10
   9cc58:	10856684 	addi	r2,r2,5530
   9cc5c:	90800015 	stw	r2,0(r18)
   9cc60:	8005883a 	mov	r2,r16
   9cc64:	90800115 	stw	r2,4(r18)
   9cc68:	e0bfca17 	ldw	r2,-216(fp)
   9cc6c:	8007883a 	mov	r3,r16
   9cc70:	10c5883a 	add	r2,r2,r3
   9cc74:	e0bfca15 	stw	r2,-216(fp)
   9cc78:	94800204 	addi	r18,r18,8
   9cc7c:	e0bfc917 	ldw	r2,-220(fp)
   9cc80:	10800044 	addi	r2,r2,1
   9cc84:	e0bfc915 	stw	r2,-220(fp)
   9cc88:	e0bfc917 	ldw	r2,-220(fp)
   9cc8c:	10800210 	cmplti	r2,r2,8
   9cc90:	1000071e 	bne	r2,zero,9ccb0 <___svfiprintf_internal_r+0x10f8>
   9cc94:	e0bfc804 	addi	r2,fp,-224
   9cc98:	100d883a 	mov	r6,r2
   9cc9c:	e17fe717 	ldw	r5,-100(fp)
   9cca0:	e13fe617 	ldw	r4,-104(fp)
   9cca4:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cca8:	10003d1e 	bne	r2,zero,9cda0 <___svfiprintf_internal_r+0x11e8>
   9ccac:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   9ccb0:	e0ffbb17 	ldw	r3,-276(fp)
   9ccb4:	e0bfc117 	ldw	r2,-252(fp)
   9ccb8:	10c0010e 	bge	r2,r3,9ccc0 <___svfiprintf_internal_r+0x1108>
   9ccbc:	1805883a 	mov	r2,r3
   9ccc0:	e0ffba17 	ldw	r3,-280(fp)
   9ccc4:	1885883a 	add	r2,r3,r2
   9ccc8:	e0bfba15 	stw	r2,-280(fp)

		FLUSH ();	/* copy out the I/O vectors */
   9cccc:	e0bfca17 	ldw	r2,-216(fp)
   9ccd0:	10000626 	beq	r2,zero,9ccec <___svfiprintf_internal_r+0x1134>
   9ccd4:	e0bfc804 	addi	r2,fp,-224
   9ccd8:	100d883a 	mov	r6,r2
   9ccdc:	e17fe717 	ldw	r5,-100(fp)
   9cce0:	e13fe617 	ldw	r4,-104(fp)
   9cce4:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cce8:	10002f1e 	bne	r2,zero,9cda8 <___svfiprintf_internal_r+0x11f0>
   9ccec:	e03fc915 	stw	zero,-220(fp)
   9ccf0:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
   9ccf4:	e0bfc417 	ldw	r2,-240(fp)
   9ccf8:	103be426 	beq	r2,zero,9bc8c <__alt_data_end+0xfffe9c8c>
			_free_r (data, malloc_buf);
   9ccfc:	e17fc417 	ldw	r5,-240(fp)
   9cd00:	e13fe617 	ldw	r4,-104(fp)
   9cd04:	0085c480 	call	85c48 <_free_r>
			malloc_buf = NULL;
   9cd08:	e03fc415 	stw	zero,-240(fp)
		}
	}
   9cd0c:	003bdf06 	br	9bc8c <__alt_data_end+0xfffe9c8c>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   9cd10:	0001883a 	nop
   9cd14:	00000106 	br	9cd1c <___svfiprintf_internal_r+0x1164>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   9cd18:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   9cd1c:	e0bfca17 	ldw	r2,-216(fp)
   9cd20:	10000626 	beq	r2,zero,9cd3c <___svfiprintf_internal_r+0x1184>
   9cd24:	e0bfc804 	addi	r2,fp,-224
   9cd28:	100d883a 	mov	r6,r2
   9cd2c:	e17fe717 	ldw	r5,-100(fp)
   9cd30:	e13fe617 	ldw	r4,-104(fp)
   9cd34:	009b8e40 	call	9b8e4 <__ssprint_r>
   9cd38:	10001d1e 	bne	r2,zero,9cdb0 <___svfiprintf_internal_r+0x11f8>
   9cd3c:	e03fc915 	stw	zero,-220(fp)
   9cd40:	e4bfcb04 	addi	r18,fp,-212
   9cd44:	00001b06 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   9cd48:	0001883a 	nop
   9cd4c:	00001906 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   9cd50:	0001883a 	nop
   9cd54:	00001706 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
   9cd58:	0001883a 	nop
   9cd5c:	00001506 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   9cd60:	0001883a 	nop
   9cd64:	00001306 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   9cd68:	0001883a 	nop
   9cd6c:	00001106 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   9cd70:	0001883a 	nop
   9cd74:	00000f06 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
   9cd78:	0001883a 	nop
   9cd7c:	00000d06 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   9cd80:	0001883a 	nop
   9cd84:	00000b06 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
   9cd88:	0001883a 	nop
   9cd8c:	00000906 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   9cd90:	0001883a 	nop
   9cd94:	00000706 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   9cd98:	0001883a 	nop
   9cd9c:	00000506 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
   9cda0:	0001883a 	nop
   9cda4:	00000306 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   9cda8:	0001883a 	nop
   9cdac:	00000106 	br	9cdb4 <___svfiprintf_internal_r+0x11fc>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   9cdb0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   9cdb4:	e0bfc417 	ldw	r2,-240(fp)
   9cdb8:	10000326 	beq	r2,zero,9cdc8 <___svfiprintf_internal_r+0x1210>
		_free_r (data, malloc_buf);
   9cdbc:	e17fc417 	ldw	r5,-240(fp)
   9cdc0:	e13fe617 	ldw	r4,-104(fp)
   9cdc4:	0085c480 	call	85c48 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   9cdc8:	e0bfe717 	ldw	r2,-100(fp)
   9cdcc:	1080030b 	ldhu	r2,12(r2)
   9cdd0:	10bfffcc 	andi	r2,r2,65535
   9cdd4:	1080100c 	andi	r2,r2,64
   9cdd8:	1000021e 	bne	r2,zero,9cde4 <___svfiprintf_internal_r+0x122c>
   9cddc:	e0bfba17 	ldw	r2,-280(fp)
   9cde0:	00000206 	br	9cdec <___svfiprintf_internal_r+0x1234>
   9cde4:	00bfffc4 	movi	r2,-1
   9cde8:	0001883a 	nop
	/* NOTREACHED */
}
   9cdec:	e6fff804 	addi	sp,fp,-32
   9cdf0:	dfc00917 	ldw	ra,36(sp)
   9cdf4:	df000817 	ldw	fp,32(sp)
   9cdf8:	ddc00717 	ldw	r23,28(sp)
   9cdfc:	dd800617 	ldw	r22,24(sp)
   9ce00:	dd400517 	ldw	r21,20(sp)
   9ce04:	dd000417 	ldw	r20,16(sp)
   9ce08:	dcc00317 	ldw	r19,12(sp)
   9ce0c:	dc800217 	ldw	r18,8(sp)
   9ce10:	dc400117 	ldw	r17,4(sp)
   9ce14:	dc000017 	ldw	r16,0(sp)
   9ce18:	dec00a04 	addi	sp,sp,40
   9ce1c:	f800283a 	ret

0009ce20 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
   9ce20:	defff404 	addi	sp,sp,-48
   9ce24:	dfc00b15 	stw	ra,44(sp)
   9ce28:	df000a15 	stw	fp,40(sp)
   9ce2c:	dc000915 	stw	r16,36(sp)
   9ce30:	df000a04 	addi	fp,sp,40
   9ce34:	e13ffb15 	stw	r4,-20(fp)
   9ce38:	e17ffc15 	stw	r5,-16(fp)
   9ce3c:	e1bffd15 	stw	r6,-12(fp)
   9ce40:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
   9ce44:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
   9ce48:	e0bffc17 	ldw	r2,-16(fp)
   9ce4c:	10000d1e 	bne	r2,zero,9ce84 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
   9ce50:	d4200b17 	ldw	r16,-32724(gp)
   9ce54:	00900940 	call	90094 <__locale_charset>
   9ce58:	1009883a 	mov	r4,r2
   9ce5c:	e0fff804 	addi	r3,fp,-32
   9ce60:	e0bffe17 	ldw	r2,-8(fp)
   9ce64:	d8800015 	stw	r2,0(sp)
   9ce68:	200f883a 	mov	r7,r4
   9ce6c:	000d883a 	mov	r6,zero
   9ce70:	180b883a 	mov	r5,r3
   9ce74:	e13ffb17 	ldw	r4,-20(fp)
   9ce78:	803ee83a 	callr	r16
   9ce7c:	e0bff715 	stw	r2,-36(fp)
   9ce80:	00000b06 	br	9ceb0 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
   9ce84:	d4200b17 	ldw	r16,-32724(gp)
   9ce88:	00900940 	call	90094 <__locale_charset>
   9ce8c:	1007883a 	mov	r3,r2
   9ce90:	e0bffe17 	ldw	r2,-8(fp)
   9ce94:	d8800015 	stw	r2,0(sp)
   9ce98:	180f883a 	mov	r7,r3
   9ce9c:	e1bffd17 	ldw	r6,-12(fp)
   9cea0:	e17ffc17 	ldw	r5,-16(fp)
   9cea4:	e13ffb17 	ldw	r4,-20(fp)
   9cea8:	803ee83a 	callr	r16
   9ceac:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   9ceb0:	e0bff717 	ldw	r2,-36(fp)
   9ceb4:	10bfffd8 	cmpnei	r2,r2,-1
   9ceb8:	1000071e 	bne	r2,zero,9ced8 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
   9cebc:	e0bffe17 	ldw	r2,-8(fp)
   9cec0:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
   9cec4:	e0bffb17 	ldw	r2,-20(fp)
   9cec8:	00c02284 	movi	r3,138
   9cecc:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   9ced0:	00bfffc4 	movi	r2,-1
   9ced4:	00000106 	br	9cedc <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
   9ced8:	e0bff717 	ldw	r2,-36(fp)
}
   9cedc:	e6ffff04 	addi	sp,fp,-4
   9cee0:	dfc00217 	ldw	ra,8(sp)
   9cee4:	df000117 	ldw	fp,4(sp)
   9cee8:	dc000017 	ldw	r16,0(sp)
   9ceec:	dec00304 	addi	sp,sp,12
   9cef0:	f800283a 	ret

0009cef4 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
   9cef4:	defff404 	addi	sp,sp,-48
   9cef8:	dfc00b15 	stw	ra,44(sp)
   9cefc:	df000a15 	stw	fp,40(sp)
   9cf00:	dc000915 	stw	r16,36(sp)
   9cf04:	df000a04 	addi	fp,sp,40
   9cf08:	e13ffc15 	stw	r4,-16(fp)
   9cf0c:	e17ffd15 	stw	r5,-12(fp)
   9cf10:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
   9cf14:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
   9cf18:	d0a00417 	ldw	r2,-32752(gp)
   9cf1c:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
   9cf20:	e0bffc17 	ldw	r2,-16(fp)
   9cf24:	10000d1e 	bne	r2,zero,9cf5c <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
   9cf28:	d4200b17 	ldw	r16,-32724(gp)
   9cf2c:	00900940 	call	90094 <__locale_charset>
   9cf30:	1009883a 	mov	r4,r2
   9cf34:	e0fff904 	addi	r3,fp,-28
   9cf38:	e0bffe17 	ldw	r2,-8(fp)
   9cf3c:	d8800015 	stw	r2,0(sp)
   9cf40:	200f883a 	mov	r7,r4
   9cf44:	000d883a 	mov	r6,zero
   9cf48:	180b883a 	mov	r5,r3
   9cf4c:	e13ff817 	ldw	r4,-32(fp)
   9cf50:	803ee83a 	callr	r16
   9cf54:	e0bff715 	stw	r2,-36(fp)
   9cf58:	00000b06 	br	9cf88 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
   9cf5c:	d4200b17 	ldw	r16,-32724(gp)
   9cf60:	00900940 	call	90094 <__locale_charset>
   9cf64:	1007883a 	mov	r3,r2
   9cf68:	e0bffe17 	ldw	r2,-8(fp)
   9cf6c:	d8800015 	stw	r2,0(sp)
   9cf70:	180f883a 	mov	r7,r3
   9cf74:	e1bffd17 	ldw	r6,-12(fp)
   9cf78:	e17ffc17 	ldw	r5,-16(fp)
   9cf7c:	e13ff817 	ldw	r4,-32(fp)
   9cf80:	803ee83a 	callr	r16
   9cf84:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   9cf88:	e0bff717 	ldw	r2,-36(fp)
   9cf8c:	10bfffd8 	cmpnei	r2,r2,-1
   9cf90:	1000071e 	bne	r2,zero,9cfb0 <wcrtomb+0xbc>
    {
      ps->__count = 0;
   9cf94:	e0bffe17 	ldw	r2,-8(fp)
   9cf98:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
   9cf9c:	e0bff817 	ldw	r2,-32(fp)
   9cfa0:	00c02284 	movi	r3,138
   9cfa4:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   9cfa8:	00bfffc4 	movi	r2,-1
   9cfac:	00000106 	br	9cfb4 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
   9cfb0:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   9cfb4:	e6ffff04 	addi	sp,fp,-4
   9cfb8:	dfc00217 	ldw	ra,8(sp)
   9cfbc:	df000117 	ldw	fp,4(sp)
   9cfc0:	dc000017 	ldw	r16,0(sp)
   9cfc4:	dec00304 	addi	sp,sp,12
   9cfc8:	f800283a 	ret

0009cfcc <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
   9cfcc:	defff804 	addi	sp,sp,-32
   9cfd0:	dfc00715 	stw	ra,28(sp)
   9cfd4:	df000615 	stw	fp,24(sp)
   9cfd8:	dc000515 	stw	r16,20(sp)
   9cfdc:	df000604 	addi	fp,sp,24
   9cfe0:	e13ffb15 	stw	r4,-20(fp)
   9cfe4:	e17ffc15 	stw	r5,-16(fp)
   9cfe8:	e1bffd15 	stw	r6,-12(fp)
   9cfec:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
   9cff0:	d4200b17 	ldw	r16,-32724(gp)
   9cff4:	00900940 	call	90094 <__locale_charset>
   9cff8:	1007883a 	mov	r3,r2
   9cffc:	e0bffe17 	ldw	r2,-8(fp)
   9d000:	d8800015 	stw	r2,0(sp)
   9d004:	180f883a 	mov	r7,r3
   9d008:	e1bffd17 	ldw	r6,-12(fp)
   9d00c:	e17ffc17 	ldw	r5,-16(fp)
   9d010:	e13ffb17 	ldw	r4,-20(fp)
   9d014:	803ee83a 	callr	r16
}
   9d018:	e6ffff04 	addi	sp,fp,-4
   9d01c:	dfc00217 	ldw	ra,8(sp)
   9d020:	df000117 	ldw	fp,4(sp)
   9d024:	dc000017 	ldw	r16,0(sp)
   9d028:	dec00304 	addi	sp,sp,12
   9d02c:	f800283a 	ret

0009d030 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
   9d030:	defffa04 	addi	sp,sp,-24
   9d034:	df000515 	stw	fp,20(sp)
   9d038:	df000504 	addi	fp,sp,20
   9d03c:	e13ffc15 	stw	r4,-16(fp)
   9d040:	e17ffd15 	stw	r5,-12(fp)
   9d044:	e1bffe15 	stw	r6,-8(fp)
   9d048:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
   9d04c:	e0bffe17 	ldw	r2,-8(fp)
   9d050:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
   9d054:	e0bffd17 	ldw	r2,-12(fp)
   9d058:	1000021e 	bne	r2,zero,9d064 <__ascii_wctomb+0x34>
    return 0;
   9d05c:	0005883a 	mov	r2,zero
   9d060:	00000d06 	br	9d098 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
   9d064:	e0bffb17 	ldw	r2,-20(fp)
   9d068:	10804030 	cmpltui	r2,r2,256
   9d06c:	1000051e 	bne	r2,zero,9d084 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
   9d070:	e0bffc17 	ldw	r2,-16(fp)
   9d074:	00c02284 	movi	r3,138
   9d078:	10c00015 	stw	r3,0(r2)
      return -1;
   9d07c:	00bfffc4 	movi	r2,-1
   9d080:	00000506 	br	9d098 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
   9d084:	e0bffb17 	ldw	r2,-20(fp)
   9d088:	1007883a 	mov	r3,r2
   9d08c:	e0bffd17 	ldw	r2,-12(fp)
   9d090:	10c00005 	stb	r3,0(r2)
  return 1;
   9d094:	00800044 	movi	r2,1
}
   9d098:	e037883a 	mov	sp,fp
   9d09c:	df000017 	ldw	fp,0(sp)
   9d0a0:	dec00104 	addi	sp,sp,4
   9d0a4:	f800283a 	ret

0009d0a8 <__muldi3>:
   9d0a8:	defff604 	addi	sp,sp,-40
   9d0ac:	dd800615 	stw	r22,24(sp)
   9d0b0:	dd400515 	stw	r21,20(sp)
   9d0b4:	dc400115 	stw	r17,4(sp)
   9d0b8:	357fffcc 	andi	r21,r6,65535
   9d0bc:	2022d43a 	srli	r17,r4,16
   9d0c0:	25bfffcc 	andi	r22,r4,65535
   9d0c4:	dcc00315 	stw	r19,12(sp)
   9d0c8:	dc800215 	stw	r18,8(sp)
   9d0cc:	2027883a 	mov	r19,r4
   9d0d0:	2825883a 	mov	r18,r5
   9d0d4:	b009883a 	mov	r4,r22
   9d0d8:	a80b883a 	mov	r5,r21
   9d0dc:	dfc00915 	stw	ra,36(sp)
   9d0e0:	df000815 	stw	fp,32(sp)
   9d0e4:	ddc00715 	stw	r23,28(sp)
   9d0e8:	3839883a 	mov	fp,r7
   9d0ec:	302ed43a 	srli	r23,r6,16
   9d0f0:	dd000415 	stw	r20,16(sp)
   9d0f4:	dc000015 	stw	r16,0(sp)
   9d0f8:	3029883a 	mov	r20,r6
   9d0fc:	00823a00 	call	823a0 <__mulsi3>
   9d100:	a80b883a 	mov	r5,r21
   9d104:	8809883a 	mov	r4,r17
   9d108:	1021883a 	mov	r16,r2
   9d10c:	00823a00 	call	823a0 <__mulsi3>
   9d110:	8809883a 	mov	r4,r17
   9d114:	b80b883a 	mov	r5,r23
   9d118:	102b883a 	mov	r21,r2
   9d11c:	00823a00 	call	823a0 <__mulsi3>
   9d120:	b80b883a 	mov	r5,r23
   9d124:	b009883a 	mov	r4,r22
   9d128:	1023883a 	mov	r17,r2
   9d12c:	00823a00 	call	823a0 <__mulsi3>
   9d130:	8006d43a 	srli	r3,r16,16
   9d134:	1545883a 	add	r2,r2,r21
   9d138:	1885883a 	add	r2,r3,r2
   9d13c:	1540022e 	bgeu	r2,r21,9d148 <__muldi3+0xa0>
   9d140:	00c00074 	movhi	r3,1
   9d144:	88e3883a 	add	r17,r17,r3
   9d148:	1006d43a 	srli	r3,r2,16
   9d14c:	1004943a 	slli	r2,r2,16
   9d150:	e00b883a 	mov	r5,fp
   9d154:	9809883a 	mov	r4,r19
   9d158:	843fffcc 	andi	r16,r16,65535
   9d15c:	1c63883a 	add	r17,r3,r17
   9d160:	1421883a 	add	r16,r2,r16
   9d164:	00823a00 	call	823a0 <__mulsi3>
   9d168:	900b883a 	mov	r5,r18
   9d16c:	a009883a 	mov	r4,r20
   9d170:	1027883a 	mov	r19,r2
   9d174:	00823a00 	call	823a0 <__mulsi3>
   9d178:	9885883a 	add	r2,r19,r2
   9d17c:	1447883a 	add	r3,r2,r17
   9d180:	8005883a 	mov	r2,r16
   9d184:	dfc00917 	ldw	ra,36(sp)
   9d188:	df000817 	ldw	fp,32(sp)
   9d18c:	ddc00717 	ldw	r23,28(sp)
   9d190:	dd800617 	ldw	r22,24(sp)
   9d194:	dd400517 	ldw	r21,20(sp)
   9d198:	dd000417 	ldw	r20,16(sp)
   9d19c:	dcc00317 	ldw	r19,12(sp)
   9d1a0:	dc800217 	ldw	r18,8(sp)
   9d1a4:	dc400117 	ldw	r17,4(sp)
   9d1a8:	dc000017 	ldw	r16,0(sp)
   9d1ac:	dec00a04 	addi	sp,sp,40
   9d1b0:	f800283a 	ret

0009d1b4 <__fixunsdfsi>:
   9d1b4:	defffd04 	addi	sp,sp,-12
   9d1b8:	000d883a 	mov	r6,zero
   9d1bc:	01d07834 	movhi	r7,16864
   9d1c0:	dc400115 	stw	r17,4(sp)
   9d1c4:	dc000015 	stw	r16,0(sp)
   9d1c8:	dfc00215 	stw	ra,8(sp)
   9d1cc:	2023883a 	mov	r17,r4
   9d1d0:	2821883a 	mov	r16,r5
   9d1d4:	00836440 	call	83644 <__gedf2>
   9d1d8:	1000080e 	bge	r2,zero,9d1fc <__fixunsdfsi+0x48>
   9d1dc:	8809883a 	mov	r4,r17
   9d1e0:	800b883a 	mov	r5,r16
   9d1e4:	008497c0 	call	8497c <__fixdfsi>
   9d1e8:	dfc00217 	ldw	ra,8(sp)
   9d1ec:	dc400117 	ldw	r17,4(sp)
   9d1f0:	dc000017 	ldw	r16,0(sp)
   9d1f4:	dec00304 	addi	sp,sp,12
   9d1f8:	f800283a 	ret
   9d1fc:	000d883a 	mov	r6,zero
   9d200:	01d07834 	movhi	r7,16864
   9d204:	8809883a 	mov	r4,r17
   9d208:	800b883a 	mov	r5,r16
   9d20c:	00840800 	call	84080 <__subdf3>
   9d210:	180b883a 	mov	r5,r3
   9d214:	1009883a 	mov	r4,r2
   9d218:	008497c0 	call	8497c <__fixdfsi>
   9d21c:	00e00034 	movhi	r3,32768
   9d220:	10c5883a 	add	r2,r2,r3
   9d224:	003ff006 	br	9d1e8 <__alt_data_end+0xfffeb1e8>

0009d228 <__udivdi3>:
   9d228:	defff404 	addi	sp,sp,-48
   9d22c:	dcc00515 	stw	r19,20(sp)
   9d230:	dc000215 	stw	r16,8(sp)
   9d234:	dfc00b15 	stw	ra,44(sp)
   9d238:	df000a15 	stw	fp,40(sp)
   9d23c:	ddc00915 	stw	r23,36(sp)
   9d240:	dd800815 	stw	r22,32(sp)
   9d244:	dd400715 	stw	r21,28(sp)
   9d248:	dd000615 	stw	r20,24(sp)
   9d24c:	dc800415 	stw	r18,16(sp)
   9d250:	dc400315 	stw	r17,12(sp)
   9d254:	2027883a 	mov	r19,r4
   9d258:	2821883a 	mov	r16,r5
   9d25c:	3800461e 	bne	r7,zero,9d378 <__udivdi3+0x150>
   9d260:	3023883a 	mov	r17,r6
   9d264:	2025883a 	mov	r18,r4
   9d268:	2980572e 	bgeu	r5,r6,9d3c8 <__udivdi3+0x1a0>
   9d26c:	00bfffd4 	movui	r2,65535
   9d270:	282d883a 	mov	r22,r5
   9d274:	1180b236 	bltu	r2,r6,9d540 <__udivdi3+0x318>
   9d278:	00803fc4 	movi	r2,255
   9d27c:	1185803a 	cmpltu	r2,r2,r6
   9d280:	100490fa 	slli	r2,r2,3
   9d284:	3086d83a 	srl	r3,r6,r2
   9d288:	010002b4 	movhi	r4,10
   9d28c:	21036004 	addi	r4,r4,3456
   9d290:	20c7883a 	add	r3,r4,r3
   9d294:	18c00003 	ldbu	r3,0(r3)
   9d298:	1885883a 	add	r2,r3,r2
   9d29c:	00c00804 	movi	r3,32
   9d2a0:	1887c83a 	sub	r3,r3,r2
   9d2a4:	18000526 	beq	r3,zero,9d2bc <__udivdi3+0x94>
   9d2a8:	80e0983a 	sll	r16,r16,r3
   9d2ac:	9884d83a 	srl	r2,r19,r2
   9d2b0:	30e2983a 	sll	r17,r6,r3
   9d2b4:	98e4983a 	sll	r18,r19,r3
   9d2b8:	142cb03a 	or	r22,r2,r16
   9d2bc:	882ad43a 	srli	r21,r17,16
   9d2c0:	b009883a 	mov	r4,r22
   9d2c4:	8d3fffcc 	andi	r20,r17,65535
   9d2c8:	a80b883a 	mov	r5,r21
   9d2cc:	00823480 	call	82348 <__umodsi3>
   9d2d0:	b009883a 	mov	r4,r22
   9d2d4:	a80b883a 	mov	r5,r21
   9d2d8:	1027883a 	mov	r19,r2
   9d2dc:	00822e40 	call	822e4 <__udivsi3>
   9d2e0:	100b883a 	mov	r5,r2
   9d2e4:	a009883a 	mov	r4,r20
   9d2e8:	102d883a 	mov	r22,r2
   9d2ec:	00823a00 	call	823a0 <__mulsi3>
   9d2f0:	9826943a 	slli	r19,r19,16
   9d2f4:	9006d43a 	srli	r3,r18,16
   9d2f8:	1cc6b03a 	or	r3,r3,r19
   9d2fc:	1880052e 	bgeu	r3,r2,9d314 <__udivdi3+0xec>
   9d300:	1c47883a 	add	r3,r3,r17
   9d304:	b13fffc4 	addi	r4,r22,-1
   9d308:	1c400136 	bltu	r3,r17,9d310 <__udivdi3+0xe8>
   9d30c:	18814236 	bltu	r3,r2,9d818 <__udivdi3+0x5f0>
   9d310:	202d883a 	mov	r22,r4
   9d314:	18a1c83a 	sub	r16,r3,r2
   9d318:	8009883a 	mov	r4,r16
   9d31c:	a80b883a 	mov	r5,r21
   9d320:	00823480 	call	82348 <__umodsi3>
   9d324:	1027883a 	mov	r19,r2
   9d328:	8009883a 	mov	r4,r16
   9d32c:	a80b883a 	mov	r5,r21
   9d330:	9826943a 	slli	r19,r19,16
   9d334:	00822e40 	call	822e4 <__udivsi3>
   9d338:	100b883a 	mov	r5,r2
   9d33c:	a009883a 	mov	r4,r20
   9d340:	94bfffcc 	andi	r18,r18,65535
   9d344:	1021883a 	mov	r16,r2
   9d348:	94e4b03a 	or	r18,r18,r19
   9d34c:	00823a00 	call	823a0 <__mulsi3>
   9d350:	9080052e 	bgeu	r18,r2,9d368 <__udivdi3+0x140>
   9d354:	8ca5883a 	add	r18,r17,r18
   9d358:	80ffffc4 	addi	r3,r16,-1
   9d35c:	94410c36 	bltu	r18,r17,9d790 <__udivdi3+0x568>
   9d360:	90810b2e 	bgeu	r18,r2,9d790 <__udivdi3+0x568>
   9d364:	843fff84 	addi	r16,r16,-2
   9d368:	b004943a 	slli	r2,r22,16
   9d36c:	0007883a 	mov	r3,zero
   9d370:	1404b03a 	or	r2,r2,r16
   9d374:	00005e06 	br	9d4f0 <__udivdi3+0x2c8>
   9d378:	29c05b36 	bltu	r5,r7,9d4e8 <__udivdi3+0x2c0>
   9d37c:	00bfffd4 	movui	r2,65535
   9d380:	11c0672e 	bgeu	r2,r7,9d520 <__udivdi3+0x2f8>
   9d384:	00804034 	movhi	r2,256
   9d388:	10bfffc4 	addi	r2,r2,-1
   9d38c:	11c10a36 	bltu	r2,r7,9d7b8 <__udivdi3+0x590>
   9d390:	00800404 	movi	r2,16
   9d394:	3886d83a 	srl	r3,r7,r2
   9d398:	010002b4 	movhi	r4,10
   9d39c:	21036004 	addi	r4,r4,3456
   9d3a0:	20c7883a 	add	r3,r4,r3
   9d3a4:	18c00003 	ldbu	r3,0(r3)
   9d3a8:	05c00804 	movi	r23,32
   9d3ac:	1885883a 	add	r2,r3,r2
   9d3b0:	b8afc83a 	sub	r23,r23,r2
   9d3b4:	b800671e 	bne	r23,zero,9d554 <__udivdi3+0x32c>
   9d3b8:	3c010536 	bltu	r7,r16,9d7d0 <__udivdi3+0x5a8>
   9d3bc:	9985403a 	cmpgeu	r2,r19,r6
   9d3c0:	0007883a 	mov	r3,zero
   9d3c4:	00004a06 	br	9d4f0 <__udivdi3+0x2c8>
   9d3c8:	3000041e 	bne	r6,zero,9d3dc <__udivdi3+0x1b4>
   9d3cc:	000b883a 	mov	r5,zero
   9d3d0:	01000044 	movi	r4,1
   9d3d4:	00822e40 	call	822e4 <__udivsi3>
   9d3d8:	1023883a 	mov	r17,r2
   9d3dc:	00bfffd4 	movui	r2,65535
   9d3e0:	1440532e 	bgeu	r2,r17,9d530 <__udivdi3+0x308>
   9d3e4:	00804034 	movhi	r2,256
   9d3e8:	10bfffc4 	addi	r2,r2,-1
   9d3ec:	1440f436 	bltu	r2,r17,9d7c0 <__udivdi3+0x598>
   9d3f0:	00800404 	movi	r2,16
   9d3f4:	8886d83a 	srl	r3,r17,r2
   9d3f8:	010002b4 	movhi	r4,10
   9d3fc:	21036004 	addi	r4,r4,3456
   9d400:	20c7883a 	add	r3,r4,r3
   9d404:	18c00003 	ldbu	r3,0(r3)
   9d408:	1885883a 	add	r2,r3,r2
   9d40c:	00c00804 	movi	r3,32
   9d410:	1887c83a 	sub	r3,r3,r2
   9d414:	1800a51e 	bne	r3,zero,9d6ac <__udivdi3+0x484>
   9d418:	882ad43a 	srli	r21,r17,16
   9d41c:	8461c83a 	sub	r16,r16,r17
   9d420:	8d3fffcc 	andi	r20,r17,65535
   9d424:	00c00044 	movi	r3,1
   9d428:	a80b883a 	mov	r5,r21
   9d42c:	8009883a 	mov	r4,r16
   9d430:	d8c00115 	stw	r3,4(sp)
   9d434:	00823480 	call	82348 <__umodsi3>
   9d438:	a80b883a 	mov	r5,r21
   9d43c:	8009883a 	mov	r4,r16
   9d440:	1027883a 	mov	r19,r2
   9d444:	00822e40 	call	822e4 <__udivsi3>
   9d448:	a00b883a 	mov	r5,r20
   9d44c:	1009883a 	mov	r4,r2
   9d450:	102d883a 	mov	r22,r2
   9d454:	00823a00 	call	823a0 <__mulsi3>
   9d458:	9826943a 	slli	r19,r19,16
   9d45c:	900ed43a 	srli	r7,r18,16
   9d460:	d8c00117 	ldw	r3,4(sp)
   9d464:	3cceb03a 	or	r7,r7,r19
   9d468:	3880052e 	bgeu	r7,r2,9d480 <__udivdi3+0x258>
   9d46c:	3c4f883a 	add	r7,r7,r17
   9d470:	b13fffc4 	addi	r4,r22,-1
   9d474:	3c400136 	bltu	r7,r17,9d47c <__udivdi3+0x254>
   9d478:	3880e436 	bltu	r7,r2,9d80c <__udivdi3+0x5e4>
   9d47c:	202d883a 	mov	r22,r4
   9d480:	38a1c83a 	sub	r16,r7,r2
   9d484:	8009883a 	mov	r4,r16
   9d488:	a80b883a 	mov	r5,r21
   9d48c:	d8c00115 	stw	r3,4(sp)
   9d490:	00823480 	call	82348 <__umodsi3>
   9d494:	1027883a 	mov	r19,r2
   9d498:	8009883a 	mov	r4,r16
   9d49c:	a80b883a 	mov	r5,r21
   9d4a0:	9826943a 	slli	r19,r19,16
   9d4a4:	00822e40 	call	822e4 <__udivsi3>
   9d4a8:	a00b883a 	mov	r5,r20
   9d4ac:	1009883a 	mov	r4,r2
   9d4b0:	94bfffcc 	andi	r18,r18,65535
   9d4b4:	1021883a 	mov	r16,r2
   9d4b8:	94e4b03a 	or	r18,r18,r19
   9d4bc:	00823a00 	call	823a0 <__mulsi3>
   9d4c0:	d8c00117 	ldw	r3,4(sp)
   9d4c4:	9080052e 	bgeu	r18,r2,9d4dc <__udivdi3+0x2b4>
   9d4c8:	8ca5883a 	add	r18,r17,r18
   9d4cc:	813fffc4 	addi	r4,r16,-1
   9d4d0:	9440ad36 	bltu	r18,r17,9d788 <__udivdi3+0x560>
   9d4d4:	9080ac2e 	bgeu	r18,r2,9d788 <__udivdi3+0x560>
   9d4d8:	843fff84 	addi	r16,r16,-2
   9d4dc:	b004943a 	slli	r2,r22,16
   9d4e0:	1404b03a 	or	r2,r2,r16
   9d4e4:	00000206 	br	9d4f0 <__udivdi3+0x2c8>
   9d4e8:	0007883a 	mov	r3,zero
   9d4ec:	0005883a 	mov	r2,zero
   9d4f0:	dfc00b17 	ldw	ra,44(sp)
   9d4f4:	df000a17 	ldw	fp,40(sp)
   9d4f8:	ddc00917 	ldw	r23,36(sp)
   9d4fc:	dd800817 	ldw	r22,32(sp)
   9d500:	dd400717 	ldw	r21,28(sp)
   9d504:	dd000617 	ldw	r20,24(sp)
   9d508:	dcc00517 	ldw	r19,20(sp)
   9d50c:	dc800417 	ldw	r18,16(sp)
   9d510:	dc400317 	ldw	r17,12(sp)
   9d514:	dc000217 	ldw	r16,8(sp)
   9d518:	dec00c04 	addi	sp,sp,48
   9d51c:	f800283a 	ret
   9d520:	00803fc4 	movi	r2,255
   9d524:	11c5803a 	cmpltu	r2,r2,r7
   9d528:	100490fa 	slli	r2,r2,3
   9d52c:	003f9906 	br	9d394 <__alt_data_end+0xfffeb394>
   9d530:	00803fc4 	movi	r2,255
   9d534:	1445803a 	cmpltu	r2,r2,r17
   9d538:	100490fa 	slli	r2,r2,3
   9d53c:	003fad06 	br	9d3f4 <__alt_data_end+0xfffeb3f4>
   9d540:	00804034 	movhi	r2,256
   9d544:	10bfffc4 	addi	r2,r2,-1
   9d548:	11809f36 	bltu	r2,r6,9d7c8 <__udivdi3+0x5a0>
   9d54c:	00800404 	movi	r2,16
   9d550:	003f4c06 	br	9d284 <__alt_data_end+0xfffeb284>
   9d554:	3dce983a 	sll	r7,r7,r23
   9d558:	30b8d83a 	srl	fp,r6,r2
   9d55c:	80a2d83a 	srl	r17,r16,r2
   9d560:	35cc983a 	sll	r6,r6,r23
   9d564:	3f38b03a 	or	fp,r7,fp
   9d568:	e024d43a 	srli	r18,fp,16
   9d56c:	9884d83a 	srl	r2,r19,r2
   9d570:	85e0983a 	sll	r16,r16,r23
   9d574:	8809883a 	mov	r4,r17
   9d578:	900b883a 	mov	r5,r18
   9d57c:	d9800015 	stw	r6,0(sp)
   9d580:	1420b03a 	or	r16,r2,r16
   9d584:	00823480 	call	82348 <__umodsi3>
   9d588:	900b883a 	mov	r5,r18
   9d58c:	8809883a 	mov	r4,r17
   9d590:	1029883a 	mov	r20,r2
   9d594:	e5bfffcc 	andi	r22,fp,65535
   9d598:	00822e40 	call	822e4 <__udivsi3>
   9d59c:	100b883a 	mov	r5,r2
   9d5a0:	b009883a 	mov	r4,r22
   9d5a4:	102b883a 	mov	r21,r2
   9d5a8:	00823a00 	call	823a0 <__mulsi3>
   9d5ac:	a028943a 	slli	r20,r20,16
   9d5b0:	8006d43a 	srli	r3,r16,16
   9d5b4:	1d06b03a 	or	r3,r3,r20
   9d5b8:	1880042e 	bgeu	r3,r2,9d5cc <__udivdi3+0x3a4>
   9d5bc:	1f07883a 	add	r3,r3,fp
   9d5c0:	a93fffc4 	addi	r4,r21,-1
   9d5c4:	1f00892e 	bgeu	r3,fp,9d7ec <__udivdi3+0x5c4>
   9d5c8:	202b883a 	mov	r21,r4
   9d5cc:	18a3c83a 	sub	r17,r3,r2
   9d5d0:	8809883a 	mov	r4,r17
   9d5d4:	900b883a 	mov	r5,r18
   9d5d8:	00823480 	call	82348 <__umodsi3>
   9d5dc:	1029883a 	mov	r20,r2
   9d5e0:	8809883a 	mov	r4,r17
   9d5e4:	900b883a 	mov	r5,r18
   9d5e8:	a028943a 	slli	r20,r20,16
   9d5ec:	00822e40 	call	822e4 <__udivsi3>
   9d5f0:	100b883a 	mov	r5,r2
   9d5f4:	b009883a 	mov	r4,r22
   9d5f8:	843fffcc 	andi	r16,r16,65535
   9d5fc:	1023883a 	mov	r17,r2
   9d600:	8520b03a 	or	r16,r16,r20
   9d604:	00823a00 	call	823a0 <__mulsi3>
   9d608:	8080042e 	bgeu	r16,r2,9d61c <__udivdi3+0x3f4>
   9d60c:	8721883a 	add	r16,r16,fp
   9d610:	88ffffc4 	addi	r3,r17,-1
   9d614:	8700712e 	bgeu	r16,fp,9d7dc <__udivdi3+0x5b4>
   9d618:	1823883a 	mov	r17,r3
   9d61c:	a80e943a 	slli	r7,r21,16
   9d620:	d8c00017 	ldw	r3,0(sp)
   9d624:	80a1c83a 	sub	r16,r16,r2
   9d628:	3c64b03a 	or	r18,r7,r17
   9d62c:	1d3fffcc 	andi	r20,r3,65535
   9d630:	9022d43a 	srli	r17,r18,16
   9d634:	95bfffcc 	andi	r22,r18,65535
   9d638:	a00b883a 	mov	r5,r20
   9d63c:	b009883a 	mov	r4,r22
   9d640:	182ad43a 	srli	r21,r3,16
   9d644:	00823a00 	call	823a0 <__mulsi3>
   9d648:	a00b883a 	mov	r5,r20
   9d64c:	8809883a 	mov	r4,r17
   9d650:	1039883a 	mov	fp,r2
   9d654:	00823a00 	call	823a0 <__mulsi3>
   9d658:	8809883a 	mov	r4,r17
   9d65c:	a80b883a 	mov	r5,r21
   9d660:	1029883a 	mov	r20,r2
   9d664:	00823a00 	call	823a0 <__mulsi3>
   9d668:	a80b883a 	mov	r5,r21
   9d66c:	b009883a 	mov	r4,r22
   9d670:	1023883a 	mov	r17,r2
   9d674:	00823a00 	call	823a0 <__mulsi3>
   9d678:	e006d43a 	srli	r3,fp,16
   9d67c:	1505883a 	add	r2,r2,r20
   9d680:	1887883a 	add	r3,r3,r2
   9d684:	1d00022e 	bgeu	r3,r20,9d690 <__udivdi3+0x468>
   9d688:	00800074 	movhi	r2,1
   9d68c:	88a3883a 	add	r17,r17,r2
   9d690:	1804d43a 	srli	r2,r3,16
   9d694:	1463883a 	add	r17,r2,r17
   9d698:	84404436 	bltu	r16,r17,9d7ac <__udivdi3+0x584>
   9d69c:	84403e26 	beq	r16,r17,9d798 <__udivdi3+0x570>
   9d6a0:	9005883a 	mov	r2,r18
   9d6a4:	0007883a 	mov	r3,zero
   9d6a8:	003f9106 	br	9d4f0 <__alt_data_end+0xfffeb4f0>
   9d6ac:	88e2983a 	sll	r17,r17,r3
   9d6b0:	80aed83a 	srl	r23,r16,r2
   9d6b4:	80e0983a 	sll	r16,r16,r3
   9d6b8:	882ad43a 	srli	r21,r17,16
   9d6bc:	9884d83a 	srl	r2,r19,r2
   9d6c0:	b809883a 	mov	r4,r23
   9d6c4:	a80b883a 	mov	r5,r21
   9d6c8:	98e4983a 	sll	r18,r19,r3
   9d6cc:	142cb03a 	or	r22,r2,r16
   9d6d0:	00823480 	call	82348 <__umodsi3>
   9d6d4:	b809883a 	mov	r4,r23
   9d6d8:	a80b883a 	mov	r5,r21
   9d6dc:	1027883a 	mov	r19,r2
   9d6e0:	8d3fffcc 	andi	r20,r17,65535
   9d6e4:	00822e40 	call	822e4 <__udivsi3>
   9d6e8:	a009883a 	mov	r4,r20
   9d6ec:	100b883a 	mov	r5,r2
   9d6f0:	102f883a 	mov	r23,r2
   9d6f4:	00823a00 	call	823a0 <__mulsi3>
   9d6f8:	9826943a 	slli	r19,r19,16
   9d6fc:	b008d43a 	srli	r4,r22,16
   9d700:	24c8b03a 	or	r4,r4,r19
   9d704:	2080062e 	bgeu	r4,r2,9d720 <__udivdi3+0x4f8>
   9d708:	2449883a 	add	r4,r4,r17
   9d70c:	b8ffffc4 	addi	r3,r23,-1
   9d710:	24403c36 	bltu	r4,r17,9d804 <__udivdi3+0x5dc>
   9d714:	20803b2e 	bgeu	r4,r2,9d804 <__udivdi3+0x5dc>
   9d718:	bdffff84 	addi	r23,r23,-2
   9d71c:	2449883a 	add	r4,r4,r17
   9d720:	20a1c83a 	sub	r16,r4,r2
   9d724:	a80b883a 	mov	r5,r21
   9d728:	8009883a 	mov	r4,r16
   9d72c:	00823480 	call	82348 <__umodsi3>
   9d730:	a80b883a 	mov	r5,r21
   9d734:	8009883a 	mov	r4,r16
   9d738:	1027883a 	mov	r19,r2
   9d73c:	00822e40 	call	822e4 <__udivsi3>
   9d740:	a009883a 	mov	r4,r20
   9d744:	100b883a 	mov	r5,r2
   9d748:	9826943a 	slli	r19,r19,16
   9d74c:	1039883a 	mov	fp,r2
   9d750:	00823a00 	call	823a0 <__mulsi3>
   9d754:	b13fffcc 	andi	r4,r22,65535
   9d758:	24c8b03a 	or	r4,r4,r19
   9d75c:	2080062e 	bgeu	r4,r2,9d778 <__udivdi3+0x550>
   9d760:	2449883a 	add	r4,r4,r17
   9d764:	e0ffffc4 	addi	r3,fp,-1
   9d768:	24402436 	bltu	r4,r17,9d7fc <__udivdi3+0x5d4>
   9d76c:	2080232e 	bgeu	r4,r2,9d7fc <__udivdi3+0x5d4>
   9d770:	e73fff84 	addi	fp,fp,-2
   9d774:	2449883a 	add	r4,r4,r17
   9d778:	b82e943a 	slli	r23,r23,16
   9d77c:	20a1c83a 	sub	r16,r4,r2
   9d780:	bf06b03a 	or	r3,r23,fp
   9d784:	003f2806 	br	9d428 <__alt_data_end+0xfffeb428>
   9d788:	2021883a 	mov	r16,r4
   9d78c:	003f5306 	br	9d4dc <__alt_data_end+0xfffeb4dc>
   9d790:	1821883a 	mov	r16,r3
   9d794:	003ef406 	br	9d368 <__alt_data_end+0xfffeb368>
   9d798:	1806943a 	slli	r3,r3,16
   9d79c:	9de6983a 	sll	r19,r19,r23
   9d7a0:	e73fffcc 	andi	fp,fp,65535
   9d7a4:	1f07883a 	add	r3,r3,fp
   9d7a8:	98ffbd2e 	bgeu	r19,r3,9d6a0 <__alt_data_end+0xfffeb6a0>
   9d7ac:	90bfffc4 	addi	r2,r18,-1
   9d7b0:	0007883a 	mov	r3,zero
   9d7b4:	003f4e06 	br	9d4f0 <__alt_data_end+0xfffeb4f0>
   9d7b8:	00800604 	movi	r2,24
   9d7bc:	003ef506 	br	9d394 <__alt_data_end+0xfffeb394>
   9d7c0:	00800604 	movi	r2,24
   9d7c4:	003f0b06 	br	9d3f4 <__alt_data_end+0xfffeb3f4>
   9d7c8:	00800604 	movi	r2,24
   9d7cc:	003ead06 	br	9d284 <__alt_data_end+0xfffeb284>
   9d7d0:	0007883a 	mov	r3,zero
   9d7d4:	00800044 	movi	r2,1
   9d7d8:	003f4506 	br	9d4f0 <__alt_data_end+0xfffeb4f0>
   9d7dc:	80bf8e2e 	bgeu	r16,r2,9d618 <__alt_data_end+0xfffeb618>
   9d7e0:	8c7fff84 	addi	r17,r17,-2
   9d7e4:	8721883a 	add	r16,r16,fp
   9d7e8:	003f8c06 	br	9d61c <__alt_data_end+0xfffeb61c>
   9d7ec:	18bf762e 	bgeu	r3,r2,9d5c8 <__alt_data_end+0xfffeb5c8>
   9d7f0:	ad7fff84 	addi	r21,r21,-2
   9d7f4:	1f07883a 	add	r3,r3,fp
   9d7f8:	003f7406 	br	9d5cc <__alt_data_end+0xfffeb5cc>
   9d7fc:	1839883a 	mov	fp,r3
   9d800:	003fdd06 	br	9d778 <__alt_data_end+0xfffeb778>
   9d804:	182f883a 	mov	r23,r3
   9d808:	003fc506 	br	9d720 <__alt_data_end+0xfffeb720>
   9d80c:	b5bfff84 	addi	r22,r22,-2
   9d810:	3c4f883a 	add	r7,r7,r17
   9d814:	003f1a06 	br	9d480 <__alt_data_end+0xfffeb480>
   9d818:	b5bfff84 	addi	r22,r22,-2
   9d81c:	1c47883a 	add	r3,r3,r17
   9d820:	003ebc06 	br	9d314 <__alt_data_end+0xfffeb314>

0009d824 <__umoddi3>:
   9d824:	defff304 	addi	sp,sp,-52
   9d828:	df000b15 	stw	fp,44(sp)
   9d82c:	dc400415 	stw	r17,16(sp)
   9d830:	dc000315 	stw	r16,12(sp)
   9d834:	dfc00c15 	stw	ra,48(sp)
   9d838:	ddc00a15 	stw	r23,40(sp)
   9d83c:	dd800915 	stw	r22,36(sp)
   9d840:	dd400815 	stw	r21,32(sp)
   9d844:	dd000715 	stw	r20,28(sp)
   9d848:	dcc00615 	stw	r19,24(sp)
   9d84c:	dc800515 	stw	r18,20(sp)
   9d850:	2021883a 	mov	r16,r4
   9d854:	2823883a 	mov	r17,r5
   9d858:	2839883a 	mov	fp,r5
   9d85c:	3800401e 	bne	r7,zero,9d960 <__umoddi3+0x13c>
   9d860:	3027883a 	mov	r19,r6
   9d864:	2029883a 	mov	r20,r4
   9d868:	2980552e 	bgeu	r5,r6,9d9c0 <__umoddi3+0x19c>
   9d86c:	00bfffd4 	movui	r2,65535
   9d870:	1180a236 	bltu	r2,r6,9dafc <__umoddi3+0x2d8>
   9d874:	01003fc4 	movi	r4,255
   9d878:	2189803a 	cmpltu	r4,r4,r6
   9d87c:	200890fa 	slli	r4,r4,3
   9d880:	3104d83a 	srl	r2,r6,r4
   9d884:	00c002b4 	movhi	r3,10
   9d888:	18c36004 	addi	r3,r3,3456
   9d88c:	1885883a 	add	r2,r3,r2
   9d890:	10c00003 	ldbu	r3,0(r2)
   9d894:	00800804 	movi	r2,32
   9d898:	1909883a 	add	r4,r3,r4
   9d89c:	1125c83a 	sub	r18,r2,r4
   9d8a0:	90000526 	beq	r18,zero,9d8b8 <__umoddi3+0x94>
   9d8a4:	8ca2983a 	sll	r17,r17,r18
   9d8a8:	8108d83a 	srl	r4,r16,r4
   9d8ac:	34a6983a 	sll	r19,r6,r18
   9d8b0:	84a8983a 	sll	r20,r16,r18
   9d8b4:	2478b03a 	or	fp,r4,r17
   9d8b8:	982cd43a 	srli	r22,r19,16
   9d8bc:	e009883a 	mov	r4,fp
   9d8c0:	9dffffcc 	andi	r23,r19,65535
   9d8c4:	b00b883a 	mov	r5,r22
   9d8c8:	00823480 	call	82348 <__umodsi3>
   9d8cc:	b00b883a 	mov	r5,r22
   9d8d0:	e009883a 	mov	r4,fp
   9d8d4:	102b883a 	mov	r21,r2
   9d8d8:	00822e40 	call	822e4 <__udivsi3>
   9d8dc:	100b883a 	mov	r5,r2
   9d8e0:	b809883a 	mov	r4,r23
   9d8e4:	00823a00 	call	823a0 <__mulsi3>
   9d8e8:	a82a943a 	slli	r21,r21,16
   9d8ec:	a006d43a 	srli	r3,r20,16
   9d8f0:	1d46b03a 	or	r3,r3,r21
   9d8f4:	1880032e 	bgeu	r3,r2,9d904 <__umoddi3+0xe0>
   9d8f8:	1cc7883a 	add	r3,r3,r19
   9d8fc:	1cc00136 	bltu	r3,r19,9d904 <__umoddi3+0xe0>
   9d900:	18813136 	bltu	r3,r2,9ddc8 <__umoddi3+0x5a4>
   9d904:	18a1c83a 	sub	r16,r3,r2
   9d908:	b00b883a 	mov	r5,r22
   9d90c:	8009883a 	mov	r4,r16
   9d910:	00823480 	call	82348 <__umodsi3>
   9d914:	b00b883a 	mov	r5,r22
   9d918:	8009883a 	mov	r4,r16
   9d91c:	1023883a 	mov	r17,r2
   9d920:	00822e40 	call	822e4 <__udivsi3>
   9d924:	100b883a 	mov	r5,r2
   9d928:	b809883a 	mov	r4,r23
   9d92c:	8822943a 	slli	r17,r17,16
   9d930:	00823a00 	call	823a0 <__mulsi3>
   9d934:	a0ffffcc 	andi	r3,r20,65535
   9d938:	1c46b03a 	or	r3,r3,r17
   9d93c:	1880042e 	bgeu	r3,r2,9d950 <__umoddi3+0x12c>
   9d940:	1cc7883a 	add	r3,r3,r19
   9d944:	1cc00236 	bltu	r3,r19,9d950 <__umoddi3+0x12c>
   9d948:	1880012e 	bgeu	r3,r2,9d950 <__umoddi3+0x12c>
   9d94c:	1cc7883a 	add	r3,r3,r19
   9d950:	1885c83a 	sub	r2,r3,r2
   9d954:	1484d83a 	srl	r2,r2,r18
   9d958:	0007883a 	mov	r3,zero
   9d95c:	00005306 	br	9daac <__umoddi3+0x288>
   9d960:	29c05036 	bltu	r5,r7,9daa4 <__umoddi3+0x280>
   9d964:	00bfffd4 	movui	r2,65535
   9d968:	11c05c2e 	bgeu	r2,r7,9dadc <__umoddi3+0x2b8>
   9d96c:	00804034 	movhi	r2,256
   9d970:	10bfffc4 	addi	r2,r2,-1
   9d974:	11c10636 	bltu	r2,r7,9dd90 <__umoddi3+0x56c>
   9d978:	01000404 	movi	r4,16
   9d97c:	3904d83a 	srl	r2,r7,r4
   9d980:	00c002b4 	movhi	r3,10
   9d984:	18c36004 	addi	r3,r3,3456
   9d988:	1885883a 	add	r2,r3,r2
   9d98c:	14c00003 	ldbu	r19,0(r2)
   9d990:	00c00804 	movi	r3,32
   9d994:	9927883a 	add	r19,r19,r4
   9d998:	1ce9c83a 	sub	r20,r3,r19
   9d99c:	a0005c1e 	bne	r20,zero,9db10 <__umoddi3+0x2ec>
   9d9a0:	3c400136 	bltu	r7,r17,9d9a8 <__umoddi3+0x184>
   9d9a4:	81810a36 	bltu	r16,r6,9ddd0 <__umoddi3+0x5ac>
   9d9a8:	8185c83a 	sub	r2,r16,r6
   9d9ac:	89e3c83a 	sub	r17,r17,r7
   9d9b0:	8089803a 	cmpltu	r4,r16,r2
   9d9b4:	8939c83a 	sub	fp,r17,r4
   9d9b8:	e007883a 	mov	r3,fp
   9d9bc:	00003b06 	br	9daac <__umoddi3+0x288>
   9d9c0:	3000041e 	bne	r6,zero,9d9d4 <__umoddi3+0x1b0>
   9d9c4:	000b883a 	mov	r5,zero
   9d9c8:	01000044 	movi	r4,1
   9d9cc:	00822e40 	call	822e4 <__udivsi3>
   9d9d0:	1027883a 	mov	r19,r2
   9d9d4:	00bfffd4 	movui	r2,65535
   9d9d8:	14c0442e 	bgeu	r2,r19,9daec <__umoddi3+0x2c8>
   9d9dc:	00804034 	movhi	r2,256
   9d9e0:	10bfffc4 	addi	r2,r2,-1
   9d9e4:	14c0ec36 	bltu	r2,r19,9dd98 <__umoddi3+0x574>
   9d9e8:	00800404 	movi	r2,16
   9d9ec:	9886d83a 	srl	r3,r19,r2
   9d9f0:	010002b4 	movhi	r4,10
   9d9f4:	21036004 	addi	r4,r4,3456
   9d9f8:	20c7883a 	add	r3,r4,r3
   9d9fc:	18c00003 	ldbu	r3,0(r3)
   9da00:	1887883a 	add	r3,r3,r2
   9da04:	00800804 	movi	r2,32
   9da08:	10e5c83a 	sub	r18,r2,r3
   9da0c:	9000ab1e 	bne	r18,zero,9dcbc <__umoddi3+0x498>
   9da10:	982cd43a 	srli	r22,r19,16
   9da14:	8ce3c83a 	sub	r17,r17,r19
   9da18:	9dffffcc 	andi	r23,r19,65535
   9da1c:	b00b883a 	mov	r5,r22
   9da20:	8809883a 	mov	r4,r17
   9da24:	00823480 	call	82348 <__umodsi3>
   9da28:	b00b883a 	mov	r5,r22
   9da2c:	8809883a 	mov	r4,r17
   9da30:	102b883a 	mov	r21,r2
   9da34:	00822e40 	call	822e4 <__udivsi3>
   9da38:	b80b883a 	mov	r5,r23
   9da3c:	1009883a 	mov	r4,r2
   9da40:	00823a00 	call	823a0 <__mulsi3>
   9da44:	a82a943a 	slli	r21,r21,16
   9da48:	a006d43a 	srli	r3,r20,16
   9da4c:	1d46b03a 	or	r3,r3,r21
   9da50:	1880042e 	bgeu	r3,r2,9da64 <__umoddi3+0x240>
   9da54:	1cc7883a 	add	r3,r3,r19
   9da58:	1cc00236 	bltu	r3,r19,9da64 <__umoddi3+0x240>
   9da5c:	1880012e 	bgeu	r3,r2,9da64 <__umoddi3+0x240>
   9da60:	1cc7883a 	add	r3,r3,r19
   9da64:	18a1c83a 	sub	r16,r3,r2
   9da68:	b00b883a 	mov	r5,r22
   9da6c:	8009883a 	mov	r4,r16
   9da70:	00823480 	call	82348 <__umodsi3>
   9da74:	1023883a 	mov	r17,r2
   9da78:	b00b883a 	mov	r5,r22
   9da7c:	8009883a 	mov	r4,r16
   9da80:	00822e40 	call	822e4 <__udivsi3>
   9da84:	8822943a 	slli	r17,r17,16
   9da88:	b80b883a 	mov	r5,r23
   9da8c:	1009883a 	mov	r4,r2
   9da90:	00823a00 	call	823a0 <__mulsi3>
   9da94:	a53fffcc 	andi	r20,r20,65535
   9da98:	a446b03a 	or	r3,r20,r17
   9da9c:	18bfac2e 	bgeu	r3,r2,9d950 <__alt_data_end+0xfffeb950>
   9daa0:	003fa706 	br	9d940 <__alt_data_end+0xfffeb940>
   9daa4:	2005883a 	mov	r2,r4
   9daa8:	2807883a 	mov	r3,r5
   9daac:	dfc00c17 	ldw	ra,48(sp)
   9dab0:	df000b17 	ldw	fp,44(sp)
   9dab4:	ddc00a17 	ldw	r23,40(sp)
   9dab8:	dd800917 	ldw	r22,36(sp)
   9dabc:	dd400817 	ldw	r21,32(sp)
   9dac0:	dd000717 	ldw	r20,28(sp)
   9dac4:	dcc00617 	ldw	r19,24(sp)
   9dac8:	dc800517 	ldw	r18,20(sp)
   9dacc:	dc400417 	ldw	r17,16(sp)
   9dad0:	dc000317 	ldw	r16,12(sp)
   9dad4:	dec00d04 	addi	sp,sp,52
   9dad8:	f800283a 	ret
   9dadc:	04c03fc4 	movi	r19,255
   9dae0:	99c9803a 	cmpltu	r4,r19,r7
   9dae4:	200890fa 	slli	r4,r4,3
   9dae8:	003fa406 	br	9d97c <__alt_data_end+0xfffeb97c>
   9daec:	00803fc4 	movi	r2,255
   9daf0:	14c5803a 	cmpltu	r2,r2,r19
   9daf4:	100490fa 	slli	r2,r2,3
   9daf8:	003fbc06 	br	9d9ec <__alt_data_end+0xfffeb9ec>
   9dafc:	00804034 	movhi	r2,256
   9db00:	10bfffc4 	addi	r2,r2,-1
   9db04:	1180a636 	bltu	r2,r6,9dda0 <__umoddi3+0x57c>
   9db08:	01000404 	movi	r4,16
   9db0c:	003f5c06 	br	9d880 <__alt_data_end+0xfffeb880>
   9db10:	3d0e983a 	sll	r7,r7,r20
   9db14:	34ead83a 	srl	r21,r6,r19
   9db18:	8cc6d83a 	srl	r3,r17,r19
   9db1c:	8d10983a 	sll	r8,r17,r20
   9db20:	3d6ab03a 	or	r21,r7,r21
   9db24:	a82cd43a 	srli	r22,r21,16
   9db28:	84e2d83a 	srl	r17,r16,r19
   9db2c:	1809883a 	mov	r4,r3
   9db30:	b00b883a 	mov	r5,r22
   9db34:	8a22b03a 	or	r17,r17,r8
   9db38:	3524983a 	sll	r18,r6,r20
   9db3c:	dc400015 	stw	r17,0(sp)
   9db40:	d8c00115 	stw	r3,4(sp)
   9db44:	00823480 	call	82348 <__umodsi3>
   9db48:	d8c00117 	ldw	r3,4(sp)
   9db4c:	b00b883a 	mov	r5,r22
   9db50:	1039883a 	mov	fp,r2
   9db54:	1809883a 	mov	r4,r3
   9db58:	00822e40 	call	822e4 <__udivsi3>
   9db5c:	adffffcc 	andi	r23,r21,65535
   9db60:	100b883a 	mov	r5,r2
   9db64:	b809883a 	mov	r4,r23
   9db68:	1023883a 	mov	r17,r2
   9db6c:	00823a00 	call	823a0 <__mulsi3>
   9db70:	d9400017 	ldw	r5,0(sp)
   9db74:	e008943a 	slli	r4,fp,16
   9db78:	8520983a 	sll	r16,r16,r20
   9db7c:	2806d43a 	srli	r3,r5,16
   9db80:	1906b03a 	or	r3,r3,r4
   9db84:	1880042e 	bgeu	r3,r2,9db98 <__umoddi3+0x374>
   9db88:	1d47883a 	add	r3,r3,r21
   9db8c:	893fffc4 	addi	r4,r17,-1
   9db90:	1d40892e 	bgeu	r3,r21,9ddb8 <__umoddi3+0x594>
   9db94:	2023883a 	mov	r17,r4
   9db98:	18b9c83a 	sub	fp,r3,r2
   9db9c:	b00b883a 	mov	r5,r22
   9dba0:	e009883a 	mov	r4,fp
   9dba4:	00823480 	call	82348 <__umodsi3>
   9dba8:	b00b883a 	mov	r5,r22
   9dbac:	e009883a 	mov	r4,fp
   9dbb0:	d8800215 	stw	r2,8(sp)
   9dbb4:	00822e40 	call	822e4 <__udivsi3>
   9dbb8:	100b883a 	mov	r5,r2
   9dbbc:	b809883a 	mov	r4,r23
   9dbc0:	102d883a 	mov	r22,r2
   9dbc4:	00823a00 	call	823a0 <__mulsi3>
   9dbc8:	d9800217 	ldw	r6,8(sp)
   9dbcc:	d8c00017 	ldw	r3,0(sp)
   9dbd0:	300c943a 	slli	r6,r6,16
   9dbd4:	1a3fffcc 	andi	r8,r3,65535
   9dbd8:	4190b03a 	or	r8,r8,r6
   9dbdc:	4080042e 	bgeu	r8,r2,9dbf0 <__umoddi3+0x3cc>
   9dbe0:	4551883a 	add	r8,r8,r21
   9dbe4:	b0ffffc4 	addi	r3,r22,-1
   9dbe8:	45406f2e 	bgeu	r8,r21,9dda8 <__umoddi3+0x584>
   9dbec:	182d883a 	mov	r22,r3
   9dbf0:	880e943a 	slli	r7,r17,16
   9dbf4:	9006d43a 	srli	r3,r18,16
   9dbf8:	91bfffcc 	andi	r6,r18,65535
   9dbfc:	3dacb03a 	or	r22,r7,r22
   9dc00:	b02ed43a 	srli	r23,r22,16
   9dc04:	b5bfffcc 	andi	r22,r22,65535
   9dc08:	300b883a 	mov	r5,r6
   9dc0c:	b009883a 	mov	r4,r22
   9dc10:	40a3c83a 	sub	r17,r8,r2
   9dc14:	d8c00115 	stw	r3,4(sp)
   9dc18:	d9800215 	stw	r6,8(sp)
   9dc1c:	00823a00 	call	823a0 <__mulsi3>
   9dc20:	d9800217 	ldw	r6,8(sp)
   9dc24:	b809883a 	mov	r4,r23
   9dc28:	1039883a 	mov	fp,r2
   9dc2c:	300b883a 	mov	r5,r6
   9dc30:	00823a00 	call	823a0 <__mulsi3>
   9dc34:	d8c00117 	ldw	r3,4(sp)
   9dc38:	b809883a 	mov	r4,r23
   9dc3c:	d8800215 	stw	r2,8(sp)
   9dc40:	180b883a 	mov	r5,r3
   9dc44:	00823a00 	call	823a0 <__mulsi3>
   9dc48:	d8c00117 	ldw	r3,4(sp)
   9dc4c:	b009883a 	mov	r4,r22
   9dc50:	102f883a 	mov	r23,r2
   9dc54:	180b883a 	mov	r5,r3
   9dc58:	00823a00 	call	823a0 <__mulsi3>
   9dc5c:	d9800217 	ldw	r6,8(sp)
   9dc60:	e006d43a 	srli	r3,fp,16
   9dc64:	1185883a 	add	r2,r2,r6
   9dc68:	1885883a 	add	r2,r3,r2
   9dc6c:	1180022e 	bgeu	r2,r6,9dc78 <__umoddi3+0x454>
   9dc70:	00c00074 	movhi	r3,1
   9dc74:	b8ef883a 	add	r23,r23,r3
   9dc78:	1006d43a 	srli	r3,r2,16
   9dc7c:	1004943a 	slli	r2,r2,16
   9dc80:	e73fffcc 	andi	fp,fp,65535
   9dc84:	1dc7883a 	add	r3,r3,r23
   9dc88:	1739883a 	add	fp,r2,fp
   9dc8c:	88c03a36 	bltu	r17,r3,9dd78 <__umoddi3+0x554>
   9dc90:	88c05126 	beq	r17,r3,9ddd8 <__umoddi3+0x5b4>
   9dc94:	88c9c83a 	sub	r4,r17,r3
   9dc98:	e00f883a 	mov	r7,fp
   9dc9c:	81cfc83a 	sub	r7,r16,r7
   9dca0:	81c7803a 	cmpltu	r3,r16,r7
   9dca4:	20c7c83a 	sub	r3,r4,r3
   9dca8:	1cc4983a 	sll	r2,r3,r19
   9dcac:	3d0ed83a 	srl	r7,r7,r20
   9dcb0:	1d06d83a 	srl	r3,r3,r20
   9dcb4:	11c4b03a 	or	r2,r2,r7
   9dcb8:	003f7c06 	br	9daac <__alt_data_end+0xfffebaac>
   9dcbc:	9ca6983a 	sll	r19,r19,r18
   9dcc0:	88f8d83a 	srl	fp,r17,r3
   9dcc4:	80c4d83a 	srl	r2,r16,r3
   9dcc8:	982cd43a 	srli	r22,r19,16
   9dccc:	8ca2983a 	sll	r17,r17,r18
   9dcd0:	e009883a 	mov	r4,fp
   9dcd4:	b00b883a 	mov	r5,r22
   9dcd8:	146ab03a 	or	r21,r2,r17
   9dcdc:	00823480 	call	82348 <__umodsi3>
   9dce0:	b00b883a 	mov	r5,r22
   9dce4:	e009883a 	mov	r4,fp
   9dce8:	1029883a 	mov	r20,r2
   9dcec:	9dffffcc 	andi	r23,r19,65535
   9dcf0:	00822e40 	call	822e4 <__udivsi3>
   9dcf4:	b809883a 	mov	r4,r23
   9dcf8:	100b883a 	mov	r5,r2
   9dcfc:	00823a00 	call	823a0 <__mulsi3>
   9dd00:	a008943a 	slli	r4,r20,16
   9dd04:	a806d43a 	srli	r3,r21,16
   9dd08:	84a8983a 	sll	r20,r16,r18
   9dd0c:	1906b03a 	or	r3,r3,r4
   9dd10:	1880042e 	bgeu	r3,r2,9dd24 <__umoddi3+0x500>
   9dd14:	1cc7883a 	add	r3,r3,r19
   9dd18:	1cc00236 	bltu	r3,r19,9dd24 <__umoddi3+0x500>
   9dd1c:	1880012e 	bgeu	r3,r2,9dd24 <__umoddi3+0x500>
   9dd20:	1cc7883a 	add	r3,r3,r19
   9dd24:	18a3c83a 	sub	r17,r3,r2
   9dd28:	b00b883a 	mov	r5,r22
   9dd2c:	8809883a 	mov	r4,r17
   9dd30:	00823480 	call	82348 <__umodsi3>
   9dd34:	b00b883a 	mov	r5,r22
   9dd38:	8809883a 	mov	r4,r17
   9dd3c:	1021883a 	mov	r16,r2
   9dd40:	00822e40 	call	822e4 <__udivsi3>
   9dd44:	100b883a 	mov	r5,r2
   9dd48:	b809883a 	mov	r4,r23
   9dd4c:	8020943a 	slli	r16,r16,16
   9dd50:	00823a00 	call	823a0 <__mulsi3>
   9dd54:	a8ffffcc 	andi	r3,r21,65535
   9dd58:	1c06b03a 	or	r3,r3,r16
   9dd5c:	1880042e 	bgeu	r3,r2,9dd70 <__umoddi3+0x54c>
   9dd60:	1cc7883a 	add	r3,r3,r19
   9dd64:	1cc00236 	bltu	r3,r19,9dd70 <__umoddi3+0x54c>
   9dd68:	1880012e 	bgeu	r3,r2,9dd70 <__umoddi3+0x54c>
   9dd6c:	1cc7883a 	add	r3,r3,r19
   9dd70:	18a3c83a 	sub	r17,r3,r2
   9dd74:	003f2906 	br	9da1c <__alt_data_end+0xfffeba1c>
   9dd78:	e48fc83a 	sub	r7,fp,r18
   9dd7c:	1d49c83a 	sub	r4,r3,r21
   9dd80:	e1f9803a 	cmpltu	fp,fp,r7
   9dd84:	2739c83a 	sub	fp,r4,fp
   9dd88:	8f09c83a 	sub	r4,r17,fp
   9dd8c:	003fc306 	br	9dc9c <__alt_data_end+0xfffebc9c>
   9dd90:	01000604 	movi	r4,24
   9dd94:	003ef906 	br	9d97c <__alt_data_end+0xfffeb97c>
   9dd98:	00800604 	movi	r2,24
   9dd9c:	003f1306 	br	9d9ec <__alt_data_end+0xfffeb9ec>
   9dda0:	01000604 	movi	r4,24
   9dda4:	003eb606 	br	9d880 <__alt_data_end+0xfffeb880>
   9dda8:	40bf902e 	bgeu	r8,r2,9dbec <__alt_data_end+0xfffebbec>
   9ddac:	b5bfff84 	addi	r22,r22,-2
   9ddb0:	4551883a 	add	r8,r8,r21
   9ddb4:	003f8e06 	br	9dbf0 <__alt_data_end+0xfffebbf0>
   9ddb8:	18bf762e 	bgeu	r3,r2,9db94 <__alt_data_end+0xfffebb94>
   9ddbc:	8c7fff84 	addi	r17,r17,-2
   9ddc0:	1d47883a 	add	r3,r3,r21
   9ddc4:	003f7406 	br	9db98 <__alt_data_end+0xfffebb98>
   9ddc8:	1cc7883a 	add	r3,r3,r19
   9ddcc:	003ecd06 	br	9d904 <__alt_data_end+0xfffeb904>
   9ddd0:	8005883a 	mov	r2,r16
   9ddd4:	003ef806 	br	9d9b8 <__alt_data_end+0xfffeb9b8>
   9ddd8:	873fe736 	bltu	r16,fp,9dd78 <__alt_data_end+0xfffebd78>
   9dddc:	e00f883a 	mov	r7,fp
   9dde0:	0009883a 	mov	r4,zero
   9dde4:	003fad06 	br	9dc9c <__alt_data_end+0xfffebc9c>

0009dde8 <__eqdf2>:
   9dde8:	2804d53a 	srli	r2,r5,20
   9ddec:	3806d53a 	srli	r3,r7,20
   9ddf0:	02000434 	movhi	r8,16
   9ddf4:	423fffc4 	addi	r8,r8,-1
   9ddf8:	1081ffcc 	andi	r2,r2,2047
   9ddfc:	0281ffc4 	movi	r10,2047
   9de00:	2a12703a 	and	r9,r5,r8
   9de04:	18c1ffcc 	andi	r3,r3,2047
   9de08:	3a10703a 	and	r8,r7,r8
   9de0c:	280ad7fa 	srli	r5,r5,31
   9de10:	380ed7fa 	srli	r7,r7,31
   9de14:	12801026 	beq	r2,r10,9de58 <__eqdf2+0x70>
   9de18:	0281ffc4 	movi	r10,2047
   9de1c:	1a800a26 	beq	r3,r10,9de48 <__eqdf2+0x60>
   9de20:	10c00226 	beq	r2,r3,9de2c <__eqdf2+0x44>
   9de24:	00800044 	movi	r2,1
   9de28:	f800283a 	ret
   9de2c:	4a3ffd1e 	bne	r9,r8,9de24 <__alt_data_end+0xfffebe24>
   9de30:	21bffc1e 	bne	r4,r6,9de24 <__alt_data_end+0xfffebe24>
   9de34:	29c00c26 	beq	r5,r7,9de68 <__eqdf2+0x80>
   9de38:	103ffa1e 	bne	r2,zero,9de24 <__alt_data_end+0xfffebe24>
   9de3c:	2244b03a 	or	r2,r4,r9
   9de40:	1004c03a 	cmpne	r2,r2,zero
   9de44:	f800283a 	ret
   9de48:	3214b03a 	or	r10,r6,r8
   9de4c:	503ff426 	beq	r10,zero,9de20 <__alt_data_end+0xfffebe20>
   9de50:	00800044 	movi	r2,1
   9de54:	f800283a 	ret
   9de58:	2254b03a 	or	r10,r4,r9
   9de5c:	503fee26 	beq	r10,zero,9de18 <__alt_data_end+0xfffebe18>
   9de60:	00800044 	movi	r2,1
   9de64:	f800283a 	ret
   9de68:	0005883a 	mov	r2,zero
   9de6c:	f800283a 	ret

0009de70 <__floatunsidf>:
   9de70:	defffe04 	addi	sp,sp,-8
   9de74:	dc000015 	stw	r16,0(sp)
   9de78:	dfc00115 	stw	ra,4(sp)
   9de7c:	2021883a 	mov	r16,r4
   9de80:	20002226 	beq	r4,zero,9df0c <__floatunsidf+0x9c>
   9de84:	0084d900 	call	84d90 <__clzsi2>
   9de88:	01010784 	movi	r4,1054
   9de8c:	2089c83a 	sub	r4,r4,r2
   9de90:	01810cc4 	movi	r6,1075
   9de94:	310dc83a 	sub	r6,r6,r4
   9de98:	00c007c4 	movi	r3,31
   9de9c:	1980120e 	bge	r3,r6,9dee8 <__floatunsidf+0x78>
   9dea0:	00c104c4 	movi	r3,1043
   9dea4:	1907c83a 	sub	r3,r3,r4
   9dea8:	80ca983a 	sll	r5,r16,r3
   9deac:	00800434 	movhi	r2,16
   9deb0:	10bfffc4 	addi	r2,r2,-1
   9deb4:	2101ffcc 	andi	r4,r4,2047
   9deb8:	0021883a 	mov	r16,zero
   9debc:	288a703a 	and	r5,r5,r2
   9dec0:	2008953a 	slli	r4,r4,20
   9dec4:	00c00434 	movhi	r3,16
   9dec8:	18ffffc4 	addi	r3,r3,-1
   9decc:	28c6703a 	and	r3,r5,r3
   9ded0:	8005883a 	mov	r2,r16
   9ded4:	1906b03a 	or	r3,r3,r4
   9ded8:	dfc00117 	ldw	ra,4(sp)
   9dedc:	dc000017 	ldw	r16,0(sp)
   9dee0:	dec00204 	addi	sp,sp,8
   9dee4:	f800283a 	ret
   9dee8:	00c002c4 	movi	r3,11
   9deec:	188bc83a 	sub	r5,r3,r2
   9def0:	814ad83a 	srl	r5,r16,r5
   9def4:	00c00434 	movhi	r3,16
   9def8:	18ffffc4 	addi	r3,r3,-1
   9defc:	81a0983a 	sll	r16,r16,r6
   9df00:	2101ffcc 	andi	r4,r4,2047
   9df04:	28ca703a 	and	r5,r5,r3
   9df08:	003fed06 	br	9dec0 <__alt_data_end+0xfffebec0>
   9df0c:	0009883a 	mov	r4,zero
   9df10:	000b883a 	mov	r5,zero
   9df14:	003fea06 	br	9dec0 <__alt_data_end+0xfffebec0>

0009df18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9df18:	defffe04 	addi	sp,sp,-8
   9df1c:	dfc00115 	stw	ra,4(sp)
   9df20:	df000015 	stw	fp,0(sp)
   9df24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9df28:	d0a01117 	ldw	r2,-32700(gp)
   9df2c:	10000326 	beq	r2,zero,9df3c <alt_get_errno+0x24>
   9df30:	d0a01117 	ldw	r2,-32700(gp)
   9df34:	103ee83a 	callr	r2
   9df38:	00000106 	br	9df40 <alt_get_errno+0x28>
   9df3c:	d0a70f04 	addi	r2,gp,-25540
}
   9df40:	e037883a 	mov	sp,fp
   9df44:	dfc00117 	ldw	ra,4(sp)
   9df48:	df000017 	ldw	fp,0(sp)
   9df4c:	dec00204 	addi	sp,sp,8
   9df50:	f800283a 	ret

0009df54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   9df54:	defffb04 	addi	sp,sp,-20
   9df58:	dfc00415 	stw	ra,16(sp)
   9df5c:	df000315 	stw	fp,12(sp)
   9df60:	df000304 	addi	fp,sp,12
   9df64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   9df68:	e0bfff17 	ldw	r2,-4(fp)
   9df6c:	10000816 	blt	r2,zero,9df90 <close+0x3c>
   9df70:	01400304 	movi	r5,12
   9df74:	e13fff17 	ldw	r4,-4(fp)
   9df78:	00823a00 	call	823a0 <__mulsi3>
   9df7c:	1007883a 	mov	r3,r2
   9df80:	008002b4 	movhi	r2,10
   9df84:	1087b004 	addi	r2,r2,7872
   9df88:	1885883a 	add	r2,r3,r2
   9df8c:	00000106 	br	9df94 <close+0x40>
   9df90:	0005883a 	mov	r2,zero
   9df94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   9df98:	e0bffd17 	ldw	r2,-12(fp)
   9df9c:	10001926 	beq	r2,zero,9e004 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   9dfa0:	e0bffd17 	ldw	r2,-12(fp)
   9dfa4:	10800017 	ldw	r2,0(r2)
   9dfa8:	10800417 	ldw	r2,16(r2)
   9dfac:	10000626 	beq	r2,zero,9dfc8 <close+0x74>
   9dfb0:	e0bffd17 	ldw	r2,-12(fp)
   9dfb4:	10800017 	ldw	r2,0(r2)
   9dfb8:	10800417 	ldw	r2,16(r2)
   9dfbc:	e13ffd17 	ldw	r4,-12(fp)
   9dfc0:	103ee83a 	callr	r2
   9dfc4:	00000106 	br	9dfcc <close+0x78>
   9dfc8:	0005883a 	mov	r2,zero
   9dfcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   9dfd0:	e13fff17 	ldw	r4,-4(fp)
   9dfd4:	009e8f40 	call	9e8f4 <alt_release_fd>
    if (rval < 0)
   9dfd8:	e0bffe17 	ldw	r2,-8(fp)
   9dfdc:	1000070e 	bge	r2,zero,9dffc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   9dfe0:	009df180 	call	9df18 <alt_get_errno>
   9dfe4:	1007883a 	mov	r3,r2
   9dfe8:	e0bffe17 	ldw	r2,-8(fp)
   9dfec:	0085c83a 	sub	r2,zero,r2
   9dff0:	18800015 	stw	r2,0(r3)
      return -1;
   9dff4:	00bfffc4 	movi	r2,-1
   9dff8:	00000706 	br	9e018 <close+0xc4>
    }
    return 0;
   9dffc:	0005883a 	mov	r2,zero
   9e000:	00000506 	br	9e018 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   9e004:	009df180 	call	9df18 <alt_get_errno>
   9e008:	1007883a 	mov	r3,r2
   9e00c:	00801444 	movi	r2,81
   9e010:	18800015 	stw	r2,0(r3)
    return -1;
   9e014:	00bfffc4 	movi	r2,-1
  }
}
   9e018:	e037883a 	mov	sp,fp
   9e01c:	dfc00117 	ldw	ra,4(sp)
   9e020:	df000017 	ldw	fp,0(sp)
   9e024:	dec00204 	addi	sp,sp,8
   9e028:	f800283a 	ret

0009e02c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   9e02c:	defffc04 	addi	sp,sp,-16
   9e030:	df000315 	stw	fp,12(sp)
   9e034:	df000304 	addi	fp,sp,12
   9e038:	e13ffd15 	stw	r4,-12(fp)
   9e03c:	e17ffe15 	stw	r5,-8(fp)
   9e040:	e1bfff15 	stw	r6,-4(fp)
  return len;
   9e044:	e0bfff17 	ldw	r2,-4(fp)
}
   9e048:	e037883a 	mov	sp,fp
   9e04c:	df000017 	ldw	fp,0(sp)
   9e050:	dec00104 	addi	sp,sp,4
   9e054:	f800283a 	ret

0009e058 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9e058:	defffd04 	addi	sp,sp,-12
   9e05c:	df000215 	stw	fp,8(sp)
   9e060:	df000204 	addi	fp,sp,8
   9e064:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   9e068:	0001883a 	nop
   9e06c:	e0bfff17 	ldw	r2,-4(fp)
   9e070:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   9e074:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9e078:	10000226 	beq	r2,zero,9e084 <_exit+0x2c>
    ALT_SIM_FAIL();
   9e07c:	002af070 	cmpltui	zero,zero,43969
   9e080:	00000106 	br	9e088 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   9e084:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   9e088:	003fff06 	br	9e088 <__alt_data_end+0xfffec088>

0009e08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e08c:	defffe04 	addi	sp,sp,-8
   9e090:	dfc00115 	stw	ra,4(sp)
   9e094:	df000015 	stw	fp,0(sp)
   9e098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9e09c:	d0a01117 	ldw	r2,-32700(gp)
   9e0a0:	10000326 	beq	r2,zero,9e0b0 <alt_get_errno+0x24>
   9e0a4:	d0a01117 	ldw	r2,-32700(gp)
   9e0a8:	103ee83a 	callr	r2
   9e0ac:	00000106 	br	9e0b4 <alt_get_errno+0x28>
   9e0b0:	d0a70f04 	addi	r2,gp,-25540
}
   9e0b4:	e037883a 	mov	sp,fp
   9e0b8:	dfc00117 	ldw	ra,4(sp)
   9e0bc:	df000017 	ldw	fp,0(sp)
   9e0c0:	dec00204 	addi	sp,sp,8
   9e0c4:	f800283a 	ret

0009e0c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   9e0c8:	defffb04 	addi	sp,sp,-20
   9e0cc:	dfc00415 	stw	ra,16(sp)
   9e0d0:	df000315 	stw	fp,12(sp)
   9e0d4:	df000304 	addi	fp,sp,12
   9e0d8:	e13ffe15 	stw	r4,-8(fp)
   9e0dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9e0e0:	e0bffe17 	ldw	r2,-8(fp)
   9e0e4:	10000816 	blt	r2,zero,9e108 <fstat+0x40>
   9e0e8:	01400304 	movi	r5,12
   9e0ec:	e13ffe17 	ldw	r4,-8(fp)
   9e0f0:	00823a00 	call	823a0 <__mulsi3>
   9e0f4:	1007883a 	mov	r3,r2
   9e0f8:	008002b4 	movhi	r2,10
   9e0fc:	1087b004 	addi	r2,r2,7872
   9e100:	1885883a 	add	r2,r3,r2
   9e104:	00000106 	br	9e10c <fstat+0x44>
   9e108:	0005883a 	mov	r2,zero
   9e10c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   9e110:	e0bffd17 	ldw	r2,-12(fp)
   9e114:	10001026 	beq	r2,zero,9e158 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   9e118:	e0bffd17 	ldw	r2,-12(fp)
   9e11c:	10800017 	ldw	r2,0(r2)
   9e120:	10800817 	ldw	r2,32(r2)
   9e124:	10000726 	beq	r2,zero,9e144 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   9e128:	e0bffd17 	ldw	r2,-12(fp)
   9e12c:	10800017 	ldw	r2,0(r2)
   9e130:	10800817 	ldw	r2,32(r2)
   9e134:	e17fff17 	ldw	r5,-4(fp)
   9e138:	e13ffd17 	ldw	r4,-12(fp)
   9e13c:	103ee83a 	callr	r2
   9e140:	00000a06 	br	9e16c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   9e144:	e0bfff17 	ldw	r2,-4(fp)
   9e148:	00c80004 	movi	r3,8192
   9e14c:	10c00115 	stw	r3,4(r2)
      return 0;
   9e150:	0005883a 	mov	r2,zero
   9e154:	00000506 	br	9e16c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   9e158:	009e08c0 	call	9e08c <alt_get_errno>
   9e15c:	1007883a 	mov	r3,r2
   9e160:	00801444 	movi	r2,81
   9e164:	18800015 	stw	r2,0(r3)
    return -1;
   9e168:	00bfffc4 	movi	r2,-1
  }
}
   9e16c:	e037883a 	mov	sp,fp
   9e170:	dfc00117 	ldw	ra,4(sp)
   9e174:	df000017 	ldw	fp,0(sp)
   9e178:	dec00204 	addi	sp,sp,8
   9e17c:	f800283a 	ret

0009e180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e180:	defffe04 	addi	sp,sp,-8
   9e184:	dfc00115 	stw	ra,4(sp)
   9e188:	df000015 	stw	fp,0(sp)
   9e18c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9e190:	d0a01117 	ldw	r2,-32700(gp)
   9e194:	10000326 	beq	r2,zero,9e1a4 <alt_get_errno+0x24>
   9e198:	d0a01117 	ldw	r2,-32700(gp)
   9e19c:	103ee83a 	callr	r2
   9e1a0:	00000106 	br	9e1a8 <alt_get_errno+0x28>
   9e1a4:	d0a70f04 	addi	r2,gp,-25540
}
   9e1a8:	e037883a 	mov	sp,fp
   9e1ac:	dfc00117 	ldw	ra,4(sp)
   9e1b0:	df000017 	ldw	fp,0(sp)
   9e1b4:	dec00204 	addi	sp,sp,8
   9e1b8:	f800283a 	ret

0009e1bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   9e1bc:	deffed04 	addi	sp,sp,-76
   9e1c0:	dfc01215 	stw	ra,72(sp)
   9e1c4:	df001115 	stw	fp,68(sp)
   9e1c8:	df001104 	addi	fp,sp,68
   9e1cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9e1d0:	e0bfff17 	ldw	r2,-4(fp)
   9e1d4:	10000816 	blt	r2,zero,9e1f8 <isatty+0x3c>
   9e1d8:	01400304 	movi	r5,12
   9e1dc:	e13fff17 	ldw	r4,-4(fp)
   9e1e0:	00823a00 	call	823a0 <__mulsi3>
   9e1e4:	1007883a 	mov	r3,r2
   9e1e8:	008002b4 	movhi	r2,10
   9e1ec:	1087b004 	addi	r2,r2,7872
   9e1f0:	1885883a 	add	r2,r3,r2
   9e1f4:	00000106 	br	9e1fc <isatty+0x40>
   9e1f8:	0005883a 	mov	r2,zero
   9e1fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   9e200:	e0bfef17 	ldw	r2,-68(fp)
   9e204:	10000e26 	beq	r2,zero,9e240 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   9e208:	e0bfef17 	ldw	r2,-68(fp)
   9e20c:	10800017 	ldw	r2,0(r2)
   9e210:	10800817 	ldw	r2,32(r2)
   9e214:	1000021e 	bne	r2,zero,9e220 <isatty+0x64>
    {
      return 1;
   9e218:	00800044 	movi	r2,1
   9e21c:	00000d06 	br	9e254 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   9e220:	e0bff004 	addi	r2,fp,-64
   9e224:	100b883a 	mov	r5,r2
   9e228:	e13fff17 	ldw	r4,-4(fp)
   9e22c:	009e0c80 	call	9e0c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   9e230:	e0bff117 	ldw	r2,-60(fp)
   9e234:	10880020 	cmpeqi	r2,r2,8192
   9e238:	10803fcc 	andi	r2,r2,255
   9e23c:	00000506 	br	9e254 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   9e240:	009e1800 	call	9e180 <alt_get_errno>
   9e244:	1007883a 	mov	r3,r2
   9e248:	00801444 	movi	r2,81
   9e24c:	18800015 	stw	r2,0(r3)
    return 0;
   9e250:	0005883a 	mov	r2,zero
  }
}
   9e254:	e037883a 	mov	sp,fp
   9e258:	dfc00117 	ldw	ra,4(sp)
   9e25c:	df000017 	ldw	fp,0(sp)
   9e260:	dec00204 	addi	sp,sp,8
   9e264:	f800283a 	ret

0009e268 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   9e268:	defffc04 	addi	sp,sp,-16
   9e26c:	df000315 	stw	fp,12(sp)
   9e270:	df000304 	addi	fp,sp,12
   9e274:	e13ffd15 	stw	r4,-12(fp)
   9e278:	e17ffe15 	stw	r5,-8(fp)
   9e27c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   9e280:	e0fffe17 	ldw	r3,-8(fp)
   9e284:	e0bffd17 	ldw	r2,-12(fp)
   9e288:	18800c26 	beq	r3,r2,9e2bc <alt_load_section+0x54>
  {
    while( to != end )
   9e28c:	00000806 	br	9e2b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   9e290:	e0bffe17 	ldw	r2,-8(fp)
   9e294:	10c00104 	addi	r3,r2,4
   9e298:	e0fffe15 	stw	r3,-8(fp)
   9e29c:	e0fffd17 	ldw	r3,-12(fp)
   9e2a0:	19000104 	addi	r4,r3,4
   9e2a4:	e13ffd15 	stw	r4,-12(fp)
   9e2a8:	18c00017 	ldw	r3,0(r3)
   9e2ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   9e2b0:	e0fffe17 	ldw	r3,-8(fp)
   9e2b4:	e0bfff17 	ldw	r2,-4(fp)
   9e2b8:	18bff51e 	bne	r3,r2,9e290 <__alt_data_end+0xfffec290>
    {
      *to++ = *from++;
    }
  }
}
   9e2bc:	0001883a 	nop
   9e2c0:	e037883a 	mov	sp,fp
   9e2c4:	df000017 	ldw	fp,0(sp)
   9e2c8:	dec00104 	addi	sp,sp,4
   9e2cc:	f800283a 	ret

0009e2d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   9e2d0:	defffe04 	addi	sp,sp,-8
   9e2d4:	dfc00115 	stw	ra,4(sp)
   9e2d8:	df000015 	stw	fp,0(sp)
   9e2dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   9e2e0:	018002b4 	movhi	r6,10
   9e2e4:	318c5a04 	addi	r6,r6,12648
   9e2e8:	014002b4 	movhi	r5,10
   9e2ec:	29457d04 	addi	r5,r5,5620
   9e2f0:	010002b4 	movhi	r4,10
   9e2f4:	210c5a04 	addi	r4,r4,12648
   9e2f8:	009e2680 	call	9e268 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   9e2fc:	01800234 	movhi	r6,8
   9e300:	31808c04 	addi	r6,r6,560
   9e304:	01400234 	movhi	r5,8
   9e308:	29400804 	addi	r5,r5,32
   9e30c:	01000234 	movhi	r4,8
   9e310:	21000804 	addi	r4,r4,32
   9e314:	009e2680 	call	9e268 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   9e318:	018002b4 	movhi	r6,10
   9e31c:	31857d04 	addi	r6,r6,5620
   9e320:	014002b4 	movhi	r5,10
   9e324:	29428f04 	addi	r5,r5,2620
   9e328:	010002b4 	movhi	r4,10
   9e32c:	21028f04 	addi	r4,r4,2620
   9e330:	009e2680 	call	9e268 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   9e334:	009fc3c0 	call	9fc3c <alt_dcache_flush_all>
  alt_icache_flush_all();
   9e338:	00a00d80 	call	a00d8 <alt_icache_flush_all>
}
   9e33c:	0001883a 	nop
   9e340:	e037883a 	mov	sp,fp
   9e344:	dfc00117 	ldw	ra,4(sp)
   9e348:	df000017 	ldw	fp,0(sp)
   9e34c:	dec00204 	addi	sp,sp,8
   9e350:	f800283a 	ret

0009e354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e354:	defffe04 	addi	sp,sp,-8
   9e358:	dfc00115 	stw	ra,4(sp)
   9e35c:	df000015 	stw	fp,0(sp)
   9e360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9e364:	d0a01117 	ldw	r2,-32700(gp)
   9e368:	10000326 	beq	r2,zero,9e378 <alt_get_errno+0x24>
   9e36c:	d0a01117 	ldw	r2,-32700(gp)
   9e370:	103ee83a 	callr	r2
   9e374:	00000106 	br	9e37c <alt_get_errno+0x28>
   9e378:	d0a70f04 	addi	r2,gp,-25540
}
   9e37c:	e037883a 	mov	sp,fp
   9e380:	dfc00117 	ldw	ra,4(sp)
   9e384:	df000017 	ldw	fp,0(sp)
   9e388:	dec00204 	addi	sp,sp,8
   9e38c:	f800283a 	ret

0009e390 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   9e390:	defff904 	addi	sp,sp,-28
   9e394:	dfc00615 	stw	ra,24(sp)
   9e398:	df000515 	stw	fp,20(sp)
   9e39c:	df000504 	addi	fp,sp,20
   9e3a0:	e13ffd15 	stw	r4,-12(fp)
   9e3a4:	e17ffe15 	stw	r5,-8(fp)
   9e3a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   9e3ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9e3b0:	e0bffd17 	ldw	r2,-12(fp)
   9e3b4:	10000816 	blt	r2,zero,9e3d8 <lseek+0x48>
   9e3b8:	01400304 	movi	r5,12
   9e3bc:	e13ffd17 	ldw	r4,-12(fp)
   9e3c0:	00823a00 	call	823a0 <__mulsi3>
   9e3c4:	1007883a 	mov	r3,r2
   9e3c8:	008002b4 	movhi	r2,10
   9e3cc:	1087b004 	addi	r2,r2,7872
   9e3d0:	1885883a 	add	r2,r3,r2
   9e3d4:	00000106 	br	9e3dc <lseek+0x4c>
   9e3d8:	0005883a 	mov	r2,zero
   9e3dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   9e3e0:	e0bffc17 	ldw	r2,-16(fp)
   9e3e4:	10001026 	beq	r2,zero,9e428 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   9e3e8:	e0bffc17 	ldw	r2,-16(fp)
   9e3ec:	10800017 	ldw	r2,0(r2)
   9e3f0:	10800717 	ldw	r2,28(r2)
   9e3f4:	10000926 	beq	r2,zero,9e41c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   9e3f8:	e0bffc17 	ldw	r2,-16(fp)
   9e3fc:	10800017 	ldw	r2,0(r2)
   9e400:	10800717 	ldw	r2,28(r2)
   9e404:	e1bfff17 	ldw	r6,-4(fp)
   9e408:	e17ffe17 	ldw	r5,-8(fp)
   9e40c:	e13ffc17 	ldw	r4,-16(fp)
   9e410:	103ee83a 	callr	r2
   9e414:	e0bffb15 	stw	r2,-20(fp)
   9e418:	00000506 	br	9e430 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   9e41c:	00bfde84 	movi	r2,-134
   9e420:	e0bffb15 	stw	r2,-20(fp)
   9e424:	00000206 	br	9e430 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   9e428:	00bfebc4 	movi	r2,-81
   9e42c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   9e430:	e0bffb17 	ldw	r2,-20(fp)
   9e434:	1000070e 	bge	r2,zero,9e454 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   9e438:	009e3540 	call	9e354 <alt_get_errno>
   9e43c:	1007883a 	mov	r3,r2
   9e440:	e0bffb17 	ldw	r2,-20(fp)
   9e444:	0085c83a 	sub	r2,zero,r2
   9e448:	18800015 	stw	r2,0(r3)
    rc = -1;
   9e44c:	00bfffc4 	movi	r2,-1
   9e450:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   9e454:	e0bffb17 	ldw	r2,-20(fp)
}
   9e458:	e037883a 	mov	sp,fp
   9e45c:	dfc00117 	ldw	ra,4(sp)
   9e460:	df000017 	ldw	fp,0(sp)
   9e464:	dec00204 	addi	sp,sp,8
   9e468:	f800283a 	ret

0009e46c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   9e46c:	defffd04 	addi	sp,sp,-12
   9e470:	dfc00215 	stw	ra,8(sp)
   9e474:	df000115 	stw	fp,4(sp)
   9e478:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   9e47c:	0009883a 	mov	r4,zero
   9e480:	009eb980 	call	9eb98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   9e484:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   9e488:	009ebd00 	call	9ebd0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   9e48c:	018002b4 	movhi	r6,10
   9e490:	31857204 	addi	r6,r6,5576
   9e494:	014002b4 	movhi	r5,10
   9e498:	29457204 	addi	r5,r5,5576
   9e49c:	010002b4 	movhi	r4,10
   9e4a0:	21057204 	addi	r4,r4,5576
   9e4a4:	00a047c0 	call	a047c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   9e4a8:	009fd3c0 	call	9fd3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   9e4ac:	010002b4 	movhi	r4,10
   9e4b0:	213f6704 	addi	r4,r4,-612
   9e4b4:	00a075c0 	call	a075c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   9e4b8:	d0a71817 	ldw	r2,-25504(gp)
   9e4bc:	d0e71917 	ldw	r3,-25500(gp)
   9e4c0:	d1271a17 	ldw	r4,-25496(gp)
   9e4c4:	200d883a 	mov	r6,r4
   9e4c8:	180b883a 	mov	r5,r3
   9e4cc:	1009883a 	mov	r4,r2
   9e4d0:	008026c0 	call	8026c <main>
   9e4d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   9e4d8:	01000044 	movi	r4,1
   9e4dc:	009df540 	call	9df54 <close>
  exit (result);
   9e4e0:	e13fff17 	ldw	r4,-4(fp)
   9e4e4:	0084df40 	call	84df4 <exit>

0009e4e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   9e4e8:	defffe04 	addi	sp,sp,-8
   9e4ec:	df000115 	stw	fp,4(sp)
   9e4f0:	df000104 	addi	fp,sp,4
   9e4f4:	e13fff15 	stw	r4,-4(fp)
}
   9e4f8:	0001883a 	nop
   9e4fc:	e037883a 	mov	sp,fp
   9e500:	df000017 	ldw	fp,0(sp)
   9e504:	dec00104 	addi	sp,sp,4
   9e508:	f800283a 	ret

0009e50c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   9e50c:	defffe04 	addi	sp,sp,-8
   9e510:	df000115 	stw	fp,4(sp)
   9e514:	df000104 	addi	fp,sp,4
   9e518:	e13fff15 	stw	r4,-4(fp)
}
   9e51c:	0001883a 	nop
   9e520:	e037883a 	mov	sp,fp
   9e524:	df000017 	ldw	fp,0(sp)
   9e528:	dec00104 	addi	sp,sp,4
   9e52c:	f800283a 	ret

0009e530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e530:	defffe04 	addi	sp,sp,-8
   9e534:	dfc00115 	stw	ra,4(sp)
   9e538:	df000015 	stw	fp,0(sp)
   9e53c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9e540:	d0a01117 	ldw	r2,-32700(gp)
   9e544:	10000326 	beq	r2,zero,9e554 <alt_get_errno+0x24>
   9e548:	d0a01117 	ldw	r2,-32700(gp)
   9e54c:	103ee83a 	callr	r2
   9e550:	00000106 	br	9e558 <alt_get_errno+0x28>
   9e554:	d0a70f04 	addi	r2,gp,-25540
}
   9e558:	e037883a 	mov	sp,fp
   9e55c:	dfc00117 	ldw	ra,4(sp)
   9e560:	df000017 	ldw	fp,0(sp)
   9e564:	dec00204 	addi	sp,sp,8
   9e568:	f800283a 	ret

0009e56c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   9e56c:	defffb04 	addi	sp,sp,-20
   9e570:	dfc00415 	stw	ra,16(sp)
   9e574:	df000315 	stw	fp,12(sp)
   9e578:	dc000215 	stw	r16,8(sp)
   9e57c:	df000304 	addi	fp,sp,12
   9e580:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9e584:	e0bffe17 	ldw	r2,-8(fp)
   9e588:	10800217 	ldw	r2,8(r2)
   9e58c:	10d00034 	orhi	r3,r2,16384
   9e590:	e0bffe17 	ldw	r2,-8(fp)
   9e594:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9e598:	e03ffd15 	stw	zero,-12(fp)
   9e59c:	00002306 	br	9e62c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9e5a0:	040002b4 	movhi	r16,10
   9e5a4:	8407b004 	addi	r16,r16,7872
   9e5a8:	e0bffd17 	ldw	r2,-12(fp)
   9e5ac:	01400304 	movi	r5,12
   9e5b0:	1009883a 	mov	r4,r2
   9e5b4:	00823a00 	call	823a0 <__mulsi3>
   9e5b8:	8085883a 	add	r2,r16,r2
   9e5bc:	10c00017 	ldw	r3,0(r2)
   9e5c0:	e0bffe17 	ldw	r2,-8(fp)
   9e5c4:	10800017 	ldw	r2,0(r2)
   9e5c8:	1880151e 	bne	r3,r2,9e620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9e5cc:	040002b4 	movhi	r16,10
   9e5d0:	8407b004 	addi	r16,r16,7872
   9e5d4:	e0bffd17 	ldw	r2,-12(fp)
   9e5d8:	01400304 	movi	r5,12
   9e5dc:	1009883a 	mov	r4,r2
   9e5e0:	00823a00 	call	823a0 <__mulsi3>
   9e5e4:	8085883a 	add	r2,r16,r2
   9e5e8:	10800204 	addi	r2,r2,8
   9e5ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9e5f0:	10000b0e 	bge	r2,zero,9e620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   9e5f4:	01400304 	movi	r5,12
   9e5f8:	e13ffd17 	ldw	r4,-12(fp)
   9e5fc:	00823a00 	call	823a0 <__mulsi3>
   9e600:	1007883a 	mov	r3,r2
   9e604:	008002b4 	movhi	r2,10
   9e608:	1087b004 	addi	r2,r2,7872
   9e60c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9e610:	e0bffe17 	ldw	r2,-8(fp)
   9e614:	18800226 	beq	r3,r2,9e620 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   9e618:	00bffcc4 	movi	r2,-13
   9e61c:	00000806 	br	9e640 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9e620:	e0bffd17 	ldw	r2,-12(fp)
   9e624:	10800044 	addi	r2,r2,1
   9e628:	e0bffd15 	stw	r2,-12(fp)
   9e62c:	d0a01017 	ldw	r2,-32704(gp)
   9e630:	1007883a 	mov	r3,r2
   9e634:	e0bffd17 	ldw	r2,-12(fp)
   9e638:	18bfd92e 	bgeu	r3,r2,9e5a0 <__alt_data_end+0xfffec5a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   9e63c:	0005883a 	mov	r2,zero
}
   9e640:	e6ffff04 	addi	sp,fp,-4
   9e644:	dfc00217 	ldw	ra,8(sp)
   9e648:	df000117 	ldw	fp,4(sp)
   9e64c:	dc000017 	ldw	r16,0(sp)
   9e650:	dec00304 	addi	sp,sp,12
   9e654:	f800283a 	ret

0009e658 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9e658:	defff604 	addi	sp,sp,-40
   9e65c:	dfc00915 	stw	ra,36(sp)
   9e660:	df000815 	stw	fp,32(sp)
   9e664:	df000804 	addi	fp,sp,32
   9e668:	e13ffd15 	stw	r4,-12(fp)
   9e66c:	e17ffe15 	stw	r5,-8(fp)
   9e670:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9e674:	00bfffc4 	movi	r2,-1
   9e678:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   9e67c:	00bffb44 	movi	r2,-19
   9e680:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   9e684:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9e688:	d1600e04 	addi	r5,gp,-32712
   9e68c:	e13ffd17 	ldw	r4,-12(fp)
   9e690:	009fdfc0 	call	9fdfc <alt_find_dev>
   9e694:	e0bff815 	stw	r2,-32(fp)
   9e698:	e0bff817 	ldw	r2,-32(fp)
   9e69c:	1000051e 	bne	r2,zero,9e6b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   9e6a0:	e13ffd17 	ldw	r4,-12(fp)
   9e6a4:	009fe8c0 	call	9fe8c <alt_find_file>
   9e6a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   9e6ac:	00800044 	movi	r2,1
   9e6b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9e6b4:	e0bff817 	ldw	r2,-32(fp)
   9e6b8:	10002b26 	beq	r2,zero,9e768 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   9e6bc:	e13ff817 	ldw	r4,-32(fp)
   9e6c0:	00a00140 	call	a0014 <alt_get_fd>
   9e6c4:	e0bff915 	stw	r2,-28(fp)
   9e6c8:	e0bff917 	ldw	r2,-28(fp)
   9e6cc:	1000030e 	bge	r2,zero,9e6dc <open+0x84>
    {
      status = index;
   9e6d0:	e0bff917 	ldw	r2,-28(fp)
   9e6d4:	e0bffa15 	stw	r2,-24(fp)
   9e6d8:	00002506 	br	9e770 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   9e6dc:	01400304 	movi	r5,12
   9e6e0:	e13ff917 	ldw	r4,-28(fp)
   9e6e4:	00823a00 	call	823a0 <__mulsi3>
   9e6e8:	1007883a 	mov	r3,r2
   9e6ec:	008002b4 	movhi	r2,10
   9e6f0:	1087b004 	addi	r2,r2,7872
   9e6f4:	1885883a 	add	r2,r3,r2
   9e6f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   9e6fc:	e0fffe17 	ldw	r3,-8(fp)
   9e700:	00900034 	movhi	r2,16384
   9e704:	10bfffc4 	addi	r2,r2,-1
   9e708:	1886703a 	and	r3,r3,r2
   9e70c:	e0bffc17 	ldw	r2,-16(fp)
   9e710:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9e714:	e0bffb17 	ldw	r2,-20(fp)
   9e718:	1000051e 	bne	r2,zero,9e730 <open+0xd8>
   9e71c:	e13ffc17 	ldw	r4,-16(fp)
   9e720:	009e56c0 	call	9e56c <alt_file_locked>
   9e724:	e0bffa15 	stw	r2,-24(fp)
   9e728:	e0bffa17 	ldw	r2,-24(fp)
   9e72c:	10001016 	blt	r2,zero,9e770 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9e730:	e0bff817 	ldw	r2,-32(fp)
   9e734:	10800317 	ldw	r2,12(r2)
   9e738:	10000826 	beq	r2,zero,9e75c <open+0x104>
   9e73c:	e0bff817 	ldw	r2,-32(fp)
   9e740:	10800317 	ldw	r2,12(r2)
   9e744:	e1ffff17 	ldw	r7,-4(fp)
   9e748:	e1bffe17 	ldw	r6,-8(fp)
   9e74c:	e17ffd17 	ldw	r5,-12(fp)
   9e750:	e13ffc17 	ldw	r4,-16(fp)
   9e754:	103ee83a 	callr	r2
   9e758:	00000106 	br	9e760 <open+0x108>
   9e75c:	0005883a 	mov	r2,zero
   9e760:	e0bffa15 	stw	r2,-24(fp)
   9e764:	00000206 	br	9e770 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9e768:	00bffb44 	movi	r2,-19
   9e76c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9e770:	e0bffa17 	ldw	r2,-24(fp)
   9e774:	1000090e 	bge	r2,zero,9e79c <open+0x144>
  {
    alt_release_fd (index);  
   9e778:	e13ff917 	ldw	r4,-28(fp)
   9e77c:	009e8f40 	call	9e8f4 <alt_release_fd>
    ALT_ERRNO = -status;
   9e780:	009e5300 	call	9e530 <alt_get_errno>
   9e784:	1007883a 	mov	r3,r2
   9e788:	e0bffa17 	ldw	r2,-24(fp)
   9e78c:	0085c83a 	sub	r2,zero,r2
   9e790:	18800015 	stw	r2,0(r3)
    return -1;
   9e794:	00bfffc4 	movi	r2,-1
   9e798:	00000106 	br	9e7a0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   9e79c:	e0bff917 	ldw	r2,-28(fp)
}
   9e7a0:	e037883a 	mov	sp,fp
   9e7a4:	dfc00117 	ldw	ra,4(sp)
   9e7a8:	df000017 	ldw	fp,0(sp)
   9e7ac:	dec00204 	addi	sp,sp,8
   9e7b0:	f800283a 	ret

0009e7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e7b4:	defffe04 	addi	sp,sp,-8
   9e7b8:	dfc00115 	stw	ra,4(sp)
   9e7bc:	df000015 	stw	fp,0(sp)
   9e7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9e7c4:	d0a01117 	ldw	r2,-32700(gp)
   9e7c8:	10000326 	beq	r2,zero,9e7d8 <alt_get_errno+0x24>
   9e7cc:	d0a01117 	ldw	r2,-32700(gp)
   9e7d0:	103ee83a 	callr	r2
   9e7d4:	00000106 	br	9e7dc <alt_get_errno+0x28>
   9e7d8:	d0a70f04 	addi	r2,gp,-25540
}
   9e7dc:	e037883a 	mov	sp,fp
   9e7e0:	dfc00117 	ldw	ra,4(sp)
   9e7e4:	df000017 	ldw	fp,0(sp)
   9e7e8:	dec00204 	addi	sp,sp,8
   9e7ec:	f800283a 	ret

0009e7f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   9e7f0:	defff904 	addi	sp,sp,-28
   9e7f4:	dfc00615 	stw	ra,24(sp)
   9e7f8:	df000515 	stw	fp,20(sp)
   9e7fc:	df000504 	addi	fp,sp,20
   9e800:	e13ffd15 	stw	r4,-12(fp)
   9e804:	e17ffe15 	stw	r5,-8(fp)
   9e808:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9e80c:	e0bffd17 	ldw	r2,-12(fp)
   9e810:	10000816 	blt	r2,zero,9e834 <read+0x44>
   9e814:	01400304 	movi	r5,12
   9e818:	e13ffd17 	ldw	r4,-12(fp)
   9e81c:	00823a00 	call	823a0 <__mulsi3>
   9e820:	1007883a 	mov	r3,r2
   9e824:	008002b4 	movhi	r2,10
   9e828:	1087b004 	addi	r2,r2,7872
   9e82c:	1885883a 	add	r2,r3,r2
   9e830:	00000106 	br	9e838 <read+0x48>
   9e834:	0005883a 	mov	r2,zero
   9e838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   9e83c:	e0bffb17 	ldw	r2,-20(fp)
   9e840:	10002226 	beq	r2,zero,9e8cc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   9e844:	e0bffb17 	ldw	r2,-20(fp)
   9e848:	10800217 	ldw	r2,8(r2)
   9e84c:	108000cc 	andi	r2,r2,3
   9e850:	10800060 	cmpeqi	r2,r2,1
   9e854:	1000181e 	bne	r2,zero,9e8b8 <read+0xc8>
        (fd->dev->read))
   9e858:	e0bffb17 	ldw	r2,-20(fp)
   9e85c:	10800017 	ldw	r2,0(r2)
   9e860:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   9e864:	10001426 	beq	r2,zero,9e8b8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   9e868:	e0bffb17 	ldw	r2,-20(fp)
   9e86c:	10800017 	ldw	r2,0(r2)
   9e870:	10800517 	ldw	r2,20(r2)
   9e874:	e0ffff17 	ldw	r3,-4(fp)
   9e878:	180d883a 	mov	r6,r3
   9e87c:	e17ffe17 	ldw	r5,-8(fp)
   9e880:	e13ffb17 	ldw	r4,-20(fp)
   9e884:	103ee83a 	callr	r2
   9e888:	e0bffc15 	stw	r2,-16(fp)
   9e88c:	e0bffc17 	ldw	r2,-16(fp)
   9e890:	1000070e 	bge	r2,zero,9e8b0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   9e894:	009e7b40 	call	9e7b4 <alt_get_errno>
   9e898:	1007883a 	mov	r3,r2
   9e89c:	e0bffc17 	ldw	r2,-16(fp)
   9e8a0:	0085c83a 	sub	r2,zero,r2
   9e8a4:	18800015 	stw	r2,0(r3)
          return -1;
   9e8a8:	00bfffc4 	movi	r2,-1
   9e8ac:	00000c06 	br	9e8e0 <read+0xf0>
        }
        return rval;
   9e8b0:	e0bffc17 	ldw	r2,-16(fp)
   9e8b4:	00000a06 	br	9e8e0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   9e8b8:	009e7b40 	call	9e7b4 <alt_get_errno>
   9e8bc:	1007883a 	mov	r3,r2
   9e8c0:	00800344 	movi	r2,13
   9e8c4:	18800015 	stw	r2,0(r3)
   9e8c8:	00000406 	br	9e8dc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   9e8cc:	009e7b40 	call	9e7b4 <alt_get_errno>
   9e8d0:	1007883a 	mov	r3,r2
   9e8d4:	00801444 	movi	r2,81
   9e8d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   9e8dc:	00bfffc4 	movi	r2,-1
}
   9e8e0:	e037883a 	mov	sp,fp
   9e8e4:	dfc00117 	ldw	ra,4(sp)
   9e8e8:	df000017 	ldw	fp,0(sp)
   9e8ec:	dec00204 	addi	sp,sp,8
   9e8f0:	f800283a 	ret

0009e8f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   9e8f4:	defffc04 	addi	sp,sp,-16
   9e8f8:	dfc00315 	stw	ra,12(sp)
   9e8fc:	df000215 	stw	fp,8(sp)
   9e900:	dc000115 	stw	r16,4(sp)
   9e904:	df000204 	addi	fp,sp,8
   9e908:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   9e90c:	e0bffe17 	ldw	r2,-8(fp)
   9e910:	108000d0 	cmplti	r2,r2,3
   9e914:	1000111e 	bne	r2,zero,9e95c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   9e918:	040002b4 	movhi	r16,10
   9e91c:	8407b004 	addi	r16,r16,7872
   9e920:	e0bffe17 	ldw	r2,-8(fp)
   9e924:	01400304 	movi	r5,12
   9e928:	1009883a 	mov	r4,r2
   9e92c:	00823a00 	call	823a0 <__mulsi3>
   9e930:	8085883a 	add	r2,r16,r2
   9e934:	10800204 	addi	r2,r2,8
   9e938:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   9e93c:	040002b4 	movhi	r16,10
   9e940:	8407b004 	addi	r16,r16,7872
   9e944:	e0bffe17 	ldw	r2,-8(fp)
   9e948:	01400304 	movi	r5,12
   9e94c:	1009883a 	mov	r4,r2
   9e950:	00823a00 	call	823a0 <__mulsi3>
   9e954:	8085883a 	add	r2,r16,r2
   9e958:	10000015 	stw	zero,0(r2)
  }
}
   9e95c:	0001883a 	nop
   9e960:	e6ffff04 	addi	sp,fp,-4
   9e964:	dfc00217 	ldw	ra,8(sp)
   9e968:	df000117 	ldw	fp,4(sp)
   9e96c:	dc000017 	ldw	r16,0(sp)
   9e970:	dec00304 	addi	sp,sp,12
   9e974:	f800283a 	ret

0009e978 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   9e978:	defff904 	addi	sp,sp,-28
   9e97c:	df000615 	stw	fp,24(sp)
   9e980:	df000604 	addi	fp,sp,24
   9e984:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9e988:	0005303a 	rdctl	r2,status
   9e98c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9e990:	e0fffe17 	ldw	r3,-8(fp)
   9e994:	00bfff84 	movi	r2,-2
   9e998:	1884703a 	and	r2,r3,r2
   9e99c:	1001703a 	wrctl	status,r2
  
  return context;
   9e9a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   9e9a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   9e9a8:	d0a01217 	ldw	r2,-32696(gp)
   9e9ac:	10c000c4 	addi	r3,r2,3
   9e9b0:	00bfff04 	movi	r2,-4
   9e9b4:	1884703a 	and	r2,r3,r2
   9e9b8:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   9e9bc:	d0e01217 	ldw	r3,-32696(gp)
   9e9c0:	e0bfff17 	ldw	r2,-4(fp)
   9e9c4:	1887883a 	add	r3,r3,r2
   9e9c8:	008002f4 	movhi	r2,11
   9e9cc:	10880004 	addi	r2,r2,8192
   9e9d0:	10c0062e 	bgeu	r2,r3,9e9ec <sbrk+0x74>
   9e9d4:	e0bffb17 	ldw	r2,-20(fp)
   9e9d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9e9dc:	e0bffa17 	ldw	r2,-24(fp)
   9e9e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   9e9e4:	00bfffc4 	movi	r2,-1
   9e9e8:	00000b06 	br	9ea18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   9e9ec:	d0a01217 	ldw	r2,-32696(gp)
   9e9f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   9e9f4:	d0e01217 	ldw	r3,-32696(gp)
   9e9f8:	e0bfff17 	ldw	r2,-4(fp)
   9e9fc:	1885883a 	add	r2,r3,r2
   9ea00:	d0a01215 	stw	r2,-32696(gp)
   9ea04:	e0bffb17 	ldw	r2,-20(fp)
   9ea08:	e0bffc15 	stw	r2,-16(fp)
   9ea0c:	e0bffc17 	ldw	r2,-16(fp)
   9ea10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   9ea14:	e0bffd17 	ldw	r2,-12(fp)
} 
   9ea18:	e037883a 	mov	sp,fp
   9ea1c:	df000017 	ldw	fp,0(sp)
   9ea20:	dec00104 	addi	sp,sp,4
   9ea24:	f800283a 	ret

0009ea28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9ea28:	defffe04 	addi	sp,sp,-8
   9ea2c:	dfc00115 	stw	ra,4(sp)
   9ea30:	df000015 	stw	fp,0(sp)
   9ea34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9ea38:	d0a01117 	ldw	r2,-32700(gp)
   9ea3c:	10000326 	beq	r2,zero,9ea4c <alt_get_errno+0x24>
   9ea40:	d0a01117 	ldw	r2,-32700(gp)
   9ea44:	103ee83a 	callr	r2
   9ea48:	00000106 	br	9ea50 <alt_get_errno+0x28>
   9ea4c:	d0a70f04 	addi	r2,gp,-25540
}
   9ea50:	e037883a 	mov	sp,fp
   9ea54:	dfc00117 	ldw	ra,4(sp)
   9ea58:	df000017 	ldw	fp,0(sp)
   9ea5c:	dec00204 	addi	sp,sp,8
   9ea60:	f800283a 	ret

0009ea64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   9ea64:	defff904 	addi	sp,sp,-28
   9ea68:	dfc00615 	stw	ra,24(sp)
   9ea6c:	df000515 	stw	fp,20(sp)
   9ea70:	df000504 	addi	fp,sp,20
   9ea74:	e13ffd15 	stw	r4,-12(fp)
   9ea78:	e17ffe15 	stw	r5,-8(fp)
   9ea7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9ea80:	e0bffd17 	ldw	r2,-12(fp)
   9ea84:	10000816 	blt	r2,zero,9eaa8 <write+0x44>
   9ea88:	01400304 	movi	r5,12
   9ea8c:	e13ffd17 	ldw	r4,-12(fp)
   9ea90:	00823a00 	call	823a0 <__mulsi3>
   9ea94:	1007883a 	mov	r3,r2
   9ea98:	008002b4 	movhi	r2,10
   9ea9c:	1087b004 	addi	r2,r2,7872
   9eaa0:	1885883a 	add	r2,r3,r2
   9eaa4:	00000106 	br	9eaac <write+0x48>
   9eaa8:	0005883a 	mov	r2,zero
   9eaac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   9eab0:	e0bffb17 	ldw	r2,-20(fp)
   9eab4:	10002126 	beq	r2,zero,9eb3c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   9eab8:	e0bffb17 	ldw	r2,-20(fp)
   9eabc:	10800217 	ldw	r2,8(r2)
   9eac0:	108000cc 	andi	r2,r2,3
   9eac4:	10001826 	beq	r2,zero,9eb28 <write+0xc4>
   9eac8:	e0bffb17 	ldw	r2,-20(fp)
   9eacc:	10800017 	ldw	r2,0(r2)
   9ead0:	10800617 	ldw	r2,24(r2)
   9ead4:	10001426 	beq	r2,zero,9eb28 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   9ead8:	e0bffb17 	ldw	r2,-20(fp)
   9eadc:	10800017 	ldw	r2,0(r2)
   9eae0:	10800617 	ldw	r2,24(r2)
   9eae4:	e0ffff17 	ldw	r3,-4(fp)
   9eae8:	180d883a 	mov	r6,r3
   9eaec:	e17ffe17 	ldw	r5,-8(fp)
   9eaf0:	e13ffb17 	ldw	r4,-20(fp)
   9eaf4:	103ee83a 	callr	r2
   9eaf8:	e0bffc15 	stw	r2,-16(fp)
   9eafc:	e0bffc17 	ldw	r2,-16(fp)
   9eb00:	1000070e 	bge	r2,zero,9eb20 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   9eb04:	009ea280 	call	9ea28 <alt_get_errno>
   9eb08:	1007883a 	mov	r3,r2
   9eb0c:	e0bffc17 	ldw	r2,-16(fp)
   9eb10:	0085c83a 	sub	r2,zero,r2
   9eb14:	18800015 	stw	r2,0(r3)
        return -1;
   9eb18:	00bfffc4 	movi	r2,-1
   9eb1c:	00000c06 	br	9eb50 <write+0xec>
      }
      return rval;
   9eb20:	e0bffc17 	ldw	r2,-16(fp)
   9eb24:	00000a06 	br	9eb50 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   9eb28:	009ea280 	call	9ea28 <alt_get_errno>
   9eb2c:	1007883a 	mov	r3,r2
   9eb30:	00800344 	movi	r2,13
   9eb34:	18800015 	stw	r2,0(r3)
   9eb38:	00000406 	br	9eb4c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   9eb3c:	009ea280 	call	9ea28 <alt_get_errno>
   9eb40:	1007883a 	mov	r3,r2
   9eb44:	00801444 	movi	r2,81
   9eb48:	18800015 	stw	r2,0(r3)
  }
  return -1;
   9eb4c:	00bfffc4 	movi	r2,-1
}
   9eb50:	e037883a 	mov	sp,fp
   9eb54:	dfc00117 	ldw	ra,4(sp)
   9eb58:	df000017 	ldw	fp,0(sp)
   9eb5c:	dec00204 	addi	sp,sp,8
   9eb60:	f800283a 	ret

0009eb64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   9eb64:	defffd04 	addi	sp,sp,-12
   9eb68:	dfc00215 	stw	ra,8(sp)
   9eb6c:	df000115 	stw	fp,4(sp)
   9eb70:	df000104 	addi	fp,sp,4
   9eb74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   9eb78:	d1600e04 	addi	r5,gp,-32712
   9eb7c:	e13fff17 	ldw	r4,-4(fp)
   9eb80:	009fc980 	call	9fc98 <alt_dev_llist_insert>
}
   9eb84:	e037883a 	mov	sp,fp
   9eb88:	dfc00117 	ldw	ra,4(sp)
   9eb8c:	df000017 	ldw	fp,0(sp)
   9eb90:	dec00204 	addi	sp,sp,8
   9eb94:	f800283a 	ret

0009eb98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   9eb98:	defffd04 	addi	sp,sp,-12
   9eb9c:	dfc00215 	stw	ra,8(sp)
   9eba0:	df000115 	stw	fp,4(sp)
   9eba4:	df000104 	addi	fp,sp,4
   9eba8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
   9ebac:	00a069c0 	call	a069c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   9ebb0:	00800044 	movi	r2,1
   9ebb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   9ebb8:	0001883a 	nop
   9ebbc:	e037883a 	mov	sp,fp
   9ebc0:	dfc00117 	ldw	ra,4(sp)
   9ebc4:	df000017 	ldw	fp,0(sp)
   9ebc8:	dec00204 	addi	sp,sp,8
   9ebcc:	f800283a 	ret

0009ebd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   9ebd0:	defffe04 	addi	sp,sp,-8
   9ebd4:	dfc00115 	stw	ra,4(sp)
   9ebd8:	df000015 	stw	fp,0(sp)
   9ebdc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   9ebe0:	01800184 	movi	r6,6
   9ebe4:	000b883a 	mov	r5,zero
   9ebe8:	010002b4 	movhi	r4,10
   9ebec:	21081a04 	addi	r4,r4,8296
   9ebf0:	009ed880 	call	9ed88 <altera_avalon_jtag_uart_init>
   9ebf4:	010002b4 	movhi	r4,10
   9ebf8:	21081004 	addi	r4,r4,8256
   9ebfc:	009eb640 	call	9eb64 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   9ec00:	010002b4 	movhi	r4,10
   9ec04:	210c2804 	addi	r4,r4,12448
   9ec08:	009ff940 	call	9ff94 <alt_fs_reg>
}
   9ec0c:	0001883a 	nop
   9ec10:	e037883a 	mov	sp,fp
   9ec14:	dfc00117 	ldw	ra,4(sp)
   9ec18:	df000017 	ldw	fp,0(sp)
   9ec1c:	dec00204 	addi	sp,sp,8
   9ec20:	f800283a 	ret

0009ec24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   9ec24:	defffa04 	addi	sp,sp,-24
   9ec28:	dfc00515 	stw	ra,20(sp)
   9ec2c:	df000415 	stw	fp,16(sp)
   9ec30:	df000404 	addi	fp,sp,16
   9ec34:	e13ffd15 	stw	r4,-12(fp)
   9ec38:	e17ffe15 	stw	r5,-8(fp)
   9ec3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9ec40:	e0bffd17 	ldw	r2,-12(fp)
   9ec44:	10800017 	ldw	r2,0(r2)
   9ec48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   9ec4c:	e0bffc17 	ldw	r2,-16(fp)
   9ec50:	10c00a04 	addi	r3,r2,40
   9ec54:	e0bffd17 	ldw	r2,-12(fp)
   9ec58:	10800217 	ldw	r2,8(r2)
   9ec5c:	100f883a 	mov	r7,r2
   9ec60:	e1bfff17 	ldw	r6,-4(fp)
   9ec64:	e17ffe17 	ldw	r5,-8(fp)
   9ec68:	1809883a 	mov	r4,r3
   9ec6c:	009f24c0 	call	9f24c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   9ec70:	e037883a 	mov	sp,fp
   9ec74:	dfc00117 	ldw	ra,4(sp)
   9ec78:	df000017 	ldw	fp,0(sp)
   9ec7c:	dec00204 	addi	sp,sp,8
   9ec80:	f800283a 	ret

0009ec84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   9ec84:	defffa04 	addi	sp,sp,-24
   9ec88:	dfc00515 	stw	ra,20(sp)
   9ec8c:	df000415 	stw	fp,16(sp)
   9ec90:	df000404 	addi	fp,sp,16
   9ec94:	e13ffd15 	stw	r4,-12(fp)
   9ec98:	e17ffe15 	stw	r5,-8(fp)
   9ec9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9eca0:	e0bffd17 	ldw	r2,-12(fp)
   9eca4:	10800017 	ldw	r2,0(r2)
   9eca8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   9ecac:	e0bffc17 	ldw	r2,-16(fp)
   9ecb0:	10c00a04 	addi	r3,r2,40
   9ecb4:	e0bffd17 	ldw	r2,-12(fp)
   9ecb8:	10800217 	ldw	r2,8(r2)
   9ecbc:	100f883a 	mov	r7,r2
   9ecc0:	e1bfff17 	ldw	r6,-4(fp)
   9ecc4:	e17ffe17 	ldw	r5,-8(fp)
   9ecc8:	1809883a 	mov	r4,r3
   9eccc:	009f4680 	call	9f468 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9ecd0:	e037883a 	mov	sp,fp
   9ecd4:	dfc00117 	ldw	ra,4(sp)
   9ecd8:	df000017 	ldw	fp,0(sp)
   9ecdc:	dec00204 	addi	sp,sp,8
   9ece0:	f800283a 	ret

0009ece4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   9ece4:	defffc04 	addi	sp,sp,-16
   9ece8:	dfc00315 	stw	ra,12(sp)
   9ecec:	df000215 	stw	fp,8(sp)
   9ecf0:	df000204 	addi	fp,sp,8
   9ecf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9ecf8:	e0bfff17 	ldw	r2,-4(fp)
   9ecfc:	10800017 	ldw	r2,0(r2)
   9ed00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   9ed04:	e0bffe17 	ldw	r2,-8(fp)
   9ed08:	10c00a04 	addi	r3,r2,40
   9ed0c:	e0bfff17 	ldw	r2,-4(fp)
   9ed10:	10800217 	ldw	r2,8(r2)
   9ed14:	100b883a 	mov	r5,r2
   9ed18:	1809883a 	mov	r4,r3
   9ed1c:	009f0f40 	call	9f0f4 <altera_avalon_jtag_uart_close>
}
   9ed20:	e037883a 	mov	sp,fp
   9ed24:	dfc00117 	ldw	ra,4(sp)
   9ed28:	df000017 	ldw	fp,0(sp)
   9ed2c:	dec00204 	addi	sp,sp,8
   9ed30:	f800283a 	ret

0009ed34 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   9ed34:	defffa04 	addi	sp,sp,-24
   9ed38:	dfc00515 	stw	ra,20(sp)
   9ed3c:	df000415 	stw	fp,16(sp)
   9ed40:	df000404 	addi	fp,sp,16
   9ed44:	e13ffd15 	stw	r4,-12(fp)
   9ed48:	e17ffe15 	stw	r5,-8(fp)
   9ed4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   9ed50:	e0bffd17 	ldw	r2,-12(fp)
   9ed54:	10800017 	ldw	r2,0(r2)
   9ed58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   9ed5c:	e0bffc17 	ldw	r2,-16(fp)
   9ed60:	10800a04 	addi	r2,r2,40
   9ed64:	e1bfff17 	ldw	r6,-4(fp)
   9ed68:	e17ffe17 	ldw	r5,-8(fp)
   9ed6c:	1009883a 	mov	r4,r2
   9ed70:	009f15c0 	call	9f15c <altera_avalon_jtag_uart_ioctl>
}
   9ed74:	e037883a 	mov	sp,fp
   9ed78:	dfc00117 	ldw	ra,4(sp)
   9ed7c:	df000017 	ldw	fp,0(sp)
   9ed80:	dec00204 	addi	sp,sp,8
   9ed84:	f800283a 	ret

0009ed88 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   9ed88:	defffa04 	addi	sp,sp,-24
   9ed8c:	dfc00515 	stw	ra,20(sp)
   9ed90:	df000415 	stw	fp,16(sp)
   9ed94:	df000404 	addi	fp,sp,16
   9ed98:	e13ffd15 	stw	r4,-12(fp)
   9ed9c:	e17ffe15 	stw	r5,-8(fp)
   9eda0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9eda4:	e0bffd17 	ldw	r2,-12(fp)
   9eda8:	00c00044 	movi	r3,1
   9edac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9edb0:	e0bffd17 	ldw	r2,-12(fp)
   9edb4:	10800017 	ldw	r2,0(r2)
   9edb8:	10800104 	addi	r2,r2,4
   9edbc:	1007883a 	mov	r3,r2
   9edc0:	e0bffd17 	ldw	r2,-12(fp)
   9edc4:	10800817 	ldw	r2,32(r2)
   9edc8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   9edcc:	e0bffe17 	ldw	r2,-8(fp)
   9edd0:	e0ffff17 	ldw	r3,-4(fp)
   9edd4:	d8000015 	stw	zero,0(sp)
   9edd8:	e1fffd17 	ldw	r7,-12(fp)
   9eddc:	018002b4 	movhi	r6,10
   9ede0:	31bb9204 	addi	r6,r6,-4536
   9ede4:	180b883a 	mov	r5,r3
   9ede8:	1009883a 	mov	r4,r2
   9edec:	00a00f80 	call	a00f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   9edf0:	e0bffd17 	ldw	r2,-12(fp)
   9edf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   9edf8:	e0bffd17 	ldw	r2,-12(fp)
   9edfc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9ee00:	d0e71c17 	ldw	r3,-25488(gp)
   9ee04:	e1fffd17 	ldw	r7,-12(fp)
   9ee08:	018002b4 	movhi	r6,10
   9ee0c:	31bc1504 	addi	r6,r6,-4012
   9ee10:	180b883a 	mov	r5,r3
   9ee14:	1009883a 	mov	r4,r2
   9ee18:	009fb100 	call	9fb10 <alt_alarm_start>
   9ee1c:	1000040e 	bge	r2,zero,9ee30 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9ee20:	e0fffd17 	ldw	r3,-12(fp)
   9ee24:	00a00034 	movhi	r2,32768
   9ee28:	10bfffc4 	addi	r2,r2,-1
   9ee2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   9ee30:	0001883a 	nop
   9ee34:	e037883a 	mov	sp,fp
   9ee38:	dfc00117 	ldw	ra,4(sp)
   9ee3c:	df000017 	ldw	fp,0(sp)
   9ee40:	dec00204 	addi	sp,sp,8
   9ee44:	f800283a 	ret

0009ee48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   9ee48:	defff804 	addi	sp,sp,-32
   9ee4c:	df000715 	stw	fp,28(sp)
   9ee50:	df000704 	addi	fp,sp,28
   9ee54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   9ee58:	e0bfff17 	ldw	r2,-4(fp)
   9ee5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   9ee60:	e0bffb17 	ldw	r2,-20(fp)
   9ee64:	10800017 	ldw	r2,0(r2)
   9ee68:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9ee6c:	e0bffc17 	ldw	r2,-16(fp)
   9ee70:	10800104 	addi	r2,r2,4
   9ee74:	10800037 	ldwio	r2,0(r2)
   9ee78:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9ee7c:	e0bffd17 	ldw	r2,-12(fp)
   9ee80:	1080c00c 	andi	r2,r2,768
   9ee84:	10006d26 	beq	r2,zero,9f03c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   9ee88:	e0bffd17 	ldw	r2,-12(fp)
   9ee8c:	1080400c 	andi	r2,r2,256
   9ee90:	10003526 	beq	r2,zero,9ef68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   9ee94:	00800074 	movhi	r2,1
   9ee98:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9ee9c:	e0bffb17 	ldw	r2,-20(fp)
   9eea0:	10800a17 	ldw	r2,40(r2)
   9eea4:	10800044 	addi	r2,r2,1
   9eea8:	1081ffcc 	andi	r2,r2,2047
   9eeac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   9eeb0:	e0bffb17 	ldw	r2,-20(fp)
   9eeb4:	10c00b17 	ldw	r3,44(r2)
   9eeb8:	e0bffe17 	ldw	r2,-8(fp)
   9eebc:	18801526 	beq	r3,r2,9ef14 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   9eec0:	e0bffc17 	ldw	r2,-16(fp)
   9eec4:	10800037 	ldwio	r2,0(r2)
   9eec8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   9eecc:	e0bff917 	ldw	r2,-28(fp)
   9eed0:	10a0000c 	andi	r2,r2,32768
   9eed4:	10001126 	beq	r2,zero,9ef1c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   9eed8:	e0bffb17 	ldw	r2,-20(fp)
   9eedc:	10800a17 	ldw	r2,40(r2)
   9eee0:	e0fff917 	ldw	r3,-28(fp)
   9eee4:	1809883a 	mov	r4,r3
   9eee8:	e0fffb17 	ldw	r3,-20(fp)
   9eeec:	1885883a 	add	r2,r3,r2
   9eef0:	10800e04 	addi	r2,r2,56
   9eef4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9eef8:	e0bffb17 	ldw	r2,-20(fp)
   9eefc:	10800a17 	ldw	r2,40(r2)
   9ef00:	10800044 	addi	r2,r2,1
   9ef04:	10c1ffcc 	andi	r3,r2,2047
   9ef08:	e0bffb17 	ldw	r2,-20(fp)
   9ef0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   9ef10:	003fe206 	br	9ee9c <__alt_data_end+0xfffece9c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   9ef14:	0001883a 	nop
   9ef18:	00000106 	br	9ef20 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   9ef1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9ef20:	e0bff917 	ldw	r2,-28(fp)
   9ef24:	10bfffec 	andhi	r2,r2,65535
   9ef28:	10000f26 	beq	r2,zero,9ef68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9ef2c:	e0bffb17 	ldw	r2,-20(fp)
   9ef30:	10c00817 	ldw	r3,32(r2)
   9ef34:	00bfff84 	movi	r2,-2
   9ef38:	1886703a 	and	r3,r3,r2
   9ef3c:	e0bffb17 	ldw	r2,-20(fp)
   9ef40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9ef44:	e0bffc17 	ldw	r2,-16(fp)
   9ef48:	10800104 	addi	r2,r2,4
   9ef4c:	1007883a 	mov	r3,r2
   9ef50:	e0bffb17 	ldw	r2,-20(fp)
   9ef54:	10800817 	ldw	r2,32(r2)
   9ef58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9ef5c:	e0bffc17 	ldw	r2,-16(fp)
   9ef60:	10800104 	addi	r2,r2,4
   9ef64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   9ef68:	e0bffd17 	ldw	r2,-12(fp)
   9ef6c:	1080800c 	andi	r2,r2,512
   9ef70:	103fbe26 	beq	r2,zero,9ee6c <__alt_data_end+0xfffece6c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9ef74:	e0bffd17 	ldw	r2,-12(fp)
   9ef78:	1004d43a 	srli	r2,r2,16
   9ef7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   9ef80:	00001406 	br	9efd4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9ef84:	e0bffc17 	ldw	r2,-16(fp)
   9ef88:	e0fffb17 	ldw	r3,-20(fp)
   9ef8c:	18c00d17 	ldw	r3,52(r3)
   9ef90:	e13ffb17 	ldw	r4,-20(fp)
   9ef94:	20c7883a 	add	r3,r4,r3
   9ef98:	18c20e04 	addi	r3,r3,2104
   9ef9c:	18c00003 	ldbu	r3,0(r3)
   9efa0:	18c03fcc 	andi	r3,r3,255
   9efa4:	18c0201c 	xori	r3,r3,128
   9efa8:	18ffe004 	addi	r3,r3,-128
   9efac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9efb0:	e0bffb17 	ldw	r2,-20(fp)
   9efb4:	10800d17 	ldw	r2,52(r2)
   9efb8:	10800044 	addi	r2,r2,1
   9efbc:	10c1ffcc 	andi	r3,r2,2047
   9efc0:	e0bffb17 	ldw	r2,-20(fp)
   9efc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   9efc8:	e0bffa17 	ldw	r2,-24(fp)
   9efcc:	10bfffc4 	addi	r2,r2,-1
   9efd0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9efd4:	e0bffa17 	ldw	r2,-24(fp)
   9efd8:	10000526 	beq	r2,zero,9eff0 <altera_avalon_jtag_uart_irq+0x1a8>
   9efdc:	e0bffb17 	ldw	r2,-20(fp)
   9efe0:	10c00d17 	ldw	r3,52(r2)
   9efe4:	e0bffb17 	ldw	r2,-20(fp)
   9efe8:	10800c17 	ldw	r2,48(r2)
   9efec:	18bfe51e 	bne	r3,r2,9ef84 <__alt_data_end+0xfffecf84>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   9eff0:	e0bffa17 	ldw	r2,-24(fp)
   9eff4:	103f9d26 	beq	r2,zero,9ee6c <__alt_data_end+0xfffece6c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9eff8:	e0bffb17 	ldw	r2,-20(fp)
   9effc:	10c00817 	ldw	r3,32(r2)
   9f000:	00bfff44 	movi	r2,-3
   9f004:	1886703a 	and	r3,r3,r2
   9f008:	e0bffb17 	ldw	r2,-20(fp)
   9f00c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9f010:	e0bffb17 	ldw	r2,-20(fp)
   9f014:	10800017 	ldw	r2,0(r2)
   9f018:	10800104 	addi	r2,r2,4
   9f01c:	1007883a 	mov	r3,r2
   9f020:	e0bffb17 	ldw	r2,-20(fp)
   9f024:	10800817 	ldw	r2,32(r2)
   9f028:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9f02c:	e0bffc17 	ldw	r2,-16(fp)
   9f030:	10800104 	addi	r2,r2,4
   9f034:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   9f038:	003f8c06 	br	9ee6c <__alt_data_end+0xfffece6c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   9f03c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   9f040:	0001883a 	nop
   9f044:	e037883a 	mov	sp,fp
   9f048:	df000017 	ldw	fp,0(sp)
   9f04c:	dec00104 	addi	sp,sp,4
   9f050:	f800283a 	ret

0009f054 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   9f054:	defff804 	addi	sp,sp,-32
   9f058:	df000715 	stw	fp,28(sp)
   9f05c:	df000704 	addi	fp,sp,28
   9f060:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   9f064:	e0bffb17 	ldw	r2,-20(fp)
   9f068:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   9f06c:	e0bff917 	ldw	r2,-28(fp)
   9f070:	10800017 	ldw	r2,0(r2)
   9f074:	10800104 	addi	r2,r2,4
   9f078:	10800037 	ldwio	r2,0(r2)
   9f07c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   9f080:	e0bffa17 	ldw	r2,-24(fp)
   9f084:	1081000c 	andi	r2,r2,1024
   9f088:	10000b26 	beq	r2,zero,9f0b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   9f08c:	e0bff917 	ldw	r2,-28(fp)
   9f090:	10800017 	ldw	r2,0(r2)
   9f094:	10800104 	addi	r2,r2,4
   9f098:	1007883a 	mov	r3,r2
   9f09c:	e0bff917 	ldw	r2,-28(fp)
   9f0a0:	10800817 	ldw	r2,32(r2)
   9f0a4:	10810014 	ori	r2,r2,1024
   9f0a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   9f0ac:	e0bff917 	ldw	r2,-28(fp)
   9f0b0:	10000915 	stw	zero,36(r2)
   9f0b4:	00000a06 	br	9f0e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   9f0b8:	e0bff917 	ldw	r2,-28(fp)
   9f0bc:	10c00917 	ldw	r3,36(r2)
   9f0c0:	00a00034 	movhi	r2,32768
   9f0c4:	10bfff04 	addi	r2,r2,-4
   9f0c8:	10c00536 	bltu	r2,r3,9f0e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   9f0cc:	e0bff917 	ldw	r2,-28(fp)
   9f0d0:	10800917 	ldw	r2,36(r2)
   9f0d4:	10c00044 	addi	r3,r2,1
   9f0d8:	e0bff917 	ldw	r2,-28(fp)
   9f0dc:	10c00915 	stw	r3,36(r2)
   9f0e0:	d0a71c17 	ldw	r2,-25488(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   9f0e4:	e037883a 	mov	sp,fp
   9f0e8:	df000017 	ldw	fp,0(sp)
   9f0ec:	dec00104 	addi	sp,sp,4
   9f0f0:	f800283a 	ret

0009f0f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   9f0f4:	defffd04 	addi	sp,sp,-12
   9f0f8:	df000215 	stw	fp,8(sp)
   9f0fc:	df000204 	addi	fp,sp,8
   9f100:	e13ffe15 	stw	r4,-8(fp)
   9f104:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9f108:	00000506 	br	9f120 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   9f10c:	e0bfff17 	ldw	r2,-4(fp)
   9f110:	1090000c 	andi	r2,r2,16384
   9f114:	10000226 	beq	r2,zero,9f120 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   9f118:	00bffd44 	movi	r2,-11
   9f11c:	00000b06 	br	9f14c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9f120:	e0bffe17 	ldw	r2,-8(fp)
   9f124:	10c00d17 	ldw	r3,52(r2)
   9f128:	e0bffe17 	ldw	r2,-8(fp)
   9f12c:	10800c17 	ldw	r2,48(r2)
   9f130:	18800526 	beq	r3,r2,9f148 <altera_avalon_jtag_uart_close+0x54>
   9f134:	e0bffe17 	ldw	r2,-8(fp)
   9f138:	10c00917 	ldw	r3,36(r2)
   9f13c:	e0bffe17 	ldw	r2,-8(fp)
   9f140:	10800117 	ldw	r2,4(r2)
   9f144:	18bff136 	bltu	r3,r2,9f10c <__alt_data_end+0xfffed10c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   9f148:	0005883a 	mov	r2,zero
}
   9f14c:	e037883a 	mov	sp,fp
   9f150:	df000017 	ldw	fp,0(sp)
   9f154:	dec00104 	addi	sp,sp,4
   9f158:	f800283a 	ret

0009f15c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   9f15c:	defffa04 	addi	sp,sp,-24
   9f160:	df000515 	stw	fp,20(sp)
   9f164:	df000504 	addi	fp,sp,20
   9f168:	e13ffd15 	stw	r4,-12(fp)
   9f16c:	e17ffe15 	stw	r5,-8(fp)
   9f170:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   9f174:	00bff9c4 	movi	r2,-25
   9f178:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   9f17c:	e0bffe17 	ldw	r2,-8(fp)
   9f180:	10da8060 	cmpeqi	r3,r2,27137
   9f184:	1800031e 	bne	r3,zero,9f194 <altera_avalon_jtag_uart_ioctl+0x38>
   9f188:	109a80a0 	cmpeqi	r2,r2,27138
   9f18c:	1000181e 	bne	r2,zero,9f1f0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   9f190:	00002906 	br	9f238 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9f194:	e0bffd17 	ldw	r2,-12(fp)
   9f198:	10c00117 	ldw	r3,4(r2)
   9f19c:	00a00034 	movhi	r2,32768
   9f1a0:	10bfffc4 	addi	r2,r2,-1
   9f1a4:	18802126 	beq	r3,r2,9f22c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   9f1a8:	e0bfff17 	ldw	r2,-4(fp)
   9f1ac:	10800017 	ldw	r2,0(r2)
   9f1b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9f1b4:	e0bffc17 	ldw	r2,-16(fp)
   9f1b8:	10800090 	cmplti	r2,r2,2
   9f1bc:	1000061e 	bne	r2,zero,9f1d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   9f1c0:	e0fffc17 	ldw	r3,-16(fp)
   9f1c4:	00a00034 	movhi	r2,32768
   9f1c8:	10bfffc4 	addi	r2,r2,-1
   9f1cc:	18800226 	beq	r3,r2,9f1d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   9f1d0:	e0bffc17 	ldw	r2,-16(fp)
   9f1d4:	00000206 	br	9f1e0 <altera_avalon_jtag_uart_ioctl+0x84>
   9f1d8:	00a00034 	movhi	r2,32768
   9f1dc:	10bfff84 	addi	r2,r2,-2
   9f1e0:	e0fffd17 	ldw	r3,-12(fp)
   9f1e4:	18800115 	stw	r2,4(r3)
      rc = 0;
   9f1e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9f1ec:	00000f06 	br	9f22c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9f1f0:	e0bffd17 	ldw	r2,-12(fp)
   9f1f4:	10c00117 	ldw	r3,4(r2)
   9f1f8:	00a00034 	movhi	r2,32768
   9f1fc:	10bfffc4 	addi	r2,r2,-1
   9f200:	18800c26 	beq	r3,r2,9f234 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9f204:	e0bffd17 	ldw	r2,-12(fp)
   9f208:	10c00917 	ldw	r3,36(r2)
   9f20c:	e0bffd17 	ldw	r2,-12(fp)
   9f210:	10800117 	ldw	r2,4(r2)
   9f214:	1885803a 	cmpltu	r2,r3,r2
   9f218:	10c03fcc 	andi	r3,r2,255
   9f21c:	e0bfff17 	ldw	r2,-4(fp)
   9f220:	10c00015 	stw	r3,0(r2)
      rc = 0;
   9f224:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   9f228:	00000206 	br	9f234 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   9f22c:	0001883a 	nop
   9f230:	00000106 	br	9f238 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   9f234:	0001883a 	nop

  default:
    break;
  }

  return rc;
   9f238:	e0bffb17 	ldw	r2,-20(fp)
}
   9f23c:	e037883a 	mov	sp,fp
   9f240:	df000017 	ldw	fp,0(sp)
   9f244:	dec00104 	addi	sp,sp,4
   9f248:	f800283a 	ret

0009f24c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   9f24c:	defff304 	addi	sp,sp,-52
   9f250:	dfc00c15 	stw	ra,48(sp)
   9f254:	df000b15 	stw	fp,44(sp)
   9f258:	df000b04 	addi	fp,sp,44
   9f25c:	e13ffc15 	stw	r4,-16(fp)
   9f260:	e17ffd15 	stw	r5,-12(fp)
   9f264:	e1bffe15 	stw	r6,-8(fp)
   9f268:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   9f26c:	e0bffd17 	ldw	r2,-12(fp)
   9f270:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9f274:	00004706 	br	9f394 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   9f278:	e0bffc17 	ldw	r2,-16(fp)
   9f27c:	10800a17 	ldw	r2,40(r2)
   9f280:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   9f284:	e0bffc17 	ldw	r2,-16(fp)
   9f288:	10800b17 	ldw	r2,44(r2)
   9f28c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   9f290:	e0fff717 	ldw	r3,-36(fp)
   9f294:	e0bff817 	ldw	r2,-32(fp)
   9f298:	18800536 	bltu	r3,r2,9f2b0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   9f29c:	e0fff717 	ldw	r3,-36(fp)
   9f2a0:	e0bff817 	ldw	r2,-32(fp)
   9f2a4:	1885c83a 	sub	r2,r3,r2
   9f2a8:	e0bff615 	stw	r2,-40(fp)
   9f2ac:	00000406 	br	9f2c0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9f2b0:	00c20004 	movi	r3,2048
   9f2b4:	e0bff817 	ldw	r2,-32(fp)
   9f2b8:	1885c83a 	sub	r2,r3,r2
   9f2bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9f2c0:	e0bff617 	ldw	r2,-40(fp)
   9f2c4:	10001e26 	beq	r2,zero,9f340 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   9f2c8:	e0fffe17 	ldw	r3,-8(fp)
   9f2cc:	e0bff617 	ldw	r2,-40(fp)
   9f2d0:	1880022e 	bgeu	r3,r2,9f2dc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   9f2d4:	e0bffe17 	ldw	r2,-8(fp)
   9f2d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   9f2dc:	e0bffc17 	ldw	r2,-16(fp)
   9f2e0:	10c00e04 	addi	r3,r2,56
   9f2e4:	e0bff817 	ldw	r2,-32(fp)
   9f2e8:	1885883a 	add	r2,r3,r2
   9f2ec:	e1bff617 	ldw	r6,-40(fp)
   9f2f0:	100b883a 	mov	r5,r2
   9f2f4:	e13ff517 	ldw	r4,-44(fp)
   9f2f8:	009069c0 	call	9069c <memcpy>
      ptr   += n;
   9f2fc:	e0fff517 	ldw	r3,-44(fp)
   9f300:	e0bff617 	ldw	r2,-40(fp)
   9f304:	1885883a 	add	r2,r3,r2
   9f308:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   9f30c:	e0fffe17 	ldw	r3,-8(fp)
   9f310:	e0bff617 	ldw	r2,-40(fp)
   9f314:	1885c83a 	sub	r2,r3,r2
   9f318:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9f31c:	e0fff817 	ldw	r3,-32(fp)
   9f320:	e0bff617 	ldw	r2,-40(fp)
   9f324:	1885883a 	add	r2,r3,r2
   9f328:	10c1ffcc 	andi	r3,r2,2047
   9f32c:	e0bffc17 	ldw	r2,-16(fp)
   9f330:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   9f334:	e0bffe17 	ldw	r2,-8(fp)
   9f338:	00bfcf16 	blt	zero,r2,9f278 <__alt_data_end+0xfffed278>
   9f33c:	00000106 	br	9f344 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   9f340:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   9f344:	e0fff517 	ldw	r3,-44(fp)
   9f348:	e0bffd17 	ldw	r2,-12(fp)
   9f34c:	1880141e 	bne	r3,r2,9f3a0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9f350:	e0bfff17 	ldw	r2,-4(fp)
   9f354:	1090000c 	andi	r2,r2,16384
   9f358:	1000131e 	bne	r2,zero,9f3a8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   9f35c:	0001883a 	nop
   9f360:	e0bffc17 	ldw	r2,-16(fp)
   9f364:	10c00a17 	ldw	r3,40(r2)
   9f368:	e0bff717 	ldw	r2,-36(fp)
   9f36c:	1880051e 	bne	r3,r2,9f384 <altera_avalon_jtag_uart_read+0x138>
   9f370:	e0bffc17 	ldw	r2,-16(fp)
   9f374:	10c00917 	ldw	r3,36(r2)
   9f378:	e0bffc17 	ldw	r2,-16(fp)
   9f37c:	10800117 	ldw	r2,4(r2)
   9f380:	18bff736 	bltu	r3,r2,9f360 <__alt_data_end+0xfffed360>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9f384:	e0bffc17 	ldw	r2,-16(fp)
   9f388:	10c00a17 	ldw	r3,40(r2)
   9f38c:	e0bff717 	ldw	r2,-36(fp)
   9f390:	18800726 	beq	r3,r2,9f3b0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9f394:	e0bffe17 	ldw	r2,-8(fp)
   9f398:	00bfb716 	blt	zero,r2,9f278 <__alt_data_end+0xfffed278>
   9f39c:	00000506 	br	9f3b4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   9f3a0:	0001883a 	nop
   9f3a4:	00000306 	br	9f3b4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   9f3a8:	0001883a 	nop
   9f3ac:	00000106 	br	9f3b4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   9f3b0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   9f3b4:	e0fff517 	ldw	r3,-44(fp)
   9f3b8:	e0bffd17 	ldw	r2,-12(fp)
   9f3bc:	18801826 	beq	r3,r2,9f420 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9f3c0:	0005303a 	rdctl	r2,status
   9f3c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9f3c8:	e0fffb17 	ldw	r3,-20(fp)
   9f3cc:	00bfff84 	movi	r2,-2
   9f3d0:	1884703a 	and	r2,r3,r2
   9f3d4:	1001703a 	wrctl	status,r2
  
  return context;
   9f3d8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   9f3dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9f3e0:	e0bffc17 	ldw	r2,-16(fp)
   9f3e4:	10800817 	ldw	r2,32(r2)
   9f3e8:	10c00054 	ori	r3,r2,1
   9f3ec:	e0bffc17 	ldw	r2,-16(fp)
   9f3f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9f3f4:	e0bffc17 	ldw	r2,-16(fp)
   9f3f8:	10800017 	ldw	r2,0(r2)
   9f3fc:	10800104 	addi	r2,r2,4
   9f400:	1007883a 	mov	r3,r2
   9f404:	e0bffc17 	ldw	r2,-16(fp)
   9f408:	10800817 	ldw	r2,32(r2)
   9f40c:	18800035 	stwio	r2,0(r3)
   9f410:	e0bffa17 	ldw	r2,-24(fp)
   9f414:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9f418:	e0bff917 	ldw	r2,-28(fp)
   9f41c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9f420:	e0fff517 	ldw	r3,-44(fp)
   9f424:	e0bffd17 	ldw	r2,-12(fp)
   9f428:	18800426 	beq	r3,r2,9f43c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   9f42c:	e0fff517 	ldw	r3,-44(fp)
   9f430:	e0bffd17 	ldw	r2,-12(fp)
   9f434:	1885c83a 	sub	r2,r3,r2
   9f438:	00000606 	br	9f454 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   9f43c:	e0bfff17 	ldw	r2,-4(fp)
   9f440:	1090000c 	andi	r2,r2,16384
   9f444:	10000226 	beq	r2,zero,9f450 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   9f448:	00bffd44 	movi	r2,-11
   9f44c:	00000106 	br	9f454 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   9f450:	00bffec4 	movi	r2,-5
}
   9f454:	e037883a 	mov	sp,fp
   9f458:	dfc00117 	ldw	ra,4(sp)
   9f45c:	df000017 	ldw	fp,0(sp)
   9f460:	dec00204 	addi	sp,sp,8
   9f464:	f800283a 	ret

0009f468 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   9f468:	defff304 	addi	sp,sp,-52
   9f46c:	dfc00c15 	stw	ra,48(sp)
   9f470:	df000b15 	stw	fp,44(sp)
   9f474:	df000b04 	addi	fp,sp,44
   9f478:	e13ffc15 	stw	r4,-16(fp)
   9f47c:	e17ffd15 	stw	r5,-12(fp)
   9f480:	e1bffe15 	stw	r6,-8(fp)
   9f484:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9f488:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   9f48c:	e0bffd17 	ldw	r2,-12(fp)
   9f490:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9f494:	00003706 	br	9f574 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9f498:	e0bffc17 	ldw	r2,-16(fp)
   9f49c:	10800c17 	ldw	r2,48(r2)
   9f4a0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   9f4a4:	e0bffc17 	ldw	r2,-16(fp)
   9f4a8:	10800d17 	ldw	r2,52(r2)
   9f4ac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   9f4b0:	e0fff917 	ldw	r3,-28(fp)
   9f4b4:	e0bff517 	ldw	r2,-44(fp)
   9f4b8:	1880062e 	bgeu	r3,r2,9f4d4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   9f4bc:	e0fff517 	ldw	r3,-44(fp)
   9f4c0:	e0bff917 	ldw	r2,-28(fp)
   9f4c4:	1885c83a 	sub	r2,r3,r2
   9f4c8:	10bfffc4 	addi	r2,r2,-1
   9f4cc:	e0bff615 	stw	r2,-40(fp)
   9f4d0:	00000b06 	br	9f500 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   9f4d4:	e0bff517 	ldw	r2,-44(fp)
   9f4d8:	10000526 	beq	r2,zero,9f4f0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9f4dc:	00c20004 	movi	r3,2048
   9f4e0:	e0bff917 	ldw	r2,-28(fp)
   9f4e4:	1885c83a 	sub	r2,r3,r2
   9f4e8:	e0bff615 	stw	r2,-40(fp)
   9f4ec:	00000406 	br	9f500 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9f4f0:	00c1ffc4 	movi	r3,2047
   9f4f4:	e0bff917 	ldw	r2,-28(fp)
   9f4f8:	1885c83a 	sub	r2,r3,r2
   9f4fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9f500:	e0bff617 	ldw	r2,-40(fp)
   9f504:	10001e26 	beq	r2,zero,9f580 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   9f508:	e0fffe17 	ldw	r3,-8(fp)
   9f50c:	e0bff617 	ldw	r2,-40(fp)
   9f510:	1880022e 	bgeu	r3,r2,9f51c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   9f514:	e0bffe17 	ldw	r2,-8(fp)
   9f518:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   9f51c:	e0bffc17 	ldw	r2,-16(fp)
   9f520:	10c20e04 	addi	r3,r2,2104
   9f524:	e0bff917 	ldw	r2,-28(fp)
   9f528:	1885883a 	add	r2,r3,r2
   9f52c:	e1bff617 	ldw	r6,-40(fp)
   9f530:	e17ffd17 	ldw	r5,-12(fp)
   9f534:	1009883a 	mov	r4,r2
   9f538:	009069c0 	call	9069c <memcpy>
      ptr   += n;
   9f53c:	e0fffd17 	ldw	r3,-12(fp)
   9f540:	e0bff617 	ldw	r2,-40(fp)
   9f544:	1885883a 	add	r2,r3,r2
   9f548:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   9f54c:	e0fffe17 	ldw	r3,-8(fp)
   9f550:	e0bff617 	ldw	r2,-40(fp)
   9f554:	1885c83a 	sub	r2,r3,r2
   9f558:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9f55c:	e0fff917 	ldw	r3,-28(fp)
   9f560:	e0bff617 	ldw	r2,-40(fp)
   9f564:	1885883a 	add	r2,r3,r2
   9f568:	10c1ffcc 	andi	r3,r2,2047
   9f56c:	e0bffc17 	ldw	r2,-16(fp)
   9f570:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9f574:	e0bffe17 	ldw	r2,-8(fp)
   9f578:	00bfc716 	blt	zero,r2,9f498 <__alt_data_end+0xfffed498>
   9f57c:	00000106 	br	9f584 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   9f580:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9f584:	0005303a 	rdctl	r2,status
   9f588:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9f58c:	e0fffb17 	ldw	r3,-20(fp)
   9f590:	00bfff84 	movi	r2,-2
   9f594:	1884703a 	and	r2,r3,r2
   9f598:	1001703a 	wrctl	status,r2
  
  return context;
   9f59c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   9f5a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9f5a4:	e0bffc17 	ldw	r2,-16(fp)
   9f5a8:	10800817 	ldw	r2,32(r2)
   9f5ac:	10c00094 	ori	r3,r2,2
   9f5b0:	e0bffc17 	ldw	r2,-16(fp)
   9f5b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9f5b8:	e0bffc17 	ldw	r2,-16(fp)
   9f5bc:	10800017 	ldw	r2,0(r2)
   9f5c0:	10800104 	addi	r2,r2,4
   9f5c4:	1007883a 	mov	r3,r2
   9f5c8:	e0bffc17 	ldw	r2,-16(fp)
   9f5cc:	10800817 	ldw	r2,32(r2)
   9f5d0:	18800035 	stwio	r2,0(r3)
   9f5d4:	e0bffa17 	ldw	r2,-24(fp)
   9f5d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9f5dc:	e0bff817 	ldw	r2,-32(fp)
   9f5e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9f5e4:	e0bffe17 	ldw	r2,-8(fp)
   9f5e8:	0080100e 	bge	zero,r2,9f62c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   9f5ec:	e0bfff17 	ldw	r2,-4(fp)
   9f5f0:	1090000c 	andi	r2,r2,16384
   9f5f4:	1000101e 	bne	r2,zero,9f638 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   9f5f8:	0001883a 	nop
   9f5fc:	e0bffc17 	ldw	r2,-16(fp)
   9f600:	10c00d17 	ldw	r3,52(r2)
   9f604:	e0bff517 	ldw	r2,-44(fp)
   9f608:	1880051e 	bne	r3,r2,9f620 <altera_avalon_jtag_uart_write+0x1b8>
   9f60c:	e0bffc17 	ldw	r2,-16(fp)
   9f610:	10c00917 	ldw	r3,36(r2)
   9f614:	e0bffc17 	ldw	r2,-16(fp)
   9f618:	10800117 	ldw	r2,4(r2)
   9f61c:	18bff736 	bltu	r3,r2,9f5fc <__alt_data_end+0xfffed5fc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   9f620:	e0bffc17 	ldw	r2,-16(fp)
   9f624:	10800917 	ldw	r2,36(r2)
   9f628:	1000051e 	bne	r2,zero,9f640 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   9f62c:	e0bffe17 	ldw	r2,-8(fp)
   9f630:	00bfd016 	blt	zero,r2,9f574 <__alt_data_end+0xfffed574>
   9f634:	00000306 	br	9f644 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   9f638:	0001883a 	nop
   9f63c:	00000106 	br	9f644 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   9f640:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   9f644:	e0fffd17 	ldw	r3,-12(fp)
   9f648:	e0bff717 	ldw	r2,-36(fp)
   9f64c:	18800426 	beq	r3,r2,9f660 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   9f650:	e0fffd17 	ldw	r3,-12(fp)
   9f654:	e0bff717 	ldw	r2,-36(fp)
   9f658:	1885c83a 	sub	r2,r3,r2
   9f65c:	00000606 	br	9f678 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   9f660:	e0bfff17 	ldw	r2,-4(fp)
   9f664:	1090000c 	andi	r2,r2,16384
   9f668:	10000226 	beq	r2,zero,9f674 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   9f66c:	00bffd44 	movi	r2,-11
   9f670:	00000106 	br	9f678 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   9f674:	00bffec4 	movi	r2,-5
}
   9f678:	e037883a 	mov	sp,fp
   9f67c:	dfc00117 	ldw	ra,4(sp)
   9f680:	df000017 	ldw	fp,0(sp)
   9f684:	dec00204 	addi	sp,sp,8
   9f688:	f800283a 	ret

0009f68c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   9f68c:	defff404 	addi	sp,sp,-48
   9f690:	df000b15 	stw	fp,44(sp)
   9f694:	df000b04 	addi	fp,sp,44
   9f698:	e13ffc15 	stw	r4,-16(fp)
   9f69c:	e17ffd15 	stw	r5,-12(fp)
   9f6a0:	e1bffe15 	stw	r6,-8(fp)
   9f6a4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   9f6a8:	e0bffc17 	ldw	r2,-16(fp)
   9f6ac:	10800017 	ldw	r2,0(r2)
   9f6b0:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   9f6b4:	e0bff517 	ldw	r2,-44(fp)
   9f6b8:	10800217 	ldw	r2,8(r2)
   9f6bc:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   9f6c0:	e0bff617 	ldw	r2,-40(fp)
   9f6c4:	10bfffc4 	addi	r2,r2,-1
   9f6c8:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
   9f6cc:	e0bffb17 	ldw	r2,-20(fp)
   9f6d0:	10800044 	addi	r2,r2,1
   9f6d4:	e0bffb15 	stw	r2,-20(fp)
   9f6d8:	e0bffb17 	ldw	r2,-20(fp)
   9f6dc:	10800003 	ldbu	r2,0(r2)
   9f6e0:	10803fcc 	andi	r2,r2,255
   9f6e4:	1080201c 	xori	r2,r2,128
   9f6e8:	10bfe004 	addi	r2,r2,-128
   9f6ec:	103ff71e 	bne	r2,zero,9f6cc <__alt_data_end+0xfffed6cc>
    ;

  return ptr - string;
   9f6f0:	e0fffb17 	ldw	r3,-20(fp)
   9f6f4:	e0bff617 	ldw	r2,-40(fp)
   9f6f8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   9f6fc:	10800044 	addi	r2,r2,1
   9f700:	1007883a 	mov	r3,r2
   9f704:	e0bffd17 	ldw	r2,-12(fp)
   9f708:	10c5883a 	add	r2,r2,r3
   9f70c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   9f710:	d0a01304 	addi	r2,gp,-32692
   9f714:	1007883a 	mov	r3,r2
  r4 = (int)name;
   9f718:	e0bffd17 	ldw	r2,-12(fp)
   9f71c:	1009883a 	mov	r4,r2
  r5 = flags;
   9f720:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
   9f724:	e1bfff17 	ldw	r6,-4(fp)
   9f728:	e0bffd17 	ldw	r2,-12(fp)
   9f72c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   9f730:	e0bff917 	ldw	r2,-28(fp)
   9f734:	10bfffc4 	addi	r2,r2,-1
   9f738:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   9f73c:	e0bffa17 	ldw	r2,-24(fp)
   9f740:	10800044 	addi	r2,r2,1
   9f744:	e0bffa15 	stw	r2,-24(fp)
   9f748:	e0bffa17 	ldw	r2,-24(fp)
   9f74c:	10800003 	ldbu	r2,0(r2)
   9f750:	10803fcc 	andi	r2,r2,255
   9f754:	1080201c 	xori	r2,r2,128
   9f758:	10bfe004 	addi	r2,r2,-128
   9f75c:	103ff71e 	bne	r2,zero,9f73c <__alt_data_end+0xfffed73c>
    ;

  return ptr - string;
   9f760:	e1fffa17 	ldw	r7,-24(fp)
   9f764:	e0bff917 	ldw	r2,-28(fp)
   9f768:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   9f76c:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
   9f770:	003da07a 	break	1

  handle = (void *)r2;
   9f774:	e0bff715 	stw	r2,-36(fp)
  error = r3;
   9f778:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
   9f77c:	e0bff817 	ldw	r2,-32(fp)
   9f780:	1000031e 	bne	r2,zero,9f790 <alt_hostfs_open+0x104>
    fd->priv = handle;
   9f784:	e0bffc17 	ldw	r2,-16(fp)
   9f788:	e0fff717 	ldw	r3,-36(fp)
   9f78c:	10c00115 	stw	r3,4(r2)

  return -error;
   9f790:	e0bff817 	ldw	r2,-32(fp)
   9f794:	0085c83a 	sub	r2,zero,r2
}
   9f798:	e037883a 	mov	sp,fp
   9f79c:	df000017 	ldw	fp,0(sp)
   9f7a0:	dec00104 	addi	sp,sp,4
   9f7a4:	f800283a 	ret

0009f7a8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   9f7a8:	defffd04 	addi	sp,sp,-12
   9f7ac:	df000215 	stw	fp,8(sp)
   9f7b0:	df000204 	addi	fp,sp,8
   9f7b4:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
   9f7b8:	d0a01604 	addi	r2,gp,-32680
   9f7bc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   9f7c0:	e0bfff17 	ldw	r2,-4(fp)
   9f7c4:	10800117 	ldw	r2,4(r2)
   9f7c8:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
   9f7cc:	003da07a 	break	1

  error = r3;
   9f7d0:	e0fffe15 	stw	r3,-8(fp)

  return -error;
   9f7d4:	e0bffe17 	ldw	r2,-8(fp)
   9f7d8:	0085c83a 	sub	r2,zero,r2
}
   9f7dc:	e037883a 	mov	sp,fp
   9f7e0:	df000017 	ldw	fp,0(sp)
   9f7e4:	dec00104 	addi	sp,sp,4
   9f7e8:	f800283a 	ret

0009f7ec <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   9f7ec:	defffa04 	addi	sp,sp,-24
   9f7f0:	df000515 	stw	fp,20(sp)
   9f7f4:	df000504 	addi	fp,sp,20
   9f7f8:	e13ffd15 	stw	r4,-12(fp)
   9f7fc:	e17ffe15 	stw	r5,-8(fp)
   9f800:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
   9f804:	d0a01904 	addi	r2,gp,-32668
   9f808:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   9f80c:	e0bffd17 	ldw	r2,-12(fp)
   9f810:	10800117 	ldw	r2,4(r2)
   9f814:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   9f818:	e0bffe17 	ldw	r2,-8(fp)
   9f81c:	100b883a 	mov	r5,r2
  r6 = len;
   9f820:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   9f824:	003da07a 	break	1

  rc = r2;
   9f828:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   9f82c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   9f830:	e0bffc17 	ldw	r2,-16(fp)
   9f834:	10000326 	beq	r2,zero,9f844 <alt_hostfs_read+0x58>
   9f838:	e0bffc17 	ldw	r2,-16(fp)
   9f83c:	0085c83a 	sub	r2,zero,r2
   9f840:	00000106 	br	9f848 <alt_hostfs_read+0x5c>
   9f844:	e0bffb17 	ldw	r2,-20(fp)
}
   9f848:	e037883a 	mov	sp,fp
   9f84c:	df000017 	ldw	fp,0(sp)
   9f850:	dec00104 	addi	sp,sp,4
   9f854:	f800283a 	ret

0009f858 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   9f858:	defffa04 	addi	sp,sp,-24
   9f85c:	df000515 	stw	fp,20(sp)
   9f860:	df000504 	addi	fp,sp,20
   9f864:	e13ffd15 	stw	r4,-12(fp)
   9f868:	e17ffe15 	stw	r5,-8(fp)
   9f86c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   9f870:	d0a01c04 	addi	r2,gp,-32656
   9f874:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   9f878:	e0bffd17 	ldw	r2,-12(fp)
   9f87c:	10800117 	ldw	r2,4(r2)
   9f880:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
   9f884:	e0bffe17 	ldw	r2,-8(fp)
   9f888:	100b883a 	mov	r5,r2
  r6 = len;
   9f88c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   9f890:	003da07a 	break	1

  rc = r2;
   9f894:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   9f898:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   9f89c:	e0bffc17 	ldw	r2,-16(fp)
   9f8a0:	10000326 	beq	r2,zero,9f8b0 <alt_hostfs_write+0x58>
   9f8a4:	e0bffc17 	ldw	r2,-16(fp)
   9f8a8:	0085c83a 	sub	r2,zero,r2
   9f8ac:	00000106 	br	9f8b4 <alt_hostfs_write+0x5c>
   9f8b0:	e0bffb17 	ldw	r2,-20(fp)
}
   9f8b4:	e037883a 	mov	sp,fp
   9f8b8:	df000017 	ldw	fp,0(sp)
   9f8bc:	dec00104 	addi	sp,sp,4
   9f8c0:	f800283a 	ret

0009f8c4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   9f8c4:	defffa04 	addi	sp,sp,-24
   9f8c8:	df000515 	stw	fp,20(sp)
   9f8cc:	df000504 	addi	fp,sp,20
   9f8d0:	e13ffd15 	stw	r4,-12(fp)
   9f8d4:	e17ffe15 	stw	r5,-8(fp)
   9f8d8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
   9f8dc:	d0a01f04 	addi	r2,gp,-32644
   9f8e0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   9f8e4:	e0bffd17 	ldw	r2,-12(fp)
   9f8e8:	10800117 	ldw	r2,4(r2)
   9f8ec:	1009883a 	mov	r4,r2
  r5 = ptr;
   9f8f0:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
   9f8f4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
   9f8f8:	003da07a 	break	1

  rc = r2;
   9f8fc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
   9f900:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
   9f904:	e0bffc17 	ldw	r2,-16(fp)
   9f908:	10000326 	beq	r2,zero,9f918 <alt_hostfs_seek+0x54>
   9f90c:	e0bffc17 	ldw	r2,-16(fp)
   9f910:	0085c83a 	sub	r2,zero,r2
   9f914:	00000106 	br	9f91c <alt_hostfs_seek+0x58>
   9f918:	e0bffb17 	ldw	r2,-20(fp)
}
   9f91c:	e037883a 	mov	sp,fp
   9f920:	df000017 	ldw	fp,0(sp)
   9f924:	dec00104 	addi	sp,sp,4
   9f928:	f800283a 	ret

0009f92c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   9f92c:	deffe904 	addi	sp,sp,-92
   9f930:	df001615 	stw	fp,88(sp)
   9f934:	df001604 	addi	fp,sp,88
   9f938:	e13ffe15 	stw	r4,-8(fp)
   9f93c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
   9f940:	d0a02204 	addi	r2,gp,-32632
   9f944:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
   9f948:	e0bffe17 	ldw	r2,-8(fp)
   9f94c:	10800117 	ldw	r2,4(r2)
   9f950:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
   9f954:	e0bfee04 	addi	r2,fp,-72
   9f958:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
   9f95c:	003da07a 	break	1

  rc = r2;
   9f960:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   9f964:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
   9f968:	e0bfec17 	ldw	r2,-80(fp)
   9f96c:	1000621e 	bne	r2,zero,9faf8 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   9f970:	e0bfee04 	addi	r2,fp,-72
   9f974:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   9f978:	e0bfea17 	ldw	r2,-88(fp)
   9f97c:	10801004 	addi	r2,r2,64
   9f980:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   9f984:	00001606 	br	9f9e0 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   9f988:	e0bfea17 	ldw	r2,-88(fp)
   9f98c:	10800017 	ldw	r2,0(r2)
   9f990:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   9f994:	e0bfea17 	ldw	r2,-88(fp)
   9f998:	10800017 	ldw	r2,0(r2)
   9f99c:	10803fec 	andhi	r2,r2,255
   9f9a0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   9f9a4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   9f9a8:	e0bfea17 	ldw	r2,-88(fp)
   9f9ac:	10800017 	ldw	r2,0(r2)
   9f9b0:	10bfc00c 	andi	r2,r2,65280
   9f9b4:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   9f9b8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   9f9bc:	e0bfea17 	ldw	r2,-88(fp)
   9f9c0:	10800017 	ldw	r2,0(r2)
   9f9c4:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   9f9c8:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   9f9cc:	e0bfea17 	ldw	r2,-88(fp)
   9f9d0:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   9f9d4:	e0bfea17 	ldw	r2,-88(fp)
   9f9d8:	10800104 	addi	r2,r2,4
   9f9dc:	e0bfea15 	stw	r2,-88(fp)
   9f9e0:	e0ffea17 	ldw	r3,-88(fp)
   9f9e4:	e0bfed17 	ldw	r2,-76(fp)
   9f9e8:	18bfe736 	bltu	r3,r2,9f988 <__alt_data_end+0xfffed988>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   9f9ec:	e0bfff17 	ldw	r2,-4(fp)
   9f9f0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   9f9f4:	e0bfea17 	ldw	r2,-88(fp)
   9f9f8:	10800f04 	addi	r2,r2,60
   9f9fc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
   9fa00:	00000506 	br	9fa18 <alt_hostfs_fstat+0xec>
      *ptr = 0;
   9fa04:	e0bfea17 	ldw	r2,-88(fp)
   9fa08:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   9fa0c:	e0bfea17 	ldw	r2,-88(fp)
   9fa10:	10800104 	addi	r2,r2,4
   9fa14:	e0bfea15 	stw	r2,-88(fp)
   9fa18:	e0ffea17 	ldw	r3,-88(fp)
   9fa1c:	e0bfed17 	ldw	r2,-76(fp)
   9fa20:	18bff836 	bltu	r3,r2,9fa04 <__alt_data_end+0xfffeda04>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   9fa24:	e0bfee17 	ldw	r2,-72(fp)
   9fa28:	1007883a 	mov	r3,r2
   9fa2c:	e0bfff17 	ldw	r2,-4(fp)
   9fa30:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   9fa34:	e0bfef17 	ldw	r2,-68(fp)
   9fa38:	1007883a 	mov	r3,r2
   9fa3c:	e0bfff17 	ldw	r2,-4(fp)
   9fa40:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   9fa44:	e0fff017 	ldw	r3,-64(fp)
   9fa48:	e0bfff17 	ldw	r2,-4(fp)
   9fa4c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   9fa50:	e0bff117 	ldw	r2,-60(fp)
   9fa54:	1007883a 	mov	r3,r2
   9fa58:	e0bfff17 	ldw	r2,-4(fp)
   9fa5c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   9fa60:	e0bff217 	ldw	r2,-56(fp)
   9fa64:	1007883a 	mov	r3,r2
   9fa68:	e0bfff17 	ldw	r2,-4(fp)
   9fa6c:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   9fa70:	e0bff317 	ldw	r2,-52(fp)
   9fa74:	1007883a 	mov	r3,r2
   9fa78:	e0bfff17 	ldw	r2,-4(fp)
   9fa7c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   9fa80:	e0bff417 	ldw	r2,-48(fp)
   9fa84:	1007883a 	mov	r3,r2
   9fa88:	e0bfff17 	ldw	r2,-4(fp)
   9fa8c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   9fa90:	e0bff617 	ldw	r2,-40(fp)
   9fa94:	1007883a 	mov	r3,r2
   9fa98:	e0bfff17 	ldw	r2,-4(fp)
   9fa9c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   9faa0:	e0bffb17 	ldw	r2,-20(fp)
   9faa4:	1007883a 	mov	r3,r2
   9faa8:	e0bfff17 	ldw	r2,-4(fp)
   9faac:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   9fab0:	e0bffc17 	ldw	r2,-16(fp)
   9fab4:	1007883a 	mov	r3,r2
   9fab8:	e0bfff17 	ldw	r2,-4(fp)
   9fabc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   9fac0:	e0bffd17 	ldw	r2,-12(fp)
   9fac4:	1007883a 	mov	r3,r2
   9fac8:	e0bfff17 	ldw	r2,-4(fp)
   9facc:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   9fad0:	e0bff817 	ldw	r2,-32(fp)
   9fad4:	1007883a 	mov	r3,r2
   9fad8:	e0bfff17 	ldw	r2,-4(fp)
   9fadc:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   9fae0:	e0bffa17 	ldw	r2,-24(fp)
   9fae4:	1007883a 	mov	r3,r2
   9fae8:	e0bfff17 	ldw	r2,-4(fp)
   9faec:	10c00c15 	stw	r3,48(r2)

    return rc;
   9faf0:	e0bfeb17 	ldw	r2,-84(fp)
   9faf4:	00000206 	br	9fb00 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
   9faf8:	e0bfec17 	ldw	r2,-80(fp)
   9fafc:	0085c83a 	sub	r2,zero,r2
}
   9fb00:	e037883a 	mov	sp,fp
   9fb04:	df000017 	ldw	fp,0(sp)
   9fb08:	dec00104 	addi	sp,sp,4
   9fb0c:	f800283a 	ret

0009fb10 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   9fb10:	defff504 	addi	sp,sp,-44
   9fb14:	df000a15 	stw	fp,40(sp)
   9fb18:	df000a04 	addi	fp,sp,40
   9fb1c:	e13ffc15 	stw	r4,-16(fp)
   9fb20:	e17ffd15 	stw	r5,-12(fp)
   9fb24:	e1bffe15 	stw	r6,-8(fp)
   9fb28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   9fb2c:	e03ff615 	stw	zero,-40(fp)
   9fb30:	d0a71c17 	ldw	r2,-25488(gp)
  
  if (alt_ticks_per_second ())
   9fb34:	10003c26 	beq	r2,zero,9fc28 <alt_alarm_start+0x118>
  {
    if (alarm)
   9fb38:	e0bffc17 	ldw	r2,-16(fp)
   9fb3c:	10003826 	beq	r2,zero,9fc20 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   9fb40:	e0bffc17 	ldw	r2,-16(fp)
   9fb44:	e0fffe17 	ldw	r3,-8(fp)
   9fb48:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   9fb4c:	e0bffc17 	ldw	r2,-16(fp)
   9fb50:	e0ffff17 	ldw	r3,-4(fp)
   9fb54:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9fb58:	0005303a 	rdctl	r2,status
   9fb5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9fb60:	e0fff917 	ldw	r3,-28(fp)
   9fb64:	00bfff84 	movi	r2,-2
   9fb68:	1884703a 	and	r2,r3,r2
   9fb6c:	1001703a 	wrctl	status,r2
  
  return context;
   9fb70:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   9fb74:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   9fb78:	d0a71d17 	ldw	r2,-25484(gp)
      
      current_nticks = alt_nticks();
   9fb7c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9fb80:	e0fffd17 	ldw	r3,-12(fp)
   9fb84:	e0bff617 	ldw	r2,-40(fp)
   9fb88:	1885883a 	add	r2,r3,r2
   9fb8c:	10c00044 	addi	r3,r2,1
   9fb90:	e0bffc17 	ldw	r2,-16(fp)
   9fb94:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   9fb98:	e0bffc17 	ldw	r2,-16(fp)
   9fb9c:	10c00217 	ldw	r3,8(r2)
   9fba0:	e0bff617 	ldw	r2,-40(fp)
   9fba4:	1880042e 	bgeu	r3,r2,9fbb8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   9fba8:	e0bffc17 	ldw	r2,-16(fp)
   9fbac:	00c00044 	movi	r3,1
   9fbb0:	10c00405 	stb	r3,16(r2)
   9fbb4:	00000206 	br	9fbc0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   9fbb8:	e0bffc17 	ldw	r2,-16(fp)
   9fbbc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9fbc0:	e0bffc17 	ldw	r2,-16(fp)
   9fbc4:	d0e02604 	addi	r3,gp,-32616
   9fbc8:	e0fffa15 	stw	r3,-24(fp)
   9fbcc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9fbd0:	e0bffb17 	ldw	r2,-20(fp)
   9fbd4:	e0fffa17 	ldw	r3,-24(fp)
   9fbd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9fbdc:	e0bffa17 	ldw	r2,-24(fp)
   9fbe0:	10c00017 	ldw	r3,0(r2)
   9fbe4:	e0bffb17 	ldw	r2,-20(fp)
   9fbe8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9fbec:	e0bffa17 	ldw	r2,-24(fp)
   9fbf0:	10800017 	ldw	r2,0(r2)
   9fbf4:	e0fffb17 	ldw	r3,-20(fp)
   9fbf8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9fbfc:	e0bffa17 	ldw	r2,-24(fp)
   9fc00:	e0fffb17 	ldw	r3,-20(fp)
   9fc04:	10c00015 	stw	r3,0(r2)
   9fc08:	e0bff817 	ldw	r2,-32(fp)
   9fc0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9fc10:	e0bff717 	ldw	r2,-36(fp)
   9fc14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   9fc18:	0005883a 	mov	r2,zero
   9fc1c:	00000306 	br	9fc2c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   9fc20:	00bffa84 	movi	r2,-22
   9fc24:	00000106 	br	9fc2c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   9fc28:	00bfde84 	movi	r2,-134
  }
}
   9fc2c:	e037883a 	mov	sp,fp
   9fc30:	df000017 	ldw	fp,0(sp)
   9fc34:	dec00104 	addi	sp,sp,4
   9fc38:	f800283a 	ret

0009fc3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9fc3c:	deffff04 	addi	sp,sp,-4
   9fc40:	df000015 	stw	fp,0(sp)
   9fc44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   9fc48:	0001883a 	nop
   9fc4c:	e037883a 	mov	sp,fp
   9fc50:	df000017 	ldw	fp,0(sp)
   9fc54:	dec00104 	addi	sp,sp,4
   9fc58:	f800283a 	ret

0009fc5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9fc5c:	defffe04 	addi	sp,sp,-8
   9fc60:	dfc00115 	stw	ra,4(sp)
   9fc64:	df000015 	stw	fp,0(sp)
   9fc68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9fc6c:	d0a01117 	ldw	r2,-32700(gp)
   9fc70:	10000326 	beq	r2,zero,9fc80 <alt_get_errno+0x24>
   9fc74:	d0a01117 	ldw	r2,-32700(gp)
   9fc78:	103ee83a 	callr	r2
   9fc7c:	00000106 	br	9fc84 <alt_get_errno+0x28>
   9fc80:	d0a70f04 	addi	r2,gp,-25540
}
   9fc84:	e037883a 	mov	sp,fp
   9fc88:	dfc00117 	ldw	ra,4(sp)
   9fc8c:	df000017 	ldw	fp,0(sp)
   9fc90:	dec00204 	addi	sp,sp,8
   9fc94:	f800283a 	ret

0009fc98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   9fc98:	defffa04 	addi	sp,sp,-24
   9fc9c:	dfc00515 	stw	ra,20(sp)
   9fca0:	df000415 	stw	fp,16(sp)
   9fca4:	df000404 	addi	fp,sp,16
   9fca8:	e13ffe15 	stw	r4,-8(fp)
   9fcac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9fcb0:	e0bffe17 	ldw	r2,-8(fp)
   9fcb4:	10000326 	beq	r2,zero,9fcc4 <alt_dev_llist_insert+0x2c>
   9fcb8:	e0bffe17 	ldw	r2,-8(fp)
   9fcbc:	10800217 	ldw	r2,8(r2)
   9fcc0:	1000061e 	bne	r2,zero,9fcdc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   9fcc4:	009fc5c0 	call	9fc5c <alt_get_errno>
   9fcc8:	1007883a 	mov	r3,r2
   9fccc:	00800584 	movi	r2,22
   9fcd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9fcd4:	00bffa84 	movi	r2,-22
   9fcd8:	00001306 	br	9fd28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9fcdc:	e0bffe17 	ldw	r2,-8(fp)
   9fce0:	e0ffff17 	ldw	r3,-4(fp)
   9fce4:	e0fffc15 	stw	r3,-16(fp)
   9fce8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9fcec:	e0bffd17 	ldw	r2,-12(fp)
   9fcf0:	e0fffc17 	ldw	r3,-16(fp)
   9fcf4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9fcf8:	e0bffc17 	ldw	r2,-16(fp)
   9fcfc:	10c00017 	ldw	r3,0(r2)
   9fd00:	e0bffd17 	ldw	r2,-12(fp)
   9fd04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9fd08:	e0bffc17 	ldw	r2,-16(fp)
   9fd0c:	10800017 	ldw	r2,0(r2)
   9fd10:	e0fffd17 	ldw	r3,-12(fp)
   9fd14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9fd18:	e0bffc17 	ldw	r2,-16(fp)
   9fd1c:	e0fffd17 	ldw	r3,-12(fp)
   9fd20:	10c00015 	stw	r3,0(r2)

  return 0;  
   9fd24:	0005883a 	mov	r2,zero
}
   9fd28:	e037883a 	mov	sp,fp
   9fd2c:	dfc00117 	ldw	ra,4(sp)
   9fd30:	df000017 	ldw	fp,0(sp)
   9fd34:	dec00204 	addi	sp,sp,8
   9fd38:	f800283a 	ret

0009fd3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9fd3c:	defffd04 	addi	sp,sp,-12
   9fd40:	dfc00215 	stw	ra,8(sp)
   9fd44:	df000115 	stw	fp,4(sp)
   9fd48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9fd4c:	008002b4 	movhi	r2,10
   9fd50:	10828e04 	addi	r2,r2,2616
   9fd54:	e0bfff15 	stw	r2,-4(fp)
   9fd58:	00000606 	br	9fd74 <_do_ctors+0x38>
        (*ctor) (); 
   9fd5c:	e0bfff17 	ldw	r2,-4(fp)
   9fd60:	10800017 	ldw	r2,0(r2)
   9fd64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9fd68:	e0bfff17 	ldw	r2,-4(fp)
   9fd6c:	10bfff04 	addi	r2,r2,-4
   9fd70:	e0bfff15 	stw	r2,-4(fp)
   9fd74:	e0ffff17 	ldw	r3,-4(fp)
   9fd78:	008002b4 	movhi	r2,10
   9fd7c:	10828f04 	addi	r2,r2,2620
   9fd80:	18bff62e 	bgeu	r3,r2,9fd5c <__alt_data_end+0xfffedd5c>
        (*ctor) (); 
}
   9fd84:	0001883a 	nop
   9fd88:	e037883a 	mov	sp,fp
   9fd8c:	dfc00117 	ldw	ra,4(sp)
   9fd90:	df000017 	ldw	fp,0(sp)
   9fd94:	dec00204 	addi	sp,sp,8
   9fd98:	f800283a 	ret

0009fd9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   9fd9c:	defffd04 	addi	sp,sp,-12
   9fda0:	dfc00215 	stw	ra,8(sp)
   9fda4:	df000115 	stw	fp,4(sp)
   9fda8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9fdac:	008002b4 	movhi	r2,10
   9fdb0:	10828e04 	addi	r2,r2,2616
   9fdb4:	e0bfff15 	stw	r2,-4(fp)
   9fdb8:	00000606 	br	9fdd4 <_do_dtors+0x38>
        (*dtor) (); 
   9fdbc:	e0bfff17 	ldw	r2,-4(fp)
   9fdc0:	10800017 	ldw	r2,0(r2)
   9fdc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9fdc8:	e0bfff17 	ldw	r2,-4(fp)
   9fdcc:	10bfff04 	addi	r2,r2,-4
   9fdd0:	e0bfff15 	stw	r2,-4(fp)
   9fdd4:	e0ffff17 	ldw	r3,-4(fp)
   9fdd8:	008002b4 	movhi	r2,10
   9fddc:	10828f04 	addi	r2,r2,2620
   9fde0:	18bff62e 	bgeu	r3,r2,9fdbc <__alt_data_end+0xfffeddbc>
        (*dtor) (); 
}
   9fde4:	0001883a 	nop
   9fde8:	e037883a 	mov	sp,fp
   9fdec:	dfc00117 	ldw	ra,4(sp)
   9fdf0:	df000017 	ldw	fp,0(sp)
   9fdf4:	dec00204 	addi	sp,sp,8
   9fdf8:	f800283a 	ret

0009fdfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9fdfc:	defffa04 	addi	sp,sp,-24
   9fe00:	dfc00515 	stw	ra,20(sp)
   9fe04:	df000415 	stw	fp,16(sp)
   9fe08:	df000404 	addi	fp,sp,16
   9fe0c:	e13ffe15 	stw	r4,-8(fp)
   9fe10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9fe14:	e0bfff17 	ldw	r2,-4(fp)
   9fe18:	10800017 	ldw	r2,0(r2)
   9fe1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9fe20:	e13ffe17 	ldw	r4,-8(fp)
   9fe24:	0088c340 	call	88c34 <strlen>
   9fe28:	10800044 	addi	r2,r2,1
   9fe2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9fe30:	00000d06 	br	9fe68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9fe34:	e0bffc17 	ldw	r2,-16(fp)
   9fe38:	10800217 	ldw	r2,8(r2)
   9fe3c:	e0fffd17 	ldw	r3,-12(fp)
   9fe40:	180d883a 	mov	r6,r3
   9fe44:	e17ffe17 	ldw	r5,-8(fp)
   9fe48:	1009883a 	mov	r4,r2
   9fe4c:	00a07980 	call	a0798 <memcmp>
   9fe50:	1000021e 	bne	r2,zero,9fe5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9fe54:	e0bffc17 	ldw	r2,-16(fp)
   9fe58:	00000706 	br	9fe78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   9fe5c:	e0bffc17 	ldw	r2,-16(fp)
   9fe60:	10800017 	ldw	r2,0(r2)
   9fe64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9fe68:	e0fffc17 	ldw	r3,-16(fp)
   9fe6c:	e0bfff17 	ldw	r2,-4(fp)
   9fe70:	18bff01e 	bne	r3,r2,9fe34 <__alt_data_end+0xfffede34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9fe74:	0005883a 	mov	r2,zero
}
   9fe78:	e037883a 	mov	sp,fp
   9fe7c:	dfc00117 	ldw	ra,4(sp)
   9fe80:	df000017 	ldw	fp,0(sp)
   9fe84:	dec00204 	addi	sp,sp,8
   9fe88:	f800283a 	ret

0009fe8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9fe8c:	defffb04 	addi	sp,sp,-20
   9fe90:	dfc00415 	stw	ra,16(sp)
   9fe94:	df000315 	stw	fp,12(sp)
   9fe98:	df000304 	addi	fp,sp,12
   9fe9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9fea0:	d0a00c17 	ldw	r2,-32720(gp)
   9fea4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9fea8:	00003106 	br	9ff70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   9feac:	e0bffd17 	ldw	r2,-12(fp)
   9feb0:	10800217 	ldw	r2,8(r2)
   9feb4:	1009883a 	mov	r4,r2
   9feb8:	0088c340 	call	88c34 <strlen>
   9febc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   9fec0:	e0bffd17 	ldw	r2,-12(fp)
   9fec4:	10c00217 	ldw	r3,8(r2)
   9fec8:	e0bffe17 	ldw	r2,-8(fp)
   9fecc:	10bfffc4 	addi	r2,r2,-1
   9fed0:	1885883a 	add	r2,r3,r2
   9fed4:	10800003 	ldbu	r2,0(r2)
   9fed8:	10803fcc 	andi	r2,r2,255
   9fedc:	1080201c 	xori	r2,r2,128
   9fee0:	10bfe004 	addi	r2,r2,-128
   9fee4:	10800bd8 	cmpnei	r2,r2,47
   9fee8:	1000031e 	bne	r2,zero,9fef8 <alt_find_file+0x6c>
    {
      len -= 1;
   9feec:	e0bffe17 	ldw	r2,-8(fp)
   9fef0:	10bfffc4 	addi	r2,r2,-1
   9fef4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9fef8:	e0bffe17 	ldw	r2,-8(fp)
   9fefc:	e0ffff17 	ldw	r3,-4(fp)
   9ff00:	1885883a 	add	r2,r3,r2
   9ff04:	10800003 	ldbu	r2,0(r2)
   9ff08:	10803fcc 	andi	r2,r2,255
   9ff0c:	1080201c 	xori	r2,r2,128
   9ff10:	10bfe004 	addi	r2,r2,-128
   9ff14:	10800be0 	cmpeqi	r2,r2,47
   9ff18:	1000081e 	bne	r2,zero,9ff3c <alt_find_file+0xb0>
   9ff1c:	e0bffe17 	ldw	r2,-8(fp)
   9ff20:	e0ffff17 	ldw	r3,-4(fp)
   9ff24:	1885883a 	add	r2,r3,r2
   9ff28:	10800003 	ldbu	r2,0(r2)
   9ff2c:	10803fcc 	andi	r2,r2,255
   9ff30:	1080201c 	xori	r2,r2,128
   9ff34:	10bfe004 	addi	r2,r2,-128
   9ff38:	10000a1e 	bne	r2,zero,9ff64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   9ff3c:	e0bffd17 	ldw	r2,-12(fp)
   9ff40:	10800217 	ldw	r2,8(r2)
   9ff44:	e0fffe17 	ldw	r3,-8(fp)
   9ff48:	180d883a 	mov	r6,r3
   9ff4c:	e17fff17 	ldw	r5,-4(fp)
   9ff50:	1009883a 	mov	r4,r2
   9ff54:	00a07980 	call	a0798 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9ff58:	1000021e 	bne	r2,zero,9ff64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   9ff5c:	e0bffd17 	ldw	r2,-12(fp)
   9ff60:	00000706 	br	9ff80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   9ff64:	e0bffd17 	ldw	r2,-12(fp)
   9ff68:	10800017 	ldw	r2,0(r2)
   9ff6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9ff70:	e0fffd17 	ldw	r3,-12(fp)
   9ff74:	d0a00c04 	addi	r2,gp,-32720
   9ff78:	18bfcc1e 	bne	r3,r2,9feac <__alt_data_end+0xfffedeac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9ff7c:	0005883a 	mov	r2,zero
}
   9ff80:	e037883a 	mov	sp,fp
   9ff84:	dfc00117 	ldw	ra,4(sp)
   9ff88:	df000017 	ldw	fp,0(sp)
   9ff8c:	dec00204 	addi	sp,sp,8
   9ff90:	f800283a 	ret

0009ff94 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   9ff94:	defffc04 	addi	sp,sp,-16
   9ff98:	df000315 	stw	fp,12(sp)
   9ff9c:	df000304 	addi	fp,sp,12
   9ffa0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   9ffa4:	e0bfff17 	ldw	r2,-4(fp)
   9ffa8:	10800217 	ldw	r2,8(r2)
   9ffac:	1000021e 	bne	r2,zero,9ffb8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   9ffb0:	00bffb44 	movi	r2,-19
   9ffb4:	00001306 	br	a0004 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   9ffb8:	e0bfff17 	ldw	r2,-4(fp)
   9ffbc:	d0e00c04 	addi	r3,gp,-32720
   9ffc0:	e0fffd15 	stw	r3,-12(fp)
   9ffc4:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9ffc8:	e0bffe17 	ldw	r2,-8(fp)
   9ffcc:	e0fffd17 	ldw	r3,-12(fp)
   9ffd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   9ffd4:	e0bffd17 	ldw	r2,-12(fp)
   9ffd8:	10c00017 	ldw	r3,0(r2)
   9ffdc:	e0bffe17 	ldw	r2,-8(fp)
   9ffe0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9ffe4:	e0bffd17 	ldw	r2,-12(fp)
   9ffe8:	10800017 	ldw	r2,0(r2)
   9ffec:	e0fffe17 	ldw	r3,-8(fp)
   9fff0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   9fff4:	e0bffd17 	ldw	r2,-12(fp)
   9fff8:	e0fffe17 	ldw	r3,-8(fp)
   9fffc:	10c00015 	stw	r3,0(r2)

  return 0;
   a0000:	0005883a 	mov	r2,zero
} 
   a0004:	e037883a 	mov	sp,fp
   a0008:	df000017 	ldw	fp,0(sp)
   a000c:	dec00104 	addi	sp,sp,4
   a0010:	f800283a 	ret

000a0014 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   a0014:	defffa04 	addi	sp,sp,-24
   a0018:	dfc00515 	stw	ra,20(sp)
   a001c:	df000415 	stw	fp,16(sp)
   a0020:	dc000315 	stw	r16,12(sp)
   a0024:	df000404 	addi	fp,sp,16
   a0028:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   a002c:	00bffa04 	movi	r2,-24
   a0030:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   a0034:	e03ffc15 	stw	zero,-16(fp)
   a0038:	00001d06 	br	a00b0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   a003c:	040002b4 	movhi	r16,10
   a0040:	8407b004 	addi	r16,r16,7872
   a0044:	e0bffc17 	ldw	r2,-16(fp)
   a0048:	01400304 	movi	r5,12
   a004c:	1009883a 	mov	r4,r2
   a0050:	00823a00 	call	823a0 <__mulsi3>
   a0054:	8085883a 	add	r2,r16,r2
   a0058:	10800017 	ldw	r2,0(r2)
   a005c:	1000111e 	bne	r2,zero,a00a4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   a0060:	040002b4 	movhi	r16,10
   a0064:	8407b004 	addi	r16,r16,7872
   a0068:	e0bffc17 	ldw	r2,-16(fp)
   a006c:	01400304 	movi	r5,12
   a0070:	1009883a 	mov	r4,r2
   a0074:	00823a00 	call	823a0 <__mulsi3>
   a0078:	8085883a 	add	r2,r16,r2
   a007c:	e0fffe17 	ldw	r3,-8(fp)
   a0080:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   a0084:	d0e01017 	ldw	r3,-32704(gp)
   a0088:	e0bffc17 	ldw	r2,-16(fp)
   a008c:	1880020e 	bge	r3,r2,a0098 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   a0090:	e0bffc17 	ldw	r2,-16(fp)
   a0094:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
   a0098:	e0bffc17 	ldw	r2,-16(fp)
   a009c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   a00a0:	00000606 	br	a00bc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   a00a4:	e0bffc17 	ldw	r2,-16(fp)
   a00a8:	10800044 	addi	r2,r2,1
   a00ac:	e0bffc15 	stw	r2,-16(fp)
   a00b0:	e0bffc17 	ldw	r2,-16(fp)
   a00b4:	10800810 	cmplti	r2,r2,32
   a00b8:	103fe01e 	bne	r2,zero,a003c <__alt_data_end+0xfffee03c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   a00bc:	e0bffd17 	ldw	r2,-12(fp)
}
   a00c0:	e6ffff04 	addi	sp,fp,-4
   a00c4:	dfc00217 	ldw	ra,8(sp)
   a00c8:	df000117 	ldw	fp,4(sp)
   a00cc:	dc000017 	ldw	r16,0(sp)
   a00d0:	dec00304 	addi	sp,sp,12
   a00d4:	f800283a 	ret

000a00d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   a00d8:	deffff04 	addi	sp,sp,-4
   a00dc:	df000015 	stw	fp,0(sp)
   a00e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   a00e4:	0001883a 	nop
   a00e8:	e037883a 	mov	sp,fp
   a00ec:	df000017 	ldw	fp,0(sp)
   a00f0:	dec00104 	addi	sp,sp,4
   a00f4:	f800283a 	ret

000a00f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   a00f8:	defff904 	addi	sp,sp,-28
   a00fc:	dfc00615 	stw	ra,24(sp)
   a0100:	df000515 	stw	fp,20(sp)
   a0104:	df000504 	addi	fp,sp,20
   a0108:	e13ffc15 	stw	r4,-16(fp)
   a010c:	e17ffd15 	stw	r5,-12(fp)
   a0110:	e1bffe15 	stw	r6,-8(fp)
   a0114:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   a0118:	e0800217 	ldw	r2,8(fp)
   a011c:	d8800015 	stw	r2,0(sp)
   a0120:	e1ffff17 	ldw	r7,-4(fp)
   a0124:	e1bffe17 	ldw	r6,-8(fp)
   a0128:	e17ffd17 	ldw	r5,-12(fp)
   a012c:	e13ffc17 	ldw	r4,-16(fp)
   a0130:	00a02a80 	call	a02a8 <alt_iic_isr_register>
}  
   a0134:	e037883a 	mov	sp,fp
   a0138:	dfc00117 	ldw	ra,4(sp)
   a013c:	df000017 	ldw	fp,0(sp)
   a0140:	dec00204 	addi	sp,sp,8
   a0144:	f800283a 	ret

000a0148 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   a0148:	defff904 	addi	sp,sp,-28
   a014c:	df000615 	stw	fp,24(sp)
   a0150:	df000604 	addi	fp,sp,24
   a0154:	e13ffe15 	stw	r4,-8(fp)
   a0158:	e17fff15 	stw	r5,-4(fp)
   a015c:	e0bfff17 	ldw	r2,-4(fp)
   a0160:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a0164:	0005303a 	rdctl	r2,status
   a0168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a016c:	e0fffb17 	ldw	r3,-20(fp)
   a0170:	00bfff84 	movi	r2,-2
   a0174:	1884703a 	and	r2,r3,r2
   a0178:	1001703a 	wrctl	status,r2
  
  return context;
   a017c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   a0180:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   a0184:	00c00044 	movi	r3,1
   a0188:	e0bffa17 	ldw	r2,-24(fp)
   a018c:	1884983a 	sll	r2,r3,r2
   a0190:	1007883a 	mov	r3,r2
   a0194:	d0a71b17 	ldw	r2,-25492(gp)
   a0198:	1884b03a 	or	r2,r3,r2
   a019c:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   a01a0:	d0a71b17 	ldw	r2,-25492(gp)
   a01a4:	100170fa 	wrctl	ienable,r2
   a01a8:	e0bffc17 	ldw	r2,-16(fp)
   a01ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a01b0:	e0bffd17 	ldw	r2,-12(fp)
   a01b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   a01b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   a01bc:	0001883a 	nop
}
   a01c0:	e037883a 	mov	sp,fp
   a01c4:	df000017 	ldw	fp,0(sp)
   a01c8:	dec00104 	addi	sp,sp,4
   a01cc:	f800283a 	ret

000a01d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   a01d0:	defff904 	addi	sp,sp,-28
   a01d4:	df000615 	stw	fp,24(sp)
   a01d8:	df000604 	addi	fp,sp,24
   a01dc:	e13ffe15 	stw	r4,-8(fp)
   a01e0:	e17fff15 	stw	r5,-4(fp)
   a01e4:	e0bfff17 	ldw	r2,-4(fp)
   a01e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a01ec:	0005303a 	rdctl	r2,status
   a01f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a01f4:	e0fffb17 	ldw	r3,-20(fp)
   a01f8:	00bfff84 	movi	r2,-2
   a01fc:	1884703a 	and	r2,r3,r2
   a0200:	1001703a 	wrctl	status,r2
  
  return context;
   a0204:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   a0208:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   a020c:	00c00044 	movi	r3,1
   a0210:	e0bffa17 	ldw	r2,-24(fp)
   a0214:	1884983a 	sll	r2,r3,r2
   a0218:	0084303a 	nor	r2,zero,r2
   a021c:	1007883a 	mov	r3,r2
   a0220:	d0a71b17 	ldw	r2,-25492(gp)
   a0224:	1884703a 	and	r2,r3,r2
   a0228:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   a022c:	d0a71b17 	ldw	r2,-25492(gp)
   a0230:	100170fa 	wrctl	ienable,r2
   a0234:	e0bffc17 	ldw	r2,-16(fp)
   a0238:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a023c:	e0bffd17 	ldw	r2,-12(fp)
   a0240:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   a0244:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   a0248:	0001883a 	nop
}
   a024c:	e037883a 	mov	sp,fp
   a0250:	df000017 	ldw	fp,0(sp)
   a0254:	dec00104 	addi	sp,sp,4
   a0258:	f800283a 	ret

000a025c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   a025c:	defffc04 	addi	sp,sp,-16
   a0260:	df000315 	stw	fp,12(sp)
   a0264:	df000304 	addi	fp,sp,12
   a0268:	e13ffe15 	stw	r4,-8(fp)
   a026c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   a0270:	000530fa 	rdctl	r2,ienable
   a0274:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   a0278:	00c00044 	movi	r3,1
   a027c:	e0bfff17 	ldw	r2,-4(fp)
   a0280:	1884983a 	sll	r2,r3,r2
   a0284:	1007883a 	mov	r3,r2
   a0288:	e0bffd17 	ldw	r2,-12(fp)
   a028c:	1884703a 	and	r2,r3,r2
   a0290:	1004c03a 	cmpne	r2,r2,zero
   a0294:	10803fcc 	andi	r2,r2,255
}
   a0298:	e037883a 	mov	sp,fp
   a029c:	df000017 	ldw	fp,0(sp)
   a02a0:	dec00104 	addi	sp,sp,4
   a02a4:	f800283a 	ret

000a02a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   a02a8:	defff504 	addi	sp,sp,-44
   a02ac:	dfc00a15 	stw	ra,40(sp)
   a02b0:	df000915 	stw	fp,36(sp)
   a02b4:	df000904 	addi	fp,sp,36
   a02b8:	e13ffc15 	stw	r4,-16(fp)
   a02bc:	e17ffd15 	stw	r5,-12(fp)
   a02c0:	e1bffe15 	stw	r6,-8(fp)
   a02c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   a02c8:	00bffa84 	movi	r2,-22
   a02cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   a02d0:	e0bffd17 	ldw	r2,-12(fp)
   a02d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   a02d8:	e0bff817 	ldw	r2,-32(fp)
   a02dc:	10800808 	cmpgei	r2,r2,32
   a02e0:	1000271e 	bne	r2,zero,a0380 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a02e4:	0005303a 	rdctl	r2,status
   a02e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a02ec:	e0fffb17 	ldw	r3,-20(fp)
   a02f0:	00bfff84 	movi	r2,-2
   a02f4:	1884703a 	and	r2,r3,r2
   a02f8:	1001703a 	wrctl	status,r2
  
  return context;
   a02fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   a0300:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   a0304:	008002b4 	movhi	r2,10
   a0308:	10935b04 	addi	r2,r2,19820
   a030c:	e0fff817 	ldw	r3,-32(fp)
   a0310:	180690fa 	slli	r3,r3,3
   a0314:	10c5883a 	add	r2,r2,r3
   a0318:	e0fffe17 	ldw	r3,-8(fp)
   a031c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   a0320:	008002b4 	movhi	r2,10
   a0324:	10935b04 	addi	r2,r2,19820
   a0328:	e0fff817 	ldw	r3,-32(fp)
   a032c:	180690fa 	slli	r3,r3,3
   a0330:	10c5883a 	add	r2,r2,r3
   a0334:	10800104 	addi	r2,r2,4
   a0338:	e0ffff17 	ldw	r3,-4(fp)
   a033c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   a0340:	e0bffe17 	ldw	r2,-8(fp)
   a0344:	10000526 	beq	r2,zero,a035c <alt_iic_isr_register+0xb4>
   a0348:	e0bff817 	ldw	r2,-32(fp)
   a034c:	100b883a 	mov	r5,r2
   a0350:	e13ffc17 	ldw	r4,-16(fp)
   a0354:	00a01480 	call	a0148 <alt_ic_irq_enable>
   a0358:	00000406 	br	a036c <alt_iic_isr_register+0xc4>
   a035c:	e0bff817 	ldw	r2,-32(fp)
   a0360:	100b883a 	mov	r5,r2
   a0364:	e13ffc17 	ldw	r4,-16(fp)
   a0368:	00a01d00 	call	a01d0 <alt_ic_irq_disable>
   a036c:	e0bff715 	stw	r2,-36(fp)
   a0370:	e0bffa17 	ldw	r2,-24(fp)
   a0374:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a0378:	e0bff917 	ldw	r2,-28(fp)
   a037c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   a0380:	e0bff717 	ldw	r2,-36(fp)
}
   a0384:	e037883a 	mov	sp,fp
   a0388:	dfc00117 	ldw	ra,4(sp)
   a038c:	df000017 	ldw	fp,0(sp)
   a0390:	dec00204 	addi	sp,sp,8
   a0394:	f800283a 	ret

000a0398 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   a0398:	defff804 	addi	sp,sp,-32
   a039c:	dfc00715 	stw	ra,28(sp)
   a03a0:	df000615 	stw	fp,24(sp)
   a03a4:	dc000515 	stw	r16,20(sp)
   a03a8:	df000604 	addi	fp,sp,24
   a03ac:	e13ffb15 	stw	r4,-20(fp)
   a03b0:	e17ffc15 	stw	r5,-16(fp)
   a03b4:	e1bffd15 	stw	r6,-12(fp)
   a03b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   a03bc:	e1bffe17 	ldw	r6,-8(fp)
   a03c0:	e17ffd17 	ldw	r5,-12(fp)
   a03c4:	e13ffc17 	ldw	r4,-16(fp)
   a03c8:	009e6580 	call	9e658 <open>
   a03cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   a03d0:	e0bffa17 	ldw	r2,-24(fp)
   a03d4:	10002216 	blt	r2,zero,a0460 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   a03d8:	040002b4 	movhi	r16,10
   a03dc:	8407b004 	addi	r16,r16,7872
   a03e0:	e0bffa17 	ldw	r2,-24(fp)
   a03e4:	01400304 	movi	r5,12
   a03e8:	1009883a 	mov	r4,r2
   a03ec:	00823a00 	call	823a0 <__mulsi3>
   a03f0:	8085883a 	add	r2,r16,r2
   a03f4:	10c00017 	ldw	r3,0(r2)
   a03f8:	e0bffb17 	ldw	r2,-20(fp)
   a03fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   a0400:	040002b4 	movhi	r16,10
   a0404:	8407b004 	addi	r16,r16,7872
   a0408:	e0bffa17 	ldw	r2,-24(fp)
   a040c:	01400304 	movi	r5,12
   a0410:	1009883a 	mov	r4,r2
   a0414:	00823a00 	call	823a0 <__mulsi3>
   a0418:	8085883a 	add	r2,r16,r2
   a041c:	10800104 	addi	r2,r2,4
   a0420:	10c00017 	ldw	r3,0(r2)
   a0424:	e0bffb17 	ldw	r2,-20(fp)
   a0428:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   a042c:	040002b4 	movhi	r16,10
   a0430:	8407b004 	addi	r16,r16,7872
   a0434:	e0bffa17 	ldw	r2,-24(fp)
   a0438:	01400304 	movi	r5,12
   a043c:	1009883a 	mov	r4,r2
   a0440:	00823a00 	call	823a0 <__mulsi3>
   a0444:	8085883a 	add	r2,r16,r2
   a0448:	10800204 	addi	r2,r2,8
   a044c:	10c00017 	ldw	r3,0(r2)
   a0450:	e0bffb17 	ldw	r2,-20(fp)
   a0454:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   a0458:	e13ffa17 	ldw	r4,-24(fp)
   a045c:	009e8f40 	call	9e8f4 <alt_release_fd>
  }
} 
   a0460:	0001883a 	nop
   a0464:	e6ffff04 	addi	sp,fp,-4
   a0468:	dfc00217 	ldw	ra,8(sp)
   a046c:	df000117 	ldw	fp,4(sp)
   a0470:	dc000017 	ldw	r16,0(sp)
   a0474:	dec00304 	addi	sp,sp,12
   a0478:	f800283a 	ret

000a047c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   a047c:	defffb04 	addi	sp,sp,-20
   a0480:	dfc00415 	stw	ra,16(sp)
   a0484:	df000315 	stw	fp,12(sp)
   a0488:	df000304 	addi	fp,sp,12
   a048c:	e13ffd15 	stw	r4,-12(fp)
   a0490:	e17ffe15 	stw	r5,-8(fp)
   a0494:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   a0498:	01c07fc4 	movi	r7,511
   a049c:	01800044 	movi	r6,1
   a04a0:	e17ffd17 	ldw	r5,-12(fp)
   a04a4:	010002b4 	movhi	r4,10
   a04a8:	2107b304 	addi	r4,r4,7884
   a04ac:	00a03980 	call	a0398 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   a04b0:	01c07fc4 	movi	r7,511
   a04b4:	000d883a 	mov	r6,zero
   a04b8:	e17ffe17 	ldw	r5,-8(fp)
   a04bc:	010002b4 	movhi	r4,10
   a04c0:	2107b004 	addi	r4,r4,7872
   a04c4:	00a03980 	call	a0398 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   a04c8:	01c07fc4 	movi	r7,511
   a04cc:	01800044 	movi	r6,1
   a04d0:	e17fff17 	ldw	r5,-4(fp)
   a04d4:	010002b4 	movhi	r4,10
   a04d8:	2107b604 	addi	r4,r4,7896
   a04dc:	00a03980 	call	a0398 <alt_open_fd>
}  
   a04e0:	0001883a 	nop
   a04e4:	e037883a 	mov	sp,fp
   a04e8:	dfc00117 	ldw	ra,4(sp)
   a04ec:	df000017 	ldw	fp,0(sp)
   a04f0:	dec00204 	addi	sp,sp,8
   a04f4:	f800283a 	ret

000a04f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   a04f8:	defffa04 	addi	sp,sp,-24
   a04fc:	df000515 	stw	fp,20(sp)
   a0500:	df000504 	addi	fp,sp,20
   a0504:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   a0508:	0005303a 	rdctl	r2,status
   a050c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   a0510:	e0fffc17 	ldw	r3,-16(fp)
   a0514:	00bfff84 	movi	r2,-2
   a0518:	1884703a 	and	r2,r3,r2
   a051c:	1001703a 	wrctl	status,r2
  
  return context;
   a0520:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   a0524:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   a0528:	e0bfff17 	ldw	r2,-4(fp)
   a052c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   a0530:	e0bffd17 	ldw	r2,-12(fp)
   a0534:	10800017 	ldw	r2,0(r2)
   a0538:	e0fffd17 	ldw	r3,-12(fp)
   a053c:	18c00117 	ldw	r3,4(r3)
   a0540:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   a0544:	e0bffd17 	ldw	r2,-12(fp)
   a0548:	10800117 	ldw	r2,4(r2)
   a054c:	e0fffd17 	ldw	r3,-12(fp)
   a0550:	18c00017 	ldw	r3,0(r3)
   a0554:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   a0558:	e0bffd17 	ldw	r2,-12(fp)
   a055c:	e0fffd17 	ldw	r3,-12(fp)
   a0560:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   a0564:	e0bffd17 	ldw	r2,-12(fp)
   a0568:	e0fffd17 	ldw	r3,-12(fp)
   a056c:	10c00015 	stw	r3,0(r2)
   a0570:	e0bffb17 	ldw	r2,-20(fp)
   a0574:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   a0578:	e0bffe17 	ldw	r2,-8(fp)
   a057c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   a0580:	0001883a 	nop
   a0584:	e037883a 	mov	sp,fp
   a0588:	df000017 	ldw	fp,0(sp)
   a058c:	dec00104 	addi	sp,sp,4
   a0590:	f800283a 	ret

000a0594 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   a0594:	defffb04 	addi	sp,sp,-20
   a0598:	dfc00415 	stw	ra,16(sp)
   a059c:	df000315 	stw	fp,12(sp)
   a05a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   a05a4:	d0a02617 	ldw	r2,-32616(gp)
   a05a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   a05ac:	d0a71d17 	ldw	r2,-25484(gp)
   a05b0:	10800044 	addi	r2,r2,1
   a05b4:	d0a71d15 	stw	r2,-25484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   a05b8:	00002e06 	br	a0674 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   a05bc:	e0bffd17 	ldw	r2,-12(fp)
   a05c0:	10800017 	ldw	r2,0(r2)
   a05c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   a05c8:	e0bffd17 	ldw	r2,-12(fp)
   a05cc:	10800403 	ldbu	r2,16(r2)
   a05d0:	10803fcc 	andi	r2,r2,255
   a05d4:	10000426 	beq	r2,zero,a05e8 <alt_tick+0x54>
   a05d8:	d0a71d17 	ldw	r2,-25484(gp)
   a05dc:	1000021e 	bne	r2,zero,a05e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   a05e0:	e0bffd17 	ldw	r2,-12(fp)
   a05e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   a05e8:	e0bffd17 	ldw	r2,-12(fp)
   a05ec:	10800217 	ldw	r2,8(r2)
   a05f0:	d0e71d17 	ldw	r3,-25484(gp)
   a05f4:	18801d36 	bltu	r3,r2,a066c <alt_tick+0xd8>
   a05f8:	e0bffd17 	ldw	r2,-12(fp)
   a05fc:	10800403 	ldbu	r2,16(r2)
   a0600:	10803fcc 	andi	r2,r2,255
   a0604:	1000191e 	bne	r2,zero,a066c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   a0608:	e0bffd17 	ldw	r2,-12(fp)
   a060c:	10800317 	ldw	r2,12(r2)
   a0610:	e0fffd17 	ldw	r3,-12(fp)
   a0614:	18c00517 	ldw	r3,20(r3)
   a0618:	1809883a 	mov	r4,r3
   a061c:	103ee83a 	callr	r2
   a0620:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   a0624:	e0bfff17 	ldw	r2,-4(fp)
   a0628:	1000031e 	bne	r2,zero,a0638 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   a062c:	e13ffd17 	ldw	r4,-12(fp)
   a0630:	00a04f80 	call	a04f8 <alt_alarm_stop>
   a0634:	00000d06 	br	a066c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   a0638:	e0bffd17 	ldw	r2,-12(fp)
   a063c:	10c00217 	ldw	r3,8(r2)
   a0640:	e0bfff17 	ldw	r2,-4(fp)
   a0644:	1887883a 	add	r3,r3,r2
   a0648:	e0bffd17 	ldw	r2,-12(fp)
   a064c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   a0650:	e0bffd17 	ldw	r2,-12(fp)
   a0654:	10c00217 	ldw	r3,8(r2)
   a0658:	d0a71d17 	ldw	r2,-25484(gp)
   a065c:	1880032e 	bgeu	r3,r2,a066c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   a0660:	e0bffd17 	ldw	r2,-12(fp)
   a0664:	00c00044 	movi	r3,1
   a0668:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   a066c:	e0bffe17 	ldw	r2,-8(fp)
   a0670:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   a0674:	e0fffd17 	ldw	r3,-12(fp)
   a0678:	d0a02604 	addi	r2,gp,-32616
   a067c:	18bfcf1e 	bne	r3,r2,a05bc <__alt_data_end+0xfffee5bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   a0680:	0001883a 	nop
}
   a0684:	0001883a 	nop
   a0688:	e037883a 	mov	sp,fp
   a068c:	dfc00117 	ldw	ra,4(sp)
   a0690:	df000017 	ldw	fp,0(sp)
   a0694:	dec00204 	addi	sp,sp,8
   a0698:	f800283a 	ret

000a069c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   a069c:	deffff04 	addi	sp,sp,-4
   a06a0:	df000015 	stw	fp,0(sp)
   a06a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   a06a8:	000170fa 	wrctl	ienable,zero
}
   a06ac:	0001883a 	nop
   a06b0:	e037883a 	mov	sp,fp
   a06b4:	df000017 	ldw	fp,0(sp)
   a06b8:	dec00104 	addi	sp,sp,4
   a06bc:	f800283a 	ret

000a06c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   a06c0:	defffe04 	addi	sp,sp,-8
   a06c4:	df000115 	stw	fp,4(sp)
   a06c8:	df000104 	addi	fp,sp,4
   a06cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   a06d0:	e0bfff17 	ldw	r2,-4(fp)
   a06d4:	10bffe84 	addi	r2,r2,-6
   a06d8:	10c00428 	cmpgeui	r3,r2,16
   a06dc:	18001a1e 	bne	r3,zero,a0748 <alt_exception_cause_generated_bad_addr+0x88>
   a06e0:	100690ba 	slli	r3,r2,2
   a06e4:	008002b4 	movhi	r2,10
   a06e8:	1081be04 	addi	r2,r2,1784
   a06ec:	1885883a 	add	r2,r3,r2
   a06f0:	10800017 	ldw	r2,0(r2)
   a06f4:	1000683a 	jmp	r2
   a06f8:	000a0738 	rdprs	zero,zero,10268
   a06fc:	000a0738 	rdprs	zero,zero,10268
   a0700:	000a0748 	cmpgei	zero,zero,10269
   a0704:	000a0748 	cmpgei	zero,zero,10269
   a0708:	000a0748 	cmpgei	zero,zero,10269
   a070c:	000a0738 	rdprs	zero,zero,10268
   a0710:	000a0740 	call	a074 <__alt_mem_MemoriaDados+0xa074>
   a0714:	000a0748 	cmpgei	zero,zero,10269
   a0718:	000a0738 	rdprs	zero,zero,10268
   a071c:	000a0738 	rdprs	zero,zero,10268
   a0720:	000a0748 	cmpgei	zero,zero,10269
   a0724:	000a0738 	rdprs	zero,zero,10268
   a0728:	000a0740 	call	a074 <__alt_mem_MemoriaDados+0xa074>
   a072c:	000a0748 	cmpgei	zero,zero,10269
   a0730:	000a0748 	cmpgei	zero,zero,10269
   a0734:	000a0738 	rdprs	zero,zero,10268
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   a0738:	00800044 	movi	r2,1
   a073c:	00000306 	br	a074c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   a0740:	0005883a 	mov	r2,zero
   a0744:	00000106 	br	a074c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   a0748:	0005883a 	mov	r2,zero
  }
}
   a074c:	e037883a 	mov	sp,fp
   a0750:	df000017 	ldw	fp,0(sp)
   a0754:	dec00104 	addi	sp,sp,4
   a0758:	f800283a 	ret

000a075c <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
   a075c:	defffd04 	addi	sp,sp,-12
   a0760:	dfc00215 	stw	ra,8(sp)
   a0764:	df000115 	stw	fp,4(sp)
   a0768:	df000104 	addi	fp,sp,4
   a076c:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
   a0770:	000f883a 	mov	r7,zero
   a0774:	000d883a 	mov	r6,zero
   a0778:	e17fff17 	ldw	r5,-4(fp)
   a077c:	0009883a 	mov	r4,zero
   a0780:	00a08cc0 	call	a08cc <__register_exitproc>
}
   a0784:	e037883a 	mov	sp,fp
   a0788:	dfc00117 	ldw	ra,4(sp)
   a078c:	df000017 	ldw	fp,0(sp)
   a0790:	dec00204 	addi	sp,sp,8
   a0794:	f800283a 	ret

000a0798 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
   a0798:	defff804 	addi	sp,sp,-32
   a079c:	df000715 	stw	fp,28(sp)
   a07a0:	df000704 	addi	fp,sp,28
   a07a4:	e13ffd15 	stw	r4,-12(fp)
   a07a8:	e17ffe15 	stw	r5,-8(fp)
   a07ac:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
   a07b0:	e0bffd17 	ldw	r2,-12(fp)
   a07b4:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
   a07b8:	e0bffe17 	ldw	r2,-8(fp)
   a07bc:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
   a07c0:	e0bfff17 	ldw	r2,-4(fp)
   a07c4:	10800130 	cmpltui	r2,r2,4
   a07c8:	1000371e 	bne	r2,zero,a08a8 <memcmp+0x110>
   a07cc:	e0fff917 	ldw	r3,-28(fp)
   a07d0:	e0bffa17 	ldw	r2,-24(fp)
   a07d4:	1884b03a 	or	r2,r3,r2
   a07d8:	108000cc 	andi	r2,r2,3
   a07dc:	1000321e 	bne	r2,zero,a08a8 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
   a07e0:	e0bff917 	ldw	r2,-28(fp)
   a07e4:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
   a07e8:	e0bffa17 	ldw	r2,-24(fp)
   a07ec:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
   a07f0:	00000e06 	br	a082c <memcmp+0x94>
        {
          if (*a1 != *a2) 
   a07f4:	e0bffb17 	ldw	r2,-20(fp)
   a07f8:	10c00017 	ldw	r3,0(r2)
   a07fc:	e0bffc17 	ldw	r2,-16(fp)
   a0800:	10800017 	ldw	r2,0(r2)
   a0804:	18800d1e 	bne	r3,r2,a083c <memcmp+0xa4>
   	    break;
          a1++;
   a0808:	e0bffb17 	ldw	r2,-20(fp)
   a080c:	10800104 	addi	r2,r2,4
   a0810:	e0bffb15 	stw	r2,-20(fp)
          a2++;
   a0814:	e0bffc17 	ldw	r2,-16(fp)
   a0818:	10800104 	addi	r2,r2,4
   a081c:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
   a0820:	e0bfff17 	ldw	r2,-4(fp)
   a0824:	10bfff04 	addi	r2,r2,-4
   a0828:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
   a082c:	e0bfff17 	ldw	r2,-4(fp)
   a0830:	10800128 	cmpgeui	r2,r2,4
   a0834:	103fef1e 	bne	r2,zero,a07f4 <__alt_data_end+0xfffee7f4>
   a0838:	00000106 	br	a0840 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
   a083c:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
   a0840:	e0bffb17 	ldw	r2,-20(fp)
   a0844:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
   a0848:	e0bffc17 	ldw	r2,-16(fp)
   a084c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
   a0850:	00001506 	br	a08a8 <memcmp+0x110>
    {
      if (*s1 != *s2)
   a0854:	e0bff917 	ldw	r2,-28(fp)
   a0858:	10c00003 	ldbu	r3,0(r2)
   a085c:	e0bffa17 	ldw	r2,-24(fp)
   a0860:	10800003 	ldbu	r2,0(r2)
   a0864:	18c03fcc 	andi	r3,r3,255
   a0868:	10803fcc 	andi	r2,r2,255
   a086c:	18800826 	beq	r3,r2,a0890 <memcmp+0xf8>
	return *s1 - *s2;
   a0870:	e0bff917 	ldw	r2,-28(fp)
   a0874:	10800003 	ldbu	r2,0(r2)
   a0878:	10c03fcc 	andi	r3,r2,255
   a087c:	e0bffa17 	ldw	r2,-24(fp)
   a0880:	10800003 	ldbu	r2,0(r2)
   a0884:	10803fcc 	andi	r2,r2,255
   a0888:	1885c83a 	sub	r2,r3,r2
   a088c:	00000b06 	br	a08bc <memcmp+0x124>
      s1++;
   a0890:	e0bff917 	ldw	r2,-28(fp)
   a0894:	10800044 	addi	r2,r2,1
   a0898:	e0bff915 	stw	r2,-28(fp)
      s2++;
   a089c:	e0bffa17 	ldw	r2,-24(fp)
   a08a0:	10800044 	addi	r2,r2,1
   a08a4:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
   a08a8:	e0bfff17 	ldw	r2,-4(fp)
   a08ac:	10ffffc4 	addi	r3,r2,-1
   a08b0:	e0ffff15 	stw	r3,-4(fp)
   a08b4:	103fe71e 	bne	r2,zero,a0854 <__alt_data_end+0xfffee854>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
   a08b8:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   a08bc:	e037883a 	mov	sp,fp
   a08c0:	df000017 	ldw	fp,0(sp)
   a08c4:	dec00104 	addi	sp,sp,4
   a08c8:	f800283a 	ret

000a08cc <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   a08cc:	defff804 	addi	sp,sp,-32
   a08d0:	dfc00715 	stw	ra,28(sp)
   a08d4:	df000615 	stw	fp,24(sp)
   a08d8:	dc000515 	stw	r16,20(sp)
   a08dc:	df000604 	addi	fp,sp,24
   a08e0:	e13ffb15 	stw	r4,-20(fp)
   a08e4:	e17ffc15 	stw	r5,-16(fp)
   a08e8:	e1bffd15 	stw	r6,-12(fp)
   a08ec:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   a08f0:	d0a00517 	ldw	r2,-32748(gp)
   a08f4:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
   a08f8:	8000041e 	bne	r16,zero,a090c <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
   a08fc:	d0a00517 	ldw	r2,-32748(gp)
   a0900:	d0e00517 	ldw	r3,-32748(gp)
   a0904:	1c005304 	addi	r16,r3,332
   a0908:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
   a090c:	80800117 	ldw	r2,4(r16)
   a0910:	10800810 	cmplti	r2,r2,32
   a0914:	1000131e 	bne	r2,zero,a0964 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
   a0918:	00800034 	movhi	r2,0
   a091c:	10800004 	addi	r2,r2,0
   a0920:	1000021e 	bne	r2,zero,a092c <__register_exitproc+0x60>
	return -1;
   a0924:	00bfffc4 	movi	r2,-1
   a0928:	00003e06 	br	a0a24 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
   a092c:	01006404 	movi	r4,400
   a0930:	00000000 	call	0 <__alt_mem_MemoriaDados>
   a0934:	1021883a 	mov	r16,r2
      if (p == NULL)
   a0938:	8000021e 	bne	r16,zero,a0944 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
   a093c:	00bfffc4 	movi	r2,-1
   a0940:	00003806 	br	a0a24 <__register_exitproc+0x158>
	}
      p->_ind = 0;
   a0944:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
   a0948:	d0a00517 	ldw	r2,-32748(gp)
   a094c:	10805217 	ldw	r2,328(r2)
   a0950:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
   a0954:	d0a00517 	ldw	r2,-32748(gp)
   a0958:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
   a095c:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
   a0960:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
   a0964:	e0bffb17 	ldw	r2,-20(fp)
   a0968:	10002426 	beq	r2,zero,a09fc <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
   a096c:	80802204 	addi	r2,r16,136
   a0970:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
   a0974:	80800117 	ldw	r2,4(r16)
   a0978:	e0fffa17 	ldw	r3,-24(fp)
   a097c:	1085883a 	add	r2,r2,r2
   a0980:	1085883a 	add	r2,r2,r2
   a0984:	1885883a 	add	r2,r3,r2
   a0988:	e0fffd17 	ldw	r3,-12(fp)
   a098c:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
   a0990:	e0bffa17 	ldw	r2,-24(fp)
   a0994:	10804017 	ldw	r2,256(r2)
   a0998:	80c00117 	ldw	r3,4(r16)
   a099c:	01000044 	movi	r4,1
   a09a0:	20c6983a 	sll	r3,r4,r3
   a09a4:	10c6b03a 	or	r3,r2,r3
   a09a8:	e0bffa17 	ldw	r2,-24(fp)
   a09ac:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
   a09b0:	80800117 	ldw	r2,4(r16)
   a09b4:	e0fffa17 	ldw	r3,-24(fp)
   a09b8:	10800804 	addi	r2,r2,32
   a09bc:	1085883a 	add	r2,r2,r2
   a09c0:	1085883a 	add	r2,r2,r2
   a09c4:	1885883a 	add	r2,r3,r2
   a09c8:	e0fffe17 	ldw	r3,-8(fp)
   a09cc:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
   a09d0:	e0bffb17 	ldw	r2,-20(fp)
   a09d4:	10800098 	cmpnei	r2,r2,2
   a09d8:	1000081e 	bne	r2,zero,a09fc <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
   a09dc:	e0bffa17 	ldw	r2,-24(fp)
   a09e0:	10804117 	ldw	r2,260(r2)
   a09e4:	80c00117 	ldw	r3,4(r16)
   a09e8:	01000044 	movi	r4,1
   a09ec:	20c6983a 	sll	r3,r4,r3
   a09f0:	10c6b03a 	or	r3,r2,r3
   a09f4:	e0bffa17 	ldw	r2,-24(fp)
   a09f8:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
   a09fc:	80800117 	ldw	r2,4(r16)
   a0a00:	10c00044 	addi	r3,r2,1
   a0a04:	80c00115 	stw	r3,4(r16)
   a0a08:	10800084 	addi	r2,r2,2
   a0a0c:	1085883a 	add	r2,r2,r2
   a0a10:	1085883a 	add	r2,r2,r2
   a0a14:	8085883a 	add	r2,r16,r2
   a0a18:	e0fffc17 	ldw	r3,-16(fp)
   a0a1c:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
   a0a20:	0005883a 	mov	r2,zero
}
   a0a24:	e6ffff04 	addi	sp,fp,-4
   a0a28:	dfc00217 	ldw	ra,8(sp)
   a0a2c:	df000117 	ldw	fp,4(sp)
   a0a30:	dc000017 	ldw	r16,0(sp)
   a0a34:	dec00304 	addi	sp,sp,12
   a0a38:	f800283a 	ret

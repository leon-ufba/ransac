
SoftwareRansac.elf:     file format elf32-littlenios2
SoftwareRansac.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00015130 memsz 0x00015130 flags r-x
    LOAD off    0x00016150 vaddr 0x00055150 paddr 0x0005722c align 2**12
         filesz 0x000020dc memsz 0x000020dc flags rw-
    LOAD off    0x00018308 vaddr 0x00059308 paddr 0x00059308 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014a9c  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  00054ccc  00054ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000020dc  00055150  0005722c  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  00059308  00059308  00018308  2**2
                  ALLOC, SMALL_DATA
  6 .MemoriaDados 00000000  00000000  00000000  0001822c  2**0
                  CONTENTS
  7 .MemoriaPrograma 00000000  00059478  00059478  0001822c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001822c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fb0  00000000  00000000  00018250  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022510  00000000  00000000  00019200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000088b7  00000000  00000000  0003b710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab64  00000000  00000000  00043fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000264c  00000000  00000000  0004eb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000411e  00000000  00000000  00051178  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008f90  00000000  00000000  00055296  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0005e228  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013e0  00000000  00000000  0005e238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00062a1e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  00062a21  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00062a2c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00062a2d  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00062a2e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00062a37  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00062a40  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000010  00000000  00000000  00062a49  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000051  00000000  00000000  00062a59  2**0
                  CONTENTS, READONLY
 27 .jdi          0000567a  00000000  00000000  00062aaa  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041900  00000000  00000000  00068124  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00054ccc l    d  .rodata	00000000 .rodata
00055150 l    d  .rwdata	00000000 .rwdata
00059308 l    d  .bss	00000000 .bss
00000000 l    d  .MemoriaDados	00000000 .MemoriaDados
00059478 l    d  .MemoriaPrograma	00000000 .MemoriaPrograma
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SoftwareRansac_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 ransac.c
00000000 l    df *ABS*	00000000 s_atan.c
00054d4c l     O .rodata	00000020 atanhi
00054d6c l     O .rodata	00000020 atanlo
00054d8c l     O .rodata	00000058 aT
000571dc l     O .rwdata	00000008 one
000571e4 l     O .rwdata	00000008 huge
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00044f48 l     F .text	000000f0 __sbprintf
00047170 l     F .text	0000020c cvt
0004737c l     F .text	00000140 exponent
00054f46 l     O .rodata	00000010 blanks.4403
00054f56 l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004765c l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00049978 l     F .text	000000f4 std
00059308 l     O .bss	00000004 __sfp_lock
0005930c l     O .bss	00000004 __sinit_lock
00049e8c l     F .text	00000024 __fp_lock
00049eb0 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0005572c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00055b50 l     O .rwdata	00000038 lconv
00055b88 l     O .rwdata	00000020 lc_ctype_charset
00055ba8 l     O .rwdata	00000020 lc_message_charset
0005931c l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
0004b1f0 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000550ac l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004f524 l     F .text	000000f0 __sbprintf
00055102 l     O .rodata	00000010 blanks.4348
00055112 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00052484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00052598 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000525c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000526b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000527a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0005288c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00052a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005721c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00052cdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00052e18 l     F .text	00000034 alt_dev_reg
00056178 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000530f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000532fc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00053a80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00053ee0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00054040 l     F .text	0000003c alt_get_errno
0005407c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0005934c l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
00059348 g     O .bss	00000004 alt_instruction_exception_handler
0004e02c g     F .text	000000b0 _mprec_log10
0004e1ac g     F .text	00000134 __any_on
00051024 g     F .text	00000060 _isatty_r
00055084 g     O .rodata	00000028 __mprec_tinytens
000529a4 g     F .text	0000007c alt_main
00044bf8 g     F .text	00000118 _puts_r
00059378 g     O .bss	00000100 alt_irq
00041f90 g     F .text	00000088 fabs
00051084 g     F .text	00000070 _lseek_r
0005722c g       *ABS*	00000000 __flash_rwdata_start
00052260 g     F .text	00000088 .hidden __eqdf2
00059478 g       *ABS*	00000000 __alt_heap_start
00044b90 g     F .text	00000068 printf
0005130c g     F .text	000000d4 _wcrtomb_r
0004f1b4 g     F .text	000000a0 __sseek
00049d34 g     F .text	000000d8 __sinit
00051164 g     F .text	00000168 __swbuf_r
0004ae20 g     F .text	00000084 _setlocale_r
00049a6c g     F .text	000000bc __sfmoreglue
00052a44 g     F .text	00000024 __malloc_unlock
00040924 g     F .text	00000140 coefficientOfDetermination
0004c464 g     F .text	00000208 memmove
00049d00 g     F .text	00000034 _cleanup
0004c830 g     F .text	00000130 _Balloc
00043470 g     F .text	000000dc .hidden __gtdf2
00054468 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000571d9 g     O .rwdata	00000001 size_2
00050fbc g     F .text	00000068 _fstat_r
0005932c g     O .bss	00000004 errno
0004f0d0 g     F .text	00000030 __seofread
00059334 g     O .bss	00000004 alt_argv
0005f1d8 g       *ABS*	00000000 _gp
00055ff8 g     O .rwdata	00000180 alt_fd_list
0005448c g     F .text	00000090 alt_find_dev
0004c2dc g     F .text	00000188 memcpy
00049cbc g     F .text	00000044 _cleanup_r
00044734 g     F .text	000000dc .hidden __floatsidf
00040570 g     F .text	000000c4 calculateIntersection
00053fc4 g     F .text	0000007c alt_io_redirect
000522e8 g     F .text	000000f4 .hidden __ltdf2
00054ccc g       *ABS*	00000000 __DTOR_END__
00044d10 g     F .text	00000038 puts
000546e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004eed0 g     F .text	00000104 __fpclassifyd
0004df10 g     F .text	0000011c __ratio
0004f614 g     F .text	00000050 __vfiprintf_internal
000534f4 g     F .text	0000021c altera_avalon_jtag_uart_read
00044b2c g     F .text	00000064 _printf_r
00042110 g     F .text	00000064 .hidden __udivsi3
000526f4 g     F .text	000000ac isatty
00054f94 g     O .rodata	000000c8 __mprec_tens
0004aea4 g     F .text	00000024 __locale_charset
00059320 g     O .bss	00000004 __malloc_top_pad
000571f4 g     O .rwdata	00000004 __mb_cur_max
0004af2c g     F .text	00000028 _localeconv_r
0004ce90 g     F .text	00000058 __i2b
0004a684 g     F .text	000005e8 __sfvwrite_r
00040a64 g     F .text	0000029c inliersOutliersMemory
0004efd4 g     F .text	00000060 _sbrk_r
0004113c g     F .text	000000bc squareDistanceBetweenPoints
000510f4 g     F .text	00000070 _read_r
00057214 g     O .rwdata	00000004 alt_max_fd
00050b74 g     F .text	0000012c _fclose_r
00049924 g     F .text	00000054 fflush
00059324 g     O .bss	00000004 __malloc_max_sbrked_mem
00044810 g     F .text	00000110 .hidden __extendsfdf2
000421f4 g     F .text	000008ac .hidden __adddf3
0004dacc g     F .text	00000204 __b2d
00051c9c g     F .text	000005c4 .hidden __umoddi3
000528c8 g     F .text	000000dc lseek
000571f0 g     O .rwdata	00000004 _global_impure_ptr
0004e2e0 g     F .text	00000bf0 _realloc_r
00059478 g       *ABS*	00000000 __bss_end
00053df0 g     F .text	000000f0 alt_iic_isr_register
000411f8 g     F .text	00000384 RANSAC
00054360 g     F .text	00000108 alt_tick
000516a0 g     F .text	000005fc .hidden __udivdi3
00050ecc g     F .text	00000088 _fputwc_r
0005505c g     O .rodata	00000028 __mprec_bigtens
0004cb88 g     F .text	0000018c __s2b
000523dc g     F .text	000000a8 .hidden __floatunsidf
0004d648 g     F .text	00000114 __mcmp
00049ed4 g     F .text	00000040 __fp_lock_all
00053da4 g     F .text	0000004c alt_ic_irq_enabled
000542c4 g     F .text	0000009c alt_alarm_stop
0005933c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00055fd0 g     O .rwdata	00000028 alt_dev_null
00000000 g       *ABS*	00000000 __alt_mem_MemoriaDados
00053a60 g     F .text	00000020 alt_dcache_flush_all
0004cd14 g     F .text	00000090 __hi0bits
000446b4 g     F .text	00000080 .hidden __fixdfsi
0005722c g       *ABS*	00000000 __ram_rwdata_end
0005720c g     O .rwdata	00000008 alt_dev_list
00052d18 g     F .text	00000100 write
00055150 g       *ABS*	00000000 __ram_rodata_end
00052600 g     F .text	000000b8 fstat
000522e8 g     F .text	000000f4 .hidden __ledf2
0004d2d8 g     F .text	00000178 __pow5mult
0004f664 g     F .text	000012dc ___vfiprintf_internal_r
00059310 g     O .bss	00000004 __nlocale_changed
00042174 g     F .text	00000058 .hidden __umodsi3
00059478 g       *ABS*	00000000 end
00040000 g       *ABS*	00000000 __alt_mem_MemoriaPrograma
00053030 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00054ccc g       *ABS*	00000000 __CTOR_LIST__
0005c3c0 g       *ABS*	00000000 __alt_stack_pointer
00044ac8 g     F .text	00000064 .hidden __clzsi2
00053710 g     F .text	00000224 altera_avalon_jtag_uart_write
00049e0c g     F .text	00000020 __sfp_lock_acquire
0004c120 g     F .text	000001bc memchr
00045088 g     F .text	000020e8 ___vfprintf_internal_r
00049f54 g     F .text	00000560 _free_r
0004aec8 g     F .text	00000020 __locale_mb_cur_max
00054aac g     F .text	000001ec __call_exitprocs
00059314 g     O .bss	00000004 __mlocale_changed
000571fc g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00059340 g     O .bss	00000004 _alt_tick_rate
00044d8c g     F .text	000000c8 rand
0004d450 g     F .text	000001f8 __lshift
00059344 g     O .bss	00000004 _alt_nticks
00052aa4 g     F .text	00000104 read
000571d8 g     O .rwdata	00000001 size_1
00052e84 g     F .text	00000048 alt_sys_init
0005493c g     F .text	00000170 __register_exitproc
0004cee8 g     F .text	000003f0 __multiply
0005339c g     F .text	00000068 altera_avalon_jtag_uart_close
000421cc g     F .text	00000028 .hidden __mulsi3
00055150 g       *ABS*	00000000 __ram_rwdata_start
00054ccc g       *ABS*	00000000 __ram_rodata_start
00059350 g     O .bss	00000028 __malloc_current_mallinfo
0004dcd0 g     F .text	00000240 __d2b
00052ecc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00054624 g     F .text	000000c4 alt_get_fd
000509b0 g     F .text	00000060 _close_r
00054808 g     F .text	00000134 memcmp
00052f8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00059478 g       *ABS*	00000000 __alt_stack_base
00052fdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00040634 g     F .text	00000098 getAngleFromModel
000474bc g     F .text	000001a0 __swsetup_r
00042aa0 g     F .text	000009d0 .hidden __divdf3
00049b28 g     F .text	00000194 __sfp
0004e0dc g     F .text	000000d0 __copybits
00055bc8 g     O .rwdata	00000408 __malloc_av_
00049e6c g     F .text	00000020 __sinit_lock_release
0004354c g     F .text	0000086c .hidden __muldf3
0004f034 g     F .text	0000009c __sread
0005451c g     F .text	00000108 alt_find_file
00053abc g     F .text	000000a4 alt_dev_llist_insert
00052a20 g     F .text	00000024 __malloc_lock
00052c2c g     F .text	000000b0 sbrk
0004989c g     F .text	00000088 _fflush_r
00050a10 g     F .text	00000164 _calloc_r
00059308 g       *ABS*	00000000 __bss_start
0004c66c g     F .text	000001c4 memset
0004026c g     F .text	00000304 main
00059338 g     O .bss	00000004 alt_envp
00059328 g     O .bss	00000004 __malloc_max_total_mem
00052f2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000512cc g     F .text	00000040 __swbuf
00044d48 g     F .text	00000044 srand
0004f254 g     F .text	00000054 __sclose
0005c3c0 g       *ABS*	00000000 __alt_heap_limit
00050ca0 g     F .text	00000038 fclose
00044920 g     F .text	000001a8 .hidden __truncdfsf2
00047a20 g     F .text	00001b78 _dtoa_r
0004b5a4 g     F .text	00000b7c _malloc_r
0005151c g     F .text	00000078 __ascii_wctomb
000406cc g     F .text	00000258 leastSquare
00057218 g     O .rwdata	00000004 alt_errno
0004ac6c g     F .text	000000d8 _fwalk
00042018 g     F .text	00000084 .hidden __divsi3
0004a4b4 g     F .text	000001d0 _malloc_trim_r
00054ccc g       *ABS*	00000000 __CTOR_END__
0004f2a8 g     F .text	00000140 strcmp
00054ccc g       *ABS*	00000000 __flash_rodata_start
00054ccc g       *ABS*	00000000 __DTOR_LIST__
00052260 g     F .text	00000088 .hidden __nedf2
00052e4c g     F .text	00000038 alt_irq_init
00052ba8 g     F .text	00000084 alt_release_fd
0004157c g     F .text	00000a14 atan
00054de4 g     O .rodata	00000100 .hidden __clz_tab
00059318 g     O .bss	00000004 _PathLocale
00054784 g     F .text	0000003c atexit
00050940 g     F .text	00000070 _write_r
0004af54 g     F .text	00000040 setlocale
000571ec g     O .rwdata	00000004 _impure_ptr
00059330 g     O .bss	00000004 alt_argc
00049598 g     F .text	00000304 __sflush_r
00053bc0 g     F .text	00000060 _do_dtors
0004af0c g     F .text	00000020 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
0004da00 g     F .text	000000cc __ulp
00049f14 g     F .text	00000040 __fp_unlock_all
00055284 g     O .rwdata	000004a8 coords_2
00057204 g     O .rwdata	00000008 alt_fs_list
00040d00 g     F .text	00000238 inliersOutliers
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004af94 g     F .text	00000030 localeconv
00053c40 g     F .text	00000050 alt_ic_isr_register
0005722c g       *ABS*	00000000 _edata
00055150 g     O .rwdata	00000132 coords_1
00059478 g       *ABS*	00000000 _end
00050cd8 g     F .text	000001f4 __fputwc
00040230 g       *ABS*	00000000 __ram_exceptions_end
00053404 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00040f38 g     F .text	00000204 checkModel
00053d18 g     F .text	0000008c alt_ic_irq_disable
0004f100 g     F .text	000000b4 __swrite
000571f8 g     O .rwdata	00000004 __malloc_trim_threshold
0004aee8 g     F .text	00000024 __locale_msgcharset
000547c0 g     F .text	00000048 exit
0004ad44 g     F .text	000000dc _fwalk_reent
0004d75c g     F .text	000002a4 __mdiff
0004209c g     F .text	00000074 .hidden __modsi3
0005c3c0 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00049e2c g     F .text	00000020 __sfp_lock_release
00054c98 g     F .text	00000034 _exit
00053934 g     F .text	0000012c alt_alarm_start
00051594 g     F .text	0000010c .hidden __muldi3
0004afc4 g     F .text	0000022c __smakebuf_r
00044e54 g     F .text	000000f4 strlen
00054168 g     F .text	0000015c open
00043470 g     F .text	000000dc .hidden __gedf2
00057200 g     O .rwdata	00000004 __wctomb
0004f3e8 g     F .text	0000013c __sprint_r
00053c20 g     F .text	00000020 alt_icache_flush_all
00057220 g     O .rwdata	00000004 alt_priority_mask
00053c90 g     F .text	00000088 alt_ic_irq_enable
00045038 g     F .text	00000050 __vfprintf_internal
000514b8 g     F .text	00000064 _wctomb_r
00043db8 g     F .text	000008fc .hidden __subdf3
0004cda4 g     F .text	000000ec __lo0bits
00057224 g     O .rwdata	00000008 alt_alarm_list
00053b60 g     F .text	00000060 _do_ctors
000513e0 g     F .text	000000d8 wcrtomb
000524c0 g     F .text	000000d8 close
00052808 g     F .text	00000084 alt_load
00050f54 g     F .text	00000068 fputwc
00049e4c g     F .text	00000020 __sinit_lock_acquire
0004c9dc g     F .text	000001ac __multadd
0004c960 g     F .text	0000007c _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a4de04 	addi	r2,r2,-27784
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a4de04 	addi	r2,r2,-27784
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <_gp+0xfffe0f54>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <_gp+0xfffe0f48>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a85c17 	ldw	r2,-24208(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a85c17 	ldw	r2,-24208(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	def0f014 	ori	sp,sp,50112
    movhi gp, %hi(_gp)
   40238:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   4023c:	d6bc7614 	ori	gp,gp,61912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40244:	10a4c214 	ori	r2,r2,37640

    movhi r3, %hi(__bss_end)
   40248:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   4024c:	18e51e14 	ori	r3,r3,38008

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <_gp+0xfffe107c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00528080 	call	52808 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00529a40 	call	529a4 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <_gp+0xfffe1090>

0004026c <main>:
#define END_BASE_ANGLE (int *) 0x00010
#define END_BASE_DATA (int *) 0x0018
#define STEP coords_2
#define SIZE size_2

int main() {
   4026c:	defd8e04 	addi	sp,sp,-2504
   40270:	dfc27115 	stw	ra,2500(sp)
   40274:	df027015 	stw	fp,2496(sp)
   40278:	dc426f15 	stw	r17,2492(sp)
   4027c:	dc026e15 	stw	r16,2488(sp)
   40280:	df027004 	addi	fp,sp,2496
	int *data = END_BASE_DATA;
   40284:	00800604 	movi	r2,24
   40288:	e0bd9615 	stw	r2,-2472(fp)
    Point outliers[MAX_POINTS];
    int temp_data_size = 0;
   4028c:	e03d9715 	stw	zero,-2468(fp)
    int data_size = 0;
   40290:	e03d9115 	stw	zero,-2492(fp)

    //read data_size
    data_size = (int)(SIZE&0xFF);
   40294:	d0a00043 	ldbu	r2,-32767(gp)
   40298:	10803fcc 	andi	r2,r2,255
   4029c:	1080201c 	xori	r2,r2,128
   402a0:	10bfe004 	addi	r2,r2,-128
   402a4:	10803fcc 	andi	r2,r2,255
   402a8:	e0bd9115 	stw	r2,-2492(fp)
    temp_data_size = (2*data_size);
   402ac:	e0bd9117 	ldw	r2,-2492(fp)
   402b0:	1085883a 	add	r2,r2,r2
   402b4:	e0bd9715 	stw	r2,-2468(fp)

    int j = 0;
   402b8:	e03d9215 	stw	zero,-2488(fp)
    for (int i = 0; i<=temp_data_size; i+=1) {
   402bc:	e03d9315 	stw	zero,-2484(fp)
   402c0:	00001f06 	br	40340 <main+0xd4>
    	data[i] = (STEP[X]&0xFF)|(STEP[Y]<<8);
   402c4:	e0bd9317 	ldw	r2,-2484(fp)
   402c8:	1085883a 	add	r2,r2,r2
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1007883a 	mov	r3,r2
   402d4:	e0bd9617 	ldw	r2,-2472(fp)
   402d8:	10c9883a 	add	r4,r2,r3
   402dc:	00800174 	movhi	r2,5
   402e0:	1094a104 	addi	r2,r2,21124
   402e4:	e0fd9217 	ldw	r3,-2488(fp)
   402e8:	18c7883a 	add	r3,r3,r3
   402ec:	18c7883a 	add	r3,r3,r3
   402f0:	10c5883a 	add	r2,r2,r3
   402f4:	10800017 	ldw	r2,0(r2)
   402f8:	11403fcc 	andi	r5,r2,255
   402fc:	e0bd9217 	ldw	r2,-2488(fp)
   40300:	10c00044 	addi	r3,r2,1
   40304:	00800174 	movhi	r2,5
   40308:	1094a104 	addi	r2,r2,21124
   4030c:	18c7883a 	add	r3,r3,r3
   40310:	18c7883a 	add	r3,r3,r3
   40314:	10c5883a 	add	r2,r2,r3
   40318:	10800017 	ldw	r2,0(r2)
   4031c:	1004923a 	slli	r2,r2,8
   40320:	2884b03a 	or	r2,r5,r2
   40324:	20800015 	stw	r2,0(r4)
    	j+=2;
   40328:	e0bd9217 	ldw	r2,-2488(fp)
   4032c:	10800084 	addi	r2,r2,2
   40330:	e0bd9215 	stw	r2,-2488(fp)
    //read data_size
    data_size = (int)(SIZE&0xFF);
    temp_data_size = (2*data_size);

    int j = 0;
    for (int i = 0; i<=temp_data_size; i+=1) {
   40334:	e0bd9317 	ldw	r2,-2484(fp)
   40338:	10800044 	addi	r2,r2,1
   4033c:	e0bd9315 	stw	r2,-2484(fp)
   40340:	e0bd9317 	ldw	r2,-2484(fp)
   40344:	e0fd9717 	ldw	r3,-2468(fp)
   40348:	18bfde0e 	bge	r3,r2,402c4 <_gp+0xfffe10ec>
    	data[i] = (STEP[X]&0xFF)|(STEP[Y]<<8);
    	j+=2;
    }

    if(data_size > MAX_POINTS) data_size = MAX_POINTS;
   4034c:	e0bd9117 	ldw	r2,-2492(fp)
   40350:	10804b50 	cmplti	r2,r2,301
   40354:	1000021e 	bne	r2,zero,40360 <main+0xf4>
   40358:	00804b04 	movi	r2,300
   4035c:	e0bd9115 	stw	r2,-2492(fp)

        // ------------ Calcula primeiro modelo de linha ------------//
    //Posicao inical do robo
    Point start;
    start.x = 0;
   40360:	e03ff015 	stw	zero,-64(fp)
    start.y = 25;
   40364:	00800644 	movi	r2,25
   40368:	e0bff115 	stw	r2,-60(fp)
    RansacResult model;
    Line reference;
	reference.a = 0;
   4036c:	e03ff615 	stw	zero,-40(fp)
	reference.b = 25;
   40370:	00907234 	movhi	r2,16840
   40374:	e0bff715 	stw	r2,-36(fp)

    model = RANSAC(data, &start, outliers, data_size);
   40378:	e0fffa04 	addi	r3,fp,-24
   4037c:	e17d9804 	addi	r5,fp,-2464
   40380:	e13ff004 	addi	r4,fp,-64
   40384:	e0bd9117 	ldw	r2,-2492(fp)
   40388:	d8800015 	stw	r2,0(sp)
   4038c:	280f883a 	mov	r7,r5
   40390:	200d883a 	mov	r6,r4
   40394:	e17d9617 	ldw	r5,-2472(fp)
   40398:	1809883a 	mov	r4,r3
   4039c:	00411f80 	call	411f8 <RANSAC>
   403a0:	e0bffa17 	ldw	r2,-24(fp)
   403a4:	e0bff215 	stw	r2,-56(fp)
   403a8:	e0bffb17 	ldw	r2,-20(fp)
   403ac:	e0bff315 	stw	r2,-52(fp)
   403b0:	e0bffc17 	ldw	r2,-16(fp)
   403b4:	e0bff415 	stw	r2,-48(fp)
   403b8:	e0bffd17 	ldw	r2,-12(fp)
   403bc:	e0bff515 	stw	r2,-44(fp)


    // ------------ Variaveis para resultado final -------------//
    Point intersection = { 0.0, 0.0 };
   403c0:	e03ff815 	stw	zero,-32(fp)
   403c4:	e03ff915 	stw	zero,-28(fp)
    int distance = 0.0;
   403c8:	e03d9415 	stw	zero,-2480(fp)
    float angle = 0.0;
   403cc:	e03d9515 	stw	zero,-2476(fp)

	if  (model.bestModel.a == 0.0){
   403d0:	e0bff217 	ldw	r2,-56(fp)
   403d4:	0007883a 	mov	r3,zero
   403d8:	10c5f8b2 	custom	226,r2,r2,r3
   403dc:	10000d1e 	bne	r2,zero,40414 <main+0x1a8>
		distance = data[data_size-1]&0xFF;
   403e0:	e0fd9117 	ldw	r3,-2492(fp)
   403e4:	00900034 	movhi	r2,16384
   403e8:	10bfffc4 	addi	r2,r2,-1
   403ec:	1885883a 	add	r2,r3,r2
   403f0:	1085883a 	add	r2,r2,r2
   403f4:	1085883a 	add	r2,r2,r2
   403f8:	1007883a 	mov	r3,r2
   403fc:	e0bd9617 	ldw	r2,-2472(fp)
   40400:	10c5883a 	add	r2,r2,r3
   40404:	10800017 	ldw	r2,0(r2)
   40408:	10803fcc 	andi	r2,r2,255
   4040c:	e0bd9415 	stw	r2,-2480(fp)
   40410:	00001506 	br	40468 <main+0x1fc>
	}
	else
	{
		intersection = calculateIntersection(&model.bestModel,  &reference);
   40414:	e0fff604 	addi	r3,fp,-40
   40418:	e0bff204 	addi	r2,fp,-56
   4041c:	180b883a 	mov	r5,r3
   40420:	1009883a 	mov	r4,r2
   40424:	00405700 	call	40570 <calculateIntersection>
   40428:	1009883a 	mov	r4,r2
   4042c:	180b883a 	mov	r5,r3
   40430:	e13ff815 	stw	r4,-32(fp)
   40434:	e17ff915 	stw	r5,-28(fp)
		distance = (int)squareDistanceBetweenPoints(&intersection, &start);
   40438:	e0fff004 	addi	r3,fp,-64
   4043c:	e0bff804 	addi	r2,fp,-32
   40440:	180b883a 	mov	r5,r3
   40444:	1009883a 	mov	r4,r2
   40448:	004113c0 	call	4113c <squareDistanceBetweenPoints>
   4044c:	1007883a 	mov	r3,r2
   40450:	1805fe72 	custom	249,r2,r3,zero
   40454:	e0bd9415 	stw	r2,-2480(fp)
		angle = getAngleFromModel (model.bestModel.a);
   40458:	e0bff217 	ldw	r2,-56(fp)
   4045c:	1009883a 	mov	r4,r2
   40460:	00406340 	call	40634 <getAngleFromModel>
   40464:	e0bd9515 	stw	r2,-2476(fp)
	}

	printf("-----LOG-----\n");
   40468:	01000174 	movhi	r4,5
   4046c:	21133304 	addi	r4,r4,19660
   40470:	0044d100 	call	44d10 <puts>
    printf("%d %d\n", intersection.x, intersection.y);
   40474:	e0bff817 	ldw	r2,-32(fp)
   40478:	e0fff917 	ldw	r3,-28(fp)
   4047c:	180d883a 	mov	r6,r3
   40480:	100b883a 	mov	r5,r2
   40484:	01000174 	movhi	r4,5
   40488:	21133704 	addi	r4,r4,19676
   4048c:	0044b900 	call	44b90 <printf>
    printf("-----RESULTADO-----\n");
   40490:	01000174 	movhi	r4,5
   40494:	21133904 	addi	r4,r4,19684
   40498:	0044d100 	call	44d10 <puts>
    printf("%f %f\n", model.bestModel.a, model.bestModel.b );
   4049c:	e0bff217 	ldw	r2,-56(fp)
   404a0:	1009883a 	mov	r4,r2
   404a4:	00448100 	call	44810 <__extendsfdf2>
   404a8:	1021883a 	mov	r16,r2
   404ac:	1823883a 	mov	r17,r3
   404b0:	e0bff317 	ldw	r2,-52(fp)
   404b4:	1009883a 	mov	r4,r2
   404b8:	00448100 	call	44810 <__extendsfdf2>
   404bc:	1009883a 	mov	r4,r2
   404c0:	180b883a 	mov	r5,r3
   404c4:	d9400015 	stw	r5,0(sp)
   404c8:	200f883a 	mov	r7,r4
   404cc:	800b883a 	mov	r5,r16
   404d0:	880d883a 	mov	r6,r17
   404d4:	01000174 	movhi	r4,5
   404d8:	21133e04 	addi	r4,r4,19704
   404dc:	0044b900 	call	44b90 <printf>
    printf("%f\n", model.bestFit);
   404e0:	e0bff417 	ldw	r2,-48(fp)
   404e4:	1009883a 	mov	r4,r2
   404e8:	00448100 	call	44810 <__extendsfdf2>
   404ec:	100d883a 	mov	r6,r2
   404f0:	180f883a 	mov	r7,r3
   404f4:	300b883a 	mov	r5,r6
   404f8:	380d883a 	mov	r6,r7
   404fc:	01000174 	movhi	r4,5
   40500:	21134004 	addi	r4,r4,19712
   40504:	0044b900 	call	44b90 <printf>
    printf("%d\n", model.bestQty);
   40508:	e0bff517 	ldw	r2,-44(fp)
   4050c:	100b883a 	mov	r5,r2
   40510:	01000174 	movhi	r4,5
   40514:	21134104 	addi	r4,r4,19716
   40518:	0044b900 	call	44b90 <printf>
    printf("%f\n", angle);
   4051c:	e13d9517 	ldw	r4,-2476(fp)
   40520:	00448100 	call	44810 <__extendsfdf2>
   40524:	100d883a 	mov	r6,r2
   40528:	180f883a 	mov	r7,r3
   4052c:	300b883a 	mov	r5,r6
   40530:	380d883a 	mov	r6,r7
   40534:	01000174 	movhi	r4,5
   40538:	21134004 	addi	r4,r4,19712
   4053c:	0044b900 	call	44b90 <printf>
    printf("%d\n", distance);
   40540:	e17d9417 	ldw	r5,-2480(fp)
   40544:	01000174 	movhi	r4,5
   40548:	21134104 	addi	r4,r4,19716
   4054c:	0044b900 	call	44b90 <printf>

    return 0;
   40550:	0005883a 	mov	r2,zero
}
   40554:	e6fffe04 	addi	sp,fp,-8
   40558:	dfc00317 	ldw	ra,12(sp)
   4055c:	df000217 	ldw	fp,8(sp)
   40560:	dc400117 	ldw	r17,4(sp)
   40564:	dc000017 	ldw	r16,0(sp)
   40568:	dec00404 	addi	sp,sp,16
   4056c:	f800283a 	ret

00040570 <calculateIntersection>:
// enderecos do medidor de desempenho
#define MEDIDOR_LEITURA (int *) 0x1100c
#define MEDIDOR_ESCRITA (int *) 0x11008


Point calculateIntersection(Line* k, Line* l) {
   40570:	defffb04 	addi	sp,sp,-20
   40574:	df000415 	stw	fp,16(sp)
   40578:	df000404 	addi	fp,sp,16
   4057c:	e13ffe15 	stw	r4,-8(fp)
   40580:	e17fff15 	stw	r5,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40584:	00800074 	movhi	r2,1
   40588:	10840204 	addi	r2,r2,4104
   4058c:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   40590:	00800074 	movhi	r2,1
   40594:	10840204 	addi	r2,r2,4104
   40598:	00c00044 	movi	r3,1
   4059c:	10c00015 	stw	r3,0(r2)
	Point intersection;
    intersection.x = (l->b - k->b) / (k->a - l->a);
   405a0:	e0bfff17 	ldw	r2,-4(fp)
   405a4:	10c00117 	ldw	r3,4(r2)
   405a8:	e13ffe17 	ldw	r4,-8(fp)
   405ac:	20800117 	ldw	r2,4(r4)
   405b0:	1887ffb2 	custom	254,r3,r3,r2
   405b4:	e0bffe17 	ldw	r2,-8(fp)
   405b8:	11000017 	ldw	r4,0(r2)
   405bc:	e17fff17 	ldw	r5,-4(fp)
   405c0:	28800017 	ldw	r2,0(r5)
   405c4:	2085ffb2 	custom	254,r2,r4,r2
   405c8:	1885fff2 	custom	255,r2,r3,r2
   405cc:	1005fe72 	custom	249,r2,r2,zero
   405d0:	e0bffc15 	stw	r2,-16(fp)
    intersection.y = (k->a * intersection.x + k->b);
   405d4:	e0bffe17 	ldw	r2,-8(fp)
   405d8:	10c00017 	ldw	r3,0(r2)
   405dc:	e0bffc17 	ldw	r2,-16(fp)
   405e0:	1005feb2 	custom	250,r2,r2,zero
   405e4:	1887ff32 	custom	252,r3,r3,r2
   405e8:	e13ffe17 	ldw	r4,-8(fp)
   405ec:	20800117 	ldw	r2,4(r4)
   405f0:	1885ff72 	custom	253,r2,r3,r2
   405f4:	1005fe72 	custom	249,r2,r2,zero
   405f8:	e0bffd15 	stw	r2,-12(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   405fc:	00800074 	movhi	r2,1
   40600:	10840204 	addi	r2,r2,4104
   40604:	00c00084 	movi	r3,2
   40608:	10c00015 	stw	r3,0(r2)
    return intersection;
   4060c:	e0bffc17 	ldw	r2,-16(fp)
   40610:	e0fffd17 	ldw	r3,-12(fp)
   40614:	1009883a 	mov	r4,r2
   40618:	180b883a 	mov	r5,r3
}
   4061c:	2005883a 	mov	r2,r4
   40620:	2807883a 	mov	r3,r5
   40624:	e037883a 	mov	sp,fp
   40628:	df000017 	ldw	fp,0(sp)
   4062c:	dec00104 	addi	sp,sp,4
   40630:	f800283a 	ret

00040634 <getAngleFromModel>:

float getAngleFromModel(float a) {
   40634:	defffc04 	addi	sp,sp,-16
   40638:	dfc00315 	stw	ra,12(sp)
   4063c:	df000215 	stw	fp,8(sp)
   40640:	df000204 	addi	fp,sp,8
   40644:	e13fff15 	stw	r4,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40648:	00800074 	movhi	r2,1
   4064c:	10840204 	addi	r2,r2,4104
   40650:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   40654:	00800074 	movhi	r2,1
   40658:	10840204 	addi	r2,r2,4104
   4065c:	00c00044 	movi	r3,1
   40660:	10c00015 	stw	r3,0(r2)
	float radian = atan(a);
   40664:	e13fff17 	ldw	r4,-4(fp)
   40668:	00448100 	call	44810 <__extendsfdf2>
   4066c:	100b883a 	mov	r5,r2
   40670:	180d883a 	mov	r6,r3
   40674:	2809883a 	mov	r4,r5
   40678:	300b883a 	mov	r5,r6
   4067c:	004157c0 	call	4157c <atan>
   40680:	100b883a 	mov	r5,r2
   40684:	180d883a 	mov	r6,r3
   40688:	2809883a 	mov	r4,r5
   4068c:	300b883a 	mov	r5,r6
   40690:	00449200 	call	44920 <__truncdfsf2>
   40694:	1007883a 	mov	r3,r2
   40698:	e0fffe15 	stw	r3,-8(fp)
	*MEDIDOR_ESCRITA = 2; // para pausar a contagem
   4069c:	00800074 	movhi	r2,1
   406a0:	10840204 	addi	r2,r2,4104
   406a4:	00c00084 	movi	r3,2
   406a8:	10c00015 	stw	r3,0(r2)
    return radian;
   406ac:	e0bffe17 	ldw	r2,-8(fp)
   406b0:	1007883a 	mov	r3,r2
}
   406b4:	1805883a 	mov	r2,r3
   406b8:	e037883a 	mov	sp,fp
   406bc:	dfc00117 	ldw	ra,4(sp)
   406c0:	df000017 	ldw	fp,0(sp)
   406c4:	dec00204 	addi	sp,sp,8
   406c8:	f800283a 	ret

000406cc <leastSquare>:

Line leastSquare(Point* data, int size) {
   406cc:	deffed04 	addi	sp,sp,-76
   406d0:	dfc01215 	stw	ra,72(sp)
   406d4:	df001115 	stw	fp,68(sp)
   406d8:	df001104 	addi	fp,sp,68
   406dc:	e13ffe15 	stw	r4,-8(fp)
   406e0:	e17fff15 	stw	r5,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   406e4:	00800074 	movhi	r2,1
   406e8:	10840204 	addi	r2,r2,4104
   406ec:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   406f0:	00800074 	movhi	r2,1
   406f4:	10840204 	addi	r2,r2,4104
   406f8:	00c00044 	movi	r3,1
   406fc:	10c00015 	stw	r3,0(r2)
	float sx = 0;
   40700:	e03fef15 	stw	zero,-68(fp)
    float sy = 0;
   40704:	e03ff015 	stw	zero,-64(fp)
    float sxy = 0;
   40708:	e03ff115 	stw	zero,-60(fp)
    float sx2 = 0;
   4070c:	e03ff215 	stw	zero,-56(fp)
    if (size == 0) {
   40710:	e0bfff17 	ldw	r2,-4(fp)
   40714:	1000061e 	bne	r2,zero,40730 <leastSquare+0x64>
        Line line = {INFINITY, 0};
   40718:	009fe034 	movhi	r2,32640
   4071c:	e0bffa15 	stw	r2,-24(fp)
   40720:	e03ffb15 	stw	zero,-20(fp)
        return line;
   40724:	e0bffa17 	ldw	r2,-24(fp)
   40728:	e0fffb17 	ldw	r3,-20(fp)
   4072c:	00007406 	br	40900 <leastSquare+0x234>
    }
    for (int i = 0; i < size; i++) {
   40730:	e03ff315 	stw	zero,-52(fp)
   40734:	00003506 	br	4080c <leastSquare+0x140>
        sx += data[i].x;
   40738:	e0bff317 	ldw	r2,-52(fp)
   4073c:	100490fa 	slli	r2,r2,3
   40740:	e0fffe17 	ldw	r3,-8(fp)
   40744:	1885883a 	add	r2,r3,r2
   40748:	10800017 	ldw	r2,0(r2)
   4074c:	1005feb2 	custom	250,r2,r2,zero
   40750:	e0ffef17 	ldw	r3,-68(fp)
   40754:	1885ff72 	custom	253,r2,r3,r2
   40758:	e0bfef15 	stw	r2,-68(fp)
        sy += data[i].y;
   4075c:	e0bff317 	ldw	r2,-52(fp)
   40760:	100490fa 	slli	r2,r2,3
   40764:	e0fffe17 	ldw	r3,-8(fp)
   40768:	1885883a 	add	r2,r3,r2
   4076c:	10800117 	ldw	r2,4(r2)
   40770:	1005feb2 	custom	250,r2,r2,zero
   40774:	e0fff017 	ldw	r3,-64(fp)
   40778:	1885ff72 	custom	253,r2,r3,r2
   4077c:	e0bff015 	stw	r2,-64(fp)
        sxy += data[i].x * data[i].y;
   40780:	e0bff317 	ldw	r2,-52(fp)
   40784:	100490fa 	slli	r2,r2,3
   40788:	e0fffe17 	ldw	r3,-8(fp)
   4078c:	1885883a 	add	r2,r3,r2
   40790:	11000017 	ldw	r4,0(r2)
   40794:	e0bff317 	ldw	r2,-52(fp)
   40798:	100490fa 	slli	r2,r2,3
   4079c:	e0fffe17 	ldw	r3,-8(fp)
   407a0:	1885883a 	add	r2,r3,r2
   407a4:	10800117 	ldw	r2,4(r2)
   407a8:	100b883a 	mov	r5,r2
   407ac:	00421cc0 	call	421cc <__mulsi3>
   407b0:	1005feb2 	custom	250,r2,r2,zero
   407b4:	e0fff117 	ldw	r3,-60(fp)
   407b8:	1885ff72 	custom	253,r2,r3,r2
   407bc:	e0bff115 	stw	r2,-60(fp)
        sx2 += data[i].x * data[i].x;
   407c0:	e0bff317 	ldw	r2,-52(fp)
   407c4:	100490fa 	slli	r2,r2,3
   407c8:	e0fffe17 	ldw	r3,-8(fp)
   407cc:	1885883a 	add	r2,r3,r2
   407d0:	11000017 	ldw	r4,0(r2)
   407d4:	e0bff317 	ldw	r2,-52(fp)
   407d8:	100490fa 	slli	r2,r2,3
   407dc:	e0fffe17 	ldw	r3,-8(fp)
   407e0:	1885883a 	add	r2,r3,r2
   407e4:	10800017 	ldw	r2,0(r2)
   407e8:	100b883a 	mov	r5,r2
   407ec:	00421cc0 	call	421cc <__mulsi3>
   407f0:	1005feb2 	custom	250,r2,r2,zero
   407f4:	e0fff217 	ldw	r3,-56(fp)
   407f8:	1885ff72 	custom	253,r2,r3,r2
   407fc:	e0bff215 	stw	r2,-56(fp)
    float sx2 = 0;
    if (size == 0) {
        Line line = {INFINITY, 0};
        return line;
    }
    for (int i = 0; i < size; i++) {
   40800:	e0bff317 	ldw	r2,-52(fp)
   40804:	10800044 	addi	r2,r2,1
   40808:	e0bff315 	stw	r2,-52(fp)
   4080c:	e0fff317 	ldw	r3,-52(fp)
   40810:	e0bfff17 	ldw	r2,-4(fp)
   40814:	18bfc816 	blt	r3,r2,40738 <_gp+0xfffe1560>
        sx += data[i].x;
        sy += data[i].y;
        sxy += data[i].x * data[i].y;
        sx2 += data[i].x * data[i].x;
    }
    float avg_y = sy / size;
   40818:	e0bfff17 	ldw	r2,-4(fp)
   4081c:	1005feb2 	custom	250,r2,r2,zero
   40820:	e0fff017 	ldw	r3,-64(fp)
   40824:	1885fff2 	custom	255,r2,r3,r2
   40828:	e0bff415 	stw	r2,-48(fp)
    float den = (size * sx2 - sx * sx);
   4082c:	e0bfff17 	ldw	r2,-4(fp)
   40830:	1007feb2 	custom	250,r3,r2,zero
   40834:	e0bff217 	ldw	r2,-56(fp)
   40838:	1887ff32 	custom	252,r3,r3,r2
   4083c:	e13fef17 	ldw	r4,-68(fp)
   40840:	e0bfef17 	ldw	r2,-68(fp)
   40844:	2085ff32 	custom	252,r2,r4,r2
   40848:	1885ffb2 	custom	254,r2,r3,r2
   4084c:	e0bff515 	stw	r2,-44(fp)
    if (den == 0) {
   40850:	e0bff517 	ldw	r2,-44(fp)
   40854:	0007883a 	mov	r3,zero
   40858:	10c5f8b2 	custom	226,r2,r2,r3
   4085c:	1000071e 	bne	r2,zero,4087c <leastSquare+0x1b0>
        Line line = {INFINITY, avg_y};
   40860:	009fe034 	movhi	r2,32640
   40864:	e0bffc15 	stw	r2,-16(fp)
   40868:	e0bff417 	ldw	r2,-48(fp)
   4086c:	e0bffd15 	stw	r2,-12(fp)
        return line;
   40870:	e0bffc17 	ldw	r2,-16(fp)
   40874:	e0fffd17 	ldw	r3,-12(fp)
   40878:	00002106 	br	40900 <leastSquare+0x234>
    }
    float a = (size * sxy - sx * sy) / den;
   4087c:	e0bfff17 	ldw	r2,-4(fp)
   40880:	1007feb2 	custom	250,r3,r2,zero
   40884:	e0bff117 	ldw	r2,-60(fp)
   40888:	1887ff32 	custom	252,r3,r3,r2
   4088c:	e13fef17 	ldw	r4,-68(fp)
   40890:	e0bff017 	ldw	r2,-64(fp)
   40894:	2085ff32 	custom	252,r2,r4,r2
   40898:	1887ffb2 	custom	254,r3,r3,r2
   4089c:	e0bff517 	ldw	r2,-44(fp)
   408a0:	1885fff2 	custom	255,r2,r3,r2
   408a4:	e0bff615 	stw	r2,-40(fp)
    float b = (sy / size) - a * (sx / size);
   408a8:	e0bfff17 	ldw	r2,-4(fp)
   408ac:	1005feb2 	custom	250,r2,r2,zero
   408b0:	e0fff017 	ldw	r3,-64(fp)
   408b4:	1887fff2 	custom	255,r3,r3,r2
   408b8:	e0bfff17 	ldw	r2,-4(fp)
   408bc:	1005feb2 	custom	250,r2,r2,zero
   408c0:	e13fef17 	ldw	r4,-68(fp)
   408c4:	2089fff2 	custom	255,r4,r4,r2
   408c8:	e0bff617 	ldw	r2,-40(fp)
   408cc:	2085ff32 	custom	252,r2,r4,r2
   408d0:	1885ffb2 	custom	254,r2,r3,r2
   408d4:	e0bff715 	stw	r2,-36(fp)
    Line line = {a, b};
   408d8:	e0bff617 	ldw	r2,-40(fp)
   408dc:	e0bff815 	stw	r2,-32(fp)
   408e0:	e0bff717 	ldw	r2,-36(fp)
   408e4:	e0bff915 	stw	r2,-28(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   408e8:	00800074 	movhi	r2,1
   408ec:	10840204 	addi	r2,r2,4104
   408f0:	00c00084 	movi	r3,2
   408f4:	10c00015 	stw	r3,0(r2)
    return line;
   408f8:	e0bff817 	ldw	r2,-32(fp)
   408fc:	e0fff917 	ldw	r3,-28(fp)
   40900:	1009883a 	mov	r4,r2
   40904:	180b883a 	mov	r5,r3
}
   40908:	2005883a 	mov	r2,r4
   4090c:	2807883a 	mov	r3,r5
   40910:	e037883a 	mov	sp,fp
   40914:	dfc00117 	ldw	ra,4(sp)
   40918:	df000017 	ldw	fp,0(sp)
   4091c:	dec00204 	addi	sp,sp,8
   40920:	f800283a 	ret

00040924 <coefficientOfDetermination>:

float coefficientOfDetermination(Point* data, Line model, float avg_y, int data_size) {
   40924:	defff404 	addi	sp,sp,-48
   40928:	df000b15 	stw	fp,44(sp)
   4092c:	df000b04 	addi	fp,sp,44
   40930:	e13ffc15 	stw	r4,-16(fp)
   40934:	e17ffd15 	stw	r5,-12(fp)
   40938:	e1bffe15 	stw	r6,-8(fp)
   4093c:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40940:	00800074 	movhi	r2,1
   40944:	10840204 	addi	r2,r2,4104
   40948:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   4094c:	00800074 	movhi	r2,1
   40950:	10840204 	addi	r2,r2,4104
   40954:	00c00044 	movi	r3,1
   40958:	10c00015 	stw	r3,0(r2)
	float ss_res = 0;
   4095c:	e03ff515 	stw	zero,-44(fp)
    float ss_tot = 0;
   40960:	e03ff615 	stw	zero,-40(fp)
    for (int i = 0; i < data_size; i++) {
   40964:	e03ff715 	stw	zero,-36(fp)
   40968:	00002c06 	br	40a1c <coefficientOfDetermination+0xf8>
        float f = model.a * data[i].x + model.b;
   4096c:	e0fffd17 	ldw	r3,-12(fp)
   40970:	e0bff717 	ldw	r2,-36(fp)
   40974:	100490fa 	slli	r2,r2,3
   40978:	e13ffc17 	ldw	r4,-16(fp)
   4097c:	2085883a 	add	r2,r4,r2
   40980:	10800017 	ldw	r2,0(r2)
   40984:	1005feb2 	custom	250,r2,r2,zero
   40988:	1887ff32 	custom	252,r3,r3,r2
   4098c:	e0bffe17 	ldw	r2,-8(fp)
   40990:	1885ff72 	custom	253,r2,r3,r2
   40994:	e0bff815 	stw	r2,-32(fp)
        float y_f = (data[i].y - f);
   40998:	e0bff717 	ldw	r2,-36(fp)
   4099c:	100490fa 	slli	r2,r2,3
   409a0:	e0fffc17 	ldw	r3,-16(fp)
   409a4:	1885883a 	add	r2,r3,r2
   409a8:	10800117 	ldw	r2,4(r2)
   409ac:	1007feb2 	custom	250,r3,r2,zero
   409b0:	e0bff817 	ldw	r2,-32(fp)
   409b4:	1885ffb2 	custom	254,r2,r3,r2
   409b8:	e0bff915 	stw	r2,-28(fp)
        float y_y = (data[i].y - avg_y);
   409bc:	e0bff717 	ldw	r2,-36(fp)
   409c0:	100490fa 	slli	r2,r2,3
   409c4:	e0fffc17 	ldw	r3,-16(fp)
   409c8:	1885883a 	add	r2,r3,r2
   409cc:	10800117 	ldw	r2,4(r2)
   409d0:	1007feb2 	custom	250,r3,r2,zero
   409d4:	e0bfff17 	ldw	r2,-4(fp)
   409d8:	1885ffb2 	custom	254,r2,r3,r2
   409dc:	e0bffa15 	stw	r2,-24(fp)
        ss_res += y_f * y_f;
   409e0:	e0fff917 	ldw	r3,-28(fp)
   409e4:	e0bff917 	ldw	r2,-28(fp)
   409e8:	1885ff32 	custom	252,r2,r3,r2
   409ec:	e0fff517 	ldw	r3,-44(fp)
   409f0:	1885ff72 	custom	253,r2,r3,r2
   409f4:	e0bff515 	stw	r2,-44(fp)
        ss_tot += y_y * y_y;
   409f8:	e0fffa17 	ldw	r3,-24(fp)
   409fc:	e0bffa17 	ldw	r2,-24(fp)
   40a00:	1885ff32 	custom	252,r2,r3,r2
   40a04:	e0fff617 	ldw	r3,-40(fp)
   40a08:	1885ff72 	custom	253,r2,r3,r2
   40a0c:	e0bff615 	stw	r2,-40(fp)
float coefficientOfDetermination(Point* data, Line model, float avg_y, int data_size) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
	float ss_res = 0;
    float ss_tot = 0;
    for (int i = 0; i < data_size; i++) {
   40a10:	e0bff717 	ldw	r2,-36(fp)
   40a14:	10800044 	addi	r2,r2,1
   40a18:	e0bff715 	stw	r2,-36(fp)
   40a1c:	e0fff717 	ldw	r3,-36(fp)
   40a20:	e0800117 	ldw	r2,4(fp)
   40a24:	18bfd116 	blt	r3,r2,4096c <_gp+0xfffe1794>
        float y_f = (data[i].y - f);
        float y_y = (data[i].y - avg_y);
        ss_res += y_f * y_f;
        ss_tot += y_y * y_y;
    }
    float r = (ss_res / ss_tot);
   40a28:	e0fff517 	ldw	r3,-44(fp)
   40a2c:	e0bff617 	ldw	r2,-40(fp)
   40a30:	1885fff2 	custom	255,r2,r3,r2
   40a34:	e0bffb15 	stw	r2,-20(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   40a38:	00800074 	movhi	r2,1
   40a3c:	10840204 	addi	r2,r2,4104
   40a40:	00c00084 	movi	r3,2
   40a44:	10c00015 	stw	r3,0(r2)
    return r;
   40a48:	e0bffb17 	ldw	r2,-20(fp)
   40a4c:	1007883a 	mov	r3,r2
}
   40a50:	1805883a 	mov	r2,r3
   40a54:	e037883a 	mov	sp,fp
   40a58:	df000017 	ldw	fp,0(sp)
   40a5c:	dec00104 	addi	sp,sp,4
   40a60:	f800283a 	ret

00040a64 <inliersOutliersMemory>:

void inliersOutliersMemory(int* data, Line model, Point* inliers, Point* outliers, int dataSize, int* inlierSize, int* outlierSize) {
   40a64:	defff504 	addi	sp,sp,-44
   40a68:	dfc00a15 	stw	ra,40(sp)
   40a6c:	df000915 	stw	fp,36(sp)
   40a70:	df000904 	addi	fp,sp,36
   40a74:	e13ffc15 	stw	r4,-16(fp)
   40a78:	e17ffd15 	stw	r5,-12(fp)
   40a7c:	e1bffe15 	stw	r6,-8(fp)
   40a80:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40a84:	00800074 	movhi	r2,1
   40a88:	10840204 	addi	r2,r2,4104
   40a8c:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   40a90:	00800074 	movhi	r2,1
   40a94:	10840204 	addi	r2,r2,4104
   40a98:	00c00044 	movi	r3,1
   40a9c:	10c00015 	stw	r3,0(r2)
    float square2 = E * E * (model.a * model.a + 1.0);
   40aa0:	e0fffd17 	ldw	r3,-12(fp)
   40aa4:	e0bffd17 	ldw	r2,-12(fp)
   40aa8:	1885ff32 	custom	252,r2,r3,r2
   40aac:	1009883a 	mov	r4,r2
   40ab0:	00448100 	call	44810 <__extendsfdf2>
   40ab4:	1011883a 	mov	r8,r2
   40ab8:	1813883a 	mov	r9,r3
   40abc:	000d883a 	mov	r6,zero
   40ac0:	01cffc34 	movhi	r7,16368
   40ac4:	4009883a 	mov	r4,r8
   40ac8:	480b883a 	mov	r5,r9
   40acc:	00421f40 	call	421f4 <__adddf3>
   40ad0:	1009883a 	mov	r4,r2
   40ad4:	180b883a 	mov	r5,r3
   40ad8:	2005883a 	mov	r2,r4
   40adc:	2807883a 	mov	r3,r5
   40ae0:	000d883a 	mov	r6,zero
   40ae4:	01d00434 	movhi	r7,16400
   40ae8:	1009883a 	mov	r4,r2
   40aec:	180b883a 	mov	r5,r3
   40af0:	004354c0 	call	4354c <__muldf3>
   40af4:	1009883a 	mov	r4,r2
   40af8:	180b883a 	mov	r5,r3
   40afc:	2005883a 	mov	r2,r4
   40b00:	2807883a 	mov	r3,r5
   40b04:	1009883a 	mov	r4,r2
   40b08:	180b883a 	mov	r5,r3
   40b0c:	00449200 	call	44920 <__truncdfsf2>
   40b10:	1007883a 	mov	r3,r2
   40b14:	e0fff815 	stw	r3,-32(fp)
    for (int k = 0; k < dataSize; k++) {
   40b18:	e03ff715 	stw	zero,-36(fp)
   40b1c:	00006b06 	br	40ccc <inliersOutliersMemory+0x268>
    	int tempX = data[k]&0xFF;
   40b20:	e0bff717 	ldw	r2,-36(fp)
   40b24:	1085883a 	add	r2,r2,r2
   40b28:	1085883a 	add	r2,r2,r2
   40b2c:	1007883a 	mov	r3,r2
   40b30:	e0bffc17 	ldw	r2,-16(fp)
   40b34:	10c5883a 	add	r2,r2,r3
   40b38:	10800017 	ldw	r2,0(r2)
   40b3c:	10803fcc 	andi	r2,r2,255
   40b40:	e0bff915 	stw	r2,-28(fp)
    	int tempY = (data[k]>>8)&0xFF ;
   40b44:	e0bff717 	ldw	r2,-36(fp)
   40b48:	1085883a 	add	r2,r2,r2
   40b4c:	1085883a 	add	r2,r2,r2
   40b50:	1007883a 	mov	r3,r2
   40b54:	e0bffc17 	ldw	r2,-16(fp)
   40b58:	10c5883a 	add	r2,r2,r3
   40b5c:	10800017 	ldw	r2,0(r2)
   40b60:	1005d23a 	srai	r2,r2,8
   40b64:	10803fcc 	andi	r2,r2,255
   40b68:	e0bffa15 	stw	r2,-24(fp)
        float dist = (model.a * tempX - tempY + model.b);
   40b6c:	e0fffd17 	ldw	r3,-12(fp)
   40b70:	e0bff917 	ldw	r2,-28(fp)
   40b74:	1005feb2 	custom	250,r2,r2,zero
   40b78:	1887ff32 	custom	252,r3,r3,r2
   40b7c:	e0bffa17 	ldw	r2,-24(fp)
   40b80:	1005feb2 	custom	250,r2,r2,zero
   40b84:	1887ffb2 	custom	254,r3,r3,r2
   40b88:	e0bffe17 	ldw	r2,-8(fp)
   40b8c:	1885ff72 	custom	253,r2,r3,r2
   40b90:	e0bffb15 	stw	r2,-20(fp)
        if (dist * dist <= square2) {
   40b94:	e0fffb17 	ldw	r3,-20(fp)
   40b98:	e0bffb17 	ldw	r2,-20(fp)
   40b9c:	1887ff32 	custom	252,r3,r3,r2
   40ba0:	e0bff817 	ldw	r2,-32(fp)
   40ba4:	1885f9b2 	custom	230,r2,r3,r2
   40ba8:	10002326 	beq	r2,zero,40c38 <inliersOutliersMemory+0x1d4>
        	inliers[*inlierSize].x = data[k]&0xFF;
   40bac:	e0800417 	ldw	r2,16(fp)
   40bb0:	10800017 	ldw	r2,0(r2)
   40bb4:	100490fa 	slli	r2,r2,3
   40bb8:	e0ffff17 	ldw	r3,-4(fp)
   40bbc:	1887883a 	add	r3,r3,r2
   40bc0:	e0bff717 	ldw	r2,-36(fp)
   40bc4:	1085883a 	add	r2,r2,r2
   40bc8:	1085883a 	add	r2,r2,r2
   40bcc:	1009883a 	mov	r4,r2
   40bd0:	e0bffc17 	ldw	r2,-16(fp)
   40bd4:	1105883a 	add	r2,r2,r4
   40bd8:	10800017 	ldw	r2,0(r2)
   40bdc:	10803fcc 	andi	r2,r2,255
   40be0:	18800015 	stw	r2,0(r3)
        	inliers[*inlierSize].y = (data[k]>>8)&0xFF;
   40be4:	e0800417 	ldw	r2,16(fp)
   40be8:	10800017 	ldw	r2,0(r2)
   40bec:	100490fa 	slli	r2,r2,3
   40bf0:	e0ffff17 	ldw	r3,-4(fp)
   40bf4:	1887883a 	add	r3,r3,r2
   40bf8:	e0bff717 	ldw	r2,-36(fp)
   40bfc:	1085883a 	add	r2,r2,r2
   40c00:	1085883a 	add	r2,r2,r2
   40c04:	1009883a 	mov	r4,r2
   40c08:	e0bffc17 	ldw	r2,-16(fp)
   40c0c:	1105883a 	add	r2,r2,r4
   40c10:	10800017 	ldw	r2,0(r2)
   40c14:	1005d23a 	srai	r2,r2,8
   40c18:	10803fcc 	andi	r2,r2,255
   40c1c:	18800115 	stw	r2,4(r3)
            (*inlierSize)++;
   40c20:	e0800417 	ldw	r2,16(fp)
   40c24:	10800017 	ldw	r2,0(r2)
   40c28:	10c00044 	addi	r3,r2,1
   40c2c:	e0800417 	ldw	r2,16(fp)
   40c30:	10c00015 	stw	r3,0(r2)
   40c34:	00002206 	br	40cc0 <inliersOutliersMemory+0x25c>
        } else {
        	outliers[*outlierSize].x = data[k]&0xFF;
   40c38:	e0800517 	ldw	r2,20(fp)
   40c3c:	10800017 	ldw	r2,0(r2)
   40c40:	100490fa 	slli	r2,r2,3
   40c44:	e0c00217 	ldw	r3,8(fp)
   40c48:	1887883a 	add	r3,r3,r2
   40c4c:	e0bff717 	ldw	r2,-36(fp)
   40c50:	1085883a 	add	r2,r2,r2
   40c54:	1085883a 	add	r2,r2,r2
   40c58:	1009883a 	mov	r4,r2
   40c5c:	e0bffc17 	ldw	r2,-16(fp)
   40c60:	1105883a 	add	r2,r2,r4
   40c64:	10800017 	ldw	r2,0(r2)
   40c68:	10803fcc 	andi	r2,r2,255
   40c6c:	18800015 	stw	r2,0(r3)
        	outliers[*outlierSize].y = (data[k]>>8)&0xFF;
   40c70:	e0800517 	ldw	r2,20(fp)
   40c74:	10800017 	ldw	r2,0(r2)
   40c78:	100490fa 	slli	r2,r2,3
   40c7c:	e0c00217 	ldw	r3,8(fp)
   40c80:	1887883a 	add	r3,r3,r2
   40c84:	e0bff717 	ldw	r2,-36(fp)
   40c88:	1085883a 	add	r2,r2,r2
   40c8c:	1085883a 	add	r2,r2,r2
   40c90:	1009883a 	mov	r4,r2
   40c94:	e0bffc17 	ldw	r2,-16(fp)
   40c98:	1105883a 	add	r2,r2,r4
   40c9c:	10800017 	ldw	r2,0(r2)
   40ca0:	1005d23a 	srai	r2,r2,8
   40ca4:	10803fcc 	andi	r2,r2,255
   40ca8:	18800115 	stw	r2,4(r3)
            (*outlierSize)++;
   40cac:	e0800517 	ldw	r2,20(fp)
   40cb0:	10800017 	ldw	r2,0(r2)
   40cb4:	10c00044 	addi	r3,r2,1
   40cb8:	e0800517 	ldw	r2,20(fp)
   40cbc:	10c00015 	stw	r3,0(r2)

void inliersOutliersMemory(int* data, Line model, Point* inliers, Point* outliers, int dataSize, int* inlierSize, int* outlierSize) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float square2 = E * E * (model.a * model.a + 1.0);
    for (int k = 0; k < dataSize; k++) {
   40cc0:	e0bff717 	ldw	r2,-36(fp)
   40cc4:	10800044 	addi	r2,r2,1
   40cc8:	e0bff715 	stw	r2,-36(fp)
   40ccc:	e0fff717 	ldw	r3,-36(fp)
   40cd0:	e0800317 	ldw	r2,12(fp)
   40cd4:	18bf9216 	blt	r3,r2,40b20 <_gp+0xfffe1948>
        	outliers[*outlierSize].x = data[k]&0xFF;
        	outliers[*outlierSize].y = (data[k]>>8)&0xFF;
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   40cd8:	00800074 	movhi	r2,1
   40cdc:	10840204 	addi	r2,r2,4104
   40ce0:	00c00084 	movi	r3,2
   40ce4:	10c00015 	stw	r3,0(r2)

}
   40ce8:	0001883a 	nop
   40cec:	e037883a 	mov	sp,fp
   40cf0:	dfc00117 	ldw	ra,4(sp)
   40cf4:	df000017 	ldw	fp,0(sp)
   40cf8:	dec00204 	addi	sp,sp,8
   40cfc:	f800283a 	ret

00040d00 <inliersOutliers>:

void inliersOutliers(Point* data, Line model, Point* inliers, Point* outliers, int dataSize, int* inlierSize, int* outlierSize) {
   40d00:	defff704 	addi	sp,sp,-36
   40d04:	dfc00815 	stw	ra,32(sp)
   40d08:	df000715 	stw	fp,28(sp)
   40d0c:	df000704 	addi	fp,sp,28
   40d10:	e13ffc15 	stw	r4,-16(fp)
   40d14:	e17ffd15 	stw	r5,-12(fp)
   40d18:	e1bffe15 	stw	r6,-8(fp)
   40d1c:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40d20:	00800074 	movhi	r2,1
   40d24:	10840204 	addi	r2,r2,4104
   40d28:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   40d2c:	00800074 	movhi	r2,1
   40d30:	10840204 	addi	r2,r2,4104
   40d34:	00c00044 	movi	r3,1
   40d38:	10c00015 	stw	r3,0(r2)
    float square2 = E * E * (model.a * model.a + 1.0);
   40d3c:	e0fffd17 	ldw	r3,-12(fp)
   40d40:	e0bffd17 	ldw	r2,-12(fp)
   40d44:	1885ff32 	custom	252,r2,r3,r2
   40d48:	1009883a 	mov	r4,r2
   40d4c:	00448100 	call	44810 <__extendsfdf2>
   40d50:	1011883a 	mov	r8,r2
   40d54:	1813883a 	mov	r9,r3
   40d58:	000d883a 	mov	r6,zero
   40d5c:	01cffc34 	movhi	r7,16368
   40d60:	4009883a 	mov	r4,r8
   40d64:	480b883a 	mov	r5,r9
   40d68:	00421f40 	call	421f4 <__adddf3>
   40d6c:	1009883a 	mov	r4,r2
   40d70:	180b883a 	mov	r5,r3
   40d74:	2005883a 	mov	r2,r4
   40d78:	2807883a 	mov	r3,r5
   40d7c:	000d883a 	mov	r6,zero
   40d80:	01d00434 	movhi	r7,16400
   40d84:	1009883a 	mov	r4,r2
   40d88:	180b883a 	mov	r5,r3
   40d8c:	004354c0 	call	4354c <__muldf3>
   40d90:	1009883a 	mov	r4,r2
   40d94:	180b883a 	mov	r5,r3
   40d98:	2005883a 	mov	r2,r4
   40d9c:	2807883a 	mov	r3,r5
   40da0:	1009883a 	mov	r4,r2
   40da4:	180b883a 	mov	r5,r3
   40da8:	00449200 	call	44920 <__truncdfsf2>
   40dac:	1007883a 	mov	r3,r2
   40db0:	e0fffa15 	stw	r3,-24(fp)

    for (int k = 0; k < dataSize; k++) {
   40db4:	e03ff915 	stw	zero,-28(fp)
   40db8:	00005206 	br	40f04 <inliersOutliers+0x204>
        float dist = (model.a * data[k].x - data[k].y + model.b);
   40dbc:	e0fffd17 	ldw	r3,-12(fp)
   40dc0:	e0bff917 	ldw	r2,-28(fp)
   40dc4:	100490fa 	slli	r2,r2,3
   40dc8:	e13ffc17 	ldw	r4,-16(fp)
   40dcc:	2085883a 	add	r2,r4,r2
   40dd0:	10800017 	ldw	r2,0(r2)
   40dd4:	1005feb2 	custom	250,r2,r2,zero
   40dd8:	1887ff32 	custom	252,r3,r3,r2
   40ddc:	e0bff917 	ldw	r2,-28(fp)
   40de0:	100490fa 	slli	r2,r2,3
   40de4:	e13ffc17 	ldw	r4,-16(fp)
   40de8:	2085883a 	add	r2,r4,r2
   40dec:	10800117 	ldw	r2,4(r2)
   40df0:	1005feb2 	custom	250,r2,r2,zero
   40df4:	1887ffb2 	custom	254,r3,r3,r2
   40df8:	e0bffe17 	ldw	r2,-8(fp)
   40dfc:	1885ff72 	custom	253,r2,r3,r2
   40e00:	e0bffb15 	stw	r2,-20(fp)
        if (dist * dist <= square2) {
   40e04:	e0fffb17 	ldw	r3,-20(fp)
   40e08:	e0bffb17 	ldw	r2,-20(fp)
   40e0c:	1887ff32 	custom	252,r3,r3,r2
   40e10:	e0bffa17 	ldw	r2,-24(fp)
   40e14:	1885f9b2 	custom	230,r2,r3,r2
   40e18:	10001c26 	beq	r2,zero,40e8c <inliersOutliers+0x18c>
            inliers[*inlierSize].x = data[k].x;
   40e1c:	e0800417 	ldw	r2,16(fp)
   40e20:	10800017 	ldw	r2,0(r2)
   40e24:	100490fa 	slli	r2,r2,3
   40e28:	e0ffff17 	ldw	r3,-4(fp)
   40e2c:	1885883a 	add	r2,r3,r2
   40e30:	e0fff917 	ldw	r3,-28(fp)
   40e34:	180690fa 	slli	r3,r3,3
   40e38:	e13ffc17 	ldw	r4,-16(fp)
   40e3c:	20c7883a 	add	r3,r4,r3
   40e40:	18c00017 	ldw	r3,0(r3)
   40e44:	10c00015 	stw	r3,0(r2)
            inliers[*inlierSize].y = data[k].y;
   40e48:	e0800417 	ldw	r2,16(fp)
   40e4c:	10800017 	ldw	r2,0(r2)
   40e50:	100490fa 	slli	r2,r2,3
   40e54:	e0ffff17 	ldw	r3,-4(fp)
   40e58:	1885883a 	add	r2,r3,r2
   40e5c:	e0fff917 	ldw	r3,-28(fp)
   40e60:	180690fa 	slli	r3,r3,3
   40e64:	e13ffc17 	ldw	r4,-16(fp)
   40e68:	20c7883a 	add	r3,r4,r3
   40e6c:	18c00117 	ldw	r3,4(r3)
   40e70:	10c00115 	stw	r3,4(r2)
            (*inlierSize)++;
   40e74:	e0800417 	ldw	r2,16(fp)
   40e78:	10800017 	ldw	r2,0(r2)
   40e7c:	10c00044 	addi	r3,r2,1
   40e80:	e0800417 	ldw	r2,16(fp)
   40e84:	10c00015 	stw	r3,0(r2)
   40e88:	00001b06 	br	40ef8 <inliersOutliers+0x1f8>
        } else {
            outliers[*outlierSize].x = data[k].x;
   40e8c:	e0800517 	ldw	r2,20(fp)
   40e90:	10800017 	ldw	r2,0(r2)
   40e94:	100490fa 	slli	r2,r2,3
   40e98:	e0c00217 	ldw	r3,8(fp)
   40e9c:	1885883a 	add	r2,r3,r2
   40ea0:	e0fff917 	ldw	r3,-28(fp)
   40ea4:	180690fa 	slli	r3,r3,3
   40ea8:	e13ffc17 	ldw	r4,-16(fp)
   40eac:	20c7883a 	add	r3,r4,r3
   40eb0:	18c00017 	ldw	r3,0(r3)
   40eb4:	10c00015 	stw	r3,0(r2)
            outliers[*outlierSize].y = data[k].y;
   40eb8:	e0800517 	ldw	r2,20(fp)
   40ebc:	10800017 	ldw	r2,0(r2)
   40ec0:	100490fa 	slli	r2,r2,3
   40ec4:	e0c00217 	ldw	r3,8(fp)
   40ec8:	1885883a 	add	r2,r3,r2
   40ecc:	e0fff917 	ldw	r3,-28(fp)
   40ed0:	180690fa 	slli	r3,r3,3
   40ed4:	e13ffc17 	ldw	r4,-16(fp)
   40ed8:	20c7883a 	add	r3,r4,r3
   40edc:	18c00117 	ldw	r3,4(r3)
   40ee0:	10c00115 	stw	r3,4(r2)
            (*outlierSize)++;
   40ee4:	e0800517 	ldw	r2,20(fp)
   40ee8:	10800017 	ldw	r2,0(r2)
   40eec:	10c00044 	addi	r3,r2,1
   40ef0:	e0800517 	ldw	r2,20(fp)
   40ef4:	10c00015 	stw	r3,0(r2)
void inliersOutliers(Point* data, Line model, Point* inliers, Point* outliers, int dataSize, int* inlierSize, int* outlierSize) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float square2 = E * E * (model.a * model.a + 1.0);

    for (int k = 0; k < dataSize; k++) {
   40ef8:	e0bff917 	ldw	r2,-28(fp)
   40efc:	10800044 	addi	r2,r2,1
   40f00:	e0bff915 	stw	r2,-28(fp)
   40f04:	e0fff917 	ldw	r3,-28(fp)
   40f08:	e0800317 	ldw	r2,12(fp)
   40f0c:	18bfab16 	blt	r3,r2,40dbc <_gp+0xfffe1be4>
            outliers[*outlierSize].x = data[k].x;
            outliers[*outlierSize].y = data[k].y;
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   40f10:	00800074 	movhi	r2,1
   40f14:	10840204 	addi	r2,r2,4104
   40f18:	00c00084 	movi	r3,2
   40f1c:	10c00015 	stw	r3,0(r2)

}
   40f20:	0001883a 	nop
   40f24:	e037883a 	mov	sp,fp
   40f28:	dfc00117 	ldw	ra,4(sp)
   40f2c:	df000017 	ldw	fp,0(sp)
   40f30:	dec00204 	addi	sp,sp,8
   40f34:	f800283a 	ret

00040f38 <checkModel>:

void checkModel(Point* data, Point* temp, RansacResult* rs, int data_size, int temp_size) {
   40f38:	defb3d04 	addi	sp,sp,-4876
   40f3c:	dfc4c215 	stw	ra,4872(sp)
   40f40:	df04c115 	stw	fp,4868(sp)
   40f44:	df04c104 	addi	fp,sp,4868
   40f48:	e13ffc15 	stw	r4,-16(fp)
   40f4c:	e17ffd15 	stw	r5,-12(fp)
   40f50:	e1bffe15 	stw	r6,-8(fp)
   40f54:	e1ffff15 	stw	r7,-4(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   40f58:	00800074 	movhi	r2,1
   40f5c:	10840204 	addi	r2,r2,4104
   40f60:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   40f64:	00800074 	movhi	r2,1
   40f68:	10840204 	addi	r2,r2,4104
   40f6c:	00c00044 	movi	r3,1
   40f70:	10c00015 	stw	r3,0(r2)
    Point inliers[MAX_POINTS];
    Point outliers[MAX_POINTS];
    int inlinersSize = 0;
   40f74:	e03ff615 	stw	zero,-40(fp)
    int outlierSize = 0;
   40f78:	e03ff715 	stw	zero,-36(fp)
    Line model = leastSquare(temp, temp_size);
   40f7c:	e1400217 	ldw	r5,8(fp)
   40f80:	e13ffd17 	ldw	r4,-12(fp)
   40f84:	00406cc0 	call	406cc <leastSquare>
   40f88:	1009883a 	mov	r4,r2
   40f8c:	180b883a 	mov	r5,r3
   40f90:	e13ff815 	stw	r4,-32(fp)
   40f94:	e17ff915 	stw	r5,-28(fp)

    inliersOutliers(data, model, inliers, outliers, data_size, &inlinersSize, &outlierSize);
   40f98:	e0fb4604 	addi	r3,fp,-4840
   40f9c:	e0bff704 	addi	r2,fp,-36
   40fa0:	d8800315 	stw	r2,12(sp)
   40fa4:	e0bff604 	addi	r2,fp,-40
   40fa8:	d8800215 	stw	r2,8(sp)
   40fac:	e0bfff17 	ldw	r2,-4(fp)
   40fb0:	d8800115 	stw	r2,4(sp)
   40fb4:	e0bd9e04 	addi	r2,fp,-2440
   40fb8:	d8800015 	stw	r2,0(sp)
   40fbc:	180f883a 	mov	r7,r3
   40fc0:	e17ff817 	ldw	r5,-32(fp)
   40fc4:	e1bff917 	ldw	r6,-28(fp)
   40fc8:	e13ffc17 	ldw	r4,-16(fp)
   40fcc:	0040d000 	call	40d00 <inliersOutliers>

    if(inlinersSize >= rs->bestQty && inlinersSize >= (int)(data_size * C)){
   40fd0:	e0bffe17 	ldw	r2,-8(fp)
   40fd4:	10800317 	ldw	r2,12(r2)
   40fd8:	e0fff617 	ldw	r3,-40(fp)
   40fdc:	18804d16 	blt	r3,r2,41114 <checkModel+0x1dc>
   40fe0:	e13fff17 	ldw	r4,-4(fp)
   40fe4:	00447340 	call	44734 <__floatsidf>
   40fe8:	1011883a 	mov	r8,r2
   40fec:	1813883a 	mov	r9,r3
   40ff0:	000d883a 	mov	r6,zero
   40ff4:	000f883a 	mov	r7,zero
   40ff8:	4009883a 	mov	r4,r8
   40ffc:	480b883a 	mov	r5,r9
   41000:	004354c0 	call	4354c <__muldf3>
   41004:	1009883a 	mov	r4,r2
   41008:	180b883a 	mov	r5,r3
   4100c:	2005883a 	mov	r2,r4
   41010:	2807883a 	mov	r3,r5
   41014:	1009883a 	mov	r4,r2
   41018:	180b883a 	mov	r5,r3
   4101c:	00446b40 	call	446b4 <__fixdfsi>
   41020:	1007883a 	mov	r3,r2
   41024:	e0bff617 	ldw	r2,-40(fp)
   41028:	10c03a16 	blt	r2,r3,41114 <checkModel+0x1dc>
        Line inliersModel = leastSquare(inliers, inlinersSize);
   4102c:	e0fff617 	ldw	r3,-40(fp)
   41030:	e0bb4604 	addi	r2,fp,-4840
   41034:	180b883a 	mov	r5,r3
   41038:	1009883a 	mov	r4,r2
   4103c:	00406cc0 	call	406cc <leastSquare>
   41040:	1009883a 	mov	r4,r2
   41044:	180b883a 	mov	r5,r3
   41048:	e13ffa15 	stw	r4,-24(fp)
   4104c:	e17ffb15 	stw	r5,-20(fp)
        float inliersAvg_y = 0;
   41050:	e03b4315 	stw	zero,-4852(fp)
        for (int i = 0; i < inlinersSize; i++) {
   41054:	e03b4415 	stw	zero,-4848(fp)
   41058:	00000d06 	br	41090 <checkModel+0x158>
            inliersAvg_y += inliers[i].y;
   4105c:	e0bb4417 	ldw	r2,-4848(fp)
   41060:	100490fa 	slli	r2,r2,3
   41064:	e0fb4304 	addi	r3,fp,-4852
   41068:	1885883a 	add	r2,r3,r2
   4106c:	10800404 	addi	r2,r2,16
   41070:	10800017 	ldw	r2,0(r2)
   41074:	1005feb2 	custom	250,r2,r2,zero
   41078:	e0fb4317 	ldw	r3,-4852(fp)
   4107c:	1885ff72 	custom	253,r2,r3,r2
   41080:	e0bb4315 	stw	r2,-4852(fp)
    inliersOutliers(data, model, inliers, outliers, data_size, &inlinersSize, &outlierSize);

    if(inlinersSize >= rs->bestQty && inlinersSize >= (int)(data_size * C)){
        Line inliersModel = leastSquare(inliers, inlinersSize);
        float inliersAvg_y = 0;
        for (int i = 0; i < inlinersSize; i++) {
   41084:	e0bb4417 	ldw	r2,-4848(fp)
   41088:	10800044 	addi	r2,r2,1
   4108c:	e0bb4415 	stw	r2,-4848(fp)
   41090:	e0bff617 	ldw	r2,-40(fp)
   41094:	e0fb4417 	ldw	r3,-4848(fp)
   41098:	18bff016 	blt	r3,r2,4105c <_gp+0xfffe1e84>
            inliersAvg_y += inliers[i].y;
        }
        inliersAvg_y /= inlinersSize;
   4109c:	e0bff617 	ldw	r2,-40(fp)
   410a0:	1005feb2 	custom	250,r2,r2,zero
   410a4:	e0fb4317 	ldw	r3,-4852(fp)
   410a8:	1885fff2 	custom	255,r2,r3,r2
   410ac:	e0bb4315 	stw	r2,-4852(fp)
        float  inliersFit = coefficientOfDetermination(inliers, inliersModel, inliersAvg_y, data_size);
   410b0:	e0fb4604 	addi	r3,fp,-4840
   410b4:	e0bfff17 	ldw	r2,-4(fp)
   410b8:	d8800015 	stw	r2,0(sp)
   410bc:	e1fb4317 	ldw	r7,-4852(fp)
   410c0:	e17ffa17 	ldw	r5,-24(fp)
   410c4:	e1bffb17 	ldw	r6,-20(fp)
   410c8:	1809883a 	mov	r4,r3
   410cc:	00409240 	call	40924 <coefficientOfDetermination>
   410d0:	e0bb4515 	stw	r2,-4844(fp)
        if (inliersFit < rs->bestFit) {
   410d4:	e0bffe17 	ldw	r2,-8(fp)
   410d8:	10c00217 	ldw	r3,8(r2)
   410dc:	e0bb4517 	ldw	r2,-4844(fp)
   410e0:	1885f972 	custom	229,r2,r3,r2
   410e4:	10000b26 	beq	r2,zero,41114 <checkModel+0x1dc>
        rs->bestModel = inliersModel;
   410e8:	e0bffe17 	ldw	r2,-8(fp)
   410ec:	e0fffa17 	ldw	r3,-24(fp)
   410f0:	10c00015 	stw	r3,0(r2)
   410f4:	e0fffb17 	ldw	r3,-20(fp)
   410f8:	10c00115 	stw	r3,4(r2)
        rs->bestFit = inliersFit;
   410fc:	e0bffe17 	ldw	r2,-8(fp)
   41100:	e0fb4517 	ldw	r3,-4844(fp)
   41104:	10c00215 	stw	r3,8(r2)
        rs->bestQty = inlinersSize;
   41108:	e0fff617 	ldw	r3,-40(fp)
   4110c:	e0bffe17 	ldw	r2,-8(fp)
   41110:	10c00315 	stw	r3,12(r2)
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   41114:	00800074 	movhi	r2,1
   41118:	10840204 	addi	r2,r2,4104
   4111c:	00c00084 	movi	r3,2
   41120:	10c00015 	stw	r3,0(r2)

}
   41124:	0001883a 	nop
   41128:	e037883a 	mov	sp,fp
   4112c:	dfc00117 	ldw	ra,4(sp)
   41130:	df000017 	ldw	fp,0(sp)
   41134:	dec00204 	addi	sp,sp,8
   41138:	f800283a 	ret

0004113c <squareDistanceBetweenPoints>:

float squareDistanceBetweenPoints (Point* a, Point* b){
   4113c:	defff904 	addi	sp,sp,-28
   41140:	dfc00615 	stw	ra,24(sp)
   41144:	df000515 	stw	fp,20(sp)
   41148:	dc000415 	stw	r16,16(sp)
   4114c:	df000504 	addi	fp,sp,20
   41150:	e13ffd15 	stw	r4,-12(fp)
   41154:	e17ffe15 	stw	r5,-8(fp)
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
   41158:	00800074 	movhi	r2,1
   4115c:	10840204 	addi	r2,r2,4104
   41160:	10000015 	stw	zero,0(r2)
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
   41164:	00800074 	movhi	r2,1
   41168:	10840204 	addi	r2,r2,4104
   4116c:	00c00044 	movi	r3,1
   41170:	10c00015 	stw	r3,0(r2)
	int dx = a->x - b->x;
   41174:	e0bffd17 	ldw	r2,-12(fp)
   41178:	10c00017 	ldw	r3,0(r2)
   4117c:	e0bffe17 	ldw	r2,-8(fp)
   41180:	10800017 	ldw	r2,0(r2)
   41184:	1885c83a 	sub	r2,r3,r2
   41188:	e0bffb15 	stw	r2,-20(fp)
    int dy = a->y - b->y;
   4118c:	e0bffd17 	ldw	r2,-12(fp)
   41190:	10c00117 	ldw	r3,4(r2)
   41194:	e0bffe17 	ldw	r2,-8(fp)
   41198:	10800117 	ldw	r2,4(r2)
   4119c:	1885c83a 	sub	r2,r3,r2
   411a0:	e0bffc15 	stw	r2,-16(fp)
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
   411a4:	00800074 	movhi	r2,1
   411a8:	10840204 	addi	r2,r2,4104
   411ac:	00c00084 	movi	r3,2
   411b0:	10c00015 	stw	r3,0(r2)
    return (dx * dx) + (dy * dy);
   411b4:	e17ffb17 	ldw	r5,-20(fp)
   411b8:	e13ffb17 	ldw	r4,-20(fp)
   411bc:	00421cc0 	call	421cc <__mulsi3>
   411c0:	1021883a 	mov	r16,r2
   411c4:	e17ffc17 	ldw	r5,-16(fp)
   411c8:	e13ffc17 	ldw	r4,-16(fp)
   411cc:	00421cc0 	call	421cc <__mulsi3>
   411d0:	8085883a 	add	r2,r16,r2
   411d4:	1005feb2 	custom	250,r2,r2,zero
   411d8:	1007883a 	mov	r3,r2
}
   411dc:	1805883a 	mov	r2,r3
   411e0:	e6ffff04 	addi	sp,fp,-4
   411e4:	dfc00217 	ldw	ra,8(sp)
   411e8:	df000117 	ldw	fp,4(sp)
   411ec:	dc000017 	ldw	r16,0(sp)
   411f0:	dec00304 	addi	sp,sp,12
   411f4:	f800283a 	ret

000411f8 <RANSAC>:

RansacResult RANSAC(int* data, Point* botPos, Point* outliers, int data_size) {
   411f8:	defd8604 	addi	sp,sp,-2536
   411fc:	dfc27915 	stw	ra,2532(sp)
   41200:	df027815 	stw	fp,2528(sp)
   41204:	ddc27715 	stw	r23,2524(sp)
   41208:	dd827615 	stw	r22,2520(sp)
   4120c:	dd427515 	stw	r21,2516(sp)
   41210:	dd027415 	stw	r20,2512(sp)
   41214:	dcc27315 	stw	r19,2508(sp)
   41218:	dc827215 	stw	r18,2504(sp)
   4121c:	dc427115 	stw	r17,2500(sp)
   41220:	dc027015 	stw	r16,2496(sp)
   41224:	df027804 	addi	fp,sp,2528
   41228:	e13ff115 	stw	r4,-60(fp)
   4122c:	e17ff215 	stw	r5,-56(fp)
   41230:	e1bff315 	stw	r6,-52(fp)
   41234:	e1fff415 	stw	r7,-48(fp)
   41238:	d805883a 	mov	r2,sp
   4123c:	e0bff515 	stw	r2,-44(fp)
    RansacResult rs;

    rs.bestModel.a = 0.0;
   41240:	e03d9315 	stw	zero,-2484(fp)
    rs.bestModel.b = (float)botPos->y;
   41244:	e0bff317 	ldw	r2,-52(fp)
   41248:	10800117 	ldw	r2,4(r2)
   4124c:	1005feb2 	custom	250,r2,r2,zero
   41250:	e0bd9415 	stw	r2,-2480(fp)
    rs.bestFit = INFINITY;
   41254:	009fe034 	movhi	r2,32640
   41258:	e0bd9515 	stw	r2,-2476(fp)
    rs.bestQty = 0;
   4125c:	e03d9615 	stw	zero,-2472(fp)

    printf("RS-ModelInit: %f %f\n", rs.bestModel.a, rs.bestModel.b );
   41260:	e0bd9317 	ldw	r2,-2484(fp)
   41264:	1009883a 	mov	r4,r2
   41268:	00448100 	call	44810 <__extendsfdf2>
   4126c:	e0bff615 	stw	r2,-40(fp)
   41270:	e0fff715 	stw	r3,-36(fp)
   41274:	e0bd9417 	ldw	r2,-2480(fp)
   41278:	1009883a 	mov	r4,r2
   4127c:	00448100 	call	44810 <__extendsfdf2>
   41280:	1009883a 	mov	r4,r2
   41284:	180b883a 	mov	r5,r3
   41288:	d9400015 	stw	r5,0(sp)
   4128c:	200f883a 	mov	r7,r4
   41290:	e17ff617 	ldw	r5,-40(fp)
   41294:	e1bff717 	ldw	r6,-36(fp)
   41298:	01000174 	movhi	r4,5
   4129c:	21134204 	addi	r4,r4,19720
   412a0:	0044b900 	call	44b90 <printf>

    Point inliers[MAX_POINTS];

    int temp_dist_points = 0;
   412a4:	e03d8c15 	stw	zero,-2512(fp)
    int temp_index = 0;
   412a8:	e03d8f15 	stw	zero,-2500(fp)

    int loopCounter = 0;
   412ac:	e03d8d15 	stw	zero,-2508(fp)
    int inlinersSize = 0;
   412b0:	e03fef15 	stw	zero,-68(fp)
    int outlierSize = 0;
   412b4:	e03ff015 	stw	zero,-64(fp)

    inliersOutliersMemory(data, rs.bestModel, inliers, outliers, data_size, &inlinersSize, &outlierSize);
   412b8:	e0fd9704 	addi	r3,fp,-2468
   412bc:	e0bff004 	addi	r2,fp,-64
   412c0:	d8800315 	stw	r2,12(sp)
   412c4:	e0bfef04 	addi	r2,fp,-68
   412c8:	d8800215 	stw	r2,8(sp)
   412cc:	e0800217 	ldw	r2,8(fp)
   412d0:	d8800115 	stw	r2,4(sp)
   412d4:	e0bff417 	ldw	r2,-48(fp)
   412d8:	d8800015 	stw	r2,0(sp)
   412dc:	180f883a 	mov	r7,r3
   412e0:	e17d9317 	ldw	r5,-2484(fp)
   412e4:	e1bd9417 	ldw	r6,-2480(fp)
   412e8:	e13ff217 	ldw	r4,-56(fp)
   412ec:	0040a640 	call	40a64 <inliersOutliersMemory>

    printf("RS-inlinersSize: %d\n", inlinersSize);
   412f0:	e0bfef17 	ldw	r2,-68(fp)
   412f4:	100b883a 	mov	r5,r2
   412f8:	01000174 	movhi	r4,5
   412fc:	21134804 	addi	r4,r4,19744
   41300:	0044b900 	call	44b90 <printf>
    printf("RS-outliers: %d\n", outlierSize);
   41304:	e0bff017 	ldw	r2,-64(fp)
   41308:	100b883a 	mov	r5,r2
   4130c:	01000174 	movhi	r4,5
   41310:	21134e04 	addi	r4,r4,19768
   41314:	0044b900 	call	44b90 <printf>

    if (outlierSize == 0) {
   41318:	e0bff017 	ldw	r2,-64(fp)
   4131c:	10000e1e 	bne	r2,zero,41358 <RANSAC+0x160>
        rs.bestFit = INFINITY;
   41320:	009fe034 	movhi	r2,32640
   41324:	e0bd9515 	stw	r2,-2476(fp)
        rs.bestQty = data_size;
   41328:	e0800217 	ldw	r2,8(fp)
   4132c:	e0bd9615 	stw	r2,-2472(fp)
        return rs;
   41330:	e0bff117 	ldw	r2,-60(fp)
   41334:	e0fd9317 	ldw	r3,-2484(fp)
   41338:	10c00015 	stw	r3,0(r2)
   4133c:	e0fd9417 	ldw	r3,-2480(fp)
   41340:	10c00115 	stw	r3,4(r2)
   41344:	e0fd9517 	ldw	r3,-2476(fp)
   41348:	10c00215 	stw	r3,8(r2)
   4134c:	e0fd9617 	ldw	r3,-2472(fp)
   41350:	10c00315 	stw	r3,12(r2)
   41354:	00007a06 	br	41540 <RANSAC+0x348>
    }

    int temp_size = MIN_POINTS;
   41358:	00800084 	movi	r2,2
   4135c:	e0bd9015 	stw	r2,-2496(fp)
    Point temp[temp_size]; // alocacao tamanho P
   41360:	e0bd9017 	ldw	r2,-2496(fp)
   41364:	10ffffc4 	addi	r3,r2,-1
   41368:	e0fd9115 	stw	r3,-2492(fp)
   4136c:	1007883a 	mov	r3,r2
   41370:	182d883a 	mov	r22,r3
   41374:	002f883a 	mov	r23,zero
   41378:	b006d6ba 	srli	r3,r22,26
   4137c:	b82691ba 	slli	r19,r23,6
   41380:	1ce6b03a 	or	r19,r3,r19
   41384:	b02491ba 	slli	r18,r22,6
   41388:	1007883a 	mov	r3,r2
   4138c:	1829883a 	mov	r20,r3
   41390:	002b883a 	mov	r21,zero
   41394:	a006d6ba 	srli	r3,r20,26
   41398:	a82291ba 	slli	r17,r21,6
   4139c:	1c62b03a 	or	r17,r3,r17
   413a0:	a02091ba 	slli	r16,r20,6
   413a4:	100490fa 	slli	r2,r2,3
   413a8:	108000c4 	addi	r2,r2,3
   413ac:	108000c4 	addi	r2,r2,3
   413b0:	1004d0ba 	srli	r2,r2,2
   413b4:	1085883a 	add	r2,r2,r2
   413b8:	1085883a 	add	r2,r2,r2
   413bc:	d8b7c83a 	sub	sp,sp,r2
   413c0:	d8800404 	addi	r2,sp,16
   413c4:	108000c4 	addi	r2,r2,3
   413c8:	1004d0ba 	srli	r2,r2,2
   413cc:	1085883a 	add	r2,r2,r2
   413d0:	1085883a 	add	r2,r2,r2
   413d4:	e0bd9215 	stw	r2,-2488(fp)

    //Posicao inicial do robo
    temp[0] = outliers[0];
   413d8:	e0bd9217 	ldw	r2,-2488(fp)
   413dc:	e0fff417 	ldw	r3,-48(fp)
   413e0:	19000017 	ldw	r4,0(r3)
   413e4:	11000015 	stw	r4,0(r2)
   413e8:	18c00117 	ldw	r3,4(r3)
   413ec:	10c00115 	stw	r3,4(r2)
    //Execute for N iterations
    while(loopCounter < N) {
   413f0:	00004706 	br	41510 <RANSAC+0x318>
		//Sorteia 2 coordenadas que tenham uma distancia minima entre si
		if(temp_dist_points < MIN_DIST_POINTS) {
   413f4:	e0bd8c17 	ldw	r2,-2512(fp)
   413f8:	10800288 	cmpgei	r2,r2,10
   413fc:	1000361e 	bne	r2,zero,414d8 <RANSAC+0x2e0>
		for (int j = 1; j < temp_size; j++) {
   41400:	00800044 	movi	r2,1
   41404:	e0bd8e15 	stw	r2,-2504(fp)
   41408:	00002f06 	br	414c8 <RANSAC+0x2d0>
			temp_index = rand() % outlierSize;
   4140c:	0044d8c0 	call	44d8c <rand>
   41410:	1007883a 	mov	r3,r2
   41414:	e0bff017 	ldw	r2,-64(fp)
   41418:	100b883a 	mov	r5,r2
   4141c:	1809883a 	mov	r4,r3
   41420:	004209c0 	call	4209c <__modsi3>
   41424:	e0bd8f15 	stw	r2,-2500(fp)
			temp[j].x = data[temp_index]&0xFF;
   41428:	e0bd8f17 	ldw	r2,-2500(fp)
   4142c:	1085883a 	add	r2,r2,r2
   41430:	1085883a 	add	r2,r2,r2
   41434:	1007883a 	mov	r3,r2
   41438:	e0bff217 	ldw	r2,-56(fp)
   4143c:	10c5883a 	add	r2,r2,r3
   41440:	10800017 	ldw	r2,0(r2)
   41444:	10c03fcc 	andi	r3,r2,255
   41448:	e13d9217 	ldw	r4,-2488(fp)
   4144c:	e0bd8e17 	ldw	r2,-2504(fp)
   41450:	100490fa 	slli	r2,r2,3
   41454:	2085883a 	add	r2,r4,r2
   41458:	10c00015 	stw	r3,0(r2)
			temp[j].y = (data[temp_index]>>8)&0xFF;
   4145c:	e0bd8f17 	ldw	r2,-2500(fp)
   41460:	1085883a 	add	r2,r2,r2
   41464:	1085883a 	add	r2,r2,r2
   41468:	1007883a 	mov	r3,r2
   4146c:	e0bff217 	ldw	r2,-56(fp)
   41470:	10c5883a 	add	r2,r2,r3
   41474:	10800017 	ldw	r2,0(r2)
   41478:	1005d23a 	srai	r2,r2,8
   4147c:	10c03fcc 	andi	r3,r2,255
   41480:	e13d9217 	ldw	r4,-2488(fp)
   41484:	e0bd8e17 	ldw	r2,-2504(fp)
   41488:	100490fa 	slli	r2,r2,3
   4148c:	2085883a 	add	r2,r4,r2
   41490:	10800104 	addi	r2,r2,4
   41494:	10c00015 	stw	r3,0(r2)
			temp_dist_points = squareDistanceBetweenPoints(&temp[0], &temp[1]);
   41498:	e0fd9217 	ldw	r3,-2488(fp)
   4149c:	e0bd9217 	ldw	r2,-2488(fp)
   414a0:	10800204 	addi	r2,r2,8
   414a4:	100b883a 	mov	r5,r2
   414a8:	1809883a 	mov	r4,r3
   414ac:	004113c0 	call	4113c <squareDistanceBetweenPoints>
   414b0:	1007883a 	mov	r3,r2
   414b4:	1805fe72 	custom	249,r2,r3,zero
   414b8:	e0bd8c15 	stw	r2,-2512(fp)
    temp[0] = outliers[0];
    //Execute for N iterations
    while(loopCounter < N) {
		//Sorteia 2 coordenadas que tenham uma distancia minima entre si
		if(temp_dist_points < MIN_DIST_POINTS) {
		for (int j = 1; j < temp_size; j++) {
   414bc:	e0bd8e17 	ldw	r2,-2504(fp)
   414c0:	10800044 	addi	r2,r2,1
   414c4:	e0bd8e15 	stw	r2,-2504(fp)
   414c8:	e0fd8e17 	ldw	r3,-2504(fp)
   414cc:	e0bd9017 	ldw	r2,-2496(fp)
   414d0:	18bfce16 	blt	r3,r2,4140c <_gp+0xfffe2234>
   414d4:	00000e06 	br	41510 <RANSAC+0x318>
			temp[j].y = (data[temp_index]>>8)&0xFF;
			temp_dist_points = squareDistanceBetweenPoints(&temp[0], &temp[1]);
		}
        }
        else {
        	checkModel(outliers, temp, &rs, outlierSize, temp_size);
   414d8:	e0fd9217 	ldw	r3,-2488(fp)
   414dc:	e17ff017 	ldw	r5,-64(fp)
   414e0:	e13d9304 	addi	r4,fp,-2484
   414e4:	e0bd9017 	ldw	r2,-2496(fp)
   414e8:	d8800015 	stw	r2,0(sp)
   414ec:	280f883a 	mov	r7,r5
   414f0:	200d883a 	mov	r6,r4
   414f4:	180b883a 	mov	r5,r3
   414f8:	e13ff417 	ldw	r4,-48(fp)
   414fc:	0040f380 	call	40f38 <checkModel>
            temp_dist_points = 0;
   41500:	e03d8c15 	stw	zero,-2512(fp)
            loopCounter++;
   41504:	e0bd8d17 	ldw	r2,-2508(fp)
   41508:	10800044 	addi	r2,r2,1
   4150c:	e0bd8d15 	stw	r2,-2508(fp)
    Point temp[temp_size]; // alocacao tamanho P

    //Posicao inicial do robo
    temp[0] = outliers[0];
    //Execute for N iterations
    while(loopCounter < N) {
   41510:	e0bd8d17 	ldw	r2,-2508(fp)
   41514:	10800290 	cmplti	r2,r2,10
   41518:	103fb61e 	bne	r2,zero,413f4 <_gp+0xfffe221c>
            temp_dist_points = 0;
            loopCounter++;
        }
    }

    return rs;
   4151c:	e0bff117 	ldw	r2,-60(fp)
   41520:	e0fd9317 	ldw	r3,-2484(fp)
   41524:	10c00015 	stw	r3,0(r2)
   41528:	e0fd9417 	ldw	r3,-2480(fp)
   4152c:	10c00115 	stw	r3,4(r2)
   41530:	e0fd9517 	ldw	r3,-2476(fp)
   41534:	10c00215 	stw	r3,8(r2)
   41538:	e0fd9617 	ldw	r3,-2472(fp)
   4153c:	10c00315 	stw	r3,12(r2)
   41540:	e6fff517 	ldw	sp,-44(fp)
}
   41544:	e0bff117 	ldw	r2,-60(fp)
   41548:	e6fff804 	addi	sp,fp,-32
   4154c:	dfc00917 	ldw	ra,36(sp)
   41550:	df000817 	ldw	fp,32(sp)
   41554:	ddc00717 	ldw	r23,28(sp)
   41558:	dd800617 	ldw	r22,24(sp)
   4155c:	dd400517 	ldw	r21,20(sp)
   41560:	dd000417 	ldw	r20,16(sp)
   41564:	dcc00317 	ldw	r19,12(sp)
   41568:	dc800217 	ldw	r18,8(sp)
   4156c:	dc400117 	ldw	r17,4(sp)
   41570:	dc000017 	ldw	r16,0(sp)
   41574:	dec00a04 	addi	sp,sp,40
   41578:	f800283a 	ret

0004157c <atan>:
	double atan(double x)
#else
	double atan(x)
	double x;
#endif
{
   4157c:	deffde04 	addi	sp,sp,-136
   41580:	dfc02115 	stw	ra,132(sp)
   41584:	df002015 	stw	fp,128(sp)
   41588:	ddc01f15 	stw	r23,124(sp)
   4158c:	dd801e15 	stw	r22,120(sp)
   41590:	dd401d15 	stw	r21,116(sp)
   41594:	dd001c15 	stw	r20,112(sp)
   41598:	dcc01b15 	stw	r19,108(sp)
   4159c:	dc801a15 	stw	r18,104(sp)
   415a0:	dc401915 	stw	r17,100(sp)
   415a4:	dc001815 	stw	r16,96(sp)
   415a8:	df002004 	addi	fp,sp,128
   415ac:	e13ff015 	stw	r4,-64(fp)
   415b0:	e17ff115 	stw	r5,-60(fp)
	double w,s1,s2,z;
	__int32_t ix,hx,id;

	GET_HIGH_WORD(hx,x);
   415b4:	e0bff017 	ldw	r2,-64(fp)
   415b8:	e0bfec15 	stw	r2,-80(fp)
   415bc:	e0bff117 	ldw	r2,-60(fp)
   415c0:	e0bfed15 	stw	r2,-76(fp)
   415c4:	e0bfed17 	ldw	r2,-76(fp)
   415c8:	e0bfe115 	stw	r2,-124(fp)
	ix = hx&0x7fffffff;
   415cc:	e0ffe117 	ldw	r3,-124(fp)
   415d0:	00a00034 	movhi	r2,32768
   415d4:	10bfffc4 	addi	r2,r2,-1
   415d8:	1884703a 	and	r2,r3,r2
   415dc:	e0bfe215 	stw	r2,-120(fp)
	if(ix>=0x44100000) {	/* if |x| >= 2^66 */
   415e0:	e0ffe217 	ldw	r3,-120(fp)
   415e4:	00910434 	movhi	r2,17424
   415e8:	18804216 	blt	r3,r2,416f4 <atan+0x178>
	    __uint32_t low;
	    GET_LOW_WORD(low,x);
   415ec:	e0bff017 	ldw	r2,-64(fp)
   415f0:	e0bfee15 	stw	r2,-72(fp)
   415f4:	e0bff117 	ldw	r2,-60(fp)
   415f8:	e0bfef15 	stw	r2,-68(fp)
   415fc:	e0bfee17 	ldw	r2,-72(fp)
   41600:	e0bfe315 	stw	r2,-116(fp)
	    if(ix>0x7ff00000||
   41604:	e0bfe217 	ldw	r2,-120(fp)
   41608:	00dffc34 	movhi	r3,32752
   4160c:	18800516 	blt	r3,r2,41624 <atan+0xa8>
   41610:	e0ffe217 	ldw	r3,-120(fp)
   41614:	009ffc34 	movhi	r2,32752
   41618:	18800e1e 	bne	r3,r2,41654 <atan+0xd8>
		(ix==0x7ff00000&&(low!=0)))
   4161c:	e0bfe317 	ldw	r2,-116(fp)
   41620:	10000c26 	beq	r2,zero,41654 <atan+0xd8>
		return x+x;		/* NaN */
   41624:	e0bff017 	ldw	r2,-64(fp)
   41628:	e0fff117 	ldw	r3,-60(fp)
   4162c:	100d883a 	mov	r6,r2
   41630:	180f883a 	mov	r7,r3
   41634:	1009883a 	mov	r4,r2
   41638:	180b883a 	mov	r5,r3
   4163c:	00421f40 	call	421f4 <__adddf3>
   41640:	1009883a 	mov	r4,r2
   41644:	180b883a 	mov	r5,r3
   41648:	2021883a 	mov	r16,r4
   4164c:	2823883a 	mov	r17,r5
   41650:	00023e06 	br	41f4c <atan+0x9d0>
	    if(hx>0) return  atanhi[3]+atanlo[3];
   41654:	e0bfe117 	ldw	r2,-124(fp)
   41658:	0080120e 	bge	zero,r2,416a4 <atan+0x128>
   4165c:	00951134 	movhi	r2,21572
   41660:	108b4604 	addi	r2,r2,11544
   41664:	00cffe74 	movhi	r3,16377
   41668:	18c87ec4 	addi	r3,r3,8699
   4166c:	010cc534 	movhi	r4,13076
   41670:	211701c4 	addi	r4,r4,23559
   41674:	014f24b4 	movhi	r5,15506
   41678:	29698984 	addi	r5,r5,-23002
   4167c:	200d883a 	mov	r6,r4
   41680:	280f883a 	mov	r7,r5
   41684:	1009883a 	mov	r4,r2
   41688:	180b883a 	mov	r5,r3
   4168c:	00421f40 	call	421f4 <__adddf3>
   41690:	1009883a 	mov	r4,r2
   41694:	180b883a 	mov	r5,r3
   41698:	2021883a 	mov	r16,r4
   4169c:	2823883a 	mov	r17,r5
   416a0:	00022a06 	br	41f4c <atan+0x9d0>
	    else     return -atanhi[3]-atanlo[3];
   416a4:	00951134 	movhi	r2,21572
   416a8:	108b4604 	addi	r2,r2,11544
   416ac:	00cffe74 	movhi	r3,16377
   416b0:	18c87ec4 	addi	r3,r3,8699
   416b4:	1011883a 	mov	r8,r2
   416b8:	1a60003c 	xorhi	r9,r3,32768
   416bc:	008cc534 	movhi	r2,13076
   416c0:	109701c4 	addi	r2,r2,23559
   416c4:	00cf24b4 	movhi	r3,15506
   416c8:	18e98984 	addi	r3,r3,-23002
   416cc:	100d883a 	mov	r6,r2
   416d0:	180f883a 	mov	r7,r3
   416d4:	4009883a 	mov	r4,r8
   416d8:	480b883a 	mov	r5,r9
   416dc:	0043db80 	call	43db8 <__subdf3>
   416e0:	1009883a 	mov	r4,r2
   416e4:	180b883a 	mov	r5,r3
   416e8:	2021883a 	mov	r16,r4
   416ec:	2823883a 	mov	r17,r5
   416f0:	00021606 	br	41f4c <atan+0x9d0>
	} if (ix < 0x3fdc0000) {	/* |x| < 0.4375 */
   416f4:	e0ffe217 	ldw	r3,-120(fp)
   416f8:	008ff734 	movhi	r2,16348
   416fc:	18801e0e 	bge	r3,r2,41778 <atan+0x1fc>
	    if (ix < 0x3e200000) {	/* |x| < 2^-29 */
   41700:	e0ffe217 	ldw	r3,-120(fp)
   41704:	008f8834 	movhi	r2,15904
   41708:	1880180e 	bge	r3,r2,4176c <atan+0x1f0>
		if(huge+x>one) return x;	/* raise inexact */
   4170c:	00a20034 	movhi	r2,34816
   41710:	109d6704 	addi	r2,r2,30108
   41714:	00df8e34 	movhi	r3,32312
   41718:	18f90f04 	addi	r3,r3,-7108
   4171c:	e1bff017 	ldw	r6,-64(fp)
   41720:	e1fff117 	ldw	r7,-60(fp)
   41724:	1009883a 	mov	r4,r2
   41728:	180b883a 	mov	r5,r3
   4172c:	00421f40 	call	421f4 <__adddf3>
   41730:	1009883a 	mov	r4,r2
   41734:	180b883a 	mov	r5,r3
   41738:	2011883a 	mov	r8,r4
   4173c:	2813883a 	mov	r9,r5
   41740:	0005883a 	mov	r2,zero
   41744:	00cffc34 	movhi	r3,16368
   41748:	100d883a 	mov	r6,r2
   4174c:	180f883a 	mov	r7,r3
   41750:	4009883a 	mov	r4,r8
   41754:	480b883a 	mov	r5,r9
   41758:	00434700 	call	43470 <__gedf2>
   4175c:	0080030e 	bge	zero,r2,4176c <atan+0x1f0>
   41760:	e43ff017 	ldw	r16,-64(fp)
   41764:	e47ff117 	ldw	r17,-60(fp)
   41768:	0001f806 	br	41f4c <atan+0x9d0>
	    }
	    id = -1;
   4176c:	00bfffc4 	movi	r2,-1
   41770:	e0bfe015 	stw	r2,-128(fp)
   41774:	00008f06 	br	419b4 <atan+0x438>
	} else {
	x = fabs(x);
   41778:	e13ff017 	ldw	r4,-64(fp)
   4177c:	e17ff117 	ldw	r5,-60(fp)
   41780:	0041f900 	call	41f90 <fabs>
   41784:	e0bff015 	stw	r2,-64(fp)
   41788:	e0fff115 	stw	r3,-60(fp)
	if (ix < 0x3ff30000) {		/* |x| < 1.1875 */
   4178c:	e0ffe217 	ldw	r3,-120(fp)
   41790:	008ffcf4 	movhi	r2,16371
   41794:	18804f0e 	bge	r3,r2,418d4 <atan+0x358>
	    if (ix < 0x3fe60000) {	/* 7/16 <=|x|<11/16 */
   41798:	e0ffe217 	ldw	r3,-120(fp)
   4179c:	008ff9b4 	movhi	r2,16358
   417a0:	18802a0e 	bge	r3,r2,4184c <atan+0x2d0>
		id = 0; x = (2.0*x-one)/(2.0+x); 
   417a4:	e03fe015 	stw	zero,-128(fp)
   417a8:	e0bff017 	ldw	r2,-64(fp)
   417ac:	e0fff117 	ldw	r3,-60(fp)
   417b0:	100d883a 	mov	r6,r2
   417b4:	180f883a 	mov	r7,r3
   417b8:	1009883a 	mov	r4,r2
   417bc:	180b883a 	mov	r5,r3
   417c0:	00421f40 	call	421f4 <__adddf3>
   417c4:	1009883a 	mov	r4,r2
   417c8:	180b883a 	mov	r5,r3
   417cc:	2011883a 	mov	r8,r4
   417d0:	2813883a 	mov	r9,r5
   417d4:	0005883a 	mov	r2,zero
   417d8:	00cffc34 	movhi	r3,16368
   417dc:	100d883a 	mov	r6,r2
   417e0:	180f883a 	mov	r7,r3
   417e4:	4009883a 	mov	r4,r8
   417e8:	480b883a 	mov	r5,r9
   417ec:	0043db80 	call	43db8 <__subdf3>
   417f0:	1009883a 	mov	r4,r2
   417f4:	180b883a 	mov	r5,r3
   417f8:	2025883a 	mov	r18,r4
   417fc:	2827883a 	mov	r19,r5
   41800:	000d883a 	mov	r6,zero
   41804:	01d00034 	movhi	r7,16384
   41808:	e13ff017 	ldw	r4,-64(fp)
   4180c:	e17ff117 	ldw	r5,-60(fp)
   41810:	00421f40 	call	421f4 <__adddf3>
   41814:	1009883a 	mov	r4,r2
   41818:	180b883a 	mov	r5,r3
   4181c:	2005883a 	mov	r2,r4
   41820:	2807883a 	mov	r3,r5
   41824:	100d883a 	mov	r6,r2
   41828:	180f883a 	mov	r7,r3
   4182c:	9009883a 	mov	r4,r18
   41830:	980b883a 	mov	r5,r19
   41834:	0042aa00 	call	42aa0 <__divdf3>
   41838:	1009883a 	mov	r4,r2
   4183c:	180b883a 	mov	r5,r3
   41840:	e13ff015 	stw	r4,-64(fp)
   41844:	e17ff115 	stw	r5,-60(fp)
   41848:	00005a06 	br	419b4 <atan+0x438>
	    } else {			/* 11/16<=|x|< 19/16 */
		id = 1; x  = (x-one)/(x+one); 
   4184c:	00800044 	movi	r2,1
   41850:	e0bfe015 	stw	r2,-128(fp)
   41854:	0005883a 	mov	r2,zero
   41858:	00cffc34 	movhi	r3,16368
   4185c:	100d883a 	mov	r6,r2
   41860:	180f883a 	mov	r7,r3
   41864:	e13ff017 	ldw	r4,-64(fp)
   41868:	e17ff117 	ldw	r5,-60(fp)
   4186c:	0043db80 	call	43db8 <__subdf3>
   41870:	1009883a 	mov	r4,r2
   41874:	180b883a 	mov	r5,r3
   41878:	2025883a 	mov	r18,r4
   4187c:	2827883a 	mov	r19,r5
   41880:	0005883a 	mov	r2,zero
   41884:	00cffc34 	movhi	r3,16368
   41888:	e1bff017 	ldw	r6,-64(fp)
   4188c:	e1fff117 	ldw	r7,-60(fp)
   41890:	1009883a 	mov	r4,r2
   41894:	180b883a 	mov	r5,r3
   41898:	00421f40 	call	421f4 <__adddf3>
   4189c:	1009883a 	mov	r4,r2
   418a0:	180b883a 	mov	r5,r3
   418a4:	2005883a 	mov	r2,r4
   418a8:	2807883a 	mov	r3,r5
   418ac:	100d883a 	mov	r6,r2
   418b0:	180f883a 	mov	r7,r3
   418b4:	9009883a 	mov	r4,r18
   418b8:	980b883a 	mov	r5,r19
   418bc:	0042aa00 	call	42aa0 <__divdf3>
   418c0:	1009883a 	mov	r4,r2
   418c4:	180b883a 	mov	r5,r3
   418c8:	e13ff015 	stw	r4,-64(fp)
   418cc:	e17ff115 	stw	r5,-60(fp)
   418d0:	00003806 	br	419b4 <atan+0x438>
	    }
	} else {
	    if (ix < 0x40038000) {	/* |x| < 2.4375 */
   418d4:	e0ffe217 	ldw	r3,-120(fp)
   418d8:	009000f4 	movhi	r2,16387
   418dc:	109fffc4 	addi	r2,r2,32767
   418e0:	10c02916 	blt	r2,r3,41988 <atan+0x40c>
		id = 2; x  = (x-1.5)/(one+1.5*x);
   418e4:	00800084 	movi	r2,2
   418e8:	e0bfe015 	stw	r2,-128(fp)
   418ec:	000d883a 	mov	r6,zero
   418f0:	01cffe34 	movhi	r7,16376
   418f4:	e13ff017 	ldw	r4,-64(fp)
   418f8:	e17ff117 	ldw	r5,-60(fp)
   418fc:	0043db80 	call	43db8 <__subdf3>
   41900:	1009883a 	mov	r4,r2
   41904:	180b883a 	mov	r5,r3
   41908:	2025883a 	mov	r18,r4
   4190c:	2827883a 	mov	r19,r5
   41910:	000d883a 	mov	r6,zero
   41914:	01cffe34 	movhi	r7,16376
   41918:	e13ff017 	ldw	r4,-64(fp)
   4191c:	e17ff117 	ldw	r5,-60(fp)
   41920:	004354c0 	call	4354c <__muldf3>
   41924:	1009883a 	mov	r4,r2
   41928:	180b883a 	mov	r5,r3
   4192c:	2011883a 	mov	r8,r4
   41930:	2813883a 	mov	r9,r5
   41934:	0005883a 	mov	r2,zero
   41938:	00cffc34 	movhi	r3,16368
   4193c:	100d883a 	mov	r6,r2
   41940:	180f883a 	mov	r7,r3
   41944:	4009883a 	mov	r4,r8
   41948:	480b883a 	mov	r5,r9
   4194c:	00421f40 	call	421f4 <__adddf3>
   41950:	1009883a 	mov	r4,r2
   41954:	180b883a 	mov	r5,r3
   41958:	2005883a 	mov	r2,r4
   4195c:	2807883a 	mov	r3,r5
   41960:	100d883a 	mov	r6,r2
   41964:	180f883a 	mov	r7,r3
   41968:	9009883a 	mov	r4,r18
   4196c:	980b883a 	mov	r5,r19
   41970:	0042aa00 	call	42aa0 <__divdf3>
   41974:	1009883a 	mov	r4,r2
   41978:	180b883a 	mov	r5,r3
   4197c:	e13ff015 	stw	r4,-64(fp)
   41980:	e17ff115 	stw	r5,-60(fp)
   41984:	00000b06 	br	419b4 <atan+0x438>
	    } else {			/* 2.4375 <= |x| < 2^66 */
		id = 3; x  = -1.0/x;
   41988:	008000c4 	movi	r2,3
   4198c:	e0bfe015 	stw	r2,-128(fp)
   41990:	e1bff017 	ldw	r6,-64(fp)
   41994:	e1fff117 	ldw	r7,-60(fp)
   41998:	0009883a 	mov	r4,zero
   4199c:	016ffc34 	movhi	r5,49136
   419a0:	0042aa00 	call	42aa0 <__divdf3>
   419a4:	1009883a 	mov	r4,r2
   419a8:	180b883a 	mov	r5,r3
   419ac:	e13ff015 	stw	r4,-64(fp)
   419b0:	e17ff115 	stw	r5,-60(fp)
	    }
	}}
    /* end of argument reduction */
	z = x*x;
   419b4:	e1bff017 	ldw	r6,-64(fp)
   419b8:	e1fff117 	ldw	r7,-60(fp)
   419bc:	e13ff017 	ldw	r4,-64(fp)
   419c0:	e17ff117 	ldw	r5,-60(fp)
   419c4:	004354c0 	call	4354c <__muldf3>
   419c8:	1009883a 	mov	r4,r2
   419cc:	180b883a 	mov	r5,r3
   419d0:	e13fe415 	stw	r4,-112(fp)
   419d4:	e17fe515 	stw	r5,-108(fp)
	w = z*z;
   419d8:	e1bfe417 	ldw	r6,-112(fp)
   419dc:	e1ffe517 	ldw	r7,-108(fp)
   419e0:	e13fe417 	ldw	r4,-112(fp)
   419e4:	e17fe517 	ldw	r5,-108(fp)
   419e8:	004354c0 	call	4354c <__muldf3>
   419ec:	1009883a 	mov	r4,r2
   419f0:	180b883a 	mov	r5,r3
   419f4:	e13fe615 	stw	r4,-104(fp)
   419f8:	e17fe715 	stw	r5,-100(fp)
    /* break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly */
	s1 = z*(aT[0]+w*(aT[2]+w*(aT[4]+w*(aT[6]+w*(aT[8]+w*aT[10])))));
   419fc:	04955574 	movhi	r18,21845
   41a00:	94954344 	addi	r18,r18,21773
   41a04:	04cff574 	movhi	r19,16341
   41a08:	9cd55544 	addi	r19,r19,21845
   41a0c:	05248074 	movhi	r20,37377
   41a10:	a520ffc4 	addi	r20,r20,-31745
   41a14:	054ff0b4 	movhi	r21,16322
   41a18:	ad524904 	addi	r21,r21,18724
   41a1c:	05b15334 	movhi	r22,50508
   41a20:	b5881b84 	addi	r22,r22,8302
   41a24:	05cfedf4 	movhi	r23,16311
   41a28:	bdd17344 	addi	r23,r23,17869
   41a2c:	00a83434 	movhi	r2,41168
   41a30:	e0bff215 	stw	r2,-56(fp)
   41a34:	e0bff217 	ldw	r2,-56(fp)
   41a38:	108f5444 	addi	r2,r2,15697
   41a3c:	e0bff215 	stw	r2,-56(fp)
   41a40:	008fec74 	movhi	r2,16305
   41a44:	e0bff315 	stw	r2,-52(fp)
   41a48:	e0bff317 	ldw	r2,-52(fp)
   41a4c:	10835984 	addi	r2,r2,3430
   41a50:	e0bff315 	stw	r2,-52(fp)
   41a54:	00891db4 	movhi	r2,9334
   41a58:	e0bff415 	stw	r2,-48(fp)
   41a5c:	e0bff417 	ldw	r2,-48(fp)
   41a60:	10837ac4 	addi	r2,r2,3563
   41a64:	e0bff415 	stw	r2,-48(fp)
   41a68:	008fea74 	movhi	r2,16297
   41a6c:	e0bff515 	stw	r2,-44(fp)
   41a70:	e0bff517 	ldw	r2,-44(fp)
   41a74:	109ed2c4 	addi	r2,r2,31563
   41a78:	e0bff515 	stw	r2,-44(fp)
   41a7c:	00b8c8f4 	movhi	r2,58147
   41a80:	10b68444 	addi	r2,r2,-9711
   41a84:	00cfe474 	movhi	r3,16273
   41a88:	18eb4e84 	addi	r3,r3,-21190
   41a8c:	e1bfe617 	ldw	r6,-104(fp)
   41a90:	e1ffe717 	ldw	r7,-100(fp)
   41a94:	1009883a 	mov	r4,r2
   41a98:	180b883a 	mov	r5,r3
   41a9c:	004354c0 	call	4354c <__muldf3>
   41aa0:	1009883a 	mov	r4,r2
   41aa4:	180b883a 	mov	r5,r3
   41aa8:	2005883a 	mov	r2,r4
   41aac:	2807883a 	mov	r3,r5
   41ab0:	100d883a 	mov	r6,r2
   41ab4:	180f883a 	mov	r7,r3
   41ab8:	e13ff417 	ldw	r4,-48(fp)
   41abc:	e17ff517 	ldw	r5,-44(fp)
   41ac0:	00421f40 	call	421f4 <__adddf3>
   41ac4:	1009883a 	mov	r4,r2
   41ac8:	180b883a 	mov	r5,r3
   41acc:	2005883a 	mov	r2,r4
   41ad0:	2807883a 	mov	r3,r5
   41ad4:	e1bfe617 	ldw	r6,-104(fp)
   41ad8:	e1ffe717 	ldw	r7,-100(fp)
   41adc:	1009883a 	mov	r4,r2
   41ae0:	180b883a 	mov	r5,r3
   41ae4:	004354c0 	call	4354c <__muldf3>
   41ae8:	1009883a 	mov	r4,r2
   41aec:	180b883a 	mov	r5,r3
   41af0:	2005883a 	mov	r2,r4
   41af4:	2807883a 	mov	r3,r5
   41af8:	100d883a 	mov	r6,r2
   41afc:	180f883a 	mov	r7,r3
   41b00:	e13ff217 	ldw	r4,-56(fp)
   41b04:	e17ff317 	ldw	r5,-52(fp)
   41b08:	00421f40 	call	421f4 <__adddf3>
   41b0c:	1009883a 	mov	r4,r2
   41b10:	180b883a 	mov	r5,r3
   41b14:	2005883a 	mov	r2,r4
   41b18:	2807883a 	mov	r3,r5
   41b1c:	e1bfe617 	ldw	r6,-104(fp)
   41b20:	e1ffe717 	ldw	r7,-100(fp)
   41b24:	1009883a 	mov	r4,r2
   41b28:	180b883a 	mov	r5,r3
   41b2c:	004354c0 	call	4354c <__muldf3>
   41b30:	1009883a 	mov	r4,r2
   41b34:	180b883a 	mov	r5,r3
   41b38:	2005883a 	mov	r2,r4
   41b3c:	2807883a 	mov	r3,r5
   41b40:	100d883a 	mov	r6,r2
   41b44:	180f883a 	mov	r7,r3
   41b48:	b009883a 	mov	r4,r22
   41b4c:	b80b883a 	mov	r5,r23
   41b50:	00421f40 	call	421f4 <__adddf3>
   41b54:	1009883a 	mov	r4,r2
   41b58:	180b883a 	mov	r5,r3
   41b5c:	2005883a 	mov	r2,r4
   41b60:	2807883a 	mov	r3,r5
   41b64:	e1bfe617 	ldw	r6,-104(fp)
   41b68:	e1ffe717 	ldw	r7,-100(fp)
   41b6c:	1009883a 	mov	r4,r2
   41b70:	180b883a 	mov	r5,r3
   41b74:	004354c0 	call	4354c <__muldf3>
   41b78:	1009883a 	mov	r4,r2
   41b7c:	180b883a 	mov	r5,r3
   41b80:	2005883a 	mov	r2,r4
   41b84:	2807883a 	mov	r3,r5
   41b88:	100d883a 	mov	r6,r2
   41b8c:	180f883a 	mov	r7,r3
   41b90:	a009883a 	mov	r4,r20
   41b94:	a80b883a 	mov	r5,r21
   41b98:	00421f40 	call	421f4 <__adddf3>
   41b9c:	1009883a 	mov	r4,r2
   41ba0:	180b883a 	mov	r5,r3
   41ba4:	2005883a 	mov	r2,r4
   41ba8:	2807883a 	mov	r3,r5
   41bac:	e1bfe617 	ldw	r6,-104(fp)
   41bb0:	e1ffe717 	ldw	r7,-100(fp)
   41bb4:	1009883a 	mov	r4,r2
   41bb8:	180b883a 	mov	r5,r3
   41bbc:	004354c0 	call	4354c <__muldf3>
   41bc0:	1009883a 	mov	r4,r2
   41bc4:	180b883a 	mov	r5,r3
   41bc8:	2005883a 	mov	r2,r4
   41bcc:	2807883a 	mov	r3,r5
   41bd0:	100d883a 	mov	r6,r2
   41bd4:	180f883a 	mov	r7,r3
   41bd8:	9009883a 	mov	r4,r18
   41bdc:	980b883a 	mov	r5,r19
   41be0:	00421f40 	call	421f4 <__adddf3>
   41be4:	1009883a 	mov	r4,r2
   41be8:	180b883a 	mov	r5,r3
   41bec:	2005883a 	mov	r2,r4
   41bf0:	2807883a 	mov	r3,r5
   41bf4:	e1bfe417 	ldw	r6,-112(fp)
   41bf8:	e1ffe517 	ldw	r7,-108(fp)
   41bfc:	1009883a 	mov	r4,r2
   41c00:	180b883a 	mov	r5,r3
   41c04:	004354c0 	call	4354c <__muldf3>
   41c08:	1009883a 	mov	r4,r2
   41c0c:	180b883a 	mov	r5,r3
   41c10:	e13fe815 	stw	r4,-96(fp)
   41c14:	e17fe915 	stw	r5,-92(fp)
	s2 = w*(aT[1]+w*(aT[3]+w*(aT[5]+w*(aT[7]+w*aT[9]))));
   41c18:	04a66674 	movhi	r18,39321
   41c1c:	94baf104 	addi	r18,r18,-5180
   41c20:	04eff2b4 	movhi	r19,49098
   41c24:	9ce66644 	addi	r19,r19,-26215
   41c28:	053f88f4 	movhi	r20,65059
   41c2c:	a5059c44 	addi	r20,r20,5745
   41c30:	056fef34 	movhi	r21,49084
   41c34:	ad5c7184 	addi	r21,r21,29126
   41c38:	05abdd74 	movhi	r22,44917
   41c3c:	b5a69b44 	addi	r22,r22,-26003
   41c40:	05efed34 	movhi	r23,49076
   41c44:	bdec3c84 	addi	r23,r23,-20238
   41c48:	0094b7f4 	movhi	r2,21215
   41c4c:	e0bff615 	stw	r2,-40(fp)
   41c50:	e0bff617 	ldw	r2,-40(fp)
   41c54:	10bf6684 	addi	r2,r2,-614
   41c58:	e0bff615 	stw	r2,-40(fp)
   41c5c:	00afebb4 	movhi	r2,49070
   41c60:	e0bff715 	stw	r2,-36(fp)
   41c64:	e0bff717 	ldw	r2,-36(fp)
   41c68:	10b78b44 	addi	r2,r2,-8659
   41c6c:	e0bff715 	stw	r2,-36(fp)
   41c70:	008b1ab4 	movhi	r2,11370
   41c74:	109b0bc4 	addi	r2,r2,27695
   41c78:	00efe8f4 	movhi	r3,49059
   41c7c:	18ed1104 	addi	r3,r3,-19388
   41c80:	e1bfe617 	ldw	r6,-104(fp)
   41c84:	e1ffe717 	ldw	r7,-100(fp)
   41c88:	1009883a 	mov	r4,r2
   41c8c:	180b883a 	mov	r5,r3
   41c90:	004354c0 	call	4354c <__muldf3>
   41c94:	1009883a 	mov	r4,r2
   41c98:	180b883a 	mov	r5,r3
   41c9c:	2005883a 	mov	r2,r4
   41ca0:	2807883a 	mov	r3,r5
   41ca4:	100d883a 	mov	r6,r2
   41ca8:	180f883a 	mov	r7,r3
   41cac:	e13ff617 	ldw	r4,-40(fp)
   41cb0:	e17ff717 	ldw	r5,-36(fp)
   41cb4:	00421f40 	call	421f4 <__adddf3>
   41cb8:	1009883a 	mov	r4,r2
   41cbc:	180b883a 	mov	r5,r3
   41cc0:	2005883a 	mov	r2,r4
   41cc4:	2807883a 	mov	r3,r5
   41cc8:	e1bfe617 	ldw	r6,-104(fp)
   41ccc:	e1ffe717 	ldw	r7,-100(fp)
   41cd0:	1009883a 	mov	r4,r2
   41cd4:	180b883a 	mov	r5,r3
   41cd8:	004354c0 	call	4354c <__muldf3>
   41cdc:	1009883a 	mov	r4,r2
   41ce0:	180b883a 	mov	r5,r3
   41ce4:	2005883a 	mov	r2,r4
   41ce8:	2807883a 	mov	r3,r5
   41cec:	100d883a 	mov	r6,r2
   41cf0:	180f883a 	mov	r7,r3
   41cf4:	b009883a 	mov	r4,r22
   41cf8:	b80b883a 	mov	r5,r23
   41cfc:	00421f40 	call	421f4 <__adddf3>
   41d00:	1009883a 	mov	r4,r2
   41d04:	180b883a 	mov	r5,r3
   41d08:	2005883a 	mov	r2,r4
   41d0c:	2807883a 	mov	r3,r5
   41d10:	e1bfe617 	ldw	r6,-104(fp)
   41d14:	e1ffe717 	ldw	r7,-100(fp)
   41d18:	1009883a 	mov	r4,r2
   41d1c:	180b883a 	mov	r5,r3
   41d20:	004354c0 	call	4354c <__muldf3>
   41d24:	1009883a 	mov	r4,r2
   41d28:	180b883a 	mov	r5,r3
   41d2c:	2005883a 	mov	r2,r4
   41d30:	2807883a 	mov	r3,r5
   41d34:	100d883a 	mov	r6,r2
   41d38:	180f883a 	mov	r7,r3
   41d3c:	a009883a 	mov	r4,r20
   41d40:	a80b883a 	mov	r5,r21
   41d44:	00421f40 	call	421f4 <__adddf3>
   41d48:	1009883a 	mov	r4,r2
   41d4c:	180b883a 	mov	r5,r3
   41d50:	2005883a 	mov	r2,r4
   41d54:	2807883a 	mov	r3,r5
   41d58:	e1bfe617 	ldw	r6,-104(fp)
   41d5c:	e1ffe717 	ldw	r7,-100(fp)
   41d60:	1009883a 	mov	r4,r2
   41d64:	180b883a 	mov	r5,r3
   41d68:	004354c0 	call	4354c <__muldf3>
   41d6c:	1009883a 	mov	r4,r2
   41d70:	180b883a 	mov	r5,r3
   41d74:	2005883a 	mov	r2,r4
   41d78:	2807883a 	mov	r3,r5
   41d7c:	100d883a 	mov	r6,r2
   41d80:	180f883a 	mov	r7,r3
   41d84:	9009883a 	mov	r4,r18
   41d88:	980b883a 	mov	r5,r19
   41d8c:	00421f40 	call	421f4 <__adddf3>
   41d90:	1009883a 	mov	r4,r2
   41d94:	180b883a 	mov	r5,r3
   41d98:	2005883a 	mov	r2,r4
   41d9c:	2807883a 	mov	r3,r5
   41da0:	e1bfe617 	ldw	r6,-104(fp)
   41da4:	e1ffe717 	ldw	r7,-100(fp)
   41da8:	1009883a 	mov	r4,r2
   41dac:	180b883a 	mov	r5,r3
   41db0:	004354c0 	call	4354c <__muldf3>
   41db4:	1009883a 	mov	r4,r2
   41db8:	180b883a 	mov	r5,r3
   41dbc:	e13fea15 	stw	r4,-88(fp)
   41dc0:	e17feb15 	stw	r5,-84(fp)
	if (id<0) return x - x*(s1+s2);
   41dc4:	e0bfe017 	ldw	r2,-128(fp)
   41dc8:	10001c0e 	bge	r2,zero,41e3c <atan+0x8c0>
   41dcc:	e1bfea17 	ldw	r6,-88(fp)
   41dd0:	e1ffeb17 	ldw	r7,-84(fp)
   41dd4:	e13fe817 	ldw	r4,-96(fp)
   41dd8:	e17fe917 	ldw	r5,-92(fp)
   41ddc:	00421f40 	call	421f4 <__adddf3>
   41de0:	1009883a 	mov	r4,r2
   41de4:	180b883a 	mov	r5,r3
   41de8:	2005883a 	mov	r2,r4
   41dec:	2807883a 	mov	r3,r5
   41df0:	e1bff017 	ldw	r6,-64(fp)
   41df4:	e1fff117 	ldw	r7,-60(fp)
   41df8:	1009883a 	mov	r4,r2
   41dfc:	180b883a 	mov	r5,r3
   41e00:	004354c0 	call	4354c <__muldf3>
   41e04:	1009883a 	mov	r4,r2
   41e08:	180b883a 	mov	r5,r3
   41e0c:	2005883a 	mov	r2,r4
   41e10:	2807883a 	mov	r3,r5
   41e14:	100d883a 	mov	r6,r2
   41e18:	180f883a 	mov	r7,r3
   41e1c:	e13ff017 	ldw	r4,-64(fp)
   41e20:	e17ff117 	ldw	r5,-60(fp)
   41e24:	0043db80 	call	43db8 <__subdf3>
   41e28:	1009883a 	mov	r4,r2
   41e2c:	180b883a 	mov	r5,r3
   41e30:	2021883a 	mov	r16,r4
   41e34:	2823883a 	mov	r17,r5
   41e38:	00004406 	br	41f4c <atan+0x9d0>
	else {
	    z = atanhi[id] - ((x*(s1+s2) - atanlo[id]) - x);
   41e3c:	00800174 	movhi	r2,5
   41e40:	10935304 	addi	r2,r2,19788
   41e44:	e0ffe017 	ldw	r3,-128(fp)
   41e48:	180690fa 	slli	r3,r3,3
   41e4c:	10c5883a 	add	r2,r2,r3
   41e50:	14800017 	ldw	r18,0(r2)
   41e54:	14c00117 	ldw	r19,4(r2)
   41e58:	e1bfea17 	ldw	r6,-88(fp)
   41e5c:	e1ffeb17 	ldw	r7,-84(fp)
   41e60:	e13fe817 	ldw	r4,-96(fp)
   41e64:	e17fe917 	ldw	r5,-92(fp)
   41e68:	00421f40 	call	421f4 <__adddf3>
   41e6c:	1009883a 	mov	r4,r2
   41e70:	180b883a 	mov	r5,r3
   41e74:	2005883a 	mov	r2,r4
   41e78:	2807883a 	mov	r3,r5
   41e7c:	e1bff017 	ldw	r6,-64(fp)
   41e80:	e1fff117 	ldw	r7,-60(fp)
   41e84:	1009883a 	mov	r4,r2
   41e88:	180b883a 	mov	r5,r3
   41e8c:	004354c0 	call	4354c <__muldf3>
   41e90:	1009883a 	mov	r4,r2
   41e94:	180b883a 	mov	r5,r3
   41e98:	2011883a 	mov	r8,r4
   41e9c:	2813883a 	mov	r9,r5
   41ea0:	00800174 	movhi	r2,5
   41ea4:	10935b04 	addi	r2,r2,19820
   41ea8:	e0ffe017 	ldw	r3,-128(fp)
   41eac:	180690fa 	slli	r3,r3,3
   41eb0:	10c9883a 	add	r4,r2,r3
   41eb4:	20800017 	ldw	r2,0(r4)
   41eb8:	20c00117 	ldw	r3,4(r4)
   41ebc:	100d883a 	mov	r6,r2
   41ec0:	180f883a 	mov	r7,r3
   41ec4:	4009883a 	mov	r4,r8
   41ec8:	480b883a 	mov	r5,r9
   41ecc:	0043db80 	call	43db8 <__subdf3>
   41ed0:	1009883a 	mov	r4,r2
   41ed4:	180b883a 	mov	r5,r3
   41ed8:	2005883a 	mov	r2,r4
   41edc:	2807883a 	mov	r3,r5
   41ee0:	e1bff017 	ldw	r6,-64(fp)
   41ee4:	e1fff117 	ldw	r7,-60(fp)
   41ee8:	1009883a 	mov	r4,r2
   41eec:	180b883a 	mov	r5,r3
   41ef0:	0043db80 	call	43db8 <__subdf3>
   41ef4:	1009883a 	mov	r4,r2
   41ef8:	180b883a 	mov	r5,r3
   41efc:	2005883a 	mov	r2,r4
   41f00:	2807883a 	mov	r3,r5
   41f04:	100d883a 	mov	r6,r2
   41f08:	180f883a 	mov	r7,r3
   41f0c:	9009883a 	mov	r4,r18
   41f10:	980b883a 	mov	r5,r19
   41f14:	0043db80 	call	43db8 <__subdf3>
   41f18:	1009883a 	mov	r4,r2
   41f1c:	180b883a 	mov	r5,r3
   41f20:	e13fe415 	stw	r4,-112(fp)
   41f24:	e17fe515 	stw	r5,-108(fp)
	    return (hx<0)? -z:z;
   41f28:	e0bfe117 	ldw	r2,-124(fp)
   41f2c:	1000040e 	bge	r2,zero,41f40 <atan+0x9c4>
   41f30:	e43fe417 	ldw	r16,-112(fp)
   41f34:	e0bfe517 	ldw	r2,-108(fp)
   41f38:	1460003c 	xorhi	r17,r2,32768
   41f3c:	00000206 	br	41f48 <atan+0x9cc>
   41f40:	e43fe417 	ldw	r16,-112(fp)
   41f44:	e47fe517 	ldw	r17,-108(fp)
   41f48:	0001883a 	nop
   41f4c:	8007883a 	mov	r3,r16
   41f50:	8809883a 	mov	r4,r17
	}
}
   41f54:	1805883a 	mov	r2,r3
   41f58:	2007883a 	mov	r3,r4
   41f5c:	e6fff804 	addi	sp,fp,-32
   41f60:	dfc00917 	ldw	ra,36(sp)
   41f64:	df000817 	ldw	fp,32(sp)
   41f68:	ddc00717 	ldw	r23,28(sp)
   41f6c:	dd800617 	ldw	r22,24(sp)
   41f70:	dd400517 	ldw	r21,20(sp)
   41f74:	dd000417 	ldw	r20,16(sp)
   41f78:	dcc00317 	ldw	r19,12(sp)
   41f7c:	dc800217 	ldw	r18,8(sp)
   41f80:	dc400117 	ldw	r17,4(sp)
   41f84:	dc000017 	ldw	r16,0(sp)
   41f88:	dec00a04 	addi	sp,sp,40
   41f8c:	f800283a 	ret

00041f90 <fabs>:
	double fabs(double x)
#else
	double fabs(x)
	double x;
#endif
{
   41f90:	defff804 	addi	sp,sp,-32
   41f94:	df000715 	stw	fp,28(sp)
   41f98:	df000704 	addi	fp,sp,28
   41f9c:	e13ffe15 	stw	r4,-8(fp)
   41fa0:	e17fff15 	stw	r5,-4(fp)
	__uint32_t high;
	GET_HIGH_WORD(high,x);
   41fa4:	e0bffe17 	ldw	r2,-8(fp)
   41fa8:	e0bffa15 	stw	r2,-24(fp)
   41fac:	e0bfff17 	ldw	r2,-4(fp)
   41fb0:	e0bffb15 	stw	r2,-20(fp)
   41fb4:	e0bffb17 	ldw	r2,-20(fp)
   41fb8:	e0bff915 	stw	r2,-28(fp)
	SET_HIGH_WORD(x,high&0x7fffffff);
   41fbc:	e0bffe17 	ldw	r2,-8(fp)
   41fc0:	e0bffc15 	stw	r2,-16(fp)
   41fc4:	e0bfff17 	ldw	r2,-4(fp)
   41fc8:	e0bffd15 	stw	r2,-12(fp)
   41fcc:	e0fff917 	ldw	r3,-28(fp)
   41fd0:	00a00034 	movhi	r2,32768
   41fd4:	10bfffc4 	addi	r2,r2,-1
   41fd8:	1884703a 	and	r2,r3,r2
   41fdc:	e0bffd15 	stw	r2,-12(fp)
   41fe0:	e0bffc17 	ldw	r2,-16(fp)
   41fe4:	e0bffe15 	stw	r2,-8(fp)
   41fe8:	e0bffd17 	ldw	r2,-12(fp)
   41fec:	e0bfff15 	stw	r2,-4(fp)
        return x;
   41ff0:	e0bffe17 	ldw	r2,-8(fp)
   41ff4:	e0ffff17 	ldw	r3,-4(fp)
   41ff8:	1009883a 	mov	r4,r2
   41ffc:	180b883a 	mov	r5,r3
}
   42000:	2005883a 	mov	r2,r4
   42004:	2807883a 	mov	r3,r5
   42008:	e037883a 	mov	sp,fp
   4200c:	df000017 	ldw	fp,0(sp)
   42010:	dec00104 	addi	sp,sp,4
   42014:	f800283a 	ret

00042018 <__divsi3>:
   42018:	20001b16 	blt	r4,zero,42088 <__divsi3+0x70>
   4201c:	000f883a 	mov	r7,zero
   42020:	28001616 	blt	r5,zero,4207c <__divsi3+0x64>
   42024:	200d883a 	mov	r6,r4
   42028:	29001a2e 	bgeu	r5,r4,42094 <__divsi3+0x7c>
   4202c:	00800804 	movi	r2,32
   42030:	00c00044 	movi	r3,1
   42034:	00000106 	br	4203c <__divsi3+0x24>
   42038:	10000d26 	beq	r2,zero,42070 <__divsi3+0x58>
   4203c:	294b883a 	add	r5,r5,r5
   42040:	10bfffc4 	addi	r2,r2,-1
   42044:	18c7883a 	add	r3,r3,r3
   42048:	293ffb36 	bltu	r5,r4,42038 <_gp+0xfffe2e60>
   4204c:	0005883a 	mov	r2,zero
   42050:	18000726 	beq	r3,zero,42070 <__divsi3+0x58>
   42054:	0005883a 	mov	r2,zero
   42058:	31400236 	bltu	r6,r5,42064 <__divsi3+0x4c>
   4205c:	314dc83a 	sub	r6,r6,r5
   42060:	10c4b03a 	or	r2,r2,r3
   42064:	1806d07a 	srli	r3,r3,1
   42068:	280ad07a 	srli	r5,r5,1
   4206c:	183ffa1e 	bne	r3,zero,42058 <_gp+0xfffe2e80>
   42070:	38000126 	beq	r7,zero,42078 <__divsi3+0x60>
   42074:	0085c83a 	sub	r2,zero,r2
   42078:	f800283a 	ret
   4207c:	014bc83a 	sub	r5,zero,r5
   42080:	39c0005c 	xori	r7,r7,1
   42084:	003fe706 	br	42024 <_gp+0xfffe2e4c>
   42088:	0109c83a 	sub	r4,zero,r4
   4208c:	01c00044 	movi	r7,1
   42090:	003fe306 	br	42020 <_gp+0xfffe2e48>
   42094:	00c00044 	movi	r3,1
   42098:	003fee06 	br	42054 <_gp+0xfffe2e7c>

0004209c <__modsi3>:
   4209c:	20001716 	blt	r4,zero,420fc <__modsi3+0x60>
   420a0:	000f883a 	mov	r7,zero
   420a4:	2005883a 	mov	r2,r4
   420a8:	28001216 	blt	r5,zero,420f4 <__modsi3+0x58>
   420ac:	2900162e 	bgeu	r5,r4,42108 <__modsi3+0x6c>
   420b0:	01800804 	movi	r6,32
   420b4:	00c00044 	movi	r3,1
   420b8:	00000106 	br	420c0 <__modsi3+0x24>
   420bc:	30000a26 	beq	r6,zero,420e8 <__modsi3+0x4c>
   420c0:	294b883a 	add	r5,r5,r5
   420c4:	31bfffc4 	addi	r6,r6,-1
   420c8:	18c7883a 	add	r3,r3,r3
   420cc:	293ffb36 	bltu	r5,r4,420bc <_gp+0xfffe2ee4>
   420d0:	18000526 	beq	r3,zero,420e8 <__modsi3+0x4c>
   420d4:	1806d07a 	srli	r3,r3,1
   420d8:	11400136 	bltu	r2,r5,420e0 <__modsi3+0x44>
   420dc:	1145c83a 	sub	r2,r2,r5
   420e0:	280ad07a 	srli	r5,r5,1
   420e4:	183ffb1e 	bne	r3,zero,420d4 <_gp+0xfffe2efc>
   420e8:	38000126 	beq	r7,zero,420f0 <__modsi3+0x54>
   420ec:	0085c83a 	sub	r2,zero,r2
   420f0:	f800283a 	ret
   420f4:	014bc83a 	sub	r5,zero,r5
   420f8:	003fec06 	br	420ac <_gp+0xfffe2ed4>
   420fc:	0109c83a 	sub	r4,zero,r4
   42100:	01c00044 	movi	r7,1
   42104:	003fe706 	br	420a4 <_gp+0xfffe2ecc>
   42108:	00c00044 	movi	r3,1
   4210c:	003ff106 	br	420d4 <_gp+0xfffe2efc>

00042110 <__udivsi3>:
   42110:	200d883a 	mov	r6,r4
   42114:	2900152e 	bgeu	r5,r4,4216c <__udivsi3+0x5c>
   42118:	28001416 	blt	r5,zero,4216c <__udivsi3+0x5c>
   4211c:	00800804 	movi	r2,32
   42120:	00c00044 	movi	r3,1
   42124:	00000206 	br	42130 <__udivsi3+0x20>
   42128:	10000e26 	beq	r2,zero,42164 <__udivsi3+0x54>
   4212c:	28000516 	blt	r5,zero,42144 <__udivsi3+0x34>
   42130:	294b883a 	add	r5,r5,r5
   42134:	10bfffc4 	addi	r2,r2,-1
   42138:	18c7883a 	add	r3,r3,r3
   4213c:	293ffa36 	bltu	r5,r4,42128 <_gp+0xfffe2f50>
   42140:	18000826 	beq	r3,zero,42164 <__udivsi3+0x54>
   42144:	0005883a 	mov	r2,zero
   42148:	31400236 	bltu	r6,r5,42154 <__udivsi3+0x44>
   4214c:	314dc83a 	sub	r6,r6,r5
   42150:	10c4b03a 	or	r2,r2,r3
   42154:	1806d07a 	srli	r3,r3,1
   42158:	280ad07a 	srli	r5,r5,1
   4215c:	183ffa1e 	bne	r3,zero,42148 <_gp+0xfffe2f70>
   42160:	f800283a 	ret
   42164:	0005883a 	mov	r2,zero
   42168:	f800283a 	ret
   4216c:	00c00044 	movi	r3,1
   42170:	003ff406 	br	42144 <_gp+0xfffe2f6c>

00042174 <__umodsi3>:
   42174:	2005883a 	mov	r2,r4
   42178:	2900122e 	bgeu	r5,r4,421c4 <__umodsi3+0x50>
   4217c:	28001116 	blt	r5,zero,421c4 <__umodsi3+0x50>
   42180:	01800804 	movi	r6,32
   42184:	00c00044 	movi	r3,1
   42188:	00000206 	br	42194 <__umodsi3+0x20>
   4218c:	30000c26 	beq	r6,zero,421c0 <__umodsi3+0x4c>
   42190:	28000516 	blt	r5,zero,421a8 <__umodsi3+0x34>
   42194:	294b883a 	add	r5,r5,r5
   42198:	31bfffc4 	addi	r6,r6,-1
   4219c:	18c7883a 	add	r3,r3,r3
   421a0:	293ffa36 	bltu	r5,r4,4218c <_gp+0xfffe2fb4>
   421a4:	18000626 	beq	r3,zero,421c0 <__umodsi3+0x4c>
   421a8:	1806d07a 	srli	r3,r3,1
   421ac:	11400136 	bltu	r2,r5,421b4 <__umodsi3+0x40>
   421b0:	1145c83a 	sub	r2,r2,r5
   421b4:	280ad07a 	srli	r5,r5,1
   421b8:	183ffb1e 	bne	r3,zero,421a8 <_gp+0xfffe2fd0>
   421bc:	f800283a 	ret
   421c0:	f800283a 	ret
   421c4:	00c00044 	movi	r3,1
   421c8:	003ff706 	br	421a8 <_gp+0xfffe2fd0>

000421cc <__mulsi3>:
   421cc:	0005883a 	mov	r2,zero
   421d0:	20000726 	beq	r4,zero,421f0 <__mulsi3+0x24>
   421d4:	20c0004c 	andi	r3,r4,1
   421d8:	2008d07a 	srli	r4,r4,1
   421dc:	18000126 	beq	r3,zero,421e4 <__mulsi3+0x18>
   421e0:	1145883a 	add	r2,r2,r5
   421e4:	294b883a 	add	r5,r5,r5
   421e8:	203ffa1e 	bne	r4,zero,421d4 <_gp+0xfffe2ffc>
   421ec:	f800283a 	ret
   421f0:	f800283a 	ret

000421f4 <__adddf3>:
   421f4:	02c00434 	movhi	r11,16
   421f8:	5affffc4 	addi	r11,r11,-1
   421fc:	2806d7fa 	srli	r3,r5,31
   42200:	2ad4703a 	and	r10,r5,r11
   42204:	3ad2703a 	and	r9,r7,r11
   42208:	3804d53a 	srli	r2,r7,20
   4220c:	3018d77a 	srli	r12,r6,29
   42210:	280ad53a 	srli	r5,r5,20
   42214:	501490fa 	slli	r10,r10,3
   42218:	2010d77a 	srli	r8,r4,29
   4221c:	481290fa 	slli	r9,r9,3
   42220:	380ed7fa 	srli	r7,r7,31
   42224:	defffb04 	addi	sp,sp,-20
   42228:	dc800215 	stw	r18,8(sp)
   4222c:	dc400115 	stw	r17,4(sp)
   42230:	dc000015 	stw	r16,0(sp)
   42234:	dfc00415 	stw	ra,16(sp)
   42238:	dcc00315 	stw	r19,12(sp)
   4223c:	1c803fcc 	andi	r18,r3,255
   42240:	2c01ffcc 	andi	r16,r5,2047
   42244:	5210b03a 	or	r8,r10,r8
   42248:	202290fa 	slli	r17,r4,3
   4224c:	1081ffcc 	andi	r2,r2,2047
   42250:	4b12b03a 	or	r9,r9,r12
   42254:	300c90fa 	slli	r6,r6,3
   42258:	91c07526 	beq	r18,r7,42430 <__adddf3+0x23c>
   4225c:	8087c83a 	sub	r3,r16,r2
   42260:	00c0ab0e 	bge	zero,r3,42510 <__adddf3+0x31c>
   42264:	10002a1e 	bne	r2,zero,42310 <__adddf3+0x11c>
   42268:	4984b03a 	or	r2,r9,r6
   4226c:	1000961e 	bne	r2,zero,424c8 <__adddf3+0x2d4>
   42270:	888001cc 	andi	r2,r17,7
   42274:	10000726 	beq	r2,zero,42294 <__adddf3+0xa0>
   42278:	888003cc 	andi	r2,r17,15
   4227c:	00c00104 	movi	r3,4
   42280:	10c00426 	beq	r2,r3,42294 <__adddf3+0xa0>
   42284:	88c7883a 	add	r3,r17,r3
   42288:	1c63803a 	cmpltu	r17,r3,r17
   4228c:	4451883a 	add	r8,r8,r17
   42290:	1823883a 	mov	r17,r3
   42294:	4080202c 	andhi	r2,r8,128
   42298:	10005926 	beq	r2,zero,42400 <__adddf3+0x20c>
   4229c:	84000044 	addi	r16,r16,1
   422a0:	0081ffc4 	movi	r2,2047
   422a4:	8080ba26 	beq	r16,r2,42590 <__adddf3+0x39c>
   422a8:	00bfe034 	movhi	r2,65408
   422ac:	10bfffc4 	addi	r2,r2,-1
   422b0:	4090703a 	and	r8,r8,r2
   422b4:	4004977a 	slli	r2,r8,29
   422b8:	4010927a 	slli	r8,r8,9
   422bc:	8822d0fa 	srli	r17,r17,3
   422c0:	8401ffcc 	andi	r16,r16,2047
   422c4:	4010d33a 	srli	r8,r8,12
   422c8:	9007883a 	mov	r3,r18
   422cc:	1444b03a 	or	r2,r2,r17
   422d0:	8401ffcc 	andi	r16,r16,2047
   422d4:	8020953a 	slli	r16,r16,20
   422d8:	18c03fcc 	andi	r3,r3,255
   422dc:	01000434 	movhi	r4,16
   422e0:	213fffc4 	addi	r4,r4,-1
   422e4:	180697fa 	slli	r3,r3,31
   422e8:	4110703a 	and	r8,r8,r4
   422ec:	4410b03a 	or	r8,r8,r16
   422f0:	40c6b03a 	or	r3,r8,r3
   422f4:	dfc00417 	ldw	ra,16(sp)
   422f8:	dcc00317 	ldw	r19,12(sp)
   422fc:	dc800217 	ldw	r18,8(sp)
   42300:	dc400117 	ldw	r17,4(sp)
   42304:	dc000017 	ldw	r16,0(sp)
   42308:	dec00504 	addi	sp,sp,20
   4230c:	f800283a 	ret
   42310:	0081ffc4 	movi	r2,2047
   42314:	80bfd626 	beq	r16,r2,42270 <_gp+0xfffe3098>
   42318:	4a402034 	orhi	r9,r9,128
   4231c:	00800e04 	movi	r2,56
   42320:	10c09f16 	blt	r2,r3,425a0 <__adddf3+0x3ac>
   42324:	008007c4 	movi	r2,31
   42328:	10c0c216 	blt	r2,r3,42634 <__adddf3+0x440>
   4232c:	00800804 	movi	r2,32
   42330:	10c5c83a 	sub	r2,r2,r3
   42334:	488a983a 	sll	r5,r9,r2
   42338:	30c8d83a 	srl	r4,r6,r3
   4233c:	3084983a 	sll	r2,r6,r2
   42340:	48c6d83a 	srl	r3,r9,r3
   42344:	290cb03a 	or	r6,r5,r4
   42348:	1004c03a 	cmpne	r2,r2,zero
   4234c:	308cb03a 	or	r6,r6,r2
   42350:	898dc83a 	sub	r6,r17,r6
   42354:	89a3803a 	cmpltu	r17,r17,r6
   42358:	40d1c83a 	sub	r8,r8,r3
   4235c:	4451c83a 	sub	r8,r8,r17
   42360:	3023883a 	mov	r17,r6
   42364:	4080202c 	andhi	r2,r8,128
   42368:	10002326 	beq	r2,zero,423f8 <__adddf3+0x204>
   4236c:	04c02034 	movhi	r19,128
   42370:	9cffffc4 	addi	r19,r19,-1
   42374:	44e6703a 	and	r19,r8,r19
   42378:	98007626 	beq	r19,zero,42554 <__adddf3+0x360>
   4237c:	9809883a 	mov	r4,r19
   42380:	0044ac80 	call	44ac8 <__clzsi2>
   42384:	10fffe04 	addi	r3,r2,-8
   42388:	010007c4 	movi	r4,31
   4238c:	20c07716 	blt	r4,r3,4256c <__adddf3+0x378>
   42390:	00800804 	movi	r2,32
   42394:	10c5c83a 	sub	r2,r2,r3
   42398:	8884d83a 	srl	r2,r17,r2
   4239c:	98d0983a 	sll	r8,r19,r3
   423a0:	88e2983a 	sll	r17,r17,r3
   423a4:	1204b03a 	or	r2,r2,r8
   423a8:	1c007416 	blt	r3,r16,4257c <__adddf3+0x388>
   423ac:	1c21c83a 	sub	r16,r3,r16
   423b0:	82000044 	addi	r8,r16,1
   423b4:	00c007c4 	movi	r3,31
   423b8:	1a009116 	blt	r3,r8,42600 <__adddf3+0x40c>
   423bc:	00c00804 	movi	r3,32
   423c0:	1a07c83a 	sub	r3,r3,r8
   423c4:	8a08d83a 	srl	r4,r17,r8
   423c8:	88e2983a 	sll	r17,r17,r3
   423cc:	10c6983a 	sll	r3,r2,r3
   423d0:	1210d83a 	srl	r8,r2,r8
   423d4:	8804c03a 	cmpne	r2,r17,zero
   423d8:	1906b03a 	or	r3,r3,r4
   423dc:	18a2b03a 	or	r17,r3,r2
   423e0:	0021883a 	mov	r16,zero
   423e4:	003fa206 	br	42270 <_gp+0xfffe3098>
   423e8:	1890b03a 	or	r8,r3,r2
   423ec:	40017d26 	beq	r8,zero,429e4 <__adddf3+0x7f0>
   423f0:	1011883a 	mov	r8,r2
   423f4:	1823883a 	mov	r17,r3
   423f8:	888001cc 	andi	r2,r17,7
   423fc:	103f9e1e 	bne	r2,zero,42278 <_gp+0xfffe30a0>
   42400:	4004977a 	slli	r2,r8,29
   42404:	8822d0fa 	srli	r17,r17,3
   42408:	4010d0fa 	srli	r8,r8,3
   4240c:	9007883a 	mov	r3,r18
   42410:	1444b03a 	or	r2,r2,r17
   42414:	0101ffc4 	movi	r4,2047
   42418:	81002426 	beq	r16,r4,424ac <__adddf3+0x2b8>
   4241c:	8120703a 	and	r16,r16,r4
   42420:	01000434 	movhi	r4,16
   42424:	213fffc4 	addi	r4,r4,-1
   42428:	4110703a 	and	r8,r8,r4
   4242c:	003fa806 	br	422d0 <_gp+0xfffe30f8>
   42430:	8089c83a 	sub	r4,r16,r2
   42434:	01005e0e 	bge	zero,r4,425b0 <__adddf3+0x3bc>
   42438:	10002b26 	beq	r2,zero,424e8 <__adddf3+0x2f4>
   4243c:	0081ffc4 	movi	r2,2047
   42440:	80bf8b26 	beq	r16,r2,42270 <_gp+0xfffe3098>
   42444:	4a402034 	orhi	r9,r9,128
   42448:	00800e04 	movi	r2,56
   4244c:	1100a40e 	bge	r2,r4,426e0 <__adddf3+0x4ec>
   42450:	498cb03a 	or	r6,r9,r6
   42454:	300ac03a 	cmpne	r5,r6,zero
   42458:	0013883a 	mov	r9,zero
   4245c:	2c4b883a 	add	r5,r5,r17
   42460:	2c63803a 	cmpltu	r17,r5,r17
   42464:	4a11883a 	add	r8,r9,r8
   42468:	8a11883a 	add	r8,r17,r8
   4246c:	2823883a 	mov	r17,r5
   42470:	4080202c 	andhi	r2,r8,128
   42474:	103fe026 	beq	r2,zero,423f8 <_gp+0xfffe3220>
   42478:	84000044 	addi	r16,r16,1
   4247c:	0081ffc4 	movi	r2,2047
   42480:	8080d226 	beq	r16,r2,427cc <__adddf3+0x5d8>
   42484:	00bfe034 	movhi	r2,65408
   42488:	10bfffc4 	addi	r2,r2,-1
   4248c:	4090703a 	and	r8,r8,r2
   42490:	880ad07a 	srli	r5,r17,1
   42494:	400897fa 	slli	r4,r8,31
   42498:	88c0004c 	andi	r3,r17,1
   4249c:	28e2b03a 	or	r17,r5,r3
   424a0:	4010d07a 	srli	r8,r8,1
   424a4:	2462b03a 	or	r17,r4,r17
   424a8:	003f7106 	br	42270 <_gp+0xfffe3098>
   424ac:	4088b03a 	or	r4,r8,r2
   424b0:	20014526 	beq	r4,zero,429c8 <__adddf3+0x7d4>
   424b4:	01000434 	movhi	r4,16
   424b8:	42000234 	orhi	r8,r8,8
   424bc:	213fffc4 	addi	r4,r4,-1
   424c0:	4110703a 	and	r8,r8,r4
   424c4:	003f8206 	br	422d0 <_gp+0xfffe30f8>
   424c8:	18ffffc4 	addi	r3,r3,-1
   424cc:	1800491e 	bne	r3,zero,425f4 <__adddf3+0x400>
   424d0:	898bc83a 	sub	r5,r17,r6
   424d4:	8963803a 	cmpltu	r17,r17,r5
   424d8:	4251c83a 	sub	r8,r8,r9
   424dc:	4451c83a 	sub	r8,r8,r17
   424e0:	2823883a 	mov	r17,r5
   424e4:	003f9f06 	br	42364 <_gp+0xfffe318c>
   424e8:	4984b03a 	or	r2,r9,r6
   424ec:	103f6026 	beq	r2,zero,42270 <_gp+0xfffe3098>
   424f0:	213fffc4 	addi	r4,r4,-1
   424f4:	2000931e 	bne	r4,zero,42744 <__adddf3+0x550>
   424f8:	898d883a 	add	r6,r17,r6
   424fc:	3463803a 	cmpltu	r17,r6,r17
   42500:	4251883a 	add	r8,r8,r9
   42504:	8a11883a 	add	r8,r17,r8
   42508:	3023883a 	mov	r17,r6
   4250c:	003fd806 	br	42470 <_gp+0xfffe3298>
   42510:	1800541e 	bne	r3,zero,42664 <__adddf3+0x470>
   42514:	80800044 	addi	r2,r16,1
   42518:	1081ffcc 	andi	r2,r2,2047
   4251c:	00c00044 	movi	r3,1
   42520:	1880a00e 	bge	r3,r2,427a4 <__adddf3+0x5b0>
   42524:	8989c83a 	sub	r4,r17,r6
   42528:	8905803a 	cmpltu	r2,r17,r4
   4252c:	4267c83a 	sub	r19,r8,r9
   42530:	98a7c83a 	sub	r19,r19,r2
   42534:	9880202c 	andhi	r2,r19,128
   42538:	10006326 	beq	r2,zero,426c8 <__adddf3+0x4d4>
   4253c:	3463c83a 	sub	r17,r6,r17
   42540:	4a07c83a 	sub	r3,r9,r8
   42544:	344d803a 	cmpltu	r6,r6,r17
   42548:	19a7c83a 	sub	r19,r3,r6
   4254c:	3825883a 	mov	r18,r7
   42550:	983f8a1e 	bne	r19,zero,4237c <_gp+0xfffe31a4>
   42554:	8809883a 	mov	r4,r17
   42558:	0044ac80 	call	44ac8 <__clzsi2>
   4255c:	10800804 	addi	r2,r2,32
   42560:	10fffe04 	addi	r3,r2,-8
   42564:	010007c4 	movi	r4,31
   42568:	20ff890e 	bge	r4,r3,42390 <_gp+0xfffe31b8>
   4256c:	10bff604 	addi	r2,r2,-40
   42570:	8884983a 	sll	r2,r17,r2
   42574:	0023883a 	mov	r17,zero
   42578:	1c3f8c0e 	bge	r3,r16,423ac <_gp+0xfffe31d4>
   4257c:	023fe034 	movhi	r8,65408
   42580:	423fffc4 	addi	r8,r8,-1
   42584:	80e1c83a 	sub	r16,r16,r3
   42588:	1210703a 	and	r8,r2,r8
   4258c:	003f3806 	br	42270 <_gp+0xfffe3098>
   42590:	9007883a 	mov	r3,r18
   42594:	0011883a 	mov	r8,zero
   42598:	0005883a 	mov	r2,zero
   4259c:	003f4c06 	br	422d0 <_gp+0xfffe30f8>
   425a0:	498cb03a 	or	r6,r9,r6
   425a4:	300cc03a 	cmpne	r6,r6,zero
   425a8:	0007883a 	mov	r3,zero
   425ac:	003f6806 	br	42350 <_gp+0xfffe3178>
   425b0:	20009c1e 	bne	r4,zero,42824 <__adddf3+0x630>
   425b4:	80800044 	addi	r2,r16,1
   425b8:	1141ffcc 	andi	r5,r2,2047
   425bc:	01000044 	movi	r4,1
   425c0:	2140670e 	bge	r4,r5,42760 <__adddf3+0x56c>
   425c4:	0101ffc4 	movi	r4,2047
   425c8:	11007f26 	beq	r2,r4,427c8 <__adddf3+0x5d4>
   425cc:	898d883a 	add	r6,r17,r6
   425d0:	4247883a 	add	r3,r8,r9
   425d4:	3451803a 	cmpltu	r8,r6,r17
   425d8:	40d1883a 	add	r8,r8,r3
   425dc:	402297fa 	slli	r17,r8,31
   425e0:	300cd07a 	srli	r6,r6,1
   425e4:	4010d07a 	srli	r8,r8,1
   425e8:	1021883a 	mov	r16,r2
   425ec:	89a2b03a 	or	r17,r17,r6
   425f0:	003f1f06 	br	42270 <_gp+0xfffe3098>
   425f4:	0081ffc4 	movi	r2,2047
   425f8:	80bf481e 	bne	r16,r2,4231c <_gp+0xfffe3144>
   425fc:	003f1c06 	br	42270 <_gp+0xfffe3098>
   42600:	843ff844 	addi	r16,r16,-31
   42604:	01000804 	movi	r4,32
   42608:	1406d83a 	srl	r3,r2,r16
   4260c:	41005026 	beq	r8,r4,42750 <__adddf3+0x55c>
   42610:	01001004 	movi	r4,64
   42614:	2211c83a 	sub	r8,r4,r8
   42618:	1204983a 	sll	r2,r2,r8
   4261c:	88a2b03a 	or	r17,r17,r2
   42620:	8822c03a 	cmpne	r17,r17,zero
   42624:	1c62b03a 	or	r17,r3,r17
   42628:	0011883a 	mov	r8,zero
   4262c:	0021883a 	mov	r16,zero
   42630:	003f7106 	br	423f8 <_gp+0xfffe3220>
   42634:	193ff804 	addi	r4,r3,-32
   42638:	00800804 	movi	r2,32
   4263c:	4908d83a 	srl	r4,r9,r4
   42640:	18804526 	beq	r3,r2,42758 <__adddf3+0x564>
   42644:	00801004 	movi	r2,64
   42648:	10c5c83a 	sub	r2,r2,r3
   4264c:	4886983a 	sll	r3,r9,r2
   42650:	198cb03a 	or	r6,r3,r6
   42654:	300cc03a 	cmpne	r6,r6,zero
   42658:	218cb03a 	or	r6,r4,r6
   4265c:	0007883a 	mov	r3,zero
   42660:	003f3b06 	br	42350 <_gp+0xfffe3178>
   42664:	80002a26 	beq	r16,zero,42710 <__adddf3+0x51c>
   42668:	0101ffc4 	movi	r4,2047
   4266c:	11006826 	beq	r2,r4,42810 <__adddf3+0x61c>
   42670:	00c7c83a 	sub	r3,zero,r3
   42674:	42002034 	orhi	r8,r8,128
   42678:	01000e04 	movi	r4,56
   4267c:	20c07c16 	blt	r4,r3,42870 <__adddf3+0x67c>
   42680:	010007c4 	movi	r4,31
   42684:	20c0da16 	blt	r4,r3,429f0 <__adddf3+0x7fc>
   42688:	01000804 	movi	r4,32
   4268c:	20c9c83a 	sub	r4,r4,r3
   42690:	4114983a 	sll	r10,r8,r4
   42694:	88cad83a 	srl	r5,r17,r3
   42698:	8908983a 	sll	r4,r17,r4
   4269c:	40c6d83a 	srl	r3,r8,r3
   426a0:	5162b03a 	or	r17,r10,r5
   426a4:	2008c03a 	cmpne	r4,r4,zero
   426a8:	8922b03a 	or	r17,r17,r4
   426ac:	3463c83a 	sub	r17,r6,r17
   426b0:	48c7c83a 	sub	r3,r9,r3
   426b4:	344d803a 	cmpltu	r6,r6,r17
   426b8:	1991c83a 	sub	r8,r3,r6
   426bc:	1021883a 	mov	r16,r2
   426c0:	3825883a 	mov	r18,r7
   426c4:	003f2706 	br	42364 <_gp+0xfffe318c>
   426c8:	24d0b03a 	or	r8,r4,r19
   426cc:	40001b1e 	bne	r8,zero,4273c <__adddf3+0x548>
   426d0:	0005883a 	mov	r2,zero
   426d4:	0007883a 	mov	r3,zero
   426d8:	0021883a 	mov	r16,zero
   426dc:	003f4d06 	br	42414 <_gp+0xfffe323c>
   426e0:	008007c4 	movi	r2,31
   426e4:	11003c16 	blt	r2,r4,427d8 <__adddf3+0x5e4>
   426e8:	00800804 	movi	r2,32
   426ec:	1105c83a 	sub	r2,r2,r4
   426f0:	488e983a 	sll	r7,r9,r2
   426f4:	310ad83a 	srl	r5,r6,r4
   426f8:	3084983a 	sll	r2,r6,r2
   426fc:	4912d83a 	srl	r9,r9,r4
   42700:	394ab03a 	or	r5,r7,r5
   42704:	1004c03a 	cmpne	r2,r2,zero
   42708:	288ab03a 	or	r5,r5,r2
   4270c:	003f5306 	br	4245c <_gp+0xfffe3284>
   42710:	4448b03a 	or	r4,r8,r17
   42714:	20003e26 	beq	r4,zero,42810 <__adddf3+0x61c>
   42718:	00c6303a 	nor	r3,zero,r3
   4271c:	18003a1e 	bne	r3,zero,42808 <__adddf3+0x614>
   42720:	3463c83a 	sub	r17,r6,r17
   42724:	4a07c83a 	sub	r3,r9,r8
   42728:	344d803a 	cmpltu	r6,r6,r17
   4272c:	1991c83a 	sub	r8,r3,r6
   42730:	1021883a 	mov	r16,r2
   42734:	3825883a 	mov	r18,r7
   42738:	003f0a06 	br	42364 <_gp+0xfffe318c>
   4273c:	2023883a 	mov	r17,r4
   42740:	003f0d06 	br	42378 <_gp+0xfffe31a0>
   42744:	0081ffc4 	movi	r2,2047
   42748:	80bf3f1e 	bne	r16,r2,42448 <_gp+0xfffe3270>
   4274c:	003ec806 	br	42270 <_gp+0xfffe3098>
   42750:	0005883a 	mov	r2,zero
   42754:	003fb106 	br	4261c <_gp+0xfffe3444>
   42758:	0007883a 	mov	r3,zero
   4275c:	003fbc06 	br	42650 <_gp+0xfffe3478>
   42760:	4444b03a 	or	r2,r8,r17
   42764:	8000871e 	bne	r16,zero,42984 <__adddf3+0x790>
   42768:	1000ba26 	beq	r2,zero,42a54 <__adddf3+0x860>
   4276c:	4984b03a 	or	r2,r9,r6
   42770:	103ebf26 	beq	r2,zero,42270 <_gp+0xfffe3098>
   42774:	8985883a 	add	r2,r17,r6
   42778:	4247883a 	add	r3,r8,r9
   4277c:	1451803a 	cmpltu	r8,r2,r17
   42780:	40d1883a 	add	r8,r8,r3
   42784:	40c0202c 	andhi	r3,r8,128
   42788:	1023883a 	mov	r17,r2
   4278c:	183f1a26 	beq	r3,zero,423f8 <_gp+0xfffe3220>
   42790:	00bfe034 	movhi	r2,65408
   42794:	10bfffc4 	addi	r2,r2,-1
   42798:	2021883a 	mov	r16,r4
   4279c:	4090703a 	and	r8,r8,r2
   427a0:	003eb306 	br	42270 <_gp+0xfffe3098>
   427a4:	4444b03a 	or	r2,r8,r17
   427a8:	8000291e 	bne	r16,zero,42850 <__adddf3+0x65c>
   427ac:	10004b1e 	bne	r2,zero,428dc <__adddf3+0x6e8>
   427b0:	4990b03a 	or	r8,r9,r6
   427b4:	40008b26 	beq	r8,zero,429e4 <__adddf3+0x7f0>
   427b8:	4811883a 	mov	r8,r9
   427bc:	3023883a 	mov	r17,r6
   427c0:	3825883a 	mov	r18,r7
   427c4:	003eaa06 	br	42270 <_gp+0xfffe3098>
   427c8:	1021883a 	mov	r16,r2
   427cc:	0011883a 	mov	r8,zero
   427d0:	0005883a 	mov	r2,zero
   427d4:	003f0f06 	br	42414 <_gp+0xfffe323c>
   427d8:	217ff804 	addi	r5,r4,-32
   427dc:	00800804 	movi	r2,32
   427e0:	494ad83a 	srl	r5,r9,r5
   427e4:	20807d26 	beq	r4,r2,429dc <__adddf3+0x7e8>
   427e8:	00801004 	movi	r2,64
   427ec:	1109c83a 	sub	r4,r2,r4
   427f0:	4912983a 	sll	r9,r9,r4
   427f4:	498cb03a 	or	r6,r9,r6
   427f8:	300cc03a 	cmpne	r6,r6,zero
   427fc:	298ab03a 	or	r5,r5,r6
   42800:	0013883a 	mov	r9,zero
   42804:	003f1506 	br	4245c <_gp+0xfffe3284>
   42808:	0101ffc4 	movi	r4,2047
   4280c:	113f9a1e 	bne	r2,r4,42678 <_gp+0xfffe34a0>
   42810:	4811883a 	mov	r8,r9
   42814:	3023883a 	mov	r17,r6
   42818:	1021883a 	mov	r16,r2
   4281c:	3825883a 	mov	r18,r7
   42820:	003e9306 	br	42270 <_gp+0xfffe3098>
   42824:	8000161e 	bne	r16,zero,42880 <__adddf3+0x68c>
   42828:	444ab03a 	or	r5,r8,r17
   4282c:	28005126 	beq	r5,zero,42974 <__adddf3+0x780>
   42830:	0108303a 	nor	r4,zero,r4
   42834:	20004d1e 	bne	r4,zero,4296c <__adddf3+0x778>
   42838:	89a3883a 	add	r17,r17,r6
   4283c:	4253883a 	add	r9,r8,r9
   42840:	898d803a 	cmpltu	r6,r17,r6
   42844:	3251883a 	add	r8,r6,r9
   42848:	1021883a 	mov	r16,r2
   4284c:	003f0806 	br	42470 <_gp+0xfffe3298>
   42850:	1000301e 	bne	r2,zero,42914 <__adddf3+0x720>
   42854:	4984b03a 	or	r2,r9,r6
   42858:	10007126 	beq	r2,zero,42a20 <__adddf3+0x82c>
   4285c:	4811883a 	mov	r8,r9
   42860:	3023883a 	mov	r17,r6
   42864:	3825883a 	mov	r18,r7
   42868:	0401ffc4 	movi	r16,2047
   4286c:	003e8006 	br	42270 <_gp+0xfffe3098>
   42870:	4462b03a 	or	r17,r8,r17
   42874:	8822c03a 	cmpne	r17,r17,zero
   42878:	0007883a 	mov	r3,zero
   4287c:	003f8b06 	br	426ac <_gp+0xfffe34d4>
   42880:	0141ffc4 	movi	r5,2047
   42884:	11403b26 	beq	r2,r5,42974 <__adddf3+0x780>
   42888:	0109c83a 	sub	r4,zero,r4
   4288c:	42002034 	orhi	r8,r8,128
   42890:	01400e04 	movi	r5,56
   42894:	29006716 	blt	r5,r4,42a34 <__adddf3+0x840>
   42898:	014007c4 	movi	r5,31
   4289c:	29007016 	blt	r5,r4,42a60 <__adddf3+0x86c>
   428a0:	01400804 	movi	r5,32
   428a4:	290bc83a 	sub	r5,r5,r4
   428a8:	4154983a 	sll	r10,r8,r5
   428ac:	890ed83a 	srl	r7,r17,r4
   428b0:	894a983a 	sll	r5,r17,r5
   428b4:	4108d83a 	srl	r4,r8,r4
   428b8:	51e2b03a 	or	r17,r10,r7
   428bc:	280ac03a 	cmpne	r5,r5,zero
   428c0:	8962b03a 	or	r17,r17,r5
   428c4:	89a3883a 	add	r17,r17,r6
   428c8:	2253883a 	add	r9,r4,r9
   428cc:	898d803a 	cmpltu	r6,r17,r6
   428d0:	3251883a 	add	r8,r6,r9
   428d4:	1021883a 	mov	r16,r2
   428d8:	003ee506 	br	42470 <_gp+0xfffe3298>
   428dc:	4984b03a 	or	r2,r9,r6
   428e0:	103e6326 	beq	r2,zero,42270 <_gp+0xfffe3098>
   428e4:	8987c83a 	sub	r3,r17,r6
   428e8:	88c9803a 	cmpltu	r4,r17,r3
   428ec:	4245c83a 	sub	r2,r8,r9
   428f0:	1105c83a 	sub	r2,r2,r4
   428f4:	1100202c 	andhi	r4,r2,128
   428f8:	203ebb26 	beq	r4,zero,423e8 <_gp+0xfffe3210>
   428fc:	3463c83a 	sub	r17,r6,r17
   42900:	4a07c83a 	sub	r3,r9,r8
   42904:	344d803a 	cmpltu	r6,r6,r17
   42908:	1991c83a 	sub	r8,r3,r6
   4290c:	3825883a 	mov	r18,r7
   42910:	003e5706 	br	42270 <_gp+0xfffe3098>
   42914:	4984b03a 	or	r2,r9,r6
   42918:	10002e26 	beq	r2,zero,429d4 <__adddf3+0x7e0>
   4291c:	4004d0fa 	srli	r2,r8,3
   42920:	8822d0fa 	srli	r17,r17,3
   42924:	4010977a 	slli	r8,r8,29
   42928:	10c0022c 	andhi	r3,r2,8
   4292c:	4462b03a 	or	r17,r8,r17
   42930:	18000826 	beq	r3,zero,42954 <__adddf3+0x760>
   42934:	4808d0fa 	srli	r4,r9,3
   42938:	20c0022c 	andhi	r3,r4,8
   4293c:	1800051e 	bne	r3,zero,42954 <__adddf3+0x760>
   42940:	300cd0fa 	srli	r6,r6,3
   42944:	4806977a 	slli	r3,r9,29
   42948:	2005883a 	mov	r2,r4
   4294c:	3825883a 	mov	r18,r7
   42950:	19a2b03a 	or	r17,r3,r6
   42954:	8810d77a 	srli	r8,r17,29
   42958:	100490fa 	slli	r2,r2,3
   4295c:	882290fa 	slli	r17,r17,3
   42960:	0401ffc4 	movi	r16,2047
   42964:	4090b03a 	or	r8,r8,r2
   42968:	003e4106 	br	42270 <_gp+0xfffe3098>
   4296c:	0141ffc4 	movi	r5,2047
   42970:	117fc71e 	bne	r2,r5,42890 <_gp+0xfffe36b8>
   42974:	4811883a 	mov	r8,r9
   42978:	3023883a 	mov	r17,r6
   4297c:	1021883a 	mov	r16,r2
   42980:	003e3b06 	br	42270 <_gp+0xfffe3098>
   42984:	10002f26 	beq	r2,zero,42a44 <__adddf3+0x850>
   42988:	4984b03a 	or	r2,r9,r6
   4298c:	10001126 	beq	r2,zero,429d4 <__adddf3+0x7e0>
   42990:	4004d0fa 	srli	r2,r8,3
   42994:	8822d0fa 	srli	r17,r17,3
   42998:	4010977a 	slli	r8,r8,29
   4299c:	10c0022c 	andhi	r3,r2,8
   429a0:	4462b03a 	or	r17,r8,r17
   429a4:	183feb26 	beq	r3,zero,42954 <_gp+0xfffe377c>
   429a8:	4808d0fa 	srli	r4,r9,3
   429ac:	20c0022c 	andhi	r3,r4,8
   429b0:	183fe81e 	bne	r3,zero,42954 <_gp+0xfffe377c>
   429b4:	300cd0fa 	srli	r6,r6,3
   429b8:	4806977a 	slli	r3,r9,29
   429bc:	2005883a 	mov	r2,r4
   429c0:	19a2b03a 	or	r17,r3,r6
   429c4:	003fe306 	br	42954 <_gp+0xfffe377c>
   429c8:	0011883a 	mov	r8,zero
   429cc:	0005883a 	mov	r2,zero
   429d0:	003e3f06 	br	422d0 <_gp+0xfffe30f8>
   429d4:	0401ffc4 	movi	r16,2047
   429d8:	003e2506 	br	42270 <_gp+0xfffe3098>
   429dc:	0013883a 	mov	r9,zero
   429e0:	003f8406 	br	427f4 <_gp+0xfffe361c>
   429e4:	0005883a 	mov	r2,zero
   429e8:	0007883a 	mov	r3,zero
   429ec:	003e8906 	br	42414 <_gp+0xfffe323c>
   429f0:	197ff804 	addi	r5,r3,-32
   429f4:	01000804 	movi	r4,32
   429f8:	414ad83a 	srl	r5,r8,r5
   429fc:	19002426 	beq	r3,r4,42a90 <__adddf3+0x89c>
   42a00:	01001004 	movi	r4,64
   42a04:	20c7c83a 	sub	r3,r4,r3
   42a08:	40c6983a 	sll	r3,r8,r3
   42a0c:	1c46b03a 	or	r3,r3,r17
   42a10:	1806c03a 	cmpne	r3,r3,zero
   42a14:	28e2b03a 	or	r17,r5,r3
   42a18:	0007883a 	mov	r3,zero
   42a1c:	003f2306 	br	426ac <_gp+0xfffe34d4>
   42a20:	0007883a 	mov	r3,zero
   42a24:	5811883a 	mov	r8,r11
   42a28:	00bfffc4 	movi	r2,-1
   42a2c:	0401ffc4 	movi	r16,2047
   42a30:	003e7806 	br	42414 <_gp+0xfffe323c>
   42a34:	4462b03a 	or	r17,r8,r17
   42a38:	8822c03a 	cmpne	r17,r17,zero
   42a3c:	0009883a 	mov	r4,zero
   42a40:	003fa006 	br	428c4 <_gp+0xfffe36ec>
   42a44:	4811883a 	mov	r8,r9
   42a48:	3023883a 	mov	r17,r6
   42a4c:	0401ffc4 	movi	r16,2047
   42a50:	003e0706 	br	42270 <_gp+0xfffe3098>
   42a54:	4811883a 	mov	r8,r9
   42a58:	3023883a 	mov	r17,r6
   42a5c:	003e0406 	br	42270 <_gp+0xfffe3098>
   42a60:	21fff804 	addi	r7,r4,-32
   42a64:	01400804 	movi	r5,32
   42a68:	41ced83a 	srl	r7,r8,r7
   42a6c:	21400a26 	beq	r4,r5,42a98 <__adddf3+0x8a4>
   42a70:	01401004 	movi	r5,64
   42a74:	2909c83a 	sub	r4,r5,r4
   42a78:	4108983a 	sll	r4,r8,r4
   42a7c:	2448b03a 	or	r4,r4,r17
   42a80:	2008c03a 	cmpne	r4,r4,zero
   42a84:	3922b03a 	or	r17,r7,r4
   42a88:	0009883a 	mov	r4,zero
   42a8c:	003f8d06 	br	428c4 <_gp+0xfffe36ec>
   42a90:	0007883a 	mov	r3,zero
   42a94:	003fdd06 	br	42a0c <_gp+0xfffe3834>
   42a98:	0009883a 	mov	r4,zero
   42a9c:	003ff706 	br	42a7c <_gp+0xfffe38a4>

00042aa0 <__divdf3>:
   42aa0:	defff004 	addi	sp,sp,-64
   42aa4:	dc800815 	stw	r18,32(sp)
   42aa8:	2824d53a 	srli	r18,r5,20
   42aac:	dd800c15 	stw	r22,48(sp)
   42ab0:	282cd7fa 	srli	r22,r5,31
   42ab4:	dc000615 	stw	r16,24(sp)
   42ab8:	04000434 	movhi	r16,16
   42abc:	843fffc4 	addi	r16,r16,-1
   42ac0:	dfc00f15 	stw	ra,60(sp)
   42ac4:	df000e15 	stw	fp,56(sp)
   42ac8:	ddc00d15 	stw	r23,52(sp)
   42acc:	dd400b15 	stw	r21,44(sp)
   42ad0:	dd000a15 	stw	r20,40(sp)
   42ad4:	dcc00915 	stw	r19,36(sp)
   42ad8:	dc400715 	stw	r17,28(sp)
   42adc:	9481ffcc 	andi	r18,r18,2047
   42ae0:	2c20703a 	and	r16,r5,r16
   42ae4:	b2003fcc 	andi	r8,r22,255
   42ae8:	90006126 	beq	r18,zero,42c70 <__divdf3+0x1d0>
   42aec:	0081ffc4 	movi	r2,2047
   42af0:	202b883a 	mov	r21,r4
   42af4:	90803726 	beq	r18,r2,42bd4 <__divdf3+0x134>
   42af8:	80800434 	orhi	r2,r16,16
   42afc:	100490fa 	slli	r2,r2,3
   42b00:	2020d77a 	srli	r16,r4,29
   42b04:	202a90fa 	slli	r21,r4,3
   42b08:	94bf0044 	addi	r18,r18,-1023
   42b0c:	80a0b03a 	or	r16,r16,r2
   42b10:	0013883a 	mov	r9,zero
   42b14:	000b883a 	mov	r5,zero
   42b18:	3806d53a 	srli	r3,r7,20
   42b1c:	382ed7fa 	srli	r23,r7,31
   42b20:	04400434 	movhi	r17,16
   42b24:	8c7fffc4 	addi	r17,r17,-1
   42b28:	18c1ffcc 	andi	r3,r3,2047
   42b2c:	3029883a 	mov	r20,r6
   42b30:	3c62703a 	and	r17,r7,r17
   42b34:	bf003fcc 	andi	fp,r23,255
   42b38:	18006e26 	beq	r3,zero,42cf4 <__divdf3+0x254>
   42b3c:	0081ffc4 	movi	r2,2047
   42b40:	18806626 	beq	r3,r2,42cdc <__divdf3+0x23c>
   42b44:	88800434 	orhi	r2,r17,16
   42b48:	100490fa 	slli	r2,r2,3
   42b4c:	3022d77a 	srli	r17,r6,29
   42b50:	302890fa 	slli	r20,r6,3
   42b54:	18ff0044 	addi	r3,r3,-1023
   42b58:	88a2b03a 	or	r17,r17,r2
   42b5c:	000f883a 	mov	r7,zero
   42b60:	b5e6f03a 	xor	r19,r22,r23
   42b64:	3a4cb03a 	or	r6,r7,r9
   42b68:	008003c4 	movi	r2,15
   42b6c:	9809883a 	mov	r4,r19
   42b70:	90c7c83a 	sub	r3,r18,r3
   42b74:	9cc03fcc 	andi	r19,r19,255
   42b78:	11809636 	bltu	r2,r6,42dd4 <__divdf3+0x334>
   42b7c:	300c90ba 	slli	r6,r6,2
   42b80:	00800134 	movhi	r2,4
   42b84:	108ae504 	addi	r2,r2,11156
   42b88:	308d883a 	add	r6,r6,r2
   42b8c:	30800017 	ldw	r2,0(r6)
   42b90:	1000683a 	jmp	r2
   42b94:	00042dd4 	movui	zero,4279
   42b98:	00042c0c 	andi	zero,zero,4272
   42b9c:	00042dc4 	movi	zero,4279
   42ba0:	00042c00 	call	42c0 <__alt_mem_MemoriaDados+0x42c0>
   42ba4:	00042dc4 	movi	zero,4279
   42ba8:	00042d98 	cmpnei	zero,zero,4278
   42bac:	00042dc4 	movi	zero,4279
   42bb0:	00042c00 	call	42c0 <__alt_mem_MemoriaDados+0x42c0>
   42bb4:	00042c0c 	andi	zero,zero,4272
   42bb8:	00042c0c 	andi	zero,zero,4272
   42bbc:	00042d98 	cmpnei	zero,zero,4278
   42bc0:	00042c00 	call	42c0 <__alt_mem_MemoriaDados+0x42c0>
   42bc4:	00042bf0 	cmpltui	zero,zero,4271
   42bc8:	00042bf0 	cmpltui	zero,zero,4271
   42bcc:	00042bf0 	cmpltui	zero,zero,4271
   42bd0:	0004315c 	xori	zero,zero,4293
   42bd4:	2404b03a 	or	r2,r4,r16
   42bd8:	10006c1e 	bne	r2,zero,42d8c <__divdf3+0x2ec>
   42bdc:	02400204 	movi	r9,8
   42be0:	0021883a 	mov	r16,zero
   42be4:	002b883a 	mov	r21,zero
   42be8:	01400084 	movi	r5,2
   42bec:	003fca06 	br	42b18 <_gp+0xfffe3940>
   42bf0:	8023883a 	mov	r17,r16
   42bf4:	a829883a 	mov	r20,r21
   42bf8:	4039883a 	mov	fp,r8
   42bfc:	280f883a 	mov	r7,r5
   42c00:	00800084 	movi	r2,2
   42c04:	3881601e 	bne	r7,r2,43188 <__divdf3+0x6e8>
   42c08:	e027883a 	mov	r19,fp
   42c0c:	9900004c 	andi	r4,r19,1
   42c10:	0081ffc4 	movi	r2,2047
   42c14:	0021883a 	mov	r16,zero
   42c18:	002b883a 	mov	r21,zero
   42c1c:	1004953a 	slli	r2,r2,20
   42c20:	20c03fcc 	andi	r3,r4,255
   42c24:	01400434 	movhi	r5,16
   42c28:	297fffc4 	addi	r5,r5,-1
   42c2c:	180697fa 	slli	r3,r3,31
   42c30:	8160703a 	and	r16,r16,r5
   42c34:	80a0b03a 	or	r16,r16,r2
   42c38:	80c6b03a 	or	r3,r16,r3
   42c3c:	a805883a 	mov	r2,r21
   42c40:	dfc00f17 	ldw	ra,60(sp)
   42c44:	df000e17 	ldw	fp,56(sp)
   42c48:	ddc00d17 	ldw	r23,52(sp)
   42c4c:	dd800c17 	ldw	r22,48(sp)
   42c50:	dd400b17 	ldw	r21,44(sp)
   42c54:	dd000a17 	ldw	r20,40(sp)
   42c58:	dcc00917 	ldw	r19,36(sp)
   42c5c:	dc800817 	ldw	r18,32(sp)
   42c60:	dc400717 	ldw	r17,28(sp)
   42c64:	dc000617 	ldw	r16,24(sp)
   42c68:	dec01004 	addi	sp,sp,64
   42c6c:	f800283a 	ret
   42c70:	2404b03a 	or	r2,r4,r16
   42c74:	2023883a 	mov	r17,r4
   42c78:	10003f26 	beq	r2,zero,42d78 <__divdf3+0x2d8>
   42c7c:	80015e26 	beq	r16,zero,431f8 <__divdf3+0x758>
   42c80:	8009883a 	mov	r4,r16
   42c84:	d9800215 	stw	r6,8(sp)
   42c88:	d9c00515 	stw	r7,20(sp)
   42c8c:	da000415 	stw	r8,16(sp)
   42c90:	0044ac80 	call	44ac8 <__clzsi2>
   42c94:	d9800217 	ldw	r6,8(sp)
   42c98:	d9c00517 	ldw	r7,20(sp)
   42c9c:	da000417 	ldw	r8,16(sp)
   42ca0:	113ffd44 	addi	r4,r2,-11
   42ca4:	00c00704 	movi	r3,28
   42ca8:	19014f16 	blt	r3,r4,431e8 <__divdf3+0x748>
   42cac:	00c00744 	movi	r3,29
   42cb0:	157ffe04 	addi	r21,r2,-8
   42cb4:	1907c83a 	sub	r3,r3,r4
   42cb8:	8560983a 	sll	r16,r16,r21
   42cbc:	88c6d83a 	srl	r3,r17,r3
   42cc0:	8d6a983a 	sll	r21,r17,r21
   42cc4:	1c20b03a 	or	r16,r3,r16
   42cc8:	1080fcc4 	addi	r2,r2,1011
   42ccc:	00a5c83a 	sub	r18,zero,r2
   42cd0:	0013883a 	mov	r9,zero
   42cd4:	000b883a 	mov	r5,zero
   42cd8:	003f8f06 	br	42b18 <_gp+0xfffe3940>
   42cdc:	3444b03a 	or	r2,r6,r17
   42ce0:	1000231e 	bne	r2,zero,42d70 <__divdf3+0x2d0>
   42ce4:	0023883a 	mov	r17,zero
   42ce8:	0029883a 	mov	r20,zero
   42cec:	01c00084 	movi	r7,2
   42cf0:	003f9b06 	br	42b60 <_gp+0xfffe3988>
   42cf4:	3444b03a 	or	r2,r6,r17
   42cf8:	10001926 	beq	r2,zero,42d60 <__divdf3+0x2c0>
   42cfc:	88014b26 	beq	r17,zero,4322c <__divdf3+0x78c>
   42d00:	8809883a 	mov	r4,r17
   42d04:	d9400115 	stw	r5,4(sp)
   42d08:	d9800215 	stw	r6,8(sp)
   42d0c:	da000415 	stw	r8,16(sp)
   42d10:	da400315 	stw	r9,12(sp)
   42d14:	0044ac80 	call	44ac8 <__clzsi2>
   42d18:	d9400117 	ldw	r5,4(sp)
   42d1c:	d9800217 	ldw	r6,8(sp)
   42d20:	da000417 	ldw	r8,16(sp)
   42d24:	da400317 	ldw	r9,12(sp)
   42d28:	113ffd44 	addi	r4,r2,-11
   42d2c:	00c00704 	movi	r3,28
   42d30:	19013a16 	blt	r3,r4,4321c <__divdf3+0x77c>
   42d34:	00c00744 	movi	r3,29
   42d38:	153ffe04 	addi	r20,r2,-8
   42d3c:	1907c83a 	sub	r3,r3,r4
   42d40:	8d22983a 	sll	r17,r17,r20
   42d44:	30c6d83a 	srl	r3,r6,r3
   42d48:	3528983a 	sll	r20,r6,r20
   42d4c:	1c62b03a 	or	r17,r3,r17
   42d50:	1080fcc4 	addi	r2,r2,1011
   42d54:	0087c83a 	sub	r3,zero,r2
   42d58:	000f883a 	mov	r7,zero
   42d5c:	003f8006 	br	42b60 <_gp+0xfffe3988>
   42d60:	0023883a 	mov	r17,zero
   42d64:	0029883a 	mov	r20,zero
   42d68:	01c00044 	movi	r7,1
   42d6c:	003f7c06 	br	42b60 <_gp+0xfffe3988>
   42d70:	01c000c4 	movi	r7,3
   42d74:	003f7a06 	br	42b60 <_gp+0xfffe3988>
   42d78:	02400104 	movi	r9,4
   42d7c:	0021883a 	mov	r16,zero
   42d80:	002b883a 	mov	r21,zero
   42d84:	01400044 	movi	r5,1
   42d88:	003f6306 	br	42b18 <_gp+0xfffe3940>
   42d8c:	02400304 	movi	r9,12
   42d90:	014000c4 	movi	r5,3
   42d94:	003f6006 	br	42b18 <_gp+0xfffe3940>
   42d98:	04000434 	movhi	r16,16
   42d9c:	0009883a 	mov	r4,zero
   42da0:	843fffc4 	addi	r16,r16,-1
   42da4:	057fffc4 	movi	r21,-1
   42da8:	0081ffc4 	movi	r2,2047
   42dac:	003f9b06 	br	42c1c <_gp+0xfffe3a44>
   42db0:	00c00044 	movi	r3,1
   42db4:	1887c83a 	sub	r3,r3,r2
   42db8:	01000e04 	movi	r4,56
   42dbc:	20c1530e 	bge	r4,r3,4330c <__divdf3+0x86c>
   42dc0:	9900004c 	andi	r4,r19,1
   42dc4:	0005883a 	mov	r2,zero
   42dc8:	0021883a 	mov	r16,zero
   42dcc:	002b883a 	mov	r21,zero
   42dd0:	003f9206 	br	42c1c <_gp+0xfffe3a44>
   42dd4:	8c012e36 	bltu	r17,r16,43290 <__divdf3+0x7f0>
   42dd8:	84412c26 	beq	r16,r17,4328c <__divdf3+0x7ec>
   42ddc:	a82f883a 	mov	r23,r21
   42de0:	18ffffc4 	addi	r3,r3,-1
   42de4:	002b883a 	mov	r21,zero
   42de8:	a004d63a 	srli	r2,r20,24
   42dec:	8822923a 	slli	r17,r17,8
   42df0:	a028923a 	slli	r20,r20,8
   42df4:	8009883a 	mov	r4,r16
   42df8:	88acb03a 	or	r22,r17,r2
   42dfc:	dd000015 	stw	r20,0(sp)
   42e00:	b028d43a 	srli	r20,r22,16
   42e04:	d8c00215 	stw	r3,8(sp)
   42e08:	b4bfffcc 	andi	r18,r22,65535
   42e0c:	a00b883a 	mov	r5,r20
   42e10:	00421100 	call	42110 <__udivsi3>
   42e14:	100b883a 	mov	r5,r2
   42e18:	9009883a 	mov	r4,r18
   42e1c:	1023883a 	mov	r17,r2
   42e20:	00421cc0 	call	421cc <__mulsi3>
   42e24:	8009883a 	mov	r4,r16
   42e28:	a00b883a 	mov	r5,r20
   42e2c:	1039883a 	mov	fp,r2
   42e30:	00421740 	call	42174 <__umodsi3>
   42e34:	1004943a 	slli	r2,r2,16
   42e38:	b808d43a 	srli	r4,r23,16
   42e3c:	d8c00217 	ldw	r3,8(sp)
   42e40:	2084b03a 	or	r2,r4,r2
   42e44:	1700062e 	bgeu	r2,fp,42e60 <__divdf3+0x3c0>
   42e48:	1585883a 	add	r2,r2,r22
   42e4c:	893fffc4 	addi	r4,r17,-1
   42e50:	15811d36 	bltu	r2,r22,432c8 <__divdf3+0x828>
   42e54:	17011c2e 	bgeu	r2,fp,432c8 <__divdf3+0x828>
   42e58:	8c7fff84 	addi	r17,r17,-2
   42e5c:	1585883a 	add	r2,r2,r22
   42e60:	1739c83a 	sub	fp,r2,fp
   42e64:	a00b883a 	mov	r5,r20
   42e68:	e009883a 	mov	r4,fp
   42e6c:	d8c00215 	stw	r3,8(sp)
   42e70:	00421100 	call	42110 <__udivsi3>
   42e74:	100b883a 	mov	r5,r2
   42e78:	9009883a 	mov	r4,r18
   42e7c:	1021883a 	mov	r16,r2
   42e80:	00421cc0 	call	421cc <__mulsi3>
   42e84:	a00b883a 	mov	r5,r20
   42e88:	e009883a 	mov	r4,fp
   42e8c:	d8800415 	stw	r2,16(sp)
   42e90:	00421740 	call	42174 <__umodsi3>
   42e94:	1004943a 	slli	r2,r2,16
   42e98:	da000417 	ldw	r8,16(sp)
   42e9c:	bdffffcc 	andi	r23,r23,65535
   42ea0:	b884b03a 	or	r2,r23,r2
   42ea4:	d8c00217 	ldw	r3,8(sp)
   42ea8:	1200062e 	bgeu	r2,r8,42ec4 <__divdf3+0x424>
   42eac:	1585883a 	add	r2,r2,r22
   42eb0:	813fffc4 	addi	r4,r16,-1
   42eb4:	15810236 	bltu	r2,r22,432c0 <__divdf3+0x820>
   42eb8:	1201012e 	bgeu	r2,r8,432c0 <__divdf3+0x820>
   42ebc:	843fff84 	addi	r16,r16,-2
   42ec0:	1585883a 	add	r2,r2,r22
   42ec4:	8822943a 	slli	r17,r17,16
   42ec8:	d9800017 	ldw	r6,0(sp)
   42ecc:	1211c83a 	sub	r8,r2,r8
   42ed0:	8c22b03a 	or	r17,r17,r16
   42ed4:	373fffcc 	andi	fp,r6,65535
   42ed8:	8abfffcc 	andi	r10,r17,65535
   42edc:	8820d43a 	srli	r16,r17,16
   42ee0:	5009883a 	mov	r4,r10
   42ee4:	e00b883a 	mov	r5,fp
   42ee8:	302ed43a 	srli	r23,r6,16
   42eec:	d8c00215 	stw	r3,8(sp)
   42ef0:	da000415 	stw	r8,16(sp)
   42ef4:	da800115 	stw	r10,4(sp)
   42ef8:	00421cc0 	call	421cc <__mulsi3>
   42efc:	800b883a 	mov	r5,r16
   42f00:	e009883a 	mov	r4,fp
   42f04:	d8800515 	stw	r2,20(sp)
   42f08:	00421cc0 	call	421cc <__mulsi3>
   42f0c:	8009883a 	mov	r4,r16
   42f10:	b80b883a 	mov	r5,r23
   42f14:	d8800315 	stw	r2,12(sp)
   42f18:	00421cc0 	call	421cc <__mulsi3>
   42f1c:	da800117 	ldw	r10,4(sp)
   42f20:	b80b883a 	mov	r5,r23
   42f24:	1021883a 	mov	r16,r2
   42f28:	5009883a 	mov	r4,r10
   42f2c:	00421cc0 	call	421cc <__mulsi3>
   42f30:	d9c00517 	ldw	r7,20(sp)
   42f34:	da400317 	ldw	r9,12(sp)
   42f38:	d8c00217 	ldw	r3,8(sp)
   42f3c:	3808d43a 	srli	r4,r7,16
   42f40:	1245883a 	add	r2,r2,r9
   42f44:	da000417 	ldw	r8,16(sp)
   42f48:	2085883a 	add	r2,r4,r2
   42f4c:	1240022e 	bgeu	r2,r9,42f58 <__divdf3+0x4b8>
   42f50:	01000074 	movhi	r4,1
   42f54:	8121883a 	add	r16,r16,r4
   42f58:	1008d43a 	srli	r4,r2,16
   42f5c:	1004943a 	slli	r2,r2,16
   42f60:	39ffffcc 	andi	r7,r7,65535
   42f64:	2409883a 	add	r4,r4,r16
   42f68:	11c5883a 	add	r2,r2,r7
   42f6c:	4100bb36 	bltu	r8,r4,4325c <__divdf3+0x7bc>
   42f70:	4100d726 	beq	r8,r4,432d0 <__divdf3+0x830>
   42f74:	4109c83a 	sub	r4,r8,r4
   42f78:	a8a1c83a 	sub	r16,r21,r2
   42f7c:	ac2b803a 	cmpltu	r21,r21,r16
   42f80:	256bc83a 	sub	r21,r4,r21
   42f84:	b540d926 	beq	r22,r21,432ec <__divdf3+0x84c>
   42f88:	a00b883a 	mov	r5,r20
   42f8c:	a809883a 	mov	r4,r21
   42f90:	d8c00215 	stw	r3,8(sp)
   42f94:	00421100 	call	42110 <__udivsi3>
   42f98:	100b883a 	mov	r5,r2
   42f9c:	9009883a 	mov	r4,r18
   42fa0:	d8800515 	stw	r2,20(sp)
   42fa4:	00421cc0 	call	421cc <__mulsi3>
   42fa8:	a809883a 	mov	r4,r21
   42fac:	a00b883a 	mov	r5,r20
   42fb0:	d8800415 	stw	r2,16(sp)
   42fb4:	00421740 	call	42174 <__umodsi3>
   42fb8:	1004943a 	slli	r2,r2,16
   42fbc:	8008d43a 	srli	r4,r16,16
   42fc0:	da000417 	ldw	r8,16(sp)
   42fc4:	d8c00217 	ldw	r3,8(sp)
   42fc8:	2084b03a 	or	r2,r4,r2
   42fcc:	d9c00517 	ldw	r7,20(sp)
   42fd0:	1200062e 	bgeu	r2,r8,42fec <__divdf3+0x54c>
   42fd4:	1585883a 	add	r2,r2,r22
   42fd8:	393fffc4 	addi	r4,r7,-1
   42fdc:	1580c536 	bltu	r2,r22,432f4 <__divdf3+0x854>
   42fe0:	1200c42e 	bgeu	r2,r8,432f4 <__divdf3+0x854>
   42fe4:	39ffff84 	addi	r7,r7,-2
   42fe8:	1585883a 	add	r2,r2,r22
   42fec:	122bc83a 	sub	r21,r2,r8
   42ff0:	a00b883a 	mov	r5,r20
   42ff4:	a809883a 	mov	r4,r21
   42ff8:	d8c00215 	stw	r3,8(sp)
   42ffc:	d9c00515 	stw	r7,20(sp)
   43000:	00421100 	call	42110 <__udivsi3>
   43004:	9009883a 	mov	r4,r18
   43008:	100b883a 	mov	r5,r2
   4300c:	d8800415 	stw	r2,16(sp)
   43010:	00421cc0 	call	421cc <__mulsi3>
   43014:	a809883a 	mov	r4,r21
   43018:	a00b883a 	mov	r5,r20
   4301c:	1025883a 	mov	r18,r2
   43020:	00421740 	call	42174 <__umodsi3>
   43024:	1004943a 	slli	r2,r2,16
   43028:	813fffcc 	andi	r4,r16,65535
   4302c:	d8c00217 	ldw	r3,8(sp)
   43030:	20a0b03a 	or	r16,r4,r2
   43034:	d9c00517 	ldw	r7,20(sp)
   43038:	da000417 	ldw	r8,16(sp)
   4303c:	8480062e 	bgeu	r16,r18,43058 <__divdf3+0x5b8>
   43040:	85a1883a 	add	r16,r16,r22
   43044:	40bfffc4 	addi	r2,r8,-1
   43048:	8580ac36 	bltu	r16,r22,432fc <__divdf3+0x85c>
   4304c:	8480ab2e 	bgeu	r16,r18,432fc <__divdf3+0x85c>
   43050:	423fff84 	addi	r8,r8,-2
   43054:	85a1883a 	add	r16,r16,r22
   43058:	3804943a 	slli	r2,r7,16
   4305c:	84a1c83a 	sub	r16,r16,r18
   43060:	e009883a 	mov	r4,fp
   43064:	1228b03a 	or	r20,r2,r8
   43068:	a1ffffcc 	andi	r7,r20,65535
   4306c:	a024d43a 	srli	r18,r20,16
   43070:	380b883a 	mov	r5,r7
   43074:	d8c00215 	stw	r3,8(sp)
   43078:	d9c00515 	stw	r7,20(sp)
   4307c:	00421cc0 	call	421cc <__mulsi3>
   43080:	900b883a 	mov	r5,r18
   43084:	e009883a 	mov	r4,fp
   43088:	102b883a 	mov	r21,r2
   4308c:	00421cc0 	call	421cc <__mulsi3>
   43090:	900b883a 	mov	r5,r18
   43094:	b809883a 	mov	r4,r23
   43098:	1039883a 	mov	fp,r2
   4309c:	00421cc0 	call	421cc <__mulsi3>
   430a0:	d9c00517 	ldw	r7,20(sp)
   430a4:	b80b883a 	mov	r5,r23
   430a8:	1025883a 	mov	r18,r2
   430ac:	3809883a 	mov	r4,r7
   430b0:	00421cc0 	call	421cc <__mulsi3>
   430b4:	a808d43a 	srli	r4,r21,16
   430b8:	1705883a 	add	r2,r2,fp
   430bc:	d8c00217 	ldw	r3,8(sp)
   430c0:	2085883a 	add	r2,r4,r2
   430c4:	1700022e 	bgeu	r2,fp,430d0 <__divdf3+0x630>
   430c8:	01000074 	movhi	r4,1
   430cc:	9125883a 	add	r18,r18,r4
   430d0:	1008d43a 	srli	r4,r2,16
   430d4:	1004943a 	slli	r2,r2,16
   430d8:	ad7fffcc 	andi	r21,r21,65535
   430dc:	2489883a 	add	r4,r4,r18
   430e0:	1545883a 	add	r2,r2,r21
   430e4:	81003836 	bltu	r16,r4,431c8 <__divdf3+0x728>
   430e8:	81003626 	beq	r16,r4,431c4 <__divdf3+0x724>
   430ec:	a5000054 	ori	r20,r20,1
   430f0:	1880ffc4 	addi	r2,r3,1023
   430f4:	00bf2e0e 	bge	zero,r2,42db0 <_gp+0xfffe3bd8>
   430f8:	a10001cc 	andi	r4,r20,7
   430fc:	20000726 	beq	r4,zero,4311c <__divdf3+0x67c>
   43100:	a10003cc 	andi	r4,r20,15
   43104:	01400104 	movi	r5,4
   43108:	21400426 	beq	r4,r5,4311c <__divdf3+0x67c>
   4310c:	a149883a 	add	r4,r20,r5
   43110:	2529803a 	cmpltu	r20,r4,r20
   43114:	8d23883a 	add	r17,r17,r20
   43118:	2029883a 	mov	r20,r4
   4311c:	8900402c 	andhi	r4,r17,256
   43120:	20000426 	beq	r4,zero,43134 <__divdf3+0x694>
   43124:	18810004 	addi	r2,r3,1024
   43128:	00ffc034 	movhi	r3,65280
   4312c:	18ffffc4 	addi	r3,r3,-1
   43130:	88e2703a 	and	r17,r17,r3
   43134:	00c1ff84 	movi	r3,2046
   43138:	18beb416 	blt	r3,r2,42c0c <_gp+0xfffe3a34>
   4313c:	a028d0fa 	srli	r20,r20,3
   43140:	882a977a 	slli	r21,r17,29
   43144:	8820927a 	slli	r16,r17,9
   43148:	1081ffcc 	andi	r2,r2,2047
   4314c:	ad2ab03a 	or	r21,r21,r20
   43150:	8020d33a 	srli	r16,r16,12
   43154:	9900004c 	andi	r4,r19,1
   43158:	003eb006 	br	42c1c <_gp+0xfffe3a44>
   4315c:	8080022c 	andhi	r2,r16,8
   43160:	10001226 	beq	r2,zero,431ac <__divdf3+0x70c>
   43164:	8880022c 	andhi	r2,r17,8
   43168:	1000101e 	bne	r2,zero,431ac <__divdf3+0x70c>
   4316c:	00800434 	movhi	r2,16
   43170:	8c000234 	orhi	r16,r17,8
   43174:	10bfffc4 	addi	r2,r2,-1
   43178:	b809883a 	mov	r4,r23
   4317c:	80a0703a 	and	r16,r16,r2
   43180:	a02b883a 	mov	r21,r20
   43184:	003f0806 	br	42da8 <_gp+0xfffe3bd0>
   43188:	008000c4 	movi	r2,3
   4318c:	3880b126 	beq	r7,r2,43454 <__divdf3+0x9b4>
   43190:	00800044 	movi	r2,1
   43194:	38805b1e 	bne	r7,r2,43304 <__divdf3+0x864>
   43198:	e009883a 	mov	r4,fp
   4319c:	0005883a 	mov	r2,zero
   431a0:	0021883a 	mov	r16,zero
   431a4:	002b883a 	mov	r21,zero
   431a8:	003e9c06 	br	42c1c <_gp+0xfffe3a44>
   431ac:	00800434 	movhi	r2,16
   431b0:	84000234 	orhi	r16,r16,8
   431b4:	10bfffc4 	addi	r2,r2,-1
   431b8:	b009883a 	mov	r4,r22
   431bc:	80a0703a 	and	r16,r16,r2
   431c0:	003ef906 	br	42da8 <_gp+0xfffe3bd0>
   431c4:	103fca26 	beq	r2,zero,430f0 <_gp+0xfffe3f18>
   431c8:	b421883a 	add	r16,r22,r16
   431cc:	a17fffc4 	addi	r5,r20,-1
   431d0:	8580422e 	bgeu	r16,r22,432dc <__divdf3+0x83c>
   431d4:	2829883a 	mov	r20,r5
   431d8:	813fc41e 	bne	r16,r4,430ec <_gp+0xfffe3f14>
   431dc:	d9800017 	ldw	r6,0(sp)
   431e0:	30bfc21e 	bne	r6,r2,430ec <_gp+0xfffe3f14>
   431e4:	003fc206 	br	430f0 <_gp+0xfffe3f18>
   431e8:	143ff604 	addi	r16,r2,-40
   431ec:	8c20983a 	sll	r16,r17,r16
   431f0:	002b883a 	mov	r21,zero
   431f4:	003eb406 	br	42cc8 <_gp+0xfffe3af0>
   431f8:	d9800215 	stw	r6,8(sp)
   431fc:	d9c00515 	stw	r7,20(sp)
   43200:	da000415 	stw	r8,16(sp)
   43204:	0044ac80 	call	44ac8 <__clzsi2>
   43208:	10800804 	addi	r2,r2,32
   4320c:	da000417 	ldw	r8,16(sp)
   43210:	d9c00517 	ldw	r7,20(sp)
   43214:	d9800217 	ldw	r6,8(sp)
   43218:	003ea106 	br	42ca0 <_gp+0xfffe3ac8>
   4321c:	147ff604 	addi	r17,r2,-40
   43220:	3462983a 	sll	r17,r6,r17
   43224:	0029883a 	mov	r20,zero
   43228:	003ec906 	br	42d50 <_gp+0xfffe3b78>
   4322c:	3009883a 	mov	r4,r6
   43230:	d9400115 	stw	r5,4(sp)
   43234:	d9800215 	stw	r6,8(sp)
   43238:	da000415 	stw	r8,16(sp)
   4323c:	da400315 	stw	r9,12(sp)
   43240:	0044ac80 	call	44ac8 <__clzsi2>
   43244:	10800804 	addi	r2,r2,32
   43248:	da400317 	ldw	r9,12(sp)
   4324c:	da000417 	ldw	r8,16(sp)
   43250:	d9800217 	ldw	r6,8(sp)
   43254:	d9400117 	ldw	r5,4(sp)
   43258:	003eb306 	br	42d28 <_gp+0xfffe3b50>
   4325c:	d9800017 	ldw	r6,0(sp)
   43260:	a9ab883a 	add	r21,r21,r6
   43264:	a98b803a 	cmpltu	r5,r21,r6
   43268:	2d8b883a 	add	r5,r5,r22
   4326c:	2a11883a 	add	r8,r5,r8
   43270:	897fffc4 	addi	r5,r17,-1
   43274:	b2000c2e 	bgeu	r22,r8,432a8 <__divdf3+0x808>
   43278:	41003f36 	bltu	r8,r4,43378 <__divdf3+0x8d8>
   4327c:	22006c26 	beq	r4,r8,43430 <__divdf3+0x990>
   43280:	4109c83a 	sub	r4,r8,r4
   43284:	2823883a 	mov	r17,r5
   43288:	003f3b06 	br	42f78 <_gp+0xfffe3da0>
   4328c:	ad3ed336 	bltu	r21,r20,42ddc <_gp+0xfffe3c04>
   43290:	a804d07a 	srli	r2,r21,1
   43294:	802e97fa 	slli	r23,r16,31
   43298:	a82a97fa 	slli	r21,r21,31
   4329c:	8020d07a 	srli	r16,r16,1
   432a0:	b8aeb03a 	or	r23,r23,r2
   432a4:	003ed006 	br	42de8 <_gp+0xfffe3c10>
   432a8:	b23ff51e 	bne	r22,r8,43280 <_gp+0xfffe40a8>
   432ac:	d9800017 	ldw	r6,0(sp)
   432b0:	a9bff12e 	bgeu	r21,r6,43278 <_gp+0xfffe40a0>
   432b4:	b109c83a 	sub	r4,r22,r4
   432b8:	2823883a 	mov	r17,r5
   432bc:	003f2e06 	br	42f78 <_gp+0xfffe3da0>
   432c0:	2021883a 	mov	r16,r4
   432c4:	003eff06 	br	42ec4 <_gp+0xfffe3cec>
   432c8:	2023883a 	mov	r17,r4
   432cc:	003ee406 	br	42e60 <_gp+0xfffe3c88>
   432d0:	a8bfe236 	bltu	r21,r2,4325c <_gp+0xfffe4084>
   432d4:	0009883a 	mov	r4,zero
   432d8:	003f2706 	br	42f78 <_gp+0xfffe3da0>
   432dc:	81002d36 	bltu	r16,r4,43394 <__divdf3+0x8f4>
   432e0:	24005626 	beq	r4,r16,4343c <__divdf3+0x99c>
   432e4:	2829883a 	mov	r20,r5
   432e8:	003f8006 	br	430ec <_gp+0xfffe3f14>
   432ec:	053fffc4 	movi	r20,-1
   432f0:	003f7f06 	br	430f0 <_gp+0xfffe3f18>
   432f4:	200f883a 	mov	r7,r4
   432f8:	003f3c06 	br	42fec <_gp+0xfffe3e14>
   432fc:	1011883a 	mov	r8,r2
   43300:	003f5506 	br	43058 <_gp+0xfffe3e80>
   43304:	e027883a 	mov	r19,fp
   43308:	003f7906 	br	430f0 <_gp+0xfffe3f18>
   4330c:	010007c4 	movi	r4,31
   43310:	20c02816 	blt	r4,r3,433b4 <__divdf3+0x914>
   43314:	00800804 	movi	r2,32
   43318:	10c5c83a 	sub	r2,r2,r3
   4331c:	888a983a 	sll	r5,r17,r2
   43320:	a0c8d83a 	srl	r4,r20,r3
   43324:	a084983a 	sll	r2,r20,r2
   43328:	88e2d83a 	srl	r17,r17,r3
   4332c:	2906b03a 	or	r3,r5,r4
   43330:	1004c03a 	cmpne	r2,r2,zero
   43334:	1886b03a 	or	r3,r3,r2
   43338:	188001cc 	andi	r2,r3,7
   4333c:	10000726 	beq	r2,zero,4335c <__divdf3+0x8bc>
   43340:	188003cc 	andi	r2,r3,15
   43344:	01000104 	movi	r4,4
   43348:	11000426 	beq	r2,r4,4335c <__divdf3+0x8bc>
   4334c:	1805883a 	mov	r2,r3
   43350:	10c00104 	addi	r3,r2,4
   43354:	1885803a 	cmpltu	r2,r3,r2
   43358:	88a3883a 	add	r17,r17,r2
   4335c:	8880202c 	andhi	r2,r17,128
   43360:	10002926 	beq	r2,zero,43408 <__divdf3+0x968>
   43364:	9900004c 	andi	r4,r19,1
   43368:	00800044 	movi	r2,1
   4336c:	0021883a 	mov	r16,zero
   43370:	002b883a 	mov	r21,zero
   43374:	003e2906 	br	42c1c <_gp+0xfffe3a44>
   43378:	d9800017 	ldw	r6,0(sp)
   4337c:	8c7fff84 	addi	r17,r17,-2
   43380:	a9ab883a 	add	r21,r21,r6
   43384:	a98b803a 	cmpltu	r5,r21,r6
   43388:	2d8b883a 	add	r5,r5,r22
   4338c:	2a11883a 	add	r8,r5,r8
   43390:	003ef806 	br	42f74 <_gp+0xfffe3d9c>
   43394:	d9800017 	ldw	r6,0(sp)
   43398:	318f883a 	add	r7,r6,r6
   4339c:	398b803a 	cmpltu	r5,r7,r6
   433a0:	2d8d883a 	add	r6,r5,r22
   433a4:	81a1883a 	add	r16,r16,r6
   433a8:	a17fff84 	addi	r5,r20,-2
   433ac:	d9c00015 	stw	r7,0(sp)
   433b0:	003f8806 	br	431d4 <_gp+0xfffe3ffc>
   433b4:	013ff844 	movi	r4,-31
   433b8:	2085c83a 	sub	r2,r4,r2
   433bc:	8888d83a 	srl	r4,r17,r2
   433c0:	00800804 	movi	r2,32
   433c4:	18802126 	beq	r3,r2,4344c <__divdf3+0x9ac>
   433c8:	04001004 	movi	r16,64
   433cc:	80c7c83a 	sub	r3,r16,r3
   433d0:	88e0983a 	sll	r16,r17,r3
   433d4:	8504b03a 	or	r2,r16,r20
   433d8:	1004c03a 	cmpne	r2,r2,zero
   433dc:	2084b03a 	or	r2,r4,r2
   433e0:	144001cc 	andi	r17,r2,7
   433e4:	88000d1e 	bne	r17,zero,4341c <__divdf3+0x97c>
   433e8:	0021883a 	mov	r16,zero
   433ec:	102ad0fa 	srli	r21,r2,3
   433f0:	9900004c 	andi	r4,r19,1
   433f4:	0005883a 	mov	r2,zero
   433f8:	ac6ab03a 	or	r21,r21,r17
   433fc:	003e0706 	br	42c1c <_gp+0xfffe3a44>
   43400:	1007883a 	mov	r3,r2
   43404:	0023883a 	mov	r17,zero
   43408:	8820927a 	slli	r16,r17,9
   4340c:	1805883a 	mov	r2,r3
   43410:	8822977a 	slli	r17,r17,29
   43414:	8020d33a 	srli	r16,r16,12
   43418:	003ff406 	br	433ec <_gp+0xfffe4214>
   4341c:	10c003cc 	andi	r3,r2,15
   43420:	01000104 	movi	r4,4
   43424:	193ff626 	beq	r3,r4,43400 <_gp+0xfffe4228>
   43428:	0023883a 	mov	r17,zero
   4342c:	003fc806 	br	43350 <_gp+0xfffe4178>
   43430:	a8bfd136 	bltu	r21,r2,43378 <_gp+0xfffe41a0>
   43434:	2823883a 	mov	r17,r5
   43438:	003fa606 	br	432d4 <_gp+0xfffe40fc>
   4343c:	d9800017 	ldw	r6,0(sp)
   43440:	30bfd436 	bltu	r6,r2,43394 <_gp+0xfffe41bc>
   43444:	2829883a 	mov	r20,r5
   43448:	003f6406 	br	431dc <_gp+0xfffe4004>
   4344c:	0021883a 	mov	r16,zero
   43450:	003fe006 	br	433d4 <_gp+0xfffe41fc>
   43454:	00800434 	movhi	r2,16
   43458:	8c000234 	orhi	r16,r17,8
   4345c:	10bfffc4 	addi	r2,r2,-1
   43460:	e009883a 	mov	r4,fp
   43464:	80a0703a 	and	r16,r16,r2
   43468:	a02b883a 	mov	r21,r20
   4346c:	003e4e06 	br	42da8 <_gp+0xfffe3bd0>

00043470 <__gedf2>:
   43470:	2804d53a 	srli	r2,r5,20
   43474:	3806d53a 	srli	r3,r7,20
   43478:	02000434 	movhi	r8,16
   4347c:	423fffc4 	addi	r8,r8,-1
   43480:	1081ffcc 	andi	r2,r2,2047
   43484:	0241ffc4 	movi	r9,2047
   43488:	2a14703a 	and	r10,r5,r8
   4348c:	18c1ffcc 	andi	r3,r3,2047
   43490:	3a10703a 	and	r8,r7,r8
   43494:	280ad7fa 	srli	r5,r5,31
   43498:	380ed7fa 	srli	r7,r7,31
   4349c:	12401d26 	beq	r2,r9,43514 <__gedf2+0xa4>
   434a0:	0241ffc4 	movi	r9,2047
   434a4:	1a401226 	beq	r3,r9,434f0 <__gedf2+0x80>
   434a8:	1000081e 	bne	r2,zero,434cc <__gedf2+0x5c>
   434ac:	2296b03a 	or	r11,r4,r10
   434b0:	5813003a 	cmpeq	r9,r11,zero
   434b4:	1800091e 	bne	r3,zero,434dc <__gedf2+0x6c>
   434b8:	3218b03a 	or	r12,r6,r8
   434bc:	6000071e 	bne	r12,zero,434dc <__gedf2+0x6c>
   434c0:	0005883a 	mov	r2,zero
   434c4:	5800101e 	bne	r11,zero,43508 <__gedf2+0x98>
   434c8:	f800283a 	ret
   434cc:	18000c1e 	bne	r3,zero,43500 <__gedf2+0x90>
   434d0:	3212b03a 	or	r9,r6,r8
   434d4:	48000c26 	beq	r9,zero,43508 <__gedf2+0x98>
   434d8:	0013883a 	mov	r9,zero
   434dc:	39c03fcc 	andi	r7,r7,255
   434e0:	48000826 	beq	r9,zero,43504 <__gedf2+0x94>
   434e4:	38000926 	beq	r7,zero,4350c <__gedf2+0x9c>
   434e8:	00800044 	movi	r2,1
   434ec:	f800283a 	ret
   434f0:	3212b03a 	or	r9,r6,r8
   434f4:	483fec26 	beq	r9,zero,434a8 <_gp+0xfffe42d0>
   434f8:	00bfff84 	movi	r2,-2
   434fc:	f800283a 	ret
   43500:	39c03fcc 	andi	r7,r7,255
   43504:	29c00626 	beq	r5,r7,43520 <__gedf2+0xb0>
   43508:	283ff726 	beq	r5,zero,434e8 <_gp+0xfffe4310>
   4350c:	00bfffc4 	movi	r2,-1
   43510:	f800283a 	ret
   43514:	2292b03a 	or	r9,r4,r10
   43518:	483fe126 	beq	r9,zero,434a0 <_gp+0xfffe42c8>
   4351c:	003ff606 	br	434f8 <_gp+0xfffe4320>
   43520:	18bff916 	blt	r3,r2,43508 <_gp+0xfffe4330>
   43524:	10c00316 	blt	r2,r3,43534 <__gedf2+0xc4>
   43528:	42bff736 	bltu	r8,r10,43508 <_gp+0xfffe4330>
   4352c:	52000326 	beq	r10,r8,4353c <__gedf2+0xcc>
   43530:	5200042e 	bgeu	r10,r8,43544 <__gedf2+0xd4>
   43534:	283fec1e 	bne	r5,zero,434e8 <_gp+0xfffe4310>
   43538:	003ff406 	br	4350c <_gp+0xfffe4334>
   4353c:	313ff236 	bltu	r6,r4,43508 <_gp+0xfffe4330>
   43540:	21bffc36 	bltu	r4,r6,43534 <_gp+0xfffe435c>
   43544:	0005883a 	mov	r2,zero
   43548:	f800283a 	ret

0004354c <__muldf3>:
   4354c:	deffee04 	addi	sp,sp,-72
   43550:	dd000c15 	stw	r20,48(sp)
   43554:	2828d53a 	srli	r20,r5,20
   43558:	ddc00f15 	stw	r23,60(sp)
   4355c:	282ed7fa 	srli	r23,r5,31
   43560:	dc000815 	stw	r16,32(sp)
   43564:	04000434 	movhi	r16,16
   43568:	dcc00b15 	stw	r19,44(sp)
   4356c:	843fffc4 	addi	r16,r16,-1
   43570:	dfc01115 	stw	ra,68(sp)
   43574:	df001015 	stw	fp,64(sp)
   43578:	dd800e15 	stw	r22,56(sp)
   4357c:	dd400d15 	stw	r21,52(sp)
   43580:	dc800a15 	stw	r18,40(sp)
   43584:	dc400915 	stw	r17,36(sp)
   43588:	a501ffcc 	andi	r20,r20,2047
   4358c:	2c20703a 	and	r16,r5,r16
   43590:	b827883a 	mov	r19,r23
   43594:	ba403fcc 	andi	r9,r23,255
   43598:	a0006026 	beq	r20,zero,4371c <__muldf3+0x1d0>
   4359c:	0081ffc4 	movi	r2,2047
   435a0:	202d883a 	mov	r22,r4
   435a4:	a0803626 	beq	r20,r2,43680 <__muldf3+0x134>
   435a8:	84000434 	orhi	r16,r16,16
   435ac:	200ad77a 	srli	r5,r4,29
   435b0:	800490fa 	slli	r2,r16,3
   435b4:	202c90fa 	slli	r22,r4,3
   435b8:	a53f0044 	addi	r20,r20,-1023
   435bc:	28a0b03a 	or	r16,r5,r2
   435c0:	002b883a 	mov	r21,zero
   435c4:	000b883a 	mov	r5,zero
   435c8:	3804d53a 	srli	r2,r7,20
   435cc:	3838d7fa 	srli	fp,r7,31
   435d0:	04400434 	movhi	r17,16
   435d4:	8c7fffc4 	addi	r17,r17,-1
   435d8:	1081ffcc 	andi	r2,r2,2047
   435dc:	3025883a 	mov	r18,r6
   435e0:	3c62703a 	and	r17,r7,r17
   435e4:	e2803fcc 	andi	r10,fp,255
   435e8:	10006d26 	beq	r2,zero,437a0 <__muldf3+0x254>
   435ec:	00c1ffc4 	movi	r3,2047
   435f0:	10c06526 	beq	r2,r3,43788 <__muldf3+0x23c>
   435f4:	8c400434 	orhi	r17,r17,16
   435f8:	300ed77a 	srli	r7,r6,29
   435fc:	880690fa 	slli	r3,r17,3
   43600:	302490fa 	slli	r18,r6,3
   43604:	10bf0044 	addi	r2,r2,-1023
   43608:	38e2b03a 	or	r17,r7,r3
   4360c:	000f883a 	mov	r7,zero
   43610:	a087883a 	add	r3,r20,r2
   43614:	010003c4 	movi	r4,15
   43618:	3d44b03a 	or	r2,r7,r21
   4361c:	e5ccf03a 	xor	r6,fp,r23
   43620:	1a000044 	addi	r8,r3,1
   43624:	20809b36 	bltu	r4,r2,43894 <__muldf3+0x348>
   43628:	100490ba 	slli	r2,r2,2
   4362c:	01000134 	movhi	r4,4
   43630:	210d9004 	addi	r4,r4,13888
   43634:	1105883a 	add	r2,r2,r4
   43638:	10800017 	ldw	r2,0(r2)
   4363c:	1000683a 	jmp	r2
   43640:	00043894 	movui	zero,4322
   43644:	000436a0 	cmpeqi	zero,zero,4314
   43648:	000436a0 	cmpeqi	zero,zero,4314
   4364c:	0004369c 	xori	zero,zero,4314
   43650:	00043870 	cmpltui	zero,zero,4321
   43654:	00043870 	cmpltui	zero,zero,4321
   43658:	00043858 	cmpnei	zero,zero,4321
   4365c:	0004369c 	xori	zero,zero,4314
   43660:	00043870 	cmpltui	zero,zero,4321
   43664:	00043858 	cmpnei	zero,zero,4321
   43668:	00043870 	cmpltui	zero,zero,4321
   4366c:	0004369c 	xori	zero,zero,4314
   43670:	00043880 	call	4388 <__alt_mem_MemoriaDados+0x4388>
   43674:	00043880 	call	4388 <__alt_mem_MemoriaDados+0x4388>
   43678:	00043880 	call	4388 <__alt_mem_MemoriaDados+0x4388>
   4367c:	00043be0 	cmpeqi	zero,zero,4335
   43680:	2404b03a 	or	r2,r4,r16
   43684:	1000711e 	bne	r2,zero,4384c <__muldf3+0x300>
   43688:	05400204 	movi	r21,8
   4368c:	0021883a 	mov	r16,zero
   43690:	002d883a 	mov	r22,zero
   43694:	01400084 	movi	r5,2
   43698:	003fcb06 	br	435c8 <_gp+0xfffe43f0>
   4369c:	500d883a 	mov	r6,r10
   436a0:	00800084 	movi	r2,2
   436a4:	38805926 	beq	r7,r2,4380c <__muldf3+0x2c0>
   436a8:	008000c4 	movi	r2,3
   436ac:	3881bb26 	beq	r7,r2,43d9c <__muldf3+0x850>
   436b0:	00800044 	movi	r2,1
   436b4:	3881961e 	bne	r7,r2,43d10 <__muldf3+0x7c4>
   436b8:	3027883a 	mov	r19,r6
   436bc:	0005883a 	mov	r2,zero
   436c0:	0021883a 	mov	r16,zero
   436c4:	002d883a 	mov	r22,zero
   436c8:	1004953a 	slli	r2,r2,20
   436cc:	98c03fcc 	andi	r3,r19,255
   436d0:	04400434 	movhi	r17,16
   436d4:	8c7fffc4 	addi	r17,r17,-1
   436d8:	180697fa 	slli	r3,r3,31
   436dc:	8460703a 	and	r16,r16,r17
   436e0:	80a0b03a 	or	r16,r16,r2
   436e4:	80c6b03a 	or	r3,r16,r3
   436e8:	b005883a 	mov	r2,r22
   436ec:	dfc01117 	ldw	ra,68(sp)
   436f0:	df001017 	ldw	fp,64(sp)
   436f4:	ddc00f17 	ldw	r23,60(sp)
   436f8:	dd800e17 	ldw	r22,56(sp)
   436fc:	dd400d17 	ldw	r21,52(sp)
   43700:	dd000c17 	ldw	r20,48(sp)
   43704:	dcc00b17 	ldw	r19,44(sp)
   43708:	dc800a17 	ldw	r18,40(sp)
   4370c:	dc400917 	ldw	r17,36(sp)
   43710:	dc000817 	ldw	r16,32(sp)
   43714:	dec01204 	addi	sp,sp,72
   43718:	f800283a 	ret
   4371c:	2404b03a 	or	r2,r4,r16
   43720:	202b883a 	mov	r21,r4
   43724:	10004426 	beq	r2,zero,43838 <__muldf3+0x2ec>
   43728:	80015126 	beq	r16,zero,43c70 <__muldf3+0x724>
   4372c:	8009883a 	mov	r4,r16
   43730:	d9800715 	stw	r6,28(sp)
   43734:	d9c00215 	stw	r7,8(sp)
   43738:	da400415 	stw	r9,16(sp)
   4373c:	0044ac80 	call	44ac8 <__clzsi2>
   43740:	d9800717 	ldw	r6,28(sp)
   43744:	d9c00217 	ldw	r7,8(sp)
   43748:	da400417 	ldw	r9,16(sp)
   4374c:	113ffd44 	addi	r4,r2,-11
   43750:	00c00704 	movi	r3,28
   43754:	19014216 	blt	r3,r4,43c60 <__muldf3+0x714>
   43758:	00c00744 	movi	r3,29
   4375c:	15bffe04 	addi	r22,r2,-8
   43760:	1907c83a 	sub	r3,r3,r4
   43764:	85a0983a 	sll	r16,r16,r22
   43768:	a8c6d83a 	srl	r3,r21,r3
   4376c:	adac983a 	sll	r22,r21,r22
   43770:	1c20b03a 	or	r16,r3,r16
   43774:	1080fcc4 	addi	r2,r2,1011
   43778:	00a9c83a 	sub	r20,zero,r2
   4377c:	002b883a 	mov	r21,zero
   43780:	000b883a 	mov	r5,zero
   43784:	003f9006 	br	435c8 <_gp+0xfffe43f0>
   43788:	3446b03a 	or	r3,r6,r17
   4378c:	1800281e 	bne	r3,zero,43830 <__muldf3+0x2e4>
   43790:	0023883a 	mov	r17,zero
   43794:	0025883a 	mov	r18,zero
   43798:	01c00084 	movi	r7,2
   4379c:	003f9c06 	br	43610 <_gp+0xfffe4438>
   437a0:	3446b03a 	or	r3,r6,r17
   437a4:	18001e26 	beq	r3,zero,43820 <__muldf3+0x2d4>
   437a8:	88012126 	beq	r17,zero,43c30 <__muldf3+0x6e4>
   437ac:	8809883a 	mov	r4,r17
   437b0:	d9400215 	stw	r5,8(sp)
   437b4:	d9800715 	stw	r6,28(sp)
   437b8:	da400415 	stw	r9,16(sp)
   437bc:	da800315 	stw	r10,12(sp)
   437c0:	0044ac80 	call	44ac8 <__clzsi2>
   437c4:	d9400217 	ldw	r5,8(sp)
   437c8:	d9800717 	ldw	r6,28(sp)
   437cc:	da400417 	ldw	r9,16(sp)
   437d0:	da800317 	ldw	r10,12(sp)
   437d4:	113ffd44 	addi	r4,r2,-11
   437d8:	00c00704 	movi	r3,28
   437dc:	19011016 	blt	r3,r4,43c20 <__muldf3+0x6d4>
   437e0:	00c00744 	movi	r3,29
   437e4:	14bffe04 	addi	r18,r2,-8
   437e8:	1907c83a 	sub	r3,r3,r4
   437ec:	8ca2983a 	sll	r17,r17,r18
   437f0:	30c6d83a 	srl	r3,r6,r3
   437f4:	34a4983a 	sll	r18,r6,r18
   437f8:	1c62b03a 	or	r17,r3,r17
   437fc:	1080fcc4 	addi	r2,r2,1011
   43800:	0085c83a 	sub	r2,zero,r2
   43804:	000f883a 	mov	r7,zero
   43808:	003f8106 	br	43610 <_gp+0xfffe4438>
   4380c:	3027883a 	mov	r19,r6
   43810:	0081ffc4 	movi	r2,2047
   43814:	0021883a 	mov	r16,zero
   43818:	002d883a 	mov	r22,zero
   4381c:	003faa06 	br	436c8 <_gp+0xfffe44f0>
   43820:	0023883a 	mov	r17,zero
   43824:	0025883a 	mov	r18,zero
   43828:	01c00044 	movi	r7,1
   4382c:	003f7806 	br	43610 <_gp+0xfffe4438>
   43830:	01c000c4 	movi	r7,3
   43834:	003f7606 	br	43610 <_gp+0xfffe4438>
   43838:	05400104 	movi	r21,4
   4383c:	0021883a 	mov	r16,zero
   43840:	002d883a 	mov	r22,zero
   43844:	01400044 	movi	r5,1
   43848:	003f5f06 	br	435c8 <_gp+0xfffe43f0>
   4384c:	05400304 	movi	r21,12
   43850:	014000c4 	movi	r5,3
   43854:	003f5c06 	br	435c8 <_gp+0xfffe43f0>
   43858:	04000434 	movhi	r16,16
   4385c:	0027883a 	mov	r19,zero
   43860:	843fffc4 	addi	r16,r16,-1
   43864:	05bfffc4 	movi	r22,-1
   43868:	0081ffc4 	movi	r2,2047
   4386c:	003f9606 	br	436c8 <_gp+0xfffe44f0>
   43870:	8023883a 	mov	r17,r16
   43874:	b025883a 	mov	r18,r22
   43878:	280f883a 	mov	r7,r5
   4387c:	003f8806 	br	436a0 <_gp+0xfffe44c8>
   43880:	8023883a 	mov	r17,r16
   43884:	b025883a 	mov	r18,r22
   43888:	480d883a 	mov	r6,r9
   4388c:	280f883a 	mov	r7,r5
   43890:	003f8306 	br	436a0 <_gp+0xfffe44c8>
   43894:	b026d43a 	srli	r19,r22,16
   43898:	902ed43a 	srli	r23,r18,16
   4389c:	b5bfffcc 	andi	r22,r22,65535
   438a0:	94bfffcc 	andi	r18,r18,65535
   438a4:	b00b883a 	mov	r5,r22
   438a8:	9009883a 	mov	r4,r18
   438ac:	d8c00515 	stw	r3,20(sp)
   438b0:	d9800715 	stw	r6,28(sp)
   438b4:	da000615 	stw	r8,24(sp)
   438b8:	00421cc0 	call	421cc <__mulsi3>
   438bc:	980b883a 	mov	r5,r19
   438c0:	9009883a 	mov	r4,r18
   438c4:	1029883a 	mov	r20,r2
   438c8:	00421cc0 	call	421cc <__mulsi3>
   438cc:	b80b883a 	mov	r5,r23
   438d0:	9809883a 	mov	r4,r19
   438d4:	102b883a 	mov	r21,r2
   438d8:	00421cc0 	call	421cc <__mulsi3>
   438dc:	b809883a 	mov	r4,r23
   438e0:	b00b883a 	mov	r5,r22
   438e4:	1039883a 	mov	fp,r2
   438e8:	00421cc0 	call	421cc <__mulsi3>
   438ec:	a008d43a 	srli	r4,r20,16
   438f0:	1545883a 	add	r2,r2,r21
   438f4:	d8c00517 	ldw	r3,20(sp)
   438f8:	2085883a 	add	r2,r4,r2
   438fc:	d9800717 	ldw	r6,28(sp)
   43900:	da000617 	ldw	r8,24(sp)
   43904:	1540022e 	bgeu	r2,r21,43910 <__muldf3+0x3c4>
   43908:	01000074 	movhi	r4,1
   4390c:	e139883a 	add	fp,fp,r4
   43910:	100e943a 	slli	r7,r2,16
   43914:	1004d43a 	srli	r2,r2,16
   43918:	882ad43a 	srli	r21,r17,16
   4391c:	a53fffcc 	andi	r20,r20,65535
   43920:	8c7fffcc 	andi	r17,r17,65535
   43924:	3d29883a 	add	r20,r7,r20
   43928:	b00b883a 	mov	r5,r22
   4392c:	8809883a 	mov	r4,r17
   43930:	d8c00515 	stw	r3,20(sp)
   43934:	d9800715 	stw	r6,28(sp)
   43938:	da000615 	stw	r8,24(sp)
   4393c:	dd000115 	stw	r20,4(sp)
   43940:	d8800015 	stw	r2,0(sp)
   43944:	00421cc0 	call	421cc <__mulsi3>
   43948:	980b883a 	mov	r5,r19
   4394c:	8809883a 	mov	r4,r17
   43950:	d8800215 	stw	r2,8(sp)
   43954:	00421cc0 	call	421cc <__mulsi3>
   43958:	9809883a 	mov	r4,r19
   4395c:	a80b883a 	mov	r5,r21
   43960:	1029883a 	mov	r20,r2
   43964:	00421cc0 	call	421cc <__mulsi3>
   43968:	b00b883a 	mov	r5,r22
   4396c:	a809883a 	mov	r4,r21
   43970:	d8800415 	stw	r2,16(sp)
   43974:	00421cc0 	call	421cc <__mulsi3>
   43978:	d9c00217 	ldw	r7,8(sp)
   4397c:	1505883a 	add	r2,r2,r20
   43980:	d8c00517 	ldw	r3,20(sp)
   43984:	3826d43a 	srli	r19,r7,16
   43988:	d9800717 	ldw	r6,28(sp)
   4398c:	da000617 	ldw	r8,24(sp)
   43990:	9885883a 	add	r2,r19,r2
   43994:	da400417 	ldw	r9,16(sp)
   43998:	1500022e 	bgeu	r2,r20,439a4 <__muldf3+0x458>
   4399c:	01000074 	movhi	r4,1
   439a0:	4913883a 	add	r9,r9,r4
   439a4:	1028d43a 	srli	r20,r2,16
   439a8:	1004943a 	slli	r2,r2,16
   439ac:	802cd43a 	srli	r22,r16,16
   439b0:	843fffcc 	andi	r16,r16,65535
   439b4:	3cffffcc 	andi	r19,r7,65535
   439b8:	9009883a 	mov	r4,r18
   439bc:	800b883a 	mov	r5,r16
   439c0:	a269883a 	add	r20,r20,r9
   439c4:	d8c00515 	stw	r3,20(sp)
   439c8:	d9800715 	stw	r6,28(sp)
   439cc:	da000615 	stw	r8,24(sp)
   439d0:	14e7883a 	add	r19,r2,r19
   439d4:	00421cc0 	call	421cc <__mulsi3>
   439d8:	9009883a 	mov	r4,r18
   439dc:	b00b883a 	mov	r5,r22
   439e0:	d8800315 	stw	r2,12(sp)
   439e4:	00421cc0 	call	421cc <__mulsi3>
   439e8:	b809883a 	mov	r4,r23
   439ec:	b00b883a 	mov	r5,r22
   439f0:	d8800215 	stw	r2,8(sp)
   439f4:	00421cc0 	call	421cc <__mulsi3>
   439f8:	b80b883a 	mov	r5,r23
   439fc:	8009883a 	mov	r4,r16
   43a00:	d8800415 	stw	r2,16(sp)
   43a04:	00421cc0 	call	421cc <__mulsi3>
   43a08:	da800317 	ldw	r10,12(sp)
   43a0c:	d9c00217 	ldw	r7,8(sp)
   43a10:	d9000017 	ldw	r4,0(sp)
   43a14:	502ed43a 	srli	r23,r10,16
   43a18:	11c5883a 	add	r2,r2,r7
   43a1c:	24e5883a 	add	r18,r4,r19
   43a20:	b885883a 	add	r2,r23,r2
   43a24:	d8c00517 	ldw	r3,20(sp)
   43a28:	d9800717 	ldw	r6,28(sp)
   43a2c:	da000617 	ldw	r8,24(sp)
   43a30:	da400417 	ldw	r9,16(sp)
   43a34:	11c0022e 	bgeu	r2,r7,43a40 <__muldf3+0x4f4>
   43a38:	01000074 	movhi	r4,1
   43a3c:	4913883a 	add	r9,r9,r4
   43a40:	100ed43a 	srli	r7,r2,16
   43a44:	1004943a 	slli	r2,r2,16
   43a48:	55ffffcc 	andi	r23,r10,65535
   43a4c:	3a53883a 	add	r9,r7,r9
   43a50:	8809883a 	mov	r4,r17
   43a54:	800b883a 	mov	r5,r16
   43a58:	d8c00515 	stw	r3,20(sp)
   43a5c:	d9800715 	stw	r6,28(sp)
   43a60:	da000615 	stw	r8,24(sp)
   43a64:	da400415 	stw	r9,16(sp)
   43a68:	15ef883a 	add	r23,r2,r23
   43a6c:	00421cc0 	call	421cc <__mulsi3>
   43a70:	8809883a 	mov	r4,r17
   43a74:	b00b883a 	mov	r5,r22
   43a78:	d8800215 	stw	r2,8(sp)
   43a7c:	00421cc0 	call	421cc <__mulsi3>
   43a80:	b00b883a 	mov	r5,r22
   43a84:	a809883a 	mov	r4,r21
   43a88:	d8800315 	stw	r2,12(sp)
   43a8c:	00421cc0 	call	421cc <__mulsi3>
   43a90:	8009883a 	mov	r4,r16
   43a94:	a80b883a 	mov	r5,r21
   43a98:	1023883a 	mov	r17,r2
   43a9c:	00421cc0 	call	421cc <__mulsi3>
   43aa0:	d9c00217 	ldw	r7,8(sp)
   43aa4:	da800317 	ldw	r10,12(sp)
   43aa8:	d8c00517 	ldw	r3,20(sp)
   43aac:	3808d43a 	srli	r4,r7,16
   43ab0:	1285883a 	add	r2,r2,r10
   43ab4:	d9800717 	ldw	r6,28(sp)
   43ab8:	2085883a 	add	r2,r4,r2
   43abc:	da000617 	ldw	r8,24(sp)
   43ac0:	da400417 	ldw	r9,16(sp)
   43ac4:	1280022e 	bgeu	r2,r10,43ad0 <__muldf3+0x584>
   43ac8:	01000074 	movhi	r4,1
   43acc:	8923883a 	add	r17,r17,r4
   43ad0:	1008943a 	slli	r4,r2,16
   43ad4:	39ffffcc 	andi	r7,r7,65535
   43ad8:	e4b9883a 	add	fp,fp,r18
   43adc:	21cf883a 	add	r7,r4,r7
   43ae0:	e4e7803a 	cmpltu	r19,fp,r19
   43ae4:	3d0f883a 	add	r7,r7,r20
   43ae8:	bf39883a 	add	fp,r23,fp
   43aec:	99c9883a 	add	r4,r19,r7
   43af0:	e5ef803a 	cmpltu	r23,fp,r23
   43af4:	490b883a 	add	r5,r9,r4
   43af8:	1004d43a 	srli	r2,r2,16
   43afc:	b965883a 	add	r18,r23,r5
   43b00:	24c9803a 	cmpltu	r4,r4,r19
   43b04:	3d29803a 	cmpltu	r20,r7,r20
   43b08:	a128b03a 	or	r20,r20,r4
   43b0c:	95ef803a 	cmpltu	r23,r18,r23
   43b10:	2a53803a 	cmpltu	r9,r5,r9
   43b14:	a0a9883a 	add	r20,r20,r2
   43b18:	4deeb03a 	or	r23,r9,r23
   43b1c:	a5ef883a 	add	r23,r20,r23
   43b20:	bc63883a 	add	r17,r23,r17
   43b24:	e004927a 	slli	r2,fp,9
   43b28:	d9000117 	ldw	r4,4(sp)
   43b2c:	882e927a 	slli	r23,r17,9
   43b30:	9022d5fa 	srli	r17,r18,23
   43b34:	e038d5fa 	srli	fp,fp,23
   43b38:	1104b03a 	or	r2,r2,r4
   43b3c:	9024927a 	slli	r18,r18,9
   43b40:	1004c03a 	cmpne	r2,r2,zero
   43b44:	bc62b03a 	or	r17,r23,r17
   43b48:	1738b03a 	or	fp,r2,fp
   43b4c:	8880402c 	andhi	r2,r17,256
   43b50:	e4a4b03a 	or	r18,fp,r18
   43b54:	10000726 	beq	r2,zero,43b74 <__muldf3+0x628>
   43b58:	9006d07a 	srli	r3,r18,1
   43b5c:	880497fa 	slli	r2,r17,31
   43b60:	9480004c 	andi	r18,r18,1
   43b64:	8822d07a 	srli	r17,r17,1
   43b68:	1ca4b03a 	or	r18,r3,r18
   43b6c:	14a4b03a 	or	r18,r2,r18
   43b70:	4007883a 	mov	r3,r8
   43b74:	1880ffc4 	addi	r2,r3,1023
   43b78:	0080460e 	bge	zero,r2,43c94 <__muldf3+0x748>
   43b7c:	910001cc 	andi	r4,r18,7
   43b80:	20000726 	beq	r4,zero,43ba0 <__muldf3+0x654>
   43b84:	910003cc 	andi	r4,r18,15
   43b88:	01400104 	movi	r5,4
   43b8c:	21400426 	beq	r4,r5,43ba0 <__muldf3+0x654>
   43b90:	9149883a 	add	r4,r18,r5
   43b94:	24a5803a 	cmpltu	r18,r4,r18
   43b98:	8ca3883a 	add	r17,r17,r18
   43b9c:	2025883a 	mov	r18,r4
   43ba0:	8900402c 	andhi	r4,r17,256
   43ba4:	20000426 	beq	r4,zero,43bb8 <__muldf3+0x66c>
   43ba8:	18810004 	addi	r2,r3,1024
   43bac:	00ffc034 	movhi	r3,65280
   43bb0:	18ffffc4 	addi	r3,r3,-1
   43bb4:	88e2703a 	and	r17,r17,r3
   43bb8:	00c1ff84 	movi	r3,2046
   43bbc:	18bf1316 	blt	r3,r2,4380c <_gp+0xfffe4634>
   43bc0:	882c977a 	slli	r22,r17,29
   43bc4:	9024d0fa 	srli	r18,r18,3
   43bc8:	8822927a 	slli	r17,r17,9
   43bcc:	1081ffcc 	andi	r2,r2,2047
   43bd0:	b4acb03a 	or	r22,r22,r18
   43bd4:	8820d33a 	srli	r16,r17,12
   43bd8:	3027883a 	mov	r19,r6
   43bdc:	003eba06 	br	436c8 <_gp+0xfffe44f0>
   43be0:	8080022c 	andhi	r2,r16,8
   43be4:	10000926 	beq	r2,zero,43c0c <__muldf3+0x6c0>
   43be8:	8880022c 	andhi	r2,r17,8
   43bec:	1000071e 	bne	r2,zero,43c0c <__muldf3+0x6c0>
   43bf0:	00800434 	movhi	r2,16
   43bf4:	8c000234 	orhi	r16,r17,8
   43bf8:	10bfffc4 	addi	r2,r2,-1
   43bfc:	e027883a 	mov	r19,fp
   43c00:	80a0703a 	and	r16,r16,r2
   43c04:	902d883a 	mov	r22,r18
   43c08:	003f1706 	br	43868 <_gp+0xfffe4690>
   43c0c:	00800434 	movhi	r2,16
   43c10:	84000234 	orhi	r16,r16,8
   43c14:	10bfffc4 	addi	r2,r2,-1
   43c18:	80a0703a 	and	r16,r16,r2
   43c1c:	003f1206 	br	43868 <_gp+0xfffe4690>
   43c20:	147ff604 	addi	r17,r2,-40
   43c24:	3462983a 	sll	r17,r6,r17
   43c28:	0025883a 	mov	r18,zero
   43c2c:	003ef306 	br	437fc <_gp+0xfffe4624>
   43c30:	3009883a 	mov	r4,r6
   43c34:	d9400215 	stw	r5,8(sp)
   43c38:	d9800715 	stw	r6,28(sp)
   43c3c:	da400415 	stw	r9,16(sp)
   43c40:	da800315 	stw	r10,12(sp)
   43c44:	0044ac80 	call	44ac8 <__clzsi2>
   43c48:	10800804 	addi	r2,r2,32
   43c4c:	da800317 	ldw	r10,12(sp)
   43c50:	da400417 	ldw	r9,16(sp)
   43c54:	d9800717 	ldw	r6,28(sp)
   43c58:	d9400217 	ldw	r5,8(sp)
   43c5c:	003edd06 	br	437d4 <_gp+0xfffe45fc>
   43c60:	143ff604 	addi	r16,r2,-40
   43c64:	ac20983a 	sll	r16,r21,r16
   43c68:	002d883a 	mov	r22,zero
   43c6c:	003ec106 	br	43774 <_gp+0xfffe459c>
   43c70:	d9800715 	stw	r6,28(sp)
   43c74:	d9c00215 	stw	r7,8(sp)
   43c78:	da400415 	stw	r9,16(sp)
   43c7c:	0044ac80 	call	44ac8 <__clzsi2>
   43c80:	10800804 	addi	r2,r2,32
   43c84:	da400417 	ldw	r9,16(sp)
   43c88:	d9c00217 	ldw	r7,8(sp)
   43c8c:	d9800717 	ldw	r6,28(sp)
   43c90:	003eae06 	br	4374c <_gp+0xfffe4574>
   43c94:	00c00044 	movi	r3,1
   43c98:	1887c83a 	sub	r3,r3,r2
   43c9c:	01000e04 	movi	r4,56
   43ca0:	20fe8516 	blt	r4,r3,436b8 <_gp+0xfffe44e0>
   43ca4:	010007c4 	movi	r4,31
   43ca8:	20c01b16 	blt	r4,r3,43d18 <__muldf3+0x7cc>
   43cac:	00800804 	movi	r2,32
   43cb0:	10c5c83a 	sub	r2,r2,r3
   43cb4:	888a983a 	sll	r5,r17,r2
   43cb8:	90c8d83a 	srl	r4,r18,r3
   43cbc:	9084983a 	sll	r2,r18,r2
   43cc0:	88e2d83a 	srl	r17,r17,r3
   43cc4:	2906b03a 	or	r3,r5,r4
   43cc8:	1004c03a 	cmpne	r2,r2,zero
   43ccc:	1886b03a 	or	r3,r3,r2
   43cd0:	188001cc 	andi	r2,r3,7
   43cd4:	10000726 	beq	r2,zero,43cf4 <__muldf3+0x7a8>
   43cd8:	188003cc 	andi	r2,r3,15
   43cdc:	01000104 	movi	r4,4
   43ce0:	11000426 	beq	r2,r4,43cf4 <__muldf3+0x7a8>
   43ce4:	1805883a 	mov	r2,r3
   43ce8:	10c00104 	addi	r3,r2,4
   43cec:	1885803a 	cmpltu	r2,r3,r2
   43cf0:	88a3883a 	add	r17,r17,r2
   43cf4:	8880202c 	andhi	r2,r17,128
   43cf8:	10001c26 	beq	r2,zero,43d6c <__muldf3+0x820>
   43cfc:	3027883a 	mov	r19,r6
   43d00:	00800044 	movi	r2,1
   43d04:	0021883a 	mov	r16,zero
   43d08:	002d883a 	mov	r22,zero
   43d0c:	003e6e06 	br	436c8 <_gp+0xfffe44f0>
   43d10:	4007883a 	mov	r3,r8
   43d14:	003f9706 	br	43b74 <_gp+0xfffe499c>
   43d18:	017ff844 	movi	r5,-31
   43d1c:	2885c83a 	sub	r2,r5,r2
   43d20:	888ad83a 	srl	r5,r17,r2
   43d24:	00800804 	movi	r2,32
   43d28:	18801a26 	beq	r3,r2,43d94 <__muldf3+0x848>
   43d2c:	01001004 	movi	r4,64
   43d30:	20c7c83a 	sub	r3,r4,r3
   43d34:	88e2983a 	sll	r17,r17,r3
   43d38:	8ca4b03a 	or	r18,r17,r18
   43d3c:	9004c03a 	cmpne	r2,r18,zero
   43d40:	2884b03a 	or	r2,r5,r2
   43d44:	144001cc 	andi	r17,r2,7
   43d48:	88000d1e 	bne	r17,zero,43d80 <__muldf3+0x834>
   43d4c:	0021883a 	mov	r16,zero
   43d50:	102cd0fa 	srli	r22,r2,3
   43d54:	3027883a 	mov	r19,r6
   43d58:	0005883a 	mov	r2,zero
   43d5c:	b46cb03a 	or	r22,r22,r17
   43d60:	003e5906 	br	436c8 <_gp+0xfffe44f0>
   43d64:	1007883a 	mov	r3,r2
   43d68:	0023883a 	mov	r17,zero
   43d6c:	8820927a 	slli	r16,r17,9
   43d70:	1805883a 	mov	r2,r3
   43d74:	8822977a 	slli	r17,r17,29
   43d78:	8020d33a 	srli	r16,r16,12
   43d7c:	003ff406 	br	43d50 <_gp+0xfffe4b78>
   43d80:	10c003cc 	andi	r3,r2,15
   43d84:	01000104 	movi	r4,4
   43d88:	193ff626 	beq	r3,r4,43d64 <_gp+0xfffe4b8c>
   43d8c:	0023883a 	mov	r17,zero
   43d90:	003fd506 	br	43ce8 <_gp+0xfffe4b10>
   43d94:	0023883a 	mov	r17,zero
   43d98:	003fe706 	br	43d38 <_gp+0xfffe4b60>
   43d9c:	00800434 	movhi	r2,16
   43da0:	8c000234 	orhi	r16,r17,8
   43da4:	10bfffc4 	addi	r2,r2,-1
   43da8:	3027883a 	mov	r19,r6
   43dac:	80a0703a 	and	r16,r16,r2
   43db0:	902d883a 	mov	r22,r18
   43db4:	003eac06 	br	43868 <_gp+0xfffe4690>

00043db8 <__subdf3>:
   43db8:	02000434 	movhi	r8,16
   43dbc:	423fffc4 	addi	r8,r8,-1
   43dc0:	defffb04 	addi	sp,sp,-20
   43dc4:	2a14703a 	and	r10,r5,r8
   43dc8:	3812d53a 	srli	r9,r7,20
   43dcc:	3a10703a 	and	r8,r7,r8
   43dd0:	2006d77a 	srli	r3,r4,29
   43dd4:	3004d77a 	srli	r2,r6,29
   43dd8:	dc000015 	stw	r16,0(sp)
   43ddc:	501490fa 	slli	r10,r10,3
   43de0:	2820d53a 	srli	r16,r5,20
   43de4:	401090fa 	slli	r8,r8,3
   43de8:	dc800215 	stw	r18,8(sp)
   43dec:	dc400115 	stw	r17,4(sp)
   43df0:	dfc00415 	stw	ra,16(sp)
   43df4:	202290fa 	slli	r17,r4,3
   43df8:	dcc00315 	stw	r19,12(sp)
   43dfc:	4a41ffcc 	andi	r9,r9,2047
   43e00:	0101ffc4 	movi	r4,2047
   43e04:	2824d7fa 	srli	r18,r5,31
   43e08:	8401ffcc 	andi	r16,r16,2047
   43e0c:	50c6b03a 	or	r3,r10,r3
   43e10:	380ed7fa 	srli	r7,r7,31
   43e14:	408ab03a 	or	r5,r8,r2
   43e18:	300c90fa 	slli	r6,r6,3
   43e1c:	49009626 	beq	r9,r4,44078 <__subdf3+0x2c0>
   43e20:	39c0005c 	xori	r7,r7,1
   43e24:	8245c83a 	sub	r2,r16,r9
   43e28:	3c807426 	beq	r7,r18,43ffc <__subdf3+0x244>
   43e2c:	0080af0e 	bge	zero,r2,440ec <__subdf3+0x334>
   43e30:	48002a1e 	bne	r9,zero,43edc <__subdf3+0x124>
   43e34:	2988b03a 	or	r4,r5,r6
   43e38:	20009a1e 	bne	r4,zero,440a4 <__subdf3+0x2ec>
   43e3c:	888001cc 	andi	r2,r17,7
   43e40:	10000726 	beq	r2,zero,43e60 <__subdf3+0xa8>
   43e44:	888003cc 	andi	r2,r17,15
   43e48:	01000104 	movi	r4,4
   43e4c:	11000426 	beq	r2,r4,43e60 <__subdf3+0xa8>
   43e50:	890b883a 	add	r5,r17,r4
   43e54:	2c63803a 	cmpltu	r17,r5,r17
   43e58:	1c47883a 	add	r3,r3,r17
   43e5c:	2823883a 	mov	r17,r5
   43e60:	1880202c 	andhi	r2,r3,128
   43e64:	10005926 	beq	r2,zero,43fcc <__subdf3+0x214>
   43e68:	84000044 	addi	r16,r16,1
   43e6c:	0081ffc4 	movi	r2,2047
   43e70:	8080be26 	beq	r16,r2,4416c <__subdf3+0x3b4>
   43e74:	017fe034 	movhi	r5,65408
   43e78:	297fffc4 	addi	r5,r5,-1
   43e7c:	1946703a 	and	r3,r3,r5
   43e80:	1804977a 	slli	r2,r3,29
   43e84:	1806927a 	slli	r3,r3,9
   43e88:	8822d0fa 	srli	r17,r17,3
   43e8c:	8401ffcc 	andi	r16,r16,2047
   43e90:	180ad33a 	srli	r5,r3,12
   43e94:	9100004c 	andi	r4,r18,1
   43e98:	1444b03a 	or	r2,r2,r17
   43e9c:	80c1ffcc 	andi	r3,r16,2047
   43ea0:	1820953a 	slli	r16,r3,20
   43ea4:	20c03fcc 	andi	r3,r4,255
   43ea8:	180897fa 	slli	r4,r3,31
   43eac:	00c00434 	movhi	r3,16
   43eb0:	18ffffc4 	addi	r3,r3,-1
   43eb4:	28c6703a 	and	r3,r5,r3
   43eb8:	1c06b03a 	or	r3,r3,r16
   43ebc:	1906b03a 	or	r3,r3,r4
   43ec0:	dfc00417 	ldw	ra,16(sp)
   43ec4:	dcc00317 	ldw	r19,12(sp)
   43ec8:	dc800217 	ldw	r18,8(sp)
   43ecc:	dc400117 	ldw	r17,4(sp)
   43ed0:	dc000017 	ldw	r16,0(sp)
   43ed4:	dec00504 	addi	sp,sp,20
   43ed8:	f800283a 	ret
   43edc:	0101ffc4 	movi	r4,2047
   43ee0:	813fd626 	beq	r16,r4,43e3c <_gp+0xfffe4c64>
   43ee4:	29402034 	orhi	r5,r5,128
   43ee8:	01000e04 	movi	r4,56
   43eec:	2080a316 	blt	r4,r2,4417c <__subdf3+0x3c4>
   43ef0:	010007c4 	movi	r4,31
   43ef4:	2080c616 	blt	r4,r2,44210 <__subdf3+0x458>
   43ef8:	01000804 	movi	r4,32
   43efc:	2089c83a 	sub	r4,r4,r2
   43f00:	2910983a 	sll	r8,r5,r4
   43f04:	308ed83a 	srl	r7,r6,r2
   43f08:	3108983a 	sll	r4,r6,r4
   43f0c:	2884d83a 	srl	r2,r5,r2
   43f10:	41ccb03a 	or	r6,r8,r7
   43f14:	2008c03a 	cmpne	r4,r4,zero
   43f18:	310cb03a 	or	r6,r6,r4
   43f1c:	898dc83a 	sub	r6,r17,r6
   43f20:	89a3803a 	cmpltu	r17,r17,r6
   43f24:	1887c83a 	sub	r3,r3,r2
   43f28:	1c47c83a 	sub	r3,r3,r17
   43f2c:	3023883a 	mov	r17,r6
   43f30:	1880202c 	andhi	r2,r3,128
   43f34:	10002326 	beq	r2,zero,43fc4 <__subdf3+0x20c>
   43f38:	04c02034 	movhi	r19,128
   43f3c:	9cffffc4 	addi	r19,r19,-1
   43f40:	1ce6703a 	and	r19,r3,r19
   43f44:	98007a26 	beq	r19,zero,44130 <__subdf3+0x378>
   43f48:	9809883a 	mov	r4,r19
   43f4c:	0044ac80 	call	44ac8 <__clzsi2>
   43f50:	113ffe04 	addi	r4,r2,-8
   43f54:	00c007c4 	movi	r3,31
   43f58:	19007b16 	blt	r3,r4,44148 <__subdf3+0x390>
   43f5c:	00800804 	movi	r2,32
   43f60:	1105c83a 	sub	r2,r2,r4
   43f64:	8884d83a 	srl	r2,r17,r2
   43f68:	9906983a 	sll	r3,r19,r4
   43f6c:	8922983a 	sll	r17,r17,r4
   43f70:	10c4b03a 	or	r2,r2,r3
   43f74:	24007816 	blt	r4,r16,44158 <__subdf3+0x3a0>
   43f78:	2421c83a 	sub	r16,r4,r16
   43f7c:	80c00044 	addi	r3,r16,1
   43f80:	010007c4 	movi	r4,31
   43f84:	20c09516 	blt	r4,r3,441dc <__subdf3+0x424>
   43f88:	01400804 	movi	r5,32
   43f8c:	28cbc83a 	sub	r5,r5,r3
   43f90:	88c8d83a 	srl	r4,r17,r3
   43f94:	8962983a 	sll	r17,r17,r5
   43f98:	114a983a 	sll	r5,r2,r5
   43f9c:	10c6d83a 	srl	r3,r2,r3
   43fa0:	8804c03a 	cmpne	r2,r17,zero
   43fa4:	290ab03a 	or	r5,r5,r4
   43fa8:	28a2b03a 	or	r17,r5,r2
   43fac:	0021883a 	mov	r16,zero
   43fb0:	003fa206 	br	43e3c <_gp+0xfffe4c64>
   43fb4:	2090b03a 	or	r8,r4,r2
   43fb8:	40018e26 	beq	r8,zero,445f4 <__subdf3+0x83c>
   43fbc:	1007883a 	mov	r3,r2
   43fc0:	2023883a 	mov	r17,r4
   43fc4:	888001cc 	andi	r2,r17,7
   43fc8:	103f9e1e 	bne	r2,zero,43e44 <_gp+0xfffe4c6c>
   43fcc:	1804977a 	slli	r2,r3,29
   43fd0:	8822d0fa 	srli	r17,r17,3
   43fd4:	1810d0fa 	srli	r8,r3,3
   43fd8:	9100004c 	andi	r4,r18,1
   43fdc:	1444b03a 	or	r2,r2,r17
   43fe0:	00c1ffc4 	movi	r3,2047
   43fe4:	80c02826 	beq	r16,r3,44088 <__subdf3+0x2d0>
   43fe8:	01400434 	movhi	r5,16
   43fec:	297fffc4 	addi	r5,r5,-1
   43ff0:	80e0703a 	and	r16,r16,r3
   43ff4:	414a703a 	and	r5,r8,r5
   43ff8:	003fa806 	br	43e9c <_gp+0xfffe4cc4>
   43ffc:	0080630e 	bge	zero,r2,4418c <__subdf3+0x3d4>
   44000:	48003026 	beq	r9,zero,440c4 <__subdf3+0x30c>
   44004:	0101ffc4 	movi	r4,2047
   44008:	813f8c26 	beq	r16,r4,43e3c <_gp+0xfffe4c64>
   4400c:	29402034 	orhi	r5,r5,128
   44010:	01000e04 	movi	r4,56
   44014:	2080a90e 	bge	r4,r2,442bc <__subdf3+0x504>
   44018:	298cb03a 	or	r6,r5,r6
   4401c:	3012c03a 	cmpne	r9,r6,zero
   44020:	0005883a 	mov	r2,zero
   44024:	4c53883a 	add	r9,r9,r17
   44028:	4c63803a 	cmpltu	r17,r9,r17
   4402c:	10c7883a 	add	r3,r2,r3
   44030:	88c7883a 	add	r3,r17,r3
   44034:	4823883a 	mov	r17,r9
   44038:	1880202c 	andhi	r2,r3,128
   4403c:	1000d026 	beq	r2,zero,44380 <__subdf3+0x5c8>
   44040:	84000044 	addi	r16,r16,1
   44044:	0081ffc4 	movi	r2,2047
   44048:	8080fe26 	beq	r16,r2,44444 <__subdf3+0x68c>
   4404c:	00bfe034 	movhi	r2,65408
   44050:	10bfffc4 	addi	r2,r2,-1
   44054:	1886703a 	and	r3,r3,r2
   44058:	880ad07a 	srli	r5,r17,1
   4405c:	180497fa 	slli	r2,r3,31
   44060:	8900004c 	andi	r4,r17,1
   44064:	2922b03a 	or	r17,r5,r4
   44068:	1806d07a 	srli	r3,r3,1
   4406c:	1462b03a 	or	r17,r2,r17
   44070:	3825883a 	mov	r18,r7
   44074:	003f7106 	br	43e3c <_gp+0xfffe4c64>
   44078:	2984b03a 	or	r2,r5,r6
   4407c:	103f6826 	beq	r2,zero,43e20 <_gp+0xfffe4c48>
   44080:	39c03fcc 	andi	r7,r7,255
   44084:	003f6706 	br	43e24 <_gp+0xfffe4c4c>
   44088:	4086b03a 	or	r3,r8,r2
   4408c:	18015226 	beq	r3,zero,445d8 <__subdf3+0x820>
   44090:	00c00434 	movhi	r3,16
   44094:	41400234 	orhi	r5,r8,8
   44098:	18ffffc4 	addi	r3,r3,-1
   4409c:	28ca703a 	and	r5,r5,r3
   440a0:	003f7e06 	br	43e9c <_gp+0xfffe4cc4>
   440a4:	10bfffc4 	addi	r2,r2,-1
   440a8:	1000491e 	bne	r2,zero,441d0 <__subdf3+0x418>
   440ac:	898fc83a 	sub	r7,r17,r6
   440b0:	89e3803a 	cmpltu	r17,r17,r7
   440b4:	1947c83a 	sub	r3,r3,r5
   440b8:	1c47c83a 	sub	r3,r3,r17
   440bc:	3823883a 	mov	r17,r7
   440c0:	003f9b06 	br	43f30 <_gp+0xfffe4d58>
   440c4:	2988b03a 	or	r4,r5,r6
   440c8:	203f5c26 	beq	r4,zero,43e3c <_gp+0xfffe4c64>
   440cc:	10bfffc4 	addi	r2,r2,-1
   440d0:	1000931e 	bne	r2,zero,44320 <__subdf3+0x568>
   440d4:	898d883a 	add	r6,r17,r6
   440d8:	3463803a 	cmpltu	r17,r6,r17
   440dc:	1947883a 	add	r3,r3,r5
   440e0:	88c7883a 	add	r3,r17,r3
   440e4:	3023883a 	mov	r17,r6
   440e8:	003fd306 	br	44038 <_gp+0xfffe4e60>
   440ec:	1000541e 	bne	r2,zero,44240 <__subdf3+0x488>
   440f0:	80800044 	addi	r2,r16,1
   440f4:	1081ffcc 	andi	r2,r2,2047
   440f8:	01000044 	movi	r4,1
   440fc:	2080a20e 	bge	r4,r2,44388 <__subdf3+0x5d0>
   44100:	8989c83a 	sub	r4,r17,r6
   44104:	8905803a 	cmpltu	r2,r17,r4
   44108:	1967c83a 	sub	r19,r3,r5
   4410c:	98a7c83a 	sub	r19,r19,r2
   44110:	9880202c 	andhi	r2,r19,128
   44114:	10006326 	beq	r2,zero,442a4 <__subdf3+0x4ec>
   44118:	3463c83a 	sub	r17,r6,r17
   4411c:	28c7c83a 	sub	r3,r5,r3
   44120:	344d803a 	cmpltu	r6,r6,r17
   44124:	19a7c83a 	sub	r19,r3,r6
   44128:	3825883a 	mov	r18,r7
   4412c:	983f861e 	bne	r19,zero,43f48 <_gp+0xfffe4d70>
   44130:	8809883a 	mov	r4,r17
   44134:	0044ac80 	call	44ac8 <__clzsi2>
   44138:	10800804 	addi	r2,r2,32
   4413c:	113ffe04 	addi	r4,r2,-8
   44140:	00c007c4 	movi	r3,31
   44144:	193f850e 	bge	r3,r4,43f5c <_gp+0xfffe4d84>
   44148:	10bff604 	addi	r2,r2,-40
   4414c:	8884983a 	sll	r2,r17,r2
   44150:	0023883a 	mov	r17,zero
   44154:	243f880e 	bge	r4,r16,43f78 <_gp+0xfffe4da0>
   44158:	00ffe034 	movhi	r3,65408
   4415c:	18ffffc4 	addi	r3,r3,-1
   44160:	8121c83a 	sub	r16,r16,r4
   44164:	10c6703a 	and	r3,r2,r3
   44168:	003f3406 	br	43e3c <_gp+0xfffe4c64>
   4416c:	9100004c 	andi	r4,r18,1
   44170:	000b883a 	mov	r5,zero
   44174:	0005883a 	mov	r2,zero
   44178:	003f4806 	br	43e9c <_gp+0xfffe4cc4>
   4417c:	298cb03a 	or	r6,r5,r6
   44180:	300cc03a 	cmpne	r6,r6,zero
   44184:	0005883a 	mov	r2,zero
   44188:	003f6406 	br	43f1c <_gp+0xfffe4d44>
   4418c:	10009a1e 	bne	r2,zero,443f8 <__subdf3+0x640>
   44190:	82400044 	addi	r9,r16,1
   44194:	4881ffcc 	andi	r2,r9,2047
   44198:	02800044 	movi	r10,1
   4419c:	5080670e 	bge	r10,r2,4433c <__subdf3+0x584>
   441a0:	0081ffc4 	movi	r2,2047
   441a4:	4880af26 	beq	r9,r2,44464 <__subdf3+0x6ac>
   441a8:	898d883a 	add	r6,r17,r6
   441ac:	1945883a 	add	r2,r3,r5
   441b0:	3447803a 	cmpltu	r3,r6,r17
   441b4:	1887883a 	add	r3,r3,r2
   441b8:	182297fa 	slli	r17,r3,31
   441bc:	300cd07a 	srli	r6,r6,1
   441c0:	1806d07a 	srli	r3,r3,1
   441c4:	4821883a 	mov	r16,r9
   441c8:	89a2b03a 	or	r17,r17,r6
   441cc:	003f1b06 	br	43e3c <_gp+0xfffe4c64>
   441d0:	0101ffc4 	movi	r4,2047
   441d4:	813f441e 	bne	r16,r4,43ee8 <_gp+0xfffe4d10>
   441d8:	003f1806 	br	43e3c <_gp+0xfffe4c64>
   441dc:	843ff844 	addi	r16,r16,-31
   441e0:	01400804 	movi	r5,32
   441e4:	1408d83a 	srl	r4,r2,r16
   441e8:	19405026 	beq	r3,r5,4432c <__subdf3+0x574>
   441ec:	01401004 	movi	r5,64
   441f0:	28c7c83a 	sub	r3,r5,r3
   441f4:	10c4983a 	sll	r2,r2,r3
   441f8:	88a2b03a 	or	r17,r17,r2
   441fc:	8822c03a 	cmpne	r17,r17,zero
   44200:	2462b03a 	or	r17,r4,r17
   44204:	0007883a 	mov	r3,zero
   44208:	0021883a 	mov	r16,zero
   4420c:	003f6d06 	br	43fc4 <_gp+0xfffe4dec>
   44210:	11fff804 	addi	r7,r2,-32
   44214:	01000804 	movi	r4,32
   44218:	29ced83a 	srl	r7,r5,r7
   4421c:	11004526 	beq	r2,r4,44334 <__subdf3+0x57c>
   44220:	01001004 	movi	r4,64
   44224:	2089c83a 	sub	r4,r4,r2
   44228:	2904983a 	sll	r2,r5,r4
   4422c:	118cb03a 	or	r6,r2,r6
   44230:	300cc03a 	cmpne	r6,r6,zero
   44234:	398cb03a 	or	r6,r7,r6
   44238:	0005883a 	mov	r2,zero
   4423c:	003f3706 	br	43f1c <_gp+0xfffe4d44>
   44240:	80002a26 	beq	r16,zero,442ec <__subdf3+0x534>
   44244:	0101ffc4 	movi	r4,2047
   44248:	49006626 	beq	r9,r4,443e4 <__subdf3+0x62c>
   4424c:	0085c83a 	sub	r2,zero,r2
   44250:	18c02034 	orhi	r3,r3,128
   44254:	01000e04 	movi	r4,56
   44258:	20807e16 	blt	r4,r2,44454 <__subdf3+0x69c>
   4425c:	010007c4 	movi	r4,31
   44260:	2080e716 	blt	r4,r2,44600 <__subdf3+0x848>
   44264:	01000804 	movi	r4,32
   44268:	2089c83a 	sub	r4,r4,r2
   4426c:	1914983a 	sll	r10,r3,r4
   44270:	8890d83a 	srl	r8,r17,r2
   44274:	8908983a 	sll	r4,r17,r4
   44278:	1884d83a 	srl	r2,r3,r2
   4427c:	5222b03a 	or	r17,r10,r8
   44280:	2006c03a 	cmpne	r3,r4,zero
   44284:	88e2b03a 	or	r17,r17,r3
   44288:	3463c83a 	sub	r17,r6,r17
   4428c:	2885c83a 	sub	r2,r5,r2
   44290:	344d803a 	cmpltu	r6,r6,r17
   44294:	1187c83a 	sub	r3,r2,r6
   44298:	4821883a 	mov	r16,r9
   4429c:	3825883a 	mov	r18,r7
   442a0:	003f2306 	br	43f30 <_gp+0xfffe4d58>
   442a4:	24d0b03a 	or	r8,r4,r19
   442a8:	40001b1e 	bne	r8,zero,44318 <__subdf3+0x560>
   442ac:	0005883a 	mov	r2,zero
   442b0:	0009883a 	mov	r4,zero
   442b4:	0021883a 	mov	r16,zero
   442b8:	003f4906 	br	43fe0 <_gp+0xfffe4e08>
   442bc:	010007c4 	movi	r4,31
   442c0:	20803a16 	blt	r4,r2,443ac <__subdf3+0x5f4>
   442c4:	01000804 	movi	r4,32
   442c8:	2089c83a 	sub	r4,r4,r2
   442cc:	2912983a 	sll	r9,r5,r4
   442d0:	3090d83a 	srl	r8,r6,r2
   442d4:	3108983a 	sll	r4,r6,r4
   442d8:	2884d83a 	srl	r2,r5,r2
   442dc:	4a12b03a 	or	r9,r9,r8
   442e0:	2008c03a 	cmpne	r4,r4,zero
   442e4:	4912b03a 	or	r9,r9,r4
   442e8:	003f4e06 	br	44024 <_gp+0xfffe4e4c>
   442ec:	1c48b03a 	or	r4,r3,r17
   442f0:	20003c26 	beq	r4,zero,443e4 <__subdf3+0x62c>
   442f4:	0084303a 	nor	r2,zero,r2
   442f8:	1000381e 	bne	r2,zero,443dc <__subdf3+0x624>
   442fc:	3463c83a 	sub	r17,r6,r17
   44300:	28c5c83a 	sub	r2,r5,r3
   44304:	344d803a 	cmpltu	r6,r6,r17
   44308:	1187c83a 	sub	r3,r2,r6
   4430c:	4821883a 	mov	r16,r9
   44310:	3825883a 	mov	r18,r7
   44314:	003f0606 	br	43f30 <_gp+0xfffe4d58>
   44318:	2023883a 	mov	r17,r4
   4431c:	003f0906 	br	43f44 <_gp+0xfffe4d6c>
   44320:	0101ffc4 	movi	r4,2047
   44324:	813f3a1e 	bne	r16,r4,44010 <_gp+0xfffe4e38>
   44328:	003ec406 	br	43e3c <_gp+0xfffe4c64>
   4432c:	0005883a 	mov	r2,zero
   44330:	003fb106 	br	441f8 <_gp+0xfffe5020>
   44334:	0005883a 	mov	r2,zero
   44338:	003fbc06 	br	4422c <_gp+0xfffe5054>
   4433c:	1c44b03a 	or	r2,r3,r17
   44340:	80008e1e 	bne	r16,zero,4457c <__subdf3+0x7c4>
   44344:	1000c826 	beq	r2,zero,44668 <__subdf3+0x8b0>
   44348:	2984b03a 	or	r2,r5,r6
   4434c:	103ebb26 	beq	r2,zero,43e3c <_gp+0xfffe4c64>
   44350:	8989883a 	add	r4,r17,r6
   44354:	1945883a 	add	r2,r3,r5
   44358:	2447803a 	cmpltu	r3,r4,r17
   4435c:	1887883a 	add	r3,r3,r2
   44360:	1880202c 	andhi	r2,r3,128
   44364:	2023883a 	mov	r17,r4
   44368:	103f1626 	beq	r2,zero,43fc4 <_gp+0xfffe4dec>
   4436c:	00bfe034 	movhi	r2,65408
   44370:	10bfffc4 	addi	r2,r2,-1
   44374:	5021883a 	mov	r16,r10
   44378:	1886703a 	and	r3,r3,r2
   4437c:	003eaf06 	br	43e3c <_gp+0xfffe4c64>
   44380:	3825883a 	mov	r18,r7
   44384:	003f0f06 	br	43fc4 <_gp+0xfffe4dec>
   44388:	1c44b03a 	or	r2,r3,r17
   4438c:	8000251e 	bne	r16,zero,44424 <__subdf3+0x66c>
   44390:	1000661e 	bne	r2,zero,4452c <__subdf3+0x774>
   44394:	2990b03a 	or	r8,r5,r6
   44398:	40009626 	beq	r8,zero,445f4 <__subdf3+0x83c>
   4439c:	2807883a 	mov	r3,r5
   443a0:	3023883a 	mov	r17,r6
   443a4:	3825883a 	mov	r18,r7
   443a8:	003ea406 	br	43e3c <_gp+0xfffe4c64>
   443ac:	127ff804 	addi	r9,r2,-32
   443b0:	01000804 	movi	r4,32
   443b4:	2a52d83a 	srl	r9,r5,r9
   443b8:	11008c26 	beq	r2,r4,445ec <__subdf3+0x834>
   443bc:	01001004 	movi	r4,64
   443c0:	2085c83a 	sub	r2,r4,r2
   443c4:	2884983a 	sll	r2,r5,r2
   443c8:	118cb03a 	or	r6,r2,r6
   443cc:	300cc03a 	cmpne	r6,r6,zero
   443d0:	4992b03a 	or	r9,r9,r6
   443d4:	0005883a 	mov	r2,zero
   443d8:	003f1206 	br	44024 <_gp+0xfffe4e4c>
   443dc:	0101ffc4 	movi	r4,2047
   443e0:	493f9c1e 	bne	r9,r4,44254 <_gp+0xfffe507c>
   443e4:	2807883a 	mov	r3,r5
   443e8:	3023883a 	mov	r17,r6
   443ec:	4821883a 	mov	r16,r9
   443f0:	3825883a 	mov	r18,r7
   443f4:	003e9106 	br	43e3c <_gp+0xfffe4c64>
   443f8:	80001f1e 	bne	r16,zero,44478 <__subdf3+0x6c0>
   443fc:	1c48b03a 	or	r4,r3,r17
   44400:	20005a26 	beq	r4,zero,4456c <__subdf3+0x7b4>
   44404:	0084303a 	nor	r2,zero,r2
   44408:	1000561e 	bne	r2,zero,44564 <__subdf3+0x7ac>
   4440c:	89a3883a 	add	r17,r17,r6
   44410:	1945883a 	add	r2,r3,r5
   44414:	898d803a 	cmpltu	r6,r17,r6
   44418:	3087883a 	add	r3,r6,r2
   4441c:	4821883a 	mov	r16,r9
   44420:	003f0506 	br	44038 <_gp+0xfffe4e60>
   44424:	10002b1e 	bne	r2,zero,444d4 <__subdf3+0x71c>
   44428:	2984b03a 	or	r2,r5,r6
   4442c:	10008026 	beq	r2,zero,44630 <__subdf3+0x878>
   44430:	2807883a 	mov	r3,r5
   44434:	3023883a 	mov	r17,r6
   44438:	3825883a 	mov	r18,r7
   4443c:	0401ffc4 	movi	r16,2047
   44440:	003e7e06 	br	43e3c <_gp+0xfffe4c64>
   44444:	3809883a 	mov	r4,r7
   44448:	0011883a 	mov	r8,zero
   4444c:	0005883a 	mov	r2,zero
   44450:	003ee306 	br	43fe0 <_gp+0xfffe4e08>
   44454:	1c62b03a 	or	r17,r3,r17
   44458:	8822c03a 	cmpne	r17,r17,zero
   4445c:	0005883a 	mov	r2,zero
   44460:	003f8906 	br	44288 <_gp+0xfffe50b0>
   44464:	3809883a 	mov	r4,r7
   44468:	4821883a 	mov	r16,r9
   4446c:	0011883a 	mov	r8,zero
   44470:	0005883a 	mov	r2,zero
   44474:	003eda06 	br	43fe0 <_gp+0xfffe4e08>
   44478:	0101ffc4 	movi	r4,2047
   4447c:	49003b26 	beq	r9,r4,4456c <__subdf3+0x7b4>
   44480:	0085c83a 	sub	r2,zero,r2
   44484:	18c02034 	orhi	r3,r3,128
   44488:	01000e04 	movi	r4,56
   4448c:	20806e16 	blt	r4,r2,44648 <__subdf3+0x890>
   44490:	010007c4 	movi	r4,31
   44494:	20807716 	blt	r4,r2,44674 <__subdf3+0x8bc>
   44498:	01000804 	movi	r4,32
   4449c:	2089c83a 	sub	r4,r4,r2
   444a0:	1914983a 	sll	r10,r3,r4
   444a4:	8890d83a 	srl	r8,r17,r2
   444a8:	8908983a 	sll	r4,r17,r4
   444ac:	1884d83a 	srl	r2,r3,r2
   444b0:	5222b03a 	or	r17,r10,r8
   444b4:	2006c03a 	cmpne	r3,r4,zero
   444b8:	88e2b03a 	or	r17,r17,r3
   444bc:	89a3883a 	add	r17,r17,r6
   444c0:	1145883a 	add	r2,r2,r5
   444c4:	898d803a 	cmpltu	r6,r17,r6
   444c8:	3087883a 	add	r3,r6,r2
   444cc:	4821883a 	mov	r16,r9
   444d0:	003ed906 	br	44038 <_gp+0xfffe4e60>
   444d4:	2984b03a 	or	r2,r5,r6
   444d8:	10004226 	beq	r2,zero,445e4 <__subdf3+0x82c>
   444dc:	1808d0fa 	srli	r4,r3,3
   444e0:	8822d0fa 	srli	r17,r17,3
   444e4:	1806977a 	slli	r3,r3,29
   444e8:	2080022c 	andhi	r2,r4,8
   444ec:	1c62b03a 	or	r17,r3,r17
   444f0:	10000826 	beq	r2,zero,44514 <__subdf3+0x75c>
   444f4:	2812d0fa 	srli	r9,r5,3
   444f8:	4880022c 	andhi	r2,r9,8
   444fc:	1000051e 	bne	r2,zero,44514 <__subdf3+0x75c>
   44500:	300cd0fa 	srli	r6,r6,3
   44504:	2804977a 	slli	r2,r5,29
   44508:	4809883a 	mov	r4,r9
   4450c:	3825883a 	mov	r18,r7
   44510:	11a2b03a 	or	r17,r2,r6
   44514:	8806d77a 	srli	r3,r17,29
   44518:	200890fa 	slli	r4,r4,3
   4451c:	882290fa 	slli	r17,r17,3
   44520:	0401ffc4 	movi	r16,2047
   44524:	1906b03a 	or	r3,r3,r4
   44528:	003e4406 	br	43e3c <_gp+0xfffe4c64>
   4452c:	2984b03a 	or	r2,r5,r6
   44530:	103e4226 	beq	r2,zero,43e3c <_gp+0xfffe4c64>
   44534:	8989c83a 	sub	r4,r17,r6
   44538:	8911803a 	cmpltu	r8,r17,r4
   4453c:	1945c83a 	sub	r2,r3,r5
   44540:	1205c83a 	sub	r2,r2,r8
   44544:	1200202c 	andhi	r8,r2,128
   44548:	403e9a26 	beq	r8,zero,43fb4 <_gp+0xfffe4ddc>
   4454c:	3463c83a 	sub	r17,r6,r17
   44550:	28c5c83a 	sub	r2,r5,r3
   44554:	344d803a 	cmpltu	r6,r6,r17
   44558:	1187c83a 	sub	r3,r2,r6
   4455c:	3825883a 	mov	r18,r7
   44560:	003e3606 	br	43e3c <_gp+0xfffe4c64>
   44564:	0101ffc4 	movi	r4,2047
   44568:	493fc71e 	bne	r9,r4,44488 <_gp+0xfffe52b0>
   4456c:	2807883a 	mov	r3,r5
   44570:	3023883a 	mov	r17,r6
   44574:	4821883a 	mov	r16,r9
   44578:	003e3006 	br	43e3c <_gp+0xfffe4c64>
   4457c:	10003626 	beq	r2,zero,44658 <__subdf3+0x8a0>
   44580:	2984b03a 	or	r2,r5,r6
   44584:	10001726 	beq	r2,zero,445e4 <__subdf3+0x82c>
   44588:	1808d0fa 	srli	r4,r3,3
   4458c:	8822d0fa 	srli	r17,r17,3
   44590:	1806977a 	slli	r3,r3,29
   44594:	2080022c 	andhi	r2,r4,8
   44598:	1c62b03a 	or	r17,r3,r17
   4459c:	10000726 	beq	r2,zero,445bc <__subdf3+0x804>
   445a0:	2812d0fa 	srli	r9,r5,3
   445a4:	4880022c 	andhi	r2,r9,8
   445a8:	1000041e 	bne	r2,zero,445bc <__subdf3+0x804>
   445ac:	300cd0fa 	srli	r6,r6,3
   445b0:	2804977a 	slli	r2,r5,29
   445b4:	4809883a 	mov	r4,r9
   445b8:	11a2b03a 	or	r17,r2,r6
   445bc:	8806d77a 	srli	r3,r17,29
   445c0:	200890fa 	slli	r4,r4,3
   445c4:	882290fa 	slli	r17,r17,3
   445c8:	3825883a 	mov	r18,r7
   445cc:	1906b03a 	or	r3,r3,r4
   445d0:	0401ffc4 	movi	r16,2047
   445d4:	003e1906 	br	43e3c <_gp+0xfffe4c64>
   445d8:	000b883a 	mov	r5,zero
   445dc:	0005883a 	mov	r2,zero
   445e0:	003e2e06 	br	43e9c <_gp+0xfffe4cc4>
   445e4:	0401ffc4 	movi	r16,2047
   445e8:	003e1406 	br	43e3c <_gp+0xfffe4c64>
   445ec:	0005883a 	mov	r2,zero
   445f0:	003f7506 	br	443c8 <_gp+0xfffe51f0>
   445f4:	0005883a 	mov	r2,zero
   445f8:	0009883a 	mov	r4,zero
   445fc:	003e7806 	br	43fe0 <_gp+0xfffe4e08>
   44600:	123ff804 	addi	r8,r2,-32
   44604:	01000804 	movi	r4,32
   44608:	1a10d83a 	srl	r8,r3,r8
   4460c:	11002526 	beq	r2,r4,446a4 <__subdf3+0x8ec>
   44610:	01001004 	movi	r4,64
   44614:	2085c83a 	sub	r2,r4,r2
   44618:	1884983a 	sll	r2,r3,r2
   4461c:	1444b03a 	or	r2,r2,r17
   44620:	1004c03a 	cmpne	r2,r2,zero
   44624:	40a2b03a 	or	r17,r8,r2
   44628:	0005883a 	mov	r2,zero
   4462c:	003f1606 	br	44288 <_gp+0xfffe50b0>
   44630:	02000434 	movhi	r8,16
   44634:	0009883a 	mov	r4,zero
   44638:	423fffc4 	addi	r8,r8,-1
   4463c:	00bfffc4 	movi	r2,-1
   44640:	0401ffc4 	movi	r16,2047
   44644:	003e6606 	br	43fe0 <_gp+0xfffe4e08>
   44648:	1c62b03a 	or	r17,r3,r17
   4464c:	8822c03a 	cmpne	r17,r17,zero
   44650:	0005883a 	mov	r2,zero
   44654:	003f9906 	br	444bc <_gp+0xfffe52e4>
   44658:	2807883a 	mov	r3,r5
   4465c:	3023883a 	mov	r17,r6
   44660:	0401ffc4 	movi	r16,2047
   44664:	003df506 	br	43e3c <_gp+0xfffe4c64>
   44668:	2807883a 	mov	r3,r5
   4466c:	3023883a 	mov	r17,r6
   44670:	003df206 	br	43e3c <_gp+0xfffe4c64>
   44674:	123ff804 	addi	r8,r2,-32
   44678:	01000804 	movi	r4,32
   4467c:	1a10d83a 	srl	r8,r3,r8
   44680:	11000a26 	beq	r2,r4,446ac <__subdf3+0x8f4>
   44684:	01001004 	movi	r4,64
   44688:	2085c83a 	sub	r2,r4,r2
   4468c:	1884983a 	sll	r2,r3,r2
   44690:	1444b03a 	or	r2,r2,r17
   44694:	1004c03a 	cmpne	r2,r2,zero
   44698:	40a2b03a 	or	r17,r8,r2
   4469c:	0005883a 	mov	r2,zero
   446a0:	003f8606 	br	444bc <_gp+0xfffe52e4>
   446a4:	0005883a 	mov	r2,zero
   446a8:	003fdc06 	br	4461c <_gp+0xfffe5444>
   446ac:	0005883a 	mov	r2,zero
   446b0:	003ff706 	br	44690 <_gp+0xfffe54b8>

000446b4 <__fixdfsi>:
   446b4:	280cd53a 	srli	r6,r5,20
   446b8:	00c00434 	movhi	r3,16
   446bc:	18ffffc4 	addi	r3,r3,-1
   446c0:	3181ffcc 	andi	r6,r6,2047
   446c4:	01c0ff84 	movi	r7,1022
   446c8:	28c6703a 	and	r3,r5,r3
   446cc:	280ad7fa 	srli	r5,r5,31
   446d0:	3980120e 	bge	r7,r6,4471c <__fixdfsi+0x68>
   446d4:	00810744 	movi	r2,1053
   446d8:	11800c16 	blt	r2,r6,4470c <__fixdfsi+0x58>
   446dc:	00810cc4 	movi	r2,1075
   446e0:	1185c83a 	sub	r2,r2,r6
   446e4:	01c007c4 	movi	r7,31
   446e8:	18c00434 	orhi	r3,r3,16
   446ec:	38800d16 	blt	r7,r2,44724 <__fixdfsi+0x70>
   446f0:	31befb44 	addi	r6,r6,-1043
   446f4:	2084d83a 	srl	r2,r4,r2
   446f8:	1986983a 	sll	r3,r3,r6
   446fc:	1884b03a 	or	r2,r3,r2
   44700:	28000726 	beq	r5,zero,44720 <__fixdfsi+0x6c>
   44704:	0085c83a 	sub	r2,zero,r2
   44708:	f800283a 	ret
   4470c:	00a00034 	movhi	r2,32768
   44710:	10bfffc4 	addi	r2,r2,-1
   44714:	2885883a 	add	r2,r5,r2
   44718:	f800283a 	ret
   4471c:	0005883a 	mov	r2,zero
   44720:	f800283a 	ret
   44724:	008104c4 	movi	r2,1043
   44728:	1185c83a 	sub	r2,r2,r6
   4472c:	1884d83a 	srl	r2,r3,r2
   44730:	003ff306 	br	44700 <_gp+0xfffe5528>

00044734 <__floatsidf>:
   44734:	defffd04 	addi	sp,sp,-12
   44738:	dfc00215 	stw	ra,8(sp)
   4473c:	dc400115 	stw	r17,4(sp)
   44740:	dc000015 	stw	r16,0(sp)
   44744:	20002b26 	beq	r4,zero,447f4 <__floatsidf+0xc0>
   44748:	2023883a 	mov	r17,r4
   4474c:	2020d7fa 	srli	r16,r4,31
   44750:	20002d16 	blt	r4,zero,44808 <__floatsidf+0xd4>
   44754:	8809883a 	mov	r4,r17
   44758:	0044ac80 	call	44ac8 <__clzsi2>
   4475c:	01410784 	movi	r5,1054
   44760:	288bc83a 	sub	r5,r5,r2
   44764:	01010cc4 	movi	r4,1075
   44768:	2149c83a 	sub	r4,r4,r5
   4476c:	00c007c4 	movi	r3,31
   44770:	1900160e 	bge	r3,r4,447cc <__floatsidf+0x98>
   44774:	00c104c4 	movi	r3,1043
   44778:	1947c83a 	sub	r3,r3,r5
   4477c:	88c6983a 	sll	r3,r17,r3
   44780:	00800434 	movhi	r2,16
   44784:	10bfffc4 	addi	r2,r2,-1
   44788:	1886703a 	and	r3,r3,r2
   4478c:	2941ffcc 	andi	r5,r5,2047
   44790:	800d883a 	mov	r6,r16
   44794:	0005883a 	mov	r2,zero
   44798:	280a953a 	slli	r5,r5,20
   4479c:	31803fcc 	andi	r6,r6,255
   447a0:	01000434 	movhi	r4,16
   447a4:	300c97fa 	slli	r6,r6,31
   447a8:	213fffc4 	addi	r4,r4,-1
   447ac:	1906703a 	and	r3,r3,r4
   447b0:	1946b03a 	or	r3,r3,r5
   447b4:	1986b03a 	or	r3,r3,r6
   447b8:	dfc00217 	ldw	ra,8(sp)
   447bc:	dc400117 	ldw	r17,4(sp)
   447c0:	dc000017 	ldw	r16,0(sp)
   447c4:	dec00304 	addi	sp,sp,12
   447c8:	f800283a 	ret
   447cc:	00c002c4 	movi	r3,11
   447d0:	1887c83a 	sub	r3,r3,r2
   447d4:	88c6d83a 	srl	r3,r17,r3
   447d8:	8904983a 	sll	r2,r17,r4
   447dc:	01000434 	movhi	r4,16
   447e0:	213fffc4 	addi	r4,r4,-1
   447e4:	2941ffcc 	andi	r5,r5,2047
   447e8:	1906703a 	and	r3,r3,r4
   447ec:	800d883a 	mov	r6,r16
   447f0:	003fe906 	br	44798 <_gp+0xfffe55c0>
   447f4:	000d883a 	mov	r6,zero
   447f8:	000b883a 	mov	r5,zero
   447fc:	0007883a 	mov	r3,zero
   44800:	0005883a 	mov	r2,zero
   44804:	003fe406 	br	44798 <_gp+0xfffe55c0>
   44808:	0123c83a 	sub	r17,zero,r4
   4480c:	003fd106 	br	44754 <_gp+0xfffe557c>

00044810 <__extendsfdf2>:
   44810:	200ad5fa 	srli	r5,r4,23
   44814:	defffd04 	addi	sp,sp,-12
   44818:	dc400115 	stw	r17,4(sp)
   4481c:	29403fcc 	andi	r5,r5,255
   44820:	29800044 	addi	r6,r5,1
   44824:	04402034 	movhi	r17,128
   44828:	dc000015 	stw	r16,0(sp)
   4482c:	8c7fffc4 	addi	r17,r17,-1
   44830:	dfc00215 	stw	ra,8(sp)
   44834:	31803fcc 	andi	r6,r6,255
   44838:	00800044 	movi	r2,1
   4483c:	8922703a 	and	r17,r17,r4
   44840:	2020d7fa 	srli	r16,r4,31
   44844:	1180110e 	bge	r2,r6,4488c <__extendsfdf2+0x7c>
   44848:	880cd0fa 	srli	r6,r17,3
   4484c:	8822977a 	slli	r17,r17,29
   44850:	2940e004 	addi	r5,r5,896
   44854:	2941ffcc 	andi	r5,r5,2047
   44858:	2804953a 	slli	r2,r5,20
   4485c:	01400434 	movhi	r5,16
   44860:	800697fa 	slli	r3,r16,31
   44864:	297fffc4 	addi	r5,r5,-1
   44868:	314a703a 	and	r5,r6,r5
   4486c:	288ab03a 	or	r5,r5,r2
   44870:	28c6b03a 	or	r3,r5,r3
   44874:	8805883a 	mov	r2,r17
   44878:	dfc00217 	ldw	ra,8(sp)
   4487c:	dc400117 	ldw	r17,4(sp)
   44880:	dc000017 	ldw	r16,0(sp)
   44884:	dec00304 	addi	sp,sp,12
   44888:	f800283a 	ret
   4488c:	2800111e 	bne	r5,zero,448d4 <__extendsfdf2+0xc4>
   44890:	88001c26 	beq	r17,zero,44904 <__extendsfdf2+0xf4>
   44894:	8809883a 	mov	r4,r17
   44898:	0044ac80 	call	44ac8 <__clzsi2>
   4489c:	00c00284 	movi	r3,10
   448a0:	18801b16 	blt	r3,r2,44910 <__extendsfdf2+0x100>
   448a4:	018002c4 	movi	r6,11
   448a8:	308dc83a 	sub	r6,r6,r2
   448ac:	11000544 	addi	r4,r2,21
   448b0:	8986d83a 	srl	r3,r17,r6
   448b4:	8922983a 	sll	r17,r17,r4
   448b8:	0180e244 	movi	r6,905
   448bc:	01400434 	movhi	r5,16
   448c0:	3085c83a 	sub	r2,r6,r2
   448c4:	297fffc4 	addi	r5,r5,-1
   448c8:	194c703a 	and	r6,r3,r5
   448cc:	1141ffcc 	andi	r5,r2,2047
   448d0:	003fe006 	br	44854 <_gp+0xfffe567c>
   448d4:	88000826 	beq	r17,zero,448f8 <__extendsfdf2+0xe8>
   448d8:	880cd0fa 	srli	r6,r17,3
   448dc:	00800434 	movhi	r2,16
   448e0:	10bfffc4 	addi	r2,r2,-1
   448e4:	31800234 	orhi	r6,r6,8
   448e8:	8822977a 	slli	r17,r17,29
   448ec:	308c703a 	and	r6,r6,r2
   448f0:	0141ffc4 	movi	r5,2047
   448f4:	003fd706 	br	44854 <_gp+0xfffe567c>
   448f8:	0141ffc4 	movi	r5,2047
   448fc:	000d883a 	mov	r6,zero
   44900:	003fd406 	br	44854 <_gp+0xfffe567c>
   44904:	000b883a 	mov	r5,zero
   44908:	000d883a 	mov	r6,zero
   4490c:	003fd106 	br	44854 <_gp+0xfffe567c>
   44910:	11bffd44 	addi	r6,r2,-11
   44914:	8986983a 	sll	r3,r17,r6
   44918:	0023883a 	mov	r17,zero
   4491c:	003fe606 	br	448b8 <_gp+0xfffe56e0>

00044920 <__truncdfsf2>:
   44920:	2810d53a 	srli	r8,r5,20
   44924:	01c00434 	movhi	r7,16
   44928:	39ffffc4 	addi	r7,r7,-1
   4492c:	29ce703a 	and	r7,r5,r7
   44930:	4201ffcc 	andi	r8,r8,2047
   44934:	380e90fa 	slli	r7,r7,3
   44938:	200cd77a 	srli	r6,r4,29
   4493c:	42400044 	addi	r9,r8,1
   44940:	4a41ffcc 	andi	r9,r9,2047
   44944:	00c00044 	movi	r3,1
   44948:	280ad7fa 	srli	r5,r5,31
   4494c:	31ceb03a 	or	r7,r6,r7
   44950:	200490fa 	slli	r2,r4,3
   44954:	1a40230e 	bge	r3,r9,449e4 <__truncdfsf2+0xc4>
   44958:	40ff2004 	addi	r3,r8,-896
   4495c:	01803f84 	movi	r6,254
   44960:	30c01516 	blt	r6,r3,449b8 <__truncdfsf2+0x98>
   44964:	00c0380e 	bge	zero,r3,44a48 <__truncdfsf2+0x128>
   44968:	200c91ba 	slli	r6,r4,6
   4496c:	380e90fa 	slli	r7,r7,3
   44970:	1004d77a 	srli	r2,r2,29
   44974:	300cc03a 	cmpne	r6,r6,zero
   44978:	31ccb03a 	or	r6,r6,r7
   4497c:	308cb03a 	or	r6,r6,r2
   44980:	308001cc 	andi	r2,r6,7
   44984:	10000426 	beq	r2,zero,44998 <__truncdfsf2+0x78>
   44988:	308003cc 	andi	r2,r6,15
   4498c:	01000104 	movi	r4,4
   44990:	11000126 	beq	r2,r4,44998 <__truncdfsf2+0x78>
   44994:	31800104 	addi	r6,r6,4
   44998:	3081002c 	andhi	r2,r6,1024
   4499c:	10001626 	beq	r2,zero,449f8 <__truncdfsf2+0xd8>
   449a0:	18c00044 	addi	r3,r3,1
   449a4:	00803fc4 	movi	r2,255
   449a8:	18800326 	beq	r3,r2,449b8 <__truncdfsf2+0x98>
   449ac:	300c91ba 	slli	r6,r6,6
   449b0:	300cd27a 	srli	r6,r6,9
   449b4:	00000206 	br	449c0 <__truncdfsf2+0xa0>
   449b8:	00ffffc4 	movi	r3,-1
   449bc:	000d883a 	mov	r6,zero
   449c0:	18c03fcc 	andi	r3,r3,255
   449c4:	180895fa 	slli	r4,r3,23
   449c8:	00c02034 	movhi	r3,128
   449cc:	280a97fa 	slli	r5,r5,31
   449d0:	18ffffc4 	addi	r3,r3,-1
   449d4:	30c6703a 	and	r3,r6,r3
   449d8:	1906b03a 	or	r3,r3,r4
   449dc:	1944b03a 	or	r2,r3,r5
   449e0:	f800283a 	ret
   449e4:	40000b1e 	bne	r8,zero,44a14 <__truncdfsf2+0xf4>
   449e8:	388cb03a 	or	r6,r7,r2
   449ec:	0007883a 	mov	r3,zero
   449f0:	30000426 	beq	r6,zero,44a04 <__truncdfsf2+0xe4>
   449f4:	01800144 	movi	r6,5
   449f8:	00803fc4 	movi	r2,255
   449fc:	300cd0fa 	srli	r6,r6,3
   44a00:	18800a26 	beq	r3,r2,44a2c <__truncdfsf2+0x10c>
   44a04:	00802034 	movhi	r2,128
   44a08:	10bfffc4 	addi	r2,r2,-1
   44a0c:	308c703a 	and	r6,r6,r2
   44a10:	003feb06 	br	449c0 <_gp+0xfffe57e8>
   44a14:	3888b03a 	or	r4,r7,r2
   44a18:	203fe726 	beq	r4,zero,449b8 <_gp+0xfffe57e0>
   44a1c:	380c90fa 	slli	r6,r7,3
   44a20:	00c03fc4 	movi	r3,255
   44a24:	31808034 	orhi	r6,r6,512
   44a28:	003fd506 	br	44980 <_gp+0xfffe57a8>
   44a2c:	303fe226 	beq	r6,zero,449b8 <_gp+0xfffe57e0>
   44a30:	00802034 	movhi	r2,128
   44a34:	31801034 	orhi	r6,r6,64
   44a38:	10bfffc4 	addi	r2,r2,-1
   44a3c:	00ffffc4 	movi	r3,-1
   44a40:	308c703a 	and	r6,r6,r2
   44a44:	003fde06 	br	449c0 <_gp+0xfffe57e8>
   44a48:	013ffa44 	movi	r4,-23
   44a4c:	19000e16 	blt	r3,r4,44a88 <__truncdfsf2+0x168>
   44a50:	01000784 	movi	r4,30
   44a54:	20c9c83a 	sub	r4,r4,r3
   44a58:	018007c4 	movi	r6,31
   44a5c:	39c02034 	orhi	r7,r7,128
   44a60:	31000b16 	blt	r6,r4,44a90 <__truncdfsf2+0x170>
   44a64:	423f2084 	addi	r8,r8,-894
   44a68:	120c983a 	sll	r6,r2,r8
   44a6c:	3a0e983a 	sll	r7,r7,r8
   44a70:	1104d83a 	srl	r2,r2,r4
   44a74:	300cc03a 	cmpne	r6,r6,zero
   44a78:	31ceb03a 	or	r7,r6,r7
   44a7c:	388cb03a 	or	r6,r7,r2
   44a80:	0007883a 	mov	r3,zero
   44a84:	003fbe06 	br	44980 <_gp+0xfffe57a8>
   44a88:	0007883a 	mov	r3,zero
   44a8c:	003fd906 	br	449f4 <_gp+0xfffe581c>
   44a90:	01bfff84 	movi	r6,-2
   44a94:	30cdc83a 	sub	r6,r6,r3
   44a98:	00c00804 	movi	r3,32
   44a9c:	398cd83a 	srl	r6,r7,r6
   44aa0:	20c00726 	beq	r4,r3,44ac0 <__truncdfsf2+0x1a0>
   44aa4:	423f2884 	addi	r8,r8,-862
   44aa8:	3a0e983a 	sll	r7,r7,r8
   44aac:	3884b03a 	or	r2,r7,r2
   44ab0:	1004c03a 	cmpne	r2,r2,zero
   44ab4:	118cb03a 	or	r6,r2,r6
   44ab8:	0007883a 	mov	r3,zero
   44abc:	003fb006 	br	44980 <_gp+0xfffe57a8>
   44ac0:	000f883a 	mov	r7,zero
   44ac4:	003ff906 	br	44aac <_gp+0xfffe58d4>

00044ac8 <__clzsi2>:
   44ac8:	00bfffd4 	movui	r2,65535
   44acc:	11000536 	bltu	r2,r4,44ae4 <__clzsi2+0x1c>
   44ad0:	00803fc4 	movi	r2,255
   44ad4:	11000f36 	bltu	r2,r4,44b14 <__clzsi2+0x4c>
   44ad8:	00800804 	movi	r2,32
   44adc:	0007883a 	mov	r3,zero
   44ae0:	00000506 	br	44af8 <__clzsi2+0x30>
   44ae4:	00804034 	movhi	r2,256
   44ae8:	10bfffc4 	addi	r2,r2,-1
   44aec:	11000c2e 	bgeu	r2,r4,44b20 <__clzsi2+0x58>
   44af0:	00800204 	movi	r2,8
   44af4:	00c00604 	movi	r3,24
   44af8:	20c8d83a 	srl	r4,r4,r3
   44afc:	00c00174 	movhi	r3,5
   44b00:	18d37904 	addi	r3,r3,19940
   44b04:	1909883a 	add	r4,r3,r4
   44b08:	20c00003 	ldbu	r3,0(r4)
   44b0c:	10c5c83a 	sub	r2,r2,r3
   44b10:	f800283a 	ret
   44b14:	00800604 	movi	r2,24
   44b18:	00c00204 	movi	r3,8
   44b1c:	003ff606 	br	44af8 <_gp+0xfffe5920>
   44b20:	00800404 	movi	r2,16
   44b24:	1007883a 	mov	r3,r2
   44b28:	003ff306 	br	44af8 <_gp+0xfffe5920>

00044b2c <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
   44b2c:	defff804 	addi	sp,sp,-32
   44b30:	dfc00515 	stw	ra,20(sp)
   44b34:	df000415 	stw	fp,16(sp)
   44b38:	df000404 	addi	fp,sp,16
   44b3c:	e13ffe15 	stw	r4,-8(fp)
   44b40:	e17fff15 	stw	r5,-4(fp)
   44b44:	e1800215 	stw	r6,8(fp)
   44b48:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
   44b4c:	e0800204 	addi	r2,fp,8
   44b50:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
   44b54:	e0bffe17 	ldw	r2,-8(fp)
   44b58:	10800217 	ldw	r2,8(r2)
   44b5c:	e0fffd17 	ldw	r3,-12(fp)
   44b60:	180f883a 	mov	r7,r3
   44b64:	e1bfff17 	ldw	r6,-4(fp)
   44b68:	100b883a 	mov	r5,r2
   44b6c:	e13ffe17 	ldw	r4,-8(fp)
   44b70:	00450880 	call	45088 <___vfprintf_internal_r>
   44b74:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
   44b78:	e0bffc17 	ldw	r2,-16(fp)
}
   44b7c:	e037883a 	mov	sp,fp
   44b80:	dfc00117 	ldw	ra,4(sp)
   44b84:	df000017 	ldw	fp,0(sp)
   44b88:	dec00404 	addi	sp,sp,16
   44b8c:	f800283a 	ret

00044b90 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
   44b90:	defff704 	addi	sp,sp,-36
   44b94:	dfc00515 	stw	ra,20(sp)
   44b98:	df000415 	stw	fp,16(sp)
   44b9c:	df000404 	addi	fp,sp,16
   44ba0:	e13fff15 	stw	r4,-4(fp)
   44ba4:	e1400215 	stw	r5,8(fp)
   44ba8:	e1800315 	stw	r6,12(fp)
   44bac:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
   44bb0:	d0a00517 	ldw	r2,-32748(gp)
   44bb4:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
   44bb8:	e0800204 	addi	r2,fp,8
   44bbc:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
   44bc0:	d0a00517 	ldw	r2,-32748(gp)
   44bc4:	10800217 	ldw	r2,8(r2)
   44bc8:	e0fffe17 	ldw	r3,-8(fp)
   44bcc:	180d883a 	mov	r6,r3
   44bd0:	e17fff17 	ldw	r5,-4(fp)
   44bd4:	1009883a 	mov	r4,r2
   44bd8:	00450380 	call	45038 <__vfprintf_internal>
   44bdc:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
   44be0:	e0bffd17 	ldw	r2,-12(fp)
}
   44be4:	e037883a 	mov	sp,fp
   44be8:	dfc00117 	ldw	ra,4(sp)
   44bec:	df000017 	ldw	fp,0(sp)
   44bf0:	dec00504 	addi	sp,sp,20
   44bf4:	f800283a 	ret

00044bf8 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
   44bf8:	defff104 	addi	sp,sp,-60
   44bfc:	dfc00e15 	stw	ra,56(sp)
   44c00:	df000d15 	stw	fp,52(sp)
   44c04:	df000d04 	addi	fp,sp,52
   44c08:	e13ffe15 	stw	r4,-8(fp)
   44c0c:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
   44c10:	e13fff17 	ldw	r4,-4(fp)
   44c14:	0044e540 	call	44e54 <strlen>
   44c18:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
   44c1c:	e0bfff17 	ldw	r2,-4(fp)
   44c20:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
   44c24:	e0bff317 	ldw	r2,-52(fp)
   44c28:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
   44c2c:	00800174 	movhi	r2,5
   44c30:	1093b904 	addi	r2,r2,20196
   44c34:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
   44c38:	00800044 	movi	r2,1
   44c3c:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
   44c40:	e0bff317 	ldw	r2,-52(fp)
   44c44:	10800044 	addi	r2,r2,1
   44c48:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
   44c4c:	e0bffa04 	addi	r2,fp,-24
   44c50:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
   44c54:	00800084 	movi	r2,2
   44c58:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
   44c5c:	e0bffe17 	ldw	r2,-8(fp)
   44c60:	e0bff415 	stw	r2,-48(fp)
   44c64:	e0bff417 	ldw	r2,-48(fp)
   44c68:	10000526 	beq	r2,zero,44c80 <_puts_r+0x88>
   44c6c:	e0bff417 	ldw	r2,-48(fp)
   44c70:	10800e17 	ldw	r2,56(r2)
   44c74:	1000021e 	bne	r2,zero,44c80 <_puts_r+0x88>
   44c78:	e13ff417 	ldw	r4,-48(fp)
   44c7c:	0049d340 	call	49d34 <__sinit>
  fp = _stdout_r (ptr);
   44c80:	e0bffe17 	ldw	r2,-8(fp)
   44c84:	10800217 	ldw	r2,8(r2)
   44c88:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   44c8c:	e0bff517 	ldw	r2,-44(fp)
   44c90:	1080030b 	ldhu	r2,12(r2)
   44c94:	10bfffcc 	andi	r2,r2,65535
   44c98:	1088000c 	andi	r2,r2,8192
   44c9c:	10000c1e 	bne	r2,zero,44cd0 <_puts_r+0xd8>
   44ca0:	e0bff517 	ldw	r2,-44(fp)
   44ca4:	1080030b 	ldhu	r2,12(r2)
   44ca8:	10880014 	ori	r2,r2,8192
   44cac:	1007883a 	mov	r3,r2
   44cb0:	e0bff517 	ldw	r2,-44(fp)
   44cb4:	10c0030d 	sth	r3,12(r2)
   44cb8:	e0bff517 	ldw	r2,-44(fp)
   44cbc:	10c01917 	ldw	r3,100(r2)
   44cc0:	00b7ffc4 	movi	r2,-8193
   44cc4:	1886703a 	and	r3,r3,r2
   44cc8:	e0bff517 	ldw	r2,-44(fp)
   44ccc:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
   44cd0:	e0bff704 	addi	r2,fp,-36
   44cd4:	100d883a 	mov	r6,r2
   44cd8:	e17ff517 	ldw	r5,-44(fp)
   44cdc:	e13ffe17 	ldw	r4,-8(fp)
   44ce0:	004a6840 	call	4a684 <__sfvwrite_r>
   44ce4:	10000226 	beq	r2,zero,44cf0 <_puts_r+0xf8>
   44ce8:	00bfffc4 	movi	r2,-1
   44cec:	00000106 	br	44cf4 <_puts_r+0xfc>
   44cf0:	00800284 	movi	r2,10
   44cf4:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
   44cf8:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
   44cfc:	e037883a 	mov	sp,fp
   44d00:	dfc00117 	ldw	ra,4(sp)
   44d04:	df000017 	ldw	fp,0(sp)
   44d08:	dec00204 	addi	sp,sp,8
   44d0c:	f800283a 	ret

00044d10 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
   44d10:	defffd04 	addi	sp,sp,-12
   44d14:	dfc00215 	stw	ra,8(sp)
   44d18:	df000115 	stw	fp,4(sp)
   44d1c:	df000104 	addi	fp,sp,4
   44d20:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
   44d24:	d0a00517 	ldw	r2,-32748(gp)
   44d28:	e17fff17 	ldw	r5,-4(fp)
   44d2c:	1009883a 	mov	r4,r2
   44d30:	0044bf80 	call	44bf8 <_puts_r>
}
   44d34:	e037883a 	mov	sp,fp
   44d38:	dfc00117 	ldw	ra,4(sp)
   44d3c:	df000017 	ldw	fp,0(sp)
   44d40:	dec00204 	addi	sp,sp,8
   44d44:	f800283a 	ret

00044d48 <srand>:
					/* if compiled with -ansi switch.   */	/* AlteraSpecific */
#endif /* !WANT_SMALL_STDIO */							/* AlteraSpecific */

void
_DEFUN (srand, (seed), unsigned int seed)
{
   44d48:	defffd04 	addi	sp,sp,-12
   44d4c:	df000215 	stw	fp,8(sp)
   44d50:	df000204 	addi	fp,sp,8
   44d54:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
   44d58:	d1200517 	ldw	r4,-32748(gp)
   44d5c:	e13ffe15 	stw	r4,-8(fp)

  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) = seed;
   44d60:	e13fff17 	ldw	r4,-4(fp)
   44d64:	2005883a 	mov	r2,r4
   44d68:	0007883a 	mov	r3,zero
   44d6c:	e13ffe17 	ldw	r4,-8(fp)
   44d70:	20802915 	stw	r2,164(r4)
   44d74:	20c02a15 	stw	r3,168(r4)
}
   44d78:	0001883a 	nop
   44d7c:	e037883a 	mov	sp,fp
   44d80:	df000017 	ldw	fp,0(sp)
   44d84:	dec00104 	addi	sp,sp,4
   44d88:	f800283a 	ret

00044d8c <rand>:

int
_DEFUN_VOID (rand)
{
   44d8c:	defffb04 	addi	sp,sp,-20
   44d90:	dfc00415 	stw	ra,16(sp)
   44d94:	df000315 	stw	fp,12(sp)
   44d98:	dc400215 	stw	r17,8(sp)
   44d9c:	dc000115 	stw	r16,4(sp)
   44da0:	df000304 	addi	fp,sp,12
  struct _reent *reent = _REENT;
   44da4:	d0a00517 	ldw	r2,-32748(gp)
   44da8:	e0bffd15 	stw	r2,-12(fp)
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
   44dac:	e13ffd17 	ldw	r4,-12(fp)
   44db0:	20802917 	ldw	r2,164(r4)
   44db4:	20c02a17 	ldw	r3,168(r4)
   44db8:	01932574 	movhi	r6,19605
   44dbc:	319fcb44 	addi	r6,r6,32557
   44dc0:	01d614b4 	movhi	r7,22610
   44dc4:	39fd0b44 	addi	r7,r7,-3027
   44dc8:	1009883a 	mov	r4,r2
   44dcc:	180b883a 	mov	r5,r3
   44dd0:	00515940 	call	51594 <__muldi3>
   44dd4:	100d883a 	mov	r6,r2
   44dd8:	180f883a 	mov	r7,r3
   44ddc:	3009883a 	mov	r4,r6
   44de0:	380b883a 	mov	r5,r7
   44de4:	01800044 	movi	r6,1
   44de8:	000f883a 	mov	r7,zero
   44dec:	2185883a 	add	r2,r4,r6
   44df0:	1111803a 	cmpltu	r8,r2,r4
   44df4:	29c7883a 	add	r3,r5,r7
   44df8:	40c9883a 	add	r4,r8,r3
   44dfc:	2007883a 	mov	r3,r4
   44e00:	1009883a 	mov	r4,r2
   44e04:	180b883a 	mov	r5,r3

  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(reent);
  _REENT_RAND_NEXT(reent) =
   44e08:	e0bffd17 	ldw	r2,-12(fp)
   44e0c:	11002915 	stw	r4,164(r2)
   44e10:	11402a15 	stw	r5,168(r2)
     _REENT_RAND_NEXT(reent) * __extension__ 6364136223846793005LL + 1;
  return (int)((_REENT_RAND_NEXT(reent) >> 32) & RAND_MAX);
   44e14:	e13ffd17 	ldw	r4,-12(fp)
   44e18:	20802917 	ldw	r2,164(r4)
   44e1c:	20c02a17 	ldw	r3,168(r4)
   44e20:	1820d83a 	srl	r16,r3,zero
   44e24:	0023883a 	mov	r17,zero
   44e28:	8007883a 	mov	r3,r16
   44e2c:	00a00034 	movhi	r2,32768
   44e30:	10bfffc4 	addi	r2,r2,-1
   44e34:	1884703a 	and	r2,r3,r2
}
   44e38:	e6fffe04 	addi	sp,fp,-8
   44e3c:	dfc00317 	ldw	ra,12(sp)
   44e40:	df000217 	ldw	fp,8(sp)
   44e44:	dc400117 	ldw	r17,4(sp)
   44e48:	dc000017 	ldw	r16,0(sp)
   44e4c:	dec00404 	addi	sp,sp,16
   44e50:	f800283a 	ret

00044e54 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
   44e54:	defffc04 	addi	sp,sp,-16
   44e58:	df000315 	stw	fp,12(sp)
   44e5c:	df000304 	addi	fp,sp,12
   44e60:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
   44e64:	e0bfff17 	ldw	r2,-4(fp)
   44e68:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   44e6c:	00000d06 	br	44ea4 <strlen+0x50>
    {
      if (!*str)
   44e70:	e0bfff17 	ldw	r2,-4(fp)
   44e74:	10800003 	ldbu	r2,0(r2)
   44e78:	10803fcc 	andi	r2,r2,255
   44e7c:	1080201c 	xori	r2,r2,128
   44e80:	10bfe004 	addi	r2,r2,-128
   44e84:	1000041e 	bne	r2,zero,44e98 <strlen+0x44>
	return str - start;
   44e88:	e0ffff17 	ldw	r3,-4(fp)
   44e8c:	e0bffe17 	ldw	r2,-8(fp)
   44e90:	1885c83a 	sub	r2,r3,r2
   44e94:	00002806 	br	44f38 <strlen+0xe4>
      str++;
   44e98:	e0bfff17 	ldw	r2,-4(fp)
   44e9c:	10800044 	addi	r2,r2,1
   44ea0:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   44ea4:	e0bfff17 	ldw	r2,-4(fp)
   44ea8:	108000cc 	andi	r2,r2,3
   44eac:	103ff01e 	bne	r2,zero,44e70 <_gp+0xfffe5c98>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
   44eb0:	e0bfff17 	ldw	r2,-4(fp)
   44eb4:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
   44eb8:	00000306 	br	44ec8 <strlen+0x74>
    aligned_addr++;
   44ebc:	e0bffd17 	ldw	r2,-12(fp)
   44ec0:	10800104 	addi	r2,r2,4
   44ec4:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
   44ec8:	e0bffd17 	ldw	r2,-12(fp)
   44ecc:	10c00017 	ldw	r3,0(r2)
   44ed0:	00bfbff4 	movhi	r2,65279
   44ed4:	10bfbfc4 	addi	r2,r2,-257
   44ed8:	1887883a 	add	r3,r3,r2
   44edc:	e0bffd17 	ldw	r2,-12(fp)
   44ee0:	10800017 	ldw	r2,0(r2)
   44ee4:	0084303a 	nor	r2,zero,r2
   44ee8:	1886703a 	and	r3,r3,r2
   44eec:	00a02074 	movhi	r2,32897
   44ef0:	10a02004 	addi	r2,r2,-32640
   44ef4:	1884703a 	and	r2,r3,r2
   44ef8:	103ff026 	beq	r2,zero,44ebc <_gp+0xfffe5ce4>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
   44efc:	e0bffd17 	ldw	r2,-12(fp)
   44f00:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   44f04:	00000306 	br	44f14 <strlen+0xc0>
    str++;
   44f08:	e0bfff17 	ldw	r2,-4(fp)
   44f0c:	10800044 	addi	r2,r2,1
   44f10:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   44f14:	e0bfff17 	ldw	r2,-4(fp)
   44f18:	10800003 	ldbu	r2,0(r2)
   44f1c:	10803fcc 	andi	r2,r2,255
   44f20:	1080201c 	xori	r2,r2,128
   44f24:	10bfe004 	addi	r2,r2,-128
   44f28:	103ff71e 	bne	r2,zero,44f08 <_gp+0xfffe5d30>
    str++;
  return str - start;
   44f2c:	e0ffff17 	ldw	r3,-4(fp)
   44f30:	e0bffe17 	ldw	r2,-8(fp)
   44f34:	1885c83a 	sub	r2,r3,r2
}
   44f38:	e037883a 	mov	sp,fp
   44f3c:	df000017 	ldw	fp,0(sp)
   44f40:	dec00104 	addi	sp,sp,4
   44f44:	f800283a 	ret

00044f48 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   44f48:	defedf04 	addi	sp,sp,-1156
   44f4c:	dfc12015 	stw	ra,1152(sp)
   44f50:	df011f15 	stw	fp,1148(sp)
   44f54:	dc011e15 	stw	r16,1144(sp)
   44f58:	df011f04 	addi	fp,sp,1148
   44f5c:	e13ffc15 	stw	r4,-16(fp)
   44f60:	2821883a 	mov	r16,r5
   44f64:	e1bffd15 	stw	r6,-12(fp)
   44f68:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   44f6c:	80c0030b 	ldhu	r3,12(r16)
   44f70:	00bfff44 	movi	r2,-3
   44f74:	1884703a 	and	r2,r3,r2
   44f78:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   44f7c:	80801917 	ldw	r2,100(r16)
   44f80:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   44f84:	8080038b 	ldhu	r2,14(r16)
   44f88:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   44f8c:	80800717 	ldw	r2,28(r16)
   44f90:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   44f94:	80800917 	ldw	r2,36(r16)
   44f98:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   44f9c:	e0befc04 	addi	r2,fp,-1040
   44fa0:	e0bee215 	stw	r2,-1144(fp)
   44fa4:	e0bee217 	ldw	r2,-1144(fp)
   44fa8:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   44fac:	00810004 	movi	r2,1024
   44fb0:	e0bee415 	stw	r2,-1136(fp)
   44fb4:	e0bee417 	ldw	r2,-1136(fp)
   44fb8:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   44fbc:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   44fc0:	e0bee204 	addi	r2,fp,-1144
   44fc4:	e1fffe17 	ldw	r7,-8(fp)
   44fc8:	e1bffd17 	ldw	r6,-12(fp)
   44fcc:	100b883a 	mov	r5,r2
   44fd0:	e13ffc17 	ldw	r4,-16(fp)
   44fd4:	00450880 	call	45088 <___vfprintf_internal_r>
   44fd8:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   44fdc:	e0bee117 	ldw	r2,-1148(fp)
   44fe0:	10000716 	blt	r2,zero,45000 <__sbprintf+0xb8>
   44fe4:	e0bee204 	addi	r2,fp,-1144
   44fe8:	100b883a 	mov	r5,r2
   44fec:	e13ffc17 	ldw	r4,-16(fp)
   44ff0:	004989c0 	call	4989c <_fflush_r>
   44ff4:	10000226 	beq	r2,zero,45000 <__sbprintf+0xb8>
		ret = EOF;
   44ff8:	00bfffc4 	movi	r2,-1
   44ffc:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   45000:	e0bee50b 	ldhu	r2,-1132(fp)
   45004:	10bfffcc 	andi	r2,r2,65535
   45008:	1080100c 	andi	r2,r2,64
   4500c:	10000326 	beq	r2,zero,4501c <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   45010:	8080030b 	ldhu	r2,12(r16)
   45014:	10801014 	ori	r2,r2,64
   45018:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   4501c:	e0bee117 	ldw	r2,-1148(fp)
}
   45020:	e6ffff04 	addi	sp,fp,-4
   45024:	dfc00217 	ldw	ra,8(sp)
   45028:	df000117 	ldw	fp,4(sp)
   4502c:	dc000017 	ldw	r16,0(sp)
   45030:	dec00304 	addi	sp,sp,12
   45034:	f800283a 	ret

00045038 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   45038:	defffa04 	addi	sp,sp,-24
   4503c:	dfc00515 	stw	ra,20(sp)
   45040:	df000415 	stw	fp,16(sp)
   45044:	df000404 	addi	fp,sp,16
   45048:	e13ffd15 	stw	r4,-12(fp)
   4504c:	e17ffe15 	stw	r5,-8(fp)
   45050:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   45054:	d0a00517 	ldw	r2,-32748(gp)
   45058:	e1ffff17 	ldw	r7,-4(fp)
   4505c:	e1bffe17 	ldw	r6,-8(fp)
   45060:	e17ffd17 	ldw	r5,-12(fp)
   45064:	1009883a 	mov	r4,r2
   45068:	00450880 	call	45088 <___vfprintf_internal_r>
   4506c:	e0bffc15 	stw	r2,-16(fp)
  return result;
   45070:	e0bffc17 	ldw	r2,-16(fp)
}
   45074:	e037883a 	mov	sp,fp
   45078:	dfc00117 	ldw	ra,4(sp)
   4507c:	df000017 	ldw	fp,0(sp)
   45080:	dec00204 	addi	sp,sp,8
   45084:	f800283a 	ret

00045088 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   45088:	deffa404 	addi	sp,sp,-368
   4508c:	dfc05b15 	stw	ra,364(sp)
   45090:	df005a15 	stw	fp,360(sp)
   45094:	ddc05915 	stw	r23,356(sp)
   45098:	dd805815 	stw	r22,352(sp)
   4509c:	dd405715 	stw	r21,348(sp)
   450a0:	dd005615 	stw	r20,344(sp)
   450a4:	dcc05515 	stw	r19,340(sp)
   450a8:	dc805415 	stw	r18,336(sp)
   450ac:	dc405315 	stw	r17,332(sp)
   450b0:	dc005215 	stw	r16,328(sp)
   450b4:	df005a04 	addi	fp,sp,360
   450b8:	e13fe615 	stw	r4,-104(fp)
   450bc:	e17fe715 	stw	r5,-100(fp)
   450c0:	e1bfe815 	stw	r6,-96(fp)
   450c4:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
   450c8:	e13fe617 	ldw	r4,-104(fp)
   450cc:	004af2c0 	call	4af2c <_localeconv_r>
   450d0:	10800017 	ldw	r2,0(r2)
   450d4:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
   450d8:	e13fbb17 	ldw	r4,-276(fp)
   450dc:	0044e540 	call	44e54 <strlen>
   450e0:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
   450e4:	e03fc215 	stw	zero,-248(fp)
   450e8:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
   450ec:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
   450f0:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   450f4:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   450f8:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   450fc:	e0bfe617 	ldw	r2,-104(fp)
   45100:	e0bfbd15 	stw	r2,-268(fp)
   45104:	e0bfbd17 	ldw	r2,-268(fp)
   45108:	10000526 	beq	r2,zero,45120 <___vfprintf_internal_r+0x98>
   4510c:	e0bfbd17 	ldw	r2,-268(fp)
   45110:	10800e17 	ldw	r2,56(r2)
   45114:	1000021e 	bne	r2,zero,45120 <___vfprintf_internal_r+0x98>
   45118:	e13fbd17 	ldw	r4,-268(fp)
   4511c:	0049d340 	call	49d34 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   45120:	e0bfe717 	ldw	r2,-100(fp)
   45124:	1080030b 	ldhu	r2,12(r2)
   45128:	10bfffcc 	andi	r2,r2,65535
   4512c:	1088000c 	andi	r2,r2,8192
   45130:	10000c1e 	bne	r2,zero,45164 <___vfprintf_internal_r+0xdc>
   45134:	e0bfe717 	ldw	r2,-100(fp)
   45138:	1080030b 	ldhu	r2,12(r2)
   4513c:	10880014 	ori	r2,r2,8192
   45140:	1007883a 	mov	r3,r2
   45144:	e0bfe717 	ldw	r2,-100(fp)
   45148:	10c0030d 	sth	r3,12(r2)
   4514c:	e0bfe717 	ldw	r2,-100(fp)
   45150:	10c01917 	ldw	r3,100(r2)
   45154:	00b7ffc4 	movi	r2,-8193
   45158:	1886703a 	and	r3,r3,r2
   4515c:	e0bfe717 	ldw	r2,-100(fp)
   45160:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   45164:	e0bfe717 	ldw	r2,-100(fp)
   45168:	1080030b 	ldhu	r2,12(r2)
   4516c:	10bfffcc 	andi	r2,r2,65535
   45170:	1080020c 	andi	r2,r2,8
   45174:	10000326 	beq	r2,zero,45184 <___vfprintf_internal_r+0xfc>
   45178:	e0bfe717 	ldw	r2,-100(fp)
   4517c:	10800417 	ldw	r2,16(r2)
   45180:	1000061e 	bne	r2,zero,4519c <___vfprintf_internal_r+0x114>
   45184:	e17fe717 	ldw	r5,-100(fp)
   45188:	e13fe617 	ldw	r4,-104(fp)
   4518c:	00474bc0 	call	474bc <__swsetup_r>
   45190:	10000226 	beq	r2,zero,4519c <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
   45194:	00bfffc4 	movi	r2,-1
   45198:	0007e806 	br	4713c <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   4519c:	e0bfe717 	ldw	r2,-100(fp)
   451a0:	1080030b 	ldhu	r2,12(r2)
   451a4:	10bfffcc 	andi	r2,r2,65535
   451a8:	1080068c 	andi	r2,r2,26
   451ac:	10800298 	cmpnei	r2,r2,10
   451b0:	10000c1e 	bne	r2,zero,451e4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
   451b4:	e0bfe717 	ldw	r2,-100(fp)
   451b8:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   451bc:	10bfffcc 	andi	r2,r2,65535
   451c0:	10a0001c 	xori	r2,r2,32768
   451c4:	10a00004 	addi	r2,r2,-32768
   451c8:	10000616 	blt	r2,zero,451e4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   451cc:	e1ffe917 	ldw	r7,-92(fp)
   451d0:	e1bfe817 	ldw	r6,-96(fp)
   451d4:	e17fe717 	ldw	r5,-100(fp)
   451d8:	e13fe617 	ldw	r4,-104(fp)
   451dc:	0044f480 	call	44f48 <__sbprintf>
   451e0:	0007d606 	br	4713c <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   451e4:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   451e8:	e47fcb04 	addi	r17,fp,-212
   451ec:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
   451f0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   451f4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   451f8:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   451fc:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   45200:	00000106 	br	45208 <___vfprintf_internal_r+0x180>
                    fmt += 1;
   45204:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   45208:	a8800003 	ldbu	r2,0(r21)
   4520c:	10803fcc 	andi	r2,r2,255
   45210:	1080201c 	xori	r2,r2,128
   45214:	10bfe004 	addi	r2,r2,-128
   45218:	10000626 	beq	r2,zero,45234 <___vfprintf_internal_r+0x1ac>
   4521c:	a8800003 	ldbu	r2,0(r21)
   45220:	10803fcc 	andi	r2,r2,255
   45224:	1080201c 	xori	r2,r2,128
   45228:	10bfe004 	addi	r2,r2,-128
   4522c:	10800958 	cmpnei	r2,r2,37
   45230:	103ff41e 	bne	r2,zero,45204 <_gp+0xfffe602c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   45234:	a807883a 	mov	r3,r21
   45238:	9005883a 	mov	r2,r18
   4523c:	18a1c83a 	sub	r16,r3,r2
   45240:	80001826 	beq	r16,zero,452a4 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
   45244:	8c800015 	stw	r18,0(r17)
   45248:	8005883a 	mov	r2,r16
   4524c:	88800115 	stw	r2,4(r17)
   45250:	e0bfca17 	ldw	r2,-216(fp)
   45254:	8007883a 	mov	r3,r16
   45258:	10c5883a 	add	r2,r2,r3
   4525c:	e0bfca15 	stw	r2,-216(fp)
   45260:	8c400204 	addi	r17,r17,8
   45264:	e0bfc917 	ldw	r2,-220(fp)
   45268:	10800044 	addi	r2,r2,1
   4526c:	e0bfc915 	stw	r2,-220(fp)
   45270:	e0bfc917 	ldw	r2,-220(fp)
   45274:	10800210 	cmplti	r2,r2,8
   45278:	1000071e 	bne	r2,zero,45298 <___vfprintf_internal_r+0x210>
   4527c:	e0bfc804 	addi	r2,fp,-224
   45280:	100d883a 	mov	r6,r2
   45284:	e17fe717 	ldw	r5,-100(fp)
   45288:	e13fe617 	ldw	r4,-104(fp)
   4528c:	004f3e80 	call	4f3e8 <__sprint_r>
   45290:	1007531e 	bne	r2,zero,46fe0 <___vfprintf_internal_r+0x1f58>
   45294:	e47fcb04 	addi	r17,fp,-212
			ret += m;
   45298:	e0bfac17 	ldw	r2,-336(fp)
   4529c:	1405883a 	add	r2,r2,r16
   452a0:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   452a4:	a8800003 	ldbu	r2,0(r21)
   452a8:	10803fcc 	andi	r2,r2,255
   452ac:	1080201c 	xori	r2,r2,128
   452b0:	10bfe004 	addi	r2,r2,-128
   452b4:	10073c26 	beq	r2,zero,46fa8 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
   452b8:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
   452bc:	ad400044 	addi	r21,r21,1

		flags = 0;
   452c0:	0027883a 	mov	r19,zero
		dprec = 0;
   452c4:	e03fb415 	stw	zero,-304(fp)
		width = 0;
   452c8:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
   452cc:	00bfffc4 	movi	r2,-1
   452d0:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
   452d4:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
   452d8:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   452dc:	a805883a 	mov	r2,r21
   452e0:	15400044 	addi	r21,r2,1
   452e4:	10800003 	ldbu	r2,0(r2)
   452e8:	15003fcc 	andi	r20,r2,255
   452ec:	a500201c 	xori	r20,r20,128
   452f0:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
   452f4:	a0bff804 	addi	r2,r20,-32
   452f8:	10c01668 	cmpgeui	r3,r2,89
   452fc:	18034f1e 	bne	r3,zero,4603c <___vfprintf_internal_r+0xfb4>
   45300:	100690ba 	slli	r3,r2,2
   45304:	00800134 	movhi	r2,4
   45308:	1094c604 	addi	r2,r2,21272
   4530c:	1885883a 	add	r2,r3,r2
   45310:	10800017 	ldw	r2,0(r2)
   45314:	1000683a 	jmp	r2
   45318:	0004547c 	xorhi	zero,zero,4433
   4531c:	0004603c 	xorhi	zero,zero,4480
   45320:	0004603c 	xorhi	zero,zero,4480
   45324:	0004549c 	xori	zero,zero,4434
   45328:	0004603c 	xorhi	zero,zero,4480
   4532c:	0004603c 	xorhi	zero,zero,4480
   45330:	0004603c 	xorhi	zero,zero,4480
   45334:	0004603c 	xorhi	zero,zero,4480
   45338:	0004603c 	xorhi	zero,zero,4480
   4533c:	0004603c 	xorhi	zero,zero,4480
   45340:	000454a4 	muli	zero,zero,4434
   45344:	000454d8 	cmpnei	zero,zero,4435
   45348:	0004603c 	xorhi	zero,zero,4480
   4534c:	000454d0 	cmplti	zero,zero,4435
   45350:	000454e4 	muli	zero,zero,4435
   45354:	0004603c 	xorhi	zero,zero,4480
   45358:	00045584 	movi	zero,4438
   4535c:	0004558c 	andi	zero,zero,4438
   45360:	0004558c 	andi	zero,zero,4438
   45364:	0004558c 	andi	zero,zero,4438
   45368:	0004558c 	andi	zero,zero,4438
   4536c:	0004558c 	andi	zero,zero,4438
   45370:	0004558c 	andi	zero,zero,4438
   45374:	0004558c 	andi	zero,zero,4438
   45378:	0004558c 	andi	zero,zero,4438
   4537c:	0004558c 	andi	zero,zero,4438
   45380:	0004603c 	xorhi	zero,zero,4480
   45384:	0004603c 	xorhi	zero,zero,4480
   45388:	0004603c 	xorhi	zero,zero,4480
   4538c:	0004603c 	xorhi	zero,zero,4480
   45390:	0004603c 	xorhi	zero,zero,4480
   45394:	0004603c 	xorhi	zero,zero,4480
   45398:	0004603c 	xorhi	zero,zero,4480
   4539c:	0004603c 	xorhi	zero,zero,4480
   453a0:	0004603c 	xorhi	zero,zero,4480
   453a4:	0004603c 	xorhi	zero,zero,4480
   453a8:	00045640 	call	4564 <__alt_mem_MemoriaDados+0x4564>
   453ac:	00045740 	call	4574 <__alt_mem_MemoriaDados+0x4574>
   453b0:	0004603c 	xorhi	zero,zero,4480
   453b4:	00045740 	call	4574 <__alt_mem_MemoriaDados+0x4574>
   453b8:	0004603c 	xorhi	zero,zero,4480
   453bc:	0004603c 	xorhi	zero,zero,4480
   453c0:	0004603c 	xorhi	zero,zero,4480
   453c4:	0004603c 	xorhi	zero,zero,4480
   453c8:	000455d4 	movui	zero,4439
   453cc:	0004603c 	xorhi	zero,zero,4480
   453d0:	0004603c 	xorhi	zero,zero,4480
   453d4:	00045adc 	xori	zero,zero,4459
   453d8:	0004603c 	xorhi	zero,zero,4480
   453dc:	0004603c 	xorhi	zero,zero,4480
   453e0:	0004603c 	xorhi	zero,zero,4480
   453e4:	0004603c 	xorhi	zero,zero,4480
   453e8:	0004603c 	xorhi	zero,zero,4480
   453ec:	00045c58 	cmpnei	zero,zero,4465
   453f0:	0004603c 	xorhi	zero,zero,4480
   453f4:	0004603c 	xorhi	zero,zero,4480
   453f8:	00045d18 	cmpnei	zero,zero,4468
   453fc:	0004603c 	xorhi	zero,zero,4480
   45400:	0004603c 	xorhi	zero,zero,4480
   45404:	0004603c 	xorhi	zero,zero,4480
   45408:	0004603c 	xorhi	zero,zero,4480
   4540c:	0004603c 	xorhi	zero,zero,4480
   45410:	0004603c 	xorhi	zero,zero,4480
   45414:	0004603c 	xorhi	zero,zero,4480
   45418:	0004603c 	xorhi	zero,zero,4480
   4541c:	0004603c 	xorhi	zero,zero,4480
   45420:	0004603c 	xorhi	zero,zero,4480
   45424:	00045618 	cmpnei	zero,zero,4440
   45428:	00045644 	movi	zero,4441
   4542c:	00045740 	call	4574 <__alt_mem_MemoriaDados+0x4574>
   45430:	00045740 	call	4574 <__alt_mem_MemoriaDados+0x4574>
   45434:	00045740 	call	4574 <__alt_mem_MemoriaDados+0x4574>
   45438:	000455dc 	xori	zero,zero,4439
   4543c:	00045644 	movi	zero,4441
   45440:	0004603c 	xorhi	zero,zero,4480
   45444:	0004603c 	xorhi	zero,zero,4480
   45448:	000455e4 	muli	zero,zero,4439
   4544c:	0004603c 	xorhi	zero,zero,4480
   45450:	00045a3c 	xorhi	zero,zero,4456
   45454:	00045ae0 	cmpeqi	zero,zero,4459
   45458:	00045b80 	call	45b8 <__alt_mem_MemoriaDados+0x45b8>
   4545c:	00045610 	cmplti	zero,zero,4440
   45460:	0004603c 	xorhi	zero,zero,4480
   45464:	00045bc8 	cmpgei	zero,zero,4463
   45468:	0004603c 	xorhi	zero,zero,4480
   4546c:	00045c5c 	xori	zero,zero,4465
   45470:	0004603c 	xorhi	zero,zero,4480
   45474:	0004603c 	xorhi	zero,zero,4480
   45478:	00045d28 	cmpgeui	zero,zero,4468
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   4547c:	e0bfc103 	ldbu	r2,-252(fp)
   45480:	10803fcc 	andi	r2,r2,255
   45484:	1080201c 	xori	r2,r2,128
   45488:	10bfe004 	addi	r2,r2,-128
   4548c:	103f931e 	bne	r2,zero,452dc <_gp+0xfffe6104>
				sign = ' ';
   45490:	00800804 	movi	r2,32
   45494:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   45498:	003f9006 	br	452dc <_gp+0xfffe6104>
		case '#':
			flags |= ALT;
   4549c:	9cc00054 	ori	r19,r19,1
			goto rflag;
   454a0:	003f8e06 	br	452dc <_gp+0xfffe6104>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   454a4:	e0bfe917 	ldw	r2,-92(fp)
   454a8:	10c00104 	addi	r3,r2,4
   454ac:	e0ffe915 	stw	r3,-92(fp)
   454b0:	10800017 	ldw	r2,0(r2)
   454b4:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   454b8:	e0bfad17 	ldw	r2,-332(fp)
   454bc:	10000116 	blt	r2,zero,454c4 <___vfprintf_internal_r+0x43c>
				goto rflag;
   454c0:	003f8606 	br	452dc <_gp+0xfffe6104>
			width = -width;
   454c4:	e0bfad17 	ldw	r2,-332(fp)
   454c8:	0085c83a 	sub	r2,zero,r2
   454cc:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   454d0:	9cc00114 	ori	r19,r19,4
			goto rflag;
   454d4:	003f8106 	br	452dc <_gp+0xfffe6104>
		case '+':
			sign = '+';
   454d8:	00800ac4 	movi	r2,43
   454dc:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   454e0:	003f7e06 	br	452dc <_gp+0xfffe6104>
		case '.':
			if ((ch = *fmt++) == '*') {
   454e4:	a805883a 	mov	r2,r21
   454e8:	15400044 	addi	r21,r2,1
   454ec:	10800003 	ldbu	r2,0(r2)
   454f0:	15003fcc 	andi	r20,r2,255
   454f4:	a500201c 	xori	r20,r20,128
   454f8:	a53fe004 	addi	r20,r20,-128
   454fc:	a0800a98 	cmpnei	r2,r20,42
   45500:	10000a1e 	bne	r2,zero,4552c <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   45504:	e0bfe917 	ldw	r2,-92(fp)
   45508:	10c00104 	addi	r3,r2,4
   4550c:	e0ffe915 	stw	r3,-92(fp)
   45510:	10800017 	ldw	r2,0(r2)
   45514:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   45518:	e0bfae17 	ldw	r2,-328(fp)
   4551c:	103f6f0e 	bge	r2,zero,452dc <_gp+0xfffe6104>
					prec = -1;
   45520:	00bfffc4 	movi	r2,-1
   45524:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
   45528:	003f6c06 	br	452dc <_gp+0xfffe6104>
			}
			n = 0;
   4552c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   45530:	00000c06 	br	45564 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
   45534:	01400284 	movi	r5,10
   45538:	8009883a 	mov	r4,r16
   4553c:	00421cc0 	call	421cc <__mulsi3>
   45540:	1007883a 	mov	r3,r2
   45544:	a0bff404 	addi	r2,r20,-48
   45548:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   4554c:	a805883a 	mov	r2,r21
   45550:	15400044 	addi	r21,r2,1
   45554:	10800003 	ldbu	r2,0(r2)
   45558:	15003fcc 	andi	r20,r2,255
   4555c:	a500201c 	xori	r20,r20,128
   45560:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   45564:	a0bff404 	addi	r2,r20,-48
   45568:	108002b0 	cmpltui	r2,r2,10
   4556c:	103ff11e 	bne	r2,zero,45534 <_gp+0xfffe635c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   45570:	8005883a 	mov	r2,r16
   45574:	1000010e 	bge	r2,zero,4557c <___vfprintf_internal_r+0x4f4>
   45578:	00bfffc4 	movi	r2,-1
   4557c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
   45580:	003f5c06 	br	452f4 <_gp+0xfffe611c>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   45584:	9cc02014 	ori	r19,r19,128
			goto rflag;
   45588:	003f5406 	br	452dc <_gp+0xfffe6104>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   4558c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   45590:	01400284 	movi	r5,10
   45594:	8009883a 	mov	r4,r16
   45598:	00421cc0 	call	421cc <__mulsi3>
   4559c:	1007883a 	mov	r3,r2
   455a0:	a0bff404 	addi	r2,r20,-48
   455a4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   455a8:	a805883a 	mov	r2,r21
   455ac:	15400044 	addi	r21,r2,1
   455b0:	10800003 	ldbu	r2,0(r2)
   455b4:	15003fcc 	andi	r20,r2,255
   455b8:	a500201c 	xori	r20,r20,128
   455bc:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
   455c0:	a0bff404 	addi	r2,r20,-48
   455c4:	108002b0 	cmpltui	r2,r2,10
   455c8:	103ff11e 	bne	r2,zero,45590 <_gp+0xfffe63b8>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   455cc:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
   455d0:	003f4806 	br	452f4 <_gp+0xfffe611c>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   455d4:	9cc00214 	ori	r19,r19,8
			goto rflag;
   455d8:	003f4006 	br	452dc <_gp+0xfffe6104>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   455dc:	9cc01014 	ori	r19,r19,64
			goto rflag;
   455e0:	003f3e06 	br	452dc <_gp+0xfffe6104>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   455e4:	a8800003 	ldbu	r2,0(r21)
   455e8:	10803fcc 	andi	r2,r2,255
   455ec:	1080201c 	xori	r2,r2,128
   455f0:	10bfe004 	addi	r2,r2,-128
   455f4:	10801b18 	cmpnei	r2,r2,108
   455f8:	1000031e 	bne	r2,zero,45608 <___vfprintf_internal_r+0x580>
				fmt++;
   455fc:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   45600:	9cc00814 	ori	r19,r19,32
   45604:	003f3506 	br	452dc <_gp+0xfffe6104>
			} else
#endif
				flags |= LONGINT;
   45608:	9cc00414 	ori	r19,r19,16
			goto rflag;
   4560c:	003f3306 	br	452dc <_gp+0xfffe6104>
		case 'q': /* extension */
			flags |= QUADINT;
   45610:	9cc00814 	ori	r19,r19,32
			goto rflag;
   45614:	003f3106 	br	452dc <_gp+0xfffe6104>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   45618:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   4561c:	e0bfe917 	ldw	r2,-92(fp)
   45620:	10c00104 	addi	r3,r2,4
   45624:	e0ffe915 	stw	r3,-92(fp)
   45628:	10800017 	ldw	r2,0(r2)
   4562c:	90800005 	stb	r2,0(r18)
				size = 1;
   45630:	00800044 	movi	r2,1
   45634:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
   45638:	e03fc105 	stb	zero,-252(fp)
			break;
   4563c:	00028806 	br	46060 <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
   45640:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   45644:	9880080c 	andi	r2,r19,32
   45648:	10000826 	beq	r2,zero,4566c <___vfprintf_internal_r+0x5e4>
   4564c:	e13fe917 	ldw	r4,-92(fp)
   45650:	20800204 	addi	r2,r4,8
   45654:	e0bfe915 	stw	r2,-92(fp)
   45658:	20800017 	ldw	r2,0(r4)
   4565c:	20c00117 	ldw	r3,4(r4)
   45660:	e0bfea15 	stw	r2,-88(fp)
   45664:	e0ffeb15 	stw	r3,-84(fp)
   45668:	00001e06 	br	456e4 <___vfprintf_internal_r+0x65c>
   4566c:	9880040c 	andi	r2,r19,16
   45670:	10000826 	beq	r2,zero,45694 <___vfprintf_internal_r+0x60c>
   45674:	e0bfe917 	ldw	r2,-92(fp)
   45678:	10c00104 	addi	r3,r2,4
   4567c:	e0ffe915 	stw	r3,-92(fp)
   45680:	10800017 	ldw	r2,0(r2)
   45684:	e0bfea15 	stw	r2,-88(fp)
   45688:	1005d7fa 	srai	r2,r2,31
   4568c:	e0bfeb15 	stw	r2,-84(fp)
   45690:	00001406 	br	456e4 <___vfprintf_internal_r+0x65c>
   45694:	9880100c 	andi	r2,r19,64
   45698:	10000b26 	beq	r2,zero,456c8 <___vfprintf_internal_r+0x640>
   4569c:	e0bfe917 	ldw	r2,-92(fp)
   456a0:	10c00104 	addi	r3,r2,4
   456a4:	e0ffe915 	stw	r3,-92(fp)
   456a8:	10800017 	ldw	r2,0(r2)
   456ac:	10bfffcc 	andi	r2,r2,65535
   456b0:	10a0001c 	xori	r2,r2,32768
   456b4:	10a00004 	addi	r2,r2,-32768
   456b8:	e0bfea15 	stw	r2,-88(fp)
   456bc:	1005d7fa 	srai	r2,r2,31
   456c0:	e0bfeb15 	stw	r2,-84(fp)
   456c4:	00000706 	br	456e4 <___vfprintf_internal_r+0x65c>
   456c8:	e0bfe917 	ldw	r2,-92(fp)
   456cc:	10c00104 	addi	r3,r2,4
   456d0:	e0ffe915 	stw	r3,-92(fp)
   456d4:	10800017 	ldw	r2,0(r2)
   456d8:	e0bfea15 	stw	r2,-88(fp)
   456dc:	1005d7fa 	srai	r2,r2,31
   456e0:	e0bfeb15 	stw	r2,-84(fp)
   456e4:	e0bfea17 	ldw	r2,-88(fp)
   456e8:	e0bfb115 	stw	r2,-316(fp)
   456ec:	e0ffeb17 	ldw	r3,-84(fp)
   456f0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   456f4:	e0bfb117 	ldw	r2,-316(fp)
   456f8:	e0ffb217 	ldw	r3,-312(fp)
   456fc:	18000d0e 	bge	r3,zero,45734 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   45700:	000f883a 	mov	r7,zero
   45704:	0011883a 	mov	r8,zero
   45708:	e13fb117 	ldw	r4,-316(fp)
   4570c:	e17fb217 	ldw	r5,-312(fp)
   45710:	3905c83a 	sub	r2,r7,r4
   45714:	388d803a 	cmpltu	r6,r7,r2
   45718:	4147c83a 	sub	r3,r8,r5
   4571c:	1989c83a 	sub	r4,r3,r6
   45720:	2007883a 	mov	r3,r4
   45724:	e0bfb115 	stw	r2,-316(fp)
   45728:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
   4572c:	00800b44 	movi	r2,45
   45730:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
   45734:	00800044 	movi	r2,1
   45738:	e0bfb305 	stb	r2,-308(fp)
			goto number;
   4573c:	0001b706 	br	45e1c <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
   45740:	9880020c 	andi	r2,r19,8
   45744:	10000826 	beq	r2,zero,45768 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
   45748:	e13fe917 	ldw	r4,-92(fp)
   4574c:	20800204 	addi	r2,r4,8
   45750:	e0bfe915 	stw	r2,-92(fp)
   45754:	20800017 	ldw	r2,0(r4)
   45758:	20c00117 	ldw	r3,4(r4)
   4575c:	e0bfc215 	stw	r2,-248(fp)
   45760:	e0ffc315 	stw	r3,-244(fp)
   45764:	00000706 	br	45784 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
   45768:	e13fe917 	ldw	r4,-92(fp)
   4576c:	20800204 	addi	r2,r4,8
   45770:	e0bfe915 	stw	r2,-92(fp)
   45774:	20800017 	ldw	r2,0(r4)
   45778:	20c00117 	ldw	r3,4(r4)
   4577c:	e0bfc215 	stw	r2,-248(fp)
   45780:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
   45784:	e0bfc217 	ldw	r2,-248(fp)
   45788:	e0ffc317 	ldw	r3,-244(fp)
   4578c:	1009883a 	mov	r4,r2
   45790:	180b883a 	mov	r5,r3
   45794:	004eed00 	call	4eed0 <__fpclassifyd>
   45798:	10800058 	cmpnei	r2,r2,1
   4579c:	1000161e 	bne	r2,zero,457f8 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
   457a0:	e0bfc217 	ldw	r2,-248(fp)
   457a4:	e0ffc317 	ldw	r3,-244(fp)
   457a8:	000d883a 	mov	r6,zero
   457ac:	000f883a 	mov	r7,zero
   457b0:	1009883a 	mov	r4,r2
   457b4:	180b883a 	mov	r5,r3
   457b8:	00522e80 	call	522e8 <__ledf2>
   457bc:	1000020e 	bge	r2,zero,457c8 <___vfprintf_internal_r+0x740>
					sign = '-';
   457c0:	00800b44 	movi	r2,45
   457c4:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   457c8:	a0801208 	cmpgei	r2,r20,72
   457cc:	1000031e 	bne	r2,zero,457dc <___vfprintf_internal_r+0x754>
					cp = "INF";
   457d0:	04800174 	movhi	r18,5
   457d4:	9493ba04 	addi	r18,r18,20200
   457d8:	00000206 	br	457e4 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
   457dc:	04800174 	movhi	r18,5
   457e0:	9493bb04 	addi	r18,r18,20204
				size = 3;
   457e4:	008000c4 	movi	r2,3
   457e8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   457ec:	00bfdfc4 	movi	r2,-129
   457f0:	98a6703a 	and	r19,r19,r2
				break;
   457f4:	00021a06 	br	46060 <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
   457f8:	e0bfc217 	ldw	r2,-248(fp)
   457fc:	e0ffc317 	ldw	r3,-244(fp)
   45800:	1009883a 	mov	r4,r2
   45804:	180b883a 	mov	r5,r3
   45808:	004eed00 	call	4eed0 <__fpclassifyd>
   4580c:	10000c1e 	bne	r2,zero,45840 <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   45810:	a0801208 	cmpgei	r2,r20,72
   45814:	1000031e 	bne	r2,zero,45824 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
   45818:	04800174 	movhi	r18,5
   4581c:	9493bc04 	addi	r18,r18,20208
   45820:	00000206 	br	4582c <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
   45824:	04800174 	movhi	r18,5
   45828:	9493bd04 	addi	r18,r18,20212
				size = 3;
   4582c:	008000c4 	movi	r2,3
   45830:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   45834:	00bfdfc4 	movi	r2,-129
   45838:	98a6703a 	and	r19,r19,r2
				break;
   4583c:	00020806 	br	46060 <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
   45840:	e0bfae17 	ldw	r2,-328(fp)
   45844:	10bfffd8 	cmpnei	r2,r2,-1
   45848:	1000031e 	bne	r2,zero,45858 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
   4584c:	00800184 	movi	r2,6
   45850:	e0bfae15 	stw	r2,-328(fp)
   45854:	00000806 	br	45878 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
   45858:	a08019e0 	cmpeqi	r2,r20,103
   4585c:	1000021e 	bne	r2,zero,45868 <___vfprintf_internal_r+0x7e0>
   45860:	a08011d8 	cmpnei	r2,r20,71
   45864:	1000041e 	bne	r2,zero,45878 <___vfprintf_internal_r+0x7f0>
   45868:	e0bfae17 	ldw	r2,-328(fp)
   4586c:	1000021e 	bne	r2,zero,45878 <___vfprintf_internal_r+0x7f0>
				prec = 1;
   45870:	00800044 	movi	r2,1
   45874:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
   45878:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
   4587c:	e0bfc217 	ldw	r2,-248(fp)
   45880:	e0ffc317 	ldw	r3,-244(fp)
   45884:	dc800515 	stw	r18,20(sp)
   45888:	e13fc704 	addi	r4,fp,-228
   4588c:	d9000415 	stw	r4,16(sp)
   45890:	dd000315 	stw	r20,12(sp)
   45894:	e13fc404 	addi	r4,fp,-240
   45898:	d9000215 	stw	r4,8(sp)
   4589c:	e13fc144 	addi	r4,fp,-251
   458a0:	d9000115 	stw	r4,4(sp)
   458a4:	dcc00015 	stw	r19,0(sp)
   458a8:	e1ffae17 	ldw	r7,-328(fp)
   458ac:	100b883a 	mov	r5,r2
   458b0:	180d883a 	mov	r6,r3
   458b4:	e13fe617 	ldw	r4,-104(fp)
   458b8:	00471700 	call	47170 <cvt>
   458bc:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
   458c0:	a08019e0 	cmpeqi	r2,r20,103
   458c4:	1000021e 	bne	r2,zero,458d0 <___vfprintf_internal_r+0x848>
   458c8:	a08011d8 	cmpnei	r2,r20,71
   458cc:	1000091e 	bne	r2,zero,458f4 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
   458d0:	e0bfc417 	ldw	r2,-240(fp)
   458d4:	10bfff50 	cmplti	r2,r2,-3
   458d8:	1000031e 	bne	r2,zero,458e8 <___vfprintf_internal_r+0x860>
   458dc:	e0bfc417 	ldw	r2,-240(fp)
   458e0:	e0ffae17 	ldw	r3,-328(fp)
   458e4:	1880020e 	bge	r3,r2,458f0 <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
   458e8:	a53fff84 	addi	r20,r20,-2
   458ec:	00000106 	br	458f4 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
   458f0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
   458f4:	a0801988 	cmpgei	r2,r20,102
   458f8:	1000171e 	bne	r2,zero,45958 <___vfprintf_internal_r+0x8d0>
				--expt;
   458fc:	e0bfc417 	ldw	r2,-240(fp)
   45900:	10bfffc4 	addi	r2,r2,-1
   45904:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
   45908:	e0bfc417 	ldw	r2,-240(fp)
   4590c:	e0ffc504 	addi	r3,fp,-236
   45910:	a00d883a 	mov	r6,r20
   45914:	100b883a 	mov	r5,r2
   45918:	1809883a 	mov	r4,r3
   4591c:	004737c0 	call	4737c <exponent>
   45920:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
   45924:	e0bfc717 	ldw	r2,-228(fp)
   45928:	e0ffaf17 	ldw	r3,-324(fp)
   4592c:	1885883a 	add	r2,r3,r2
   45930:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
   45934:	e0bfc717 	ldw	r2,-228(fp)
   45938:	10800088 	cmpgei	r2,r2,2
   4593c:	1000021e 	bne	r2,zero,45948 <___vfprintf_internal_r+0x8c0>
   45940:	9880004c 	andi	r2,r19,1
   45944:	10003526 	beq	r2,zero,45a1c <___vfprintf_internal_r+0x994>
					++size;
   45948:	e0bfb617 	ldw	r2,-296(fp)
   4594c:	10800044 	addi	r2,r2,1
   45950:	e0bfb615 	stw	r2,-296(fp)
   45954:	00003106 	br	45a1c <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
   45958:	a0801998 	cmpnei	r2,r20,102
   4595c:	1000181e 	bne	r2,zero,459c0 <___vfprintf_internal_r+0x938>
					if (expt > 0) {
   45960:	e0bfc417 	ldw	r2,-240(fp)
   45964:	00800c0e 	bge	zero,r2,45998 <___vfprintf_internal_r+0x910>
						size = expt;
   45968:	e0bfc417 	ldw	r2,-240(fp)
   4596c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
   45970:	e0bfae17 	ldw	r2,-328(fp)
   45974:	1000021e 	bne	r2,zero,45980 <___vfprintf_internal_r+0x8f8>
   45978:	9880004c 	andi	r2,r19,1
   4597c:	10002526 	beq	r2,zero,45a14 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
   45980:	e0bfae17 	ldw	r2,-328(fp)
   45984:	10800044 	addi	r2,r2,1
   45988:	e0ffb617 	ldw	r3,-296(fp)
   4598c:	1885883a 	add	r2,r3,r2
   45990:	e0bfb615 	stw	r2,-296(fp)
   45994:	00001f06 	br	45a14 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
   45998:	e0bfae17 	ldw	r2,-328(fp)
   4599c:	1000021e 	bne	r2,zero,459a8 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   459a0:	9880004c 	andi	r2,r19,1
   459a4:	10000326 	beq	r2,zero,459b4 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
   459a8:	e0bfae17 	ldw	r2,-328(fp)
   459ac:	10800084 	addi	r2,r2,2
   459b0:	00000106 	br	459b8 <___vfprintf_internal_r+0x930>
   459b4:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   459b8:	e0bfb615 	stw	r2,-296(fp)
   459bc:	00001506 	br	45a14 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
   459c0:	e0ffc417 	ldw	r3,-240(fp)
   459c4:	e0bfc717 	ldw	r2,-228(fp)
   459c8:	18800816 	blt	r3,r2,459ec <___vfprintf_internal_r+0x964>
					size = expt;
   459cc:	e0bfc417 	ldw	r2,-240(fp)
   459d0:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
   459d4:	9880004c 	andi	r2,r19,1
   459d8:	10000e26 	beq	r2,zero,45a14 <___vfprintf_internal_r+0x98c>
						++size;
   459dc:	e0bfb617 	ldw	r2,-296(fp)
   459e0:	10800044 	addi	r2,r2,1
   459e4:	e0bfb615 	stw	r2,-296(fp)
   459e8:	00000a06 	br	45a14 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
   459ec:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
   459f0:	00800416 	blt	zero,r2,45a04 <___vfprintf_internal_r+0x97c>
   459f4:	e0bfc417 	ldw	r2,-240(fp)
   459f8:	00c00084 	movi	r3,2
   459fc:	1885c83a 	sub	r2,r3,r2
   45a00:	00000106 	br	45a08 <___vfprintf_internal_r+0x980>
   45a04:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
   45a08:	e0ffc717 	ldw	r3,-228(fp)
   45a0c:	10c5883a 	add	r2,r2,r3
   45a10:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
   45a14:	e0bfc417 	ldw	r2,-240(fp)
   45a18:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
   45a1c:	e0bfc143 	ldbu	r2,-251(fp)
   45a20:	10803fcc 	andi	r2,r2,255
   45a24:	1080201c 	xori	r2,r2,128
   45a28:	10bfe004 	addi	r2,r2,-128
   45a2c:	10018b26 	beq	r2,zero,4605c <___vfprintf_internal_r+0xfd4>
				sign = '-';
   45a30:	00800b44 	movi	r2,45
   45a34:	e0bfc105 	stb	r2,-252(fp)
			break;
   45a38:	00018806 	br	4605c <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   45a3c:	9880080c 	andi	r2,r19,32
   45a40:	10000d26 	beq	r2,zero,45a78 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   45a44:	e0bfe917 	ldw	r2,-92(fp)
   45a48:	10c00104 	addi	r3,r2,4
   45a4c:	e0ffe915 	stw	r3,-92(fp)
   45a50:	10800017 	ldw	r2,0(r2)
   45a54:	e0ffac17 	ldw	r3,-336(fp)
   45a58:	e0fff015 	stw	r3,-64(fp)
   45a5c:	1807d7fa 	srai	r3,r3,31
   45a60:	e0fff115 	stw	r3,-60(fp)
   45a64:	e0fff017 	ldw	r3,-64(fp)
   45a68:	10c00015 	stw	r3,0(r2)
   45a6c:	e0fff117 	ldw	r3,-60(fp)
   45a70:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   45a74:	00054b06 	br	46fa4 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   45a78:	9880040c 	andi	r2,r19,16
   45a7c:	10000726 	beq	r2,zero,45a9c <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   45a80:	e0bfe917 	ldw	r2,-92(fp)
   45a84:	10c00104 	addi	r3,r2,4
   45a88:	e0ffe915 	stw	r3,-92(fp)
   45a8c:	10800017 	ldw	r2,0(r2)
   45a90:	e0ffac17 	ldw	r3,-336(fp)
   45a94:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   45a98:	00054206 	br	46fa4 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   45a9c:	9880100c 	andi	r2,r19,64
   45aa0:	10000726 	beq	r2,zero,45ac0 <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   45aa4:	e0bfe917 	ldw	r2,-92(fp)
   45aa8:	10c00104 	addi	r3,r2,4
   45aac:	e0ffe915 	stw	r3,-92(fp)
   45ab0:	10800017 	ldw	r2,0(r2)
   45ab4:	e0ffac17 	ldw	r3,-336(fp)
   45ab8:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   45abc:	00053906 	br	46fa4 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   45ac0:	e0bfe917 	ldw	r2,-92(fp)
   45ac4:	10c00104 	addi	r3,r2,4
   45ac8:	e0ffe915 	stw	r3,-92(fp)
   45acc:	10800017 	ldw	r2,0(r2)
   45ad0:	e0ffac17 	ldw	r3,-336(fp)
   45ad4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   45ad8:	00053206 	br	46fa4 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
   45adc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   45ae0:	9880080c 	andi	r2,r19,32
   45ae4:	10000626 	beq	r2,zero,45b00 <___vfprintf_internal_r+0xa78>
   45ae8:	e0bfe917 	ldw	r2,-92(fp)
   45aec:	10c00204 	addi	r3,r2,8
   45af0:	e0ffe915 	stw	r3,-92(fp)
   45af4:	15800017 	ldw	r22,0(r2)
   45af8:	15c00117 	ldw	r23,4(r2)
   45afc:	00001c06 	br	45b70 <___vfprintf_internal_r+0xae8>
   45b00:	9880040c 	andi	r2,r19,16
   45b04:	10000726 	beq	r2,zero,45b24 <___vfprintf_internal_r+0xa9c>
   45b08:	e0bfe917 	ldw	r2,-92(fp)
   45b0c:	10c00104 	addi	r3,r2,4
   45b10:	e0ffe915 	stw	r3,-92(fp)
   45b14:	10800017 	ldw	r2,0(r2)
   45b18:	102d883a 	mov	r22,r2
   45b1c:	002f883a 	mov	r23,zero
   45b20:	00001306 	br	45b70 <___vfprintf_internal_r+0xae8>
   45b24:	9880100c 	andi	r2,r19,64
   45b28:	10000b26 	beq	r2,zero,45b58 <___vfprintf_internal_r+0xad0>
   45b2c:	e0bfe917 	ldw	r2,-92(fp)
   45b30:	10c00104 	addi	r3,r2,4
   45b34:	e0ffe915 	stw	r3,-92(fp)
   45b38:	10800017 	ldw	r2,0(r2)
   45b3c:	e0bff215 	stw	r2,-56(fp)
   45b40:	e03ff315 	stw	zero,-52(fp)
   45b44:	e0bff217 	ldw	r2,-56(fp)
   45b48:	15bfffcc 	andi	r22,r2,65535
   45b4c:	e0fff317 	ldw	r3,-52(fp)
   45b50:	182e703a 	and	r23,r3,zero
   45b54:	00000606 	br	45b70 <___vfprintf_internal_r+0xae8>
   45b58:	e0bfe917 	ldw	r2,-92(fp)
   45b5c:	10c00104 	addi	r3,r2,4
   45b60:	e0ffe915 	stw	r3,-92(fp)
   45b64:	10800017 	ldw	r2,0(r2)
   45b68:	102d883a 	mov	r22,r2
   45b6c:	002f883a 	mov	r23,zero
   45b70:	e5bfb115 	stw	r22,-316(fp)
   45b74:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
   45b78:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   45b7c:	0000a606 	br	45e18 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   45b80:	e0bfe917 	ldw	r2,-92(fp)
   45b84:	10c00104 	addi	r3,r2,4
   45b88:	e0ffe915 	stw	r3,-92(fp)
   45b8c:	10800017 	ldw	r2,0(r2)
   45b90:	e0bfb115 	stw	r2,-316(fp)
   45b94:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
   45b98:	00800084 	movi	r2,2
   45b9c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
   45ba0:	00800174 	movhi	r2,5
   45ba4:	1093be04 	addi	r2,r2,20216
   45ba8:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
   45bac:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   45bb0:	00800c04 	movi	r2,48
   45bb4:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   45bb8:	05001e04 	movi	r20,120
   45bbc:	00801e04 	movi	r2,120
   45bc0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   45bc4:	00009406 	br	45e18 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   45bc8:	e0bfe917 	ldw	r2,-92(fp)
   45bcc:	10c00104 	addi	r3,r2,4
   45bd0:	e0ffe915 	stw	r3,-92(fp)
   45bd4:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   45bd8:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   45bdc:	9000081e 	bne	r18,zero,45c00 <___vfprintf_internal_r+0xb78>
				cp = "(null)";
   45be0:	04800174 	movhi	r18,5
   45be4:	9493c304 	addi	r18,r18,20236
				size = ((unsigned) prec > 6U) ? 6 : prec;
   45be8:	e0bfae17 	ldw	r2,-328(fp)
   45bec:	10c001f0 	cmpltui	r3,r2,7
   45bf0:	1800011e 	bne	r3,zero,45bf8 <___vfprintf_internal_r+0xb70>
   45bf4:	00800184 	movi	r2,6
   45bf8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   45bfc:	00011806 	br	46060 <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   45c00:	e0bfae17 	ldw	r2,-328(fp)
   45c04:	10001016 	blt	r2,zero,45c48 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   45c08:	e0bfae17 	ldw	r2,-328(fp)
   45c0c:	100d883a 	mov	r6,r2
   45c10:	000b883a 	mov	r5,zero
   45c14:	9009883a 	mov	r4,r18
   45c18:	004c1200 	call	4c120 <memchr>
   45c1c:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
   45c20:	e0bfbf17 	ldw	r2,-260(fp)
   45c24:	10000526 	beq	r2,zero,45c3c <___vfprintf_internal_r+0xbb4>
					size = p - cp;
   45c28:	e0bfbf17 	ldw	r2,-260(fp)
   45c2c:	9007883a 	mov	r3,r18
   45c30:	10c5c83a 	sub	r2,r2,r3
   45c34:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   45c38:	00010906 	br	46060 <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   45c3c:	e0bfae17 	ldw	r2,-328(fp)
   45c40:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
   45c44:	00010606 	br	46060 <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   45c48:	9009883a 	mov	r4,r18
   45c4c:	0044e540 	call	44e54 <strlen>
   45c50:	e0bfb615 	stw	r2,-296(fp)

			break;
   45c54:	00010206 	br	46060 <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
   45c58:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   45c5c:	9880080c 	andi	r2,r19,32
   45c60:	10000826 	beq	r2,zero,45c84 <___vfprintf_internal_r+0xbfc>
   45c64:	e0bfe917 	ldw	r2,-92(fp)
   45c68:	10c00204 	addi	r3,r2,8
   45c6c:	e0ffe915 	stw	r3,-92(fp)
   45c70:	10c00017 	ldw	r3,0(r2)
   45c74:	e0ffec15 	stw	r3,-80(fp)
   45c78:	10c00117 	ldw	r3,4(r2)
   45c7c:	e0ffed15 	stw	r3,-76(fp)
   45c80:	00001e06 	br	45cfc <___vfprintf_internal_r+0xc74>
   45c84:	9880040c 	andi	r2,r19,16
   45c88:	10000726 	beq	r2,zero,45ca8 <___vfprintf_internal_r+0xc20>
   45c8c:	e0bfe917 	ldw	r2,-92(fp)
   45c90:	10c00104 	addi	r3,r2,4
   45c94:	e0ffe915 	stw	r3,-92(fp)
   45c98:	10800017 	ldw	r2,0(r2)
   45c9c:	e0bfec15 	stw	r2,-80(fp)
   45ca0:	e03fed15 	stw	zero,-76(fp)
   45ca4:	00001506 	br	45cfc <___vfprintf_internal_r+0xc74>
   45ca8:	9880100c 	andi	r2,r19,64
   45cac:	10000d26 	beq	r2,zero,45ce4 <___vfprintf_internal_r+0xc5c>
   45cb0:	e0bfe917 	ldw	r2,-92(fp)
   45cb4:	10c00104 	addi	r3,r2,4
   45cb8:	e0ffe915 	stw	r3,-92(fp)
   45cbc:	10800017 	ldw	r2,0(r2)
   45cc0:	e0bff415 	stw	r2,-48(fp)
   45cc4:	e03ff515 	stw	zero,-44(fp)
   45cc8:	e0bff417 	ldw	r2,-48(fp)
   45ccc:	10bfffcc 	andi	r2,r2,65535
   45cd0:	e0bfec15 	stw	r2,-80(fp)
   45cd4:	e0fff517 	ldw	r3,-44(fp)
   45cd8:	1806703a 	and	r3,r3,zero
   45cdc:	e0ffed15 	stw	r3,-76(fp)
   45ce0:	00000606 	br	45cfc <___vfprintf_internal_r+0xc74>
   45ce4:	e0bfe917 	ldw	r2,-92(fp)
   45ce8:	10c00104 	addi	r3,r2,4
   45cec:	e0ffe915 	stw	r3,-92(fp)
   45cf0:	10800017 	ldw	r2,0(r2)
   45cf4:	e0bfec15 	stw	r2,-80(fp)
   45cf8:	e03fed15 	stw	zero,-76(fp)
   45cfc:	e0bfec17 	ldw	r2,-80(fp)
   45d00:	e0bfb115 	stw	r2,-316(fp)
   45d04:	e0ffed17 	ldw	r3,-76(fp)
   45d08:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
   45d0c:	00800044 	movi	r2,1
   45d10:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
   45d14:	00004006 	br	45e18 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
   45d18:	00800174 	movhi	r2,5
   45d1c:	1093c504 	addi	r2,r2,20244
   45d20:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
   45d24:	00000306 	br	45d34 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
   45d28:	00800174 	movhi	r2,5
   45d2c:	1093be04 	addi	r2,r2,20216
   45d30:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
   45d34:	9880080c 	andi	r2,r19,32
   45d38:	10000826 	beq	r2,zero,45d5c <___vfprintf_internal_r+0xcd4>
   45d3c:	e0bfe917 	ldw	r2,-92(fp)
   45d40:	10c00204 	addi	r3,r2,8
   45d44:	e0ffe915 	stw	r3,-92(fp)
   45d48:	10c00017 	ldw	r3,0(r2)
   45d4c:	e0ffee15 	stw	r3,-72(fp)
   45d50:	10c00117 	ldw	r3,4(r2)
   45d54:	e0ffef15 	stw	r3,-68(fp)
   45d58:	00001e06 	br	45dd4 <___vfprintf_internal_r+0xd4c>
   45d5c:	9880040c 	andi	r2,r19,16
   45d60:	10000726 	beq	r2,zero,45d80 <___vfprintf_internal_r+0xcf8>
   45d64:	e0bfe917 	ldw	r2,-92(fp)
   45d68:	10c00104 	addi	r3,r2,4
   45d6c:	e0ffe915 	stw	r3,-92(fp)
   45d70:	10800017 	ldw	r2,0(r2)
   45d74:	e0bfee15 	stw	r2,-72(fp)
   45d78:	e03fef15 	stw	zero,-68(fp)
   45d7c:	00001506 	br	45dd4 <___vfprintf_internal_r+0xd4c>
   45d80:	9880100c 	andi	r2,r19,64
   45d84:	10000d26 	beq	r2,zero,45dbc <___vfprintf_internal_r+0xd34>
   45d88:	e0bfe917 	ldw	r2,-92(fp)
   45d8c:	10c00104 	addi	r3,r2,4
   45d90:	e0ffe915 	stw	r3,-92(fp)
   45d94:	10800017 	ldw	r2,0(r2)
   45d98:	e0bff615 	stw	r2,-40(fp)
   45d9c:	e03ff715 	stw	zero,-36(fp)
   45da0:	e0bff617 	ldw	r2,-40(fp)
   45da4:	10bfffcc 	andi	r2,r2,65535
   45da8:	e0bfee15 	stw	r2,-72(fp)
   45dac:	e0fff717 	ldw	r3,-36(fp)
   45db0:	1806703a 	and	r3,r3,zero
   45db4:	e0ffef15 	stw	r3,-68(fp)
   45db8:	00000606 	br	45dd4 <___vfprintf_internal_r+0xd4c>
   45dbc:	e0bfe917 	ldw	r2,-92(fp)
   45dc0:	10c00104 	addi	r3,r2,4
   45dc4:	e0ffe915 	stw	r3,-92(fp)
   45dc8:	10800017 	ldw	r2,0(r2)
   45dcc:	e0bfee15 	stw	r2,-72(fp)
   45dd0:	e03fef15 	stw	zero,-68(fp)
   45dd4:	e0bfee17 	ldw	r2,-72(fp)
   45dd8:	e0bfb115 	stw	r2,-316(fp)
   45ddc:	e0ffef17 	ldw	r3,-68(fp)
   45de0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
   45de4:	00800084 	movi	r2,2
   45de8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   45dec:	9880004c 	andi	r2,r19,1
   45df0:	10000926 	beq	r2,zero,45e18 <___vfprintf_internal_r+0xd90>
   45df4:	e0bfb117 	ldw	r2,-316(fp)
   45df8:	e0ffb217 	ldw	r3,-312(fp)
   45dfc:	10c4b03a 	or	r2,r2,r3
   45e00:	10000526 	beq	r2,zero,45e18 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
   45e04:	00800c04 	movi	r2,48
   45e08:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   45e0c:	a005883a 	mov	r2,r20
   45e10:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   45e14:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   45e18:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   45e1c:	e0bfae17 	ldw	r2,-328(fp)
   45e20:	e0bfb415 	stw	r2,-304(fp)
   45e24:	e0bfb417 	ldw	r2,-304(fp)
   45e28:	10000216 	blt	r2,zero,45e34 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
   45e2c:	00bfdfc4 	movi	r2,-129
   45e30:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   45e34:	e4bfdb04 	addi	r18,fp,-148
   45e38:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
   45e3c:	e0bfb117 	ldw	r2,-316(fp)
   45e40:	e0ffb217 	ldw	r3,-312(fp)
   45e44:	10c4b03a 	or	r2,r2,r3
   45e48:	1000021e 	bne	r2,zero,45e54 <___vfprintf_internal_r+0xdcc>
   45e4c:	e0bfae17 	ldw	r2,-328(fp)
   45e50:	10006c26 	beq	r2,zero,46004 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   45e54:	e0bfb303 	ldbu	r2,-308(fp)
   45e58:	10c00060 	cmpeqi	r3,r2,1
   45e5c:	1800211e 	bne	r3,zero,45ee4 <___vfprintf_internal_r+0xe5c>
   45e60:	10c000a0 	cmpeqi	r3,r2,2
   45e64:	1800491e 	bne	r3,zero,45f8c <___vfprintf_internal_r+0xf04>
   45e68:	10005d1e 	bne	r2,zero,45fe0 <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   45e6c:	94bfffc4 	addi	r18,r18,-1
   45e70:	e0bfb117 	ldw	r2,-316(fp)
   45e74:	108001cc 	andi	r2,r2,7
   45e78:	10800c04 	addi	r2,r2,48
   45e7c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
   45e80:	e0bfb217 	ldw	r2,-312(fp)
   45e84:	1004977a 	slli	r2,r2,29
   45e88:	e0ffb117 	ldw	r3,-316(fp)
   45e8c:	1806d0fa 	srli	r3,r3,3
   45e90:	1884b03a 	or	r2,r3,r2
   45e94:	e0bfb115 	stw	r2,-316(fp)
   45e98:	e0bfb217 	ldw	r2,-312(fp)
   45e9c:	1004d0fa 	srli	r2,r2,3
   45ea0:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   45ea4:	e0bfb117 	ldw	r2,-316(fp)
   45ea8:	e0ffb217 	ldw	r3,-312(fp)
   45eac:	10c4b03a 	or	r2,r2,r3
   45eb0:	103fee1e 	bne	r2,zero,45e6c <_gp+0xfffe6c94>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   45eb4:	9880004c 	andi	r2,r19,1
   45eb8:	10005026 	beq	r2,zero,45ffc <___vfprintf_internal_r+0xf74>
   45ebc:	90800003 	ldbu	r2,0(r18)
   45ec0:	10803fcc 	andi	r2,r2,255
   45ec4:	1080201c 	xori	r2,r2,128
   45ec8:	10bfe004 	addi	r2,r2,-128
   45ecc:	10800c20 	cmpeqi	r2,r2,48
   45ed0:	10004a1e 	bne	r2,zero,45ffc <___vfprintf_internal_r+0xf74>
						*--cp = '0';
   45ed4:	94bfffc4 	addi	r18,r18,-1
   45ed8:	00800c04 	movi	r2,48
   45edc:	90800005 	stb	r2,0(r18)
					break;
   45ee0:	00004606 	br	45ffc <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   45ee4:	e0bfb217 	ldw	r2,-312(fp)
   45ee8:	10000a1e 	bne	r2,zero,45f14 <___vfprintf_internal_r+0xe8c>
   45eec:	e0bfb217 	ldw	r2,-312(fp)
   45ef0:	1000031e 	bne	r2,zero,45f00 <___vfprintf_internal_r+0xe78>
   45ef4:	e0bfb117 	ldw	r2,-316(fp)
   45ef8:	108002a8 	cmpgeui	r2,r2,10
   45efc:	1000051e 	bne	r2,zero,45f14 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
   45f00:	94bfffc4 	addi	r18,r18,-1
   45f04:	e0bfb117 	ldw	r2,-316(fp)
   45f08:	10800c04 	addi	r2,r2,48
   45f0c:	90800005 	stb	r2,0(r18)
						break;
   45f10:	00003b06 	br	46000 <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   45f14:	94bfffc4 	addi	r18,r18,-1
   45f18:	e0bfb117 	ldw	r2,-316(fp)
   45f1c:	e0ffb217 	ldw	r3,-312(fp)
   45f20:	01800284 	movi	r6,10
   45f24:	000f883a 	mov	r7,zero
   45f28:	1009883a 	mov	r4,r2
   45f2c:	180b883a 	mov	r5,r3
   45f30:	0051c9c0 	call	51c9c <__umoddi3>
   45f34:	1009883a 	mov	r4,r2
   45f38:	180b883a 	mov	r5,r3
   45f3c:	2005883a 	mov	r2,r4
   45f40:	2807883a 	mov	r3,r5
   45f44:	10800c04 	addi	r2,r2,48
   45f48:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   45f4c:	e0bfb117 	ldw	r2,-316(fp)
   45f50:	e0ffb217 	ldw	r3,-312(fp)
   45f54:	01800284 	movi	r6,10
   45f58:	000f883a 	mov	r7,zero
   45f5c:	1009883a 	mov	r4,r2
   45f60:	180b883a 	mov	r5,r3
   45f64:	00516a00 	call	516a0 <__udivdi3>
   45f68:	1009883a 	mov	r4,r2
   45f6c:	180b883a 	mov	r5,r3
   45f70:	e13fb115 	stw	r4,-316(fp)
   45f74:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
   45f78:	e0bfb117 	ldw	r2,-316(fp)
   45f7c:	e0ffb217 	ldw	r3,-312(fp)
   45f80:	10c4b03a 	or	r2,r2,r3
   45f84:	103fe31e 	bne	r2,zero,45f14 <_gp+0xfffe6d3c>
					break;
   45f88:	00001d06 	br	46000 <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   45f8c:	94bfffc4 	addi	r18,r18,-1
   45f90:	e0bfb117 	ldw	r2,-316(fp)
   45f94:	108003cc 	andi	r2,r2,15
   45f98:	e0ffb717 	ldw	r3,-292(fp)
   45f9c:	1885883a 	add	r2,r3,r2
   45fa0:	10800003 	ldbu	r2,0(r2)
   45fa4:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
   45fa8:	e0bfb217 	ldw	r2,-312(fp)
   45fac:	1004973a 	slli	r2,r2,28
   45fb0:	e0ffb117 	ldw	r3,-316(fp)
   45fb4:	1806d13a 	srli	r3,r3,4
   45fb8:	1884b03a 	or	r2,r3,r2
   45fbc:	e0bfb115 	stw	r2,-316(fp)
   45fc0:	e0bfb217 	ldw	r2,-312(fp)
   45fc4:	1004d13a 	srli	r2,r2,4
   45fc8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   45fcc:	e0bfb117 	ldw	r2,-316(fp)
   45fd0:	e0ffb217 	ldw	r3,-312(fp)
   45fd4:	10c4b03a 	or	r2,r2,r3
   45fd8:	103fec1e 	bne	r2,zero,45f8c <_gp+0xfffe6db4>
					break;
   45fdc:	00000806 	br	46000 <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
   45fe0:	04800174 	movhi	r18,5
   45fe4:	9493ca04 	addi	r18,r18,20264
					size = strlen (cp);
   45fe8:	9009883a 	mov	r4,r18
   45fec:	0044e540 	call	44e54 <strlen>
   45ff0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
   45ff4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   45ff8:	00001906 	br	46060 <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   45ffc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   46000:	00000706 	br	46020 <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   46004:	e0bfb303 	ldbu	r2,-308(fp)
   46008:	1000051e 	bne	r2,zero,46020 <___vfprintf_internal_r+0xf98>
   4600c:	9880004c 	andi	r2,r19,1
   46010:	10000326 	beq	r2,zero,46020 <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
   46014:	94bfffc4 	addi	r18,r18,-1
   46018:	00800c04 	movi	r2,48
   4601c:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
   46020:	e0bfdb04 	addi	r2,fp,-148
   46024:	10800a04 	addi	r2,r2,40
   46028:	1007883a 	mov	r3,r2
   4602c:	9005883a 	mov	r2,r18
   46030:	1885c83a 	sub	r2,r3,r2
   46034:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
   46038:	00000906 	br	46060 <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   4603c:	a003dc26 	beq	r20,zero,46fb0 <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   46040:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
   46044:	a005883a 	mov	r2,r20
   46048:	90800005 	stb	r2,0(r18)
			size = 1;
   4604c:	00800044 	movi	r2,1
   46050:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
   46054:	e03fc105 	stb	zero,-252(fp)
			break;
   46058:	00000106 	br	46060 <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
   4605c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   46060:	e0ffb417 	ldw	r3,-304(fp)
   46064:	e0bfb617 	ldw	r2,-296(fp)
   46068:	10c0010e 	bge	r2,r3,46070 <___vfprintf_internal_r+0xfe8>
   4606c:	1805883a 	mov	r2,r3
   46070:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
   46074:	e0bfc103 	ldbu	r2,-252(fp)
   46078:	10803fcc 	andi	r2,r2,255
   4607c:	1080201c 	xori	r2,r2,128
   46080:	10bfe004 	addi	r2,r2,-128
   46084:	10000326 	beq	r2,zero,46094 <___vfprintf_internal_r+0x100c>
			realsz++;
   46088:	e0bfb517 	ldw	r2,-300(fp)
   4608c:	10800044 	addi	r2,r2,1
   46090:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
   46094:	9880008c 	andi	r2,r19,2
   46098:	10000326 	beq	r2,zero,460a8 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
   4609c:	e0bfb517 	ldw	r2,-300(fp)
   460a0:	10800084 	addi	r2,r2,2
   460a4:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   460a8:	9880210c 	andi	r2,r19,132
   460ac:	1000351e 	bne	r2,zero,46184 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
   460b0:	e0ffad17 	ldw	r3,-332(fp)
   460b4:	e0bfb517 	ldw	r2,-300(fp)
   460b8:	18a1c83a 	sub	r16,r3,r2
   460bc:	0400310e 	bge	zero,r16,46184 <___vfprintf_internal_r+0x10fc>
   460c0:	00001706 	br	46120 <___vfprintf_internal_r+0x1098>
   460c4:	00800174 	movhi	r2,5
   460c8:	1093d184 	addi	r2,r2,20294
   460cc:	88800015 	stw	r2,0(r17)
   460d0:	00800404 	movi	r2,16
   460d4:	88800115 	stw	r2,4(r17)
   460d8:	e0bfca17 	ldw	r2,-216(fp)
   460dc:	10800404 	addi	r2,r2,16
   460e0:	e0bfca15 	stw	r2,-216(fp)
   460e4:	8c400204 	addi	r17,r17,8
   460e8:	e0bfc917 	ldw	r2,-220(fp)
   460ec:	10800044 	addi	r2,r2,1
   460f0:	e0bfc915 	stw	r2,-220(fp)
   460f4:	e0bfc917 	ldw	r2,-220(fp)
   460f8:	10800210 	cmplti	r2,r2,8
   460fc:	1000071e 	bne	r2,zero,4611c <___vfprintf_internal_r+0x1094>
   46100:	e0bfc804 	addi	r2,fp,-224
   46104:	100d883a 	mov	r6,r2
   46108:	e17fe717 	ldw	r5,-100(fp)
   4610c:	e13fe617 	ldw	r4,-104(fp)
   46110:	004f3e80 	call	4f3e8 <__sprint_r>
   46114:	1003b41e 	bne	r2,zero,46fe8 <___vfprintf_internal_r+0x1f60>
   46118:	e47fcb04 	addi	r17,fp,-212
   4611c:	843ffc04 	addi	r16,r16,-16
   46120:	80800448 	cmpgei	r2,r16,17
   46124:	103fe71e 	bne	r2,zero,460c4 <_gp+0xfffe6eec>
   46128:	00800174 	movhi	r2,5
   4612c:	1093d184 	addi	r2,r2,20294
   46130:	88800015 	stw	r2,0(r17)
   46134:	8005883a 	mov	r2,r16
   46138:	88800115 	stw	r2,4(r17)
   4613c:	e0bfca17 	ldw	r2,-216(fp)
   46140:	8007883a 	mov	r3,r16
   46144:	10c5883a 	add	r2,r2,r3
   46148:	e0bfca15 	stw	r2,-216(fp)
   4614c:	8c400204 	addi	r17,r17,8
   46150:	e0bfc917 	ldw	r2,-220(fp)
   46154:	10800044 	addi	r2,r2,1
   46158:	e0bfc915 	stw	r2,-220(fp)
   4615c:	e0bfc917 	ldw	r2,-220(fp)
   46160:	10800210 	cmplti	r2,r2,8
   46164:	1000071e 	bne	r2,zero,46184 <___vfprintf_internal_r+0x10fc>
   46168:	e0bfc804 	addi	r2,fp,-224
   4616c:	100d883a 	mov	r6,r2
   46170:	e17fe717 	ldw	r5,-100(fp)
   46174:	e13fe617 	ldw	r4,-104(fp)
   46178:	004f3e80 	call	4f3e8 <__sprint_r>
   4617c:	10039c1e 	bne	r2,zero,46ff0 <___vfprintf_internal_r+0x1f68>
   46180:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
   46184:	e0bfc103 	ldbu	r2,-252(fp)
   46188:	10803fcc 	andi	r2,r2,255
   4618c:	1080201c 	xori	r2,r2,128
   46190:	10bfe004 	addi	r2,r2,-128
   46194:	10001526 	beq	r2,zero,461ec <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
   46198:	e0bfc104 	addi	r2,fp,-252
   4619c:	88800015 	stw	r2,0(r17)
   461a0:	00800044 	movi	r2,1
   461a4:	88800115 	stw	r2,4(r17)
   461a8:	e0bfca17 	ldw	r2,-216(fp)
   461ac:	10800044 	addi	r2,r2,1
   461b0:	e0bfca15 	stw	r2,-216(fp)
   461b4:	8c400204 	addi	r17,r17,8
   461b8:	e0bfc917 	ldw	r2,-220(fp)
   461bc:	10800044 	addi	r2,r2,1
   461c0:	e0bfc915 	stw	r2,-220(fp)
   461c4:	e0bfc917 	ldw	r2,-220(fp)
   461c8:	10800210 	cmplti	r2,r2,8
   461cc:	1000071e 	bne	r2,zero,461ec <___vfprintf_internal_r+0x1164>
   461d0:	e0bfc804 	addi	r2,fp,-224
   461d4:	100d883a 	mov	r6,r2
   461d8:	e17fe717 	ldw	r5,-100(fp)
   461dc:	e13fe617 	ldw	r4,-104(fp)
   461e0:	004f3e80 	call	4f3e8 <__sprint_r>
   461e4:	1003841e 	bne	r2,zero,46ff8 <___vfprintf_internal_r+0x1f70>
   461e8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
   461ec:	9880008c 	andi	r2,r19,2
   461f0:	10001526 	beq	r2,zero,46248 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
   461f4:	e0bfe504 	addi	r2,fp,-108
   461f8:	88800015 	stw	r2,0(r17)
   461fc:	00800084 	movi	r2,2
   46200:	88800115 	stw	r2,4(r17)
   46204:	e0bfca17 	ldw	r2,-216(fp)
   46208:	10800084 	addi	r2,r2,2
   4620c:	e0bfca15 	stw	r2,-216(fp)
   46210:	8c400204 	addi	r17,r17,8
   46214:	e0bfc917 	ldw	r2,-220(fp)
   46218:	10800044 	addi	r2,r2,1
   4621c:	e0bfc915 	stw	r2,-220(fp)
   46220:	e0bfc917 	ldw	r2,-220(fp)
   46224:	10800210 	cmplti	r2,r2,8
   46228:	1000071e 	bne	r2,zero,46248 <___vfprintf_internal_r+0x11c0>
   4622c:	e0bfc804 	addi	r2,fp,-224
   46230:	100d883a 	mov	r6,r2
   46234:	e17fe717 	ldw	r5,-100(fp)
   46238:	e13fe617 	ldw	r4,-104(fp)
   4623c:	004f3e80 	call	4f3e8 <__sprint_r>
   46240:	10036f1e 	bne	r2,zero,47000 <___vfprintf_internal_r+0x1f78>
   46244:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   46248:	9880210c 	andi	r2,r19,132
   4624c:	10802018 	cmpnei	r2,r2,128
   46250:	1000351e 	bne	r2,zero,46328 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
   46254:	e0ffad17 	ldw	r3,-332(fp)
   46258:	e0bfb517 	ldw	r2,-300(fp)
   4625c:	18a1c83a 	sub	r16,r3,r2
   46260:	0400310e 	bge	zero,r16,46328 <___vfprintf_internal_r+0x12a0>
   46264:	00001706 	br	462c4 <___vfprintf_internal_r+0x123c>
   46268:	00800174 	movhi	r2,5
   4626c:	1093d584 	addi	r2,r2,20310
   46270:	88800015 	stw	r2,0(r17)
   46274:	00800404 	movi	r2,16
   46278:	88800115 	stw	r2,4(r17)
   4627c:	e0bfca17 	ldw	r2,-216(fp)
   46280:	10800404 	addi	r2,r2,16
   46284:	e0bfca15 	stw	r2,-216(fp)
   46288:	8c400204 	addi	r17,r17,8
   4628c:	e0bfc917 	ldw	r2,-220(fp)
   46290:	10800044 	addi	r2,r2,1
   46294:	e0bfc915 	stw	r2,-220(fp)
   46298:	e0bfc917 	ldw	r2,-220(fp)
   4629c:	10800210 	cmplti	r2,r2,8
   462a0:	1000071e 	bne	r2,zero,462c0 <___vfprintf_internal_r+0x1238>
   462a4:	e0bfc804 	addi	r2,fp,-224
   462a8:	100d883a 	mov	r6,r2
   462ac:	e17fe717 	ldw	r5,-100(fp)
   462b0:	e13fe617 	ldw	r4,-104(fp)
   462b4:	004f3e80 	call	4f3e8 <__sprint_r>
   462b8:	1003531e 	bne	r2,zero,47008 <___vfprintf_internal_r+0x1f80>
   462bc:	e47fcb04 	addi	r17,fp,-212
   462c0:	843ffc04 	addi	r16,r16,-16
   462c4:	80800448 	cmpgei	r2,r16,17
   462c8:	103fe71e 	bne	r2,zero,46268 <_gp+0xfffe7090>
   462cc:	00800174 	movhi	r2,5
   462d0:	1093d584 	addi	r2,r2,20310
   462d4:	88800015 	stw	r2,0(r17)
   462d8:	8005883a 	mov	r2,r16
   462dc:	88800115 	stw	r2,4(r17)
   462e0:	e0bfca17 	ldw	r2,-216(fp)
   462e4:	8007883a 	mov	r3,r16
   462e8:	10c5883a 	add	r2,r2,r3
   462ec:	e0bfca15 	stw	r2,-216(fp)
   462f0:	8c400204 	addi	r17,r17,8
   462f4:	e0bfc917 	ldw	r2,-220(fp)
   462f8:	10800044 	addi	r2,r2,1
   462fc:	e0bfc915 	stw	r2,-220(fp)
   46300:	e0bfc917 	ldw	r2,-220(fp)
   46304:	10800210 	cmplti	r2,r2,8
   46308:	1000071e 	bne	r2,zero,46328 <___vfprintf_internal_r+0x12a0>
   4630c:	e0bfc804 	addi	r2,fp,-224
   46310:	100d883a 	mov	r6,r2
   46314:	e17fe717 	ldw	r5,-100(fp)
   46318:	e13fe617 	ldw	r4,-104(fp)
   4631c:	004f3e80 	call	4f3e8 <__sprint_r>
   46320:	10033b1e 	bne	r2,zero,47010 <___vfprintf_internal_r+0x1f88>
   46324:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   46328:	e0ffb417 	ldw	r3,-304(fp)
   4632c:	e0bfb617 	ldw	r2,-296(fp)
   46330:	18a1c83a 	sub	r16,r3,r2
   46334:	0400310e 	bge	zero,r16,463fc <___vfprintf_internal_r+0x1374>
   46338:	00001706 	br	46398 <___vfprintf_internal_r+0x1310>
   4633c:	00800174 	movhi	r2,5
   46340:	1093d584 	addi	r2,r2,20310
   46344:	88800015 	stw	r2,0(r17)
   46348:	00800404 	movi	r2,16
   4634c:	88800115 	stw	r2,4(r17)
   46350:	e0bfca17 	ldw	r2,-216(fp)
   46354:	10800404 	addi	r2,r2,16
   46358:	e0bfca15 	stw	r2,-216(fp)
   4635c:	8c400204 	addi	r17,r17,8
   46360:	e0bfc917 	ldw	r2,-220(fp)
   46364:	10800044 	addi	r2,r2,1
   46368:	e0bfc915 	stw	r2,-220(fp)
   4636c:	e0bfc917 	ldw	r2,-220(fp)
   46370:	10800210 	cmplti	r2,r2,8
   46374:	1000071e 	bne	r2,zero,46394 <___vfprintf_internal_r+0x130c>
   46378:	e0bfc804 	addi	r2,fp,-224
   4637c:	100d883a 	mov	r6,r2
   46380:	e17fe717 	ldw	r5,-100(fp)
   46384:	e13fe617 	ldw	r4,-104(fp)
   46388:	004f3e80 	call	4f3e8 <__sprint_r>
   4638c:	1003221e 	bne	r2,zero,47018 <___vfprintf_internal_r+0x1f90>
   46390:	e47fcb04 	addi	r17,fp,-212
   46394:	843ffc04 	addi	r16,r16,-16
   46398:	80800448 	cmpgei	r2,r16,17
   4639c:	103fe71e 	bne	r2,zero,4633c <_gp+0xfffe7164>
   463a0:	00800174 	movhi	r2,5
   463a4:	1093d584 	addi	r2,r2,20310
   463a8:	88800015 	stw	r2,0(r17)
   463ac:	8005883a 	mov	r2,r16
   463b0:	88800115 	stw	r2,4(r17)
   463b4:	e0bfca17 	ldw	r2,-216(fp)
   463b8:	8007883a 	mov	r3,r16
   463bc:	10c5883a 	add	r2,r2,r3
   463c0:	e0bfca15 	stw	r2,-216(fp)
   463c4:	8c400204 	addi	r17,r17,8
   463c8:	e0bfc917 	ldw	r2,-220(fp)
   463cc:	10800044 	addi	r2,r2,1
   463d0:	e0bfc915 	stw	r2,-220(fp)
   463d4:	e0bfc917 	ldw	r2,-220(fp)
   463d8:	10800210 	cmplti	r2,r2,8
   463dc:	1000071e 	bne	r2,zero,463fc <___vfprintf_internal_r+0x1374>
   463e0:	e0bfc804 	addi	r2,fp,-224
   463e4:	100d883a 	mov	r6,r2
   463e8:	e17fe717 	ldw	r5,-100(fp)
   463ec:	e13fe617 	ldw	r4,-104(fp)
   463f0:	004f3e80 	call	4f3e8 <__sprint_r>
   463f4:	10030a1e 	bne	r2,zero,47020 <___vfprintf_internal_r+0x1f98>
   463f8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   463fc:	9880400c 	andi	r2,r19,256
   46400:	1000161e 	bne	r2,zero,4645c <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
   46404:	8c800015 	stw	r18,0(r17)
   46408:	e0bfb617 	ldw	r2,-296(fp)
   4640c:	88800115 	stw	r2,4(r17)
   46410:	e0ffca17 	ldw	r3,-216(fp)
   46414:	e0bfb617 	ldw	r2,-296(fp)
   46418:	1885883a 	add	r2,r3,r2
   4641c:	e0bfca15 	stw	r2,-216(fp)
   46420:	8c400204 	addi	r17,r17,8
   46424:	e0bfc917 	ldw	r2,-220(fp)
   46428:	10800044 	addi	r2,r2,1
   4642c:	e0bfc915 	stw	r2,-220(fp)
   46430:	e0bfc917 	ldw	r2,-220(fp)
   46434:	10800210 	cmplti	r2,r2,8
   46438:	10028c1e 	bne	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
   4643c:	e0bfc804 	addi	r2,fp,-224
   46440:	100d883a 	mov	r6,r2
   46444:	e17fe717 	ldw	r5,-100(fp)
   46448:	e13fe617 	ldw	r4,-104(fp)
   4644c:	004f3e80 	call	4f3e8 <__sprint_r>
   46450:	1002f51e 	bne	r2,zero,47028 <___vfprintf_internal_r+0x1fa0>
   46454:	e47fcb04 	addi	r17,fp,-212
   46458:	00028406 	br	46e6c <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
   4645c:	a0801990 	cmplti	r2,r20,102
   46460:	1001d11e 	bne	r2,zero,46ba8 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
   46464:	e0bfc217 	ldw	r2,-248(fp)
   46468:	e0ffc317 	ldw	r3,-244(fp)
   4646c:	000d883a 	mov	r6,zero
   46470:	000f883a 	mov	r7,zero
   46474:	1009883a 	mov	r4,r2
   46478:	180b883a 	mov	r5,r3
   4647c:	00522600 	call	52260 <__eqdf2>
   46480:	1000661e 	bne	r2,zero,4661c <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   46484:	00800174 	movhi	r2,5
   46488:	1093d104 	addi	r2,r2,20292
   4648c:	88800015 	stw	r2,0(r17)
   46490:	00800044 	movi	r2,1
   46494:	88800115 	stw	r2,4(r17)
   46498:	e0bfca17 	ldw	r2,-216(fp)
   4649c:	10800044 	addi	r2,r2,1
   464a0:	e0bfca15 	stw	r2,-216(fp)
   464a4:	8c400204 	addi	r17,r17,8
   464a8:	e0bfc917 	ldw	r2,-220(fp)
   464ac:	10800044 	addi	r2,r2,1
   464b0:	e0bfc915 	stw	r2,-220(fp)
   464b4:	e0bfc917 	ldw	r2,-220(fp)
   464b8:	10800210 	cmplti	r2,r2,8
   464bc:	1000071e 	bne	r2,zero,464dc <___vfprintf_internal_r+0x1454>
   464c0:	e0bfc804 	addi	r2,fp,-224
   464c4:	100d883a 	mov	r6,r2
   464c8:	e17fe717 	ldw	r5,-100(fp)
   464cc:	e13fe617 	ldw	r4,-104(fp)
   464d0:	004f3e80 	call	4f3e8 <__sprint_r>
   464d4:	1002d61e 	bne	r2,zero,47030 <___vfprintf_internal_r+0x1fa8>
   464d8:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
   464dc:	e0ffc417 	ldw	r3,-240(fp)
   464e0:	e0bfc717 	ldw	r2,-228(fp)
   464e4:	18800216 	blt	r3,r2,464f0 <___vfprintf_internal_r+0x1468>
   464e8:	9880004c 	andi	r2,r19,1
   464ec:	10025f26 	beq	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   464f0:	e0bfbb17 	ldw	r2,-276(fp)
   464f4:	88800015 	stw	r2,0(r17)
   464f8:	e0bfbc17 	ldw	r2,-272(fp)
   464fc:	88800115 	stw	r2,4(r17)
   46500:	e0ffca17 	ldw	r3,-216(fp)
   46504:	e0bfbc17 	ldw	r2,-272(fp)
   46508:	1885883a 	add	r2,r3,r2
   4650c:	e0bfca15 	stw	r2,-216(fp)
   46510:	8c400204 	addi	r17,r17,8
   46514:	e0bfc917 	ldw	r2,-220(fp)
   46518:	10800044 	addi	r2,r2,1
   4651c:	e0bfc915 	stw	r2,-220(fp)
   46520:	e0bfc917 	ldw	r2,-220(fp)
   46524:	10800210 	cmplti	r2,r2,8
   46528:	1000071e 	bne	r2,zero,46548 <___vfprintf_internal_r+0x14c0>
   4652c:	e0bfc804 	addi	r2,fp,-224
   46530:	100d883a 	mov	r6,r2
   46534:	e17fe717 	ldw	r5,-100(fp)
   46538:	e13fe617 	ldw	r4,-104(fp)
   4653c:	004f3e80 	call	4f3e8 <__sprint_r>
   46540:	1002bd1e 	bne	r2,zero,47038 <___vfprintf_internal_r+0x1fb0>
   46544:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
   46548:	e0bfc717 	ldw	r2,-228(fp)
   4654c:	143fffc4 	addi	r16,r2,-1
   46550:	0402460e 	bge	zero,r16,46e6c <___vfprintf_internal_r+0x1de4>
   46554:	00001706 	br	465b4 <___vfprintf_internal_r+0x152c>
   46558:	00800174 	movhi	r2,5
   4655c:	1093d584 	addi	r2,r2,20310
   46560:	88800015 	stw	r2,0(r17)
   46564:	00800404 	movi	r2,16
   46568:	88800115 	stw	r2,4(r17)
   4656c:	e0bfca17 	ldw	r2,-216(fp)
   46570:	10800404 	addi	r2,r2,16
   46574:	e0bfca15 	stw	r2,-216(fp)
   46578:	8c400204 	addi	r17,r17,8
   4657c:	e0bfc917 	ldw	r2,-220(fp)
   46580:	10800044 	addi	r2,r2,1
   46584:	e0bfc915 	stw	r2,-220(fp)
   46588:	e0bfc917 	ldw	r2,-220(fp)
   4658c:	10800210 	cmplti	r2,r2,8
   46590:	1000071e 	bne	r2,zero,465b0 <___vfprintf_internal_r+0x1528>
   46594:	e0bfc804 	addi	r2,fp,-224
   46598:	100d883a 	mov	r6,r2
   4659c:	e17fe717 	ldw	r5,-100(fp)
   465a0:	e13fe617 	ldw	r4,-104(fp)
   465a4:	004f3e80 	call	4f3e8 <__sprint_r>
   465a8:	1002a51e 	bne	r2,zero,47040 <___vfprintf_internal_r+0x1fb8>
   465ac:	e47fcb04 	addi	r17,fp,-212
   465b0:	843ffc04 	addi	r16,r16,-16
   465b4:	80800448 	cmpgei	r2,r16,17
   465b8:	103fe71e 	bne	r2,zero,46558 <_gp+0xfffe7380>
   465bc:	00800174 	movhi	r2,5
   465c0:	1093d584 	addi	r2,r2,20310
   465c4:	88800015 	stw	r2,0(r17)
   465c8:	8005883a 	mov	r2,r16
   465cc:	88800115 	stw	r2,4(r17)
   465d0:	e0bfca17 	ldw	r2,-216(fp)
   465d4:	8007883a 	mov	r3,r16
   465d8:	10c5883a 	add	r2,r2,r3
   465dc:	e0bfca15 	stw	r2,-216(fp)
   465e0:	8c400204 	addi	r17,r17,8
   465e4:	e0bfc917 	ldw	r2,-220(fp)
   465e8:	10800044 	addi	r2,r2,1
   465ec:	e0bfc915 	stw	r2,-220(fp)
   465f0:	e0bfc917 	ldw	r2,-220(fp)
   465f4:	10800210 	cmplti	r2,r2,8
   465f8:	10021c1e 	bne	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
   465fc:	e0bfc804 	addi	r2,fp,-224
   46600:	100d883a 	mov	r6,r2
   46604:	e17fe717 	ldw	r5,-100(fp)
   46608:	e13fe617 	ldw	r4,-104(fp)
   4660c:	004f3e80 	call	4f3e8 <__sprint_r>
   46610:	10028d1e 	bne	r2,zero,47048 <___vfprintf_internal_r+0x1fc0>
   46614:	e47fcb04 	addi	r17,fp,-212
   46618:	00021406 	br	46e6c <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
   4661c:	e0bfc417 	ldw	r2,-240(fp)
   46620:	00807c16 	blt	zero,r2,46814 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
   46624:	00800174 	movhi	r2,5
   46628:	1093d104 	addi	r2,r2,20292
   4662c:	88800015 	stw	r2,0(r17)
   46630:	00800044 	movi	r2,1
   46634:	88800115 	stw	r2,4(r17)
   46638:	e0bfca17 	ldw	r2,-216(fp)
   4663c:	10800044 	addi	r2,r2,1
   46640:	e0bfca15 	stw	r2,-216(fp)
   46644:	8c400204 	addi	r17,r17,8
   46648:	e0bfc917 	ldw	r2,-220(fp)
   4664c:	10800044 	addi	r2,r2,1
   46650:	e0bfc915 	stw	r2,-220(fp)
   46654:	e0bfc917 	ldw	r2,-220(fp)
   46658:	10800210 	cmplti	r2,r2,8
   4665c:	1000071e 	bne	r2,zero,4667c <___vfprintf_internal_r+0x15f4>
   46660:	e0bfc804 	addi	r2,fp,-224
   46664:	100d883a 	mov	r6,r2
   46668:	e17fe717 	ldw	r5,-100(fp)
   4666c:	e13fe617 	ldw	r4,-104(fp)
   46670:	004f3e80 	call	4f3e8 <__sprint_r>
   46674:	1002761e 	bne	r2,zero,47050 <___vfprintf_internal_r+0x1fc8>
   46678:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
   4667c:	e0bfc417 	ldw	r2,-240(fp)
   46680:	1000041e 	bne	r2,zero,46694 <___vfprintf_internal_r+0x160c>
   46684:	e0bfc717 	ldw	r2,-228(fp)
   46688:	1000021e 	bne	r2,zero,46694 <___vfprintf_internal_r+0x160c>
   4668c:	9880004c 	andi	r2,r19,1
   46690:	1001f626 	beq	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
   46694:	e0bfbb17 	ldw	r2,-276(fp)
   46698:	88800015 	stw	r2,0(r17)
   4669c:	e0bfbc17 	ldw	r2,-272(fp)
   466a0:	88800115 	stw	r2,4(r17)
   466a4:	e0ffca17 	ldw	r3,-216(fp)
   466a8:	e0bfbc17 	ldw	r2,-272(fp)
   466ac:	1885883a 	add	r2,r3,r2
   466b0:	e0bfca15 	stw	r2,-216(fp)
   466b4:	8c400204 	addi	r17,r17,8
   466b8:	e0bfc917 	ldw	r2,-220(fp)
   466bc:	10800044 	addi	r2,r2,1
   466c0:	e0bfc915 	stw	r2,-220(fp)
   466c4:	e0bfc917 	ldw	r2,-220(fp)
   466c8:	10800210 	cmplti	r2,r2,8
   466cc:	1000071e 	bne	r2,zero,466ec <___vfprintf_internal_r+0x1664>
   466d0:	e0bfc804 	addi	r2,fp,-224
   466d4:	100d883a 	mov	r6,r2
   466d8:	e17fe717 	ldw	r5,-100(fp)
   466dc:	e13fe617 	ldw	r4,-104(fp)
   466e0:	004f3e80 	call	4f3e8 <__sprint_r>
   466e4:	10025c1e 	bne	r2,zero,47058 <___vfprintf_internal_r+0x1fd0>
   466e8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
   466ec:	e0bfc417 	ldw	r2,-240(fp)
   466f0:	00a1c83a 	sub	r16,zero,r2
   466f4:	0400310e 	bge	zero,r16,467bc <___vfprintf_internal_r+0x1734>
   466f8:	00001706 	br	46758 <___vfprintf_internal_r+0x16d0>
   466fc:	00800174 	movhi	r2,5
   46700:	1093d584 	addi	r2,r2,20310
   46704:	88800015 	stw	r2,0(r17)
   46708:	00800404 	movi	r2,16
   4670c:	88800115 	stw	r2,4(r17)
   46710:	e0bfca17 	ldw	r2,-216(fp)
   46714:	10800404 	addi	r2,r2,16
   46718:	e0bfca15 	stw	r2,-216(fp)
   4671c:	8c400204 	addi	r17,r17,8
   46720:	e0bfc917 	ldw	r2,-220(fp)
   46724:	10800044 	addi	r2,r2,1
   46728:	e0bfc915 	stw	r2,-220(fp)
   4672c:	e0bfc917 	ldw	r2,-220(fp)
   46730:	10800210 	cmplti	r2,r2,8
   46734:	1000071e 	bne	r2,zero,46754 <___vfprintf_internal_r+0x16cc>
   46738:	e0bfc804 	addi	r2,fp,-224
   4673c:	100d883a 	mov	r6,r2
   46740:	e17fe717 	ldw	r5,-100(fp)
   46744:	e13fe617 	ldw	r4,-104(fp)
   46748:	004f3e80 	call	4f3e8 <__sprint_r>
   4674c:	1002441e 	bne	r2,zero,47060 <___vfprintf_internal_r+0x1fd8>
   46750:	e47fcb04 	addi	r17,fp,-212
   46754:	843ffc04 	addi	r16,r16,-16
   46758:	80800448 	cmpgei	r2,r16,17
   4675c:	103fe71e 	bne	r2,zero,466fc <_gp+0xfffe7524>
   46760:	00800174 	movhi	r2,5
   46764:	1093d584 	addi	r2,r2,20310
   46768:	88800015 	stw	r2,0(r17)
   4676c:	8005883a 	mov	r2,r16
   46770:	88800115 	stw	r2,4(r17)
   46774:	e0bfca17 	ldw	r2,-216(fp)
   46778:	8007883a 	mov	r3,r16
   4677c:	10c5883a 	add	r2,r2,r3
   46780:	e0bfca15 	stw	r2,-216(fp)
   46784:	8c400204 	addi	r17,r17,8
   46788:	e0bfc917 	ldw	r2,-220(fp)
   4678c:	10800044 	addi	r2,r2,1
   46790:	e0bfc915 	stw	r2,-220(fp)
   46794:	e0bfc917 	ldw	r2,-220(fp)
   46798:	10800210 	cmplti	r2,r2,8
   4679c:	1000071e 	bne	r2,zero,467bc <___vfprintf_internal_r+0x1734>
   467a0:	e0bfc804 	addi	r2,fp,-224
   467a4:	100d883a 	mov	r6,r2
   467a8:	e17fe717 	ldw	r5,-100(fp)
   467ac:	e13fe617 	ldw	r4,-104(fp)
   467b0:	004f3e80 	call	4f3e8 <__sprint_r>
   467b4:	10022c1e 	bne	r2,zero,47068 <___vfprintf_internal_r+0x1fe0>
   467b8:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
   467bc:	8c800015 	stw	r18,0(r17)
   467c0:	e0bfc717 	ldw	r2,-228(fp)
   467c4:	88800115 	stw	r2,4(r17)
   467c8:	e0bfca17 	ldw	r2,-216(fp)
   467cc:	e0ffc717 	ldw	r3,-228(fp)
   467d0:	10c5883a 	add	r2,r2,r3
   467d4:	e0bfca15 	stw	r2,-216(fp)
   467d8:	8c400204 	addi	r17,r17,8
   467dc:	e0bfc917 	ldw	r2,-220(fp)
   467e0:	10800044 	addi	r2,r2,1
   467e4:	e0bfc915 	stw	r2,-220(fp)
   467e8:	e0bfc917 	ldw	r2,-220(fp)
   467ec:	10800210 	cmplti	r2,r2,8
   467f0:	10019e1e 	bne	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
   467f4:	e0bfc804 	addi	r2,fp,-224
   467f8:	100d883a 	mov	r6,r2
   467fc:	e17fe717 	ldw	r5,-100(fp)
   46800:	e13fe617 	ldw	r4,-104(fp)
   46804:	004f3e80 	call	4f3e8 <__sprint_r>
   46808:	1002191e 	bne	r2,zero,47070 <___vfprintf_internal_r+0x1fe8>
   4680c:	e47fcb04 	addi	r17,fp,-212
   46810:	00019606 	br	46e6c <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
   46814:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
   46818:	e0bfc717 	ldw	r2,-228(fp)
   4681c:	1007883a 	mov	r3,r2
   46820:	e0bfc017 	ldw	r2,-256(fp)
   46824:	10c5883a 	add	r2,r2,r3
   46828:	1007883a 	mov	r3,r2
   4682c:	9005883a 	mov	r2,r18
   46830:	1885c83a 	sub	r2,r3,r2
   46834:	e0bfb915 	stw	r2,-284(fp)
   46838:	e0bfb917 	ldw	r2,-284(fp)
   4683c:	e0ffb017 	ldw	r3,-320(fp)
   46840:	1880020e 	bge	r3,r2,4684c <___vfprintf_internal_r+0x17c4>
   46844:	e0bfb017 	ldw	r2,-320(fp)
   46848:	e0bfb915 	stw	r2,-284(fp)
   4684c:	e0bfb917 	ldw	r2,-284(fp)
   46850:	0080150e 	bge	zero,r2,468a8 <___vfprintf_internal_r+0x1820>
   46854:	8c800015 	stw	r18,0(r17)
   46858:	e0bfb917 	ldw	r2,-284(fp)
   4685c:	88800115 	stw	r2,4(r17)
   46860:	e0ffca17 	ldw	r3,-216(fp)
   46864:	e0bfb917 	ldw	r2,-284(fp)
   46868:	1885883a 	add	r2,r3,r2
   4686c:	e0bfca15 	stw	r2,-216(fp)
   46870:	8c400204 	addi	r17,r17,8
   46874:	e0bfc917 	ldw	r2,-220(fp)
   46878:	10800044 	addi	r2,r2,1
   4687c:	e0bfc915 	stw	r2,-220(fp)
   46880:	e0bfc917 	ldw	r2,-220(fp)
   46884:	10800210 	cmplti	r2,r2,8
   46888:	1000071e 	bne	r2,zero,468a8 <___vfprintf_internal_r+0x1820>
   4688c:	e0bfc804 	addi	r2,fp,-224
   46890:	100d883a 	mov	r6,r2
   46894:	e17fe717 	ldw	r5,-100(fp)
   46898:	e13fe617 	ldw	r4,-104(fp)
   4689c:	004f3e80 	call	4f3e8 <__sprint_r>
   468a0:	1001f51e 	bne	r2,zero,47078 <___vfprintf_internal_r+0x1ff0>
   468a4:	e47fcb04 	addi	r17,fp,-212
   468a8:	e0bfb917 	ldw	r2,-284(fp)
   468ac:	1000010e 	bge	r2,zero,468b4 <___vfprintf_internal_r+0x182c>
   468b0:	0005883a 	mov	r2,zero
   468b4:	e0ffb017 	ldw	r3,-320(fp)
   468b8:	1885c83a 	sub	r2,r3,r2
   468bc:	e0bfb915 	stw	r2,-284(fp)
   468c0:	e0bfb917 	ldw	r2,-284(fp)
   468c4:	0080340e 	bge	zero,r2,46998 <___vfprintf_internal_r+0x1910>
   468c8:	00001906 	br	46930 <___vfprintf_internal_r+0x18a8>
   468cc:	00800174 	movhi	r2,5
   468d0:	1093d584 	addi	r2,r2,20310
   468d4:	88800015 	stw	r2,0(r17)
   468d8:	00800404 	movi	r2,16
   468dc:	88800115 	stw	r2,4(r17)
   468e0:	e0bfca17 	ldw	r2,-216(fp)
   468e4:	10800404 	addi	r2,r2,16
   468e8:	e0bfca15 	stw	r2,-216(fp)
   468ec:	8c400204 	addi	r17,r17,8
   468f0:	e0bfc917 	ldw	r2,-220(fp)
   468f4:	10800044 	addi	r2,r2,1
   468f8:	e0bfc915 	stw	r2,-220(fp)
   468fc:	e0bfc917 	ldw	r2,-220(fp)
   46900:	10800210 	cmplti	r2,r2,8
   46904:	1000071e 	bne	r2,zero,46924 <___vfprintf_internal_r+0x189c>
   46908:	e0bfc804 	addi	r2,fp,-224
   4690c:	100d883a 	mov	r6,r2
   46910:	e17fe717 	ldw	r5,-100(fp)
   46914:	e13fe617 	ldw	r4,-104(fp)
   46918:	004f3e80 	call	4f3e8 <__sprint_r>
   4691c:	1001d81e 	bne	r2,zero,47080 <___vfprintf_internal_r+0x1ff8>
   46920:	e47fcb04 	addi	r17,fp,-212
   46924:	e0bfb917 	ldw	r2,-284(fp)
   46928:	10bffc04 	addi	r2,r2,-16
   4692c:	e0bfb915 	stw	r2,-284(fp)
   46930:	e0bfb917 	ldw	r2,-284(fp)
   46934:	10800448 	cmpgei	r2,r2,17
   46938:	103fe41e 	bne	r2,zero,468cc <_gp+0xfffe76f4>
   4693c:	00800174 	movhi	r2,5
   46940:	1093d584 	addi	r2,r2,20310
   46944:	88800015 	stw	r2,0(r17)
   46948:	e0bfb917 	ldw	r2,-284(fp)
   4694c:	88800115 	stw	r2,4(r17)
   46950:	e0ffca17 	ldw	r3,-216(fp)
   46954:	e0bfb917 	ldw	r2,-284(fp)
   46958:	1885883a 	add	r2,r3,r2
   4695c:	e0bfca15 	stw	r2,-216(fp)
   46960:	8c400204 	addi	r17,r17,8
   46964:	e0bfc917 	ldw	r2,-220(fp)
   46968:	10800044 	addi	r2,r2,1
   4696c:	e0bfc915 	stw	r2,-220(fp)
   46970:	e0bfc917 	ldw	r2,-220(fp)
   46974:	10800210 	cmplti	r2,r2,8
   46978:	1000071e 	bne	r2,zero,46998 <___vfprintf_internal_r+0x1910>
   4697c:	e0bfc804 	addi	r2,fp,-224
   46980:	100d883a 	mov	r6,r2
   46984:	e17fe717 	ldw	r5,-100(fp)
   46988:	e13fe617 	ldw	r4,-104(fp)
   4698c:	004f3e80 	call	4f3e8 <__sprint_r>
   46990:	1001bd1e 	bne	r2,zero,47088 <___vfprintf_internal_r+0x2000>
   46994:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
   46998:	e0bfb017 	ldw	r2,-320(fp)
   4699c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
   469a0:	e0ffc417 	ldw	r3,-240(fp)
   469a4:	e0bfc717 	ldw	r2,-228(fp)
   469a8:	18800216 	blt	r3,r2,469b4 <___vfprintf_internal_r+0x192c>
   469ac:	9880004c 	andi	r2,r19,1
   469b0:	10001626 	beq	r2,zero,46a0c <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
   469b4:	e0bfbb17 	ldw	r2,-276(fp)
   469b8:	88800015 	stw	r2,0(r17)
   469bc:	e0bfbc17 	ldw	r2,-272(fp)
   469c0:	88800115 	stw	r2,4(r17)
   469c4:	e0ffca17 	ldw	r3,-216(fp)
   469c8:	e0bfbc17 	ldw	r2,-272(fp)
   469cc:	1885883a 	add	r2,r3,r2
   469d0:	e0bfca15 	stw	r2,-216(fp)
   469d4:	8c400204 	addi	r17,r17,8
   469d8:	e0bfc917 	ldw	r2,-220(fp)
   469dc:	10800044 	addi	r2,r2,1
   469e0:	e0bfc915 	stw	r2,-220(fp)
   469e4:	e0bfc917 	ldw	r2,-220(fp)
   469e8:	10800210 	cmplti	r2,r2,8
   469ec:	1000071e 	bne	r2,zero,46a0c <___vfprintf_internal_r+0x1984>
   469f0:	e0bfc804 	addi	r2,fp,-224
   469f4:	100d883a 	mov	r6,r2
   469f8:	e17fe717 	ldw	r5,-100(fp)
   469fc:	e13fe617 	ldw	r4,-104(fp)
   46a00:	004f3e80 	call	4f3e8 <__sprint_r>
   46a04:	1001a21e 	bne	r2,zero,47090 <___vfprintf_internal_r+0x2008>
   46a08:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
   46a0c:	e0bfc717 	ldw	r2,-228(fp)
   46a10:	1007883a 	mov	r3,r2
   46a14:	e0bfc017 	ldw	r2,-256(fp)
   46a18:	10c5883a 	add	r2,r2,r3
   46a1c:	1007883a 	mov	r3,r2
   46a20:	9005883a 	mov	r2,r18
   46a24:	1885c83a 	sub	r2,r3,r2
   46a28:	e0bfba15 	stw	r2,-280(fp)
   46a2c:	e0ffc717 	ldw	r3,-228(fp)
   46a30:	e0bfc417 	ldw	r2,-240(fp)
   46a34:	1887c83a 	sub	r3,r3,r2
   46a38:	e0bfba17 	ldw	r2,-280(fp)
   46a3c:	1880040e 	bge	r3,r2,46a50 <___vfprintf_internal_r+0x19c8>
   46a40:	e0ffc717 	ldw	r3,-228(fp)
   46a44:	e0bfc417 	ldw	r2,-240(fp)
   46a48:	1885c83a 	sub	r2,r3,r2
   46a4c:	e0bfba15 	stw	r2,-280(fp)
   46a50:	e0bfba17 	ldw	r2,-280(fp)
   46a54:	0080150e 	bge	zero,r2,46aac <___vfprintf_internal_r+0x1a24>
   46a58:	8c800015 	stw	r18,0(r17)
   46a5c:	e0bfba17 	ldw	r2,-280(fp)
   46a60:	88800115 	stw	r2,4(r17)
   46a64:	e0ffca17 	ldw	r3,-216(fp)
   46a68:	e0bfba17 	ldw	r2,-280(fp)
   46a6c:	1885883a 	add	r2,r3,r2
   46a70:	e0bfca15 	stw	r2,-216(fp)
   46a74:	8c400204 	addi	r17,r17,8
   46a78:	e0bfc917 	ldw	r2,-220(fp)
   46a7c:	10800044 	addi	r2,r2,1
   46a80:	e0bfc915 	stw	r2,-220(fp)
   46a84:	e0bfc917 	ldw	r2,-220(fp)
   46a88:	10800210 	cmplti	r2,r2,8
   46a8c:	1000071e 	bne	r2,zero,46aac <___vfprintf_internal_r+0x1a24>
   46a90:	e0bfc804 	addi	r2,fp,-224
   46a94:	100d883a 	mov	r6,r2
   46a98:	e17fe717 	ldw	r5,-100(fp)
   46a9c:	e13fe617 	ldw	r4,-104(fp)
   46aa0:	004f3e80 	call	4f3e8 <__sprint_r>
   46aa4:	10017c1e 	bne	r2,zero,47098 <___vfprintf_internal_r+0x2010>
   46aa8:	e47fcb04 	addi	r17,fp,-212
   46aac:	e0ffc717 	ldw	r3,-228(fp)
   46ab0:	e0bfc417 	ldw	r2,-240(fp)
   46ab4:	1887c83a 	sub	r3,r3,r2
   46ab8:	e0bfba17 	ldw	r2,-280(fp)
   46abc:	1000010e 	bge	r2,zero,46ac4 <___vfprintf_internal_r+0x1a3c>
   46ac0:	0005883a 	mov	r2,zero
   46ac4:	1885c83a 	sub	r2,r3,r2
   46ac8:	e0bfba15 	stw	r2,-280(fp)
   46acc:	e0bfba17 	ldw	r2,-280(fp)
   46ad0:	0080e60e 	bge	zero,r2,46e6c <___vfprintf_internal_r+0x1de4>
   46ad4:	00001906 	br	46b3c <___vfprintf_internal_r+0x1ab4>
   46ad8:	00800174 	movhi	r2,5
   46adc:	1093d584 	addi	r2,r2,20310
   46ae0:	88800015 	stw	r2,0(r17)
   46ae4:	00800404 	movi	r2,16
   46ae8:	88800115 	stw	r2,4(r17)
   46aec:	e0bfca17 	ldw	r2,-216(fp)
   46af0:	10800404 	addi	r2,r2,16
   46af4:	e0bfca15 	stw	r2,-216(fp)
   46af8:	8c400204 	addi	r17,r17,8
   46afc:	e0bfc917 	ldw	r2,-220(fp)
   46b00:	10800044 	addi	r2,r2,1
   46b04:	e0bfc915 	stw	r2,-220(fp)
   46b08:	e0bfc917 	ldw	r2,-220(fp)
   46b0c:	10800210 	cmplti	r2,r2,8
   46b10:	1000071e 	bne	r2,zero,46b30 <___vfprintf_internal_r+0x1aa8>
   46b14:	e0bfc804 	addi	r2,fp,-224
   46b18:	100d883a 	mov	r6,r2
   46b1c:	e17fe717 	ldw	r5,-100(fp)
   46b20:	e13fe617 	ldw	r4,-104(fp)
   46b24:	004f3e80 	call	4f3e8 <__sprint_r>
   46b28:	10015d1e 	bne	r2,zero,470a0 <___vfprintf_internal_r+0x2018>
   46b2c:	e47fcb04 	addi	r17,fp,-212
   46b30:	e0bfba17 	ldw	r2,-280(fp)
   46b34:	10bffc04 	addi	r2,r2,-16
   46b38:	e0bfba15 	stw	r2,-280(fp)
   46b3c:	e0bfba17 	ldw	r2,-280(fp)
   46b40:	10800448 	cmpgei	r2,r2,17
   46b44:	103fe41e 	bne	r2,zero,46ad8 <_gp+0xfffe7900>
   46b48:	00800174 	movhi	r2,5
   46b4c:	1093d584 	addi	r2,r2,20310
   46b50:	88800015 	stw	r2,0(r17)
   46b54:	e0bfba17 	ldw	r2,-280(fp)
   46b58:	88800115 	stw	r2,4(r17)
   46b5c:	e0ffca17 	ldw	r3,-216(fp)
   46b60:	e0bfba17 	ldw	r2,-280(fp)
   46b64:	1885883a 	add	r2,r3,r2
   46b68:	e0bfca15 	stw	r2,-216(fp)
   46b6c:	8c400204 	addi	r17,r17,8
   46b70:	e0bfc917 	ldw	r2,-220(fp)
   46b74:	10800044 	addi	r2,r2,1
   46b78:	e0bfc915 	stw	r2,-220(fp)
   46b7c:	e0bfc917 	ldw	r2,-220(fp)
   46b80:	10800210 	cmplti	r2,r2,8
   46b84:	1000b91e 	bne	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
   46b88:	e0bfc804 	addi	r2,fp,-224
   46b8c:	100d883a 	mov	r6,r2
   46b90:	e17fe717 	ldw	r5,-100(fp)
   46b94:	e13fe617 	ldw	r4,-104(fp)
   46b98:	004f3e80 	call	4f3e8 <__sprint_r>
   46b9c:	1001421e 	bne	r2,zero,470a8 <___vfprintf_internal_r+0x2020>
   46ba0:	e47fcb04 	addi	r17,fp,-212
   46ba4:	0000b106 	br	46e6c <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
   46ba8:	e0bfc717 	ldw	r2,-228(fp)
   46bac:	10800088 	cmpgei	r2,r2,2
   46bb0:	1000021e 	bne	r2,zero,46bbc <___vfprintf_internal_r+0x1b34>
   46bb4:	9880004c 	andi	r2,r19,1
   46bb8:	10008026 	beq	r2,zero,46dbc <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
   46bbc:	8c800015 	stw	r18,0(r17)
   46bc0:	00800044 	movi	r2,1
   46bc4:	88800115 	stw	r2,4(r17)
   46bc8:	e0bfca17 	ldw	r2,-216(fp)
   46bcc:	10800044 	addi	r2,r2,1
   46bd0:	e0bfca15 	stw	r2,-216(fp)
   46bd4:	8c400204 	addi	r17,r17,8
   46bd8:	e0bfc917 	ldw	r2,-220(fp)
   46bdc:	10800044 	addi	r2,r2,1
   46be0:	e0bfc915 	stw	r2,-220(fp)
   46be4:	e0bfc917 	ldw	r2,-220(fp)
   46be8:	10800210 	cmplti	r2,r2,8
   46bec:	1000071e 	bne	r2,zero,46c0c <___vfprintf_internal_r+0x1b84>
   46bf0:	e0bfc804 	addi	r2,fp,-224
   46bf4:	100d883a 	mov	r6,r2
   46bf8:	e17fe717 	ldw	r5,-100(fp)
   46bfc:	e13fe617 	ldw	r4,-104(fp)
   46c00:	004f3e80 	call	4f3e8 <__sprint_r>
   46c04:	10012a1e 	bne	r2,zero,470b0 <___vfprintf_internal_r+0x2028>
   46c08:	e47fcb04 	addi	r17,fp,-212
					cp++;
   46c0c:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
   46c10:	e0bfbb17 	ldw	r2,-276(fp)
   46c14:	88800015 	stw	r2,0(r17)
   46c18:	e0bfbc17 	ldw	r2,-272(fp)
   46c1c:	88800115 	stw	r2,4(r17)
   46c20:	e0ffca17 	ldw	r3,-216(fp)
   46c24:	e0bfbc17 	ldw	r2,-272(fp)
   46c28:	1885883a 	add	r2,r3,r2
   46c2c:	e0bfca15 	stw	r2,-216(fp)
   46c30:	8c400204 	addi	r17,r17,8
   46c34:	e0bfc917 	ldw	r2,-220(fp)
   46c38:	10800044 	addi	r2,r2,1
   46c3c:	e0bfc915 	stw	r2,-220(fp)
   46c40:	e0bfc917 	ldw	r2,-220(fp)
   46c44:	10800210 	cmplti	r2,r2,8
   46c48:	1000071e 	bne	r2,zero,46c68 <___vfprintf_internal_r+0x1be0>
   46c4c:	e0bfc804 	addi	r2,fp,-224
   46c50:	100d883a 	mov	r6,r2
   46c54:	e17fe717 	ldw	r5,-100(fp)
   46c58:	e13fe617 	ldw	r4,-104(fp)
   46c5c:	004f3e80 	call	4f3e8 <__sprint_r>
   46c60:	1001151e 	bne	r2,zero,470b8 <___vfprintf_internal_r+0x2030>
   46c64:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
   46c68:	e0bfc217 	ldw	r2,-248(fp)
   46c6c:	e0ffc317 	ldw	r3,-244(fp)
   46c70:	000d883a 	mov	r6,zero
   46c74:	000f883a 	mov	r7,zero
   46c78:	1009883a 	mov	r4,r2
   46c7c:	180b883a 	mov	r5,r3
   46c80:	00522600 	call	52260 <__eqdf2>
   46c84:	10001826 	beq	r2,zero,46ce8 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
   46c88:	8c800015 	stw	r18,0(r17)
   46c8c:	e0bfc717 	ldw	r2,-228(fp)
   46c90:	10bfffc4 	addi	r2,r2,-1
   46c94:	88800115 	stw	r2,4(r17)
   46c98:	e0bfca17 	ldw	r2,-216(fp)
   46c9c:	e0ffc717 	ldw	r3,-228(fp)
   46ca0:	10c5883a 	add	r2,r2,r3
   46ca4:	10bfffc4 	addi	r2,r2,-1
   46ca8:	e0bfca15 	stw	r2,-216(fp)
   46cac:	8c400204 	addi	r17,r17,8
   46cb0:	e0bfc917 	ldw	r2,-220(fp)
   46cb4:	10800044 	addi	r2,r2,1
   46cb8:	e0bfc915 	stw	r2,-220(fp)
   46cbc:	e0bfc917 	ldw	r2,-220(fp)
   46cc0:	10800210 	cmplti	r2,r2,8
   46cc4:	1000521e 	bne	r2,zero,46e10 <___vfprintf_internal_r+0x1d88>
   46cc8:	e0bfc804 	addi	r2,fp,-224
   46ccc:	100d883a 	mov	r6,r2
   46cd0:	e17fe717 	ldw	r5,-100(fp)
   46cd4:	e13fe617 	ldw	r4,-104(fp)
   46cd8:	004f3e80 	call	4f3e8 <__sprint_r>
   46cdc:	1000f81e 	bne	r2,zero,470c0 <___vfprintf_internal_r+0x2038>
   46ce0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   46ce4:	00004a06 	br	46e10 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   46ce8:	e0bfc717 	ldw	r2,-228(fp)
   46cec:	143fffc4 	addi	r16,r2,-1
   46cf0:	0400470e 	bge	zero,r16,46e10 <___vfprintf_internal_r+0x1d88>
   46cf4:	00001706 	br	46d54 <___vfprintf_internal_r+0x1ccc>
   46cf8:	00800174 	movhi	r2,5
   46cfc:	1093d584 	addi	r2,r2,20310
   46d00:	88800015 	stw	r2,0(r17)
   46d04:	00800404 	movi	r2,16
   46d08:	88800115 	stw	r2,4(r17)
   46d0c:	e0bfca17 	ldw	r2,-216(fp)
   46d10:	10800404 	addi	r2,r2,16
   46d14:	e0bfca15 	stw	r2,-216(fp)
   46d18:	8c400204 	addi	r17,r17,8
   46d1c:	e0bfc917 	ldw	r2,-220(fp)
   46d20:	10800044 	addi	r2,r2,1
   46d24:	e0bfc915 	stw	r2,-220(fp)
   46d28:	e0bfc917 	ldw	r2,-220(fp)
   46d2c:	10800210 	cmplti	r2,r2,8
   46d30:	1000071e 	bne	r2,zero,46d50 <___vfprintf_internal_r+0x1cc8>
   46d34:	e0bfc804 	addi	r2,fp,-224
   46d38:	100d883a 	mov	r6,r2
   46d3c:	e17fe717 	ldw	r5,-100(fp)
   46d40:	e13fe617 	ldw	r4,-104(fp)
   46d44:	004f3e80 	call	4f3e8 <__sprint_r>
   46d48:	1000df1e 	bne	r2,zero,470c8 <___vfprintf_internal_r+0x2040>
   46d4c:	e47fcb04 	addi	r17,fp,-212
   46d50:	843ffc04 	addi	r16,r16,-16
   46d54:	80800448 	cmpgei	r2,r16,17
   46d58:	103fe71e 	bne	r2,zero,46cf8 <_gp+0xfffe7b20>
   46d5c:	00800174 	movhi	r2,5
   46d60:	1093d584 	addi	r2,r2,20310
   46d64:	88800015 	stw	r2,0(r17)
   46d68:	8005883a 	mov	r2,r16
   46d6c:	88800115 	stw	r2,4(r17)
   46d70:	e0bfca17 	ldw	r2,-216(fp)
   46d74:	8007883a 	mov	r3,r16
   46d78:	10c5883a 	add	r2,r2,r3
   46d7c:	e0bfca15 	stw	r2,-216(fp)
   46d80:	8c400204 	addi	r17,r17,8
   46d84:	e0bfc917 	ldw	r2,-220(fp)
   46d88:	10800044 	addi	r2,r2,1
   46d8c:	e0bfc915 	stw	r2,-220(fp)
   46d90:	e0bfc917 	ldw	r2,-220(fp)
   46d94:	10800210 	cmplti	r2,r2,8
   46d98:	10001d1e 	bne	r2,zero,46e10 <___vfprintf_internal_r+0x1d88>
   46d9c:	e0bfc804 	addi	r2,fp,-224
   46da0:	100d883a 	mov	r6,r2
   46da4:	e17fe717 	ldw	r5,-100(fp)
   46da8:	e13fe617 	ldw	r4,-104(fp)
   46dac:	004f3e80 	call	4f3e8 <__sprint_r>
   46db0:	1000c71e 	bne	r2,zero,470d0 <___vfprintf_internal_r+0x2048>
   46db4:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   46db8:	00001506 	br	46e10 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
   46dbc:	8c800015 	stw	r18,0(r17)
   46dc0:	00800044 	movi	r2,1
   46dc4:	88800115 	stw	r2,4(r17)
   46dc8:	e0bfca17 	ldw	r2,-216(fp)
   46dcc:	10800044 	addi	r2,r2,1
   46dd0:	e0bfca15 	stw	r2,-216(fp)
   46dd4:	8c400204 	addi	r17,r17,8
   46dd8:	e0bfc917 	ldw	r2,-220(fp)
   46ddc:	10800044 	addi	r2,r2,1
   46de0:	e0bfc915 	stw	r2,-220(fp)
   46de4:	e0bfc917 	ldw	r2,-220(fp)
   46de8:	10800210 	cmplti	r2,r2,8
   46dec:	1000091e 	bne	r2,zero,46e14 <___vfprintf_internal_r+0x1d8c>
   46df0:	e0bfc804 	addi	r2,fp,-224
   46df4:	100d883a 	mov	r6,r2
   46df8:	e17fe717 	ldw	r5,-100(fp)
   46dfc:	e13fe617 	ldw	r4,-104(fp)
   46e00:	004f3e80 	call	4f3e8 <__sprint_r>
   46e04:	1000b41e 	bne	r2,zero,470d8 <___vfprintf_internal_r+0x2050>
   46e08:	e47fcb04 	addi	r17,fp,-212
   46e0c:	00000106 	br	46e14 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   46e10:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
   46e14:	e0bfc504 	addi	r2,fp,-236
   46e18:	88800015 	stw	r2,0(r17)
   46e1c:	e0bfaf17 	ldw	r2,-324(fp)
   46e20:	88800115 	stw	r2,4(r17)
   46e24:	e0ffca17 	ldw	r3,-216(fp)
   46e28:	e0bfaf17 	ldw	r2,-324(fp)
   46e2c:	1885883a 	add	r2,r3,r2
   46e30:	e0bfca15 	stw	r2,-216(fp)
   46e34:	8c400204 	addi	r17,r17,8
   46e38:	e0bfc917 	ldw	r2,-220(fp)
   46e3c:	10800044 	addi	r2,r2,1
   46e40:	e0bfc915 	stw	r2,-220(fp)
   46e44:	e0bfc917 	ldw	r2,-220(fp)
   46e48:	10800210 	cmplti	r2,r2,8
   46e4c:	1000071e 	bne	r2,zero,46e6c <___vfprintf_internal_r+0x1de4>
   46e50:	e0bfc804 	addi	r2,fp,-224
   46e54:	100d883a 	mov	r6,r2
   46e58:	e17fe717 	ldw	r5,-100(fp)
   46e5c:	e13fe617 	ldw	r4,-104(fp)
   46e60:	004f3e80 	call	4f3e8 <__sprint_r>
   46e64:	10009e1e 	bne	r2,zero,470e0 <___vfprintf_internal_r+0x2058>
   46e68:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   46e6c:	9880010c 	andi	r2,r19,4
   46e70:	10003526 	beq	r2,zero,46f48 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
   46e74:	e0ffad17 	ldw	r3,-332(fp)
   46e78:	e0bfb517 	ldw	r2,-300(fp)
   46e7c:	18a1c83a 	sub	r16,r3,r2
   46e80:	0400310e 	bge	zero,r16,46f48 <___vfprintf_internal_r+0x1ec0>
   46e84:	00001706 	br	46ee4 <___vfprintf_internal_r+0x1e5c>
   46e88:	00800174 	movhi	r2,5
   46e8c:	1093d184 	addi	r2,r2,20294
   46e90:	88800015 	stw	r2,0(r17)
   46e94:	00800404 	movi	r2,16
   46e98:	88800115 	stw	r2,4(r17)
   46e9c:	e0bfca17 	ldw	r2,-216(fp)
   46ea0:	10800404 	addi	r2,r2,16
   46ea4:	e0bfca15 	stw	r2,-216(fp)
   46ea8:	8c400204 	addi	r17,r17,8
   46eac:	e0bfc917 	ldw	r2,-220(fp)
   46eb0:	10800044 	addi	r2,r2,1
   46eb4:	e0bfc915 	stw	r2,-220(fp)
   46eb8:	e0bfc917 	ldw	r2,-220(fp)
   46ebc:	10800210 	cmplti	r2,r2,8
   46ec0:	1000071e 	bne	r2,zero,46ee0 <___vfprintf_internal_r+0x1e58>
   46ec4:	e0bfc804 	addi	r2,fp,-224
   46ec8:	100d883a 	mov	r6,r2
   46ecc:	e17fe717 	ldw	r5,-100(fp)
   46ed0:	e13fe617 	ldw	r4,-104(fp)
   46ed4:	004f3e80 	call	4f3e8 <__sprint_r>
   46ed8:	1000831e 	bne	r2,zero,470e8 <___vfprintf_internal_r+0x2060>
   46edc:	e47fcb04 	addi	r17,fp,-212
   46ee0:	843ffc04 	addi	r16,r16,-16
   46ee4:	80800448 	cmpgei	r2,r16,17
   46ee8:	103fe71e 	bne	r2,zero,46e88 <_gp+0xfffe7cb0>
   46eec:	00800174 	movhi	r2,5
   46ef0:	1093d184 	addi	r2,r2,20294
   46ef4:	88800015 	stw	r2,0(r17)
   46ef8:	8005883a 	mov	r2,r16
   46efc:	88800115 	stw	r2,4(r17)
   46f00:	e0bfca17 	ldw	r2,-216(fp)
   46f04:	8007883a 	mov	r3,r16
   46f08:	10c5883a 	add	r2,r2,r3
   46f0c:	e0bfca15 	stw	r2,-216(fp)
   46f10:	8c400204 	addi	r17,r17,8
   46f14:	e0bfc917 	ldw	r2,-220(fp)
   46f18:	10800044 	addi	r2,r2,1
   46f1c:	e0bfc915 	stw	r2,-220(fp)
   46f20:	e0bfc917 	ldw	r2,-220(fp)
   46f24:	10800210 	cmplti	r2,r2,8
   46f28:	1000071e 	bne	r2,zero,46f48 <___vfprintf_internal_r+0x1ec0>
   46f2c:	e0bfc804 	addi	r2,fp,-224
   46f30:	100d883a 	mov	r6,r2
   46f34:	e17fe717 	ldw	r5,-100(fp)
   46f38:	e13fe617 	ldw	r4,-104(fp)
   46f3c:	004f3e80 	call	4f3e8 <__sprint_r>
   46f40:	10006b1e 	bne	r2,zero,470f0 <___vfprintf_internal_r+0x2068>
   46f44:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   46f48:	e0ffad17 	ldw	r3,-332(fp)
   46f4c:	e0bfb517 	ldw	r2,-300(fp)
   46f50:	10c0010e 	bge	r2,r3,46f58 <___vfprintf_internal_r+0x1ed0>
   46f54:	1805883a 	mov	r2,r3
   46f58:	e0ffac17 	ldw	r3,-336(fp)
   46f5c:	1885883a 	add	r2,r3,r2
   46f60:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
   46f64:	e0bfca17 	ldw	r2,-216(fp)
   46f68:	10000626 	beq	r2,zero,46f84 <___vfprintf_internal_r+0x1efc>
   46f6c:	e0bfc804 	addi	r2,fp,-224
   46f70:	100d883a 	mov	r6,r2
   46f74:	e17fe717 	ldw	r5,-100(fp)
   46f78:	e13fe617 	ldw	r4,-104(fp)
   46f7c:	004f3e80 	call	4f3e8 <__sprint_r>
   46f80:	10005d1e 	bne	r2,zero,470f8 <___vfprintf_internal_r+0x2070>
   46f84:	e03fc915 	stw	zero,-220(fp)
   46f88:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
   46f8c:	e0bfb817 	ldw	r2,-288(fp)
   46f90:	10389a26 	beq	r2,zero,451fc <_gp+0xfffe6024>
			_free_r (data, malloc_buf);
   46f94:	e17fb817 	ldw	r5,-288(fp)
   46f98:	e13fe617 	ldw	r4,-104(fp)
   46f9c:	0049f540 	call	49f54 <_free_r>
			malloc_buf = NULL;
   46fa0:	e03fb815 	stw	zero,-288(fp)
		}
	}
   46fa4:	00389506 	br	451fc <_gp+0xfffe6024>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   46fa8:	0001883a 	nop
   46fac:	00000106 	br	46fb4 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   46fb0:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   46fb4:	e0bfca17 	ldw	r2,-216(fp)
   46fb8:	10000626 	beq	r2,zero,46fd4 <___vfprintf_internal_r+0x1f4c>
   46fbc:	e0bfc804 	addi	r2,fp,-224
   46fc0:	100d883a 	mov	r6,r2
   46fc4:	e17fe717 	ldw	r5,-100(fp)
   46fc8:	e13fe617 	ldw	r4,-104(fp)
   46fcc:	004f3e80 	call	4f3e8 <__sprint_r>
   46fd0:	10004b1e 	bne	r2,zero,47100 <___vfprintf_internal_r+0x2078>
   46fd4:	e03fc915 	stw	zero,-220(fp)
   46fd8:	e47fcb04 	addi	r17,fp,-212
   46fdc:	00004906 	br	47104 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   46fe0:	0001883a 	nop
   46fe4:	00004706 	br	47104 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   46fe8:	0001883a 	nop
   46fec:	00004506 	br	47104 <___vfprintf_internal_r+0x207c>
   46ff0:	0001883a 	nop
   46ff4:	00004306 	br	47104 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   46ff8:	0001883a 	nop
   46ffc:	00004106 	br	47104 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   47000:	0001883a 	nop
   47004:	00003f06 	br	47104 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   47008:	0001883a 	nop
   4700c:	00003d06 	br	47104 <___vfprintf_internal_r+0x207c>
   47010:	0001883a 	nop
   47014:	00003b06 	br	47104 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   47018:	0001883a 	nop
   4701c:	00003906 	br	47104 <___vfprintf_internal_r+0x207c>
   47020:	0001883a 	nop
   47024:	00003706 	br	47104 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
   47028:	0001883a 	nop
   4702c:	00003506 	br	47104 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   47030:	0001883a 	nop
   47034:	00003306 	br	47104 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   47038:	0001883a 	nop
   4703c:	00003106 	br	47104 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
   47040:	0001883a 	nop
   47044:	00002f06 	br	47104 <___vfprintf_internal_r+0x207c>
   47048:	0001883a 	nop
   4704c:	00002d06 	br	47104 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
   47050:	0001883a 	nop
   47054:	00002b06 	br	47104 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   47058:	0001883a 	nop
   4705c:	00002906 	br	47104 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
   47060:	0001883a 	nop
   47064:	00002706 	br	47104 <___vfprintf_internal_r+0x207c>
   47068:	0001883a 	nop
   4706c:	00002506 	br	47104 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
   47070:	0001883a 	nop
   47074:	00002306 	br	47104 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
   47078:	0001883a 	nop
   4707c:	00002106 	br	47104 <___vfprintf_internal_r+0x207c>
   47080:	0001883a 	nop
   47084:	00001f06 	br	47104 <___vfprintf_internal_r+0x207c>
   47088:	0001883a 	nop
   4708c:	00001d06 	br	47104 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
   47090:	0001883a 	nop
   47094:	00001b06 	br	47104 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
   47098:	0001883a 	nop
   4709c:	00001906 	br	47104 <___vfprintf_internal_r+0x207c>
   470a0:	0001883a 	nop
   470a4:	00001706 	br	47104 <___vfprintf_internal_r+0x207c>
   470a8:	0001883a 	nop
   470ac:	00001506 	br	47104 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
   470b0:	0001883a 	nop
   470b4:	00001306 	br	47104 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
   470b8:	0001883a 	nop
   470bc:	00001106 	br	47104 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
   470c0:	0001883a 	nop
   470c4:	00000f06 	br	47104 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   470c8:	0001883a 	nop
   470cc:	00000d06 	br	47104 <___vfprintf_internal_r+0x207c>
   470d0:	0001883a 	nop
   470d4:	00000b06 	br	47104 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
   470d8:	0001883a 	nop
   470dc:	00000906 	br	47104 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
   470e0:	0001883a 	nop
   470e4:	00000706 	br	47104 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   470e8:	0001883a 	nop
   470ec:	00000506 	br	47104 <___vfprintf_internal_r+0x207c>
   470f0:	0001883a 	nop
   470f4:	00000306 	br	47104 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   470f8:	0001883a 	nop
   470fc:	00000106 	br	47104 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   47100:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   47104:	e0bfb817 	ldw	r2,-288(fp)
   47108:	10000326 	beq	r2,zero,47118 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
   4710c:	e17fb817 	ldw	r5,-288(fp)
   47110:	e13fe617 	ldw	r4,-104(fp)
   47114:	0049f540 	call	49f54 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   47118:	e0bfe717 	ldw	r2,-100(fp)
   4711c:	1080030b 	ldhu	r2,12(r2)
   47120:	10bfffcc 	andi	r2,r2,65535
   47124:	1080100c 	andi	r2,r2,64
   47128:	1000021e 	bne	r2,zero,47134 <___vfprintf_internal_r+0x20ac>
   4712c:	e0bfac17 	ldw	r2,-336(fp)
   47130:	00000206 	br	4713c <___vfprintf_internal_r+0x20b4>
   47134:	00bfffc4 	movi	r2,-1
   47138:	0001883a 	nop
	/* NOTREACHED */
}
   4713c:	e6fff804 	addi	sp,fp,-32
   47140:	dfc00917 	ldw	ra,36(sp)
   47144:	df000817 	ldw	fp,32(sp)
   47148:	ddc00717 	ldw	r23,28(sp)
   4714c:	dd800617 	ldw	r22,24(sp)
   47150:	dd400517 	ldw	r21,20(sp)
   47154:	dd000417 	ldw	r20,16(sp)
   47158:	dcc00317 	ldw	r19,12(sp)
   4715c:	dc800217 	ldw	r18,8(sp)
   47160:	dc400117 	ldw	r17,4(sp)
   47164:	dc000017 	ldw	r16,0(sp)
   47168:	dec00a04 	addi	sp,sp,40
   4716c:	f800283a 	ret

00047170 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
   47170:	deffef04 	addi	sp,sp,-68
   47174:	dfc01015 	stw	ra,64(sp)
   47178:	df000f15 	stw	fp,60(sp)
   4717c:	df000f04 	addi	fp,sp,60
   47180:	e13ffc15 	stw	r4,-16(fp)
   47184:	e17ffd15 	stw	r5,-12(fp)
   47188:	e1bffe15 	stw	r6,-8(fp)
   4718c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
   47190:	e0bffd17 	ldw	r2,-12(fp)
   47194:	e0bffa15 	stw	r2,-24(fp)
   47198:	e0bffe17 	ldw	r2,-8(fp)
   4719c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
   471a0:	e0bffb17 	ldw	r2,-20(fp)
   471a4:	1000090e 	bge	r2,zero,471cc <cvt+0x5c>
		value = -value;
   471a8:	e0bffd17 	ldw	r2,-12(fp)
   471ac:	e0bffd15 	stw	r2,-12(fp)
   471b0:	e0bffe17 	ldw	r2,-8(fp)
   471b4:	10a0003c 	xorhi	r2,r2,32768
   471b8:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
   471bc:	e0800317 	ldw	r2,12(fp)
   471c0:	00c00b44 	movi	r3,45
   471c4:	10c00005 	stb	r3,0(r2)
   471c8:	00000206 	br	471d4 <cvt+0x64>
	} else
		*sign = '\000';
   471cc:	e0800317 	ldw	r2,12(fp)
   471d0:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
   471d4:	e0800517 	ldw	r2,20(fp)
   471d8:	108019a0 	cmpeqi	r2,r2,102
   471dc:	1000031e 	bne	r2,zero,471ec <cvt+0x7c>
   471e0:	e0800517 	ldw	r2,20(fp)
   471e4:	10801198 	cmpnei	r2,r2,70
   471e8:	1000031e 	bne	r2,zero,471f8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
   471ec:	008000c4 	movi	r2,3
   471f0:	e0bff515 	stw	r2,-44(fp)
   471f4:	00000b06 	br	47224 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
   471f8:	e0800517 	ldw	r2,20(fp)
   471fc:	10801960 	cmpeqi	r2,r2,101
   47200:	1000031e 	bne	r2,zero,47210 <cvt+0xa0>
   47204:	e0800517 	ldw	r2,20(fp)
   47208:	10801158 	cmpnei	r2,r2,69
   4720c:	1000031e 	bne	r2,zero,4721c <cvt+0xac>
			ndigits++;
   47210:	e0bfff17 	ldw	r2,-4(fp)
   47214:	10800044 	addi	r2,r2,1
   47218:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
   4721c:	00800084 	movi	r2,2
   47220:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
   47224:	e0bff904 	addi	r2,fp,-28
   47228:	d8800315 	stw	r2,12(sp)
   4722c:	e0bff804 	addi	r2,fp,-32
   47230:	d8800215 	stw	r2,8(sp)
   47234:	e0800417 	ldw	r2,16(fp)
   47238:	d8800115 	stw	r2,4(sp)
   4723c:	e0bfff17 	ldw	r2,-4(fp)
   47240:	d8800015 	stw	r2,0(sp)
   47244:	e1fff517 	ldw	r7,-44(fp)
   47248:	e17ffd17 	ldw	r5,-12(fp)
   4724c:	e1bffe17 	ldw	r6,-8(fp)
   47250:	e13ffc17 	ldw	r4,-16(fp)
   47254:	0047a200 	call	47a20 <_dtoa_r>
   47258:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
   4725c:	e0800517 	ldw	r2,20(fp)
   47260:	108019e0 	cmpeqi	r2,r2,103
   47264:	1000031e 	bne	r2,zero,47274 <cvt+0x104>
   47268:	e0800517 	ldw	r2,20(fp)
   4726c:	108011d8 	cmpnei	r2,r2,71
   47270:	1000031e 	bne	r2,zero,47280 <cvt+0x110>
   47274:	e0800217 	ldw	r2,8(fp)
   47278:	1080004c 	andi	r2,r2,1
   4727c:	10003326 	beq	r2,zero,4734c <cvt+0x1dc>
		bp = digits + ndigits;
   47280:	e0bfff17 	ldw	r2,-4(fp)
   47284:	e0fff717 	ldw	r3,-36(fp)
   47288:	1885883a 	add	r2,r3,r2
   4728c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
   47290:	e0800517 	ldw	r2,20(fp)
   47294:	108019a0 	cmpeqi	r2,r2,102
   47298:	1000031e 	bne	r2,zero,472a8 <cvt+0x138>
   4729c:	e0800517 	ldw	r2,20(fp)
   472a0:	10801198 	cmpnei	r2,r2,70
   472a4:	1000181e 	bne	r2,zero,47308 <cvt+0x198>
			if (*digits == '0' && value)
   472a8:	e0bff717 	ldw	r2,-36(fp)
   472ac:	10800003 	ldbu	r2,0(r2)
   472b0:	10803fcc 	andi	r2,r2,255
   472b4:	1080201c 	xori	r2,r2,128
   472b8:	10bfe004 	addi	r2,r2,-128
   472bc:	10800c18 	cmpnei	r2,r2,48
   472c0:	10000b1e 	bne	r2,zero,472f0 <cvt+0x180>
   472c4:	000d883a 	mov	r6,zero
   472c8:	000f883a 	mov	r7,zero
   472cc:	e13ffd17 	ldw	r4,-12(fp)
   472d0:	e17ffe17 	ldw	r5,-8(fp)
   472d4:	00522600 	call	52260 <__eqdf2>
   472d8:	10000526 	beq	r2,zero,472f0 <cvt+0x180>
				*decpt = -ndigits + 1;
   472dc:	00c00044 	movi	r3,1
   472e0:	e0bfff17 	ldw	r2,-4(fp)
   472e4:	1887c83a 	sub	r3,r3,r2
   472e8:	e0800417 	ldw	r2,16(fp)
   472ec:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
   472f0:	e0800417 	ldw	r2,16(fp)
   472f4:	10800017 	ldw	r2,0(r2)
   472f8:	1007883a 	mov	r3,r2
   472fc:	e0bff617 	ldw	r2,-40(fp)
   47300:	10c5883a 	add	r2,r2,r3
   47304:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
   47308:	000d883a 	mov	r6,zero
   4730c:	000f883a 	mov	r7,zero
   47310:	e13ffd17 	ldw	r4,-12(fp)
   47314:	e17ffe17 	ldw	r5,-8(fp)
   47318:	00522600 	call	52260 <__eqdf2>
   4731c:	1000081e 	bne	r2,zero,47340 <cvt+0x1d0>
			rve = bp;
   47320:	e0bff617 	ldw	r2,-40(fp)
   47324:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
   47328:	00000506 	br	47340 <cvt+0x1d0>
			*rve++ = '0';
   4732c:	e0bff917 	ldw	r2,-28(fp)
   47330:	10c00044 	addi	r3,r2,1
   47334:	e0fff915 	stw	r3,-28(fp)
   47338:	00c00c04 	movi	r3,48
   4733c:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
   47340:	e0fff917 	ldw	r3,-28(fp)
   47344:	e0bff617 	ldw	r2,-40(fp)
   47348:	18bff836 	bltu	r3,r2,4732c <_gp+0xfffe8154>
			*rve++ = '0';
	}
	*length = rve - digits;
   4734c:	e0bff917 	ldw	r2,-28(fp)
   47350:	1007883a 	mov	r3,r2
   47354:	e0bff717 	ldw	r2,-36(fp)
   47358:	1887c83a 	sub	r3,r3,r2
   4735c:	e0800617 	ldw	r2,24(fp)
   47360:	10c00015 	stw	r3,0(r2)
	return (digits);
   47364:	e0bff717 	ldw	r2,-36(fp)
}
   47368:	e037883a 	mov	sp,fp
   4736c:	dfc00117 	ldw	ra,4(sp)
   47370:	df000017 	ldw	fp,0(sp)
   47374:	dec00204 	addi	sp,sp,8
   47378:	f800283a 	ret

0004737c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
   4737c:	defff704 	addi	sp,sp,-36
   47380:	dfc00815 	stw	ra,32(sp)
   47384:	df000715 	stw	fp,28(sp)
   47388:	dc400615 	stw	r17,24(sp)
   4738c:	dc000515 	stw	r16,20(sp)
   47390:	df000704 	addi	fp,sp,28
   47394:	e13ffb15 	stw	r4,-20(fp)
   47398:	e17ffc15 	stw	r5,-16(fp)
   4739c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
   473a0:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
   473a4:	8805883a 	mov	r2,r17
   473a8:	14400044 	addi	r17,r2,1
   473ac:	e0fffd17 	ldw	r3,-12(fp)
   473b0:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
   473b4:	e0bffc17 	ldw	r2,-16(fp)
   473b8:	1000080e 	bge	r2,zero,473dc <exponent+0x60>
		exp = -exp;
   473bc:	e0bffc17 	ldw	r2,-16(fp)
   473c0:	0085c83a 	sub	r2,zero,r2
   473c4:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
   473c8:	8805883a 	mov	r2,r17
   473cc:	14400044 	addi	r17,r2,1
   473d0:	00c00b44 	movi	r3,45
   473d4:	10c00005 	stb	r3,0(r2)
   473d8:	00000406 	br	473ec <exponent+0x70>
	}
	else
		*p++ = '+';
   473dc:	8805883a 	mov	r2,r17
   473e0:	14400044 	addi	r17,r2,1
   473e4:	00c00ac4 	movi	r3,43
   473e8:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
   473ec:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
   473f0:	e0bffc17 	ldw	r2,-16(fp)
   473f4:	10800290 	cmplti	r2,r2,10
   473f8:	10001d1e 	bne	r2,zero,47470 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
   473fc:	843fffc4 	addi	r16,r16,-1
   47400:	e0bffc17 	ldw	r2,-16(fp)
   47404:	01400284 	movi	r5,10
   47408:	1009883a 	mov	r4,r2
   4740c:	004209c0 	call	4209c <__modsi3>
   47410:	10800c04 	addi	r2,r2,48
   47414:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
   47418:	e0bffc17 	ldw	r2,-16(fp)
   4741c:	01400284 	movi	r5,10
   47420:	1009883a 	mov	r4,r2
   47424:	00420180 	call	42018 <__divsi3>
   47428:	e0bffc15 	stw	r2,-16(fp)
   4742c:	e0bffc17 	ldw	r2,-16(fp)
   47430:	10800288 	cmpgei	r2,r2,10
   47434:	103ff11e 	bne	r2,zero,473fc <_gp+0xfffe8224>
		*--t = to_char (exp);
   47438:	843fffc4 	addi	r16,r16,-1
   4743c:	e0bffc17 	ldw	r2,-16(fp)
   47440:	10800c04 	addi	r2,r2,48
   47444:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
   47448:	00000606 	br	47464 <exponent+0xe8>
   4744c:	8805883a 	mov	r2,r17
   47450:	14400044 	addi	r17,r2,1
   47454:	8007883a 	mov	r3,r16
   47458:	1c000044 	addi	r16,r3,1
   4745c:	18c00003 	ldbu	r3,0(r3)
   47460:	10c00005 	stb	r3,0(r2)
   47464:	e0bffac4 	addi	r2,fp,-21
   47468:	80bff836 	bltu	r16,r2,4744c <_gp+0xfffe8274>
   4746c:	00000906 	br	47494 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
   47470:	8805883a 	mov	r2,r17
   47474:	14400044 	addi	r17,r2,1
   47478:	00c00c04 	movi	r3,48
   4747c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
   47480:	8805883a 	mov	r2,r17
   47484:	14400044 	addi	r17,r2,1
   47488:	e0fffc17 	ldw	r3,-16(fp)
   4748c:	18c00c04 	addi	r3,r3,48
   47490:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
   47494:	8807883a 	mov	r3,r17
   47498:	e0bffb17 	ldw	r2,-20(fp)
   4749c:	1885c83a 	sub	r2,r3,r2
}
   474a0:	e6fffe04 	addi	sp,fp,-8
   474a4:	dfc00317 	ldw	ra,12(sp)
   474a8:	df000217 	ldw	fp,8(sp)
   474ac:	dc400117 	ldw	r17,4(sp)
   474b0:	dc000017 	ldw	r16,0(sp)
   474b4:	dec00404 	addi	sp,sp,16
   474b8:	f800283a 	ret

000474bc <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   474bc:	defffb04 	addi	sp,sp,-20
   474c0:	dfc00415 	stw	ra,16(sp)
   474c4:	df000315 	stw	fp,12(sp)
   474c8:	dc000215 	stw	r16,8(sp)
   474cc:	df000304 	addi	fp,sp,12
   474d0:	e13ffe15 	stw	r4,-8(fp)
   474d4:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   474d8:	d0a00517 	ldw	r2,-32748(gp)
   474dc:	e0bffd15 	stw	r2,-12(fp)
   474e0:	e0bffd17 	ldw	r2,-12(fp)
   474e4:	10000526 	beq	r2,zero,474fc <__swsetup_r+0x40>
   474e8:	e0bffd17 	ldw	r2,-12(fp)
   474ec:	10800e17 	ldw	r2,56(r2)
   474f0:	1000021e 	bne	r2,zero,474fc <__swsetup_r+0x40>
   474f4:	e13ffd17 	ldw	r4,-12(fp)
   474f8:	0049d340 	call	49d34 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
   474fc:	8080030b 	ldhu	r2,12(r16)
   47500:	10bfffcc 	andi	r2,r2,65535
   47504:	1080020c 	andi	r2,r2,8
   47508:	1000241e 	bne	r2,zero,4759c <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
   4750c:	8080030b 	ldhu	r2,12(r16)
   47510:	10bfffcc 	andi	r2,r2,65535
   47514:	1080040c 	andi	r2,r2,16
   47518:	1000081e 	bne	r2,zero,4753c <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
   4751c:	e0bffe17 	ldw	r2,-8(fp)
   47520:	00c00244 	movi	r3,9
   47524:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
   47528:	8080030b 	ldhu	r2,12(r16)
   4752c:	10801014 	ori	r2,r2,64
   47530:	8080030d 	sth	r2,12(r16)
	  return EOF;
   47534:	00bfffc4 	movi	r2,-1
   47538:	00004206 	br	47644 <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
   4753c:	8080030b 	ldhu	r2,12(r16)
   47540:	10bfffcc 	andi	r2,r2,65535
   47544:	1080010c 	andi	r2,r2,4
   47548:	10001126 	beq	r2,zero,47590 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
   4754c:	80800c17 	ldw	r2,48(r16)
   47550:	10000826 	beq	r2,zero,47574 <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
   47554:	80c00c17 	ldw	r3,48(r16)
   47558:	80801004 	addi	r2,r16,64
   4755c:	18800426 	beq	r3,r2,47570 <__swsetup_r+0xb4>
   47560:	80800c17 	ldw	r2,48(r16)
   47564:	100b883a 	mov	r5,r2
   47568:	e13ffe17 	ldw	r4,-8(fp)
   4756c:	0049f540 	call	49f54 <_free_r>
   47570:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
   47574:	80c0030b 	ldhu	r3,12(r16)
   47578:	00bff6c4 	movi	r2,-37
   4757c:	1884703a 	and	r2,r3,r2
   47580:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
   47584:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
   47588:	80800417 	ldw	r2,16(r16)
   4758c:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
   47590:	8080030b 	ldhu	r2,12(r16)
   47594:	10800214 	ori	r2,r2,8
   47598:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   4759c:	80800417 	ldw	r2,16(r16)
   475a0:	10000b1e 	bne	r2,zero,475d0 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
   475a4:	8080030b 	ldhu	r2,12(r16)
   475a8:	10bfffcc 	andi	r2,r2,65535
   475ac:	1080800c 	andi	r2,r2,512
   475b0:	10000426 	beq	r2,zero,475c4 <__swsetup_r+0x108>
   475b4:	8080030b 	ldhu	r2,12(r16)
   475b8:	10bfffcc 	andi	r2,r2,65535
   475bc:	1080200c 	andi	r2,r2,128
   475c0:	10000326 	beq	r2,zero,475d0 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
   475c4:	800b883a 	mov	r5,r16
   475c8:	e13ffe17 	ldw	r4,-8(fp)
   475cc:	004afc40 	call	4afc4 <__smakebuf_r>

  if (fp->_flags & __SLBF)
   475d0:	8080030b 	ldhu	r2,12(r16)
   475d4:	10bfffcc 	andi	r2,r2,65535
   475d8:	1080004c 	andi	r2,r2,1
   475dc:	10000526 	beq	r2,zero,475f4 <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
   475e0:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
   475e4:	80800517 	ldw	r2,20(r16)
   475e8:	0085c83a 	sub	r2,zero,r2
   475ec:	80800615 	stw	r2,24(r16)
   475f0:	00000806 	br	47614 <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
   475f4:	8080030b 	ldhu	r2,12(r16)
   475f8:	10bfffcc 	andi	r2,r2,65535
   475fc:	1080008c 	andi	r2,r2,2
   47600:	1000021e 	bne	r2,zero,4760c <__swsetup_r+0x150>
   47604:	80800517 	ldw	r2,20(r16)
   47608:	00000106 	br	47610 <__swsetup_r+0x154>
   4760c:	0005883a 	mov	r2,zero
   47610:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   47614:	80800417 	ldw	r2,16(r16)
   47618:	1000091e 	bne	r2,zero,47640 <__swsetup_r+0x184>
   4761c:	8080030b 	ldhu	r2,12(r16)
   47620:	10bfffcc 	andi	r2,r2,65535
   47624:	1080200c 	andi	r2,r2,128
   47628:	10000526 	beq	r2,zero,47640 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
   4762c:	8080030b 	ldhu	r2,12(r16)
   47630:	10801014 	ori	r2,r2,64
   47634:	8080030d 	sth	r2,12(r16)
      return EOF;
   47638:	00bfffc4 	movi	r2,-1
   4763c:	00000106 	br	47644 <__swsetup_r+0x188>
    }
  return 0;
   47640:	0005883a 	mov	r2,zero
}
   47644:	e6ffff04 	addi	sp,fp,-4
   47648:	dfc00217 	ldw	ra,8(sp)
   4764c:	df000117 	ldw	fp,4(sp)
   47650:	dc000017 	ldw	r16,0(sp)
   47654:	dec00304 	addi	sp,sp,12
   47658:	f800283a 	ret

0004765c <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
   4765c:	deffef04 	addi	sp,sp,-68
   47660:	dfc01015 	stw	ra,64(sp)
   47664:	df000f15 	stw	fp,60(sp)
   47668:	df000f04 	addi	fp,sp,60
   4766c:	e13ffe15 	stw	r4,-8(fp)
   47670:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
   47674:	e0bfff17 	ldw	r2,-4(fp)
   47678:	10800417 	ldw	r2,16(r2)
   4767c:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
   47680:	e0bffe17 	ldw	r2,-8(fp)
   47684:	10c00417 	ldw	r3,16(r2)
   47688:	e0bff117 	ldw	r2,-60(fp)
   4768c:	1880020e 	bge	r3,r2,47698 <quorem+0x3c>
    return 0;
   47690:	0005883a 	mov	r2,zero
   47694:	0000dd06 	br	47a0c <quorem+0x3b0>
  sx = S->_x;
   47698:	e0bfff17 	ldw	r2,-4(fp)
   4769c:	10800504 	addi	r2,r2,20
   476a0:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
   476a4:	e0bff117 	ldw	r2,-60(fp)
   476a8:	10bfffc4 	addi	r2,r2,-1
   476ac:	e0bff115 	stw	r2,-60(fp)
   476b0:	e0bff117 	ldw	r2,-60(fp)
   476b4:	1085883a 	add	r2,r2,r2
   476b8:	1085883a 	add	r2,r2,r2
   476bc:	1007883a 	mov	r3,r2
   476c0:	e0bff717 	ldw	r2,-36(fp)
   476c4:	10c5883a 	add	r2,r2,r3
   476c8:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
   476cc:	e0bffe17 	ldw	r2,-8(fp)
   476d0:	10800504 	addi	r2,r2,20
   476d4:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
   476d8:	e0bff117 	ldw	r2,-60(fp)
   476dc:	1085883a 	add	r2,r2,r2
   476e0:	1085883a 	add	r2,r2,r2
   476e4:	1007883a 	mov	r3,r2
   476e8:	e0bff517 	ldw	r2,-44(fp)
   476ec:	10c5883a 	add	r2,r2,r3
   476f0:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
   476f4:	e0bff617 	ldw	r2,-40(fp)
   476f8:	10c00017 	ldw	r3,0(r2)
   476fc:	e0bff817 	ldw	r2,-32(fp)
   47700:	10800017 	ldw	r2,0(r2)
   47704:	10800044 	addi	r2,r2,1
   47708:	100b883a 	mov	r5,r2
   4770c:	1809883a 	mov	r4,r3
   47710:	00421100 	call	42110 <__udivsi3>
   47714:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
   47718:	e0bff417 	ldw	r2,-48(fp)
   4771c:	10005726 	beq	r2,zero,4787c <quorem+0x220>
    {
      borrow = 0;
   47720:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   47724:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   47728:	e0bff717 	ldw	r2,-36(fp)
   4772c:	10c00104 	addi	r3,r2,4
   47730:	e0fff715 	stw	r3,-36(fp)
   47734:	10800017 	ldw	r2,0(r2)
   47738:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
   4773c:	e0bff917 	ldw	r2,-28(fp)
   47740:	10bfffcc 	andi	r2,r2,65535
   47744:	e17ff417 	ldw	r5,-48(fp)
   47748:	1009883a 	mov	r4,r2
   4774c:	00421cc0 	call	421cc <__mulsi3>
   47750:	1007883a 	mov	r3,r2
   47754:	e0bff317 	ldw	r2,-52(fp)
   47758:	1885883a 	add	r2,r3,r2
   4775c:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
   47760:	e0bff917 	ldw	r2,-28(fp)
   47764:	1004d43a 	srli	r2,r2,16
   47768:	e17ff417 	ldw	r5,-48(fp)
   4776c:	1009883a 	mov	r4,r2
   47770:	00421cc0 	call	421cc <__mulsi3>
   47774:	1007883a 	mov	r3,r2
   47778:	e0bffa17 	ldw	r2,-24(fp)
   4777c:	1004d43a 	srli	r2,r2,16
   47780:	1885883a 	add	r2,r3,r2
   47784:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   47788:	e0bffb17 	ldw	r2,-20(fp)
   4778c:	1004d43a 	srli	r2,r2,16
   47790:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   47794:	e0bff517 	ldw	r2,-44(fp)
   47798:	10800017 	ldw	r2,0(r2)
   4779c:	10ffffcc 	andi	r3,r2,65535
   477a0:	e0bffa17 	ldw	r2,-24(fp)
   477a4:	10bfffcc 	andi	r2,r2,65535
   477a8:	1887c83a 	sub	r3,r3,r2
   477ac:	e0bff217 	ldw	r2,-56(fp)
   477b0:	1885883a 	add	r2,r3,r2
   477b4:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   477b8:	e0bffc17 	ldw	r2,-16(fp)
   477bc:	1005d43a 	srai	r2,r2,16
   477c0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   477c4:	e0bff517 	ldw	r2,-44(fp)
   477c8:	10800017 	ldw	r2,0(r2)
   477cc:	1006d43a 	srli	r3,r2,16
   477d0:	e0bffb17 	ldw	r2,-20(fp)
   477d4:	10bfffcc 	andi	r2,r2,65535
   477d8:	1887c83a 	sub	r3,r3,r2
   477dc:	e0bff217 	ldw	r2,-56(fp)
   477e0:	1885883a 	add	r2,r3,r2
   477e4:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   477e8:	e0bffd17 	ldw	r2,-12(fp)
   477ec:	1005d43a 	srai	r2,r2,16
   477f0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   477f4:	e0bff517 	ldw	r2,-44(fp)
   477f8:	10c00104 	addi	r3,r2,4
   477fc:	e0fff515 	stw	r3,-44(fp)
   47800:	e0fffd17 	ldw	r3,-12(fp)
   47804:	1808943a 	slli	r4,r3,16
   47808:	e0fffc17 	ldw	r3,-16(fp)
   4780c:	18ffffcc 	andi	r3,r3,65535
   47810:	20c6b03a 	or	r3,r4,r3
   47814:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   47818:	e0bff717 	ldw	r2,-36(fp)
   4781c:	e0fff817 	ldw	r3,-32(fp)
   47820:	18bfc12e 	bgeu	r3,r2,47728 <_gp+0xfffe8550>
      if (!*bxe)
   47824:	e0bff617 	ldw	r2,-40(fp)
   47828:	10800017 	ldw	r2,0(r2)
   4782c:	1000131e 	bne	r2,zero,4787c <quorem+0x220>
	{
	  bx = b->_x;
   47830:	e0bffe17 	ldw	r2,-8(fp)
   47834:	10800504 	addi	r2,r2,20
   47838:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
   4783c:	00000306 	br	4784c <quorem+0x1f0>
	    --n;
   47840:	e0bff117 	ldw	r2,-60(fp)
   47844:	10bfffc4 	addi	r2,r2,-1
   47848:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
   4784c:	e0bff617 	ldw	r2,-40(fp)
   47850:	10bfff04 	addi	r2,r2,-4
   47854:	e0bff615 	stw	r2,-40(fp)
   47858:	e0bff617 	ldw	r2,-40(fp)
   4785c:	e0fff517 	ldw	r3,-44(fp)
   47860:	1880032e 	bgeu	r3,r2,47870 <quorem+0x214>
   47864:	e0bff617 	ldw	r2,-40(fp)
   47868:	10800017 	ldw	r2,0(r2)
   4786c:	103ff426 	beq	r2,zero,47840 <_gp+0xfffe8668>
	    --n;
	  b->_wds = n;
   47870:	e0bffe17 	ldw	r2,-8(fp)
   47874:	e0fff117 	ldw	r3,-60(fp)
   47878:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
   4787c:	e17fff17 	ldw	r5,-4(fp)
   47880:	e13ffe17 	ldw	r4,-8(fp)
   47884:	004d6480 	call	4d648 <__mcmp>
   47888:	10005f16 	blt	r2,zero,47a08 <quorem+0x3ac>
    {
      q++;
   4788c:	e0bff417 	ldw	r2,-48(fp)
   47890:	10800044 	addi	r2,r2,1
   47894:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
   47898:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   4789c:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
   478a0:	e0bffe17 	ldw	r2,-8(fp)
   478a4:	10800504 	addi	r2,r2,20
   478a8:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
   478ac:	e0bfff17 	ldw	r2,-4(fp)
   478b0:	10800504 	addi	r2,r2,20
   478b4:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   478b8:	e0bff717 	ldw	r2,-36(fp)
   478bc:	10c00104 	addi	r3,r2,4
   478c0:	e0fff715 	stw	r3,-36(fp)
   478c4:	10800017 	ldw	r2,0(r2)
   478c8:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
   478cc:	e0bff917 	ldw	r2,-28(fp)
   478d0:	10ffffcc 	andi	r3,r2,65535
   478d4:	e0bff317 	ldw	r2,-52(fp)
   478d8:	1885883a 	add	r2,r3,r2
   478dc:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
   478e0:	e0bff917 	ldw	r2,-28(fp)
   478e4:	1006d43a 	srli	r3,r2,16
   478e8:	e0bffa17 	ldw	r2,-24(fp)
   478ec:	1004d43a 	srli	r2,r2,16
   478f0:	1885883a 	add	r2,r3,r2
   478f4:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   478f8:	e0bffb17 	ldw	r2,-20(fp)
   478fc:	1004d43a 	srli	r2,r2,16
   47900:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   47904:	e0bff517 	ldw	r2,-44(fp)
   47908:	10800017 	ldw	r2,0(r2)
   4790c:	10ffffcc 	andi	r3,r2,65535
   47910:	e0bffa17 	ldw	r2,-24(fp)
   47914:	10bfffcc 	andi	r2,r2,65535
   47918:	1887c83a 	sub	r3,r3,r2
   4791c:	e0bff217 	ldw	r2,-56(fp)
   47920:	1885883a 	add	r2,r3,r2
   47924:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   47928:	e0bffc17 	ldw	r2,-16(fp)
   4792c:	1005d43a 	srai	r2,r2,16
   47930:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   47934:	e0bff517 	ldw	r2,-44(fp)
   47938:	10800017 	ldw	r2,0(r2)
   4793c:	1006d43a 	srli	r3,r2,16
   47940:	e0bffb17 	ldw	r2,-20(fp)
   47944:	10bfffcc 	andi	r2,r2,65535
   47948:	1887c83a 	sub	r3,r3,r2
   4794c:	e0bff217 	ldw	r2,-56(fp)
   47950:	1885883a 	add	r2,r3,r2
   47954:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   47958:	e0bffd17 	ldw	r2,-12(fp)
   4795c:	1005d43a 	srai	r2,r2,16
   47960:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   47964:	e0bff517 	ldw	r2,-44(fp)
   47968:	10c00104 	addi	r3,r2,4
   4796c:	e0fff515 	stw	r3,-44(fp)
   47970:	e0fffd17 	ldw	r3,-12(fp)
   47974:	1808943a 	slli	r4,r3,16
   47978:	e0fffc17 	ldw	r3,-16(fp)
   4797c:	18ffffcc 	andi	r3,r3,65535
   47980:	20c6b03a 	or	r3,r4,r3
   47984:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   47988:	e0bff717 	ldw	r2,-36(fp)
   4798c:	e0fff817 	ldw	r3,-32(fp)
   47990:	18bfc92e 	bgeu	r3,r2,478b8 <_gp+0xfffe86e0>
      bx = b->_x;
   47994:	e0bffe17 	ldw	r2,-8(fp)
   47998:	10800504 	addi	r2,r2,20
   4799c:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
   479a0:	e0bff117 	ldw	r2,-60(fp)
   479a4:	1085883a 	add	r2,r2,r2
   479a8:	1085883a 	add	r2,r2,r2
   479ac:	1007883a 	mov	r3,r2
   479b0:	e0bff517 	ldw	r2,-44(fp)
   479b4:	10c5883a 	add	r2,r2,r3
   479b8:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
   479bc:	e0bff617 	ldw	r2,-40(fp)
   479c0:	10800017 	ldw	r2,0(r2)
   479c4:	1000101e 	bne	r2,zero,47a08 <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
   479c8:	00000306 	br	479d8 <quorem+0x37c>
	    --n;
   479cc:	e0bff117 	ldw	r2,-60(fp)
   479d0:	10bfffc4 	addi	r2,r2,-1
   479d4:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
   479d8:	e0bff617 	ldw	r2,-40(fp)
   479dc:	10bfff04 	addi	r2,r2,-4
   479e0:	e0bff615 	stw	r2,-40(fp)
   479e4:	e0bff617 	ldw	r2,-40(fp)
   479e8:	e0fff517 	ldw	r3,-44(fp)
   479ec:	1880032e 	bgeu	r3,r2,479fc <quorem+0x3a0>
   479f0:	e0bff617 	ldw	r2,-40(fp)
   479f4:	10800017 	ldw	r2,0(r2)
   479f8:	103ff426 	beq	r2,zero,479cc <_gp+0xfffe87f4>
	    --n;
	  b->_wds = n;
   479fc:	e0bffe17 	ldw	r2,-8(fp)
   47a00:	e0fff117 	ldw	r3,-60(fp)
   47a04:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
   47a08:	e0bff417 	ldw	r2,-48(fp)
}
   47a0c:	e037883a 	mov	sp,fp
   47a10:	dfc00117 	ldw	ra,4(sp)
   47a14:	df000017 	ldw	fp,0(sp)
   47a18:	dec00204 	addi	sp,sp,8
   47a1c:	f800283a 	ret

00047a20 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
   47a20:	deffcc04 	addi	sp,sp,-208
   47a24:	dfc03315 	stw	ra,204(sp)
   47a28:	df003215 	stw	fp,200(sp)
   47a2c:	dcc03115 	stw	r19,196(sp)
   47a30:	dc803015 	stw	r18,192(sp)
   47a34:	dc402f15 	stw	r17,188(sp)
   47a38:	dc002e15 	stw	r16,184(sp)
   47a3c:	df003204 	addi	fp,sp,200
   47a40:	e13ff815 	stw	r4,-32(fp)
   47a44:	e17ff915 	stw	r5,-28(fp)
   47a48:	e1bffa15 	stw	r6,-24(fp)
   47a4c:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
   47a50:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
   47a54:	e0bff917 	ldw	r2,-28(fp)
   47a58:	e0bff215 	stw	r2,-56(fp)
   47a5c:	e0bffa17 	ldw	r2,-24(fp)
   47a60:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
   47a64:	e0bff817 	ldw	r2,-32(fp)
   47a68:	10801017 	ldw	r2,64(r2)
   47a6c:	10001326 	beq	r2,zero,47abc <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
   47a70:	e0bff817 	ldw	r2,-32(fp)
   47a74:	10801017 	ldw	r2,64(r2)
   47a78:	e0fff817 	ldw	r3,-32(fp)
   47a7c:	18c01117 	ldw	r3,68(r3)
   47a80:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
   47a84:	e0bff817 	ldw	r2,-32(fp)
   47a88:	10801017 	ldw	r2,64(r2)
   47a8c:	e0fff817 	ldw	r3,-32(fp)
   47a90:	18c01117 	ldw	r3,68(r3)
   47a94:	01000044 	movi	r4,1
   47a98:	20c6983a 	sll	r3,r4,r3
   47a9c:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
   47aa0:	e0bff817 	ldw	r2,-32(fp)
   47aa4:	10801017 	ldw	r2,64(r2)
   47aa8:	100b883a 	mov	r5,r2
   47aac:	e13ff817 	ldw	r4,-32(fp)
   47ab0:	004c9600 	call	4c960 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
   47ab4:	e0bff817 	ldw	r2,-32(fp)
   47ab8:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
   47abc:	e0bff317 	ldw	r2,-52(fp)
   47ac0:	1000090e 	bge	r2,zero,47ae8 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
   47ac4:	e0800417 	ldw	r2,16(fp)
   47ac8:	00c00044 	movi	r3,1
   47acc:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
   47ad0:	e0fff317 	ldw	r3,-52(fp)
   47ad4:	00a00034 	movhi	r2,32768
   47ad8:	10bfffc4 	addi	r2,r2,-1
   47adc:	1884703a 	and	r2,r3,r2
   47ae0:	e0bff315 	stw	r2,-52(fp)
   47ae4:	00000206 	br	47af0 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
   47ae8:	e0800417 	ldw	r2,16(fp)
   47aec:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
   47af0:	e0bff317 	ldw	r2,-52(fp)
   47af4:	10dffc2c 	andhi	r3,r2,32752
   47af8:	009ffc34 	movhi	r2,32752
   47afc:	1880221e 	bne	r3,r2,47b88 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
   47b00:	e0800317 	ldw	r2,12(fp)
   47b04:	00c9c3c4 	movi	r3,9999
   47b08:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
   47b0c:	e0bff217 	ldw	r2,-56(fp)
   47b10:	1000081e 	bne	r2,zero,47b34 <_dtoa_r+0x114>
   47b14:	e0fff317 	ldw	r3,-52(fp)
   47b18:	00800434 	movhi	r2,16
   47b1c:	10bfffc4 	addi	r2,r2,-1
   47b20:	1884703a 	and	r2,r3,r2
   47b24:	1000031e 	bne	r2,zero,47b34 <_dtoa_r+0x114>
   47b28:	00800174 	movhi	r2,5
   47b2c:	1093da04 	addi	r2,r2,20328
   47b30:	00000206 	br	47b3c <_dtoa_r+0x11c>
   47b34:	00800174 	movhi	r2,5
   47b38:	1093dd04 	addi	r2,r2,20340
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
   47b3c:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
   47b40:	e0800517 	ldw	r2,20(fp)
   47b44:	10000e26 	beq	r2,zero,47b80 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
   47b48:	e0bfe717 	ldw	r2,-100(fp)
   47b4c:	108000c4 	addi	r2,r2,3
   47b50:	10800003 	ldbu	r2,0(r2)
   47b54:	10803fcc 	andi	r2,r2,255
   47b58:	1080201c 	xori	r2,r2,128
   47b5c:	10bfe004 	addi	r2,r2,-128
   47b60:	10000326 	beq	r2,zero,47b70 <_dtoa_r+0x150>
   47b64:	e0bfe717 	ldw	r2,-100(fp)
   47b68:	10800204 	addi	r2,r2,8
   47b6c:	00000206 	br	47b78 <_dtoa_r+0x158>
   47b70:	e0bfe717 	ldw	r2,-100(fp)
   47b74:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
   47b78:	e0c00517 	ldw	r3,20(fp)
   47b7c:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
   47b80:	e0bfe717 	ldw	r2,-100(fp)
   47b84:	00067b06 	br	49574 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
   47b88:	e0bff217 	ldw	r2,-56(fp)
   47b8c:	e0fff317 	ldw	r3,-52(fp)
   47b90:	000d883a 	mov	r6,zero
   47b94:	000f883a 	mov	r7,zero
   47b98:	1009883a 	mov	r4,r2
   47b9c:	180b883a 	mov	r5,r3
   47ba0:	00522600 	call	52260 <__eqdf2>
   47ba4:	10000e1e 	bne	r2,zero,47be0 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
   47ba8:	e0800317 	ldw	r2,12(fp)
   47bac:	00c00044 	movi	r3,1
   47bb0:	10c00015 	stw	r3,0(r2)
      s = "0";
   47bb4:	00800174 	movhi	r2,5
   47bb8:	1093de04 	addi	r2,r2,20344
   47bbc:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
   47bc0:	e0800517 	ldw	r2,20(fp)
   47bc4:	10000426 	beq	r2,zero,47bd8 <_dtoa_r+0x1b8>
	*rve = s + 1;
   47bc8:	e0bfe717 	ldw	r2,-100(fp)
   47bcc:	10c00044 	addi	r3,r2,1
   47bd0:	e0800517 	ldw	r2,20(fp)
   47bd4:	10c00015 	stw	r3,0(r2)
      return s;
   47bd8:	e0bfe717 	ldw	r2,-100(fp)
   47bdc:	00066506 	br	49574 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
   47be0:	e0bff217 	ldw	r2,-56(fp)
   47be4:	e0fff317 	ldw	r3,-52(fp)
   47be8:	e17ff104 	addi	r5,fp,-60
   47bec:	e13ff004 	addi	r4,fp,-64
   47bf0:	d9000015 	stw	r4,0(sp)
   47bf4:	280f883a 	mov	r7,r5
   47bf8:	100b883a 	mov	r5,r2
   47bfc:	180d883a 	mov	r6,r3
   47c00:	e13ff817 	ldw	r4,-32(fp)
   47c04:	004dcd00 	call	4dcd0 <__d2b>
   47c08:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
   47c0c:	e0bff317 	ldw	r2,-52(fp)
   47c10:	1004d53a 	srli	r2,r2,20
   47c14:	1081ffcc 	andi	r2,r2,2047
   47c18:	e0bfd215 	stw	r2,-184(fp)
   47c1c:	e0bfd217 	ldw	r2,-184(fp)
   47c20:	10001126 	beq	r2,zero,47c68 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
   47c24:	e0bff217 	ldw	r2,-56(fp)
   47c28:	e0fff317 	ldw	r3,-52(fp)
   47c2c:	e0bff415 	stw	r2,-48(fp)
   47c30:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
   47c34:	e0fff517 	ldw	r3,-44(fp)
   47c38:	00800434 	movhi	r2,16
   47c3c:	10bfffc4 	addi	r2,r2,-1
   47c40:	1884703a 	and	r2,r3,r2
   47c44:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
   47c48:	e0bff517 	ldw	r2,-44(fp)
   47c4c:	108ffc34 	orhi	r2,r2,16368
   47c50:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
   47c54:	e0bfd217 	ldw	r2,-184(fp)
   47c58:	10bf0044 	addi	r2,r2,-1023
   47c5c:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
   47c60:	e03fe015 	stw	zero,-128(fp)
   47c64:	00002806 	br	47d08 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
   47c68:	e0fff017 	ldw	r3,-64(fp)
   47c6c:	e0bff117 	ldw	r2,-60(fp)
   47c70:	1885883a 	add	r2,r3,r2
   47c74:	10810c84 	addi	r2,r2,1074
   47c78:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
   47c7c:	e0bfd217 	ldw	r2,-184(fp)
   47c80:	10800850 	cmplti	r2,r2,33
   47c84:	10000b1e 	bne	r2,zero,47cb4 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   47c88:	e0fff317 	ldw	r3,-52(fp)
   47c8c:	01001004 	movi	r4,64
   47c90:	e0bfd217 	ldw	r2,-184(fp)
   47c94:	2085c83a 	sub	r2,r4,r2
   47c98:	1886983a 	sll	r3,r3,r2
   47c9c:	e13ff217 	ldw	r4,-56(fp)
   47ca0:	e0bfd217 	ldw	r2,-184(fp)
   47ca4:	10bff804 	addi	r2,r2,-32
   47ca8:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
   47cac:	1884b03a 	or	r2,r3,r2
   47cb0:	00000506 	br	47cc8 <_dtoa_r+0x2a8>
   47cb4:	e0fff217 	ldw	r3,-56(fp)
   47cb8:	01000804 	movi	r4,32
   47cbc:	e0bfd217 	ldw	r2,-184(fp)
   47cc0:	2085c83a 	sub	r2,r4,r2
   47cc4:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   47cc8:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
   47ccc:	e13fe817 	ldw	r4,-96(fp)
   47cd0:	00523dc0 	call	523dc <__floatunsidf>
   47cd4:	1009883a 	mov	r4,r2
   47cd8:	180b883a 	mov	r5,r3
   47cdc:	e13ff415 	stw	r4,-48(fp)
   47ce0:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
   47ce4:	e0fff517 	ldw	r3,-44(fp)
   47ce8:	00bf8434 	movhi	r2,65040
   47cec:	1885883a 	add	r2,r3,r2
   47cf0:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
   47cf4:	e0bfd217 	ldw	r2,-184(fp)
   47cf8:	10bef344 	addi	r2,r2,-1075
   47cfc:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
   47d00:	00800044 	movi	r2,1
   47d04:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
   47d08:	e0bff417 	ldw	r2,-48(fp)
   47d0c:	e0fff517 	ldw	r3,-44(fp)
   47d10:	000d883a 	mov	r6,zero
   47d14:	01cffe34 	movhi	r7,16376
   47d18:	1009883a 	mov	r4,r2
   47d1c:	180b883a 	mov	r5,r3
   47d20:	0043db80 	call	43db8 <__subdf3>
   47d24:	1009883a 	mov	r4,r2
   47d28:	180b883a 	mov	r5,r3
   47d2c:	2005883a 	mov	r2,r4
   47d30:	2807883a 	mov	r3,r5
   47d34:	0198dbf4 	movhi	r6,25455
   47d38:	3190d844 	addi	r6,r6,17249
   47d3c:	01cff4f4 	movhi	r7,16339
   47d40:	39e1e9c4 	addi	r7,r7,-30809
   47d44:	1009883a 	mov	r4,r2
   47d48:	180b883a 	mov	r5,r3
   47d4c:	004354c0 	call	4354c <__muldf3>
   47d50:	1009883a 	mov	r4,r2
   47d54:	180b883a 	mov	r5,r3
   47d58:	2005883a 	mov	r2,r4
   47d5c:	2807883a 	mov	r3,r5
   47d60:	01a2d874 	movhi	r6,35681
   47d64:	31b22cc4 	addi	r6,r6,-14157
   47d68:	01cff1f4 	movhi	r7,16327
   47d6c:	39e28a04 	addi	r7,r7,-30168
   47d70:	1009883a 	mov	r4,r2
   47d74:	180b883a 	mov	r5,r3
   47d78:	00421f40 	call	421f4 <__adddf3>
   47d7c:	1009883a 	mov	r4,r2
   47d80:	180b883a 	mov	r5,r3
   47d84:	2025883a 	mov	r18,r4
   47d88:	2827883a 	mov	r19,r5
   47d8c:	e13fd217 	ldw	r4,-184(fp)
   47d90:	00447340 	call	44734 <__floatsidf>
   47d94:	1011883a 	mov	r8,r2
   47d98:	1813883a 	mov	r9,r3
   47d9c:	019427f4 	movhi	r6,20639
   47da0:	319e7ec4 	addi	r6,r6,31227
   47da4:	01cff4f4 	movhi	r7,16339
   47da8:	39d104c4 	addi	r7,r7,17427
   47dac:	4009883a 	mov	r4,r8
   47db0:	480b883a 	mov	r5,r9
   47db4:	004354c0 	call	4354c <__muldf3>
   47db8:	1009883a 	mov	r4,r2
   47dbc:	180b883a 	mov	r5,r3
   47dc0:	2005883a 	mov	r2,r4
   47dc4:	2807883a 	mov	r3,r5
   47dc8:	100d883a 	mov	r6,r2
   47dcc:	180f883a 	mov	r7,r3
   47dd0:	9009883a 	mov	r4,r18
   47dd4:	980b883a 	mov	r5,r19
   47dd8:	00421f40 	call	421f4 <__adddf3>
   47ddc:	1009883a 	mov	r4,r2
   47de0:	180b883a 	mov	r5,r3
   47de4:	e13fe515 	stw	r4,-108(fp)
   47de8:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
   47dec:	e13fe517 	ldw	r4,-108(fp)
   47df0:	e17fe617 	ldw	r5,-104(fp)
   47df4:	00446b40 	call	446b4 <__fixdfsi>
   47df8:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
   47dfc:	000d883a 	mov	r6,zero
   47e00:	000f883a 	mov	r7,zero
   47e04:	e13fe517 	ldw	r4,-108(fp)
   47e08:	e17fe617 	ldw	r5,-104(fp)
   47e0c:	00522e80 	call	522e8 <__ledf2>
   47e10:	10000d0e 	bge	r2,zero,47e48 <_dtoa_r+0x428>
   47e14:	e13fd717 	ldw	r4,-164(fp)
   47e18:	00447340 	call	44734 <__floatsidf>
   47e1c:	1011883a 	mov	r8,r2
   47e20:	1813883a 	mov	r9,r3
   47e24:	e1bfe517 	ldw	r6,-108(fp)
   47e28:	e1ffe617 	ldw	r7,-104(fp)
   47e2c:	4009883a 	mov	r4,r8
   47e30:	480b883a 	mov	r5,r9
   47e34:	00522600 	call	52260 <__eqdf2>
   47e38:	10000326 	beq	r2,zero,47e48 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
   47e3c:	e0bfd717 	ldw	r2,-164(fp)
   47e40:	10bfffc4 	addi	r2,r2,-1
   47e44:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
   47e48:	00800044 	movi	r2,1
   47e4c:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
   47e50:	e0bfd717 	ldw	r2,-164(fp)
   47e54:	10001616 	blt	r2,zero,47eb0 <_dtoa_r+0x490>
   47e58:	e0bfd717 	ldw	r2,-164(fp)
   47e5c:	108005c8 	cmpgei	r2,r2,23
   47e60:	1000131e 	bne	r2,zero,47eb0 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
   47e64:	e0bff217 	ldw	r2,-56(fp)
   47e68:	e0fff317 	ldw	r3,-52(fp)
   47e6c:	01000174 	movhi	r4,5
   47e70:	2113e504 	addi	r4,r4,20372
   47e74:	e17fd717 	ldw	r5,-164(fp)
   47e78:	280a90fa 	slli	r5,r5,3
   47e7c:	214d883a 	add	r6,r4,r5
   47e80:	31000017 	ldw	r4,0(r6)
   47e84:	31400117 	ldw	r5,4(r6)
   47e88:	200d883a 	mov	r6,r4
   47e8c:	280f883a 	mov	r7,r5
   47e90:	1009883a 	mov	r4,r2
   47e94:	180b883a 	mov	r5,r3
   47e98:	00522e80 	call	522e8 <__ledf2>
   47e9c:	1000030e 	bge	r2,zero,47eac <_dtoa_r+0x48c>
	k--;
   47ea0:	e0bfd717 	ldw	r2,-164(fp)
   47ea4:	10bfffc4 	addi	r2,r2,-1
   47ea8:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
   47eac:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
   47eb0:	e0fff017 	ldw	r3,-64(fp)
   47eb4:	e0bfd217 	ldw	r2,-184(fp)
   47eb8:	1885c83a 	sub	r2,r3,r2
   47ebc:	10bfffc4 	addi	r2,r2,-1
   47ec0:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
   47ec4:	e0bfd617 	ldw	r2,-168(fp)
   47ec8:	10000416 	blt	r2,zero,47edc <_dtoa_r+0x4bc>
    {
      b2 = 0;
   47ecc:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
   47ed0:	e0bfd617 	ldw	r2,-168(fp)
   47ed4:	e0bfdc15 	stw	r2,-144(fp)
   47ed8:	00000406 	br	47eec <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
   47edc:	e0bfd617 	ldw	r2,-168(fp)
   47ee0:	0085c83a 	sub	r2,zero,r2
   47ee4:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
   47ee8:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
   47eec:	e0bfd717 	ldw	r2,-164(fp)
   47ef0:	10000816 	blt	r2,zero,47f14 <_dtoa_r+0x4f4>
    {
      b5 = 0;
   47ef4:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
   47ef8:	e0bfd717 	ldw	r2,-164(fp)
   47efc:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
   47f00:	e0ffdc17 	ldw	r3,-144(fp)
   47f04:	e0bfd717 	ldw	r2,-164(fp)
   47f08:	1885883a 	add	r2,r3,r2
   47f0c:	e0bfdc15 	stw	r2,-144(fp)
   47f10:	00000806 	br	47f34 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
   47f14:	e0ffcf17 	ldw	r3,-196(fp)
   47f18:	e0bfd717 	ldw	r2,-164(fp)
   47f1c:	1885c83a 	sub	r2,r3,r2
   47f20:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
   47f24:	e0bfd717 	ldw	r2,-164(fp)
   47f28:	0085c83a 	sub	r2,zero,r2
   47f2c:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
   47f30:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
   47f34:	e0bffb17 	ldw	r2,-20(fp)
   47f38:	10000316 	blt	r2,zero,47f48 <_dtoa_r+0x528>
   47f3c:	e0bffb17 	ldw	r2,-20(fp)
   47f40:	10800290 	cmplti	r2,r2,10
   47f44:	1000011e 	bne	r2,zero,47f4c <_dtoa_r+0x52c>
    mode = 0;
   47f48:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
   47f4c:	00800044 	movi	r2,1
   47f50:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
   47f54:	e0bffb17 	ldw	r2,-20(fp)
   47f58:	10800190 	cmplti	r2,r2,6
   47f5c:	1000041e 	bne	r2,zero,47f70 <_dtoa_r+0x550>
    {
      mode -= 4;
   47f60:	e0bffb17 	ldw	r2,-20(fp)
   47f64:	10bfff04 	addi	r2,r2,-4
   47f68:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
   47f6c:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
   47f70:	00800044 	movi	r2,1
   47f74:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
   47f78:	00bfffc4 	movi	r2,-1
   47f7c:	e0bfd515 	stw	r2,-172(fp)
   47f80:	e0bfd517 	ldw	r2,-172(fp)
   47f84:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
   47f88:	e0bffb17 	ldw	r2,-20(fp)
   47f8c:	108001a8 	cmpgeui	r2,r2,6
   47f90:	10002c1e 	bne	r2,zero,48044 <_dtoa_r+0x624>
   47f94:	e0bffb17 	ldw	r2,-20(fp)
   47f98:	100690ba 	slli	r3,r2,2
   47f9c:	00800134 	movhi	r2,4
   47fa0:	109fec04 	addi	r2,r2,32688
   47fa4:	1885883a 	add	r2,r3,r2
   47fa8:	10800017 	ldw	r2,0(r2)
   47fac:	1000683a 	jmp	r2
   47fb0:	00047fc8 	cmpgei	zero,zero,4607
   47fb4:	00047fc8 	cmpgei	zero,zero,4607
   47fb8:	00047fd8 	cmpnei	zero,zero,4607
   47fbc:	00048008 	cmpgei	zero,zero,4608
   47fc0:	00047fdc 	xori	zero,zero,4607
   47fc4:	0004800c 	andi	zero,zero,4608
    {
    case 0:
    case 1:
      i = 18;
   47fc8:	00800484 	movi	r2,18
   47fcc:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
   47fd0:	e0000215 	stw	zero,8(fp)
      break;
   47fd4:	00001b06 	br	48044 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
   47fd8:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
   47fdc:	e0800217 	ldw	r2,8(fp)
   47fe0:	00800216 	blt	zero,r2,47fec <_dtoa_r+0x5cc>
	ndigits = 1;
   47fe4:	00800044 	movi	r2,1
   47fe8:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
   47fec:	e0800217 	ldw	r2,8(fp)
   47ff0:	e0bfd215 	stw	r2,-184(fp)
   47ff4:	e0bfd217 	ldw	r2,-184(fp)
   47ff8:	e0bfd515 	stw	r2,-172(fp)
   47ffc:	e0bfd517 	ldw	r2,-172(fp)
   48000:	e0bfd415 	stw	r2,-176(fp)
      break;
   48004:	00000f06 	br	48044 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
   48008:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
   4800c:	e0c00217 	ldw	r3,8(fp)
   48010:	e0bfd717 	ldw	r2,-164(fp)
   48014:	1885883a 	add	r2,r3,r2
   48018:	10800044 	addi	r2,r2,1
   4801c:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
   48020:	e0bfd217 	ldw	r2,-184(fp)
   48024:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
   48028:	e0bfd217 	ldw	r2,-184(fp)
   4802c:	10bfffc4 	addi	r2,r2,-1
   48030:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
   48034:	e0bfd217 	ldw	r2,-184(fp)
   48038:	00800216 	blt	zero,r2,48044 <_dtoa_r+0x624>
	i = 1;
   4803c:	00800044 	movi	r2,1
   48040:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
   48044:	00800104 	movi	r2,4
   48048:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   4804c:	e0bff817 	ldw	r2,-32(fp)
   48050:	10001115 	stw	zero,68(r2)
   48054:	00000806 	br	48078 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
   48058:	e0bff817 	ldw	r2,-32(fp)
   4805c:	10801117 	ldw	r2,68(r2)
   48060:	10c00044 	addi	r3,r2,1
   48064:	e0bff817 	ldw	r2,-32(fp)
   48068:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
   4806c:	e0bfd617 	ldw	r2,-168(fp)
   48070:	1085883a 	add	r2,r2,r2
   48074:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   48078:	e0bfd617 	ldw	r2,-168(fp)
   4807c:	10800504 	addi	r2,r2,20
   48080:	e0ffd217 	ldw	r3,-184(fp)
   48084:	18bff42e 	bgeu	r3,r2,48058 <_gp+0xfffe8e80>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
   48088:	e0bff817 	ldw	r2,-32(fp)
   4808c:	10801117 	ldw	r2,68(r2)
   48090:	100b883a 	mov	r5,r2
   48094:	e13ff817 	ldw	r4,-32(fp)
   48098:	004c8300 	call	4c830 <_Balloc>
   4809c:	1007883a 	mov	r3,r2
   480a0:	e0bff817 	ldw	r2,-32(fp)
   480a4:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
   480a8:	e0bff817 	ldw	r2,-32(fp)
   480ac:	10801017 	ldw	r2,64(r2)
   480b0:	e0bfe915 	stw	r2,-92(fp)
   480b4:	e0bfe917 	ldw	r2,-92(fp)
   480b8:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
   480bc:	e0bfd417 	ldw	r2,-176(fp)
   480c0:	10021616 	blt	r2,zero,4891c <_dtoa_r+0xefc>
   480c4:	e0bfd417 	ldw	r2,-176(fp)
   480c8:	108003c8 	cmpgei	r2,r2,15
   480cc:	1002131e 	bne	r2,zero,4891c <_dtoa_r+0xefc>
   480d0:	e0bfdf17 	ldw	r2,-132(fp)
   480d4:	10021126 	beq	r2,zero,4891c <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
   480d8:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
   480dc:	e0bff217 	ldw	r2,-56(fp)
   480e0:	e0fff317 	ldw	r3,-52(fp)
   480e4:	e0bff415 	stw	r2,-48(fp)
   480e8:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
   480ec:	e0bfd717 	ldw	r2,-164(fp)
   480f0:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
   480f4:	e0bfd417 	ldw	r2,-176(fp)
   480f8:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
   480fc:	00800084 	movi	r2,2
   48100:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
   48104:	e0bfd717 	ldw	r2,-164(fp)
   48108:	0080540e 	bge	zero,r2,4825c <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
   4810c:	e0bfd717 	ldw	r2,-164(fp)
   48110:	10c003cc 	andi	r3,r2,15
   48114:	00800174 	movhi	r2,5
   48118:	1093e504 	addi	r2,r2,20372
   4811c:	180690fa 	slli	r3,r3,3
   48120:	10c5883a 	add	r2,r2,r3
   48124:	10c00017 	ldw	r3,0(r2)
   48128:	e0ffe515 	stw	r3,-108(fp)
   4812c:	10800117 	ldw	r2,4(r2)
   48130:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
   48134:	e0bfd717 	ldw	r2,-164(fp)
   48138:	1005d13a 	srai	r2,r2,4
   4813c:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
   48140:	e0bfd617 	ldw	r2,-168(fp)
   48144:	1080040c 	andi	r2,r2,16
   48148:	10003426 	beq	r2,zero,4821c <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
   4814c:	e0bfd617 	ldw	r2,-168(fp)
   48150:	108003cc 	andi	r2,r2,15
   48154:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
   48158:	e0bff217 	ldw	r2,-56(fp)
   4815c:	e0fff317 	ldw	r3,-52(fp)
   48160:	01800174 	movhi	r6,5
   48164:	31941704 	addi	r6,r6,20572
   48168:	31000817 	ldw	r4,32(r6)
   4816c:	31400917 	ldw	r5,36(r6)
   48170:	200d883a 	mov	r6,r4
   48174:	280f883a 	mov	r7,r5
   48178:	1009883a 	mov	r4,r2
   4817c:	180b883a 	mov	r5,r3
   48180:	0042aa00 	call	42aa0 <__divdf3>
   48184:	1009883a 	mov	r4,r2
   48188:	180b883a 	mov	r5,r3
   4818c:	2005883a 	mov	r2,r4
   48190:	2807883a 	mov	r3,r5
   48194:	e0bff215 	stw	r2,-56(fp)
   48198:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
   4819c:	e0bfd317 	ldw	r2,-180(fp)
   481a0:	10800044 	addi	r2,r2,1
   481a4:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
   481a8:	00001c06 	br	4821c <_dtoa_r+0x7fc>
	    if (j & 1)
   481ac:	e0bfd617 	ldw	r2,-168(fp)
   481b0:	1080004c 	andi	r2,r2,1
   481b4:	10001326 	beq	r2,zero,48204 <_dtoa_r+0x7e4>
	      {
		ieps++;
   481b8:	e0bfd317 	ldw	r2,-180(fp)
   481bc:	10800044 	addi	r2,r2,1
   481c0:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
   481c4:	00800174 	movhi	r2,5
   481c8:	10941704 	addi	r2,r2,20572
   481cc:	e0ffd217 	ldw	r3,-184(fp)
   481d0:	180690fa 	slli	r3,r3,3
   481d4:	10c9883a 	add	r4,r2,r3
   481d8:	20800017 	ldw	r2,0(r4)
   481dc:	20c00117 	ldw	r3,4(r4)
   481e0:	100d883a 	mov	r6,r2
   481e4:	180f883a 	mov	r7,r3
   481e8:	e13fe517 	ldw	r4,-108(fp)
   481ec:	e17fe617 	ldw	r5,-104(fp)
   481f0:	004354c0 	call	4354c <__muldf3>
   481f4:	1009883a 	mov	r4,r2
   481f8:	180b883a 	mov	r5,r3
   481fc:	e13fe515 	stw	r4,-108(fp)
   48200:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
   48204:	e0bfd617 	ldw	r2,-168(fp)
   48208:	1005d07a 	srai	r2,r2,1
   4820c:	e0bfd615 	stw	r2,-168(fp)
   48210:	e0bfd217 	ldw	r2,-184(fp)
   48214:	10800044 	addi	r2,r2,1
   48218:	e0bfd215 	stw	r2,-184(fp)
   4821c:	e0bfd617 	ldw	r2,-168(fp)
   48220:	103fe21e 	bne	r2,zero,481ac <_gp+0xfffe8fd4>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
   48224:	e0bff217 	ldw	r2,-56(fp)
   48228:	e0fff317 	ldw	r3,-52(fp)
   4822c:	e1bfe517 	ldw	r6,-108(fp)
   48230:	e1ffe617 	ldw	r7,-104(fp)
   48234:	1009883a 	mov	r4,r2
   48238:	180b883a 	mov	r5,r3
   4823c:	0042aa00 	call	42aa0 <__divdf3>
   48240:	1009883a 	mov	r4,r2
   48244:	180b883a 	mov	r5,r3
   48248:	2005883a 	mov	r2,r4
   4824c:	2807883a 	mov	r3,r5
   48250:	e0bff215 	stw	r2,-56(fp)
   48254:	e0fff315 	stw	r3,-52(fp)
   48258:	00004006 	br	4835c <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
   4825c:	e0bfd717 	ldw	r2,-164(fp)
   48260:	0085c83a 	sub	r2,zero,r2
   48264:	e0bfec15 	stw	r2,-80(fp)
   48268:	e0bfec17 	ldw	r2,-80(fp)
   4826c:	10003b26 	beq	r2,zero,4835c <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
   48270:	e0bff217 	ldw	r2,-56(fp)
   48274:	e0fff317 	ldw	r3,-52(fp)
   48278:	e13fec17 	ldw	r4,-80(fp)
   4827c:	214003cc 	andi	r5,r4,15
   48280:	01000174 	movhi	r4,5
   48284:	2113e504 	addi	r4,r4,20372
   48288:	280a90fa 	slli	r5,r5,3
   4828c:	214d883a 	add	r6,r4,r5
   48290:	31000017 	ldw	r4,0(r6)
   48294:	31400117 	ldw	r5,4(r6)
   48298:	200d883a 	mov	r6,r4
   4829c:	280f883a 	mov	r7,r5
   482a0:	1009883a 	mov	r4,r2
   482a4:	180b883a 	mov	r5,r3
   482a8:	004354c0 	call	4354c <__muldf3>
   482ac:	1009883a 	mov	r4,r2
   482b0:	180b883a 	mov	r5,r3
   482b4:	2005883a 	mov	r2,r4
   482b8:	2807883a 	mov	r3,r5
   482bc:	e0bff215 	stw	r2,-56(fp)
   482c0:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
   482c4:	e0bfec17 	ldw	r2,-80(fp)
   482c8:	1005d13a 	srai	r2,r2,4
   482cc:	e0bfd615 	stw	r2,-168(fp)
   482d0:	00002006 	br	48354 <_dtoa_r+0x934>
	    if (j & 1)
   482d4:	e0bfd617 	ldw	r2,-168(fp)
   482d8:	1080004c 	andi	r2,r2,1
   482dc:	10001726 	beq	r2,zero,4833c <_dtoa_r+0x91c>
	      {
		ieps++;
   482e0:	e0bfd317 	ldw	r2,-180(fp)
   482e4:	10800044 	addi	r2,r2,1
   482e8:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
   482ec:	e0bff217 	ldw	r2,-56(fp)
   482f0:	e0fff317 	ldw	r3,-52(fp)
   482f4:	01000174 	movhi	r4,5
   482f8:	21141704 	addi	r4,r4,20572
   482fc:	e17fd217 	ldw	r5,-184(fp)
   48300:	280a90fa 	slli	r5,r5,3
   48304:	214d883a 	add	r6,r4,r5
   48308:	31000017 	ldw	r4,0(r6)
   4830c:	31400117 	ldw	r5,4(r6)
   48310:	200d883a 	mov	r6,r4
   48314:	280f883a 	mov	r7,r5
   48318:	1009883a 	mov	r4,r2
   4831c:	180b883a 	mov	r5,r3
   48320:	004354c0 	call	4354c <__muldf3>
   48324:	1009883a 	mov	r4,r2
   48328:	180b883a 	mov	r5,r3
   4832c:	2005883a 	mov	r2,r4
   48330:	2807883a 	mov	r3,r5
   48334:	e0bff215 	stw	r2,-56(fp)
   48338:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
   4833c:	e0bfd617 	ldw	r2,-168(fp)
   48340:	1005d07a 	srai	r2,r2,1
   48344:	e0bfd615 	stw	r2,-168(fp)
   48348:	e0bfd217 	ldw	r2,-184(fp)
   4834c:	10800044 	addi	r2,r2,1
   48350:	e0bfd215 	stw	r2,-184(fp)
   48354:	e0bfd617 	ldw	r2,-168(fp)
   48358:	103fde1e 	bne	r2,zero,482d4 <_gp+0xfffe90fc>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
   4835c:	e0bfd817 	ldw	r2,-160(fp)
   48360:	10002126 	beq	r2,zero,483e8 <_dtoa_r+0x9c8>
   48364:	e0bff217 	ldw	r2,-56(fp)
   48368:	e0fff317 	ldw	r3,-52(fp)
   4836c:	000d883a 	mov	r6,zero
   48370:	01cffc34 	movhi	r7,16368
   48374:	1009883a 	mov	r4,r2
   48378:	180b883a 	mov	r5,r3
   4837c:	00522e80 	call	522e8 <__ledf2>
   48380:	1000190e 	bge	r2,zero,483e8 <_dtoa_r+0x9c8>
   48384:	e0bfd417 	ldw	r2,-176(fp)
   48388:	0080170e 	bge	zero,r2,483e8 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
   4838c:	e0bfd517 	ldw	r2,-172(fp)
   48390:	0081550e 	bge	zero,r2,488e8 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
   48394:	e0bfd517 	ldw	r2,-172(fp)
   48398:	e0bfd415 	stw	r2,-176(fp)
	  k--;
   4839c:	e0bfd717 	ldw	r2,-164(fp)
   483a0:	10bfffc4 	addi	r2,r2,-1
   483a4:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
   483a8:	e0bff217 	ldw	r2,-56(fp)
   483ac:	e0fff317 	ldw	r3,-52(fp)
   483b0:	000d883a 	mov	r6,zero
   483b4:	01d00934 	movhi	r7,16420
   483b8:	1009883a 	mov	r4,r2
   483bc:	180b883a 	mov	r5,r3
   483c0:	004354c0 	call	4354c <__muldf3>
   483c4:	1009883a 	mov	r4,r2
   483c8:	180b883a 	mov	r5,r3
   483cc:	2005883a 	mov	r2,r4
   483d0:	2807883a 	mov	r3,r5
   483d4:	e0bff215 	stw	r2,-56(fp)
   483d8:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
   483dc:	e0bfd317 	ldw	r2,-180(fp)
   483e0:	10800044 	addi	r2,r2,1
   483e4:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
   483e8:	e13fd317 	ldw	r4,-180(fp)
   483ec:	00447340 	call	44734 <__floatsidf>
   483f0:	1011883a 	mov	r8,r2
   483f4:	1813883a 	mov	r9,r3
   483f8:	e0bff217 	ldw	r2,-56(fp)
   483fc:	e0fff317 	ldw	r3,-52(fp)
   48400:	100d883a 	mov	r6,r2
   48404:	180f883a 	mov	r7,r3
   48408:	4009883a 	mov	r4,r8
   4840c:	480b883a 	mov	r5,r9
   48410:	004354c0 	call	4354c <__muldf3>
   48414:	1009883a 	mov	r4,r2
   48418:	180b883a 	mov	r5,r3
   4841c:	2005883a 	mov	r2,r4
   48420:	2807883a 	mov	r3,r5
   48424:	000d883a 	mov	r6,zero
   48428:	01d00734 	movhi	r7,16412
   4842c:	1009883a 	mov	r4,r2
   48430:	180b883a 	mov	r5,r3
   48434:	00421f40 	call	421f4 <__adddf3>
   48438:	1009883a 	mov	r4,r2
   4843c:	180b883a 	mov	r5,r3
   48440:	2005883a 	mov	r2,r4
   48444:	2807883a 	mov	r3,r5
   48448:	e0bff615 	stw	r2,-40(fp)
   4844c:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
   48450:	e0fff717 	ldw	r3,-36(fp)
   48454:	00bf3034 	movhi	r2,64704
   48458:	1885883a 	add	r2,r3,r2
   4845c:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
   48460:	e0bfd417 	ldw	r2,-176(fp)
   48464:	1000271e 	bne	r2,zero,48504 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
   48468:	e03fe315 	stw	zero,-116(fp)
   4846c:	e0bfe317 	ldw	r2,-116(fp)
   48470:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
   48474:	e0bff217 	ldw	r2,-56(fp)
   48478:	e0fff317 	ldw	r3,-52(fp)
   4847c:	000d883a 	mov	r6,zero
   48480:	01d00534 	movhi	r7,16404
   48484:	1009883a 	mov	r4,r2
   48488:	180b883a 	mov	r5,r3
   4848c:	0043db80 	call	43db8 <__subdf3>
   48490:	1009883a 	mov	r4,r2
   48494:	180b883a 	mov	r5,r3
   48498:	2005883a 	mov	r2,r4
   4849c:	2807883a 	mov	r3,r5
   484a0:	e0bff215 	stw	r2,-56(fp)
   484a4:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
   484a8:	e0bff217 	ldw	r2,-56(fp)
   484ac:	e0fff317 	ldw	r3,-52(fp)
   484b0:	e13ff617 	ldw	r4,-40(fp)
   484b4:	e17ff717 	ldw	r5,-36(fp)
   484b8:	200d883a 	mov	r6,r4
   484bc:	280f883a 	mov	r7,r5
   484c0:	1009883a 	mov	r4,r2
   484c4:	180b883a 	mov	r5,r3
   484c8:	00434700 	call	43470 <__gedf2>
   484cc:	0082eb16 	blt	zero,r2,4907c <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
   484d0:	e23ff217 	ldw	r8,-56(fp)
   484d4:	e27ff317 	ldw	r9,-52(fp)
   484d8:	e0bff617 	ldw	r2,-40(fp)
   484dc:	e0fff717 	ldw	r3,-36(fp)
   484e0:	1021883a 	mov	r16,r2
   484e4:	1c60003c 	xorhi	r17,r3,32768
   484e8:	800d883a 	mov	r6,r16
   484ec:	880f883a 	mov	r7,r17
   484f0:	4009883a 	mov	r4,r8
   484f4:	480b883a 	mov	r5,r9
   484f8:	00522e80 	call	522e8 <__ledf2>
   484fc:	1002da16 	blt	r2,zero,49068 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
   48500:	0000fc06 	br	488f4 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
   48504:	e0bfd917 	ldw	r2,-156(fp)
   48508:	10007a26 	beq	r2,zero,486f4 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
   4850c:	e0bfd417 	ldw	r2,-176(fp)
   48510:	10ffffc4 	addi	r3,r2,-1
   48514:	00800174 	movhi	r2,5
   48518:	1093e504 	addi	r2,r2,20372
   4851c:	180690fa 	slli	r3,r3,3
   48520:	10c9883a 	add	r4,r2,r3
   48524:	20800017 	ldw	r2,0(r4)
   48528:	20c00117 	ldw	r3,4(r4)
   4852c:	100d883a 	mov	r6,r2
   48530:	180f883a 	mov	r7,r3
   48534:	0009883a 	mov	r4,zero
   48538:	014ff834 	movhi	r5,16352
   4853c:	0042aa00 	call	42aa0 <__divdf3>
   48540:	1009883a 	mov	r4,r2
   48544:	180b883a 	mov	r5,r3
   48548:	2011883a 	mov	r8,r4
   4854c:	2813883a 	mov	r9,r5
   48550:	e0bff617 	ldw	r2,-40(fp)
   48554:	e0fff717 	ldw	r3,-36(fp)
   48558:	100d883a 	mov	r6,r2
   4855c:	180f883a 	mov	r7,r3
   48560:	4009883a 	mov	r4,r8
   48564:	480b883a 	mov	r5,r9
   48568:	0043db80 	call	43db8 <__subdf3>
   4856c:	1009883a 	mov	r4,r2
   48570:	180b883a 	mov	r5,r3
   48574:	2005883a 	mov	r2,r4
   48578:	2807883a 	mov	r3,r5
   4857c:	e0bff615 	stw	r2,-40(fp)
   48580:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
   48584:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
   48588:	e0bff217 	ldw	r2,-56(fp)
   4858c:	e0fff317 	ldw	r3,-52(fp)
   48590:	1009883a 	mov	r4,r2
   48594:	180b883a 	mov	r5,r3
   48598:	00446b40 	call	446b4 <__fixdfsi>
   4859c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   485a0:	e43ff217 	ldw	r16,-56(fp)
   485a4:	e47ff317 	ldw	r17,-52(fp)
   485a8:	e13fed17 	ldw	r4,-76(fp)
   485ac:	00447340 	call	44734 <__floatsidf>
   485b0:	1009883a 	mov	r4,r2
   485b4:	180b883a 	mov	r5,r3
   485b8:	200d883a 	mov	r6,r4
   485bc:	280f883a 	mov	r7,r5
   485c0:	8009883a 	mov	r4,r16
   485c4:	880b883a 	mov	r5,r17
   485c8:	0043db80 	call	43db8 <__subdf3>
   485cc:	1009883a 	mov	r4,r2
   485d0:	180b883a 	mov	r5,r3
   485d4:	2005883a 	mov	r2,r4
   485d8:	2807883a 	mov	r3,r5
   485dc:	e0bff215 	stw	r2,-56(fp)
   485e0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   485e4:	e0bfe717 	ldw	r2,-100(fp)
   485e8:	10c00044 	addi	r3,r2,1
   485ec:	e0ffe715 	stw	r3,-100(fp)
   485f0:	e0ffed17 	ldw	r3,-76(fp)
   485f4:	18c00c04 	addi	r3,r3,48
   485f8:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
   485fc:	e0bff217 	ldw	r2,-56(fp)
   48600:	e0fff317 	ldw	r3,-52(fp)
   48604:	e13ff617 	ldw	r4,-40(fp)
   48608:	e17ff717 	ldw	r5,-36(fp)
   4860c:	200d883a 	mov	r6,r4
   48610:	280f883a 	mov	r7,r5
   48614:	1009883a 	mov	r4,r2
   48618:	180b883a 	mov	r5,r3
   4861c:	00522e80 	call	522e8 <__ledf2>
   48620:	1003c416 	blt	r2,zero,49534 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
   48624:	e0bff217 	ldw	r2,-56(fp)
   48628:	e0fff317 	ldw	r3,-52(fp)
   4862c:	100d883a 	mov	r6,r2
   48630:	180f883a 	mov	r7,r3
   48634:	0009883a 	mov	r4,zero
   48638:	014ffc34 	movhi	r5,16368
   4863c:	0043db80 	call	43db8 <__subdf3>
   48640:	1009883a 	mov	r4,r2
   48644:	180b883a 	mov	r5,r3
   48648:	2011883a 	mov	r8,r4
   4864c:	2813883a 	mov	r9,r5
   48650:	e0bff617 	ldw	r2,-40(fp)
   48654:	e0fff717 	ldw	r3,-36(fp)
   48658:	100d883a 	mov	r6,r2
   4865c:	180f883a 	mov	r7,r3
   48660:	4009883a 	mov	r4,r8
   48664:	480b883a 	mov	r5,r9
   48668:	00522e80 	call	522e8 <__ledf2>
   4866c:	10012916 	blt	r2,zero,48b14 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
   48670:	e0bfd217 	ldw	r2,-184(fp)
   48674:	10800044 	addi	r2,r2,1
   48678:	e0bfd215 	stw	r2,-184(fp)
   4867c:	e0ffd217 	ldw	r3,-184(fp)
   48680:	e0bfd417 	ldw	r2,-176(fp)
   48684:	18809a0e 	bge	r3,r2,488f0 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
   48688:	e0bff617 	ldw	r2,-40(fp)
   4868c:	e0fff717 	ldw	r3,-36(fp)
   48690:	000d883a 	mov	r6,zero
   48694:	01d00934 	movhi	r7,16420
   48698:	1009883a 	mov	r4,r2
   4869c:	180b883a 	mov	r5,r3
   486a0:	004354c0 	call	4354c <__muldf3>
   486a4:	1009883a 	mov	r4,r2
   486a8:	180b883a 	mov	r5,r3
   486ac:	2005883a 	mov	r2,r4
   486b0:	2807883a 	mov	r3,r5
   486b4:	e0bff615 	stw	r2,-40(fp)
   486b8:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
   486bc:	e0bff217 	ldw	r2,-56(fp)
   486c0:	e0fff317 	ldw	r3,-52(fp)
   486c4:	000d883a 	mov	r6,zero
   486c8:	01d00934 	movhi	r7,16420
   486cc:	1009883a 	mov	r4,r2
   486d0:	180b883a 	mov	r5,r3
   486d4:	004354c0 	call	4354c <__muldf3>
   486d8:	1009883a 	mov	r4,r2
   486dc:	180b883a 	mov	r5,r3
   486e0:	2005883a 	mov	r2,r4
   486e4:	2807883a 	mov	r3,r5
   486e8:	e0bff215 	stw	r2,-56(fp)
   486ec:	e0fff315 	stw	r3,-52(fp)
	    }
   486f0:	003fa506 	br	48588 <_gp+0xfffe93b0>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
   486f4:	e0bff617 	ldw	r2,-40(fp)
   486f8:	e0fff717 	ldw	r3,-36(fp)
   486fc:	e13fd417 	ldw	r4,-176(fp)
   48700:	217fffc4 	addi	r5,r4,-1
   48704:	01000174 	movhi	r4,5
   48708:	2113e504 	addi	r4,r4,20372
   4870c:	280a90fa 	slli	r5,r5,3
   48710:	214d883a 	add	r6,r4,r5
   48714:	31000017 	ldw	r4,0(r6)
   48718:	31400117 	ldw	r5,4(r6)
   4871c:	200d883a 	mov	r6,r4
   48720:	280f883a 	mov	r7,r5
   48724:	1009883a 	mov	r4,r2
   48728:	180b883a 	mov	r5,r3
   4872c:	004354c0 	call	4354c <__muldf3>
   48730:	1009883a 	mov	r4,r2
   48734:	180b883a 	mov	r5,r3
   48738:	2005883a 	mov	r2,r4
   4873c:	2807883a 	mov	r3,r5
   48740:	e0bff615 	stw	r2,-40(fp)
   48744:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
   48748:	00800044 	movi	r2,1
   4874c:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
   48750:	e0bff217 	ldw	r2,-56(fp)
   48754:	e0fff317 	ldw	r3,-52(fp)
   48758:	1009883a 	mov	r4,r2
   4875c:	180b883a 	mov	r5,r3
   48760:	00446b40 	call	446b4 <__fixdfsi>
   48764:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   48768:	e43ff217 	ldw	r16,-56(fp)
   4876c:	e47ff317 	ldw	r17,-52(fp)
   48770:	e13fed17 	ldw	r4,-76(fp)
   48774:	00447340 	call	44734 <__floatsidf>
   48778:	1009883a 	mov	r4,r2
   4877c:	180b883a 	mov	r5,r3
   48780:	200d883a 	mov	r6,r4
   48784:	280f883a 	mov	r7,r5
   48788:	8009883a 	mov	r4,r16
   4878c:	880b883a 	mov	r5,r17
   48790:	0043db80 	call	43db8 <__subdf3>
   48794:	1009883a 	mov	r4,r2
   48798:	180b883a 	mov	r5,r3
   4879c:	2005883a 	mov	r2,r4
   487a0:	2807883a 	mov	r3,r5
   487a4:	e0bff215 	stw	r2,-56(fp)
   487a8:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   487ac:	e0bfe717 	ldw	r2,-100(fp)
   487b0:	10c00044 	addi	r3,r2,1
   487b4:	e0ffe715 	stw	r3,-100(fp)
   487b8:	e0ffed17 	ldw	r3,-76(fp)
   487bc:	18c00c04 	addi	r3,r3,48
   487c0:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
   487c4:	e0ffd217 	ldw	r3,-184(fp)
   487c8:	e0bfd417 	ldw	r2,-176(fp)
   487cc:	1880351e 	bne	r3,r2,488a4 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
   487d0:	e43ff217 	ldw	r16,-56(fp)
   487d4:	e47ff317 	ldw	r17,-52(fp)
   487d8:	e0bff617 	ldw	r2,-40(fp)
   487dc:	e0fff717 	ldw	r3,-36(fp)
   487e0:	000d883a 	mov	r6,zero
   487e4:	01cff834 	movhi	r7,16352
   487e8:	1009883a 	mov	r4,r2
   487ec:	180b883a 	mov	r5,r3
   487f0:	00421f40 	call	421f4 <__adddf3>
   487f4:	1009883a 	mov	r4,r2
   487f8:	180b883a 	mov	r5,r3
   487fc:	2005883a 	mov	r2,r4
   48800:	2807883a 	mov	r3,r5
   48804:	100d883a 	mov	r6,r2
   48808:	180f883a 	mov	r7,r3
   4880c:	8009883a 	mov	r4,r16
   48810:	880b883a 	mov	r5,r17
   48814:	00434700 	call	43470 <__gedf2>
   48818:	0080c016 	blt	zero,r2,48b1c <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
   4881c:	e43ff217 	ldw	r16,-56(fp)
   48820:	e47ff317 	ldw	r17,-52(fp)
   48824:	e0bff617 	ldw	r2,-40(fp)
   48828:	e0fff717 	ldw	r3,-36(fp)
   4882c:	100d883a 	mov	r6,r2
   48830:	180f883a 	mov	r7,r3
   48834:	0009883a 	mov	r4,zero
   48838:	014ff834 	movhi	r5,16352
   4883c:	0043db80 	call	43db8 <__subdf3>
   48840:	1009883a 	mov	r4,r2
   48844:	180b883a 	mov	r5,r3
   48848:	2005883a 	mov	r2,r4
   4884c:	2807883a 	mov	r3,r5
   48850:	100d883a 	mov	r6,r2
   48854:	180f883a 	mov	r7,r3
   48858:	8009883a 	mov	r4,r16
   4885c:	880b883a 	mov	r5,r17
   48860:	00522e80 	call	522e8 <__ledf2>
   48864:	10000116 	blt	r2,zero,4886c <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
   48868:	00002206 	br	488f4 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
   4886c:	e0bfe717 	ldw	r2,-100(fp)
   48870:	10bfffc4 	addi	r2,r2,-1
   48874:	e0bfe715 	stw	r2,-100(fp)
   48878:	e0bfe717 	ldw	r2,-100(fp)
   4887c:	10800003 	ldbu	r2,0(r2)
   48880:	10803fcc 	andi	r2,r2,255
   48884:	1080201c 	xori	r2,r2,128
   48888:	10bfe004 	addi	r2,r2,-128
   4888c:	10800c20 	cmpeqi	r2,r2,48
   48890:	103ff61e 	bne	r2,zero,4886c <_gp+0xfffe9694>
		      s++;
   48894:	e0bfe717 	ldw	r2,-100(fp)
   48898:	10800044 	addi	r2,r2,1
   4889c:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
   488a0:	00032506 	br	49538 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
   488a4:	e0bfd217 	ldw	r2,-184(fp)
   488a8:	10800044 	addi	r2,r2,1
   488ac:	e0bfd215 	stw	r2,-184(fp)
   488b0:	e0bff217 	ldw	r2,-56(fp)
   488b4:	e0fff317 	ldw	r3,-52(fp)
   488b8:	000d883a 	mov	r6,zero
   488bc:	01d00934 	movhi	r7,16420
   488c0:	1009883a 	mov	r4,r2
   488c4:	180b883a 	mov	r5,r3
   488c8:	004354c0 	call	4354c <__muldf3>
   488cc:	1009883a 	mov	r4,r2
   488d0:	180b883a 	mov	r5,r3
   488d4:	2005883a 	mov	r2,r4
   488d8:	2807883a 	mov	r3,r5
   488dc:	e0bff215 	stw	r2,-56(fp)
   488e0:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
   488e4:	003f9a06 	br	48750 <_gp+0xfffe9578>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
   488e8:	0001883a 	nop
   488ec:	00000106 	br	488f4 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
   488f0:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
   488f4:	e0bfe917 	ldw	r2,-92(fp)
   488f8:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
   488fc:	e0bff417 	ldw	r2,-48(fp)
   48900:	e0fff517 	ldw	r3,-44(fp)
   48904:	e0bff215 	stw	r2,-56(fp)
   48908:	e0fff315 	stw	r3,-52(fp)
      k = k0;
   4890c:	e0bfea17 	ldw	r2,-88(fp)
   48910:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
   48914:	e0bfeb17 	ldw	r2,-84(fp)
   48918:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
   4891c:	e0bff117 	ldw	r2,-60(fp)
   48920:	1000b816 	blt	r2,zero,48c04 <_dtoa_r+0x11e4>
   48924:	e0bfd717 	ldw	r2,-164(fp)
   48928:	108003c8 	cmpgei	r2,r2,15
   4892c:	1000b51e 	bne	r2,zero,48c04 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
   48930:	00800174 	movhi	r2,5
   48934:	1093e504 	addi	r2,r2,20372
   48938:	e0ffd717 	ldw	r3,-164(fp)
   4893c:	180690fa 	slli	r3,r3,3
   48940:	10c5883a 	add	r2,r2,r3
   48944:	10c00017 	ldw	r3,0(r2)
   48948:	e0ffe515 	stw	r3,-108(fp)
   4894c:	10800117 	ldw	r2,4(r2)
   48950:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
   48954:	e0800217 	ldw	r2,8(fp)
   48958:	1000190e 	bge	r2,zero,489c0 <_dtoa_r+0xfa0>
   4895c:	e0bfd417 	ldw	r2,-176(fp)
   48960:	00801716 	blt	zero,r2,489c0 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
   48964:	e03fe315 	stw	zero,-116(fp)
   48968:	e0bfe317 	ldw	r2,-116(fp)
   4896c:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
   48970:	e0bfd417 	ldw	r2,-176(fp)
   48974:	1001bd16 	blt	r2,zero,4906c <_dtoa_r+0x164c>
   48978:	e43ff217 	ldw	r16,-56(fp)
   4897c:	e47ff317 	ldw	r17,-52(fp)
   48980:	000d883a 	mov	r6,zero
   48984:	01d00534 	movhi	r7,16404
   48988:	e13fe517 	ldw	r4,-108(fp)
   4898c:	e17fe617 	ldw	r5,-104(fp)
   48990:	004354c0 	call	4354c <__muldf3>
   48994:	1009883a 	mov	r4,r2
   48998:	180b883a 	mov	r5,r3
   4899c:	2005883a 	mov	r2,r4
   489a0:	2807883a 	mov	r3,r5
   489a4:	100d883a 	mov	r6,r2
   489a8:	180f883a 	mov	r7,r3
   489ac:	8009883a 	mov	r4,r16
   489b0:	880b883a 	mov	r5,r17
   489b4:	00522e80 	call	522e8 <__ledf2>
   489b8:	0081ac0e 	bge	zero,r2,4906c <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
   489bc:	0001b006 	br	49080 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
   489c0:	00800044 	movi	r2,1
   489c4:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
   489c8:	e0bff217 	ldw	r2,-56(fp)
   489cc:	e0fff317 	ldw	r3,-52(fp)
   489d0:	e1bfe517 	ldw	r6,-108(fp)
   489d4:	e1ffe617 	ldw	r7,-104(fp)
   489d8:	1009883a 	mov	r4,r2
   489dc:	180b883a 	mov	r5,r3
   489e0:	0042aa00 	call	42aa0 <__divdf3>
   489e4:	1009883a 	mov	r4,r2
   489e8:	180b883a 	mov	r5,r3
   489ec:	2005883a 	mov	r2,r4
   489f0:	2807883a 	mov	r3,r5
   489f4:	1009883a 	mov	r4,r2
   489f8:	180b883a 	mov	r5,r3
   489fc:	00446b40 	call	446b4 <__fixdfsi>
   48a00:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
   48a04:	e43ff217 	ldw	r16,-56(fp)
   48a08:	e47ff317 	ldw	r17,-52(fp)
   48a0c:	e13fed17 	ldw	r4,-76(fp)
   48a10:	00447340 	call	44734 <__floatsidf>
   48a14:	1011883a 	mov	r8,r2
   48a18:	1813883a 	mov	r9,r3
   48a1c:	e1bfe517 	ldw	r6,-108(fp)
   48a20:	e1ffe617 	ldw	r7,-104(fp)
   48a24:	4009883a 	mov	r4,r8
   48a28:	480b883a 	mov	r5,r9
   48a2c:	004354c0 	call	4354c <__muldf3>
   48a30:	1009883a 	mov	r4,r2
   48a34:	180b883a 	mov	r5,r3
   48a38:	2005883a 	mov	r2,r4
   48a3c:	2807883a 	mov	r3,r5
   48a40:	100d883a 	mov	r6,r2
   48a44:	180f883a 	mov	r7,r3
   48a48:	8009883a 	mov	r4,r16
   48a4c:	880b883a 	mov	r5,r17
   48a50:	0043db80 	call	43db8 <__subdf3>
   48a54:	1009883a 	mov	r4,r2
   48a58:	180b883a 	mov	r5,r3
   48a5c:	2005883a 	mov	r2,r4
   48a60:	2807883a 	mov	r3,r5
   48a64:	e0bff215 	stw	r2,-56(fp)
   48a68:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
   48a6c:	e0bfe717 	ldw	r2,-100(fp)
   48a70:	10c00044 	addi	r3,r2,1
   48a74:	e0ffe715 	stw	r3,-100(fp)
   48a78:	e0ffed17 	ldw	r3,-76(fp)
   48a7c:	18c00c04 	addi	r3,r3,48
   48a80:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   48a84:	e0ffd217 	ldw	r3,-184(fp)
   48a88:	e0bfd417 	ldw	r2,-176(fp)
   48a8c:	1880401e 	bne	r3,r2,48b90 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
   48a90:	e0bff217 	ldw	r2,-56(fp)
   48a94:	e0fff317 	ldw	r3,-52(fp)
   48a98:	100d883a 	mov	r6,r2
   48a9c:	180f883a 	mov	r7,r3
   48aa0:	1009883a 	mov	r4,r2
   48aa4:	180b883a 	mov	r5,r3
   48aa8:	00421f40 	call	421f4 <__adddf3>
   48aac:	1009883a 	mov	r4,r2
   48ab0:	180b883a 	mov	r5,r3
   48ab4:	2005883a 	mov	r2,r4
   48ab8:	2807883a 	mov	r3,r5
   48abc:	e0bff215 	stw	r2,-56(fp)
   48ac0:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
   48ac4:	e0bff217 	ldw	r2,-56(fp)
   48ac8:	e0fff317 	ldw	r3,-52(fp)
   48acc:	e1bfe517 	ldw	r6,-108(fp)
   48ad0:	e1ffe617 	ldw	r7,-104(fp)
   48ad4:	1009883a 	mov	r4,r2
   48ad8:	180b883a 	mov	r5,r3
   48adc:	00434700 	call	43470 <__gedf2>
   48ae0:	00801a16 	blt	zero,r2,48b4c <_dtoa_r+0x112c>
   48ae4:	e0bff217 	ldw	r2,-56(fp)
   48ae8:	e0fff317 	ldw	r3,-52(fp)
   48aec:	e1bfe517 	ldw	r6,-108(fp)
   48af0:	e1ffe617 	ldw	r7,-104(fp)
   48af4:	1009883a 	mov	r4,r2
   48af8:	180b883a 	mov	r5,r3
   48afc:	00522600 	call	52260 <__eqdf2>
   48b00:	10003c1e 	bne	r2,zero,48bf4 <_dtoa_r+0x11d4>
   48b04:	e0bfed17 	ldw	r2,-76(fp)
   48b08:	1080004c 	andi	r2,r2,1
   48b0c:	10003926 	beq	r2,zero,48bf4 <_dtoa_r+0x11d4>
   48b10:	00000e06 	br	48b4c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
   48b14:	0001883a 	nop
   48b18:	00000c06 	br	48b4c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
   48b1c:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   48b20:	00000a06 	br	48b4c <_dtoa_r+0x112c>
		    if (s == s0)
   48b24:	e0ffe717 	ldw	r3,-100(fp)
   48b28:	e0bfe917 	ldw	r2,-92(fp)
   48b2c:	1880071e 	bne	r3,r2,48b4c <_dtoa_r+0x112c>
		      {
			k++;
   48b30:	e0bfd717 	ldw	r2,-164(fp)
   48b34:	10800044 	addi	r2,r2,1
   48b38:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
   48b3c:	e0bfe717 	ldw	r2,-100(fp)
   48b40:	00c00c04 	movi	r3,48
   48b44:	10c00005 	stb	r3,0(r2)
			break;
   48b48:	00000a06 	br	48b74 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   48b4c:	e0bfe717 	ldw	r2,-100(fp)
   48b50:	10bfffc4 	addi	r2,r2,-1
   48b54:	e0bfe715 	stw	r2,-100(fp)
   48b58:	e0bfe717 	ldw	r2,-100(fp)
   48b5c:	10800003 	ldbu	r2,0(r2)
   48b60:	10803fcc 	andi	r2,r2,255
   48b64:	1080201c 	xori	r2,r2,128
   48b68:	10bfe004 	addi	r2,r2,-128
   48b6c:	10800e60 	cmpeqi	r2,r2,57
   48b70:	103fec1e 	bne	r2,zero,48b24 <_gp+0xfffe994c>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
   48b74:	e0bfe717 	ldw	r2,-100(fp)
   48b78:	10c00044 	addi	r3,r2,1
   48b7c:	e0ffe715 	stw	r3,-100(fp)
   48b80:	10c00003 	ldbu	r3,0(r2)
   48b84:	18c00044 	addi	r3,r3,1
   48b88:	10c00005 	stb	r3,0(r2)
		}
	      break;
   48b8c:	00001906 	br	48bf4 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
   48b90:	e0bff217 	ldw	r2,-56(fp)
   48b94:	e0fff317 	ldw	r3,-52(fp)
   48b98:	000d883a 	mov	r6,zero
   48b9c:	01d00934 	movhi	r7,16420
   48ba0:	1009883a 	mov	r4,r2
   48ba4:	180b883a 	mov	r5,r3
   48ba8:	004354c0 	call	4354c <__muldf3>
   48bac:	1009883a 	mov	r4,r2
   48bb0:	180b883a 	mov	r5,r3
   48bb4:	2005883a 	mov	r2,r4
   48bb8:	2807883a 	mov	r3,r5
   48bbc:	e0bff215 	stw	r2,-56(fp)
   48bc0:	e0fff315 	stw	r3,-52(fp)
   48bc4:	e0bff217 	ldw	r2,-56(fp)
   48bc8:	e0fff317 	ldw	r3,-52(fp)
   48bcc:	000d883a 	mov	r6,zero
   48bd0:	000f883a 	mov	r7,zero
   48bd4:	1009883a 	mov	r4,r2
   48bd8:	180b883a 	mov	r5,r3
   48bdc:	00522600 	call	52260 <__eqdf2>
   48be0:	10000626 	beq	r2,zero,48bfc <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
   48be4:	e0bfd217 	ldw	r2,-184(fp)
   48be8:	10800044 	addi	r2,r2,1
   48bec:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
   48bf0:	003f7506 	br	489c8 <_gp+0xfffe97f0>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
   48bf4:	0001883a 	nop
   48bf8:	00024f06 	br	49538 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
   48bfc:	0001883a 	nop
	}
      goto ret1;
   48c00:	00024d06 	br	49538 <_dtoa_r+0x1b18>
    }

  m2 = b2;
   48c04:	e0bfcf17 	ldw	r2,-196(fp)
   48c08:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
   48c0c:	e0bfd017 	ldw	r2,-192(fp)
   48c10:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
   48c14:	e03fe215 	stw	zero,-120(fp)
   48c18:	e0bfe217 	ldw	r2,-120(fp)
   48c1c:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
   48c20:	e0bfd917 	ldw	r2,-156(fp)
   48c24:	10003a26 	beq	r2,zero,48d10 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
   48c28:	e0bffb17 	ldw	r2,-20(fp)
   48c2c:	10800088 	cmpgei	r2,r2,2
   48c30:	10000a1e 	bne	r2,zero,48c5c <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   48c34:	e0bfe017 	ldw	r2,-128(fp)
   48c38:	10000326 	beq	r2,zero,48c48 <_dtoa_r+0x1228>
   48c3c:	e0bff117 	ldw	r2,-60(fp)
   48c40:	10810cc4 	addi	r2,r2,1075
   48c44:	00000306 	br	48c54 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
   48c48:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   48c4c:	00c00d84 	movi	r3,54
   48c50:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
   48c54:	e0bfd215 	stw	r2,-184(fp)
   48c58:	00002106 	br	48ce0 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
   48c5c:	e0bfd417 	ldw	r2,-176(fp)
   48c60:	10bfffc4 	addi	r2,r2,-1
   48c64:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
   48c68:	e0ffdb17 	ldw	r3,-148(fp)
   48c6c:	e0bfd617 	ldw	r2,-168(fp)
   48c70:	18800516 	blt	r3,r2,48c88 <_dtoa_r+0x1268>
	    m5 -= j;
   48c74:	e0ffdb17 	ldw	r3,-148(fp)
   48c78:	e0bfd617 	ldw	r2,-168(fp)
   48c7c:	1885c83a 	sub	r2,r3,r2
   48c80:	e0bfdb15 	stw	r2,-148(fp)
   48c84:	00000d06 	br	48cbc <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
   48c88:	e0ffd617 	ldw	r3,-168(fp)
   48c8c:	e0bfdb17 	ldw	r2,-148(fp)
   48c90:	1885c83a 	sub	r2,r3,r2
   48c94:	e0bfd615 	stw	r2,-168(fp)
   48c98:	e0bfd617 	ldw	r2,-168(fp)
   48c9c:	e0ffdd17 	ldw	r3,-140(fp)
   48ca0:	1885883a 	add	r2,r3,r2
   48ca4:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
   48ca8:	e0ffd017 	ldw	r3,-192(fp)
   48cac:	e0bfd617 	ldw	r2,-168(fp)
   48cb0:	1885883a 	add	r2,r3,r2
   48cb4:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
   48cb8:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
   48cbc:	e0bfd417 	ldw	r2,-176(fp)
   48cc0:	e0bfd215 	stw	r2,-184(fp)
   48cc4:	e0bfd217 	ldw	r2,-184(fp)
   48cc8:	1000050e 	bge	r2,zero,48ce0 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
   48ccc:	e0ffda17 	ldw	r3,-152(fp)
   48cd0:	e0bfd217 	ldw	r2,-184(fp)
   48cd4:	1885c83a 	sub	r2,r3,r2
   48cd8:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
   48cdc:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
   48ce0:	e0ffcf17 	ldw	r3,-196(fp)
   48ce4:	e0bfd217 	ldw	r2,-184(fp)
   48ce8:	1885883a 	add	r2,r3,r2
   48cec:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
   48cf0:	e0ffdc17 	ldw	r3,-144(fp)
   48cf4:	e0bfd217 	ldw	r2,-184(fp)
   48cf8:	1885883a 	add	r2,r3,r2
   48cfc:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
   48d00:	01400044 	movi	r5,1
   48d04:	e13ff817 	ldw	r4,-32(fp)
   48d08:	004ce900 	call	4ce90 <__i2b>
   48d0c:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
   48d10:	e0bfda17 	ldw	r2,-152(fp)
   48d14:	0080130e 	bge	zero,r2,48d64 <_dtoa_r+0x1344>
   48d18:	e0bfdc17 	ldw	r2,-144(fp)
   48d1c:	0080110e 	bge	zero,r2,48d64 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
   48d20:	e0ffda17 	ldw	r3,-152(fp)
   48d24:	e0bfdc17 	ldw	r2,-144(fp)
   48d28:	1880010e 	bge	r3,r2,48d30 <_dtoa_r+0x1310>
   48d2c:	1805883a 	mov	r2,r3
   48d30:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
   48d34:	e0ffcf17 	ldw	r3,-196(fp)
   48d38:	e0bfd217 	ldw	r2,-184(fp)
   48d3c:	1885c83a 	sub	r2,r3,r2
   48d40:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
   48d44:	e0ffda17 	ldw	r3,-152(fp)
   48d48:	e0bfd217 	ldw	r2,-184(fp)
   48d4c:	1885c83a 	sub	r2,r3,r2
   48d50:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
   48d54:	e0ffdc17 	ldw	r3,-144(fp)
   48d58:	e0bfd217 	ldw	r2,-184(fp)
   48d5c:	1885c83a 	sub	r2,r3,r2
   48d60:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
   48d64:	e0bfd017 	ldw	r2,-192(fp)
   48d68:	0080240e 	bge	zero,r2,48dfc <_dtoa_r+0x13dc>
    {
      if (leftright)
   48d6c:	e0bfd917 	ldw	r2,-156(fp)
   48d70:	10001d26 	beq	r2,zero,48de8 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
   48d74:	e0bfdb17 	ldw	r2,-148(fp)
   48d78:	00800f0e 	bge	zero,r2,48db8 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
   48d7c:	e1bfdb17 	ldw	r6,-148(fp)
   48d80:	e17fe317 	ldw	r5,-116(fp)
   48d84:	e13ff817 	ldw	r4,-32(fp)
   48d88:	004d2d80 	call	4d2d8 <__pow5mult>
   48d8c:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
   48d90:	e1bfe117 	ldw	r6,-124(fp)
   48d94:	e17fe317 	ldw	r5,-116(fp)
   48d98:	e13ff817 	ldw	r4,-32(fp)
   48d9c:	004cee80 	call	4cee8 <__multiply>
   48da0:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
   48da4:	e17fe117 	ldw	r5,-124(fp)
   48da8:	e13ff817 	ldw	r4,-32(fp)
   48dac:	004c9600 	call	4c960 <_Bfree>
	      b = b1;
   48db0:	e0bfee17 	ldw	r2,-72(fp)
   48db4:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
   48db8:	e0ffd017 	ldw	r3,-192(fp)
   48dbc:	e0bfdb17 	ldw	r2,-148(fp)
   48dc0:	1885c83a 	sub	r2,r3,r2
   48dc4:	e0bfd615 	stw	r2,-168(fp)
   48dc8:	e0bfd617 	ldw	r2,-168(fp)
   48dcc:	10000b26 	beq	r2,zero,48dfc <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
   48dd0:	e1bfd617 	ldw	r6,-168(fp)
   48dd4:	e17fe117 	ldw	r5,-124(fp)
   48dd8:	e13ff817 	ldw	r4,-32(fp)
   48ddc:	004d2d80 	call	4d2d8 <__pow5mult>
   48de0:	e0bfe115 	stw	r2,-124(fp)
   48de4:	00000506 	br	48dfc <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
   48de8:	e1bfd017 	ldw	r6,-192(fp)
   48dec:	e17fe117 	ldw	r5,-124(fp)
   48df0:	e13ff817 	ldw	r4,-32(fp)
   48df4:	004d2d80 	call	4d2d8 <__pow5mult>
   48df8:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
   48dfc:	01400044 	movi	r5,1
   48e00:	e13ff817 	ldw	r4,-32(fp)
   48e04:	004ce900 	call	4ce90 <__i2b>
   48e08:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
   48e0c:	e0bfdd17 	ldw	r2,-140(fp)
   48e10:	0080050e 	bge	zero,r2,48e28 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
   48e14:	e1bfdd17 	ldw	r6,-140(fp)
   48e18:	e17fe417 	ldw	r5,-112(fp)
   48e1c:	e13ff817 	ldw	r4,-32(fp)
   48e20:	004d2d80 	call	4d2d8 <__pow5mult>
   48e24:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
   48e28:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
   48e2c:	e0bffb17 	ldw	r2,-20(fp)
   48e30:	10800088 	cmpgei	r2,r2,2
   48e34:	1000121e 	bne	r2,zero,48e80 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
   48e38:	e0bff217 	ldw	r2,-56(fp)
   48e3c:	1000101e 	bne	r2,zero,48e80 <_dtoa_r+0x1460>
   48e40:	e0fff317 	ldw	r3,-52(fp)
   48e44:	00800434 	movhi	r2,16
   48e48:	10bfffc4 	addi	r2,r2,-1
   48e4c:	1884703a 	and	r2,r3,r2
   48e50:	10000b1e 	bne	r2,zero,48e80 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
   48e54:	e0bff317 	ldw	r2,-52(fp)
   48e58:	109ffc2c 	andhi	r2,r2,32752
   48e5c:	10000826 	beq	r2,zero,48e80 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
   48e60:	e0bfcf17 	ldw	r2,-196(fp)
   48e64:	10800044 	addi	r2,r2,1
   48e68:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
   48e6c:	e0bfdc17 	ldw	r2,-144(fp)
   48e70:	10800044 	addi	r2,r2,1
   48e74:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
   48e78:	00800044 	movi	r2,1
   48e7c:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
   48e80:	e0bfdd17 	ldw	r2,-140(fp)
   48e84:	10000f26 	beq	r2,zero,48ec4 <_dtoa_r+0x14a4>
   48e88:	e0bfe417 	ldw	r2,-112(fp)
   48e8c:	10800417 	ldw	r2,16(r2)
   48e90:	10bfffc4 	addi	r2,r2,-1
   48e94:	e0ffe417 	ldw	r3,-112(fp)
   48e98:	10800144 	addi	r2,r2,5
   48e9c:	1085883a 	add	r2,r2,r2
   48ea0:	1085883a 	add	r2,r2,r2
   48ea4:	1885883a 	add	r2,r3,r2
   48ea8:	10800017 	ldw	r2,0(r2)
   48eac:	1009883a 	mov	r4,r2
   48eb0:	004cd140 	call	4cd14 <__hi0bits>
   48eb4:	1007883a 	mov	r3,r2
   48eb8:	00800804 	movi	r2,32
   48ebc:	10c5c83a 	sub	r2,r2,r3
   48ec0:	00000106 	br	48ec8 <_dtoa_r+0x14a8>
   48ec4:	00800044 	movi	r2,1
   48ec8:	e0ffdc17 	ldw	r3,-144(fp)
   48ecc:	10c5883a 	add	r2,r2,r3
   48ed0:	108007cc 	andi	r2,r2,31
   48ed4:	e0bfd215 	stw	r2,-184(fp)
   48ed8:	e0bfd217 	ldw	r2,-184(fp)
   48edc:	10000426 	beq	r2,zero,48ef0 <_dtoa_r+0x14d0>
    i = 32 - i;
   48ee0:	00c00804 	movi	r3,32
   48ee4:	e0bfd217 	ldw	r2,-184(fp)
   48ee8:	1885c83a 	sub	r2,r3,r2
   48eec:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
   48ef0:	e0bfd217 	ldw	r2,-184(fp)
   48ef4:	10800150 	cmplti	r2,r2,5
   48ef8:	1000101e 	bne	r2,zero,48f3c <_dtoa_r+0x151c>
    {
      i -= 4;
   48efc:	e0bfd217 	ldw	r2,-184(fp)
   48f00:	10bfff04 	addi	r2,r2,-4
   48f04:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   48f08:	e0ffcf17 	ldw	r3,-196(fp)
   48f0c:	e0bfd217 	ldw	r2,-184(fp)
   48f10:	1885883a 	add	r2,r3,r2
   48f14:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   48f18:	e0ffda17 	ldw	r3,-152(fp)
   48f1c:	e0bfd217 	ldw	r2,-184(fp)
   48f20:	1885883a 	add	r2,r3,r2
   48f24:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   48f28:	e0ffdc17 	ldw	r3,-144(fp)
   48f2c:	e0bfd217 	ldw	r2,-184(fp)
   48f30:	1885883a 	add	r2,r3,r2
   48f34:	e0bfdc15 	stw	r2,-144(fp)
   48f38:	00001206 	br	48f84 <_dtoa_r+0x1564>
    }
  else if (i < 4)
   48f3c:	e0bfd217 	ldw	r2,-184(fp)
   48f40:	10800108 	cmpgei	r2,r2,4
   48f44:	10000f1e 	bne	r2,zero,48f84 <_dtoa_r+0x1564>
    {
      i += 28;
   48f48:	e0bfd217 	ldw	r2,-184(fp)
   48f4c:	10800704 	addi	r2,r2,28
   48f50:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   48f54:	e0ffcf17 	ldw	r3,-196(fp)
   48f58:	e0bfd217 	ldw	r2,-184(fp)
   48f5c:	1885883a 	add	r2,r3,r2
   48f60:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   48f64:	e0ffda17 	ldw	r3,-152(fp)
   48f68:	e0bfd217 	ldw	r2,-184(fp)
   48f6c:	1885883a 	add	r2,r3,r2
   48f70:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   48f74:	e0ffdc17 	ldw	r3,-144(fp)
   48f78:	e0bfd217 	ldw	r2,-184(fp)
   48f7c:	1885883a 	add	r2,r3,r2
   48f80:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
   48f84:	e0bfcf17 	ldw	r2,-196(fp)
   48f88:	0080050e 	bge	zero,r2,48fa0 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
   48f8c:	e1bfcf17 	ldw	r6,-196(fp)
   48f90:	e17fe117 	ldw	r5,-124(fp)
   48f94:	e13ff817 	ldw	r4,-32(fp)
   48f98:	004d4500 	call	4d450 <__lshift>
   48f9c:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
   48fa0:	e0bfdc17 	ldw	r2,-144(fp)
   48fa4:	0080050e 	bge	zero,r2,48fbc <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
   48fa8:	e1bfdc17 	ldw	r6,-144(fp)
   48fac:	e17fe417 	ldw	r5,-112(fp)
   48fb0:	e13ff817 	ldw	r4,-32(fp)
   48fb4:	004d4500 	call	4d450 <__lshift>
   48fb8:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
   48fbc:	e0bfd817 	ldw	r2,-160(fp)
   48fc0:	10001726 	beq	r2,zero,49020 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
   48fc4:	e17fe417 	ldw	r5,-112(fp)
   48fc8:	e13fe117 	ldw	r4,-124(fp)
   48fcc:	004d6480 	call	4d648 <__mcmp>
   48fd0:	1000130e 	bge	r2,zero,49020 <_dtoa_r+0x1600>
	{
	  k--;
   48fd4:	e0bfd717 	ldw	r2,-164(fp)
   48fd8:	10bfffc4 	addi	r2,r2,-1
   48fdc:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
   48fe0:	000f883a 	mov	r7,zero
   48fe4:	01800284 	movi	r6,10
   48fe8:	e17fe117 	ldw	r5,-124(fp)
   48fec:	e13ff817 	ldw	r4,-32(fp)
   48ff0:	004c9dc0 	call	4c9dc <__multadd>
   48ff4:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
   48ff8:	e0bfd917 	ldw	r2,-156(fp)
   48ffc:	10000626 	beq	r2,zero,49018 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
   49000:	000f883a 	mov	r7,zero
   49004:	01800284 	movi	r6,10
   49008:	e17fe317 	ldw	r5,-116(fp)
   4900c:	e13ff817 	ldw	r4,-32(fp)
   49010:	004c9dc0 	call	4c9dc <__multadd>
   49014:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
   49018:	e0bfd517 	ldw	r2,-172(fp)
   4901c:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
   49020:	e0bfd417 	ldw	r2,-176(fp)
   49024:	00801f16 	blt	zero,r2,490a4 <_dtoa_r+0x1684>
   49028:	e0bffb17 	ldw	r2,-20(fp)
   4902c:	108000d0 	cmplti	r2,r2,3
   49030:	10001c1e 	bne	r2,zero,490a4 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
   49034:	e0bfd417 	ldw	r2,-176(fp)
   49038:	10000c16 	blt	r2,zero,4906c <_dtoa_r+0x164c>
   4903c:	000f883a 	mov	r7,zero
   49040:	01800144 	movi	r6,5
   49044:	e17fe417 	ldw	r5,-112(fp)
   49048:	e13ff817 	ldw	r4,-32(fp)
   4904c:	004c9dc0 	call	4c9dc <__multadd>
   49050:	e0bfe415 	stw	r2,-112(fp)
   49054:	e17fe417 	ldw	r5,-112(fp)
   49058:	e13fe117 	ldw	r4,-124(fp)
   4905c:	004d6480 	call	4d648 <__mcmp>
   49060:	00800716 	blt	zero,r2,49080 <_dtoa_r+0x1660>
   49064:	00000106 	br	4906c <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
   49068:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
   4906c:	e0800217 	ldw	r2,8(fp)
   49070:	0084303a 	nor	r2,zero,r2
   49074:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
   49078:	00011d06 	br	494f0 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
   4907c:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
   49080:	e0bfe717 	ldw	r2,-100(fp)
   49084:	10c00044 	addi	r3,r2,1
   49088:	e0ffe715 	stw	r3,-100(fp)
   4908c:	00c00c44 	movi	r3,49
   49090:	10c00005 	stb	r3,0(r2)
      k++;
   49094:	e0bfd717 	ldw	r2,-164(fp)
   49098:	10800044 	addi	r2,r2,1
   4909c:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
   490a0:	00011306 	br	494f0 <_dtoa_r+0x1ad0>
    }
  if (leftright)
   490a4:	e0bfd917 	ldw	r2,-156(fp)
   490a8:	1000ba26 	beq	r2,zero,49394 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
   490ac:	e0bfda17 	ldw	r2,-152(fp)
   490b0:	0080050e 	bge	zero,r2,490c8 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
   490b4:	e1bfda17 	ldw	r6,-152(fp)
   490b8:	e17fe317 	ldw	r5,-116(fp)
   490bc:	e13ff817 	ldw	r4,-32(fp)
   490c0:	004d4500 	call	4d450 <__lshift>
   490c4:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
   490c8:	e0bfe317 	ldw	r2,-116(fp)
   490cc:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
   490d0:	e0bfde17 	ldw	r2,-136(fp)
   490d4:	10001826 	beq	r2,zero,49138 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
   490d8:	e0bfe317 	ldw	r2,-116(fp)
   490dc:	10800117 	ldw	r2,4(r2)
   490e0:	100b883a 	mov	r5,r2
   490e4:	e13ff817 	ldw	r4,-32(fp)
   490e8:	004c8300 	call	4c830 <_Balloc>
   490ec:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
   490f0:	e0bfe317 	ldw	r2,-116(fp)
   490f4:	10c00304 	addi	r3,r2,12
   490f8:	e0bfe217 	ldw	r2,-120(fp)
   490fc:	11000304 	addi	r4,r2,12
   49100:	e0bfe217 	ldw	r2,-120(fp)
   49104:	10800417 	ldw	r2,16(r2)
   49108:	10800084 	addi	r2,r2,2
   4910c:	1085883a 	add	r2,r2,r2
   49110:	1085883a 	add	r2,r2,r2
   49114:	100d883a 	mov	r6,r2
   49118:	200b883a 	mov	r5,r4
   4911c:	1809883a 	mov	r4,r3
   49120:	004c2dc0 	call	4c2dc <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
   49124:	01800044 	movi	r6,1
   49128:	e17fe317 	ldw	r5,-116(fp)
   4912c:	e13ff817 	ldw	r4,-32(fp)
   49130:	004d4500 	call	4d450 <__lshift>
   49134:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
   49138:	00800044 	movi	r2,1
   4913c:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
   49140:	e17fe417 	ldw	r5,-112(fp)
   49144:	e13fe117 	ldw	r4,-124(fp)
   49148:	004765c0 	call	4765c <quorem>
   4914c:	10800c04 	addi	r2,r2,48
   49150:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
   49154:	e17fe217 	ldw	r5,-120(fp)
   49158:	e13fe117 	ldw	r4,-124(fp)
   4915c:	004d6480 	call	4d648 <__mcmp>
   49160:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
   49164:	e1bfe317 	ldw	r6,-116(fp)
   49168:	e17fe417 	ldw	r5,-112(fp)
   4916c:	e13ff817 	ldw	r4,-32(fp)
   49170:	004d75c0 	call	4d75c <__mdiff>
   49174:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
   49178:	e0bfef17 	ldw	r2,-68(fp)
   4917c:	10800317 	ldw	r2,12(r2)
   49180:	1000041e 	bne	r2,zero,49194 <_dtoa_r+0x1774>
   49184:	e17fef17 	ldw	r5,-68(fp)
   49188:	e13fe117 	ldw	r4,-124(fp)
   4918c:	004d6480 	call	4d648 <__mcmp>
   49190:	00000106 	br	49198 <_dtoa_r+0x1778>
   49194:	00800044 	movi	r2,1
   49198:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
   4919c:	e17fef17 	ldw	r5,-68(fp)
   491a0:	e13ff817 	ldw	r4,-32(fp)
   491a4:	004c9600 	call	4c960 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
   491a8:	e0bfec17 	ldw	r2,-80(fp)
   491ac:	1000131e 	bne	r2,zero,491fc <_dtoa_r+0x17dc>
   491b0:	e0bffb17 	ldw	r2,-20(fp)
   491b4:	1000111e 	bne	r2,zero,491fc <_dtoa_r+0x17dc>
   491b8:	e0bff217 	ldw	r2,-56(fp)
   491bc:	1080004c 	andi	r2,r2,1
   491c0:	10000e1e 	bne	r2,zero,491fc <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
   491c4:	e0bfd117 	ldw	r2,-188(fp)
   491c8:	10800e58 	cmpnei	r2,r2,57
   491cc:	10003726 	beq	r2,zero,492ac <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
   491d0:	e0bfd617 	ldw	r2,-168(fp)
   491d4:	0080030e 	bge	zero,r2,491e4 <_dtoa_r+0x17c4>
		dig++;
   491d8:	e0bfd117 	ldw	r2,-188(fp)
   491dc:	10800044 	addi	r2,r2,1
   491e0:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
   491e4:	e0bfe717 	ldw	r2,-100(fp)
   491e8:	10c00044 	addi	r3,r2,1
   491ec:	e0ffe715 	stw	r3,-100(fp)
   491f0:	e0ffd117 	ldw	r3,-188(fp)
   491f4:	10c00005 	stb	r3,0(r2)
	      goto ret;
   491f8:	0000bd06 	br	494f0 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
   491fc:	e0bfd617 	ldw	r2,-168(fp)
   49200:	10000716 	blt	r2,zero,49220 <_dtoa_r+0x1800>
   49204:	e0bfd617 	ldw	r2,-168(fp)
   49208:	1000221e 	bne	r2,zero,49294 <_dtoa_r+0x1874>
   4920c:	e0bffb17 	ldw	r2,-20(fp)
   49210:	1000201e 	bne	r2,zero,49294 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
   49214:	e0bff217 	ldw	r2,-56(fp)
   49218:	1080004c 	andi	r2,r2,1
   4921c:	10001d1e 	bne	r2,zero,49294 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
   49220:	e0bfec17 	ldw	r2,-80(fp)
   49224:	0080150e 	bge	zero,r2,4927c <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
   49228:	01800044 	movi	r6,1
   4922c:	e17fe117 	ldw	r5,-124(fp)
   49230:	e13ff817 	ldw	r4,-32(fp)
   49234:	004d4500 	call	4d450 <__lshift>
   49238:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
   4923c:	e17fe417 	ldw	r5,-112(fp)
   49240:	e13fe117 	ldw	r4,-124(fp)
   49244:	004d6480 	call	4d648 <__mcmp>
   49248:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
   4924c:	e0bfec17 	ldw	r2,-80(fp)
   49250:	00800516 	blt	zero,r2,49268 <_dtoa_r+0x1848>
   49254:	e0bfec17 	ldw	r2,-80(fp)
   49258:	1000081e 	bne	r2,zero,4927c <_dtoa_r+0x185c>
   4925c:	e0bfd117 	ldw	r2,-188(fp)
   49260:	1080004c 	andi	r2,r2,1
   49264:	10000526 	beq	r2,zero,4927c <_dtoa_r+0x185c>
		      && dig++ == '9')
   49268:	e0bfd117 	ldw	r2,-188(fp)
   4926c:	10c00044 	addi	r3,r2,1
   49270:	e0ffd115 	stw	r3,-188(fp)
   49274:	10800e58 	cmpnei	r2,r2,57
   49278:	10000e26 	beq	r2,zero,492b4 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
   4927c:	e0bfe717 	ldw	r2,-100(fp)
   49280:	10c00044 	addi	r3,r2,1
   49284:	e0ffe715 	stw	r3,-100(fp)
   49288:	e0ffd117 	ldw	r3,-188(fp)
   4928c:	10c00005 	stb	r3,0(r2)
	      goto ret;
   49290:	00009706 	br	494f0 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
   49294:	e0bfec17 	ldw	r2,-80(fp)
   49298:	0080140e 	bge	zero,r2,492ec <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
   4929c:	e0bfd117 	ldw	r2,-188(fp)
   492a0:	10800e58 	cmpnei	r2,r2,57
   492a4:	10000a1e 	bne	r2,zero,492d0 <_dtoa_r+0x18b0>
   492a8:	00000306 	br	492b8 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
   492ac:	0001883a 	nop
   492b0:	00000106 	br	492b8 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
   492b4:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
   492b8:	e0bfe717 	ldw	r2,-100(fp)
   492bc:	10c00044 	addi	r3,r2,1
   492c0:	e0ffe715 	stw	r3,-100(fp)
   492c4:	00c00e44 	movi	r3,57
   492c8:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
   492cc:	00005d06 	br	49444 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
   492d0:	e0bfe717 	ldw	r2,-100(fp)
   492d4:	10c00044 	addi	r3,r2,1
   492d8:	e0ffe715 	stw	r3,-100(fp)
   492dc:	e0ffd117 	ldw	r3,-188(fp)
   492e0:	18c00044 	addi	r3,r3,1
   492e4:	10c00005 	stb	r3,0(r2)
	      goto ret;
   492e8:	00008106 	br	494f0 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
   492ec:	e0bfe717 	ldw	r2,-100(fp)
   492f0:	10c00044 	addi	r3,r2,1
   492f4:	e0ffe715 	stw	r3,-100(fp)
   492f8:	e0ffd117 	ldw	r3,-188(fp)
   492fc:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   49300:	e0ffd217 	ldw	r3,-184(fp)
   49304:	e0bfd417 	ldw	r2,-176(fp)
   49308:	18803b26 	beq	r3,r2,493f8 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
   4930c:	000f883a 	mov	r7,zero
   49310:	01800284 	movi	r6,10
   49314:	e17fe117 	ldw	r5,-124(fp)
   49318:	e13ff817 	ldw	r4,-32(fp)
   4931c:	004c9dc0 	call	4c9dc <__multadd>
   49320:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
   49324:	e0ffe217 	ldw	r3,-120(fp)
   49328:	e0bfe317 	ldw	r2,-116(fp)
   4932c:	1880091e 	bne	r3,r2,49354 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
   49330:	000f883a 	mov	r7,zero
   49334:	01800284 	movi	r6,10
   49338:	e17fe317 	ldw	r5,-116(fp)
   4933c:	e13ff817 	ldw	r4,-32(fp)
   49340:	004c9dc0 	call	4c9dc <__multadd>
   49344:	e0bfe315 	stw	r2,-116(fp)
   49348:	e0bfe317 	ldw	r2,-116(fp)
   4934c:	e0bfe215 	stw	r2,-120(fp)
   49350:	00000c06 	br	49384 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
   49354:	000f883a 	mov	r7,zero
   49358:	01800284 	movi	r6,10
   4935c:	e17fe217 	ldw	r5,-120(fp)
   49360:	e13ff817 	ldw	r4,-32(fp)
   49364:	004c9dc0 	call	4c9dc <__multadd>
   49368:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
   4936c:	000f883a 	mov	r7,zero
   49370:	01800284 	movi	r6,10
   49374:	e17fe317 	ldw	r5,-116(fp)
   49378:	e13ff817 	ldw	r4,-32(fp)
   4937c:	004c9dc0 	call	4c9dc <__multadd>
   49380:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
   49384:	e0bfd217 	ldw	r2,-184(fp)
   49388:	10800044 	addi	r2,r2,1
   4938c:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
   49390:	003f6b06 	br	49140 <_gp+0xfffe9f68>
    }
  else
    for (i = 1;; i++)
   49394:	00800044 	movi	r2,1
   49398:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
   4939c:	e43fe717 	ldw	r16,-100(fp)
   493a0:	80800044 	addi	r2,r16,1
   493a4:	e0bfe715 	stw	r2,-100(fp)
   493a8:	e17fe417 	ldw	r5,-112(fp)
   493ac:	e13fe117 	ldw	r4,-124(fp)
   493b0:	004765c0 	call	4765c <quorem>
   493b4:	10800c04 	addi	r2,r2,48
   493b8:	e0bfd115 	stw	r2,-188(fp)
   493bc:	e0bfd117 	ldw	r2,-188(fp)
   493c0:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
   493c4:	e0ffd217 	ldw	r3,-184(fp)
   493c8:	e0bfd417 	ldw	r2,-176(fp)
   493cc:	18800c0e 	bge	r3,r2,49400 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
   493d0:	000f883a 	mov	r7,zero
   493d4:	01800284 	movi	r6,10
   493d8:	e17fe117 	ldw	r5,-124(fp)
   493dc:	e13ff817 	ldw	r4,-32(fp)
   493e0:	004c9dc0 	call	4c9dc <__multadd>
   493e4:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
   493e8:	e0bfd217 	ldw	r2,-184(fp)
   493ec:	10800044 	addi	r2,r2,1
   493f0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
   493f4:	003fe906 	br	4939c <_gp+0xfffea1c4>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
   493f8:	0001883a 	nop
   493fc:	00000106 	br	49404 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
   49400:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
   49404:	01800044 	movi	r6,1
   49408:	e17fe117 	ldw	r5,-124(fp)
   4940c:	e13ff817 	ldw	r4,-32(fp)
   49410:	004d4500 	call	4d450 <__lshift>
   49414:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
   49418:	e17fe417 	ldw	r5,-112(fp)
   4941c:	e13fe117 	ldw	r4,-124(fp)
   49420:	004d6480 	call	4d648 <__mcmp>
   49424:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
   49428:	e0bfd617 	ldw	r2,-168(fp)
   4942c:	00801216 	blt	zero,r2,49478 <_dtoa_r+0x1a58>
   49430:	e0bfd617 	ldw	r2,-168(fp)
   49434:	1000211e 	bne	r2,zero,494bc <_dtoa_r+0x1a9c>
   49438:	e0bfd117 	ldw	r2,-188(fp)
   4943c:	1080004c 	andi	r2,r2,1
   49440:	10001e26 	beq	r2,zero,494bc <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
   49444:	00000c06 	br	49478 <_dtoa_r+0x1a58>
	if (s == s0)
   49448:	e0ffe717 	ldw	r3,-100(fp)
   4944c:	e0bfe917 	ldw	r2,-92(fp)
   49450:	1880091e 	bne	r3,r2,49478 <_dtoa_r+0x1a58>
	  {
	    k++;
   49454:	e0bfd717 	ldw	r2,-164(fp)
   49458:	10800044 	addi	r2,r2,1
   4945c:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
   49460:	e0bfe717 	ldw	r2,-100(fp)
   49464:	10c00044 	addi	r3,r2,1
   49468:	e0ffe715 	stw	r3,-100(fp)
   4946c:	00c00c44 	movi	r3,49
   49470:	10c00005 	stb	r3,0(r2)
	    goto ret;
   49474:	00001e06 	br	494f0 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
   49478:	e0bfe717 	ldw	r2,-100(fp)
   4947c:	10bfffc4 	addi	r2,r2,-1
   49480:	e0bfe715 	stw	r2,-100(fp)
   49484:	e0bfe717 	ldw	r2,-100(fp)
   49488:	10800003 	ldbu	r2,0(r2)
   4948c:	10803fcc 	andi	r2,r2,255
   49490:	1080201c 	xori	r2,r2,128
   49494:	10bfe004 	addi	r2,r2,-128
   49498:	10800e60 	cmpeqi	r2,r2,57
   4949c:	103fea1e 	bne	r2,zero,49448 <_gp+0xfffea270>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
   494a0:	e0bfe717 	ldw	r2,-100(fp)
   494a4:	10c00044 	addi	r3,r2,1
   494a8:	e0ffe715 	stw	r3,-100(fp)
   494ac:	10c00003 	ldbu	r3,0(r2)
   494b0:	18c00044 	addi	r3,r3,1
   494b4:	10c00005 	stb	r3,0(r2)
   494b8:	00000d06 	br	494f0 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
   494bc:	e0bfe717 	ldw	r2,-100(fp)
   494c0:	10bfffc4 	addi	r2,r2,-1
   494c4:	e0bfe715 	stw	r2,-100(fp)
   494c8:	e0bfe717 	ldw	r2,-100(fp)
   494cc:	10800003 	ldbu	r2,0(r2)
   494d0:	10803fcc 	andi	r2,r2,255
   494d4:	1080201c 	xori	r2,r2,128
   494d8:	10bfe004 	addi	r2,r2,-128
   494dc:	10800c20 	cmpeqi	r2,r2,48
   494e0:	103ff61e 	bne	r2,zero,494bc <_gp+0xfffea2e4>
      s++;
   494e4:	e0bfe717 	ldw	r2,-100(fp)
   494e8:	10800044 	addi	r2,r2,1
   494ec:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
   494f0:	e17fe417 	ldw	r5,-112(fp)
   494f4:	e13ff817 	ldw	r4,-32(fp)
   494f8:	004c9600 	call	4c960 <_Bfree>
  if (mhi)
   494fc:	e0bfe317 	ldw	r2,-116(fp)
   49500:	10000d26 	beq	r2,zero,49538 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
   49504:	e0bfe217 	ldw	r2,-120(fp)
   49508:	10000626 	beq	r2,zero,49524 <_dtoa_r+0x1b04>
   4950c:	e0ffe217 	ldw	r3,-120(fp)
   49510:	e0bfe317 	ldw	r2,-116(fp)
   49514:	18800326 	beq	r3,r2,49524 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
   49518:	e17fe217 	ldw	r5,-120(fp)
   4951c:	e13ff817 	ldw	r4,-32(fp)
   49520:	004c9600 	call	4c960 <_Bfree>
      Bfree (ptr, mhi);
   49524:	e17fe317 	ldw	r5,-116(fp)
   49528:	e13ff817 	ldw	r4,-32(fp)
   4952c:	004c9600 	call	4c960 <_Bfree>
   49530:	00000106 	br	49538 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
   49534:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
   49538:	e17fe117 	ldw	r5,-124(fp)
   4953c:	e13ff817 	ldw	r4,-32(fp)
   49540:	004c9600 	call	4c960 <_Bfree>
  *s = 0;
   49544:	e0bfe717 	ldw	r2,-100(fp)
   49548:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
   4954c:	e0bfd717 	ldw	r2,-164(fp)
   49550:	10c00044 	addi	r3,r2,1
   49554:	e0800317 	ldw	r2,12(fp)
   49558:	10c00015 	stw	r3,0(r2)
  if (rve)
   4955c:	e0800517 	ldw	r2,20(fp)
   49560:	10000326 	beq	r2,zero,49570 <_dtoa_r+0x1b50>
    *rve = s;
   49564:	e0800517 	ldw	r2,20(fp)
   49568:	e0ffe717 	ldw	r3,-100(fp)
   4956c:	10c00015 	stw	r3,0(r2)
  return s0;
   49570:	e0bfe917 	ldw	r2,-92(fp)
}
   49574:	e6fffc04 	addi	sp,fp,-16
   49578:	dfc00517 	ldw	ra,20(sp)
   4957c:	df000417 	ldw	fp,16(sp)
   49580:	dcc00317 	ldw	r19,12(sp)
   49584:	dc800217 	ldw	r18,8(sp)
   49588:	dc400117 	ldw	r17,4(sp)
   4958c:	dc000017 	ldw	r16,0(sp)
   49590:	dec00604 	addi	sp,sp,24
   49594:	f800283a 	ret

00049598 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   49598:	defff504 	addi	sp,sp,-44
   4959c:	dfc00a15 	stw	ra,40(sp)
   495a0:	df000915 	stw	fp,36(sp)
   495a4:	dcc00815 	stw	r19,32(sp)
   495a8:	dc800715 	stw	r18,28(sp)
   495ac:	dc400615 	stw	r17,24(sp)
   495b0:	dc000515 	stw	r16,20(sp)
   495b4:	df000904 	addi	fp,sp,36
   495b8:	e13ffb15 	stw	r4,-20(fp)
   495bc:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
   495c0:	8080030b 	ldhu	r2,12(r16)
   495c4:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
   495c8:	e0bff90b 	ldhu	r2,-28(fp)
   495cc:	10bfffcc 	andi	r2,r2,65535
   495d0:	1080020c 	andi	r2,r2,8
   495d4:	1000831e 	bne	r2,zero,497e4 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   495d8:	8080030b 	ldhu	r2,12(r16)
   495dc:	10820014 	ori	r2,r2,2048
   495e0:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   495e4:	80800117 	ldw	r2,4(r16)
   495e8:	00800216 	blt	zero,r2,495f4 <__sflush_r+0x5c>
   495ec:	80800f17 	ldw	r2,60(r16)
   495f0:	00807a0e 	bge	zero,r2,497dc <__sflush_r+0x244>
   495f4:	80800a17 	ldw	r2,40(r16)
   495f8:	10007826 	beq	r2,zero,497dc <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
   495fc:	e0bffb17 	ldw	r2,-20(fp)
   49600:	10800017 	ldw	r2,0(r2)
   49604:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
   49608:	e0bffb17 	ldw	r2,-20(fp)
   4960c:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   49610:	8080030b 	ldhu	r2,12(r16)
   49614:	10bfffcc 	andi	r2,r2,65535
   49618:	1084000c 	andi	r2,r2,4096
   4961c:	10000326 	beq	r2,zero,4962c <__sflush_r+0x94>
	    curoff = fp->_offset;
   49620:	80801417 	ldw	r2,80(r16)
   49624:	e0bff715 	stw	r2,-36(fp)
   49628:	00002206 	br	496b4 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   4962c:	80800a17 	ldw	r2,40(r16)
   49630:	80c00717 	ldw	r3,28(r16)
   49634:	01c00044 	movi	r7,1
   49638:	000d883a 	mov	r6,zero
   4963c:	180b883a 	mov	r5,r3
   49640:	e13ffb17 	ldw	r4,-20(fp)
   49644:	103ee83a 	callr	r2
   49648:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
   4964c:	e0bff717 	ldw	r2,-36(fp)
   49650:	10bfffd8 	cmpnei	r2,r2,-1
   49654:	1000171e 	bne	r2,zero,496b4 <__sflush_r+0x11c>
   49658:	e0bffb17 	ldw	r2,-20(fp)
   4965c:	10800017 	ldw	r2,0(r2)
   49660:	10001426 	beq	r2,zero,496b4 <__sflush_r+0x11c>
		{
		  int result = EOF;
   49664:	00bfffc4 	movi	r2,-1
   49668:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   4966c:	e0bffb17 	ldw	r2,-20(fp)
   49670:	10800017 	ldw	r2,0(r2)
   49674:	10800760 	cmpeqi	r2,r2,29
   49678:	1000041e 	bne	r2,zero,4968c <__sflush_r+0xf4>
   4967c:	e0bffb17 	ldw	r2,-20(fp)
   49680:	10800017 	ldw	r2,0(r2)
   49684:	10800598 	cmpnei	r2,r2,22
   49688:	1000051e 	bne	r2,zero,496a0 <__sflush_r+0x108>
		    {
		      result = 0;
   4968c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
   49690:	e0bffb17 	ldw	r2,-20(fp)
   49694:	e0fffa17 	ldw	r3,-24(fp)
   49698:	10c00015 	stw	r3,0(r2)
   4969c:	00000306 	br	496ac <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
   496a0:	8080030b 	ldhu	r2,12(r16)
   496a4:	10801014 	ori	r2,r2,64
   496a8:	8080030d 	sth	r2,12(r16)
		  return result;
   496ac:	e0bff817 	ldw	r2,-32(fp)
   496b0:	00007106 	br	49878 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
   496b4:	8080030b 	ldhu	r2,12(r16)
   496b8:	10bfffcc 	andi	r2,r2,65535
   496bc:	1080010c 	andi	r2,r2,4
   496c0:	10000a26 	beq	r2,zero,496ec <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   496c4:	80800117 	ldw	r2,4(r16)
   496c8:	e0fff717 	ldw	r3,-36(fp)
   496cc:	1885c83a 	sub	r2,r3,r2
   496d0:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
   496d4:	80800c17 	ldw	r2,48(r16)
   496d8:	10000426 	beq	r2,zero,496ec <__sflush_r+0x154>
                curoff -= fp->_ur;
   496dc:	80800f17 	ldw	r2,60(r16)
   496e0:	e0fff717 	ldw	r3,-36(fp)
   496e4:	1885c83a 	sub	r2,r3,r2
   496e8:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
   496ec:	80800a17 	ldw	r2,40(r16)
   496f0:	80c00717 	ldw	r3,28(r16)
   496f4:	000f883a 	mov	r7,zero
   496f8:	e1bff717 	ldw	r6,-36(fp)
   496fc:	180b883a 	mov	r5,r3
   49700:	e13ffb17 	ldw	r4,-20(fp)
   49704:	103ee83a 	callr	r2
   49708:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
   4970c:	e0bff717 	ldw	r2,-36(fp)
   49710:	10bfffd8 	cmpnei	r2,r2,-1
   49714:	10000b1e 	bne	r2,zero,49744 <__sflush_r+0x1ac>
   49718:	e0bffb17 	ldw	r2,-20(fp)
   4971c:	10800017 	ldw	r2,0(r2)
   49720:	10000826 	beq	r2,zero,49744 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   49724:	e0bffb17 	ldw	r2,-20(fp)
   49728:	10800017 	ldw	r2,0(r2)
   4972c:	10800760 	cmpeqi	r2,r2,29
   49730:	1000041e 	bne	r2,zero,49744 <__sflush_r+0x1ac>
   49734:	e0bffb17 	ldw	r2,-20(fp)
   49738:	10800017 	ldw	r2,0(r2)
   4973c:	10800598 	cmpnei	r2,r2,22
   49740:	1000211e 	bne	r2,zero,497c8 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   49744:	80c0030b 	ldhu	r3,12(r16)
   49748:	00bdffc4 	movi	r2,-2049
   4974c:	1884703a 	and	r2,r3,r2
   49750:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
   49754:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
   49758:	80800417 	ldw	r2,16(r16)
   4975c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   49760:	8080030b 	ldhu	r2,12(r16)
   49764:	10bfffcc 	andi	r2,r2,65535
   49768:	1084000c 	andi	r2,r2,4096
   4976c:	10000826 	beq	r2,zero,49790 <__sflush_r+0x1f8>
   49770:	e0bff717 	ldw	r2,-36(fp)
   49774:	10bfffd8 	cmpnei	r2,r2,-1
   49778:	1000031e 	bne	r2,zero,49788 <__sflush_r+0x1f0>
   4977c:	e0bffb17 	ldw	r2,-20(fp)
   49780:	10800017 	ldw	r2,0(r2)
   49784:	1000021e 	bne	r2,zero,49790 <__sflush_r+0x1f8>
		fp->_offset = curoff;
   49788:	e0bff717 	ldw	r2,-36(fp)
   4978c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
   49790:	e0bffb17 	ldw	r2,-20(fp)
   49794:	e0fffa17 	ldw	r3,-24(fp)
   49798:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
   4979c:	80800c17 	ldw	r2,48(r16)
   497a0:	10000e26 	beq	r2,zero,497dc <__sflush_r+0x244>
		FREEUB (ptr, fp);
   497a4:	80c00c17 	ldw	r3,48(r16)
   497a8:	80801004 	addi	r2,r16,64
   497ac:	18800426 	beq	r3,r2,497c0 <__sflush_r+0x228>
   497b0:	80800c17 	ldw	r2,48(r16)
   497b4:	100b883a 	mov	r5,r2
   497b8:	e13ffb17 	ldw	r4,-20(fp)
   497bc:	0049f540 	call	49f54 <_free_r>
   497c0:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
   497c4:	00000506 	br	497dc <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
   497c8:	8080030b 	ldhu	r2,12(r16)
   497cc:	10801014 	ori	r2,r2,64
   497d0:	8080030d 	sth	r2,12(r16)
	      return EOF;
   497d4:	00bfffc4 	movi	r2,-1
   497d8:	00002706 	br	49878 <__sflush_r+0x2e0>
	    }
	}
      return 0;
   497dc:	0005883a 	mov	r2,zero
   497e0:	00002506 	br	49878 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
   497e4:	84400417 	ldw	r17,16(r16)
   497e8:	8800021e 	bne	r17,zero,497f4 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
   497ec:	0005883a 	mov	r2,zero
   497f0:	00002106 	br	49878 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
   497f4:	80800017 	ldw	r2,0(r16)
   497f8:	1007883a 	mov	r3,r2
   497fc:	8805883a 	mov	r2,r17
   49800:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
   49804:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   49808:	e0bff90b 	ldhu	r2,-28(fp)
   4980c:	10bfffcc 	andi	r2,r2,65535
   49810:	108000cc 	andi	r2,r2,3
   49814:	1000021e 	bne	r2,zero,49820 <__sflush_r+0x288>
   49818:	80800517 	ldw	r2,20(r16)
   4981c:	00000106 	br	49824 <__sflush_r+0x28c>
   49820:	0005883a 	mov	r2,zero
   49824:	80800215 	stw	r2,8(r16)

  while (n > 0)
   49828:	00001106 	br	49870 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
   4982c:	80800917 	ldw	r2,36(r16)
   49830:	80c00717 	ldw	r3,28(r16)
   49834:	900f883a 	mov	r7,r18
   49838:	880d883a 	mov	r6,r17
   4983c:	180b883a 	mov	r5,r3
   49840:	e13ffb17 	ldw	r4,-20(fp)
   49844:	103ee83a 	callr	r2
   49848:	1027883a 	mov	r19,r2
      if (t <= 0)
   4984c:	04c00516 	blt	zero,r19,49864 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
   49850:	8080030b 	ldhu	r2,12(r16)
   49854:	10801014 	ori	r2,r2,64
   49858:	8080030d 	sth	r2,12(r16)
          return EOF;
   4985c:	00bfffc4 	movi	r2,-1
   49860:	00000506 	br	49878 <__sflush_r+0x2e0>
	}
      p += t;
   49864:	9805883a 	mov	r2,r19
   49868:	88a3883a 	add	r17,r17,r2
      n -= t;
   4986c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
   49870:	04bfee16 	blt	zero,r18,4982c <_gp+0xfffea654>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
   49874:	0005883a 	mov	r2,zero
}
   49878:	e6fffc04 	addi	sp,fp,-16
   4987c:	dfc00517 	ldw	ra,20(sp)
   49880:	df000417 	ldw	fp,16(sp)
   49884:	dcc00317 	ldw	r19,12(sp)
   49888:	dc800217 	ldw	r18,8(sp)
   4988c:	dc400117 	ldw	r17,4(sp)
   49890:	dc000017 	ldw	r16,0(sp)
   49894:	dec00604 	addi	sp,sp,24
   49898:	f800283a 	ret

0004989c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   4989c:	defffa04 	addi	sp,sp,-24
   498a0:	dfc00515 	stw	ra,20(sp)
   498a4:	df000415 	stw	fp,16(sp)
   498a8:	dc000315 	stw	r16,12(sp)
   498ac:	df000404 	addi	fp,sp,16
   498b0:	e13ffe15 	stw	r4,-8(fp)
   498b4:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   498b8:	e0bffe17 	ldw	r2,-8(fp)
   498bc:	e0bffc15 	stw	r2,-16(fp)
   498c0:	e0bffc17 	ldw	r2,-16(fp)
   498c4:	10000526 	beq	r2,zero,498dc <_fflush_r+0x40>
   498c8:	e0bffc17 	ldw	r2,-16(fp)
   498cc:	10800e17 	ldw	r2,56(r2)
   498d0:	1000021e 	bne	r2,zero,498dc <_fflush_r+0x40>
   498d4:	e13ffc17 	ldw	r4,-16(fp)
   498d8:	0049d340 	call	49d34 <__sinit>

  if (!fp->_flags)
   498dc:	8080030b 	ldhu	r2,12(r16)
   498e0:	10bfffcc 	andi	r2,r2,65535
   498e4:	10a0001c 	xori	r2,r2,32768
   498e8:	10a00004 	addi	r2,r2,-32768
   498ec:	1000021e 	bne	r2,zero,498f8 <_fflush_r+0x5c>
    return 0;
   498f0:	0005883a 	mov	r2,zero
   498f4:	00000506 	br	4990c <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   498f8:	800b883a 	mov	r5,r16
   498fc:	e13ffe17 	ldw	r4,-8(fp)
   49900:	00495980 	call	49598 <__sflush_r>
   49904:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
   49908:	e0bffd17 	ldw	r2,-12(fp)
}
   4990c:	e6ffff04 	addi	sp,fp,-4
   49910:	dfc00217 	ldw	ra,8(sp)
   49914:	df000117 	ldw	fp,4(sp)
   49918:	dc000017 	ldw	r16,0(sp)
   4991c:	dec00304 	addi	sp,sp,12
   49920:	f800283a 	ret

00049924 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
   49924:	defffe04 	addi	sp,sp,-8
   49928:	dfc00115 	stw	ra,4(sp)
   4992c:	df000015 	stw	fp,0(sp)
   49930:	d839883a 	mov	fp,sp
   49934:	2005883a 	mov	r2,r4
  if (fp == NULL)
   49938:	1000061e 	bne	r2,zero,49954 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
   4993c:	d0a00617 	ldw	r2,-32744(gp)
   49940:	01400174 	movhi	r5,5
   49944:	29662704 	addi	r5,r5,-26468
   49948:	1009883a 	mov	r4,r2
   4994c:	004ad440 	call	4ad44 <_fwalk_reent>
   49950:	00000406 	br	49964 <fflush+0x40>

  return _fflush_r (_REENT, fp);
   49954:	d0e00517 	ldw	r3,-32748(gp)
   49958:	100b883a 	mov	r5,r2
   4995c:	1809883a 	mov	r4,r3
   49960:	004989c0 	call	4989c <_fflush_r>
}
   49964:	e037883a 	mov	sp,fp
   49968:	dfc00117 	ldw	ra,4(sp)
   4996c:	df000017 	ldw	fp,0(sp)
   49970:	dec00204 	addi	sp,sp,8
   49974:	f800283a 	ret

00049978 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
   49978:	defffa04 	addi	sp,sp,-24
   4997c:	dfc00515 	stw	ra,20(sp)
   49980:	df000415 	stw	fp,16(sp)
   49984:	df000404 	addi	fp,sp,16
   49988:	e13ffc15 	stw	r4,-16(fp)
   4998c:	e17ffd15 	stw	r5,-12(fp)
   49990:	e1bffe15 	stw	r6,-8(fp)
   49994:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
   49998:	e0bffc17 	ldw	r2,-16(fp)
   4999c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
   499a0:	e0bffc17 	ldw	r2,-16(fp)
   499a4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
   499a8:	e0bffc17 	ldw	r2,-16(fp)
   499ac:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
   499b0:	e0bffd17 	ldw	r2,-12(fp)
   499b4:	1007883a 	mov	r3,r2
   499b8:	e0bffc17 	ldw	r2,-16(fp)
   499bc:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
   499c0:	e0bffc17 	ldw	r2,-16(fp)
   499c4:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
   499c8:	e0bffe17 	ldw	r2,-8(fp)
   499cc:	1007883a 	mov	r3,r2
   499d0:	e0bffc17 	ldw	r2,-16(fp)
   499d4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
   499d8:	e0bffc17 	ldw	r2,-16(fp)
   499dc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
   499e0:	e0bffc17 	ldw	r2,-16(fp)
   499e4:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
   499e8:	e0bffc17 	ldw	r2,-16(fp)
   499ec:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   499f0:	e0bffc17 	ldw	r2,-16(fp)
   499f4:	10801704 	addi	r2,r2,92
   499f8:	01800204 	movi	r6,8
   499fc:	000b883a 	mov	r5,zero
   49a00:	1009883a 	mov	r4,r2
   49a04:	004c66c0 	call	4c66c <memset>
  ptr->_cookie = ptr;
   49a08:	e0bffc17 	ldw	r2,-16(fp)
   49a0c:	e0fffc17 	ldw	r3,-16(fp)
   49a10:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
   49a14:	e0fffc17 	ldw	r3,-16(fp)
   49a18:	00800174 	movhi	r2,5
   49a1c:	10bc0d04 	addi	r2,r2,-4044
   49a20:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   49a24:	e0fffc17 	ldw	r3,-16(fp)
   49a28:	00800174 	movhi	r2,5
   49a2c:	10bc4004 	addi	r2,r2,-3840
   49a30:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   49a34:	e0fffc17 	ldw	r3,-16(fp)
   49a38:	00800174 	movhi	r2,5
   49a3c:	10bc6d04 	addi	r2,r2,-3660
   49a40:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   49a44:	e0fffc17 	ldw	r3,-16(fp)
   49a48:	00800174 	movhi	r2,5
   49a4c:	10bc9504 	addi	r2,r2,-3500
   49a50:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
   49a54:	0001883a 	nop
   49a58:	e037883a 	mov	sp,fp
   49a5c:	dfc00117 	ldw	ra,4(sp)
   49a60:	df000017 	ldw	fp,0(sp)
   49a64:	dec00204 	addi	sp,sp,8
   49a68:	f800283a 	ret

00049a6c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   49a6c:	defffa04 	addi	sp,sp,-24
   49a70:	dfc00515 	stw	ra,20(sp)
   49a74:	df000415 	stw	fp,16(sp)
   49a78:	dc400315 	stw	r17,12(sp)
   49a7c:	dc000215 	stw	r16,8(sp)
   49a80:	df000404 	addi	fp,sp,16
   49a84:	e13ffd15 	stw	r4,-12(fp)
   49a88:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   49a8c:	80bfffc4 	addi	r2,r16,-1
   49a90:	01401a04 	movi	r5,104
   49a94:	1009883a 	mov	r4,r2
   49a98:	00421cc0 	call	421cc <__mulsi3>
   49a9c:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   49aa0:	100b883a 	mov	r5,r2
   49aa4:	e13ffd17 	ldw	r4,-12(fp)
   49aa8:	004b5a40 	call	4b5a4 <_malloc_r>
   49aac:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
   49ab0:	e0bffc17 	ldw	r2,-16(fp)
   49ab4:	1000021e 	bne	r2,zero,49ac0 <__sfmoreglue+0x54>
    return NULL;
   49ab8:	0005883a 	mov	r2,zero
   49abc:	00001306 	br	49b0c <__sfmoreglue+0xa0>
  g->glue._next = NULL;
   49ac0:	e0bffc17 	ldw	r2,-16(fp)
   49ac4:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
   49ac8:	e0bffc17 	ldw	r2,-16(fp)
   49acc:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
   49ad0:	e0bffc17 	ldw	r2,-16(fp)
   49ad4:	10c00304 	addi	r3,r2,12
   49ad8:	e0bffc17 	ldw	r2,-16(fp)
   49adc:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
   49ae0:	e0bffc17 	ldw	r2,-16(fp)
   49ae4:	14400304 	addi	r17,r2,12
   49ae8:	8005883a 	mov	r2,r16
   49aec:	01401a04 	movi	r5,104
   49af0:	1009883a 	mov	r4,r2
   49af4:	00421cc0 	call	421cc <__mulsi3>
   49af8:	100d883a 	mov	r6,r2
   49afc:	000b883a 	mov	r5,zero
   49b00:	8809883a 	mov	r4,r17
   49b04:	004c66c0 	call	4c66c <memset>
  return &g->glue;
   49b08:	e0bffc17 	ldw	r2,-16(fp)
}
   49b0c:	e6fffe04 	addi	sp,fp,-8
   49b10:	dfc00317 	ldw	ra,12(sp)
   49b14:	df000217 	ldw	fp,8(sp)
   49b18:	dc400117 	ldw	r17,4(sp)
   49b1c:	dc000017 	ldw	r16,0(sp)
   49b20:	dec00404 	addi	sp,sp,16
   49b24:	f800283a 	ret

00049b28 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   49b28:	defffa04 	addi	sp,sp,-24
   49b2c:	dfc00515 	stw	ra,20(sp)
   49b30:	df000415 	stw	fp,16(sp)
   49b34:	df000404 	addi	fp,sp,16
   49b38:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
   49b3c:	0049e0c0 	call	49e0c <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
   49b40:	d0a00617 	ldw	r2,-32744(gp)
   49b44:	10800e17 	ldw	r2,56(r2)
   49b48:	1000031e 	bne	r2,zero,49b58 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
   49b4c:	d0a00617 	ldw	r2,-32744(gp)
   49b50:	1009883a 	mov	r4,r2
   49b54:	0049d340 	call	49d34 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   49b58:	d0a00617 	ldw	r2,-32744(gp)
   49b5c:	1080b804 	addi	r2,r2,736
   49b60:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   49b64:	e0bffe17 	ldw	r2,-8(fp)
   49b68:	10800217 	ldw	r2,8(r2)
   49b6c:	e0bffc15 	stw	r2,-16(fp)
   49b70:	e0bffe17 	ldw	r2,-8(fp)
   49b74:	10800117 	ldw	r2,4(r2)
   49b78:	e0bffd15 	stw	r2,-12(fp)
   49b7c:	00000906 	br	49ba4 <__sfp+0x7c>
	if (fp->_flags == 0)
   49b80:	e0bffc17 	ldw	r2,-16(fp)
   49b84:	1080030b 	ldhu	r2,12(r2)
   49b88:	10bfffcc 	andi	r2,r2,65535
   49b8c:	10a0001c 	xori	r2,r2,32768
   49b90:	10a00004 	addi	r2,r2,-32768
   49b94:	10001f26 	beq	r2,zero,49c14 <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   49b98:	e0bffc17 	ldw	r2,-16(fp)
   49b9c:	10801a04 	addi	r2,r2,104
   49ba0:	e0bffc15 	stw	r2,-16(fp)
   49ba4:	e0bffd17 	ldw	r2,-12(fp)
   49ba8:	10bfffc4 	addi	r2,r2,-1
   49bac:	e0bffd15 	stw	r2,-12(fp)
   49bb0:	e0bffd17 	ldw	r2,-12(fp)
   49bb4:	103ff20e 	bge	r2,zero,49b80 <_gp+0xfffea9a8>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   49bb8:	e0bffe17 	ldw	r2,-8(fp)
   49bbc:	10800017 	ldw	r2,0(r2)
   49bc0:	1000091e 	bne	r2,zero,49be8 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
   49bc4:	01400104 	movi	r5,4
   49bc8:	e13fff17 	ldw	r4,-4(fp)
   49bcc:	0049a6c0 	call	49a6c <__sfmoreglue>
   49bd0:	1007883a 	mov	r3,r2
   49bd4:	e0bffe17 	ldw	r2,-8(fp)
   49bd8:	10c00015 	stw	r3,0(r2)
   49bdc:	e0bffe17 	ldw	r2,-8(fp)
   49be0:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   49be4:	10000426 	beq	r2,zero,49bf8 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   49be8:	e0bffe17 	ldw	r2,-8(fp)
   49bec:	10800017 	ldw	r2,0(r2)
   49bf0:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
   49bf4:	003fdb06 	br	49b64 <_gp+0xfffea98c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
   49bf8:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
   49bfc:	0049e2c0 	call	49e2c <__sfp_lock_release>
  d->_errno = ENOMEM;
   49c00:	e0bfff17 	ldw	r2,-4(fp)
   49c04:	00c00304 	movi	r3,12
   49c08:	10c00015 	stw	r3,0(r2)
  return NULL;
   49c0c:	0005883a 	mov	r2,zero
   49c10:	00002506 	br	49ca8 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
   49c14:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
   49c18:	e0bffc17 	ldw	r2,-16(fp)
   49c1c:	00ffffc4 	movi	r3,-1
   49c20:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
   49c24:	e0bffc17 	ldw	r2,-16(fp)
   49c28:	00c00044 	movi	r3,1
   49c2c:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
   49c30:	e0bffc17 	ldw	r2,-16(fp)
   49c34:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
   49c38:	0049e2c0 	call	49e2c <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
   49c3c:	e0bffc17 	ldw	r2,-16(fp)
   49c40:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
   49c44:	e0bffc17 	ldw	r2,-16(fp)
   49c48:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
   49c4c:	e0bffc17 	ldw	r2,-16(fp)
   49c50:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
   49c54:	e0bffc17 	ldw	r2,-16(fp)
   49c58:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
   49c5c:	e0bffc17 	ldw	r2,-16(fp)
   49c60:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
   49c64:	e0bffc17 	ldw	r2,-16(fp)
   49c68:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   49c6c:	e0bffc17 	ldw	r2,-16(fp)
   49c70:	10801704 	addi	r2,r2,92
   49c74:	01800204 	movi	r6,8
   49c78:	000b883a 	mov	r5,zero
   49c7c:	1009883a 	mov	r4,r2
   49c80:	004c66c0 	call	4c66c <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
   49c84:	e0bffc17 	ldw	r2,-16(fp)
   49c88:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
   49c8c:	e0bffc17 	ldw	r2,-16(fp)
   49c90:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
   49c94:	e0bffc17 	ldw	r2,-16(fp)
   49c98:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
   49c9c:	e0bffc17 	ldw	r2,-16(fp)
   49ca0:	10001215 	stw	zero,72(r2)

  return fp;
   49ca4:	e0bffc17 	ldw	r2,-16(fp)
}
   49ca8:	e037883a 	mov	sp,fp
   49cac:	dfc00117 	ldw	ra,4(sp)
   49cb0:	df000017 	ldw	fp,0(sp)
   49cb4:	dec00204 	addi	sp,sp,8
   49cb8:	f800283a 	ret

00049cbc <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
   49cbc:	defffc04 	addi	sp,sp,-16
   49cc0:	dfc00315 	stw	ra,12(sp)
   49cc4:	df000215 	stw	fp,8(sp)
   49cc8:	df000204 	addi	fp,sp,8
   49ccc:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
   49cd0:	00800174 	movhi	r2,5
   49cd4:	1082dd04 	addi	r2,r2,2932
   49cd8:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   49cdc:	e17ffe17 	ldw	r5,-8(fp)
   49ce0:	e13fff17 	ldw	r4,-4(fp)
   49ce4:	004ad440 	call	4ad44 <_fwalk_reent>
}
   49ce8:	0001883a 	nop
   49cec:	e037883a 	mov	sp,fp
   49cf0:	dfc00117 	ldw	ra,4(sp)
   49cf4:	df000017 	ldw	fp,0(sp)
   49cf8:	dec00204 	addi	sp,sp,8
   49cfc:	f800283a 	ret

00049d00 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
   49d00:	defffe04 	addi	sp,sp,-8
   49d04:	dfc00115 	stw	ra,4(sp)
   49d08:	df000015 	stw	fp,0(sp)
   49d0c:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
   49d10:	d0a00617 	ldw	r2,-32744(gp)
   49d14:	1009883a 	mov	r4,r2
   49d18:	0049cbc0 	call	49cbc <_cleanup_r>
}
   49d1c:	0001883a 	nop
   49d20:	e037883a 	mov	sp,fp
   49d24:	dfc00117 	ldw	ra,4(sp)
   49d28:	df000017 	ldw	fp,0(sp)
   49d2c:	dec00204 	addi	sp,sp,8
   49d30:	f800283a 	ret

00049d34 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
   49d34:	defffd04 	addi	sp,sp,-12
   49d38:	dfc00215 	stw	ra,8(sp)
   49d3c:	df000115 	stw	fp,4(sp)
   49d40:	df000104 	addi	fp,sp,4
   49d44:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
   49d48:	0049e4c0 	call	49e4c <__sinit_lock_acquire>

  if (s->__sdidinit)
   49d4c:	e0bfff17 	ldw	r2,-4(fp)
   49d50:	10800e17 	ldw	r2,56(r2)
   49d54:	10000226 	beq	r2,zero,49d60 <__sinit+0x2c>
    {
      __sinit_lock_release ();
   49d58:	0049e6c0 	call	49e6c <__sinit_lock_release>
      return;
   49d5c:	00002606 	br	49df8 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   49d60:	e0ffff17 	ldw	r3,-4(fp)
   49d64:	00800174 	movhi	r2,5
   49d68:	10a72f04 	addi	r2,r2,-25412
   49d6c:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
   49d70:	e0bfff17 	ldw	r2,-4(fp)
   49d74:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
   49d78:	e0bfff17 	ldw	r2,-4(fp)
   49d7c:	00c000c4 	movi	r3,3
   49d80:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
   49d84:	e0bfff17 	ldw	r2,-4(fp)
   49d88:	10c0bb04 	addi	r3,r2,748
   49d8c:	e0bfff17 	ldw	r2,-4(fp)
   49d90:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
   49d94:	e0bfff17 	ldw	r2,-4(fp)
   49d98:	10800117 	ldw	r2,4(r2)
   49d9c:	e1ffff17 	ldw	r7,-4(fp)
   49da0:	000d883a 	mov	r6,zero
   49da4:	01400104 	movi	r5,4
   49da8:	1009883a 	mov	r4,r2
   49dac:	00499780 	call	49978 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
   49db0:	e0bfff17 	ldw	r2,-4(fp)
   49db4:	10800217 	ldw	r2,8(r2)
   49db8:	e1ffff17 	ldw	r7,-4(fp)
   49dbc:	01800044 	movi	r6,1
   49dc0:	01400284 	movi	r5,10
   49dc4:	1009883a 	mov	r4,r2
   49dc8:	00499780 	call	49978 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
   49dcc:	e0bfff17 	ldw	r2,-4(fp)
   49dd0:	10800317 	ldw	r2,12(r2)
   49dd4:	e1ffff17 	ldw	r7,-4(fp)
   49dd8:	01800084 	movi	r6,2
   49ddc:	01400484 	movi	r5,18
   49de0:	1009883a 	mov	r4,r2
   49de4:	00499780 	call	49978 <std>

  s->__sdidinit = 1;
   49de8:	e0bfff17 	ldw	r2,-4(fp)
   49dec:	00c00044 	movi	r3,1
   49df0:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
   49df4:	0049e6c0 	call	49e6c <__sinit_lock_release>
}
   49df8:	e037883a 	mov	sp,fp
   49dfc:	dfc00117 	ldw	ra,4(sp)
   49e00:	df000017 	ldw	fp,0(sp)
   49e04:	dec00204 	addi	sp,sp,8
   49e08:	f800283a 	ret

00049e0c <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
   49e0c:	deffff04 	addi	sp,sp,-4
   49e10:	df000015 	stw	fp,0(sp)
   49e14:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
   49e18:	0001883a 	nop
   49e1c:	e037883a 	mov	sp,fp
   49e20:	df000017 	ldw	fp,0(sp)
   49e24:	dec00104 	addi	sp,sp,4
   49e28:	f800283a 	ret

00049e2c <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
   49e2c:	deffff04 	addi	sp,sp,-4
   49e30:	df000015 	stw	fp,0(sp)
   49e34:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
   49e38:	0001883a 	nop
   49e3c:	e037883a 	mov	sp,fp
   49e40:	df000017 	ldw	fp,0(sp)
   49e44:	dec00104 	addi	sp,sp,4
   49e48:	f800283a 	ret

00049e4c <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
   49e4c:	deffff04 	addi	sp,sp,-4
   49e50:	df000015 	stw	fp,0(sp)
   49e54:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
   49e58:	0001883a 	nop
   49e5c:	e037883a 	mov	sp,fp
   49e60:	df000017 	ldw	fp,0(sp)
   49e64:	dec00104 	addi	sp,sp,4
   49e68:	f800283a 	ret

00049e6c <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
   49e6c:	deffff04 	addi	sp,sp,-4
   49e70:	df000015 	stw	fp,0(sp)
   49e74:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
   49e78:	0001883a 	nop
   49e7c:	e037883a 	mov	sp,fp
   49e80:	df000017 	ldw	fp,0(sp)
   49e84:	dec00104 	addi	sp,sp,4
   49e88:	f800283a 	ret

00049e8c <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
   49e8c:	defffe04 	addi	sp,sp,-8
   49e90:	df000115 	stw	fp,4(sp)
   49e94:	df000104 	addi	fp,sp,4
   49e98:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
   49e9c:	0005883a 	mov	r2,zero
}
   49ea0:	e037883a 	mov	sp,fp
   49ea4:	df000017 	ldw	fp,0(sp)
   49ea8:	dec00104 	addi	sp,sp,4
   49eac:	f800283a 	ret

00049eb0 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
   49eb0:	defffe04 	addi	sp,sp,-8
   49eb4:	df000115 	stw	fp,4(sp)
   49eb8:	df000104 	addi	fp,sp,4
   49ebc:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
   49ec0:	0005883a 	mov	r2,zero
}
   49ec4:	e037883a 	mov	sp,fp
   49ec8:	df000017 	ldw	fp,0(sp)
   49ecc:	dec00104 	addi	sp,sp,4
   49ed0:	f800283a 	ret

00049ed4 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
   49ed4:	defffe04 	addi	sp,sp,-8
   49ed8:	dfc00115 	stw	ra,4(sp)
   49edc:	df000015 	stw	fp,0(sp)
   49ee0:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
   49ee4:	0049e0c0 	call	49e0c <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
   49ee8:	d0a00517 	ldw	r2,-32748(gp)
   49eec:	01400174 	movhi	r5,5
   49ef0:	2967a304 	addi	r5,r5,-24948
   49ef4:	1009883a 	mov	r4,r2
   49ef8:	004ac6c0 	call	4ac6c <_fwalk>
}
   49efc:	0001883a 	nop
   49f00:	e037883a 	mov	sp,fp
   49f04:	dfc00117 	ldw	ra,4(sp)
   49f08:	df000017 	ldw	fp,0(sp)
   49f0c:	dec00204 	addi	sp,sp,8
   49f10:	f800283a 	ret

00049f14 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
   49f14:	defffe04 	addi	sp,sp,-8
   49f18:	dfc00115 	stw	ra,4(sp)
   49f1c:	df000015 	stw	fp,0(sp)
   49f20:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
   49f24:	d0a00517 	ldw	r2,-32748(gp)
   49f28:	01400174 	movhi	r5,5
   49f2c:	2967ac04 	addi	r5,r5,-24912
   49f30:	1009883a 	mov	r4,r2
   49f34:	004ac6c0 	call	4ac6c <_fwalk>

  __sfp_lock_release ();
   49f38:	0049e2c0 	call	49e2c <__sfp_lock_release>
}
   49f3c:	0001883a 	nop
   49f40:	e037883a 	mov	sp,fp
   49f44:	dfc00117 	ldw	ra,4(sp)
   49f48:	df000017 	ldw	fp,0(sp)
   49f4c:	dec00204 	addi	sp,sp,8
   49f50:	f800283a 	ret

00049f54 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
   49f54:	defff204 	addi	sp,sp,-56
   49f58:	dfc00d15 	stw	ra,52(sp)
   49f5c:	df000c15 	stw	fp,48(sp)
   49f60:	df000c04 	addi	fp,sp,48
   49f64:	e13ffe15 	stw	r4,-8(fp)
   49f68:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
   49f6c:	e0bfff17 	ldw	r2,-4(fp)
   49f70:	10014a26 	beq	r2,zero,4a49c <_free_r+0x548>
    return;

  MALLOC_LOCK;
   49f74:	e13ffe17 	ldw	r4,-8(fp)
   49f78:	0052a200 	call	52a20 <__malloc_lock>

  p = mem2chunk(mem);
   49f7c:	e0bfff17 	ldw	r2,-4(fp)
   49f80:	10bffe04 	addi	r2,r2,-8
   49f84:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
   49f88:	e0bff417 	ldw	r2,-48(fp)
   49f8c:	10800117 	ldw	r2,4(r2)
   49f90:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
   49f94:	e0fff917 	ldw	r3,-28(fp)
   49f98:	00bfff84 	movi	r2,-2
   49f9c:	1884703a 	and	r2,r3,r2
   49fa0:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
   49fa4:	e0fff417 	ldw	r3,-48(fp)
   49fa8:	e0bff517 	ldw	r2,-44(fp)
   49fac:	1885883a 	add	r2,r3,r2
   49fb0:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
   49fb4:	e0bffa17 	ldw	r2,-24(fp)
   49fb8:	10c00117 	ldw	r3,4(r2)
   49fbc:	00bfff04 	movi	r2,-4
   49fc0:	1884703a 	and	r2,r3,r2
   49fc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
   49fc8:	00800174 	movhi	r2,5
   49fcc:	1096f204 	addi	r2,r2,23496
   49fd0:	10c00217 	ldw	r3,8(r2)
   49fd4:	e0bffa17 	ldw	r2,-24(fp)
   49fd8:	1880311e 	bne	r3,r2,4a0a0 <_free_r+0x14c>
  {
    sz += nextsz;
   49fdc:	e0fff517 	ldw	r3,-44(fp)
   49fe0:	e0bffb17 	ldw	r2,-20(fp)
   49fe4:	1885883a 	add	r2,r3,r2
   49fe8:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   49fec:	e0bff917 	ldw	r2,-28(fp)
   49ff0:	1080004c 	andi	r2,r2,1
   49ff4:	1000181e 	bne	r2,zero,4a058 <_free_r+0x104>
    {
      prevsz = p->prev_size;
   49ff8:	e0bff417 	ldw	r2,-48(fp)
   49ffc:	10800017 	ldw	r2,0(r2)
   4a000:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
   4a004:	e0bffc17 	ldw	r2,-16(fp)
   4a008:	0085c83a 	sub	r2,zero,r2
   4a00c:	e0fff417 	ldw	r3,-48(fp)
   4a010:	1885883a 	add	r2,r3,r2
   4a014:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
   4a018:	e0fff517 	ldw	r3,-44(fp)
   4a01c:	e0bffc17 	ldw	r2,-16(fp)
   4a020:	1885883a 	add	r2,r3,r2
   4a024:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
   4a028:	e0bff417 	ldw	r2,-48(fp)
   4a02c:	10800317 	ldw	r2,12(r2)
   4a030:	e0bff615 	stw	r2,-40(fp)
   4a034:	e0bff417 	ldw	r2,-48(fp)
   4a038:	10800217 	ldw	r2,8(r2)
   4a03c:	e0bff715 	stw	r2,-36(fp)
   4a040:	e0bff717 	ldw	r2,-36(fp)
   4a044:	e0fff617 	ldw	r3,-40(fp)
   4a048:	10c00315 	stw	r3,12(r2)
   4a04c:	e0bff617 	ldw	r2,-40(fp)
   4a050:	e0fff717 	ldw	r3,-36(fp)
   4a054:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
   4a058:	e0bff517 	ldw	r2,-44(fp)
   4a05c:	10c00054 	ori	r3,r2,1
   4a060:	e0bff417 	ldw	r2,-48(fp)
   4a064:	10c00115 	stw	r3,4(r2)
    top = p;
   4a068:	00800174 	movhi	r2,5
   4a06c:	1096f204 	addi	r2,r2,23496
   4a070:	e0fff417 	ldw	r3,-48(fp)
   4a074:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   4a078:	d0a00817 	ldw	r2,-32736(gp)
   4a07c:	e0fff517 	ldw	r3,-44(fp)
   4a080:	18800436 	bltu	r3,r2,4a094 <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
   4a084:	d0a85217 	ldw	r2,-24248(gp)
   4a088:	100b883a 	mov	r5,r2
   4a08c:	e13ffe17 	ldw	r4,-8(fp)
   4a090:	004a4b40 	call	4a4b4 <_malloc_trim_r>
    MALLOC_UNLOCK;
   4a094:	e13ffe17 	ldw	r4,-8(fp)
   4a098:	0052a440 	call	52a44 <__malloc_unlock>
    return;
   4a09c:	00010006 	br	4a4a0 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
   4a0a0:	e0bffa17 	ldw	r2,-24(fp)
   4a0a4:	e0fffb17 	ldw	r3,-20(fp)
   4a0a8:	10c00115 	stw	r3,4(r2)

  islr = 0;
   4a0ac:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
   4a0b0:	e0bff917 	ldw	r2,-28(fp)
   4a0b4:	1080004c 	andi	r2,r2,1
   4a0b8:	1000201e 	bne	r2,zero,4a13c <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
   4a0bc:	e0bff417 	ldw	r2,-48(fp)
   4a0c0:	10800017 	ldw	r2,0(r2)
   4a0c4:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
   4a0c8:	e0bffc17 	ldw	r2,-16(fp)
   4a0cc:	0085c83a 	sub	r2,zero,r2
   4a0d0:	e0fff417 	ldw	r3,-48(fp)
   4a0d4:	1885883a 	add	r2,r3,r2
   4a0d8:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
   4a0dc:	e0fff517 	ldw	r3,-44(fp)
   4a0e0:	e0bffc17 	ldw	r2,-16(fp)
   4a0e4:	1885883a 	add	r2,r3,r2
   4a0e8:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   4a0ec:	e0bff417 	ldw	r2,-48(fp)
   4a0f0:	10c00217 	ldw	r3,8(r2)
   4a0f4:	00800174 	movhi	r2,5
   4a0f8:	1096f404 	addi	r2,r2,23504
   4a0fc:	1880031e 	bne	r3,r2,4a10c <_free_r+0x1b8>
      islr = 1;
   4a100:	00800044 	movi	r2,1
   4a104:	e0bff815 	stw	r2,-32(fp)
   4a108:	00000c06 	br	4a13c <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
   4a10c:	e0bff417 	ldw	r2,-48(fp)
   4a110:	10800317 	ldw	r2,12(r2)
   4a114:	e0bff615 	stw	r2,-40(fp)
   4a118:	e0bff417 	ldw	r2,-48(fp)
   4a11c:	10800217 	ldw	r2,8(r2)
   4a120:	e0bff715 	stw	r2,-36(fp)
   4a124:	e0bff717 	ldw	r2,-36(fp)
   4a128:	e0fff617 	ldw	r3,-40(fp)
   4a12c:	10c00315 	stw	r3,12(r2)
   4a130:	e0bff617 	ldw	r2,-40(fp)
   4a134:	e0fff717 	ldw	r3,-36(fp)
   4a138:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   4a13c:	e0fffa17 	ldw	r3,-24(fp)
   4a140:	e0bffb17 	ldw	r2,-20(fp)
   4a144:	1885883a 	add	r2,r3,r2
   4a148:	10800117 	ldw	r2,4(r2)
   4a14c:	1080004c 	andi	r2,r2,1
   4a150:	10002a1e 	bne	r2,zero,4a1fc <_free_r+0x2a8>
  {
    sz += nextsz;
   4a154:	e0fff517 	ldw	r3,-44(fp)
   4a158:	e0bffb17 	ldw	r2,-20(fp)
   4a15c:	1885883a 	add	r2,r3,r2
   4a160:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   4a164:	e0bff817 	ldw	r2,-32(fp)
   4a168:	1000181e 	bne	r2,zero,4a1cc <_free_r+0x278>
   4a16c:	e0bffa17 	ldw	r2,-24(fp)
   4a170:	10c00217 	ldw	r3,8(r2)
   4a174:	00800174 	movhi	r2,5
   4a178:	1096f404 	addi	r2,r2,23504
   4a17c:	1880131e 	bne	r3,r2,4a1cc <_free_r+0x278>
    {
      islr = 1;
   4a180:	00800044 	movi	r2,1
   4a184:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
   4a188:	00c00174 	movhi	r3,5
   4a18c:	18d6f404 	addi	r3,r3,23504
   4a190:	00800174 	movhi	r2,5
   4a194:	1096f404 	addi	r2,r2,23504
   4a198:	e13ff417 	ldw	r4,-48(fp)
   4a19c:	11000315 	stw	r4,12(r2)
   4a1a0:	10800317 	ldw	r2,12(r2)
   4a1a4:	18800215 	stw	r2,8(r3)
   4a1a8:	00800174 	movhi	r2,5
   4a1ac:	1096f404 	addi	r2,r2,23504
   4a1b0:	e0fff417 	ldw	r3,-48(fp)
   4a1b4:	18800315 	stw	r2,12(r3)
   4a1b8:	e0bff417 	ldw	r2,-48(fp)
   4a1bc:	10c00317 	ldw	r3,12(r2)
   4a1c0:	e0bff417 	ldw	r2,-48(fp)
   4a1c4:	10c00215 	stw	r3,8(r2)
   4a1c8:	00000c06 	br	4a1fc <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
   4a1cc:	e0bffa17 	ldw	r2,-24(fp)
   4a1d0:	10800317 	ldw	r2,12(r2)
   4a1d4:	e0bff615 	stw	r2,-40(fp)
   4a1d8:	e0bffa17 	ldw	r2,-24(fp)
   4a1dc:	10800217 	ldw	r2,8(r2)
   4a1e0:	e0bff715 	stw	r2,-36(fp)
   4a1e4:	e0bff717 	ldw	r2,-36(fp)
   4a1e8:	e0fff617 	ldw	r3,-40(fp)
   4a1ec:	10c00315 	stw	r3,12(r2)
   4a1f0:	e0bff617 	ldw	r2,-40(fp)
   4a1f4:	e0fff717 	ldw	r3,-36(fp)
   4a1f8:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
   4a1fc:	e0bff517 	ldw	r2,-44(fp)
   4a200:	10c00054 	ori	r3,r2,1
   4a204:	e0bff417 	ldw	r2,-48(fp)
   4a208:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
   4a20c:	e0fff417 	ldw	r3,-48(fp)
   4a210:	e0bff517 	ldw	r2,-44(fp)
   4a214:	1885883a 	add	r2,r3,r2
   4a218:	e0fff517 	ldw	r3,-44(fp)
   4a21c:	10c00015 	stw	r3,0(r2)
  if (!islr)
   4a220:	e0bff817 	ldw	r2,-32(fp)
   4a224:	10009a1e 	bne	r2,zero,4a490 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
   4a228:	e0bff517 	ldw	r2,-44(fp)
   4a22c:	10808028 	cmpgeui	r2,r2,512
   4a230:	10002c1e 	bne	r2,zero,4a2e4 <_free_r+0x390>
   4a234:	e0bff517 	ldw	r2,-44(fp)
   4a238:	1004d0fa 	srli	r2,r2,3
   4a23c:	e0bffd15 	stw	r2,-12(fp)
   4a240:	00c00174 	movhi	r3,5
   4a244:	18d6f204 	addi	r3,r3,23496
   4a248:	00800174 	movhi	r2,5
   4a24c:	1096f204 	addi	r2,r2,23496
   4a250:	11000117 	ldw	r4,4(r2)
   4a254:	e0bffd17 	ldw	r2,-12(fp)
   4a258:	1000010e 	bge	r2,zero,4a260 <_free_r+0x30c>
   4a25c:	108000c4 	addi	r2,r2,3
   4a260:	1005d0ba 	srai	r2,r2,2
   4a264:	100b883a 	mov	r5,r2
   4a268:	00800044 	movi	r2,1
   4a26c:	1144983a 	sll	r2,r2,r5
   4a270:	2084b03a 	or	r2,r4,r2
   4a274:	18800115 	stw	r2,4(r3)
   4a278:	e0bffd17 	ldw	r2,-12(fp)
   4a27c:	10800044 	addi	r2,r2,1
   4a280:	1085883a 	add	r2,r2,r2
   4a284:	1085883a 	add	r2,r2,r2
   4a288:	1087883a 	add	r3,r2,r2
   4a28c:	00800174 	movhi	r2,5
   4a290:	1096f204 	addi	r2,r2,23496
   4a294:	1885883a 	add	r2,r3,r2
   4a298:	10bffe04 	addi	r2,r2,-8
   4a29c:	e0bff615 	stw	r2,-40(fp)
   4a2a0:	e0bff617 	ldw	r2,-40(fp)
   4a2a4:	10800217 	ldw	r2,8(r2)
   4a2a8:	e0bff715 	stw	r2,-36(fp)
   4a2ac:	e0bff417 	ldw	r2,-48(fp)
   4a2b0:	e0fff617 	ldw	r3,-40(fp)
   4a2b4:	10c00315 	stw	r3,12(r2)
   4a2b8:	e0bff417 	ldw	r2,-48(fp)
   4a2bc:	e0fff717 	ldw	r3,-36(fp)
   4a2c0:	10c00215 	stw	r3,8(r2)
   4a2c4:	e0bff617 	ldw	r2,-40(fp)
   4a2c8:	e0fff417 	ldw	r3,-48(fp)
   4a2cc:	10c00215 	stw	r3,8(r2)
   4a2d0:	e0bff617 	ldw	r2,-40(fp)
   4a2d4:	10c00217 	ldw	r3,8(r2)
   4a2d8:	e0bff717 	ldw	r2,-36(fp)
   4a2dc:	10c00315 	stw	r3,12(r2)
   4a2e0:	00006b06 	br	4a490 <_free_r+0x53c>
   4a2e4:	e0bff517 	ldw	r2,-44(fp)
   4a2e8:	1004d27a 	srli	r2,r2,9
   4a2ec:	1000031e 	bne	r2,zero,4a2fc <_free_r+0x3a8>
   4a2f0:	e0bff517 	ldw	r2,-44(fp)
   4a2f4:	1004d0fa 	srli	r2,r2,3
   4a2f8:	00002906 	br	4a3a0 <_free_r+0x44c>
   4a2fc:	e0bff517 	ldw	r2,-44(fp)
   4a300:	1004d27a 	srli	r2,r2,9
   4a304:	10800168 	cmpgeui	r2,r2,5
   4a308:	1000041e 	bne	r2,zero,4a31c <_free_r+0x3c8>
   4a30c:	e0bff517 	ldw	r2,-44(fp)
   4a310:	1004d1ba 	srli	r2,r2,6
   4a314:	10800e04 	addi	r2,r2,56
   4a318:	00002106 	br	4a3a0 <_free_r+0x44c>
   4a31c:	e0bff517 	ldw	r2,-44(fp)
   4a320:	1004d27a 	srli	r2,r2,9
   4a324:	10800568 	cmpgeui	r2,r2,21
   4a328:	1000041e 	bne	r2,zero,4a33c <_free_r+0x3e8>
   4a32c:	e0bff517 	ldw	r2,-44(fp)
   4a330:	1004d27a 	srli	r2,r2,9
   4a334:	108016c4 	addi	r2,r2,91
   4a338:	00001906 	br	4a3a0 <_free_r+0x44c>
   4a33c:	e0bff517 	ldw	r2,-44(fp)
   4a340:	1004d27a 	srli	r2,r2,9
   4a344:	10801568 	cmpgeui	r2,r2,85
   4a348:	1000041e 	bne	r2,zero,4a35c <_free_r+0x408>
   4a34c:	e0bff517 	ldw	r2,-44(fp)
   4a350:	1004d33a 	srli	r2,r2,12
   4a354:	10801b84 	addi	r2,r2,110
   4a358:	00001106 	br	4a3a0 <_free_r+0x44c>
   4a35c:	e0bff517 	ldw	r2,-44(fp)
   4a360:	1004d27a 	srli	r2,r2,9
   4a364:	10805568 	cmpgeui	r2,r2,341
   4a368:	1000041e 	bne	r2,zero,4a37c <_free_r+0x428>
   4a36c:	e0bff517 	ldw	r2,-44(fp)
   4a370:	1004d3fa 	srli	r2,r2,15
   4a374:	10801dc4 	addi	r2,r2,119
   4a378:	00000906 	br	4a3a0 <_free_r+0x44c>
   4a37c:	e0bff517 	ldw	r2,-44(fp)
   4a380:	1004d27a 	srli	r2,r2,9
   4a384:	10815568 	cmpgeui	r2,r2,1365
   4a388:	1000041e 	bne	r2,zero,4a39c <_free_r+0x448>
   4a38c:	e0bff517 	ldw	r2,-44(fp)
   4a390:	1004d4ba 	srli	r2,r2,18
   4a394:	10801f04 	addi	r2,r2,124
   4a398:	00000106 	br	4a3a0 <_free_r+0x44c>
   4a39c:	00801f84 	movi	r2,126
   4a3a0:	e0bffd15 	stw	r2,-12(fp)
   4a3a4:	e0bffd17 	ldw	r2,-12(fp)
   4a3a8:	10800044 	addi	r2,r2,1
   4a3ac:	1085883a 	add	r2,r2,r2
   4a3b0:	1085883a 	add	r2,r2,r2
   4a3b4:	1087883a 	add	r3,r2,r2
   4a3b8:	00800174 	movhi	r2,5
   4a3bc:	1096f204 	addi	r2,r2,23496
   4a3c0:	1885883a 	add	r2,r3,r2
   4a3c4:	10bffe04 	addi	r2,r2,-8
   4a3c8:	e0bff615 	stw	r2,-40(fp)
   4a3cc:	e0bff617 	ldw	r2,-40(fp)
   4a3d0:	10800217 	ldw	r2,8(r2)
   4a3d4:	e0bff715 	stw	r2,-36(fp)
   4a3d8:	e0fff717 	ldw	r3,-36(fp)
   4a3dc:	e0bff617 	ldw	r2,-40(fp)
   4a3e0:	1880121e 	bne	r3,r2,4a42c <_free_r+0x4d8>
   4a3e4:	00c00174 	movhi	r3,5
   4a3e8:	18d6f204 	addi	r3,r3,23496
   4a3ec:	00800174 	movhi	r2,5
   4a3f0:	1096f204 	addi	r2,r2,23496
   4a3f4:	11000117 	ldw	r4,4(r2)
   4a3f8:	e0bffd17 	ldw	r2,-12(fp)
   4a3fc:	1000010e 	bge	r2,zero,4a404 <_free_r+0x4b0>
   4a400:	108000c4 	addi	r2,r2,3
   4a404:	1005d0ba 	srai	r2,r2,2
   4a408:	100b883a 	mov	r5,r2
   4a40c:	00800044 	movi	r2,1
   4a410:	1144983a 	sll	r2,r2,r5
   4a414:	2084b03a 	or	r2,r4,r2
   4a418:	18800115 	stw	r2,4(r3)
   4a41c:	00000f06 	br	4a45c <_free_r+0x508>
   4a420:	e0bff717 	ldw	r2,-36(fp)
   4a424:	10800217 	ldw	r2,8(r2)
   4a428:	e0bff715 	stw	r2,-36(fp)
   4a42c:	e0fff717 	ldw	r3,-36(fp)
   4a430:	e0bff617 	ldw	r2,-40(fp)
   4a434:	18800626 	beq	r3,r2,4a450 <_free_r+0x4fc>
   4a438:	e0bff717 	ldw	r2,-36(fp)
   4a43c:	10c00117 	ldw	r3,4(r2)
   4a440:	00bfff04 	movi	r2,-4
   4a444:	1884703a 	and	r2,r3,r2
   4a448:	e0fff517 	ldw	r3,-44(fp)
   4a44c:	18bff436 	bltu	r3,r2,4a420 <_gp+0xfffeb248>
   4a450:	e0bff717 	ldw	r2,-36(fp)
   4a454:	10800317 	ldw	r2,12(r2)
   4a458:	e0bff615 	stw	r2,-40(fp)
   4a45c:	e0bff417 	ldw	r2,-48(fp)
   4a460:	e0fff617 	ldw	r3,-40(fp)
   4a464:	10c00315 	stw	r3,12(r2)
   4a468:	e0bff417 	ldw	r2,-48(fp)
   4a46c:	e0fff717 	ldw	r3,-36(fp)
   4a470:	10c00215 	stw	r3,8(r2)
   4a474:	e0bff617 	ldw	r2,-40(fp)
   4a478:	e0fff417 	ldw	r3,-48(fp)
   4a47c:	10c00215 	stw	r3,8(r2)
   4a480:	e0bff617 	ldw	r2,-40(fp)
   4a484:	10c00217 	ldw	r3,8(r2)
   4a488:	e0bff717 	ldw	r2,-36(fp)
   4a48c:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
   4a490:	e13ffe17 	ldw	r4,-8(fp)
   4a494:	0052a440 	call	52a44 <__malloc_unlock>
   4a498:	00000106 	br	4a4a0 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
   4a49c:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
   4a4a0:	e037883a 	mov	sp,fp
   4a4a4:	dfc00117 	ldw	ra,4(sp)
   4a4a8:	df000017 	ldw	fp,0(sp)
   4a4ac:	dec00204 	addi	sp,sp,8
   4a4b0:	f800283a 	ret

0004a4b4 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   4a4b4:	defff704 	addi	sp,sp,-36
   4a4b8:	dfc00815 	stw	ra,32(sp)
   4a4bc:	df000715 	stw	fp,28(sp)
   4a4c0:	df000704 	addi	fp,sp,28
   4a4c4:	e13ffe15 	stw	r4,-8(fp)
   4a4c8:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
   4a4cc:	00840004 	movi	r2,4096
   4a4d0:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
   4a4d4:	e13ffe17 	ldw	r4,-8(fp)
   4a4d8:	0052a200 	call	52a20 <__malloc_lock>

  top_size = chunksize(top);
   4a4dc:	00800174 	movhi	r2,5
   4a4e0:	1096f204 	addi	r2,r2,23496
   4a4e4:	10800217 	ldw	r2,8(r2)
   4a4e8:	10800117 	ldw	r2,4(r2)
   4a4ec:	1007883a 	mov	r3,r2
   4a4f0:	00bfff04 	movi	r2,-4
   4a4f4:	1884703a 	and	r2,r3,r2
   4a4f8:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   4a4fc:	e0fffa17 	ldw	r3,-24(fp)
   4a500:	e0bfff17 	ldw	r2,-4(fp)
   4a504:	1887c83a 	sub	r3,r3,r2
   4a508:	e0bff917 	ldw	r2,-28(fp)
   4a50c:	1885883a 	add	r2,r3,r2
   4a510:	10bffbc4 	addi	r2,r2,-17
   4a514:	e17ff917 	ldw	r5,-28(fp)
   4a518:	1009883a 	mov	r4,r2
   4a51c:	00421100 	call	42110 <__udivsi3>
   4a520:	10bfffc4 	addi	r2,r2,-1
   4a524:	e17ff917 	ldw	r5,-28(fp)
   4a528:	1009883a 	mov	r4,r2
   4a52c:	00421cc0 	call	421cc <__mulsi3>
   4a530:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
   4a534:	e0bff917 	ldw	r2,-28(fp)
   4a538:	e0fffb17 	ldw	r3,-20(fp)
   4a53c:	1880040e 	bge	r3,r2,4a550 <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
   4a540:	e13ffe17 	ldw	r4,-8(fp)
   4a544:	0052a440 	call	52a44 <__malloc_unlock>
    return 0;
   4a548:	0005883a 	mov	r2,zero
   4a54c:	00004806 	br	4a670 <_malloc_trim_r+0x1bc>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
   4a550:	000b883a 	mov	r5,zero
   4a554:	e13ffe17 	ldw	r4,-8(fp)
   4a558:	004efd40 	call	4efd4 <_sbrk_r>
   4a55c:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
   4a560:	00800174 	movhi	r2,5
   4a564:	1096f204 	addi	r2,r2,23496
   4a568:	10c00217 	ldw	r3,8(r2)
   4a56c:	e0bffa17 	ldw	r2,-24(fp)
   4a570:	1887883a 	add	r3,r3,r2
   4a574:	e0bffc17 	ldw	r2,-16(fp)
   4a578:	18800426 	beq	r3,r2,4a58c <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
   4a57c:	e13ffe17 	ldw	r4,-8(fp)
   4a580:	0052a440 	call	52a44 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
   4a584:	0005883a 	mov	r2,zero
   4a588:	00003906 	br	4a670 <_malloc_trim_r+0x1bc>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
   4a58c:	e0bffb17 	ldw	r2,-20(fp)
   4a590:	0085c83a 	sub	r2,zero,r2
   4a594:	100b883a 	mov	r5,r2
   4a598:	e13ffe17 	ldw	r4,-8(fp)
   4a59c:	004efd40 	call	4efd4 <_sbrk_r>
   4a5a0:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
   4a5a4:	e0bffd17 	ldw	r2,-12(fp)
   4a5a8:	10bfffd8 	cmpnei	r2,r2,-1
   4a5ac:	10001d1e 	bne	r2,zero,4a624 <_malloc_trim_r+0x170>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
   4a5b0:	000b883a 	mov	r5,zero
   4a5b4:	e13ffe17 	ldw	r4,-8(fp)
   4a5b8:	004efd40 	call	4efd4 <_sbrk_r>
   4a5bc:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
   4a5c0:	e0fffc17 	ldw	r3,-16(fp)
   4a5c4:	00800174 	movhi	r2,5
   4a5c8:	1096f204 	addi	r2,r2,23496
   4a5cc:	10800217 	ldw	r2,8(r2)
   4a5d0:	1885c83a 	sub	r2,r3,r2
   4a5d4:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   4a5d8:	e0bffa17 	ldw	r2,-24(fp)
   4a5dc:	10800410 	cmplti	r2,r2,16
   4a5e0:	10000c1e 	bne	r2,zero,4a614 <_malloc_trim_r+0x160>
        {
          sbrked_mem = current_brk - sbrk_base;
   4a5e4:	e0bffc17 	ldw	r2,-16(fp)
   4a5e8:	d0e00917 	ldw	r3,-32732(gp)
   4a5ec:	10c7c83a 	sub	r3,r2,r3
   4a5f0:	008001b4 	movhi	r2,6
   4a5f4:	10a4d404 	addi	r2,r2,-27824
   4a5f8:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
   4a5fc:	00800174 	movhi	r2,5
   4a600:	1096f204 	addi	r2,r2,23496
   4a604:	10800217 	ldw	r2,8(r2)
   4a608:	e0fffa17 	ldw	r3,-24(fp)
   4a60c:	18c00054 	ori	r3,r3,1
   4a610:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
   4a614:	e13ffe17 	ldw	r4,-8(fp)
   4a618:	0052a440 	call	52a44 <__malloc_unlock>
        return 0; 
   4a61c:	0005883a 	mov	r2,zero
   4a620:	00001306 	br	4a670 <_malloc_trim_r+0x1bc>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   4a624:	00800174 	movhi	r2,5
   4a628:	1096f204 	addi	r2,r2,23496
   4a62c:	10800217 	ldw	r2,8(r2)
   4a630:	e13ffa17 	ldw	r4,-24(fp)
   4a634:	e0fffb17 	ldw	r3,-20(fp)
   4a638:	20c7c83a 	sub	r3,r4,r3
   4a63c:	18c00054 	ori	r3,r3,1
   4a640:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
   4a644:	008001b4 	movhi	r2,6
   4a648:	10a4d404 	addi	r2,r2,-27824
   4a64c:	10c00017 	ldw	r3,0(r2)
   4a650:	e0bffb17 	ldw	r2,-20(fp)
   4a654:	1887c83a 	sub	r3,r3,r2
   4a658:	008001b4 	movhi	r2,6
   4a65c:	10a4d404 	addi	r2,r2,-27824
   4a660:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
   4a664:	e13ffe17 	ldw	r4,-8(fp)
   4a668:	0052a440 	call	52a44 <__malloc_unlock>
        return 1;
   4a66c:	00800044 	movi	r2,1
      }
    }
  }
}
   4a670:	e037883a 	mov	sp,fp
   4a674:	dfc00117 	ldw	ra,4(sp)
   4a678:	df000017 	ldw	fp,0(sp)
   4a67c:	dec00204 	addi	sp,sp,8
   4a680:	f800283a 	ret

0004a684 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   4a684:	defff004 	addi	sp,sp,-64
   4a688:	dfc00f15 	stw	ra,60(sp)
   4a68c:	df000e15 	stw	fp,56(sp)
   4a690:	dd800d15 	stw	r22,52(sp)
   4a694:	dd400c15 	stw	r21,48(sp)
   4a698:	dd000b15 	stw	r20,44(sp)
   4a69c:	dcc00a15 	stw	r19,40(sp)
   4a6a0:	dc800915 	stw	r18,36(sp)
   4a6a4:	dc400815 	stw	r17,32(sp)
   4a6a8:	dc000715 	stw	r16,28(sp)
   4a6ac:	df000e04 	addi	fp,sp,56
   4a6b0:	e13ff815 	stw	r4,-32(fp)
   4a6b4:	2821883a 	mov	r16,r5
   4a6b8:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
   4a6bc:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
   4a6c0:	ac400217 	ldw	r17,8(r21)
   4a6c4:	8800021e 	bne	r17,zero,4a6d0 <__sfvwrite_r+0x4c>
    return 0;
   4a6c8:	0005883a 	mov	r2,zero
   4a6cc:	00015b06 	br	4ac3c <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   4a6d0:	8080030b 	ldhu	r2,12(r16)
   4a6d4:	10bfffcc 	andi	r2,r2,65535
   4a6d8:	1080020c 	andi	r2,r2,8
   4a6dc:	10000226 	beq	r2,zero,4a6e8 <__sfvwrite_r+0x64>
   4a6e0:	80800417 	ldw	r2,16(r16)
   4a6e4:	1000061e 	bne	r2,zero,4a700 <__sfvwrite_r+0x7c>
   4a6e8:	800b883a 	mov	r5,r16
   4a6ec:	e13ff817 	ldw	r4,-32(fp)
   4a6f0:	00474bc0 	call	474bc <__swsetup_r>
   4a6f4:	10000226 	beq	r2,zero,4a700 <__sfvwrite_r+0x7c>
    return EOF;
   4a6f8:	00bfffc4 	movi	r2,-1
   4a6fc:	00014f06 	br	4ac3c <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
   4a700:	ad000017 	ldw	r20,0(r21)
  len = 0;
   4a704:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   4a708:	8080030b 	ldhu	r2,12(r16)
   4a70c:	10bfffcc 	andi	r2,r2,65535
   4a710:	1080008c 	andi	r2,r2,2
   4a714:	10001f26 	beq	r2,zero,4a794 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   4a718:	00000306 	br	4a728 <__sfvwrite_r+0xa4>
   4a71c:	a4c00017 	ldw	r19,0(r20)
   4a720:	a4400117 	ldw	r17,4(r20)
   4a724:	a5000204 	addi	r20,r20,8
   4a728:	883ffc26 	beq	r17,zero,4a71c <_gp+0xfffeb544>
	  w = fp->_write (ptr, fp->_cookie, p,
   4a72c:	82000917 	ldw	r8,36(r16)
   4a730:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
   4a734:	8805883a 	mov	r2,r17
   4a738:	00e00034 	movhi	r3,32768
   4a73c:	18ff0004 	addi	r3,r3,-1024
   4a740:	1880022e 	bgeu	r3,r2,4a74c <__sfvwrite_r+0xc8>
   4a744:	00a00034 	movhi	r2,32768
   4a748:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
   4a74c:	100f883a 	mov	r7,r2
   4a750:	980d883a 	mov	r6,r19
   4a754:	200b883a 	mov	r5,r4
   4a758:	e13ff817 	ldw	r4,-32(fp)
   4a75c:	403ee83a 	callr	r8
   4a760:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
   4a764:	04812c0e 	bge	zero,r18,4ac18 <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
   4a768:	9005883a 	mov	r2,r18
   4a76c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4a770:	9005883a 	mov	r2,r18
   4a774:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4a778:	a8800217 	ldw	r2,8(r21)
   4a77c:	9007883a 	mov	r3,r18
   4a780:	10c5c83a 	sub	r2,r2,r3
   4a784:	a8800215 	stw	r2,8(r21)
   4a788:	a8800217 	ldw	r2,8(r21)
   4a78c:	103fe61e 	bne	r2,zero,4a728 <_gp+0xfffeb550>
   4a790:	00011f06 	br	4ac10 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
   4a794:	8080030b 	ldhu	r2,12(r16)
   4a798:	10bfffcc 	andi	r2,r2,65535
   4a79c:	1080004c 	andi	r2,r2,1
   4a7a0:	1000b81e 	bne	r2,zero,4aa84 <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   4a7a4:	00000306 	br	4a7b4 <__sfvwrite_r+0x130>
   4a7a8:	a4c00017 	ldw	r19,0(r20)
   4a7ac:	a4400117 	ldw	r17,4(r20)
   4a7b0:	a5000204 	addi	r20,r20,8
   4a7b4:	883ffc26 	beq	r17,zero,4a7a8 <_gp+0xfffeb5d0>
	  w = fp->_w;
   4a7b8:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
   4a7bc:	8080030b 	ldhu	r2,12(r16)
   4a7c0:	10bfffcc 	andi	r2,r2,65535
   4a7c4:	1080800c 	andi	r2,r2,512
   4a7c8:	10006b26 	beq	r2,zero,4a978 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
   4a7cc:	9005883a 	mov	r2,r18
   4a7d0:	88805736 	bltu	r17,r2,4a930 <__sfvwrite_r+0x2ac>
   4a7d4:	8080030b 	ldhu	r2,12(r16)
   4a7d8:	10bfffcc 	andi	r2,r2,65535
   4a7dc:	1081200c 	andi	r2,r2,1152
   4a7e0:	10005326 	beq	r2,zero,4a930 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   4a7e4:	80800017 	ldw	r2,0(r16)
   4a7e8:	1007883a 	mov	r3,r2
   4a7ec:	80800417 	ldw	r2,16(r16)
   4a7f0:	1885c83a 	sub	r2,r3,r2
   4a7f4:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   4a7f8:	80c00517 	ldw	r3,20(r16)
   4a7fc:	1805883a 	mov	r2,r3
   4a800:	1085883a 	add	r2,r2,r2
   4a804:	10c5883a 	add	r2,r2,r3
   4a808:	1006d7fa 	srli	r3,r2,31
   4a80c:	1885883a 	add	r2,r3,r2
   4a810:	1005d07a 	srai	r2,r2,1
   4a814:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
   4a818:	e0bff617 	ldw	r2,-40(fp)
   4a81c:	1445883a 	add	r2,r2,r17
   4a820:	10800044 	addi	r2,r2,1
   4a824:	e0fff517 	ldw	r3,-44(fp)
   4a828:	1880042e 	bgeu	r3,r2,4a83c <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
   4a82c:	e0bff617 	ldw	r2,-40(fp)
   4a830:	1445883a 	add	r2,r2,r17
   4a834:	10800044 	addi	r2,r2,1
   4a838:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
   4a83c:	8080030b 	ldhu	r2,12(r16)
   4a840:	10bfffcc 	andi	r2,r2,65535
   4a844:	1081000c 	andi	r2,r2,1024
   4a848:	10001726 	beq	r2,zero,4a8a8 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
   4a84c:	e0bff517 	ldw	r2,-44(fp)
   4a850:	100b883a 	mov	r5,r2
   4a854:	e13ff817 	ldw	r4,-32(fp)
   4a858:	004b5a40 	call	4b5a4 <_malloc_r>
   4a85c:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
   4a860:	e0bff417 	ldw	r2,-48(fp)
   4a864:	1000041e 	bne	r2,zero,4a878 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
   4a868:	e0bff817 	ldw	r2,-32(fp)
   4a86c:	00c00304 	movi	r3,12
   4a870:	10c00015 	stw	r3,0(r2)
			  goto err;
   4a874:	0000ed06 	br	4ac2c <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
   4a878:	80800417 	ldw	r2,16(r16)
   4a87c:	e0fff617 	ldw	r3,-40(fp)
   4a880:	180d883a 	mov	r6,r3
   4a884:	100b883a 	mov	r5,r2
   4a888:	e13ff417 	ldw	r4,-48(fp)
   4a88c:	004c2dc0 	call	4c2dc <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   4a890:	80c0030b 	ldhu	r3,12(r16)
   4a894:	00bedfc4 	movi	r2,-1153
   4a898:	1884703a 	and	r2,r3,r2
   4a89c:	10802014 	ori	r2,r2,128
   4a8a0:	8080030d 	sth	r2,12(r16)
   4a8a4:	00001506 	br	4a8fc <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   4a8a8:	80800417 	ldw	r2,16(r16)
   4a8ac:	e0fff517 	ldw	r3,-44(fp)
   4a8b0:	180d883a 	mov	r6,r3
   4a8b4:	100b883a 	mov	r5,r2
   4a8b8:	e13ff817 	ldw	r4,-32(fp)
   4a8bc:	004e2e00 	call	4e2e0 <_realloc_r>
   4a8c0:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
   4a8c4:	e0bff417 	ldw	r2,-48(fp)
   4a8c8:	10000c1e 	bne	r2,zero,4a8fc <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
   4a8cc:	80800417 	ldw	r2,16(r16)
   4a8d0:	100b883a 	mov	r5,r2
   4a8d4:	e13ff817 	ldw	r4,-32(fp)
   4a8d8:	0049f540 	call	49f54 <_free_r>
			  fp->_flags &=  ~__SMBF;
   4a8dc:	80c0030b 	ldhu	r3,12(r16)
   4a8e0:	00bfdfc4 	movi	r2,-129
   4a8e4:	1884703a 	and	r2,r3,r2
   4a8e8:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
   4a8ec:	e0bff817 	ldw	r2,-32(fp)
   4a8f0:	00c00304 	movi	r3,12
   4a8f4:	10c00015 	stw	r3,0(r2)
			  goto err;
   4a8f8:	0000cc06 	br	4ac2c <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
   4a8fc:	e0bff417 	ldw	r2,-48(fp)
   4a900:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
   4a904:	e0bff617 	ldw	r2,-40(fp)
   4a908:	e0fff417 	ldw	r3,-48(fp)
   4a90c:	1885883a 	add	r2,r3,r2
   4a910:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
   4a914:	e0bff517 	ldw	r2,-44(fp)
   4a918:	80800515 	stw	r2,20(r16)
		  w = len;
   4a91c:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
   4a920:	e0fff517 	ldw	r3,-44(fp)
   4a924:	e0bff617 	ldw	r2,-40(fp)
   4a928:	1885c83a 	sub	r2,r3,r2
   4a92c:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
   4a930:	9005883a 	mov	r2,r18
   4a934:	8880012e 	bgeu	r17,r2,4a93c <__sfvwrite_r+0x2b8>
		w = len;
   4a938:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
   4a93c:	80800017 	ldw	r2,0(r16)
   4a940:	9007883a 	mov	r3,r18
   4a944:	180d883a 	mov	r6,r3
   4a948:	980b883a 	mov	r5,r19
   4a94c:	1009883a 	mov	r4,r2
   4a950:	004c4640 	call	4c464 <memmove>
	      fp->_w -= w;
   4a954:	80800217 	ldw	r2,8(r16)
   4a958:	1485c83a 	sub	r2,r2,r18
   4a95c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4a960:	80800017 	ldw	r2,0(r16)
   4a964:	9007883a 	mov	r3,r18
   4a968:	10c5883a 	add	r2,r2,r3
   4a96c:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
   4a970:	8825883a 	mov	r18,r17
   4a974:	00003806 	br	4aa58 <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
   4a978:	80800017 	ldw	r2,0(r16)
   4a97c:	80c00417 	ldw	r3,16(r16)
   4a980:	18800236 	bltu	r3,r2,4a98c <__sfvwrite_r+0x308>
   4a984:	80800517 	ldw	r2,20(r16)
   4a988:	8880182e 	bgeu	r17,r2,4a9ec <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
   4a98c:	9005883a 	mov	r2,r18
   4a990:	8880012e 	bgeu	r17,r2,4a998 <__sfvwrite_r+0x314>
   4a994:	8805883a 	mov	r2,r17
   4a998:	1025883a 	mov	r18,r2
	      COPY (w);
   4a99c:	80800017 	ldw	r2,0(r16)
   4a9a0:	9007883a 	mov	r3,r18
   4a9a4:	180d883a 	mov	r6,r3
   4a9a8:	980b883a 	mov	r5,r19
   4a9ac:	1009883a 	mov	r4,r2
   4a9b0:	004c4640 	call	4c464 <memmove>
	      fp->_w -= w;
   4a9b4:	80800217 	ldw	r2,8(r16)
   4a9b8:	1485c83a 	sub	r2,r2,r18
   4a9bc:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4a9c0:	80800017 	ldw	r2,0(r16)
   4a9c4:	9007883a 	mov	r3,r18
   4a9c8:	10c5883a 	add	r2,r2,r3
   4a9cc:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   4a9d0:	80800217 	ldw	r2,8(r16)
   4a9d4:	10001f1e 	bne	r2,zero,4aa54 <__sfvwrite_r+0x3d0>
   4a9d8:	800b883a 	mov	r5,r16
   4a9dc:	e13ff817 	ldw	r4,-32(fp)
   4a9e0:	004989c0 	call	4989c <_fflush_r>
   4a9e4:	10001b26 	beq	r2,zero,4aa54 <__sfvwrite_r+0x3d0>
		goto err;
   4a9e8:	00009006 	br	4ac2c <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   4a9ec:	8805883a 	mov	r2,r17
   4a9f0:	00e00034 	movhi	r3,32768
   4a9f4:	10c00236 	bltu	r2,r3,4aa00 <__sfvwrite_r+0x37c>
   4a9f8:	00a00034 	movhi	r2,32768
   4a9fc:	10bfffc4 	addi	r2,r2,-1
   4aa00:	1007883a 	mov	r3,r2
   4aa04:	80800517 	ldw	r2,20(r16)
   4aa08:	100b883a 	mov	r5,r2
   4aa0c:	1809883a 	mov	r4,r3
   4aa10:	00420180 	call	42018 <__divsi3>
   4aa14:	1007883a 	mov	r3,r2
   4aa18:	80800517 	ldw	r2,20(r16)
   4aa1c:	100b883a 	mov	r5,r2
   4aa20:	1809883a 	mov	r4,r3
   4aa24:	00421cc0 	call	421cc <__mulsi3>
   4aa28:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
   4aa2c:	80800917 	ldw	r2,36(r16)
   4aa30:	80c00717 	ldw	r3,28(r16)
   4aa34:	900f883a 	mov	r7,r18
   4aa38:	980d883a 	mov	r6,r19
   4aa3c:	180b883a 	mov	r5,r3
   4aa40:	e13ff817 	ldw	r4,-32(fp)
   4aa44:	103ee83a 	callr	r2
   4aa48:	1025883a 	mov	r18,r2
	      if (w <= 0)
   4aa4c:	0480740e 	bge	zero,r18,4ac20 <__sfvwrite_r+0x59c>
   4aa50:	00000106 	br	4aa58 <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   4aa54:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
   4aa58:	9005883a 	mov	r2,r18
   4aa5c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4aa60:	9005883a 	mov	r2,r18
   4aa64:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4aa68:	a8800217 	ldw	r2,8(r21)
   4aa6c:	9007883a 	mov	r3,r18
   4aa70:	10c5c83a 	sub	r2,r2,r3
   4aa74:	a8800215 	stw	r2,8(r21)
   4aa78:	a8800217 	ldw	r2,8(r21)
   4aa7c:	103f4d1e 	bne	r2,zero,4a7b4 <_gp+0xfffeb5dc>
   4aa80:	00006306 	br	4ac10 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
   4aa84:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
   4aa88:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
   4aa8c:	00000406 	br	4aaa0 <__sfvwrite_r+0x41c>
   4aa90:	e03ff215 	stw	zero,-56(fp)
   4aa94:	a4c00017 	ldw	r19,0(r20)
   4aa98:	a4400117 	ldw	r17,4(r20)
   4aa9c:	a5000204 	addi	r20,r20,8
   4aaa0:	883ffb26 	beq	r17,zero,4aa90 <_gp+0xfffeb8b8>
	  if (!nlknown)
   4aaa4:	e0bff217 	ldw	r2,-56(fp)
   4aaa8:	1000111e 	bne	r2,zero,4aaf0 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
   4aaac:	880d883a 	mov	r6,r17
   4aab0:	01400284 	movi	r5,10
   4aab4:	9809883a 	mov	r4,r19
   4aab8:	004c1200 	call	4c120 <memchr>
   4aabc:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
   4aac0:	e0bff717 	ldw	r2,-36(fp)
   4aac4:	10000626 	beq	r2,zero,4aae0 <__sfvwrite_r+0x45c>
   4aac8:	e0bff717 	ldw	r2,-36(fp)
   4aacc:	10800044 	addi	r2,r2,1
   4aad0:	1007883a 	mov	r3,r2
   4aad4:	9805883a 	mov	r2,r19
   4aad8:	1885c83a 	sub	r2,r3,r2
   4aadc:	00000106 	br	4aae4 <__sfvwrite_r+0x460>
   4aae0:	88800044 	addi	r2,r17,1
   4aae4:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
   4aae8:	00800044 	movi	r2,1
   4aaec:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
   4aaf0:	e0bff317 	ldw	r2,-52(fp)
   4aaf4:	8880012e 	bgeu	r17,r2,4aafc <__sfvwrite_r+0x478>
   4aaf8:	8805883a 	mov	r2,r17
   4aafc:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
   4ab00:	80c00217 	ldw	r3,8(r16)
   4ab04:	80800517 	ldw	r2,20(r16)
   4ab08:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
   4ab0c:	80800017 	ldw	r2,0(r16)
   4ab10:	80c00417 	ldw	r3,16(r16)
   4ab14:	1880102e 	bgeu	r3,r2,4ab58 <__sfvwrite_r+0x4d4>
   4ab18:	95800f0e 	bge	r18,r22,4ab58 <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
   4ab1c:	80800017 	ldw	r2,0(r16)
   4ab20:	9007883a 	mov	r3,r18
   4ab24:	180d883a 	mov	r6,r3
   4ab28:	980b883a 	mov	r5,r19
   4ab2c:	1009883a 	mov	r4,r2
   4ab30:	004c4640 	call	4c464 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
   4ab34:	80800017 	ldw	r2,0(r16)
   4ab38:	9007883a 	mov	r3,r18
   4ab3c:	10c5883a 	add	r2,r2,r3
   4ab40:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
   4ab44:	800b883a 	mov	r5,r16
   4ab48:	e13ff817 	ldw	r4,-32(fp)
   4ab4c:	004989c0 	call	4989c <_fflush_r>
   4ab50:	10001b26 	beq	r2,zero,4abc0 <__sfvwrite_r+0x53c>
		goto err;
   4ab54:	00003506 	br	4ac2c <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
   4ab58:	84800517 	ldw	r18,20(r16)
   4ab5c:	b4800a16 	blt	r22,r18,4ab88 <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
   4ab60:	80800917 	ldw	r2,36(r16)
   4ab64:	80c00717 	ldw	r3,28(r16)
   4ab68:	900f883a 	mov	r7,r18
   4ab6c:	980d883a 	mov	r6,r19
   4ab70:	180b883a 	mov	r5,r3
   4ab74:	e13ff817 	ldw	r4,-32(fp)
   4ab78:	103ee83a 	callr	r2
   4ab7c:	1025883a 	mov	r18,r2
	      if (w <= 0)
   4ab80:	04800f16 	blt	zero,r18,4abc0 <__sfvwrite_r+0x53c>
		goto err;
   4ab84:	00002906 	br	4ac2c <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
   4ab88:	b025883a 	mov	r18,r22
	      COPY (w);
   4ab8c:	80800017 	ldw	r2,0(r16)
   4ab90:	9007883a 	mov	r3,r18
   4ab94:	180d883a 	mov	r6,r3
   4ab98:	980b883a 	mov	r5,r19
   4ab9c:	1009883a 	mov	r4,r2
   4aba0:	004c4640 	call	4c464 <memmove>
	      fp->_w -= w;
   4aba4:	80800217 	ldw	r2,8(r16)
   4aba8:	1485c83a 	sub	r2,r2,r18
   4abac:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   4abb0:	80800017 	ldw	r2,0(r16)
   4abb4:	9007883a 	mov	r3,r18
   4abb8:	10c5883a 	add	r2,r2,r3
   4abbc:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
   4abc0:	e0bff317 	ldw	r2,-52(fp)
   4abc4:	1485c83a 	sub	r2,r2,r18
   4abc8:	e0bff315 	stw	r2,-52(fp)
   4abcc:	e0bff317 	ldw	r2,-52(fp)
   4abd0:	1000051e 	bne	r2,zero,4abe8 <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
   4abd4:	800b883a 	mov	r5,r16
   4abd8:	e13ff817 	ldw	r4,-32(fp)
   4abdc:	004989c0 	call	4989c <_fflush_r>
   4abe0:	1000111e 	bne	r2,zero,4ac28 <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
   4abe4:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
   4abe8:	9005883a 	mov	r2,r18
   4abec:	98a7883a 	add	r19,r19,r2
	  len -= w;
   4abf0:	9005883a 	mov	r2,r18
   4abf4:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
   4abf8:	a8800217 	ldw	r2,8(r21)
   4abfc:	9007883a 	mov	r3,r18
   4ac00:	10c5c83a 	sub	r2,r2,r3
   4ac04:	a8800215 	stw	r2,8(r21)
   4ac08:	a8800217 	ldw	r2,8(r21)
   4ac0c:	103fa41e 	bne	r2,zero,4aaa0 <_gp+0xfffeb8c8>
    }
  return 0;
   4ac10:	0005883a 	mov	r2,zero
   4ac14:	00000906 	br	4ac3c <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
   4ac18:	0001883a 	nop
   4ac1c:	00000306 	br	4ac2c <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
   4ac20:	0001883a 	nop
   4ac24:	00000106 	br	4ac2c <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
   4ac28:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
   4ac2c:	8080030b 	ldhu	r2,12(r16)
   4ac30:	10801014 	ori	r2,r2,64
   4ac34:	8080030d 	sth	r2,12(r16)
  return EOF;
   4ac38:	00bfffc4 	movi	r2,-1
}
   4ac3c:	e6fff904 	addi	sp,fp,-28
   4ac40:	dfc00817 	ldw	ra,32(sp)
   4ac44:	df000717 	ldw	fp,28(sp)
   4ac48:	dd800617 	ldw	r22,24(sp)
   4ac4c:	dd400517 	ldw	r21,20(sp)
   4ac50:	dd000417 	ldw	r20,16(sp)
   4ac54:	dcc00317 	ldw	r19,12(sp)
   4ac58:	dc800217 	ldw	r18,8(sp)
   4ac5c:	dc400117 	ldw	r17,4(sp)
   4ac60:	dc000017 	ldw	r16,0(sp)
   4ac64:	dec00904 	addi	sp,sp,36
   4ac68:	f800283a 	ret

0004ac6c <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   4ac6c:	defff804 	addi	sp,sp,-32
   4ac70:	dfc00715 	stw	ra,28(sp)
   4ac74:	df000615 	stw	fp,24(sp)
   4ac78:	dd000515 	stw	r20,20(sp)
   4ac7c:	dcc00415 	stw	r19,16(sp)
   4ac80:	dc800315 	stw	r18,12(sp)
   4ac84:	dc400215 	stw	r17,8(sp)
   4ac88:	dc000115 	stw	r16,4(sp)
   4ac8c:	df000604 	addi	fp,sp,24
   4ac90:	e13ffa15 	stw	r4,-24(fp)
   4ac94:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   4ac98:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   4ac9c:	e0bffa17 	ldw	r2,-24(fp)
   4aca0:	1440b804 	addi	r17,r2,736
   4aca4:	00001b06 	br	4ad14 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   4aca8:	8c000217 	ldw	r16,8(r17)
   4acac:	8c800117 	ldw	r18,4(r17)
   4acb0:	00001506 	br	4ad08 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   4acb4:	8080030b 	ldhu	r2,12(r16)
   4acb8:	10bfffcc 	andi	r2,r2,65535
   4acbc:	10a0001c 	xori	r2,r2,32768
   4acc0:	10a00004 	addi	r2,r2,-32768
   4acc4:	10000f26 	beq	r2,zero,4ad04 <_fwalk+0x98>
   4acc8:	8080030b 	ldhu	r2,12(r16)
   4accc:	10bfffcc 	andi	r2,r2,65535
   4acd0:	10a0001c 	xori	r2,r2,32768
   4acd4:	10a00004 	addi	r2,r2,-32768
   4acd8:	10800060 	cmpeqi	r2,r2,1
   4acdc:	1000091e 	bne	r2,zero,4ad04 <_fwalk+0x98>
   4ace0:	8080038b 	ldhu	r2,14(r16)
   4ace4:	10bfffcc 	andi	r2,r2,65535
   4ace8:	10a0001c 	xori	r2,r2,32768
   4acec:	10a00004 	addi	r2,r2,-32768
   4acf0:	10bfffe0 	cmpeqi	r2,r2,-1
   4acf4:	1000031e 	bne	r2,zero,4ad04 <_fwalk+0x98>
	ret |= (*function) (fp);
   4acf8:	8009883a 	mov	r4,r16
   4acfc:	a03ee83a 	callr	r20
   4ad00:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   4ad04:	84001a04 	addi	r16,r16,104
   4ad08:	94bfffc4 	addi	r18,r18,-1
   4ad0c:	903fe90e 	bge	r18,zero,4acb4 <_gp+0xfffebadc>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   4ad10:	8c400017 	ldw	r17,0(r17)
   4ad14:	883fe41e 	bne	r17,zero,4aca8 <_gp+0xfffebad0>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
   4ad18:	9805883a 	mov	r2,r19
}
   4ad1c:	e6fffb04 	addi	sp,fp,-20
   4ad20:	dfc00617 	ldw	ra,24(sp)
   4ad24:	df000517 	ldw	fp,20(sp)
   4ad28:	dd000417 	ldw	r20,16(sp)
   4ad2c:	dcc00317 	ldw	r19,12(sp)
   4ad30:	dc800217 	ldw	r18,8(sp)
   4ad34:	dc400117 	ldw	r17,4(sp)
   4ad38:	dc000017 	ldw	r16,0(sp)
   4ad3c:	dec00704 	addi	sp,sp,28
   4ad40:	f800283a 	ret

0004ad44 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   4ad44:	defff804 	addi	sp,sp,-32
   4ad48:	dfc00715 	stw	ra,28(sp)
   4ad4c:	df000615 	stw	fp,24(sp)
   4ad50:	dd000515 	stw	r20,20(sp)
   4ad54:	dcc00415 	stw	r19,16(sp)
   4ad58:	dc800315 	stw	r18,12(sp)
   4ad5c:	dc400215 	stw	r17,8(sp)
   4ad60:	dc000115 	stw	r16,4(sp)
   4ad64:	df000604 	addi	fp,sp,24
   4ad68:	e13ffa15 	stw	r4,-24(fp)
   4ad6c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   4ad70:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   4ad74:	e0bffa17 	ldw	r2,-24(fp)
   4ad78:	1440b804 	addi	r17,r2,736
   4ad7c:	00001c06 	br	4adf0 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   4ad80:	8c000217 	ldw	r16,8(r17)
   4ad84:	8c800117 	ldw	r18,4(r17)
   4ad88:	00001606 	br	4ade4 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   4ad8c:	8080030b 	ldhu	r2,12(r16)
   4ad90:	10bfffcc 	andi	r2,r2,65535
   4ad94:	10a0001c 	xori	r2,r2,32768
   4ad98:	10a00004 	addi	r2,r2,-32768
   4ad9c:	10001026 	beq	r2,zero,4ade0 <_fwalk_reent+0x9c>
   4ada0:	8080030b 	ldhu	r2,12(r16)
   4ada4:	10bfffcc 	andi	r2,r2,65535
   4ada8:	10a0001c 	xori	r2,r2,32768
   4adac:	10a00004 	addi	r2,r2,-32768
   4adb0:	10800060 	cmpeqi	r2,r2,1
   4adb4:	10000a1e 	bne	r2,zero,4ade0 <_fwalk_reent+0x9c>
   4adb8:	8080038b 	ldhu	r2,14(r16)
   4adbc:	10bfffcc 	andi	r2,r2,65535
   4adc0:	10a0001c 	xori	r2,r2,32768
   4adc4:	10a00004 	addi	r2,r2,-32768
   4adc8:	10bfffe0 	cmpeqi	r2,r2,-1
   4adcc:	1000041e 	bne	r2,zero,4ade0 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
   4add0:	800b883a 	mov	r5,r16
   4add4:	e13ffa17 	ldw	r4,-24(fp)
   4add8:	a03ee83a 	callr	r20
   4addc:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   4ade0:	84001a04 	addi	r16,r16,104
   4ade4:	94bfffc4 	addi	r18,r18,-1
   4ade8:	903fe80e 	bge	r18,zero,4ad8c <_gp+0xfffebbb4>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   4adec:	8c400017 	ldw	r17,0(r17)
   4adf0:	883fe31e 	bne	r17,zero,4ad80 <_gp+0xfffebba8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
   4adf4:	9805883a 	mov	r2,r19
}
   4adf8:	e6fffb04 	addi	sp,fp,-20
   4adfc:	dfc00617 	ldw	ra,24(sp)
   4ae00:	df000517 	ldw	fp,20(sp)
   4ae04:	dd000417 	ldw	r20,16(sp)
   4ae08:	dcc00317 	ldw	r19,12(sp)
   4ae0c:	dc800217 	ldw	r18,8(sp)
   4ae10:	dc400117 	ldw	r17,4(sp)
   4ae14:	dc000017 	ldw	r16,0(sp)
   4ae18:	dec00704 	addi	sp,sp,28
   4ae1c:	f800283a 	ret

0004ae20 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
   4ae20:	defffb04 	addi	sp,sp,-20
   4ae24:	dfc00415 	stw	ra,16(sp)
   4ae28:	df000315 	stw	fp,12(sp)
   4ae2c:	df000304 	addi	fp,sp,12
   4ae30:	e13ffd15 	stw	r4,-12(fp)
   4ae34:	e17ffe15 	stw	r5,-8(fp)
   4ae38:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
   4ae3c:	e0bfff17 	ldw	r2,-4(fp)
   4ae40:	10001126 	beq	r2,zero,4ae88 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
   4ae44:	01400174 	movhi	r5,5
   4ae48:	2953e204 	addi	r5,r5,20360
   4ae4c:	e13fff17 	ldw	r4,-4(fp)
   4ae50:	004f2a80 	call	4f2a8 <strcmp>
   4ae54:	10000c26 	beq	r2,zero,4ae88 <_setlocale_r+0x68>
   4ae58:	01400174 	movhi	r5,5
   4ae5c:	2953e404 	addi	r5,r5,20368
   4ae60:	e13fff17 	ldw	r4,-4(fp)
   4ae64:	004f2a80 	call	4f2a8 <strcmp>
   4ae68:	10000726 	beq	r2,zero,4ae88 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
   4ae6c:	01400174 	movhi	r5,5
   4ae70:	2953e104 	addi	r5,r5,20356
   4ae74:	e13fff17 	ldw	r4,-4(fp)
   4ae78:	004f2a80 	call	4f2a8 <strcmp>
   4ae7c:	10000226 	beq	r2,zero,4ae88 <_setlocale_r+0x68>
        return NULL;
   4ae80:	0005883a 	mov	r2,zero
   4ae84:	00000206 	br	4ae90 <_setlocale_r+0x70>
    }
  return "C";
   4ae88:	00800174 	movhi	r2,5
   4ae8c:	1093e404 	addi	r2,r2,20368
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
   4ae90:	e037883a 	mov	sp,fp
   4ae94:	dfc00117 	ldw	ra,4(sp)
   4ae98:	df000017 	ldw	fp,0(sp)
   4ae9c:	dec00204 	addi	sp,sp,8
   4aea0:	f800283a 	ret

0004aea4 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
   4aea4:	deffff04 	addi	sp,sp,-4
   4aea8:	df000015 	stw	fp,0(sp)
   4aeac:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
   4aeb0:	00800174 	movhi	r2,5
   4aeb4:	1096e204 	addi	r2,r2,23432
#endif
}
   4aeb8:	e037883a 	mov	sp,fp
   4aebc:	df000017 	ldw	fp,0(sp)
   4aec0:	dec00104 	addi	sp,sp,4
   4aec4:	f800283a 	ret

0004aec8 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
   4aec8:	deffff04 	addi	sp,sp,-4
   4aecc:	df000015 	stw	fp,0(sp)
   4aed0:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
   4aed4:	d0a00717 	ldw	r2,-32740(gp)
#endif
}
   4aed8:	e037883a 	mov	sp,fp
   4aedc:	df000017 	ldw	fp,0(sp)
   4aee0:	dec00104 	addi	sp,sp,4
   4aee4:	f800283a 	ret

0004aee8 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
   4aee8:	deffff04 	addi	sp,sp,-4
   4aeec:	df000015 	stw	fp,0(sp)
   4aef0:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
   4aef4:	00800174 	movhi	r2,5
   4aef8:	1096ea04 	addi	r2,r2,23464
#endif
}
   4aefc:	e037883a 	mov	sp,fp
   4af00:	df000017 	ldw	fp,0(sp)
   4af04:	dec00104 	addi	sp,sp,4
   4af08:	f800283a 	ret

0004af0c <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
   4af0c:	deffff04 	addi	sp,sp,-4
   4af10:	df000015 	stw	fp,0(sp)
   4af14:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
   4af18:	d0a85117 	ldw	r2,-24252(gp)
}
   4af1c:	e037883a 	mov	sp,fp
   4af20:	df000017 	ldw	fp,0(sp)
   4af24:	dec00104 	addi	sp,sp,4
   4af28:	f800283a 	ret

0004af2c <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
   4af2c:	defffe04 	addi	sp,sp,-8
   4af30:	df000115 	stw	fp,4(sp)
   4af34:	df000104 	addi	fp,sp,4
   4af38:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
   4af3c:	00800174 	movhi	r2,5
   4af40:	1096d404 	addi	r2,r2,23376
}
   4af44:	e037883a 	mov	sp,fp
   4af48:	df000017 	ldw	fp,0(sp)
   4af4c:	dec00104 	addi	sp,sp,4
   4af50:	f800283a 	ret

0004af54 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
   4af54:	defffc04 	addi	sp,sp,-16
   4af58:	dfc00315 	stw	ra,12(sp)
   4af5c:	df000215 	stw	fp,8(sp)
   4af60:	df000204 	addi	fp,sp,8
   4af64:	e13ffe15 	stw	r4,-8(fp)
   4af68:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
   4af6c:	d0a00517 	ldw	r2,-32748(gp)
   4af70:	e1bfff17 	ldw	r6,-4(fp)
   4af74:	e17ffe17 	ldw	r5,-8(fp)
   4af78:	1009883a 	mov	r4,r2
   4af7c:	004ae200 	call	4ae20 <_setlocale_r>
}
   4af80:	e037883a 	mov	sp,fp
   4af84:	dfc00117 	ldw	ra,4(sp)
   4af88:	df000017 	ldw	fp,0(sp)
   4af8c:	dec00204 	addi	sp,sp,8
   4af90:	f800283a 	ret

0004af94 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
   4af94:	defffe04 	addi	sp,sp,-8
   4af98:	dfc00115 	stw	ra,4(sp)
   4af9c:	df000015 	stw	fp,0(sp)
   4afa0:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
   4afa4:	d0a00517 	ldw	r2,-32748(gp)
   4afa8:	1009883a 	mov	r4,r2
   4afac:	004af2c0 	call	4af2c <_localeconv_r>
}
   4afb0:	e037883a 	mov	sp,fp
   4afb4:	dfc00117 	ldw	ra,4(sp)
   4afb8:	df000017 	ldw	fp,0(sp)
   4afbc:	dec00204 	addi	sp,sp,8
   4afc0:	f800283a 	ret

0004afc4 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   4afc4:	deffea04 	addi	sp,sp,-88
   4afc8:	dfc01515 	stw	ra,84(sp)
   4afcc:	df001415 	stw	fp,80(sp)
   4afd0:	dcc01315 	stw	r19,76(sp)
   4afd4:	dc801215 	stw	r18,72(sp)
   4afd8:	dc401115 	stw	r17,68(sp)
   4afdc:	dc001015 	stw	r16,64(sp)
   4afe0:	df001404 	addi	fp,sp,80
   4afe4:	e13ffb15 	stw	r4,-20(fp)
   4afe8:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   4afec:	8080030b 	ldhu	r2,12(r16)
   4aff0:	10bfffcc 	andi	r2,r2,65535
   4aff4:	1080008c 	andi	r2,r2,2
   4aff8:	10000726 	beq	r2,zero,4b018 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
   4affc:	808010c4 	addi	r2,r16,67
   4b000:	80800015 	stw	r2,0(r16)
   4b004:	80800017 	ldw	r2,0(r16)
   4b008:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
   4b00c:	00800044 	movi	r2,1
   4b010:	80800515 	stw	r2,20(r16)
   4b014:	00006d06 	br	4b1cc <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
   4b018:	8080038b 	ldhu	r2,14(r16)
   4b01c:	10bfffcc 	andi	r2,r2,65535
   4b020:	10a0001c 	xori	r2,r2,32768
   4b024:	10a00004 	addi	r2,r2,-32768
   4b028:	10000916 	blt	r2,zero,4b050 <__smakebuf_r+0x8c>
   4b02c:	8080038b 	ldhu	r2,14(r16)
   4b030:	10bfffcc 	andi	r2,r2,65535
   4b034:	10a0001c 	xori	r2,r2,32768
   4b038:	10a00004 	addi	r2,r2,-32768
   4b03c:	e1bfec04 	addi	r6,fp,-80
   4b040:	100b883a 	mov	r5,r2
   4b044:	e13ffb17 	ldw	r4,-20(fp)
   4b048:	0050fbc0 	call	50fbc <_fstat_r>
   4b04c:	10000c0e 	bge	r2,zero,4b080 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
   4b050:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
   4b054:	8080030b 	ldhu	r2,12(r16)
   4b058:	10bfffcc 	andi	r2,r2,65535
   4b05c:	1080200c 	andi	r2,r2,128
   4b060:	10000226 	beq	r2,zero,4b06c <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
   4b064:	04401004 	movi	r17,64
   4b068:	00000106 	br	4b070 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
   4b06c:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   4b070:	8080030b 	ldhu	r2,12(r16)
   4b074:	10820014 	ori	r2,r2,2048
   4b078:	8080030d 	sth	r2,12(r16)
   4b07c:	00001606 	br	4b0d8 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   4b080:	e0bfed17 	ldw	r2,-76(fp)
   4b084:	10bc000c 	andi	r2,r2,61440
   4b088:	10880020 	cmpeqi	r2,r2,8192
   4b08c:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
   4b090:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   4b094:	e0bfed17 	ldw	r2,-76(fp)
   4b098:	10fc000c 	andi	r3,r2,61440
   4b09c:	00a00014 	movui	r2,32768
   4b0a0:	18800a1e 	bne	r3,r2,4b0cc <__smakebuf_r+0x108>
   4b0a4:	80c00a17 	ldw	r3,40(r16)
   4b0a8:	00800174 	movhi	r2,5
   4b0ac:	10bc6d04 	addi	r2,r2,-3660
   4b0b0:	1880061e 	bne	r3,r2,4b0cc <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
   4b0b4:	8080030b 	ldhu	r2,12(r16)
   4b0b8:	10810014 	ori	r2,r2,1024
   4b0bc:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   4b0c0:	00810004 	movi	r2,1024
   4b0c4:	80801315 	stw	r2,76(r16)
   4b0c8:	00000306 	br	4b0d8 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
   4b0cc:	8080030b 	ldhu	r2,12(r16)
   4b0d0:	10820014 	ori	r2,r2,2048
   4b0d4:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
   4b0d8:	90001126 	beq	r18,zero,4b120 <__smakebuf_r+0x15c>
   4b0dc:	8080038b 	ldhu	r2,14(r16)
   4b0e0:	10bfffcc 	andi	r2,r2,65535
   4b0e4:	10a0001c 	xori	r2,r2,32768
   4b0e8:	10a00004 	addi	r2,r2,-32768
   4b0ec:	100b883a 	mov	r5,r2
   4b0f0:	e13ffb17 	ldw	r4,-20(fp)
   4b0f4:	00510240 	call	51024 <_isatty_r>
   4b0f8:	10000926 	beq	r2,zero,4b120 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
   4b0fc:	8080030b 	ldhu	r2,12(r16)
   4b100:	10800054 	ori	r2,r2,1
   4b104:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
   4b108:	808010c4 	addi	r2,r16,67
   4b10c:	80800015 	stw	r2,0(r16)
   4b110:	80800017 	ldw	r2,0(r16)
   4b114:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
   4b118:	00800044 	movi	r2,1
   4b11c:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
   4b120:	880b883a 	mov	r5,r17
   4b124:	e13ffb17 	ldw	r4,-20(fp)
   4b128:	004b5a40 	call	4b5a4 <_malloc_r>
   4b12c:	1027883a 	mov	r19,r2
   4b130:	98000e1e 	bne	r19,zero,4b16c <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
   4b134:	8080030b 	ldhu	r2,12(r16)
   4b138:	10bfffcc 	andi	r2,r2,65535
   4b13c:	1080800c 	andi	r2,r2,512
   4b140:	1000221e 	bne	r2,zero,4b1cc <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
   4b144:	8080030b 	ldhu	r2,12(r16)
   4b148:	10800094 	ori	r2,r2,2
   4b14c:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
   4b150:	808010c4 	addi	r2,r16,67
   4b154:	80800015 	stw	r2,0(r16)
   4b158:	80800017 	ldw	r2,0(r16)
   4b15c:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
   4b160:	00800044 	movi	r2,1
   4b164:	80800515 	stw	r2,20(r16)
   4b168:	00001806 	br	4b1cc <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   4b16c:	e0fffb17 	ldw	r3,-20(fp)
   4b170:	00800174 	movhi	r2,5
   4b174:	10a72f04 	addi	r2,r2,-25412
   4b178:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
   4b17c:	8080030b 	ldhu	r2,12(r16)
   4b180:	10802014 	ori	r2,r2,128
   4b184:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
   4b188:	84c00015 	stw	r19,0(r16)
   4b18c:	80800017 	ldw	r2,0(r16)
   4b190:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
   4b194:	8805883a 	mov	r2,r17
   4b198:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
   4b19c:	90000b26 	beq	r18,zero,4b1cc <__smakebuf_r+0x208>
   4b1a0:	8080038b 	ldhu	r2,14(r16)
   4b1a4:	10bfffcc 	andi	r2,r2,65535
   4b1a8:	10a0001c 	xori	r2,r2,32768
   4b1ac:	10a00004 	addi	r2,r2,-32768
   4b1b0:	100b883a 	mov	r5,r2
   4b1b4:	e13ffb17 	ldw	r4,-20(fp)
   4b1b8:	00510240 	call	51024 <_isatty_r>
   4b1bc:	10000326 	beq	r2,zero,4b1cc <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
   4b1c0:	8080030b 	ldhu	r2,12(r16)
   4b1c4:	10800054 	ori	r2,r2,1
   4b1c8:	8080030d 	sth	r2,12(r16)
    }
}
   4b1cc:	e6fffc04 	addi	sp,fp,-16
   4b1d0:	dfc00517 	ldw	ra,20(sp)
   4b1d4:	df000417 	ldw	fp,16(sp)
   4b1d8:	dcc00317 	ldw	r19,12(sp)
   4b1dc:	dc800217 	ldw	r18,8(sp)
   4b1e0:	dc400117 	ldw	r17,4(sp)
   4b1e4:	dc000017 	ldw	r16,0(sp)
   4b1e8:	dec00604 	addi	sp,sp,24
   4b1ec:	f800283a 	ret

0004b1f0 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
   4b1f0:	defff104 	addi	sp,sp,-60
   4b1f4:	dfc00e15 	stw	ra,56(sp)
   4b1f8:	df000d15 	stw	fp,52(sp)
   4b1fc:	df000d04 	addi	fp,sp,52
   4b200:	e13ffe15 	stw	r4,-8(fp)
   4b204:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
   4b208:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
   4b20c:	00800174 	movhi	r2,5
   4b210:	1096f204 	addi	r2,r2,23496
   4b214:	10800217 	ldw	r2,8(r2)
   4b218:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
   4b21c:	e0bff817 	ldw	r2,-32(fp)
   4b220:	10c00117 	ldw	r3,4(r2)
   4b224:	00bfff04 	movi	r2,-4
   4b228:	1884703a 	and	r2,r3,r2
   4b22c:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
   4b230:	e0fff817 	ldw	r3,-32(fp)
   4b234:	e0bff917 	ldw	r2,-28(fp)
   4b238:	1885883a 	add	r2,r3,r2
   4b23c:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   4b240:	d0e85217 	ldw	r3,-24248(gp)
   4b244:	e0bfff17 	ldw	r2,-4(fp)
   4b248:	1885883a 	add	r2,r3,r2
   4b24c:	10800404 	addi	r2,r2,16
   4b250:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
   4b254:	00840004 	movi	r2,4096
   4b258:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   4b25c:	d0a00917 	ldw	r2,-32732(gp)
   4b260:	10bfffe0 	cmpeqi	r2,r2,-1
   4b264:	1000081e 	bne	r2,zero,4b288 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
   4b268:	e0fffb17 	ldw	r3,-20(fp)
   4b26c:	e0bff617 	ldw	r2,-40(fp)
   4b270:	1885883a 	add	r2,r3,r2
   4b274:	10ffffc4 	addi	r3,r2,-1
   4b278:	e0bffb17 	ldw	r2,-20(fp)
   4b27c:	0085c83a 	sub	r2,zero,r2
   4b280:	1884703a 	and	r2,r3,r2
   4b284:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
   4b288:	e0bff617 	ldw	r2,-40(fp)
   4b28c:	100b883a 	mov	r5,r2
   4b290:	e13ffe17 	ldw	r4,-8(fp)
   4b294:	004efd40 	call	4efd4 <_sbrk_r>
   4b298:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   4b29c:	e0bff317 	ldw	r2,-52(fp)
   4b2a0:	10bfffe0 	cmpeqi	r2,r2,-1
   4b2a4:	1000b91e 	bne	r2,zero,4b58c <malloc_extend_top+0x39c>
   4b2a8:	e0fff317 	ldw	r3,-52(fp)
   4b2ac:	e0bffa17 	ldw	r2,-24(fp)
   4b2b0:	1880042e 	bgeu	r3,r2,4b2c4 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
   4b2b4:	00800174 	movhi	r2,5
   4b2b8:	1096f204 	addi	r2,r2,23496
   4b2bc:	e0fff817 	ldw	r3,-32(fp)
   4b2c0:	1880b21e 	bne	r3,r2,4b58c <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
   4b2c4:	008001b4 	movhi	r2,6
   4b2c8:	10a4d404 	addi	r2,r2,-27824
   4b2cc:	10800017 	ldw	r2,0(r2)
   4b2d0:	1007883a 	mov	r3,r2
   4b2d4:	e0bff617 	ldw	r2,-40(fp)
   4b2d8:	1885883a 	add	r2,r3,r2
   4b2dc:	1007883a 	mov	r3,r2
   4b2e0:	008001b4 	movhi	r2,6
   4b2e4:	10a4d404 	addi	r2,r2,-27824
   4b2e8:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
   4b2ec:	e0fff317 	ldw	r3,-52(fp)
   4b2f0:	e0bffa17 	ldw	r2,-24(fp)
   4b2f4:	1880101e 	bne	r3,r2,4b338 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
   4b2f8:	e0bffb17 	ldw	r2,-20(fp)
   4b2fc:	10ffffc4 	addi	r3,r2,-1
   4b300:	e0bffa17 	ldw	r2,-24(fp)
   4b304:	1884703a 	and	r2,r3,r2
   4b308:	10000b1e 	bne	r2,zero,4b338 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
   4b30c:	e0fff617 	ldw	r3,-40(fp)
   4b310:	e0bff917 	ldw	r2,-28(fp)
   4b314:	1885883a 	add	r2,r3,r2
   4b318:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   4b31c:	00800174 	movhi	r2,5
   4b320:	1096f204 	addi	r2,r2,23496
   4b324:	10800217 	ldw	r2,8(r2)
   4b328:	e0fffc17 	ldw	r3,-16(fp)
   4b32c:	18c00054 	ori	r3,r3,1
   4b330:	10c00115 	stw	r3,4(r2)
   4b334:	00008006 	br	4b538 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
   4b338:	d0a00917 	ldw	r2,-32732(gp)
   4b33c:	10bfffd8 	cmpnei	r2,r2,-1
   4b340:	1000031e 	bne	r2,zero,4b350 <malloc_extend_top+0x160>
      sbrk_base = brk;
   4b344:	e0bff317 	ldw	r2,-52(fp)
   4b348:	d0a00915 	stw	r2,-32732(gp)
   4b34c:	00000a06 	br	4b378 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
   4b350:	008001b4 	movhi	r2,6
   4b354:	10a4d404 	addi	r2,r2,-27824
   4b358:	10c00017 	ldw	r3,0(r2)
   4b35c:	e13ff317 	ldw	r4,-52(fp)
   4b360:	e0bffa17 	ldw	r2,-24(fp)
   4b364:	2085c83a 	sub	r2,r4,r2
   4b368:	1887883a 	add	r3,r3,r2
   4b36c:	008001b4 	movhi	r2,6
   4b370:	10a4d404 	addi	r2,r2,-27824
   4b374:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
   4b378:	e0bff317 	ldw	r2,-52(fp)
   4b37c:	10800204 	addi	r2,r2,8
   4b380:	108001cc 	andi	r2,r2,7
   4b384:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
   4b388:	e0bffd17 	ldw	r2,-12(fp)
   4b38c:	10000926 	beq	r2,zero,4b3b4 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
   4b390:	00c00204 	movi	r3,8
   4b394:	e0bffd17 	ldw	r2,-12(fp)
   4b398:	1885c83a 	sub	r2,r3,r2
   4b39c:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
   4b3a0:	e0fff317 	ldw	r3,-52(fp)
   4b3a4:	e0bff417 	ldw	r2,-48(fp)
   4b3a8:	1885883a 	add	r2,r3,r2
   4b3ac:	e0bff315 	stw	r2,-52(fp)
   4b3b0:	00000106 	br	4b3b8 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
   4b3b4:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
   4b3b8:	e0fff317 	ldw	r3,-52(fp)
   4b3bc:	e0bff617 	ldw	r2,-40(fp)
   4b3c0:	1885883a 	add	r2,r3,r2
   4b3c4:	1007883a 	mov	r3,r2
   4b3c8:	e0bffb17 	ldw	r2,-20(fp)
   4b3cc:	10bfffc4 	addi	r2,r2,-1
   4b3d0:	1884703a 	and	r2,r3,r2
   4b3d4:	e0fffb17 	ldw	r3,-20(fp)
   4b3d8:	1885c83a 	sub	r2,r3,r2
   4b3dc:	e0fff417 	ldw	r3,-48(fp)
   4b3e0:	1885883a 	add	r2,r3,r2
   4b3e4:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
   4b3e8:	e0bff417 	ldw	r2,-48(fp)
   4b3ec:	100b883a 	mov	r5,r2
   4b3f0:	e13ffe17 	ldw	r4,-8(fp)
   4b3f4:	004efd40 	call	4efd4 <_sbrk_r>
   4b3f8:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
   4b3fc:	e0bff517 	ldw	r2,-44(fp)
   4b400:	10bfffd8 	cmpnei	r2,r2,-1
   4b404:	1000051e 	bne	r2,zero,4b41c <malloc_extend_top+0x22c>
      {
	correction = 0;
   4b408:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
   4b40c:	00800044 	movi	r2,1
   4b410:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
   4b414:	e0bff317 	ldw	r2,-52(fp)
   4b418:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
   4b41c:	008001b4 	movhi	r2,6
   4b420:	10a4d404 	addi	r2,r2,-27824
   4b424:	10800017 	ldw	r2,0(r2)
   4b428:	1007883a 	mov	r3,r2
   4b42c:	e0bff417 	ldw	r2,-48(fp)
   4b430:	1885883a 	add	r2,r3,r2
   4b434:	1007883a 	mov	r3,r2
   4b438:	008001b4 	movhi	r2,6
   4b43c:	10a4d404 	addi	r2,r2,-27824
   4b440:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
   4b444:	00800174 	movhi	r2,5
   4b448:	1096f204 	addi	r2,r2,23496
   4b44c:	e0fff317 	ldw	r3,-52(fp)
   4b450:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
   4b454:	e0fff517 	ldw	r3,-44(fp)
   4b458:	e0bff317 	ldw	r2,-52(fp)
   4b45c:	1885c83a 	sub	r2,r3,r2
   4b460:	1007883a 	mov	r3,r2
   4b464:	e0bff417 	ldw	r2,-48(fp)
   4b468:	1885883a 	add	r2,r3,r2
   4b46c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   4b470:	00800174 	movhi	r2,5
   4b474:	1096f204 	addi	r2,r2,23496
   4b478:	10800217 	ldw	r2,8(r2)
   4b47c:	e0fffc17 	ldw	r3,-16(fp)
   4b480:	18c00054 	ori	r3,r3,1
   4b484:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
   4b488:	00800174 	movhi	r2,5
   4b48c:	1096f204 	addi	r2,r2,23496
   4b490:	e0fff817 	ldw	r3,-32(fp)
   4b494:	18802826 	beq	r3,r2,4b538 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
   4b498:	e0bff917 	ldw	r2,-28(fp)
   4b49c:	10800428 	cmpgeui	r2,r2,16
   4b4a0:	1000061e 	bne	r2,zero,4b4bc <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
   4b4a4:	00800174 	movhi	r2,5
   4b4a8:	1096f204 	addi	r2,r2,23496
   4b4ac:	10800217 	ldw	r2,8(r2)
   4b4b0:	00c00044 	movi	r3,1
   4b4b4:	10c00115 	stw	r3,4(r2)
        return;
   4b4b8:	00003506 	br	4b590 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
   4b4bc:	e0bff917 	ldw	r2,-28(fp)
   4b4c0:	10fffd04 	addi	r3,r2,-12
   4b4c4:	00bffe04 	movi	r2,-8
   4b4c8:	1884703a 	and	r2,r3,r2
   4b4cc:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
   4b4d0:	e0bff817 	ldw	r2,-32(fp)
   4b4d4:	10800117 	ldw	r2,4(r2)
   4b4d8:	10c0004c 	andi	r3,r2,1
   4b4dc:	e0bff917 	ldw	r2,-28(fp)
   4b4e0:	1886b03a 	or	r3,r3,r2
   4b4e4:	e0bff817 	ldw	r2,-32(fp)
   4b4e8:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
   4b4ec:	e0fff817 	ldw	r3,-32(fp)
   4b4f0:	e0bff917 	ldw	r2,-28(fp)
   4b4f4:	1885883a 	add	r2,r3,r2
   4b4f8:	00c00144 	movi	r3,5
   4b4fc:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
   4b500:	e0bff917 	ldw	r2,-28(fp)
   4b504:	10800104 	addi	r2,r2,4
   4b508:	e0fff817 	ldw	r3,-32(fp)
   4b50c:	1885883a 	add	r2,r3,r2
   4b510:	00c00144 	movi	r3,5
   4b514:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
   4b518:	e0bff917 	ldw	r2,-28(fp)
   4b51c:	10800430 	cmpltui	r2,r2,16
   4b520:	1000051e 	bne	r2,zero,4b538 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
   4b524:	e0bff817 	ldw	r2,-32(fp)
   4b528:	10800204 	addi	r2,r2,8
   4b52c:	100b883a 	mov	r5,r2
   4b530:	e13ffe17 	ldw	r4,-8(fp)
   4b534:	0049f540 	call	49f54 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
   4b538:	008001b4 	movhi	r2,6
   4b53c:	10a4d404 	addi	r2,r2,-27824
   4b540:	10800017 	ldw	r2,0(r2)
   4b544:	1007883a 	mov	r3,r2
   4b548:	d0a85317 	ldw	r2,-24244(gp)
   4b54c:	10c0042e 	bgeu	r2,r3,4b560 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
   4b550:	008001b4 	movhi	r2,6
   4b554:	10a4d404 	addi	r2,r2,-27824
   4b558:	10800017 	ldw	r2,0(r2)
   4b55c:	d0a85315 	stw	r2,-24244(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
   4b560:	008001b4 	movhi	r2,6
   4b564:	10a4d404 	addi	r2,r2,-27824
   4b568:	10800017 	ldw	r2,0(r2)
   4b56c:	1007883a 	mov	r3,r2
   4b570:	d0a85417 	ldw	r2,-24240(gp)
   4b574:	10c0062e 	bgeu	r2,r3,4b590 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
   4b578:	008001b4 	movhi	r2,6
   4b57c:	10a4d404 	addi	r2,r2,-27824
   4b580:	10800017 	ldw	r2,0(r2)
   4b584:	d0a85415 	stw	r2,-24240(gp)
   4b588:	00000106 	br	4b590 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
   4b58c:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
   4b590:	e037883a 	mov	sp,fp
   4b594:	dfc00117 	ldw	ra,4(sp)
   4b598:	df000017 	ldw	fp,0(sp)
   4b59c:	dec00204 	addi	sp,sp,8
   4b5a0:	f800283a 	ret

0004b5a4 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   4b5a4:	deffef04 	addi	sp,sp,-68
   4b5a8:	dfc01015 	stw	ra,64(sp)
   4b5ac:	df000f15 	stw	fp,60(sp)
   4b5b0:	df000f04 	addi	fp,sp,60
   4b5b4:	e13ffe15 	stw	r4,-8(fp)
   4b5b8:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   4b5bc:	e0bfff17 	ldw	r2,-4(fp)
   4b5c0:	108002c4 	addi	r2,r2,11
   4b5c4:	108005f0 	cmpltui	r2,r2,23
   4b5c8:	1000051e 	bne	r2,zero,4b5e0 <_malloc_r+0x3c>
   4b5cc:	e0bfff17 	ldw	r2,-4(fp)
   4b5d0:	10c002c4 	addi	r3,r2,11
   4b5d4:	00bffe04 	movi	r2,-8
   4b5d8:	1884703a 	and	r2,r3,r2
   4b5dc:	00000106 	br	4b5e4 <_malloc_r+0x40>
   4b5e0:	00800404 	movi	r2,16
   4b5e4:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   4b5e8:	e0bffa17 	ldw	r2,-24(fp)
   4b5ec:	10000316 	blt	r2,zero,4b5fc <_malloc_r+0x58>
   4b5f0:	e0fffa17 	ldw	r3,-24(fp)
   4b5f4:	e0bfff17 	ldw	r2,-4(fp)
   4b5f8:	1880052e 	bgeu	r3,r2,4b610 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
   4b5fc:	e0bffe17 	ldw	r2,-8(fp)
   4b600:	00c00304 	movi	r3,12
   4b604:	10c00015 	stw	r3,0(r2)
    return 0;
   4b608:	0005883a 	mov	r2,zero
   4b60c:	0002bf06 	br	4c10c <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
   4b610:	e13ffe17 	ldw	r4,-8(fp)
   4b614:	0052a200 	call	52a20 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
   4b618:	e0bffa17 	ldw	r2,-24(fp)
   4b61c:	10807e28 	cmpgeui	r2,r2,504
   4b620:	10003f1e 	bne	r2,zero,4b720 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
   4b624:	e0bffa17 	ldw	r2,-24(fp)
   4b628:	1004d0fa 	srli	r2,r2,3
   4b62c:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
   4b630:	e0bff217 	ldw	r2,-56(fp)
   4b634:	10800044 	addi	r2,r2,1
   4b638:	1085883a 	add	r2,r2,r2
   4b63c:	1085883a 	add	r2,r2,r2
   4b640:	1087883a 	add	r3,r2,r2
   4b644:	00800174 	movhi	r2,5
   4b648:	1096f204 	addi	r2,r2,23496
   4b64c:	1885883a 	add	r2,r3,r2
   4b650:	10bffe04 	addi	r2,r2,-8
   4b654:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
   4b658:	e0bff917 	ldw	r2,-28(fp)
   4b65c:	10800317 	ldw	r2,12(r2)
   4b660:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
   4b664:	e0fff117 	ldw	r3,-60(fp)
   4b668:	e0bff917 	ldw	r2,-28(fp)
   4b66c:	1880061e 	bne	r3,r2,4b688 <_malloc_r+0xe4>
    {
      q = next_bin(q);
   4b670:	e0bff917 	ldw	r2,-28(fp)
   4b674:	10800204 	addi	r2,r2,8
   4b678:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
   4b67c:	e0bff917 	ldw	r2,-28(fp)
   4b680:	10800317 	ldw	r2,12(r2)
   4b684:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
   4b688:	e0fff117 	ldw	r3,-60(fp)
   4b68c:	e0bff917 	ldw	r2,-28(fp)
   4b690:	18801f26 	beq	r3,r2,4b710 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
   4b694:	e0bff117 	ldw	r2,-60(fp)
   4b698:	10c00117 	ldw	r3,4(r2)
   4b69c:	00bfff04 	movi	r2,-4
   4b6a0:	1884703a 	and	r2,r3,r2
   4b6a4:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
   4b6a8:	e0bff117 	ldw	r2,-60(fp)
   4b6ac:	10800317 	ldw	r2,12(r2)
   4b6b0:	e0bff815 	stw	r2,-32(fp)
   4b6b4:	e0bff117 	ldw	r2,-60(fp)
   4b6b8:	10800217 	ldw	r2,8(r2)
   4b6bc:	e0bff715 	stw	r2,-36(fp)
   4b6c0:	e0bff717 	ldw	r2,-36(fp)
   4b6c4:	e0fff817 	ldw	r3,-32(fp)
   4b6c8:	10c00315 	stw	r3,12(r2)
   4b6cc:	e0bff817 	ldw	r2,-32(fp)
   4b6d0:	e0fff717 	ldw	r3,-36(fp)
   4b6d4:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
   4b6d8:	e0fff117 	ldw	r3,-60(fp)
   4b6dc:	e0bffb17 	ldw	r2,-20(fp)
   4b6e0:	1885883a 	add	r2,r3,r2
   4b6e4:	e13ff117 	ldw	r4,-60(fp)
   4b6e8:	e0fffb17 	ldw	r3,-20(fp)
   4b6ec:	20c7883a 	add	r3,r4,r3
   4b6f0:	18c00117 	ldw	r3,4(r3)
   4b6f4:	18c00054 	ori	r3,r3,1
   4b6f8:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   4b6fc:	e13ffe17 	ldw	r4,-8(fp)
   4b700:	0052a440 	call	52a44 <__malloc_unlock>
      return chunk2mem(victim);
   4b704:	e0bff117 	ldw	r2,-60(fp)
   4b708:	10800204 	addi	r2,r2,8
   4b70c:	00027f06 	br	4c10c <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
   4b710:	e0bff217 	ldw	r2,-56(fp)
   4b714:	10800084 	addi	r2,r2,2
   4b718:	e0bff215 	stw	r2,-56(fp)
   4b71c:	00007306 	br	4b8ec <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
   4b720:	e0bffa17 	ldw	r2,-24(fp)
   4b724:	1004d27a 	srli	r2,r2,9
   4b728:	1000031e 	bne	r2,zero,4b738 <_malloc_r+0x194>
   4b72c:	e0bffa17 	ldw	r2,-24(fp)
   4b730:	1004d0fa 	srli	r2,r2,3
   4b734:	00002906 	br	4b7dc <_malloc_r+0x238>
   4b738:	e0bffa17 	ldw	r2,-24(fp)
   4b73c:	1004d27a 	srli	r2,r2,9
   4b740:	10800168 	cmpgeui	r2,r2,5
   4b744:	1000041e 	bne	r2,zero,4b758 <_malloc_r+0x1b4>
   4b748:	e0bffa17 	ldw	r2,-24(fp)
   4b74c:	1004d1ba 	srli	r2,r2,6
   4b750:	10800e04 	addi	r2,r2,56
   4b754:	00002106 	br	4b7dc <_malloc_r+0x238>
   4b758:	e0bffa17 	ldw	r2,-24(fp)
   4b75c:	1004d27a 	srli	r2,r2,9
   4b760:	10800568 	cmpgeui	r2,r2,21
   4b764:	1000041e 	bne	r2,zero,4b778 <_malloc_r+0x1d4>
   4b768:	e0bffa17 	ldw	r2,-24(fp)
   4b76c:	1004d27a 	srli	r2,r2,9
   4b770:	108016c4 	addi	r2,r2,91
   4b774:	00001906 	br	4b7dc <_malloc_r+0x238>
   4b778:	e0bffa17 	ldw	r2,-24(fp)
   4b77c:	1004d27a 	srli	r2,r2,9
   4b780:	10801568 	cmpgeui	r2,r2,85
   4b784:	1000041e 	bne	r2,zero,4b798 <_malloc_r+0x1f4>
   4b788:	e0bffa17 	ldw	r2,-24(fp)
   4b78c:	1004d33a 	srli	r2,r2,12
   4b790:	10801b84 	addi	r2,r2,110
   4b794:	00001106 	br	4b7dc <_malloc_r+0x238>
   4b798:	e0bffa17 	ldw	r2,-24(fp)
   4b79c:	1004d27a 	srli	r2,r2,9
   4b7a0:	10805568 	cmpgeui	r2,r2,341
   4b7a4:	1000041e 	bne	r2,zero,4b7b8 <_malloc_r+0x214>
   4b7a8:	e0bffa17 	ldw	r2,-24(fp)
   4b7ac:	1004d3fa 	srli	r2,r2,15
   4b7b0:	10801dc4 	addi	r2,r2,119
   4b7b4:	00000906 	br	4b7dc <_malloc_r+0x238>
   4b7b8:	e0bffa17 	ldw	r2,-24(fp)
   4b7bc:	1004d27a 	srli	r2,r2,9
   4b7c0:	10815568 	cmpgeui	r2,r2,1365
   4b7c4:	1000041e 	bne	r2,zero,4b7d8 <_malloc_r+0x234>
   4b7c8:	e0bffa17 	ldw	r2,-24(fp)
   4b7cc:	1004d4ba 	srli	r2,r2,18
   4b7d0:	10801f04 	addi	r2,r2,124
   4b7d4:	00000106 	br	4b7dc <_malloc_r+0x238>
   4b7d8:	00801f84 	movi	r2,126
   4b7dc:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
   4b7e0:	e0bff217 	ldw	r2,-56(fp)
   4b7e4:	10800044 	addi	r2,r2,1
   4b7e8:	1085883a 	add	r2,r2,r2
   4b7ec:	1085883a 	add	r2,r2,r2
   4b7f0:	1087883a 	add	r3,r2,r2
   4b7f4:	00800174 	movhi	r2,5
   4b7f8:	1096f204 	addi	r2,r2,23496
   4b7fc:	1885883a 	add	r2,r3,r2
   4b800:	10bffe04 	addi	r2,r2,-8
   4b804:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
   4b808:	e0bff317 	ldw	r2,-52(fp)
   4b80c:	10800317 	ldw	r2,12(r2)
   4b810:	e0bff115 	stw	r2,-60(fp)
   4b814:	00002f06 	br	4b8d4 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
   4b818:	e0bff117 	ldw	r2,-60(fp)
   4b81c:	10c00117 	ldw	r3,4(r2)
   4b820:	00bfff04 	movi	r2,-4
   4b824:	1884703a 	and	r2,r3,r2
   4b828:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
   4b82c:	e0fffb17 	ldw	r3,-20(fp)
   4b830:	e0bffa17 	ldw	r2,-24(fp)
   4b834:	1885c83a 	sub	r2,r3,r2
   4b838:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   4b83c:	e0bff417 	ldw	r2,-48(fp)
   4b840:	10800410 	cmplti	r2,r2,16
   4b844:	1000041e 	bne	r2,zero,4b858 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
   4b848:	e0bff217 	ldw	r2,-56(fp)
   4b84c:	10bfffc4 	addi	r2,r2,-1
   4b850:	e0bff215 	stw	r2,-56(fp)
        break;   
   4b854:	00002206 	br	4b8e0 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
   4b858:	e0bff417 	ldw	r2,-48(fp)
   4b85c:	10001a16 	blt	r2,zero,4b8c8 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
   4b860:	e0bff117 	ldw	r2,-60(fp)
   4b864:	10800317 	ldw	r2,12(r2)
   4b868:	e0bff815 	stw	r2,-32(fp)
   4b86c:	e0bff117 	ldw	r2,-60(fp)
   4b870:	10800217 	ldw	r2,8(r2)
   4b874:	e0bff715 	stw	r2,-36(fp)
   4b878:	e0bff717 	ldw	r2,-36(fp)
   4b87c:	e0fff817 	ldw	r3,-32(fp)
   4b880:	10c00315 	stw	r3,12(r2)
   4b884:	e0bff817 	ldw	r2,-32(fp)
   4b888:	e0fff717 	ldw	r3,-36(fp)
   4b88c:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
   4b890:	e0fff117 	ldw	r3,-60(fp)
   4b894:	e0bffb17 	ldw	r2,-20(fp)
   4b898:	1885883a 	add	r2,r3,r2
   4b89c:	e13ff117 	ldw	r4,-60(fp)
   4b8a0:	e0fffb17 	ldw	r3,-20(fp)
   4b8a4:	20c7883a 	add	r3,r4,r3
   4b8a8:	18c00117 	ldw	r3,4(r3)
   4b8ac:	18c00054 	ori	r3,r3,1
   4b8b0:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   4b8b4:	e13ffe17 	ldw	r4,-8(fp)
   4b8b8:	0052a440 	call	52a44 <__malloc_unlock>
        return chunk2mem(victim);
   4b8bc:	e0bff117 	ldw	r2,-60(fp)
   4b8c0:	10800204 	addi	r2,r2,8
   4b8c4:	00021106 	br	4c10c <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   4b8c8:	e0bff117 	ldw	r2,-60(fp)
   4b8cc:	10800317 	ldw	r2,12(r2)
   4b8d0:	e0bff115 	stw	r2,-60(fp)
   4b8d4:	e0fff117 	ldw	r3,-60(fp)
   4b8d8:	e0bff317 	ldw	r2,-52(fp)
   4b8dc:	18bfce1e 	bne	r3,r2,4b818 <_gp+0xfffec640>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
   4b8e0:	e0bff217 	ldw	r2,-56(fp)
   4b8e4:	10800044 	addi	r2,r2,1
   4b8e8:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
   4b8ec:	00800174 	movhi	r2,5
   4b8f0:	1096f404 	addi	r2,r2,23504
   4b8f4:	10800217 	ldw	r2,8(r2)
   4b8f8:	e0bff115 	stw	r2,-60(fp)
   4b8fc:	00800174 	movhi	r2,5
   4b900:	1096f404 	addi	r2,r2,23504
   4b904:	e0fff117 	ldw	r3,-60(fp)
   4b908:	1880e626 	beq	r3,r2,4bca4 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
   4b90c:	e0bff117 	ldw	r2,-60(fp)
   4b910:	10c00117 	ldw	r3,4(r2)
   4b914:	00bfff04 	movi	r2,-4
   4b918:	1884703a 	and	r2,r3,r2
   4b91c:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
   4b920:	e0fffb17 	ldw	r3,-20(fp)
   4b924:	e0bffa17 	ldw	r2,-24(fp)
   4b928:	1885c83a 	sub	r2,r3,r2
   4b92c:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
   4b930:	e0bff417 	ldw	r2,-48(fp)
   4b934:	10800410 	cmplti	r2,r2,16
   4b938:	1000271e 	bne	r2,zero,4b9d8 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
   4b93c:	e0fff117 	ldw	r3,-60(fp)
   4b940:	e0bffa17 	ldw	r2,-24(fp)
   4b944:	1885883a 	add	r2,r3,r2
   4b948:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
   4b94c:	e0bffa17 	ldw	r2,-24(fp)
   4b950:	10c00054 	ori	r3,r2,1
   4b954:	e0bff117 	ldw	r2,-60(fp)
   4b958:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
   4b95c:	00c00174 	movhi	r3,5
   4b960:	18d6f404 	addi	r3,r3,23504
   4b964:	00800174 	movhi	r2,5
   4b968:	1096f404 	addi	r2,r2,23504
   4b96c:	e13ffc17 	ldw	r4,-16(fp)
   4b970:	11000315 	stw	r4,12(r2)
   4b974:	10800317 	ldw	r2,12(r2)
   4b978:	18800215 	stw	r2,8(r3)
   4b97c:	00800174 	movhi	r2,5
   4b980:	1096f404 	addi	r2,r2,23504
   4b984:	e0fffc17 	ldw	r3,-16(fp)
   4b988:	18800315 	stw	r2,12(r3)
   4b98c:	e0bffc17 	ldw	r2,-16(fp)
   4b990:	10c00317 	ldw	r3,12(r2)
   4b994:	e0bffc17 	ldw	r2,-16(fp)
   4b998:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
   4b99c:	e0bff417 	ldw	r2,-48(fp)
   4b9a0:	10800054 	ori	r2,r2,1
   4b9a4:	1007883a 	mov	r3,r2
   4b9a8:	e0bffc17 	ldw	r2,-16(fp)
   4b9ac:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
   4b9b0:	e0bff417 	ldw	r2,-48(fp)
   4b9b4:	e0fffc17 	ldw	r3,-16(fp)
   4b9b8:	1885883a 	add	r2,r3,r2
   4b9bc:	e0fff417 	ldw	r3,-48(fp)
   4b9c0:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   4b9c4:	e13ffe17 	ldw	r4,-8(fp)
   4b9c8:	0052a440 	call	52a44 <__malloc_unlock>
      return chunk2mem(victim);
   4b9cc:	e0bff117 	ldw	r2,-60(fp)
   4b9d0:	10800204 	addi	r2,r2,8
   4b9d4:	0001cd06 	br	4c10c <_malloc_r+0xb68>
    }

    clear_last_remainder;
   4b9d8:	00c00174 	movhi	r3,5
   4b9dc:	18d6f404 	addi	r3,r3,23504
   4b9e0:	00800174 	movhi	r2,5
   4b9e4:	1096f404 	addi	r2,r2,23504
   4b9e8:	01000174 	movhi	r4,5
   4b9ec:	2116f404 	addi	r4,r4,23504
   4b9f0:	11000315 	stw	r4,12(r2)
   4b9f4:	10800317 	ldw	r2,12(r2)
   4b9f8:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
   4b9fc:	e0bff417 	ldw	r2,-48(fp)
   4ba00:	10000e16 	blt	r2,zero,4ba3c <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
   4ba04:	e0fff117 	ldw	r3,-60(fp)
   4ba08:	e0bffb17 	ldw	r2,-20(fp)
   4ba0c:	1885883a 	add	r2,r3,r2
   4ba10:	e13ff117 	ldw	r4,-60(fp)
   4ba14:	e0fffb17 	ldw	r3,-20(fp)
   4ba18:	20c7883a 	add	r3,r4,r3
   4ba1c:	18c00117 	ldw	r3,4(r3)
   4ba20:	18c00054 	ori	r3,r3,1
   4ba24:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   4ba28:	e13ffe17 	ldw	r4,-8(fp)
   4ba2c:	0052a440 	call	52a44 <__malloc_unlock>
      return chunk2mem(victim);
   4ba30:	e0bff117 	ldw	r2,-60(fp)
   4ba34:	10800204 	addi	r2,r2,8
   4ba38:	0001b406 	br	4c10c <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   4ba3c:	e0bffb17 	ldw	r2,-20(fp)
   4ba40:	10808028 	cmpgeui	r2,r2,512
   4ba44:	10002c1e 	bne	r2,zero,4baf8 <_malloc_r+0x554>
   4ba48:	e0bffb17 	ldw	r2,-20(fp)
   4ba4c:	1004d0fa 	srli	r2,r2,3
   4ba50:	e0bffd15 	stw	r2,-12(fp)
   4ba54:	00c00174 	movhi	r3,5
   4ba58:	18d6f204 	addi	r3,r3,23496
   4ba5c:	00800174 	movhi	r2,5
   4ba60:	1096f204 	addi	r2,r2,23496
   4ba64:	11000117 	ldw	r4,4(r2)
   4ba68:	e0bffd17 	ldw	r2,-12(fp)
   4ba6c:	1000010e 	bge	r2,zero,4ba74 <_malloc_r+0x4d0>
   4ba70:	108000c4 	addi	r2,r2,3
   4ba74:	1005d0ba 	srai	r2,r2,2
   4ba78:	100b883a 	mov	r5,r2
   4ba7c:	00800044 	movi	r2,1
   4ba80:	1144983a 	sll	r2,r2,r5
   4ba84:	2084b03a 	or	r2,r4,r2
   4ba88:	18800115 	stw	r2,4(r3)
   4ba8c:	e0bffd17 	ldw	r2,-12(fp)
   4ba90:	10800044 	addi	r2,r2,1
   4ba94:	1085883a 	add	r2,r2,r2
   4ba98:	1085883a 	add	r2,r2,r2
   4ba9c:	1087883a 	add	r3,r2,r2
   4baa0:	00800174 	movhi	r2,5
   4baa4:	1096f204 	addi	r2,r2,23496
   4baa8:	1885883a 	add	r2,r3,r2
   4baac:	10bffe04 	addi	r2,r2,-8
   4bab0:	e0bff815 	stw	r2,-32(fp)
   4bab4:	e0bff817 	ldw	r2,-32(fp)
   4bab8:	10800217 	ldw	r2,8(r2)
   4babc:	e0bff715 	stw	r2,-36(fp)
   4bac0:	e0bff117 	ldw	r2,-60(fp)
   4bac4:	e0fff817 	ldw	r3,-32(fp)
   4bac8:	10c00315 	stw	r3,12(r2)
   4bacc:	e0bff117 	ldw	r2,-60(fp)
   4bad0:	e0fff717 	ldw	r3,-36(fp)
   4bad4:	10c00215 	stw	r3,8(r2)
   4bad8:	e0bff817 	ldw	r2,-32(fp)
   4badc:	e0fff117 	ldw	r3,-60(fp)
   4bae0:	10c00215 	stw	r3,8(r2)
   4bae4:	e0bff817 	ldw	r2,-32(fp)
   4bae8:	10c00217 	ldw	r3,8(r2)
   4baec:	e0bff717 	ldw	r2,-36(fp)
   4baf0:	10c00315 	stw	r3,12(r2)
   4baf4:	00006b06 	br	4bca4 <_malloc_r+0x700>
   4baf8:	e0bffb17 	ldw	r2,-20(fp)
   4bafc:	1004d27a 	srli	r2,r2,9
   4bb00:	1000031e 	bne	r2,zero,4bb10 <_malloc_r+0x56c>
   4bb04:	e0bffb17 	ldw	r2,-20(fp)
   4bb08:	1004d0fa 	srli	r2,r2,3
   4bb0c:	00002906 	br	4bbb4 <_malloc_r+0x610>
   4bb10:	e0bffb17 	ldw	r2,-20(fp)
   4bb14:	1004d27a 	srli	r2,r2,9
   4bb18:	10800168 	cmpgeui	r2,r2,5
   4bb1c:	1000041e 	bne	r2,zero,4bb30 <_malloc_r+0x58c>
   4bb20:	e0bffb17 	ldw	r2,-20(fp)
   4bb24:	1004d1ba 	srli	r2,r2,6
   4bb28:	10800e04 	addi	r2,r2,56
   4bb2c:	00002106 	br	4bbb4 <_malloc_r+0x610>
   4bb30:	e0bffb17 	ldw	r2,-20(fp)
   4bb34:	1004d27a 	srli	r2,r2,9
   4bb38:	10800568 	cmpgeui	r2,r2,21
   4bb3c:	1000041e 	bne	r2,zero,4bb50 <_malloc_r+0x5ac>
   4bb40:	e0bffb17 	ldw	r2,-20(fp)
   4bb44:	1004d27a 	srli	r2,r2,9
   4bb48:	108016c4 	addi	r2,r2,91
   4bb4c:	00001906 	br	4bbb4 <_malloc_r+0x610>
   4bb50:	e0bffb17 	ldw	r2,-20(fp)
   4bb54:	1004d27a 	srli	r2,r2,9
   4bb58:	10801568 	cmpgeui	r2,r2,85
   4bb5c:	1000041e 	bne	r2,zero,4bb70 <_malloc_r+0x5cc>
   4bb60:	e0bffb17 	ldw	r2,-20(fp)
   4bb64:	1004d33a 	srli	r2,r2,12
   4bb68:	10801b84 	addi	r2,r2,110
   4bb6c:	00001106 	br	4bbb4 <_malloc_r+0x610>
   4bb70:	e0bffb17 	ldw	r2,-20(fp)
   4bb74:	1004d27a 	srli	r2,r2,9
   4bb78:	10805568 	cmpgeui	r2,r2,341
   4bb7c:	1000041e 	bne	r2,zero,4bb90 <_malloc_r+0x5ec>
   4bb80:	e0bffb17 	ldw	r2,-20(fp)
   4bb84:	1004d3fa 	srli	r2,r2,15
   4bb88:	10801dc4 	addi	r2,r2,119
   4bb8c:	00000906 	br	4bbb4 <_malloc_r+0x610>
   4bb90:	e0bffb17 	ldw	r2,-20(fp)
   4bb94:	1004d27a 	srli	r2,r2,9
   4bb98:	10815568 	cmpgeui	r2,r2,1365
   4bb9c:	1000041e 	bne	r2,zero,4bbb0 <_malloc_r+0x60c>
   4bba0:	e0bffb17 	ldw	r2,-20(fp)
   4bba4:	1004d4ba 	srli	r2,r2,18
   4bba8:	10801f04 	addi	r2,r2,124
   4bbac:	00000106 	br	4bbb4 <_malloc_r+0x610>
   4bbb0:	00801f84 	movi	r2,126
   4bbb4:	e0bffd15 	stw	r2,-12(fp)
   4bbb8:	e0bffd17 	ldw	r2,-12(fp)
   4bbbc:	10800044 	addi	r2,r2,1
   4bbc0:	1085883a 	add	r2,r2,r2
   4bbc4:	1085883a 	add	r2,r2,r2
   4bbc8:	1087883a 	add	r3,r2,r2
   4bbcc:	00800174 	movhi	r2,5
   4bbd0:	1096f204 	addi	r2,r2,23496
   4bbd4:	1885883a 	add	r2,r3,r2
   4bbd8:	10bffe04 	addi	r2,r2,-8
   4bbdc:	e0bff815 	stw	r2,-32(fp)
   4bbe0:	e0bff817 	ldw	r2,-32(fp)
   4bbe4:	10800217 	ldw	r2,8(r2)
   4bbe8:	e0bff715 	stw	r2,-36(fp)
   4bbec:	e0fff717 	ldw	r3,-36(fp)
   4bbf0:	e0bff817 	ldw	r2,-32(fp)
   4bbf4:	1880121e 	bne	r3,r2,4bc40 <_malloc_r+0x69c>
   4bbf8:	00c00174 	movhi	r3,5
   4bbfc:	18d6f204 	addi	r3,r3,23496
   4bc00:	00800174 	movhi	r2,5
   4bc04:	1096f204 	addi	r2,r2,23496
   4bc08:	11000117 	ldw	r4,4(r2)
   4bc0c:	e0bffd17 	ldw	r2,-12(fp)
   4bc10:	1000010e 	bge	r2,zero,4bc18 <_malloc_r+0x674>
   4bc14:	108000c4 	addi	r2,r2,3
   4bc18:	1005d0ba 	srai	r2,r2,2
   4bc1c:	100b883a 	mov	r5,r2
   4bc20:	00800044 	movi	r2,1
   4bc24:	1144983a 	sll	r2,r2,r5
   4bc28:	2084b03a 	or	r2,r4,r2
   4bc2c:	18800115 	stw	r2,4(r3)
   4bc30:	00000f06 	br	4bc70 <_malloc_r+0x6cc>
   4bc34:	e0bff717 	ldw	r2,-36(fp)
   4bc38:	10800217 	ldw	r2,8(r2)
   4bc3c:	e0bff715 	stw	r2,-36(fp)
   4bc40:	e0fff717 	ldw	r3,-36(fp)
   4bc44:	e0bff817 	ldw	r2,-32(fp)
   4bc48:	18800626 	beq	r3,r2,4bc64 <_malloc_r+0x6c0>
   4bc4c:	e0bff717 	ldw	r2,-36(fp)
   4bc50:	10c00117 	ldw	r3,4(r2)
   4bc54:	00bfff04 	movi	r2,-4
   4bc58:	1884703a 	and	r2,r3,r2
   4bc5c:	e0fffb17 	ldw	r3,-20(fp)
   4bc60:	18bff436 	bltu	r3,r2,4bc34 <_gp+0xfffeca5c>
   4bc64:	e0bff717 	ldw	r2,-36(fp)
   4bc68:	10800317 	ldw	r2,12(r2)
   4bc6c:	e0bff815 	stw	r2,-32(fp)
   4bc70:	e0bff117 	ldw	r2,-60(fp)
   4bc74:	e0fff817 	ldw	r3,-32(fp)
   4bc78:	10c00315 	stw	r3,12(r2)
   4bc7c:	e0bff117 	ldw	r2,-60(fp)
   4bc80:	e0fff717 	ldw	r3,-36(fp)
   4bc84:	10c00215 	stw	r3,8(r2)
   4bc88:	e0bff817 	ldw	r2,-32(fp)
   4bc8c:	e0fff117 	ldw	r3,-60(fp)
   4bc90:	10c00215 	stw	r3,8(r2)
   4bc94:	e0bff817 	ldw	r2,-32(fp)
   4bc98:	10c00217 	ldw	r3,8(r2)
   4bc9c:	e0bff717 	ldw	r2,-36(fp)
   4bca0:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
   4bca4:	e0bff217 	ldw	r2,-56(fp)
   4bca8:	1000010e 	bge	r2,zero,4bcb0 <_malloc_r+0x70c>
   4bcac:	108000c4 	addi	r2,r2,3
   4bcb0:	1005d0ba 	srai	r2,r2,2
   4bcb4:	1007883a 	mov	r3,r2
   4bcb8:	00800044 	movi	r2,1
   4bcbc:	10c4983a 	sll	r2,r2,r3
   4bcc0:	e0bff515 	stw	r2,-44(fp)
   4bcc4:	00800174 	movhi	r2,5
   4bcc8:	1096f204 	addi	r2,r2,23496
   4bccc:	10c00117 	ldw	r3,4(r2)
   4bcd0:	e0bff517 	ldw	r2,-44(fp)
   4bcd4:	1880c636 	bltu	r3,r2,4bff0 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
   4bcd8:	00800174 	movhi	r2,5
   4bcdc:	1096f204 	addi	r2,r2,23496
   4bce0:	10c00117 	ldw	r3,4(r2)
   4bce4:	e0bff517 	ldw	r2,-44(fp)
   4bce8:	1884703a 	and	r2,r3,r2
   4bcec:	1000151e 	bne	r2,zero,4bd44 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   4bcf0:	e0fff217 	ldw	r3,-56(fp)
   4bcf4:	00bfff04 	movi	r2,-4
   4bcf8:	1884703a 	and	r2,r3,r2
   4bcfc:	10800104 	addi	r2,r2,4
   4bd00:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
   4bd04:	e0bff517 	ldw	r2,-44(fp)
   4bd08:	1085883a 	add	r2,r2,r2
   4bd0c:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
   4bd10:	00000606 	br	4bd2c <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
   4bd14:	e0bff217 	ldw	r2,-56(fp)
   4bd18:	10800104 	addi	r2,r2,4
   4bd1c:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
   4bd20:	e0bff517 	ldw	r2,-44(fp)
   4bd24:	1085883a 	add	r2,r2,r2
   4bd28:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   4bd2c:	00800174 	movhi	r2,5
   4bd30:	1096f204 	addi	r2,r2,23496
   4bd34:	10c00117 	ldw	r3,4(r2)
   4bd38:	e0bff517 	ldw	r2,-44(fp)
   4bd3c:	1884703a 	and	r2,r3,r2
   4bd40:	103ff426 	beq	r2,zero,4bd14 <_gp+0xfffecb3c>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
   4bd44:	e0bff217 	ldw	r2,-56(fp)
   4bd48:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
   4bd4c:	e0bff217 	ldw	r2,-56(fp)
   4bd50:	10800044 	addi	r2,r2,1
   4bd54:	1085883a 	add	r2,r2,r2
   4bd58:	1085883a 	add	r2,r2,r2
   4bd5c:	1087883a 	add	r3,r2,r2
   4bd60:	00800174 	movhi	r2,5
   4bd64:	1096f204 	addi	r2,r2,23496
   4bd68:	1885883a 	add	r2,r3,r2
   4bd6c:	10bffe04 	addi	r2,r2,-8
   4bd70:	e0bff315 	stw	r2,-52(fp)
   4bd74:	e0bff317 	ldw	r2,-52(fp)
   4bd78:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   4bd7c:	e0bff317 	ldw	r2,-52(fp)
   4bd80:	10800317 	ldw	r2,12(r2)
   4bd84:	e0bff115 	stw	r2,-60(fp)
   4bd88:	00005e06 	br	4bf04 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
   4bd8c:	e0bff117 	ldw	r2,-60(fp)
   4bd90:	10c00117 	ldw	r3,4(r2)
   4bd94:	00bfff04 	movi	r2,-4
   4bd98:	1884703a 	and	r2,r3,r2
   4bd9c:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
   4bda0:	e0fffb17 	ldw	r3,-20(fp)
   4bda4:	e0bffa17 	ldw	r2,-24(fp)
   4bda8:	1885c83a 	sub	r2,r3,r2
   4bdac:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
   4bdb0:	e0bff417 	ldw	r2,-48(fp)
   4bdb4:	10800410 	cmplti	r2,r2,16
   4bdb8:	1000331e 	bne	r2,zero,4be88 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
   4bdbc:	e0fff117 	ldw	r3,-60(fp)
   4bdc0:	e0bffa17 	ldw	r2,-24(fp)
   4bdc4:	1885883a 	add	r2,r3,r2
   4bdc8:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
   4bdcc:	e0bffa17 	ldw	r2,-24(fp)
   4bdd0:	10c00054 	ori	r3,r2,1
   4bdd4:	e0bff117 	ldw	r2,-60(fp)
   4bdd8:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   4bddc:	e0bff117 	ldw	r2,-60(fp)
   4bde0:	10800317 	ldw	r2,12(r2)
   4bde4:	e0bff815 	stw	r2,-32(fp)
   4bde8:	e0bff117 	ldw	r2,-60(fp)
   4bdec:	10800217 	ldw	r2,8(r2)
   4bdf0:	e0bff715 	stw	r2,-36(fp)
   4bdf4:	e0bff717 	ldw	r2,-36(fp)
   4bdf8:	e0fff817 	ldw	r3,-32(fp)
   4bdfc:	10c00315 	stw	r3,12(r2)
   4be00:	e0bff817 	ldw	r2,-32(fp)
   4be04:	e0fff717 	ldw	r3,-36(fp)
   4be08:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
   4be0c:	00c00174 	movhi	r3,5
   4be10:	18d6f404 	addi	r3,r3,23504
   4be14:	00800174 	movhi	r2,5
   4be18:	1096f404 	addi	r2,r2,23504
   4be1c:	e13ffc17 	ldw	r4,-16(fp)
   4be20:	11000315 	stw	r4,12(r2)
   4be24:	10800317 	ldw	r2,12(r2)
   4be28:	18800215 	stw	r2,8(r3)
   4be2c:	00800174 	movhi	r2,5
   4be30:	1096f404 	addi	r2,r2,23504
   4be34:	e0fffc17 	ldw	r3,-16(fp)
   4be38:	18800315 	stw	r2,12(r3)
   4be3c:	e0bffc17 	ldw	r2,-16(fp)
   4be40:	10c00317 	ldw	r3,12(r2)
   4be44:	e0bffc17 	ldw	r2,-16(fp)
   4be48:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
   4be4c:	e0bff417 	ldw	r2,-48(fp)
   4be50:	10800054 	ori	r2,r2,1
   4be54:	1007883a 	mov	r3,r2
   4be58:	e0bffc17 	ldw	r2,-16(fp)
   4be5c:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
   4be60:	e0bff417 	ldw	r2,-48(fp)
   4be64:	e0fffc17 	ldw	r3,-16(fp)
   4be68:	1885883a 	add	r2,r3,r2
   4be6c:	e0fff417 	ldw	r3,-48(fp)
   4be70:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   4be74:	e13ffe17 	ldw	r4,-8(fp)
   4be78:	0052a440 	call	52a44 <__malloc_unlock>
            return chunk2mem(victim);
   4be7c:	e0bff117 	ldw	r2,-60(fp)
   4be80:	10800204 	addi	r2,r2,8
   4be84:	0000a106 	br	4c10c <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
   4be88:	e0bff417 	ldw	r2,-48(fp)
   4be8c:	10001a16 	blt	r2,zero,4bef8 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
   4be90:	e0fff117 	ldw	r3,-60(fp)
   4be94:	e0bffb17 	ldw	r2,-20(fp)
   4be98:	1885883a 	add	r2,r3,r2
   4be9c:	e13ff117 	ldw	r4,-60(fp)
   4bea0:	e0fffb17 	ldw	r3,-20(fp)
   4bea4:	20c7883a 	add	r3,r4,r3
   4bea8:	18c00117 	ldw	r3,4(r3)
   4beac:	18c00054 	ori	r3,r3,1
   4beb0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   4beb4:	e0bff117 	ldw	r2,-60(fp)
   4beb8:	10800317 	ldw	r2,12(r2)
   4bebc:	e0bff815 	stw	r2,-32(fp)
   4bec0:	e0bff117 	ldw	r2,-60(fp)
   4bec4:	10800217 	ldw	r2,8(r2)
   4bec8:	e0bff715 	stw	r2,-36(fp)
   4becc:	e0bff717 	ldw	r2,-36(fp)
   4bed0:	e0fff817 	ldw	r3,-32(fp)
   4bed4:	10c00315 	stw	r3,12(r2)
   4bed8:	e0bff817 	ldw	r2,-32(fp)
   4bedc:	e0fff717 	ldw	r3,-36(fp)
   4bee0:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   4bee4:	e13ffe17 	ldw	r4,-8(fp)
   4bee8:	0052a440 	call	52a44 <__malloc_unlock>
            return chunk2mem(victim);
   4beec:	e0bff117 	ldw	r2,-60(fp)
   4bef0:	10800204 	addi	r2,r2,8
   4bef4:	00008506 	br	4c10c <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   4bef8:	e0bff117 	ldw	r2,-60(fp)
   4befc:	10800317 	ldw	r2,12(r2)
   4bf00:	e0bff115 	stw	r2,-60(fp)
   4bf04:	e0fff117 	ldw	r3,-60(fp)
   4bf08:	e0bff317 	ldw	r2,-52(fp)
   4bf0c:	18bf9f1e 	bne	r3,r2,4bd8c <_gp+0xfffecbb4>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
   4bf10:	e0bff317 	ldw	r2,-52(fp)
   4bf14:	10800204 	addi	r2,r2,8
   4bf18:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   4bf1c:	e0bff217 	ldw	r2,-56(fp)
   4bf20:	10800044 	addi	r2,r2,1
   4bf24:	e0bff215 	stw	r2,-56(fp)
   4bf28:	e0bff217 	ldw	r2,-56(fp)
   4bf2c:	108000cc 	andi	r2,r2,3
   4bf30:	103f921e 	bne	r2,zero,4bd7c <_gp+0xfffecba4>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   4bf34:	e0bff617 	ldw	r2,-40(fp)
   4bf38:	108000cc 	andi	r2,r2,3
   4bf3c:	10000a1e 	bne	r2,zero,4bf68 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
   4bf40:	00800174 	movhi	r2,5
   4bf44:	1096f204 	addi	r2,r2,23496
   4bf48:	00c00174 	movhi	r3,5
   4bf4c:	18d6f204 	addi	r3,r3,23496
   4bf50:	19000117 	ldw	r4,4(r3)
   4bf54:	e0fff517 	ldw	r3,-44(fp)
   4bf58:	00c6303a 	nor	r3,zero,r3
   4bf5c:	20c6703a 	and	r3,r4,r3
   4bf60:	10c00115 	stw	r3,4(r2)
          break;
   4bf64:	00000a06 	br	4bf90 <_malloc_r+0x9ec>
        }
        --startidx;
   4bf68:	e0bff617 	ldw	r2,-40(fp)
   4bf6c:	10bfffc4 	addi	r2,r2,-1
   4bf70:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
   4bf74:	e0bff917 	ldw	r2,-28(fp)
   4bf78:	10bffe04 	addi	r2,r2,-8
   4bf7c:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
   4bf80:	e0bff917 	ldw	r2,-28(fp)
   4bf84:	10c00217 	ldw	r3,8(r2)
   4bf88:	e0bff917 	ldw	r2,-28(fp)
   4bf8c:	18bfe926 	beq	r3,r2,4bf34 <_gp+0xfffecd5c>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
   4bf90:	e0bff517 	ldw	r2,-44(fp)
   4bf94:	1085883a 	add	r2,r2,r2
   4bf98:	e0bff515 	stw	r2,-44(fp)
   4bf9c:	00800174 	movhi	r2,5
   4bfa0:	1096f204 	addi	r2,r2,23496
   4bfa4:	10c00117 	ldw	r3,4(r2)
   4bfa8:	e0bff517 	ldw	r2,-44(fp)
   4bfac:	18801036 	bltu	r3,r2,4bff0 <_malloc_r+0xa4c>
   4bfb0:	e0bff517 	ldw	r2,-44(fp)
   4bfb4:	10000e26 	beq	r2,zero,4bff0 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
   4bfb8:	00000606 	br	4bfd4 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
   4bfbc:	e0bff217 	ldw	r2,-56(fp)
   4bfc0:	10800104 	addi	r2,r2,4
   4bfc4:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
   4bfc8:	e0bff517 	ldw	r2,-44(fp)
   4bfcc:	1085883a 	add	r2,r2,r2
   4bfd0:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   4bfd4:	00800174 	movhi	r2,5
   4bfd8:	1096f204 	addi	r2,r2,23496
   4bfdc:	10c00117 	ldw	r3,4(r2)
   4bfe0:	e0bff517 	ldw	r2,-44(fp)
   4bfe4:	1884703a 	and	r2,r3,r2
   4bfe8:	103ff426 	beq	r2,zero,4bfbc <_gp+0xfffecde4>
          block <<= 1;
        }
      }
      else
        break;
    }
   4bfec:	003f5506 	br	4bd44 <_gp+0xfffecb6c>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   4bff0:	00800174 	movhi	r2,5
   4bff4:	1096f204 	addi	r2,r2,23496
   4bff8:	10800217 	ldw	r2,8(r2)
   4bffc:	10c00117 	ldw	r3,4(r2)
   4c000:	00bfff04 	movi	r2,-4
   4c004:	1886703a 	and	r3,r3,r2
   4c008:	e0bffa17 	ldw	r2,-24(fp)
   4c00c:	1885c83a 	sub	r2,r3,r2
   4c010:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   4c014:	00800174 	movhi	r2,5
   4c018:	1096f204 	addi	r2,r2,23496
   4c01c:	10800217 	ldw	r2,8(r2)
   4c020:	10c00117 	ldw	r3,4(r2)
   4c024:	00bfff04 	movi	r2,-4
   4c028:	1886703a 	and	r3,r3,r2
   4c02c:	e0bffa17 	ldw	r2,-24(fp)
   4c030:	18800336 	bltu	r3,r2,4c040 <_malloc_r+0xa9c>
   4c034:	e0bff417 	ldw	r2,-48(fp)
   4c038:	10800408 	cmpgei	r2,r2,16
   4c03c:	10001b1e 	bne	r2,zero,4c0ac <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
   4c040:	e17ffa17 	ldw	r5,-24(fp)
   4c044:	e13ffe17 	ldw	r4,-8(fp)
   4c048:	004b1f00 	call	4b1f0 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
   4c04c:	00800174 	movhi	r2,5
   4c050:	1096f204 	addi	r2,r2,23496
   4c054:	10800217 	ldw	r2,8(r2)
   4c058:	10c00117 	ldw	r3,4(r2)
   4c05c:	00bfff04 	movi	r2,-4
   4c060:	1886703a 	and	r3,r3,r2
   4c064:	e0bffa17 	ldw	r2,-24(fp)
   4c068:	1885c83a 	sub	r2,r3,r2
   4c06c:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   4c070:	00800174 	movhi	r2,5
   4c074:	1096f204 	addi	r2,r2,23496
   4c078:	10800217 	ldw	r2,8(r2)
   4c07c:	10c00117 	ldw	r3,4(r2)
   4c080:	00bfff04 	movi	r2,-4
   4c084:	1886703a 	and	r3,r3,r2
   4c088:	e0bffa17 	ldw	r2,-24(fp)
   4c08c:	18800336 	bltu	r3,r2,4c09c <_malloc_r+0xaf8>
   4c090:	e0bff417 	ldw	r2,-48(fp)
   4c094:	10800408 	cmpgei	r2,r2,16
   4c098:	1000041e 	bne	r2,zero,4c0ac <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
   4c09c:	e13ffe17 	ldw	r4,-8(fp)
   4c0a0:	0052a440 	call	52a44 <__malloc_unlock>
      return 0; /* propagate failure */
   4c0a4:	0005883a 	mov	r2,zero
   4c0a8:	00001806 	br	4c10c <_malloc_r+0xb68>
    }
  }

  victim = top;
   4c0ac:	00800174 	movhi	r2,5
   4c0b0:	1096f204 	addi	r2,r2,23496
   4c0b4:	10800217 	ldw	r2,8(r2)
   4c0b8:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
   4c0bc:	e0bffa17 	ldw	r2,-24(fp)
   4c0c0:	10c00054 	ori	r3,r2,1
   4c0c4:	e0bff117 	ldw	r2,-60(fp)
   4c0c8:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
   4c0cc:	00800174 	movhi	r2,5
   4c0d0:	1096f204 	addi	r2,r2,23496
   4c0d4:	e13ff117 	ldw	r4,-60(fp)
   4c0d8:	e0fffa17 	ldw	r3,-24(fp)
   4c0dc:	20c7883a 	add	r3,r4,r3
   4c0e0:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
   4c0e4:	00800174 	movhi	r2,5
   4c0e8:	1096f204 	addi	r2,r2,23496
   4c0ec:	10800217 	ldw	r2,8(r2)
   4c0f0:	e0fff417 	ldw	r3,-48(fp)
   4c0f4:	18c00054 	ori	r3,r3,1
   4c0f8:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   4c0fc:	e13ffe17 	ldw	r4,-8(fp)
   4c100:	0052a440 	call	52a44 <__malloc_unlock>
  return chunk2mem(victim);
   4c104:	e0bff117 	ldw	r2,-60(fp)
   4c108:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   4c10c:	e037883a 	mov	sp,fp
   4c110:	dfc00117 	ldw	ra,4(sp)
   4c114:	df000017 	ldw	fp,0(sp)
   4c118:	dec00204 	addi	sp,sp,8
   4c11c:	f800283a 	ret

0004c120 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
   4c120:	defff704 	addi	sp,sp,-36
   4c124:	df000815 	stw	fp,32(sp)
   4c128:	df000804 	addi	fp,sp,32
   4c12c:	e13ffd15 	stw	r4,-12(fp)
   4c130:	e17ffe15 	stw	r5,-8(fp)
   4c134:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
   4c138:	e0bffd17 	ldw	r2,-12(fp)
   4c13c:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
   4c140:	e0bffe17 	ldw	r2,-8(fp)
   4c144:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   4c148:	00001006 	br	4c18c <memchr+0x6c>
    {
      if (!length--)
   4c14c:	e0bfff17 	ldw	r2,-4(fp)
   4c150:	10ffffc4 	addi	r3,r2,-1
   4c154:	e0ffff15 	stw	r3,-4(fp)
   4c158:	1000021e 	bne	r2,zero,4c164 <memchr+0x44>
        return NULL;
   4c15c:	0005883a 	mov	r2,zero
   4c160:	00005a06 	br	4c2cc <memchr+0x1ac>
      if (*src == d)
   4c164:	e0bff817 	ldw	r2,-32(fp)
   4c168:	10800003 	ldbu	r2,0(r2)
   4c16c:	10c03fcc 	andi	r3,r2,255
   4c170:	e0bffc03 	ldbu	r2,-16(fp)
   4c174:	1880021e 	bne	r3,r2,4c180 <memchr+0x60>
        return (void *) src;
   4c178:	e0bff817 	ldw	r2,-32(fp)
   4c17c:	00005306 	br	4c2cc <memchr+0x1ac>
      src++;
   4c180:	e0bff817 	ldw	r2,-32(fp)
   4c184:	10800044 	addi	r2,r2,1
   4c188:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   4c18c:	e0bff817 	ldw	r2,-32(fp)
   4c190:	108000cc 	andi	r2,r2,3
   4c194:	103fed1e 	bne	r2,zero,4c14c <_gp+0xfffecf74>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
   4c198:	e0bfff17 	ldw	r2,-4(fp)
   4c19c:	10800130 	cmpltui	r2,r2,4
   4c1a0:	1000451e 	bne	r2,zero,4c2b8 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
   4c1a4:	e0bff817 	ldw	r2,-32(fp)
   4c1a8:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
   4c1ac:	e0bffc03 	ldbu	r2,-16(fp)
   4c1b0:	1006923a 	slli	r3,r2,8
   4c1b4:	e0bffc03 	ldbu	r2,-16(fp)
   4c1b8:	1884b03a 	or	r2,r3,r2
   4c1bc:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
   4c1c0:	e0bffa17 	ldw	r2,-24(fp)
   4c1c4:	1004943a 	slli	r2,r2,16
   4c1c8:	e0fffa17 	ldw	r3,-24(fp)
   4c1cc:	1884b03a 	or	r2,r3,r2
   4c1d0:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   4c1d4:	00800804 	movi	r2,32
   4c1d8:	e0bffb15 	stw	r2,-20(fp)
   4c1dc:	00000906 	br	4c204 <memchr+0xe4>
        mask = (mask << i) | mask;
   4c1e0:	e0fffa17 	ldw	r3,-24(fp)
   4c1e4:	e0bffb17 	ldw	r2,-20(fp)
   4c1e8:	1884983a 	sll	r2,r3,r2
   4c1ec:	e0fffa17 	ldw	r3,-24(fp)
   4c1f0:	1884b03a 	or	r2,r3,r2
   4c1f4:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   4c1f8:	e0bffb17 	ldw	r2,-20(fp)
   4c1fc:	1085883a 	add	r2,r2,r2
   4c200:	e0bffb15 	stw	r2,-20(fp)
   4c204:	e0bffb17 	ldw	r2,-20(fp)
   4c208:	10800830 	cmpltui	r2,r2,32
   4c20c:	103ff41e 	bne	r2,zero,4c1e0 <_gp+0xfffed008>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   4c210:	00001706 	br	4c270 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
   4c214:	e0bff917 	ldw	r2,-28(fp)
   4c218:	10c00017 	ldw	r3,0(r2)
   4c21c:	e0bffa17 	ldw	r2,-24(fp)
   4c220:	1886f03a 	xor	r3,r3,r2
   4c224:	00bfbff4 	movhi	r2,65279
   4c228:	10bfbfc4 	addi	r2,r2,-257
   4c22c:	1887883a 	add	r3,r3,r2
   4c230:	e0bff917 	ldw	r2,-28(fp)
   4c234:	11000017 	ldw	r4,0(r2)
   4c238:	e0bffa17 	ldw	r2,-24(fp)
   4c23c:	2084f03a 	xor	r2,r4,r2
   4c240:	0084303a 	nor	r2,zero,r2
   4c244:	1886703a 	and	r3,r3,r2
   4c248:	00a02074 	movhi	r2,32897
   4c24c:	10a02004 	addi	r2,r2,-32640
   4c250:	1884703a 	and	r2,r3,r2
   4c254:	10000a1e 	bne	r2,zero,4c280 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
   4c258:	e0bfff17 	ldw	r2,-4(fp)
   4c25c:	10bfff04 	addi	r2,r2,-4
   4c260:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
   4c264:	e0bff917 	ldw	r2,-28(fp)
   4c268:	10800104 	addi	r2,r2,4
   4c26c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   4c270:	e0bfff17 	ldw	r2,-4(fp)
   4c274:	10800128 	cmpgeui	r2,r2,4
   4c278:	103fe61e 	bne	r2,zero,4c214 <_gp+0xfffed03c>
   4c27c:	00000106 	br	4c284 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
   4c280:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
   4c284:	e0bff917 	ldw	r2,-28(fp)
   4c288:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   4c28c:	00000a06 	br	4c2b8 <memchr+0x198>
    {
      if (*src == d)
   4c290:	e0bff817 	ldw	r2,-32(fp)
   4c294:	10800003 	ldbu	r2,0(r2)
   4c298:	10c03fcc 	andi	r3,r2,255
   4c29c:	e0bffc03 	ldbu	r2,-16(fp)
   4c2a0:	1880021e 	bne	r3,r2,4c2ac <memchr+0x18c>
        return (void *) src;
   4c2a4:	e0bff817 	ldw	r2,-32(fp)
   4c2a8:	00000806 	br	4c2cc <memchr+0x1ac>
      src++;
   4c2ac:	e0bff817 	ldw	r2,-32(fp)
   4c2b0:	10800044 	addi	r2,r2,1
   4c2b4:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   4c2b8:	e0bfff17 	ldw	r2,-4(fp)
   4c2bc:	10ffffc4 	addi	r3,r2,-1
   4c2c0:	e0ffff15 	stw	r3,-4(fp)
   4c2c4:	103ff21e 	bne	r2,zero,4c290 <_gp+0xfffed0b8>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
   4c2c8:	0005883a 	mov	r2,zero
}
   4c2cc:	e037883a 	mov	sp,fp
   4c2d0:	df000017 	ldw	fp,0(sp)
   4c2d4:	dec00104 	addi	sp,sp,4
   4c2d8:	f800283a 	ret

0004c2dc <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
   4c2dc:	defff804 	addi	sp,sp,-32
   4c2e0:	df000715 	stw	fp,28(sp)
   4c2e4:	df000704 	addi	fp,sp,28
   4c2e8:	e13ffd15 	stw	r4,-12(fp)
   4c2ec:	e17ffe15 	stw	r5,-8(fp)
   4c2f0:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
   4c2f4:	e0bffd17 	ldw	r2,-12(fp)
   4c2f8:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
   4c2fc:	e0bffe17 	ldw	r2,-8(fp)
   4c300:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
   4c304:	e0bfff17 	ldw	r2,-4(fp)
   4c308:	10800430 	cmpltui	r2,r2,16
   4c30c:	10004c1e 	bne	r2,zero,4c440 <memcpy+0x164>
   4c310:	e0fffa17 	ldw	r3,-24(fp)
   4c314:	e0bff917 	ldw	r2,-28(fp)
   4c318:	1884b03a 	or	r2,r3,r2
   4c31c:	108000cc 	andi	r2,r2,3
   4c320:	1000471e 	bne	r2,zero,4c440 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
   4c324:	e0bff917 	ldw	r2,-28(fp)
   4c328:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
   4c32c:	e0bffa17 	ldw	r2,-24(fp)
   4c330:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   4c334:	00002306 	br	4c3c4 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
   4c338:	e0bffb17 	ldw	r2,-20(fp)
   4c33c:	10c00104 	addi	r3,r2,4
   4c340:	e0fffb15 	stw	r3,-20(fp)
   4c344:	e0fffc17 	ldw	r3,-16(fp)
   4c348:	19000104 	addi	r4,r3,4
   4c34c:	e13ffc15 	stw	r4,-16(fp)
   4c350:	18c00017 	ldw	r3,0(r3)
   4c354:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   4c358:	e0bffb17 	ldw	r2,-20(fp)
   4c35c:	10c00104 	addi	r3,r2,4
   4c360:	e0fffb15 	stw	r3,-20(fp)
   4c364:	e0fffc17 	ldw	r3,-16(fp)
   4c368:	19000104 	addi	r4,r3,4
   4c36c:	e13ffc15 	stw	r4,-16(fp)
   4c370:	18c00017 	ldw	r3,0(r3)
   4c374:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   4c378:	e0bffb17 	ldw	r2,-20(fp)
   4c37c:	10c00104 	addi	r3,r2,4
   4c380:	e0fffb15 	stw	r3,-20(fp)
   4c384:	e0fffc17 	ldw	r3,-16(fp)
   4c388:	19000104 	addi	r4,r3,4
   4c38c:	e13ffc15 	stw	r4,-16(fp)
   4c390:	18c00017 	ldw	r3,0(r3)
   4c394:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   4c398:	e0bffb17 	ldw	r2,-20(fp)
   4c39c:	10c00104 	addi	r3,r2,4
   4c3a0:	e0fffb15 	stw	r3,-20(fp)
   4c3a4:	e0fffc17 	ldw	r3,-16(fp)
   4c3a8:	19000104 	addi	r4,r3,4
   4c3ac:	e13ffc15 	stw	r4,-16(fp)
   4c3b0:	18c00017 	ldw	r3,0(r3)
   4c3b4:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
   4c3b8:	e0bfff17 	ldw	r2,-4(fp)
   4c3bc:	10bffc04 	addi	r2,r2,-16
   4c3c0:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   4c3c4:	e0bfff17 	ldw	r2,-4(fp)
   4c3c8:	10800428 	cmpgeui	r2,r2,16
   4c3cc:	103fda1e 	bne	r2,zero,4c338 <_gp+0xfffed160>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   4c3d0:	00000b06 	br	4c400 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
   4c3d4:	e0bffb17 	ldw	r2,-20(fp)
   4c3d8:	10c00104 	addi	r3,r2,4
   4c3dc:	e0fffb15 	stw	r3,-20(fp)
   4c3e0:	e0fffc17 	ldw	r3,-16(fp)
   4c3e4:	19000104 	addi	r4,r3,4
   4c3e8:	e13ffc15 	stw	r4,-16(fp)
   4c3ec:	18c00017 	ldw	r3,0(r3)
   4c3f0:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
   4c3f4:	e0bfff17 	ldw	r2,-4(fp)
   4c3f8:	10bfff04 	addi	r2,r2,-4
   4c3fc:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   4c400:	e0bfff17 	ldw	r2,-4(fp)
   4c404:	10800128 	cmpgeui	r2,r2,4
   4c408:	103ff21e 	bne	r2,zero,4c3d4 <_gp+0xfffed1fc>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
   4c40c:	e0bffb17 	ldw	r2,-20(fp)
   4c410:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
   4c414:	e0bffc17 	ldw	r2,-16(fp)
   4c418:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
   4c41c:	00000806 	br	4c440 <memcpy+0x164>
    *dst++ = *src++;
   4c420:	e0bff917 	ldw	r2,-28(fp)
   4c424:	10c00044 	addi	r3,r2,1
   4c428:	e0fff915 	stw	r3,-28(fp)
   4c42c:	e0fffa17 	ldw	r3,-24(fp)
   4c430:	19000044 	addi	r4,r3,1
   4c434:	e13ffa15 	stw	r4,-24(fp)
   4c438:	18c00003 	ldbu	r3,0(r3)
   4c43c:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
   4c440:	e0bfff17 	ldw	r2,-4(fp)
   4c444:	10ffffc4 	addi	r3,r2,-1
   4c448:	e0ffff15 	stw	r3,-4(fp)
   4c44c:	103ff41e 	bne	r2,zero,4c420 <_gp+0xfffed248>
    *dst++ = *src++;

  return dst0;
   4c450:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   4c454:	e037883a 	mov	sp,fp
   4c458:	df000017 	ldw	fp,0(sp)
   4c45c:	dec00104 	addi	sp,sp,4
   4c460:	f800283a 	ret

0004c464 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
   4c464:	defff804 	addi	sp,sp,-32
   4c468:	df000715 	stw	fp,28(sp)
   4c46c:	df000704 	addi	fp,sp,28
   4c470:	e13ffd15 	stw	r4,-12(fp)
   4c474:	e17ffe15 	stw	r5,-8(fp)
   4c478:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
   4c47c:	e0bffd17 	ldw	r2,-12(fp)
   4c480:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
   4c484:	e0bffe17 	ldw	r2,-8(fp)
   4c488:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   4c48c:	e0fffa17 	ldw	r3,-24(fp)
   4c490:	e0bff917 	ldw	r2,-28(fp)
   4c494:	18801d2e 	bgeu	r3,r2,4c50c <memmove+0xa8>
   4c498:	e0fffa17 	ldw	r3,-24(fp)
   4c49c:	e0bfff17 	ldw	r2,-4(fp)
   4c4a0:	1885883a 	add	r2,r3,r2
   4c4a4:	e0fff917 	ldw	r3,-28(fp)
   4c4a8:	1880182e 	bgeu	r3,r2,4c50c <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
   4c4ac:	e0fffa17 	ldw	r3,-24(fp)
   4c4b0:	e0bfff17 	ldw	r2,-4(fp)
   4c4b4:	1885883a 	add	r2,r3,r2
   4c4b8:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
   4c4bc:	e0fff917 	ldw	r3,-28(fp)
   4c4c0:	e0bfff17 	ldw	r2,-4(fp)
   4c4c4:	1885883a 	add	r2,r3,r2
   4c4c8:	e0bff915 	stw	r2,-28(fp)
      while (length--)
   4c4cc:	00000a06 	br	4c4f8 <memmove+0x94>
	{
	  *--dst = *--src;
   4c4d0:	e0bff917 	ldw	r2,-28(fp)
   4c4d4:	10bfffc4 	addi	r2,r2,-1
   4c4d8:	e0bff915 	stw	r2,-28(fp)
   4c4dc:	e0bffa17 	ldw	r2,-24(fp)
   4c4e0:	10bfffc4 	addi	r2,r2,-1
   4c4e4:	e0bffa15 	stw	r2,-24(fp)
   4c4e8:	e0bffa17 	ldw	r2,-24(fp)
   4c4ec:	10c00003 	ldbu	r3,0(r2)
   4c4f0:	e0bff917 	ldw	r2,-28(fp)
   4c4f4:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
   4c4f8:	e0bfff17 	ldw	r2,-4(fp)
   4c4fc:	10ffffc4 	addi	r3,r2,-1
   4c500:	e0ffff15 	stw	r3,-4(fp)
   4c504:	103ff21e 	bne	r2,zero,4c4d0 <_gp+0xfffed2f8>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   4c508:	00005306 	br	4c658 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
   4c50c:	e0bfff17 	ldw	r2,-4(fp)
   4c510:	10800430 	cmpltui	r2,r2,16
   4c514:	10004c1e 	bne	r2,zero,4c648 <memmove+0x1e4>
   4c518:	e0fffa17 	ldw	r3,-24(fp)
   4c51c:	e0bff917 	ldw	r2,-28(fp)
   4c520:	1884b03a 	or	r2,r3,r2
   4c524:	108000cc 	andi	r2,r2,3
   4c528:	1000471e 	bne	r2,zero,4c648 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
   4c52c:	e0bff917 	ldw	r2,-28(fp)
   4c530:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
   4c534:	e0bffa17 	ldw	r2,-24(fp)
   4c538:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   4c53c:	00002306 	br	4c5cc <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
   4c540:	e0bffb17 	ldw	r2,-20(fp)
   4c544:	10c00104 	addi	r3,r2,4
   4c548:	e0fffb15 	stw	r3,-20(fp)
   4c54c:	e0fffc17 	ldw	r3,-16(fp)
   4c550:	19000104 	addi	r4,r3,4
   4c554:	e13ffc15 	stw	r4,-16(fp)
   4c558:	18c00017 	ldw	r3,0(r3)
   4c55c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4c560:	e0bffb17 	ldw	r2,-20(fp)
   4c564:	10c00104 	addi	r3,r2,4
   4c568:	e0fffb15 	stw	r3,-20(fp)
   4c56c:	e0fffc17 	ldw	r3,-16(fp)
   4c570:	19000104 	addi	r4,r3,4
   4c574:	e13ffc15 	stw	r4,-16(fp)
   4c578:	18c00017 	ldw	r3,0(r3)
   4c57c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4c580:	e0bffb17 	ldw	r2,-20(fp)
   4c584:	10c00104 	addi	r3,r2,4
   4c588:	e0fffb15 	stw	r3,-20(fp)
   4c58c:	e0fffc17 	ldw	r3,-16(fp)
   4c590:	19000104 	addi	r4,r3,4
   4c594:	e13ffc15 	stw	r4,-16(fp)
   4c598:	18c00017 	ldw	r3,0(r3)
   4c59c:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   4c5a0:	e0bffb17 	ldw	r2,-20(fp)
   4c5a4:	10c00104 	addi	r3,r2,4
   4c5a8:	e0fffb15 	stw	r3,-20(fp)
   4c5ac:	e0fffc17 	ldw	r3,-16(fp)
   4c5b0:	19000104 	addi	r4,r3,4
   4c5b4:	e13ffc15 	stw	r4,-16(fp)
   4c5b8:	18c00017 	ldw	r3,0(r3)
   4c5bc:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
   4c5c0:	e0bfff17 	ldw	r2,-4(fp)
   4c5c4:	10bffc04 	addi	r2,r2,-16
   4c5c8:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   4c5cc:	e0bfff17 	ldw	r2,-4(fp)
   4c5d0:	10800428 	cmpgeui	r2,r2,16
   4c5d4:	103fda1e 	bne	r2,zero,4c540 <_gp+0xfffed368>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   4c5d8:	00000b06 	br	4c608 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
   4c5dc:	e0bffb17 	ldw	r2,-20(fp)
   4c5e0:	10c00104 	addi	r3,r2,4
   4c5e4:	e0fffb15 	stw	r3,-20(fp)
   4c5e8:	e0fffc17 	ldw	r3,-16(fp)
   4c5ec:	19000104 	addi	r4,r3,4
   4c5f0:	e13ffc15 	stw	r4,-16(fp)
   4c5f4:	18c00017 	ldw	r3,0(r3)
   4c5f8:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
   4c5fc:	e0bfff17 	ldw	r2,-4(fp)
   4c600:	10bfff04 	addi	r2,r2,-4
   4c604:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   4c608:	e0bfff17 	ldw	r2,-4(fp)
   4c60c:	10800128 	cmpgeui	r2,r2,4
   4c610:	103ff21e 	bne	r2,zero,4c5dc <_gp+0xfffed404>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
   4c614:	e0bffb17 	ldw	r2,-20(fp)
   4c618:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
   4c61c:	e0bffc17 	ldw	r2,-16(fp)
   4c620:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
   4c624:	00000806 	br	4c648 <memmove+0x1e4>
        {
          *dst++ = *src++;
   4c628:	e0bff917 	ldw	r2,-28(fp)
   4c62c:	10c00044 	addi	r3,r2,1
   4c630:	e0fff915 	stw	r3,-28(fp)
   4c634:	e0fffa17 	ldw	r3,-24(fp)
   4c638:	19000044 	addi	r4,r3,1
   4c63c:	e13ffa15 	stw	r4,-24(fp)
   4c640:	18c00003 	ldbu	r3,0(r3)
   4c644:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   4c648:	e0bfff17 	ldw	r2,-4(fp)
   4c64c:	10ffffc4 	addi	r3,r2,-1
   4c650:	e0ffff15 	stw	r3,-4(fp)
   4c654:	103ff41e 	bne	r2,zero,4c628 <_gp+0xfffed450>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
   4c658:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   4c65c:	e037883a 	mov	sp,fp
   4c660:	df000017 	ldw	fp,0(sp)
   4c664:	dec00104 	addi	sp,sp,4
   4c668:	f800283a 	ret

0004c66c <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
   4c66c:	defff704 	addi	sp,sp,-36
   4c670:	df000815 	stw	fp,32(sp)
   4c674:	df000804 	addi	fp,sp,32
   4c678:	e13ffd15 	stw	r4,-12(fp)
   4c67c:	e17ffe15 	stw	r5,-8(fp)
   4c680:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
   4c684:	e0bffd17 	ldw	r2,-12(fp)
   4c688:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
   4c68c:	e0bffe17 	ldw	r2,-8(fp)
   4c690:	10803fcc 	andi	r2,r2,255
   4c694:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
   4c698:	00000c06 	br	4c6cc <memset+0x60>
    {
      if (n--)
   4c69c:	e0bfff17 	ldw	r2,-4(fp)
   4c6a0:	10ffffc4 	addi	r3,r2,-1
   4c6a4:	e0ffff15 	stw	r3,-4(fp)
   4c6a8:	10000626 	beq	r2,zero,4c6c4 <memset+0x58>
        *s++ = (char) c;
   4c6ac:	e0bff817 	ldw	r2,-32(fp)
   4c6b0:	10c00044 	addi	r3,r2,1
   4c6b4:	e0fff815 	stw	r3,-32(fp)
   4c6b8:	e0fffe17 	ldw	r3,-8(fp)
   4c6bc:	10c00005 	stb	r3,0(r2)
   4c6c0:	00000206 	br	4c6cc <memset+0x60>
      else
        return m;
   4c6c4:	e0bffd17 	ldw	r2,-12(fp)
   4c6c8:	00005506 	br	4c820 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
   4c6cc:	e0bff817 	ldw	r2,-32(fp)
   4c6d0:	108000cc 	andi	r2,r2,3
   4c6d4:	103ff11e 	bne	r2,zero,4c69c <_gp+0xfffed4c4>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
   4c6d8:	e0bfff17 	ldw	r2,-4(fp)
   4c6dc:	10800130 	cmpltui	r2,r2,4
   4c6e0:	10004a1e 	bne	r2,zero,4c80c <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
   4c6e4:	e0bff817 	ldw	r2,-32(fp)
   4c6e8:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
   4c6ec:	e0bffc17 	ldw	r2,-16(fp)
   4c6f0:	1006923a 	slli	r3,r2,8
   4c6f4:	e0bffc17 	ldw	r2,-16(fp)
   4c6f8:	1884b03a 	or	r2,r3,r2
   4c6fc:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
   4c700:	e0bffa17 	ldw	r2,-24(fp)
   4c704:	1004943a 	slli	r2,r2,16
   4c708:	e0fffa17 	ldw	r3,-24(fp)
   4c70c:	1884b03a 	or	r2,r3,r2
   4c710:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   4c714:	00800804 	movi	r2,32
   4c718:	e0bff915 	stw	r2,-28(fp)
   4c71c:	00000906 	br	4c744 <memset+0xd8>
        buffer = (buffer << i) | buffer;
   4c720:	e0fffa17 	ldw	r3,-24(fp)
   4c724:	e0bff917 	ldw	r2,-28(fp)
   4c728:	1884983a 	sll	r2,r3,r2
   4c72c:	e0fffa17 	ldw	r3,-24(fp)
   4c730:	1884b03a 	or	r2,r3,r2
   4c734:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   4c738:	e0bff917 	ldw	r2,-28(fp)
   4c73c:	1085883a 	add	r2,r2,r2
   4c740:	e0bff915 	stw	r2,-28(fp)
   4c744:	e0bff917 	ldw	r2,-28(fp)
   4c748:	10800830 	cmpltui	r2,r2,32
   4c74c:	103ff41e 	bne	r2,zero,4c720 <_gp+0xfffed548>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   4c750:	00001706 	br	4c7b0 <memset+0x144>
        {
          *aligned_addr++ = buffer;
   4c754:	e0bffb17 	ldw	r2,-20(fp)
   4c758:	10c00104 	addi	r3,r2,4
   4c75c:	e0fffb15 	stw	r3,-20(fp)
   4c760:	e0fffa17 	ldw	r3,-24(fp)
   4c764:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   4c768:	e0bffb17 	ldw	r2,-20(fp)
   4c76c:	10c00104 	addi	r3,r2,4
   4c770:	e0fffb15 	stw	r3,-20(fp)
   4c774:	e0fffa17 	ldw	r3,-24(fp)
   4c778:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   4c77c:	e0bffb17 	ldw	r2,-20(fp)
   4c780:	10c00104 	addi	r3,r2,4
   4c784:	e0fffb15 	stw	r3,-20(fp)
   4c788:	e0fffa17 	ldw	r3,-24(fp)
   4c78c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   4c790:	e0bffb17 	ldw	r2,-20(fp)
   4c794:	10c00104 	addi	r3,r2,4
   4c798:	e0fffb15 	stw	r3,-20(fp)
   4c79c:	e0fffa17 	ldw	r3,-24(fp)
   4c7a0:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
   4c7a4:	e0bfff17 	ldw	r2,-4(fp)
   4c7a8:	10bffc04 	addi	r2,r2,-16
   4c7ac:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   4c7b0:	e0bfff17 	ldw	r2,-4(fp)
   4c7b4:	10800428 	cmpgeui	r2,r2,16
   4c7b8:	103fe61e 	bne	r2,zero,4c754 <_gp+0xfffed57c>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   4c7bc:	00000806 	br	4c7e0 <memset+0x174>
        {
          *aligned_addr++ = buffer;
   4c7c0:	e0bffb17 	ldw	r2,-20(fp)
   4c7c4:	10c00104 	addi	r3,r2,4
   4c7c8:	e0fffb15 	stw	r3,-20(fp)
   4c7cc:	e0fffa17 	ldw	r3,-24(fp)
   4c7d0:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
   4c7d4:	e0bfff17 	ldw	r2,-4(fp)
   4c7d8:	10bfff04 	addi	r2,r2,-4
   4c7dc:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   4c7e0:	e0bfff17 	ldw	r2,-4(fp)
   4c7e4:	10800128 	cmpgeui	r2,r2,4
   4c7e8:	103ff51e 	bne	r2,zero,4c7c0 <_gp+0xfffed5e8>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
   4c7ec:	e0bffb17 	ldw	r2,-20(fp)
   4c7f0:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   4c7f4:	00000506 	br	4c80c <memset+0x1a0>
    *s++ = (char) c;
   4c7f8:	e0bff817 	ldw	r2,-32(fp)
   4c7fc:	10c00044 	addi	r3,r2,1
   4c800:	e0fff815 	stw	r3,-32(fp)
   4c804:	e0fffe17 	ldw	r3,-8(fp)
   4c808:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   4c80c:	e0bfff17 	ldw	r2,-4(fp)
   4c810:	10ffffc4 	addi	r3,r2,-1
   4c814:	e0ffff15 	stw	r3,-4(fp)
   4c818:	103ff71e 	bne	r2,zero,4c7f8 <_gp+0xfffed620>
    *s++ = (char) c;

  return m;
   4c81c:	e0bffd17 	ldw	r2,-12(fp)
}
   4c820:	e037883a 	mov	sp,fp
   4c824:	df000017 	ldw	fp,0(sp)
   4c828:	dec00104 	addi	sp,sp,4
   4c82c:	f800283a 	ret

0004c830 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
   4c830:	defffa04 	addi	sp,sp,-24
   4c834:	dfc00515 	stw	ra,20(sp)
   4c838:	df000415 	stw	fp,16(sp)
   4c83c:	df000404 	addi	fp,sp,16
   4c840:	e13ffe15 	stw	r4,-8(fp)
   4c844:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
   4c848:	e0bffe17 	ldw	r2,-8(fp)
   4c84c:	10801317 	ldw	r2,76(r2)
   4c850:	10000c1e 	bne	r2,zero,4c884 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
   4c854:	01800844 	movi	r6,33
   4c858:	01400104 	movi	r5,4
   4c85c:	e13ffe17 	ldw	r4,-8(fp)
   4c860:	0050a100 	call	50a10 <_calloc_r>
   4c864:	1007883a 	mov	r3,r2
   4c868:	e0bffe17 	ldw	r2,-8(fp)
   4c86c:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
   4c870:	e0bffe17 	ldw	r2,-8(fp)
   4c874:	10801317 	ldw	r2,76(r2)
   4c878:	1000021e 	bne	r2,zero,4c884 <_Balloc+0x54>
	{
	  return NULL;
   4c87c:	0005883a 	mov	r2,zero
   4c880:	00003206 	br	4c94c <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
   4c884:	e0bffe17 	ldw	r2,-8(fp)
   4c888:	10c01317 	ldw	r3,76(r2)
   4c88c:	e0bfff17 	ldw	r2,-4(fp)
   4c890:	1085883a 	add	r2,r2,r2
   4c894:	1085883a 	add	r2,r2,r2
   4c898:	1885883a 	add	r2,r3,r2
   4c89c:	10800017 	ldw	r2,0(r2)
   4c8a0:	e0bffc15 	stw	r2,-16(fp)
   4c8a4:	e0bffc17 	ldw	r2,-16(fp)
   4c8a8:	10000a26 	beq	r2,zero,4c8d4 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
   4c8ac:	e0bffe17 	ldw	r2,-8(fp)
   4c8b0:	10c01317 	ldw	r3,76(r2)
   4c8b4:	e0bfff17 	ldw	r2,-4(fp)
   4c8b8:	1085883a 	add	r2,r2,r2
   4c8bc:	1085883a 	add	r2,r2,r2
   4c8c0:	1885883a 	add	r2,r3,r2
   4c8c4:	e0fffc17 	ldw	r3,-16(fp)
   4c8c8:	18c00017 	ldw	r3,0(r3)
   4c8cc:	10c00015 	stw	r3,0(r2)
   4c8d0:	00001706 	br	4c930 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
   4c8d4:	00c00044 	movi	r3,1
   4c8d8:	e0bfff17 	ldw	r2,-4(fp)
   4c8dc:	1884983a 	sll	r2,r3,r2
   4c8e0:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
   4c8e4:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
   4c8e8:	10800144 	addi	r2,r2,5
   4c8ec:	1085883a 	add	r2,r2,r2
   4c8f0:	1085883a 	add	r2,r2,r2
   4c8f4:	100d883a 	mov	r6,r2
   4c8f8:	01400044 	movi	r5,1
   4c8fc:	e13ffe17 	ldw	r4,-8(fp)
   4c900:	0050a100 	call	50a10 <_calloc_r>
   4c904:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
   4c908:	e0bffc17 	ldw	r2,-16(fp)
   4c90c:	1000021e 	bne	r2,zero,4c918 <_Balloc+0xe8>
   4c910:	0005883a 	mov	r2,zero
   4c914:	00000d06 	br	4c94c <_Balloc+0x11c>
      rv->_k = k;
   4c918:	e0bffc17 	ldw	r2,-16(fp)
   4c91c:	e0ffff17 	ldw	r3,-4(fp)
   4c920:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
   4c924:	e0bffc17 	ldw	r2,-16(fp)
   4c928:	e0fffd17 	ldw	r3,-12(fp)
   4c92c:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
   4c930:	e0bffc17 	ldw	r2,-16(fp)
   4c934:	10000415 	stw	zero,16(r2)
   4c938:	e0bffc17 	ldw	r2,-16(fp)
   4c93c:	10c00417 	ldw	r3,16(r2)
   4c940:	e0bffc17 	ldw	r2,-16(fp)
   4c944:	10c00315 	stw	r3,12(r2)
  return rv;
   4c948:	e0bffc17 	ldw	r2,-16(fp)
}
   4c94c:	e037883a 	mov	sp,fp
   4c950:	dfc00117 	ldw	ra,4(sp)
   4c954:	df000017 	ldw	fp,0(sp)
   4c958:	dec00204 	addi	sp,sp,8
   4c95c:	f800283a 	ret

0004c960 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
   4c960:	defffd04 	addi	sp,sp,-12
   4c964:	df000215 	stw	fp,8(sp)
   4c968:	df000204 	addi	fp,sp,8
   4c96c:	e13ffe15 	stw	r4,-8(fp)
   4c970:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
   4c974:	e0bfff17 	ldw	r2,-4(fp)
   4c978:	10001326 	beq	r2,zero,4c9c8 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
   4c97c:	e0bffe17 	ldw	r2,-8(fp)
   4c980:	10c01317 	ldw	r3,76(r2)
   4c984:	e0bfff17 	ldw	r2,-4(fp)
   4c988:	10800117 	ldw	r2,4(r2)
   4c98c:	1085883a 	add	r2,r2,r2
   4c990:	1085883a 	add	r2,r2,r2
   4c994:	1885883a 	add	r2,r3,r2
   4c998:	10c00017 	ldw	r3,0(r2)
   4c99c:	e0bfff17 	ldw	r2,-4(fp)
   4c9a0:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
   4c9a4:	e0bffe17 	ldw	r2,-8(fp)
   4c9a8:	10c01317 	ldw	r3,76(r2)
   4c9ac:	e0bfff17 	ldw	r2,-4(fp)
   4c9b0:	10800117 	ldw	r2,4(r2)
   4c9b4:	1085883a 	add	r2,r2,r2
   4c9b8:	1085883a 	add	r2,r2,r2
   4c9bc:	1885883a 	add	r2,r3,r2
   4c9c0:	e0ffff17 	ldw	r3,-4(fp)
   4c9c4:	10c00015 	stw	r3,0(r2)
    }
}
   4c9c8:	0001883a 	nop
   4c9cc:	e037883a 	mov	sp,fp
   4c9d0:	df000017 	ldw	fp,0(sp)
   4c9d4:	dec00104 	addi	sp,sp,4
   4c9d8:	f800283a 	ret

0004c9dc <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
   4c9dc:	defff304 	addi	sp,sp,-52
   4c9e0:	dfc00c15 	stw	ra,48(sp)
   4c9e4:	df000b15 	stw	fp,44(sp)
   4c9e8:	df000b04 	addi	fp,sp,44
   4c9ec:	e13ffc15 	stw	r4,-16(fp)
   4c9f0:	e17ffd15 	stw	r5,-12(fp)
   4c9f4:	e1bffe15 	stw	r6,-8(fp)
   4c9f8:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
   4c9fc:	e0bffd17 	ldw	r2,-12(fp)
   4ca00:	10800417 	ldw	r2,16(r2)
   4ca04:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
   4ca08:	e0bffd17 	ldw	r2,-12(fp)
   4ca0c:	10800504 	addi	r2,r2,20
   4ca10:	e0bff615 	stw	r2,-40(fp)
  i = 0;
   4ca14:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
   4ca18:	e0bff617 	ldw	r2,-40(fp)
   4ca1c:	10800017 	ldw	r2,0(r2)
   4ca20:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
   4ca24:	e0bff817 	ldw	r2,-32(fp)
   4ca28:	10bfffcc 	andi	r2,r2,65535
   4ca2c:	e0fffe17 	ldw	r3,-8(fp)
   4ca30:	180b883a 	mov	r5,r3
   4ca34:	1009883a 	mov	r4,r2
   4ca38:	00421cc0 	call	421cc <__mulsi3>
   4ca3c:	1007883a 	mov	r3,r2
   4ca40:	e0bfff17 	ldw	r2,-4(fp)
   4ca44:	1885883a 	add	r2,r3,r2
   4ca48:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
   4ca4c:	e0bff817 	ldw	r2,-32(fp)
   4ca50:	1004d43a 	srli	r2,r2,16
   4ca54:	e0fffe17 	ldw	r3,-8(fp)
   4ca58:	180b883a 	mov	r5,r3
   4ca5c:	1009883a 	mov	r4,r2
   4ca60:	00421cc0 	call	421cc <__mulsi3>
   4ca64:	1007883a 	mov	r3,r2
   4ca68:	e0bff917 	ldw	r2,-28(fp)
   4ca6c:	1004d43a 	srli	r2,r2,16
   4ca70:	1885883a 	add	r2,r3,r2
   4ca74:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
   4ca78:	e0bffa17 	ldw	r2,-24(fp)
   4ca7c:	1004d43a 	srli	r2,r2,16
   4ca80:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
   4ca84:	e0bff617 	ldw	r2,-40(fp)
   4ca88:	10c00104 	addi	r3,r2,4
   4ca8c:	e0fff615 	stw	r3,-40(fp)
   4ca90:	e0fffa17 	ldw	r3,-24(fp)
   4ca94:	1808943a 	slli	r4,r3,16
   4ca98:	e0fff917 	ldw	r3,-28(fp)
   4ca9c:	18ffffcc 	andi	r3,r3,65535
   4caa0:	20c7883a 	add	r3,r4,r3
   4caa4:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
   4caa8:	e0bff517 	ldw	r2,-44(fp)
   4caac:	10800044 	addi	r2,r2,1
   4cab0:	e0bff515 	stw	r2,-44(fp)
   4cab4:	e0fff517 	ldw	r3,-44(fp)
   4cab8:	e0bff717 	ldw	r2,-36(fp)
   4cabc:	18bfd616 	blt	r3,r2,4ca18 <_gp+0xfffed840>
  if (a)
   4cac0:	e0bfff17 	ldw	r2,-4(fp)
   4cac4:	10002a26 	beq	r2,zero,4cb70 <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
   4cac8:	e0bffd17 	ldw	r2,-12(fp)
   4cacc:	10800217 	ldw	r2,8(r2)
   4cad0:	e0fff717 	ldw	r3,-36(fp)
   4cad4:	18801916 	blt	r3,r2,4cb3c <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
   4cad8:	e0bffd17 	ldw	r2,-12(fp)
   4cadc:	10800117 	ldw	r2,4(r2)
   4cae0:	10800044 	addi	r2,r2,1
   4cae4:	100b883a 	mov	r5,r2
   4cae8:	e13ffc17 	ldw	r4,-16(fp)
   4caec:	004c8300 	call	4c830 <_Balloc>
   4caf0:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
   4caf4:	e0bffb17 	ldw	r2,-20(fp)
   4caf8:	10c00304 	addi	r3,r2,12
   4cafc:	e0bffd17 	ldw	r2,-12(fp)
   4cb00:	11000304 	addi	r4,r2,12
   4cb04:	e0bffd17 	ldw	r2,-12(fp)
   4cb08:	10800417 	ldw	r2,16(r2)
   4cb0c:	10800084 	addi	r2,r2,2
   4cb10:	1085883a 	add	r2,r2,r2
   4cb14:	1085883a 	add	r2,r2,r2
   4cb18:	100d883a 	mov	r6,r2
   4cb1c:	200b883a 	mov	r5,r4
   4cb20:	1809883a 	mov	r4,r3
   4cb24:	004c2dc0 	call	4c2dc <memcpy>
	  Bfree (ptr, b);
   4cb28:	e17ffd17 	ldw	r5,-12(fp)
   4cb2c:	e13ffc17 	ldw	r4,-16(fp)
   4cb30:	004c9600 	call	4c960 <_Bfree>
	  b = b1;
   4cb34:	e0bffb17 	ldw	r2,-20(fp)
   4cb38:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
   4cb3c:	e0bff717 	ldw	r2,-36(fp)
   4cb40:	10c00044 	addi	r3,r2,1
   4cb44:	e0fff715 	stw	r3,-36(fp)
   4cb48:	e0ffff17 	ldw	r3,-4(fp)
   4cb4c:	e13ffd17 	ldw	r4,-12(fp)
   4cb50:	10800144 	addi	r2,r2,5
   4cb54:	1085883a 	add	r2,r2,r2
   4cb58:	1085883a 	add	r2,r2,r2
   4cb5c:	2085883a 	add	r2,r4,r2
   4cb60:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
   4cb64:	e0bffd17 	ldw	r2,-12(fp)
   4cb68:	e0fff717 	ldw	r3,-36(fp)
   4cb6c:	10c00415 	stw	r3,16(r2)
    }
  return b;
   4cb70:	e0bffd17 	ldw	r2,-12(fp)
}
   4cb74:	e037883a 	mov	sp,fp
   4cb78:	dfc00117 	ldw	ra,4(sp)
   4cb7c:	df000017 	ldw	fp,0(sp)
   4cb80:	dec00204 	addi	sp,sp,8
   4cb84:	f800283a 	ret

0004cb88 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
   4cb88:	defff504 	addi	sp,sp,-44
   4cb8c:	dfc00a15 	stw	ra,40(sp)
   4cb90:	df000915 	stw	fp,36(sp)
   4cb94:	df000904 	addi	fp,sp,36
   4cb98:	e13ffc15 	stw	r4,-16(fp)
   4cb9c:	e17ffd15 	stw	r5,-12(fp)
   4cba0:	e1bffe15 	stw	r6,-8(fp)
   4cba4:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
   4cba8:	e0bfff17 	ldw	r2,-4(fp)
   4cbac:	10800204 	addi	r2,r2,8
   4cbb0:	01400244 	movi	r5,9
   4cbb4:	1009883a 	mov	r4,r2
   4cbb8:	00420180 	call	42018 <__divsi3>
   4cbbc:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
   4cbc0:	e03ff915 	stw	zero,-28(fp)
   4cbc4:	00800044 	movi	r2,1
   4cbc8:	e0bffa15 	stw	r2,-24(fp)
   4cbcc:	00000606 	br	4cbe8 <__s2b+0x60>
   4cbd0:	e0bffa17 	ldw	r2,-24(fp)
   4cbd4:	1085883a 	add	r2,r2,r2
   4cbd8:	e0bffa15 	stw	r2,-24(fp)
   4cbdc:	e0bff917 	ldw	r2,-28(fp)
   4cbe0:	10800044 	addi	r2,r2,1
   4cbe4:	e0bff915 	stw	r2,-28(fp)
   4cbe8:	e0bffb17 	ldw	r2,-20(fp)
   4cbec:	e0fffa17 	ldw	r3,-24(fp)
   4cbf0:	18bff716 	blt	r3,r2,4cbd0 <_gp+0xfffed9f8>
#ifdef Pack_32
  b = Balloc (ptr, k);
   4cbf4:	e17ff917 	ldw	r5,-28(fp)
   4cbf8:	e13ffc17 	ldw	r4,-16(fp)
   4cbfc:	004c8300 	call	4c830 <_Balloc>
   4cc00:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
   4cc04:	e0bff717 	ldw	r2,-36(fp)
   4cc08:	e0c00217 	ldw	r3,8(fp)
   4cc0c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   4cc10:	e0bff717 	ldw	r2,-36(fp)
   4cc14:	00c00044 	movi	r3,1
   4cc18:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
   4cc1c:	00800244 	movi	r2,9
   4cc20:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
   4cc24:	e0bffe17 	ldw	r2,-8(fp)
   4cc28:	10800290 	cmplti	r2,r2,10
   4cc2c:	10001b1e 	bne	r2,zero,4cc9c <__s2b+0x114>
    {
      s += 9;
   4cc30:	e0bffd17 	ldw	r2,-12(fp)
   4cc34:	10800244 	addi	r2,r2,9
   4cc38:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
   4cc3c:	e0bffd17 	ldw	r2,-12(fp)
   4cc40:	10c00044 	addi	r3,r2,1
   4cc44:	e0fffd15 	stw	r3,-12(fp)
   4cc48:	10800003 	ldbu	r2,0(r2)
   4cc4c:	10803fcc 	andi	r2,r2,255
   4cc50:	1080201c 	xori	r2,r2,128
   4cc54:	10bfe004 	addi	r2,r2,-128
   4cc58:	10bff404 	addi	r2,r2,-48
   4cc5c:	100f883a 	mov	r7,r2
   4cc60:	01800284 	movi	r6,10
   4cc64:	e17ff717 	ldw	r5,-36(fp)
   4cc68:	e13ffc17 	ldw	r4,-16(fp)
   4cc6c:	004c9dc0 	call	4c9dc <__multadd>
   4cc70:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
   4cc74:	e0bff817 	ldw	r2,-32(fp)
   4cc78:	10800044 	addi	r2,r2,1
   4cc7c:	e0bff815 	stw	r2,-32(fp)
   4cc80:	e0fff817 	ldw	r3,-32(fp)
   4cc84:	e0bffe17 	ldw	r2,-8(fp)
   4cc88:	18bfec16 	blt	r3,r2,4cc3c <_gp+0xfffeda64>
      s++;
   4cc8c:	e0bffd17 	ldw	r2,-12(fp)
   4cc90:	10800044 	addi	r2,r2,1
   4cc94:	e0bffd15 	stw	r2,-12(fp)
   4cc98:	00001506 	br	4ccf0 <__s2b+0x168>
    }
  else
    s += 10;
   4cc9c:	e0bffd17 	ldw	r2,-12(fp)
   4cca0:	10800284 	addi	r2,r2,10
   4cca4:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
   4cca8:	00001106 	br	4ccf0 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
   4ccac:	e0bffd17 	ldw	r2,-12(fp)
   4ccb0:	10c00044 	addi	r3,r2,1
   4ccb4:	e0fffd15 	stw	r3,-12(fp)
   4ccb8:	10800003 	ldbu	r2,0(r2)
   4ccbc:	10803fcc 	andi	r2,r2,255
   4ccc0:	1080201c 	xori	r2,r2,128
   4ccc4:	10bfe004 	addi	r2,r2,-128
   4ccc8:	10bff404 	addi	r2,r2,-48
   4cccc:	100f883a 	mov	r7,r2
   4ccd0:	01800284 	movi	r6,10
   4ccd4:	e17ff717 	ldw	r5,-36(fp)
   4ccd8:	e13ffc17 	ldw	r4,-16(fp)
   4ccdc:	004c9dc0 	call	4c9dc <__multadd>
   4cce0:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
   4cce4:	e0bff817 	ldw	r2,-32(fp)
   4cce8:	10800044 	addi	r2,r2,1
   4ccec:	e0bff815 	stw	r2,-32(fp)
   4ccf0:	e0fff817 	ldw	r3,-32(fp)
   4ccf4:	e0bfff17 	ldw	r2,-4(fp)
   4ccf8:	18bfec16 	blt	r3,r2,4ccac <_gp+0xfffedad4>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
   4ccfc:	e0bff717 	ldw	r2,-36(fp)
}
   4cd00:	e037883a 	mov	sp,fp
   4cd04:	dfc00117 	ldw	ra,4(sp)
   4cd08:	df000017 	ldw	fp,0(sp)
   4cd0c:	dec00204 	addi	sp,sp,8
   4cd10:	f800283a 	ret

0004cd14 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
   4cd14:	defffe04 	addi	sp,sp,-8
   4cd18:	df000115 	stw	fp,4(sp)
   4cd1c:	dc000015 	stw	r16,0(sp)
   4cd20:	df000104 	addi	fp,sp,4
   4cd24:	2005883a 	mov	r2,r4
  register int k = 0;
   4cd28:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
   4cd2c:	10ffffec 	andhi	r3,r2,65535
   4cd30:	1800021e 	bne	r3,zero,4cd3c <__hi0bits+0x28>
    {
      k = 16;
   4cd34:	04000404 	movi	r16,16
      x <<= 16;
   4cd38:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
   4cd3c:	10ffc02c 	andhi	r3,r2,65280
   4cd40:	1800021e 	bne	r3,zero,4cd4c <__hi0bits+0x38>
    {
      k += 8;
   4cd44:	84000204 	addi	r16,r16,8
      x <<= 8;
   4cd48:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
   4cd4c:	10fc002c 	andhi	r3,r2,61440
   4cd50:	1800021e 	bne	r3,zero,4cd5c <__hi0bits+0x48>
    {
      k += 4;
   4cd54:	84000104 	addi	r16,r16,4
      x <<= 4;
   4cd58:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
   4cd5c:	10f0002c 	andhi	r3,r2,49152
   4cd60:	1800031e 	bne	r3,zero,4cd70 <__hi0bits+0x5c>
    {
      k += 2;
   4cd64:	84000084 	addi	r16,r16,2
      x <<= 2;
   4cd68:	1085883a 	add	r2,r2,r2
   4cd6c:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
   4cd70:	1007883a 	mov	r3,r2
   4cd74:	18000516 	blt	r3,zero,4cd8c <__hi0bits+0x78>
    {
      k++;
   4cd78:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
   4cd7c:	1090002c 	andhi	r2,r2,16384
   4cd80:	1000021e 	bne	r2,zero,4cd8c <__hi0bits+0x78>
	return 32;
   4cd84:	00800804 	movi	r2,32
   4cd88:	00000106 	br	4cd90 <__hi0bits+0x7c>
    }
  return k;
   4cd8c:	8005883a 	mov	r2,r16
}
   4cd90:	e6ffff04 	addi	sp,fp,-4
   4cd94:	df000117 	ldw	fp,4(sp)
   4cd98:	dc000017 	ldw	r16,0(sp)
   4cd9c:	dec00204 	addi	sp,sp,8
   4cda0:	f800283a 	ret

0004cda4 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
   4cda4:	defffc04 	addi	sp,sp,-16
   4cda8:	df000315 	stw	fp,12(sp)
   4cdac:	dc400215 	stw	r17,8(sp)
   4cdb0:	dc000115 	stw	r16,4(sp)
   4cdb4:	df000304 	addi	fp,sp,12
   4cdb8:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
   4cdbc:	e0bffd17 	ldw	r2,-12(fp)
   4cdc0:	14000017 	ldw	r16,0(r2)

  if (x & 7)
   4cdc4:	808001cc 	andi	r2,r16,7
   4cdc8:	10001026 	beq	r2,zero,4ce0c <__lo0bits+0x68>
    {
      if (x & 1)
   4cdcc:	8080004c 	andi	r2,r16,1
   4cdd0:	10000226 	beq	r2,zero,4cddc <__lo0bits+0x38>
	return 0;
   4cdd4:	0005883a 	mov	r2,zero
   4cdd8:	00002706 	br	4ce78 <__lo0bits+0xd4>
      if (x & 2)
   4cddc:	8080008c 	andi	r2,r16,2
   4cde0:	10000526 	beq	r2,zero,4cdf8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
   4cde4:	8006d07a 	srli	r3,r16,1
   4cde8:	e0bffd17 	ldw	r2,-12(fp)
   4cdec:	10c00015 	stw	r3,0(r2)
	  return 1;
   4cdf0:	00800044 	movi	r2,1
   4cdf4:	00002006 	br	4ce78 <__lo0bits+0xd4>
	}
      *y = x >> 2;
   4cdf8:	8006d0ba 	srli	r3,r16,2
   4cdfc:	e0bffd17 	ldw	r2,-12(fp)
   4ce00:	10c00015 	stw	r3,0(r2)
      return 2;
   4ce04:	00800084 	movi	r2,2
   4ce08:	00001b06 	br	4ce78 <__lo0bits+0xd4>
    }
  k = 0;
   4ce0c:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
   4ce10:	80bfffcc 	andi	r2,r16,65535
   4ce14:	1000021e 	bne	r2,zero,4ce20 <__lo0bits+0x7c>
    {
      k = 16;
   4ce18:	04400404 	movi	r17,16
      x >>= 16;
   4ce1c:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
   4ce20:	80803fcc 	andi	r2,r16,255
   4ce24:	1000021e 	bne	r2,zero,4ce30 <__lo0bits+0x8c>
    {
      k += 8;
   4ce28:	8c400204 	addi	r17,r17,8
      x >>= 8;
   4ce2c:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
   4ce30:	808003cc 	andi	r2,r16,15
   4ce34:	1000021e 	bne	r2,zero,4ce40 <__lo0bits+0x9c>
    {
      k += 4;
   4ce38:	8c400104 	addi	r17,r17,4
      x >>= 4;
   4ce3c:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
   4ce40:	808000cc 	andi	r2,r16,3
   4ce44:	1000021e 	bne	r2,zero,4ce50 <__lo0bits+0xac>
    {
      k += 2;
   4ce48:	8c400084 	addi	r17,r17,2
      x >>= 2;
   4ce4c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
   4ce50:	8080004c 	andi	r2,r16,1
   4ce54:	1000051e 	bne	r2,zero,4ce6c <__lo0bits+0xc8>
    {
      k++;
   4ce58:	8c400044 	addi	r17,r17,1
      x >>= 1;
   4ce5c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
   4ce60:	8000021e 	bne	r16,zero,4ce6c <__lo0bits+0xc8>
	return 32;
   4ce64:	00800804 	movi	r2,32
   4ce68:	00000306 	br	4ce78 <__lo0bits+0xd4>
    }
  *y = x;
   4ce6c:	e0bffd17 	ldw	r2,-12(fp)
   4ce70:	14000015 	stw	r16,0(r2)
  return k;
   4ce74:	8805883a 	mov	r2,r17
}
   4ce78:	e6fffe04 	addi	sp,fp,-8
   4ce7c:	df000217 	ldw	fp,8(sp)
   4ce80:	dc400117 	ldw	r17,4(sp)
   4ce84:	dc000017 	ldw	r16,0(sp)
   4ce88:	dec00304 	addi	sp,sp,12
   4ce8c:	f800283a 	ret

0004ce90 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
   4ce90:	defffb04 	addi	sp,sp,-20
   4ce94:	dfc00415 	stw	ra,16(sp)
   4ce98:	df000315 	stw	fp,12(sp)
   4ce9c:	df000304 	addi	fp,sp,12
   4cea0:	e13ffe15 	stw	r4,-8(fp)
   4cea4:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
   4cea8:	01400044 	movi	r5,1
   4ceac:	e13ffe17 	ldw	r4,-8(fp)
   4ceb0:	004c8300 	call	4c830 <_Balloc>
   4ceb4:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
   4ceb8:	e0ffff17 	ldw	r3,-4(fp)
   4cebc:	e0bffd17 	ldw	r2,-12(fp)
   4cec0:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   4cec4:	e0bffd17 	ldw	r2,-12(fp)
   4cec8:	00c00044 	movi	r3,1
   4cecc:	10c00415 	stw	r3,16(r2)
  return b;
   4ced0:	e0bffd17 	ldw	r2,-12(fp)
}
   4ced4:	e037883a 	mov	sp,fp
   4ced8:	dfc00117 	ldw	ra,4(sp)
   4cedc:	df000017 	ldw	fp,0(sp)
   4cee0:	dec00204 	addi	sp,sp,8
   4cee4:	f800283a 	ret

0004cee8 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
   4cee8:	deffeb04 	addi	sp,sp,-84
   4ceec:	dfc01415 	stw	ra,80(sp)
   4cef0:	df001315 	stw	fp,76(sp)
   4cef4:	df001304 	addi	fp,sp,76
   4cef8:	e13ffd15 	stw	r4,-12(fp)
   4cefc:	e17ffe15 	stw	r5,-8(fp)
   4cf00:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
   4cf04:	e0bffe17 	ldw	r2,-8(fp)
   4cf08:	10c00417 	ldw	r3,16(r2)
   4cf0c:	e0bfff17 	ldw	r2,-4(fp)
   4cf10:	10800417 	ldw	r2,16(r2)
   4cf14:	1880060e 	bge	r3,r2,4cf30 <__multiply+0x48>
    {
      c = a;
   4cf18:	e0bffe17 	ldw	r2,-8(fp)
   4cf1c:	e0bff515 	stw	r2,-44(fp)
      a = b;
   4cf20:	e0bfff17 	ldw	r2,-4(fp)
   4cf24:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   4cf28:	e0bff517 	ldw	r2,-44(fp)
   4cf2c:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
   4cf30:	e0bffe17 	ldw	r2,-8(fp)
   4cf34:	10800117 	ldw	r2,4(r2)
   4cf38:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
   4cf3c:	e0bffe17 	ldw	r2,-8(fp)
   4cf40:	10800417 	ldw	r2,16(r2)
   4cf44:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
   4cf48:	e0bfff17 	ldw	r2,-4(fp)
   4cf4c:	10800417 	ldw	r2,16(r2)
   4cf50:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
   4cf54:	e0fff617 	ldw	r3,-40(fp)
   4cf58:	e0bff717 	ldw	r2,-36(fp)
   4cf5c:	1885883a 	add	r2,r3,r2
   4cf60:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
   4cf64:	e0bffe17 	ldw	r2,-8(fp)
   4cf68:	10c00217 	ldw	r3,8(r2)
   4cf6c:	e0bfee17 	ldw	r2,-72(fp)
   4cf70:	1880030e 	bge	r3,r2,4cf80 <__multiply+0x98>
    k++;
   4cf74:	e0bfed17 	ldw	r2,-76(fp)
   4cf78:	10800044 	addi	r2,r2,1
   4cf7c:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
   4cf80:	e17fed17 	ldw	r5,-76(fp)
   4cf84:	e13ffd17 	ldw	r4,-12(fp)
   4cf88:	004c8300 	call	4c830 <_Balloc>
   4cf8c:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
   4cf90:	e0bff517 	ldw	r2,-44(fp)
   4cf94:	10800504 	addi	r2,r2,20
   4cf98:	e0bff015 	stw	r2,-64(fp)
   4cf9c:	e0bfee17 	ldw	r2,-72(fp)
   4cfa0:	1085883a 	add	r2,r2,r2
   4cfa4:	1085883a 	add	r2,r2,r2
   4cfa8:	1007883a 	mov	r3,r2
   4cfac:	e0bff017 	ldw	r2,-64(fp)
   4cfb0:	10c5883a 	add	r2,r2,r3
   4cfb4:	e0bff815 	stw	r2,-32(fp)
   4cfb8:	00000506 	br	4cfd0 <__multiply+0xe8>
    *x = 0;
   4cfbc:	e0bff017 	ldw	r2,-64(fp)
   4cfc0:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
   4cfc4:	e0bff017 	ldw	r2,-64(fp)
   4cfc8:	10800104 	addi	r2,r2,4
   4cfcc:	e0bff015 	stw	r2,-64(fp)
   4cfd0:	e0fff017 	ldw	r3,-64(fp)
   4cfd4:	e0bff817 	ldw	r2,-32(fp)
   4cfd8:	18bff836 	bltu	r3,r2,4cfbc <_gp+0xfffedde4>
    *x = 0;
  xa = a->_x;
   4cfdc:	e0bffe17 	ldw	r2,-8(fp)
   4cfe0:	10800504 	addi	r2,r2,20
   4cfe4:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
   4cfe8:	e0bff617 	ldw	r2,-40(fp)
   4cfec:	1085883a 	add	r2,r2,r2
   4cff0:	1085883a 	add	r2,r2,r2
   4cff4:	1007883a 	mov	r3,r2
   4cff8:	e0bff817 	ldw	r2,-32(fp)
   4cffc:	10c5883a 	add	r2,r2,r3
   4d000:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   4d004:	e0bfff17 	ldw	r2,-4(fp)
   4d008:	10800504 	addi	r2,r2,20
   4d00c:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
   4d010:	e0bff717 	ldw	r2,-36(fp)
   4d014:	1085883a 	add	r2,r2,r2
   4d018:	1085883a 	add	r2,r2,r2
   4d01c:	1007883a 	mov	r3,r2
   4d020:	e0bff117 	ldw	r2,-60(fp)
   4d024:	10c5883a 	add	r2,r2,r3
   4d028:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
   4d02c:	e0bff517 	ldw	r2,-44(fp)
   4d030:	10800504 	addi	r2,r2,20
   4d034:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   4d038:	00008506 	br	4d250 <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
   4d03c:	e0bff117 	ldw	r2,-60(fp)
   4d040:	10800017 	ldw	r2,0(r2)
   4d044:	10bfffcc 	andi	r2,r2,65535
   4d048:	e0bffb15 	stw	r2,-20(fp)
   4d04c:	e0bffb17 	ldw	r2,-20(fp)
   4d050:	10003826 	beq	r2,zero,4d134 <__multiply+0x24c>
	{
	  x = xa;
   4d054:	e0bff817 	ldw	r2,-32(fp)
   4d058:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   4d05c:	e0bff317 	ldw	r2,-52(fp)
   4d060:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   4d064:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
   4d068:	e0bff017 	ldw	r2,-64(fp)
   4d06c:	10800017 	ldw	r2,0(r2)
   4d070:	10bfffcc 	andi	r2,r2,65535
   4d074:	e17ffb17 	ldw	r5,-20(fp)
   4d078:	1009883a 	mov	r4,r2
   4d07c:	00421cc0 	call	421cc <__mulsi3>
   4d080:	1007883a 	mov	r3,r2
   4d084:	e0bff217 	ldw	r2,-56(fp)
   4d088:	10800017 	ldw	r2,0(r2)
   4d08c:	10bfffcc 	andi	r2,r2,65535
   4d090:	1887883a 	add	r3,r3,r2
   4d094:	e0bfef17 	ldw	r2,-68(fp)
   4d098:	1885883a 	add	r2,r3,r2
   4d09c:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   4d0a0:	e0bffc17 	ldw	r2,-16(fp)
   4d0a4:	1004d43a 	srli	r2,r2,16
   4d0a8:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
   4d0ac:	e0bff017 	ldw	r2,-64(fp)
   4d0b0:	10c00104 	addi	r3,r2,4
   4d0b4:	e0fff015 	stw	r3,-64(fp)
   4d0b8:	10800017 	ldw	r2,0(r2)
   4d0bc:	1004d43a 	srli	r2,r2,16
   4d0c0:	e17ffb17 	ldw	r5,-20(fp)
   4d0c4:	1009883a 	mov	r4,r2
   4d0c8:	00421cc0 	call	421cc <__mulsi3>
   4d0cc:	1007883a 	mov	r3,r2
   4d0d0:	e0bff217 	ldw	r2,-56(fp)
   4d0d4:	10800017 	ldw	r2,0(r2)
   4d0d8:	1004d43a 	srli	r2,r2,16
   4d0dc:	1887883a 	add	r3,r3,r2
   4d0e0:	e0bfef17 	ldw	r2,-68(fp)
   4d0e4:	1885883a 	add	r2,r3,r2
   4d0e8:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   4d0ec:	e0bff417 	ldw	r2,-48(fp)
   4d0f0:	1004d43a 	srli	r2,r2,16
   4d0f4:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
   4d0f8:	e0bff217 	ldw	r2,-56(fp)
   4d0fc:	10c00104 	addi	r3,r2,4
   4d100:	e0fff215 	stw	r3,-56(fp)
   4d104:	e0fff417 	ldw	r3,-48(fp)
   4d108:	1808943a 	slli	r4,r3,16
   4d10c:	e0fffc17 	ldw	r3,-16(fp)
   4d110:	18ffffcc 	andi	r3,r3,65535
   4d114:	20c6b03a 	or	r3,r4,r3
   4d118:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
   4d11c:	e0fff017 	ldw	r3,-64(fp)
   4d120:	e0bff917 	ldw	r2,-28(fp)
   4d124:	18bfd036 	bltu	r3,r2,4d068 <_gp+0xfffede90>
	  *xc = carry;
   4d128:	e0bff217 	ldw	r2,-56(fp)
   4d12c:	e0ffef17 	ldw	r3,-68(fp)
   4d130:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
   4d134:	e0bff117 	ldw	r2,-60(fp)
   4d138:	10800017 	ldw	r2,0(r2)
   4d13c:	1004d43a 	srli	r2,r2,16
   4d140:	e0bffb15 	stw	r2,-20(fp)
   4d144:	e0bffb17 	ldw	r2,-20(fp)
   4d148:	10003b26 	beq	r2,zero,4d238 <__multiply+0x350>
	{
	  x = xa;
   4d14c:	e0bff817 	ldw	r2,-32(fp)
   4d150:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   4d154:	e0bff317 	ldw	r2,-52(fp)
   4d158:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   4d15c:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
   4d160:	e0bff217 	ldw	r2,-56(fp)
   4d164:	10800017 	ldw	r2,0(r2)
   4d168:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
   4d16c:	e0bff017 	ldw	r2,-64(fp)
   4d170:	10800017 	ldw	r2,0(r2)
   4d174:	10bfffcc 	andi	r2,r2,65535
   4d178:	e17ffb17 	ldw	r5,-20(fp)
   4d17c:	1009883a 	mov	r4,r2
   4d180:	00421cc0 	call	421cc <__mulsi3>
   4d184:	1007883a 	mov	r3,r2
   4d188:	e0bff217 	ldw	r2,-56(fp)
   4d18c:	10800017 	ldw	r2,0(r2)
   4d190:	1004d43a 	srli	r2,r2,16
   4d194:	1887883a 	add	r3,r3,r2
   4d198:	e0bfef17 	ldw	r2,-68(fp)
   4d19c:	1885883a 	add	r2,r3,r2
   4d1a0:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   4d1a4:	e0bffc17 	ldw	r2,-16(fp)
   4d1a8:	1004d43a 	srli	r2,r2,16
   4d1ac:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
   4d1b0:	e0bff217 	ldw	r2,-56(fp)
   4d1b4:	10c00104 	addi	r3,r2,4
   4d1b8:	e0fff215 	stw	r3,-56(fp)
   4d1bc:	e0fffc17 	ldw	r3,-16(fp)
   4d1c0:	1808943a 	slli	r4,r3,16
   4d1c4:	e0fff417 	ldw	r3,-48(fp)
   4d1c8:	18ffffcc 	andi	r3,r3,65535
   4d1cc:	20c6b03a 	or	r3,r4,r3
   4d1d0:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
   4d1d4:	e0bff017 	ldw	r2,-64(fp)
   4d1d8:	10c00104 	addi	r3,r2,4
   4d1dc:	e0fff015 	stw	r3,-64(fp)
   4d1e0:	10800017 	ldw	r2,0(r2)
   4d1e4:	1004d43a 	srli	r2,r2,16
   4d1e8:	e17ffb17 	ldw	r5,-20(fp)
   4d1ec:	1009883a 	mov	r4,r2
   4d1f0:	00421cc0 	call	421cc <__mulsi3>
   4d1f4:	1007883a 	mov	r3,r2
   4d1f8:	e0bff217 	ldw	r2,-56(fp)
   4d1fc:	10800017 	ldw	r2,0(r2)
   4d200:	10bfffcc 	andi	r2,r2,65535
   4d204:	1887883a 	add	r3,r3,r2
   4d208:	e0bfef17 	ldw	r2,-68(fp)
   4d20c:	1885883a 	add	r2,r3,r2
   4d210:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   4d214:	e0bff417 	ldw	r2,-48(fp)
   4d218:	1004d43a 	srli	r2,r2,16
   4d21c:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
   4d220:	e0fff017 	ldw	r3,-64(fp)
   4d224:	e0bff917 	ldw	r2,-28(fp)
   4d228:	18bfd036 	bltu	r3,r2,4d16c <_gp+0xfffedf94>
	  *xc = z2;
   4d22c:	e0bff217 	ldw	r2,-56(fp)
   4d230:	e0fff417 	ldw	r3,-48(fp)
   4d234:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   4d238:	e0bff117 	ldw	r2,-60(fp)
   4d23c:	10800104 	addi	r2,r2,4
   4d240:	e0bff115 	stw	r2,-60(fp)
   4d244:	e0bff317 	ldw	r2,-52(fp)
   4d248:	10800104 	addi	r2,r2,4
   4d24c:	e0bff315 	stw	r2,-52(fp)
   4d250:	e0fff117 	ldw	r3,-60(fp)
   4d254:	e0bffa17 	ldw	r2,-24(fp)
   4d258:	18bf7836 	bltu	r3,r2,4d03c <_gp+0xfffede64>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
   4d25c:	e0bff517 	ldw	r2,-44(fp)
   4d260:	10800504 	addi	r2,r2,20
   4d264:	e0bff315 	stw	r2,-52(fp)
   4d268:	e0bfee17 	ldw	r2,-72(fp)
   4d26c:	1085883a 	add	r2,r2,r2
   4d270:	1085883a 	add	r2,r2,r2
   4d274:	1007883a 	mov	r3,r2
   4d278:	e0bff317 	ldw	r2,-52(fp)
   4d27c:	10c5883a 	add	r2,r2,r3
   4d280:	e0bff215 	stw	r2,-56(fp)
   4d284:	00000306 	br	4d294 <__multiply+0x3ac>
   4d288:	e0bfee17 	ldw	r2,-72(fp)
   4d28c:	10bfffc4 	addi	r2,r2,-1
   4d290:	e0bfee15 	stw	r2,-72(fp)
   4d294:	e0bfee17 	ldw	r2,-72(fp)
   4d298:	0080060e 	bge	zero,r2,4d2b4 <__multiply+0x3cc>
   4d29c:	e0bff217 	ldw	r2,-56(fp)
   4d2a0:	10bfff04 	addi	r2,r2,-4
   4d2a4:	e0bff215 	stw	r2,-56(fp)
   4d2a8:	e0bff217 	ldw	r2,-56(fp)
   4d2ac:	10800017 	ldw	r2,0(r2)
   4d2b0:	103ff526 	beq	r2,zero,4d288 <_gp+0xfffee0b0>
  c->_wds = wc;
   4d2b4:	e0bff517 	ldw	r2,-44(fp)
   4d2b8:	e0ffee17 	ldw	r3,-72(fp)
   4d2bc:	10c00415 	stw	r3,16(r2)
  return c;
   4d2c0:	e0bff517 	ldw	r2,-44(fp)
}
   4d2c4:	e037883a 	mov	sp,fp
   4d2c8:	dfc00117 	ldw	ra,4(sp)
   4d2cc:	df000017 	ldw	fp,0(sp)
   4d2d0:	dec00204 	addi	sp,sp,8
   4d2d4:	f800283a 	ret

0004d2d8 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   4d2d8:	defff704 	addi	sp,sp,-36
   4d2dc:	dfc00815 	stw	ra,32(sp)
   4d2e0:	df000715 	stw	fp,28(sp)
   4d2e4:	df000704 	addi	fp,sp,28
   4d2e8:	e13ffd15 	stw	r4,-12(fp)
   4d2ec:	e17ffe15 	stw	r5,-8(fp)
   4d2f0:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
   4d2f4:	e0bfff17 	ldw	r2,-4(fp)
   4d2f8:	108000cc 	andi	r2,r2,3
   4d2fc:	e0bffb15 	stw	r2,-20(fp)
   4d300:	e0bffb17 	ldw	r2,-20(fp)
   4d304:	10000e26 	beq	r2,zero,4d340 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
   4d308:	e0bffb17 	ldw	r2,-20(fp)
   4d30c:	10ffffc4 	addi	r3,r2,-1
   4d310:	00800174 	movhi	r2,5
   4d314:	10942b04 	addi	r2,r2,20652
   4d318:	18c7883a 	add	r3,r3,r3
   4d31c:	18c7883a 	add	r3,r3,r3
   4d320:	10c5883a 	add	r2,r2,r3
   4d324:	10800017 	ldw	r2,0(r2)
   4d328:	000f883a 	mov	r7,zero
   4d32c:	100d883a 	mov	r6,r2
   4d330:	e17ffe17 	ldw	r5,-8(fp)
   4d334:	e13ffd17 	ldw	r4,-12(fp)
   4d338:	004c9dc0 	call	4c9dc <__multadd>
   4d33c:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
   4d340:	e0bfff17 	ldw	r2,-4(fp)
   4d344:	1005d0ba 	srai	r2,r2,2
   4d348:	e0bfff15 	stw	r2,-4(fp)
   4d34c:	e0bfff17 	ldw	r2,-4(fp)
   4d350:	1000021e 	bne	r2,zero,4d35c <__pow5mult+0x84>
    return b;
   4d354:	e0bffe17 	ldw	r2,-8(fp)
   4d358:	00003806 	br	4d43c <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
   4d35c:	e0bffd17 	ldw	r2,-12(fp)
   4d360:	10801217 	ldw	r2,72(r2)
   4d364:	e0bff915 	stw	r2,-28(fp)
   4d368:	e0bff917 	ldw	r2,-28(fp)
   4d36c:	10000b1e 	bne	r2,zero,4d39c <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
   4d370:	01409c44 	movi	r5,625
   4d374:	e13ffd17 	ldw	r4,-12(fp)
   4d378:	004ce900 	call	4ce90 <__i2b>
   4d37c:	1007883a 	mov	r3,r2
   4d380:	e0bffd17 	ldw	r2,-12(fp)
   4d384:	10c01215 	stw	r3,72(r2)
   4d388:	e0bffd17 	ldw	r2,-12(fp)
   4d38c:	10801217 	ldw	r2,72(r2)
   4d390:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
   4d394:	e0bff917 	ldw	r2,-28(fp)
   4d398:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
   4d39c:	e0bfff17 	ldw	r2,-4(fp)
   4d3a0:	1080004c 	andi	r2,r2,1
   4d3a4:	10000a26 	beq	r2,zero,4d3d0 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
   4d3a8:	e1bff917 	ldw	r6,-28(fp)
   4d3ac:	e17ffe17 	ldw	r5,-8(fp)
   4d3b0:	e13ffd17 	ldw	r4,-12(fp)
   4d3b4:	004cee80 	call	4cee8 <__multiply>
   4d3b8:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
   4d3bc:	e17ffe17 	ldw	r5,-8(fp)
   4d3c0:	e13ffd17 	ldw	r4,-12(fp)
   4d3c4:	004c9600 	call	4c960 <_Bfree>
	  b = b1;
   4d3c8:	e0bffc17 	ldw	r2,-16(fp)
   4d3cc:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
   4d3d0:	e0bfff17 	ldw	r2,-4(fp)
   4d3d4:	1005d07a 	srai	r2,r2,1
   4d3d8:	e0bfff15 	stw	r2,-4(fp)
   4d3dc:	e0bfff17 	ldw	r2,-4(fp)
   4d3e0:	10001426 	beq	r2,zero,4d434 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
   4d3e4:	e0bff917 	ldw	r2,-28(fp)
   4d3e8:	10800017 	ldw	r2,0(r2)
   4d3ec:	e0bffa15 	stw	r2,-24(fp)
   4d3f0:	e0bffa17 	ldw	r2,-24(fp)
   4d3f4:	10000c1e 	bne	r2,zero,4d428 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
   4d3f8:	e1bff917 	ldw	r6,-28(fp)
   4d3fc:	e17ff917 	ldw	r5,-28(fp)
   4d400:	e13ffd17 	ldw	r4,-12(fp)
   4d404:	004cee80 	call	4cee8 <__multiply>
   4d408:	1007883a 	mov	r3,r2
   4d40c:	e0bff917 	ldw	r2,-28(fp)
   4d410:	10c00015 	stw	r3,0(r2)
   4d414:	e0bff917 	ldw	r2,-28(fp)
   4d418:	10800017 	ldw	r2,0(r2)
   4d41c:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
   4d420:	e0bffa17 	ldw	r2,-24(fp)
   4d424:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
   4d428:	e0bffa17 	ldw	r2,-24(fp)
   4d42c:	e0bff915 	stw	r2,-28(fp)
    }
   4d430:	003fda06 	br	4d39c <_gp+0xfffee1c4>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
   4d434:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
   4d438:	e0bffe17 	ldw	r2,-8(fp)
}
   4d43c:	e037883a 	mov	sp,fp
   4d440:	dfc00117 	ldw	ra,4(sp)
   4d444:	df000017 	ldw	fp,0(sp)
   4d448:	dec00204 	addi	sp,sp,8
   4d44c:	f800283a 	ret

0004d450 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   4d450:	defff204 	addi	sp,sp,-56
   4d454:	dfc00d15 	stw	ra,52(sp)
   4d458:	df000c15 	stw	fp,48(sp)
   4d45c:	df000c04 	addi	fp,sp,48
   4d460:	e13ffd15 	stw	r4,-12(fp)
   4d464:	e17ffe15 	stw	r5,-8(fp)
   4d468:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
   4d46c:	e0bfff17 	ldw	r2,-4(fp)
   4d470:	1005d17a 	srai	r2,r2,5
   4d474:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
   4d478:	e0bffe17 	ldw	r2,-8(fp)
   4d47c:	10800117 	ldw	r2,4(r2)
   4d480:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
   4d484:	e0bffe17 	ldw	r2,-8(fp)
   4d488:	10c00417 	ldw	r3,16(r2)
   4d48c:	e0bffa17 	ldw	r2,-24(fp)
   4d490:	1885883a 	add	r2,r3,r2
   4d494:	10800044 	addi	r2,r2,1
   4d498:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
   4d49c:	e0bffe17 	ldw	r2,-8(fp)
   4d4a0:	10800217 	ldw	r2,8(r2)
   4d4a4:	e0bff415 	stw	r2,-48(fp)
   4d4a8:	00000606 	br	4d4c4 <__lshift+0x74>
    k1++;
   4d4ac:	e0bff517 	ldw	r2,-44(fp)
   4d4b0:	10800044 	addi	r2,r2,1
   4d4b4:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
   4d4b8:	e0bff417 	ldw	r2,-48(fp)
   4d4bc:	1085883a 	add	r2,r2,r2
   4d4c0:	e0bff415 	stw	r2,-48(fp)
   4d4c4:	e0bff617 	ldw	r2,-40(fp)
   4d4c8:	e0fff417 	ldw	r3,-48(fp)
   4d4cc:	18bff716 	blt	r3,r2,4d4ac <_gp+0xfffee2d4>
    k1++;
  b1 = Balloc (ptr, k1);
   4d4d0:	e17ff517 	ldw	r5,-44(fp)
   4d4d4:	e13ffd17 	ldw	r4,-12(fp)
   4d4d8:	004c8300 	call	4c830 <_Balloc>
   4d4dc:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
   4d4e0:	e0bffb17 	ldw	r2,-20(fp)
   4d4e4:	10800504 	addi	r2,r2,20
   4d4e8:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
   4d4ec:	e03ff415 	stw	zero,-48(fp)
   4d4f0:	00000706 	br	4d510 <__lshift+0xc0>
    *x1++ = 0;
   4d4f4:	e0bff817 	ldw	r2,-32(fp)
   4d4f8:	10c00104 	addi	r3,r2,4
   4d4fc:	e0fff815 	stw	r3,-32(fp)
   4d500:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
   4d504:	e0bff417 	ldw	r2,-48(fp)
   4d508:	10800044 	addi	r2,r2,1
   4d50c:	e0bff415 	stw	r2,-48(fp)
   4d510:	e0fff417 	ldw	r3,-48(fp)
   4d514:	e0bffa17 	ldw	r2,-24(fp)
   4d518:	18bff616 	blt	r3,r2,4d4f4 <_gp+0xfffee31c>
    *x1++ = 0;
  x = b->_x;
   4d51c:	e0bffe17 	ldw	r2,-8(fp)
   4d520:	10800504 	addi	r2,r2,20
   4d524:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
   4d528:	e0bffe17 	ldw	r2,-8(fp)
   4d52c:	10800417 	ldw	r2,16(r2)
   4d530:	1085883a 	add	r2,r2,r2
   4d534:	1085883a 	add	r2,r2,r2
   4d538:	1007883a 	mov	r3,r2
   4d53c:	e0bff717 	ldw	r2,-36(fp)
   4d540:	10c5883a 	add	r2,r2,r3
   4d544:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
   4d548:	e0bfff17 	ldw	r2,-4(fp)
   4d54c:	108007cc 	andi	r2,r2,31
   4d550:	e0bfff15 	stw	r2,-4(fp)
   4d554:	e0bfff17 	ldw	r2,-4(fp)
   4d558:	10002326 	beq	r2,zero,4d5e8 <__lshift+0x198>
    {
      k1 = 32 - k;
   4d55c:	00c00804 	movi	r3,32
   4d560:	e0bfff17 	ldw	r2,-4(fp)
   4d564:	1885c83a 	sub	r2,r3,r2
   4d568:	e0bff515 	stw	r2,-44(fp)
      z = 0;
   4d56c:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
   4d570:	e0bff817 	ldw	r2,-32(fp)
   4d574:	10c00104 	addi	r3,r2,4
   4d578:	e0fff815 	stw	r3,-32(fp)
   4d57c:	e0fff717 	ldw	r3,-36(fp)
   4d580:	19000017 	ldw	r4,0(r3)
   4d584:	e0ffff17 	ldw	r3,-4(fp)
   4d588:	20c8983a 	sll	r4,r4,r3
   4d58c:	e0fff917 	ldw	r3,-28(fp)
   4d590:	20c6b03a 	or	r3,r4,r3
   4d594:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
   4d598:	e0bff717 	ldw	r2,-36(fp)
   4d59c:	10c00104 	addi	r3,r2,4
   4d5a0:	e0fff715 	stw	r3,-36(fp)
   4d5a4:	10c00017 	ldw	r3,0(r2)
   4d5a8:	e0bff517 	ldw	r2,-44(fp)
   4d5ac:	1884d83a 	srl	r2,r3,r2
   4d5b0:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
   4d5b4:	e0fff717 	ldw	r3,-36(fp)
   4d5b8:	e0bffc17 	ldw	r2,-16(fp)
   4d5bc:	18bfec36 	bltu	r3,r2,4d570 <_gp+0xfffee398>
      if ((*x1 = z) != 0)
   4d5c0:	e0bff817 	ldw	r2,-32(fp)
   4d5c4:	e0fff917 	ldw	r3,-28(fp)
   4d5c8:	10c00015 	stw	r3,0(r2)
   4d5cc:	e0bff817 	ldw	r2,-32(fp)
   4d5d0:	10800017 	ldw	r2,0(r2)
   4d5d4:	10000f26 	beq	r2,zero,4d614 <__lshift+0x1c4>
	++n1;
   4d5d8:	e0bff617 	ldw	r2,-40(fp)
   4d5dc:	10800044 	addi	r2,r2,1
   4d5e0:	e0bff615 	stw	r2,-40(fp)
   4d5e4:	00000b06 	br	4d614 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
   4d5e8:	e0bff817 	ldw	r2,-32(fp)
   4d5ec:	10c00104 	addi	r3,r2,4
   4d5f0:	e0fff815 	stw	r3,-32(fp)
   4d5f4:	e0fff717 	ldw	r3,-36(fp)
   4d5f8:	19000104 	addi	r4,r3,4
   4d5fc:	e13ff715 	stw	r4,-36(fp)
   4d600:	18c00017 	ldw	r3,0(r3)
   4d604:	10c00015 	stw	r3,0(r2)
    while (x < xe);
   4d608:	e0fff717 	ldw	r3,-36(fp)
   4d60c:	e0bffc17 	ldw	r2,-16(fp)
   4d610:	18bff536 	bltu	r3,r2,4d5e8 <_gp+0xfffee410>
  b1->_wds = n1 - 1;
   4d614:	e0bff617 	ldw	r2,-40(fp)
   4d618:	10ffffc4 	addi	r3,r2,-1
   4d61c:	e0bffb17 	ldw	r2,-20(fp)
   4d620:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
   4d624:	e17ffe17 	ldw	r5,-8(fp)
   4d628:	e13ffd17 	ldw	r4,-12(fp)
   4d62c:	004c9600 	call	4c960 <_Bfree>
  return b1;
   4d630:	e0bffb17 	ldw	r2,-20(fp)
}
   4d634:	e037883a 	mov	sp,fp
   4d638:	dfc00117 	ldw	ra,4(sp)
   4d63c:	df000017 	ldw	fp,0(sp)
   4d640:	dec00204 	addi	sp,sp,8
   4d644:	f800283a 	ret

0004d648 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
   4d648:	defff704 	addi	sp,sp,-36
   4d64c:	df000815 	stw	fp,32(sp)
   4d650:	df000804 	addi	fp,sp,32
   4d654:	e13ffe15 	stw	r4,-8(fp)
   4d658:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
   4d65c:	e0bffe17 	ldw	r2,-8(fp)
   4d660:	10800417 	ldw	r2,16(r2)
   4d664:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
   4d668:	e0bfff17 	ldw	r2,-4(fp)
   4d66c:	10800417 	ldw	r2,16(r2)
   4d670:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
   4d674:	e0fffa17 	ldw	r3,-24(fp)
   4d678:	e0bffb17 	ldw	r2,-20(fp)
   4d67c:	1885c83a 	sub	r2,r3,r2
   4d680:	e0bffa15 	stw	r2,-24(fp)
   4d684:	e0bffa17 	ldw	r2,-24(fp)
   4d688:	10000226 	beq	r2,zero,4d694 <__mcmp+0x4c>
    return i;
   4d68c:	e0bffa17 	ldw	r2,-24(fp)
   4d690:	00002e06 	br	4d74c <__mcmp+0x104>
  xa0 = a->_x;
   4d694:	e0bffe17 	ldw	r2,-8(fp)
   4d698:	10800504 	addi	r2,r2,20
   4d69c:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
   4d6a0:	e0bffb17 	ldw	r2,-20(fp)
   4d6a4:	1085883a 	add	r2,r2,r2
   4d6a8:	1085883a 	add	r2,r2,r2
   4d6ac:	1007883a 	mov	r3,r2
   4d6b0:	e0bffc17 	ldw	r2,-16(fp)
   4d6b4:	10c5883a 	add	r2,r2,r3
   4d6b8:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
   4d6bc:	e0bfff17 	ldw	r2,-4(fp)
   4d6c0:	10800504 	addi	r2,r2,20
   4d6c4:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
   4d6c8:	e0bffb17 	ldw	r2,-20(fp)
   4d6cc:	1085883a 	add	r2,r2,r2
   4d6d0:	1085883a 	add	r2,r2,r2
   4d6d4:	1007883a 	mov	r3,r2
   4d6d8:	e0bffd17 	ldw	r2,-12(fp)
   4d6dc:	10c5883a 	add	r2,r2,r3
   4d6e0:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
   4d6e4:	e0bff817 	ldw	r2,-32(fp)
   4d6e8:	10bfff04 	addi	r2,r2,-4
   4d6ec:	e0bff815 	stw	r2,-32(fp)
   4d6f0:	e0bff817 	ldw	r2,-32(fp)
   4d6f4:	10c00017 	ldw	r3,0(r2)
   4d6f8:	e0bff917 	ldw	r2,-28(fp)
   4d6fc:	10bfff04 	addi	r2,r2,-4
   4d700:	e0bff915 	stw	r2,-28(fp)
   4d704:	e0bff917 	ldw	r2,-28(fp)
   4d708:	10800017 	ldw	r2,0(r2)
   4d70c:	18800926 	beq	r3,r2,4d734 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
   4d710:	e0bff817 	ldw	r2,-32(fp)
   4d714:	10c00017 	ldw	r3,0(r2)
   4d718:	e0bff917 	ldw	r2,-28(fp)
   4d71c:	10800017 	ldw	r2,0(r2)
   4d720:	1880022e 	bgeu	r3,r2,4d72c <__mcmp+0xe4>
   4d724:	00bfffc4 	movi	r2,-1
   4d728:	00000806 	br	4d74c <__mcmp+0x104>
   4d72c:	00800044 	movi	r2,1
   4d730:	00000606 	br	4d74c <__mcmp+0x104>
      if (xa <= xa0)
   4d734:	e0bff817 	ldw	r2,-32(fp)
   4d738:	e0fffc17 	ldw	r3,-16(fp)
   4d73c:	1880012e 	bgeu	r3,r2,4d744 <__mcmp+0xfc>
	break;
    }
   4d740:	003fe806 	br	4d6e4 <_gp+0xfffee50c>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
   4d744:	0001883a 	nop
    }
  return 0;
   4d748:	0005883a 	mov	r2,zero
}
   4d74c:	e037883a 	mov	sp,fp
   4d750:	df000017 	ldw	fp,0(sp)
   4d754:	dec00104 	addi	sp,sp,4
   4d758:	f800283a 	ret

0004d75c <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
   4d75c:	deffef04 	addi	sp,sp,-68
   4d760:	dfc01015 	stw	ra,64(sp)
   4d764:	df000f15 	stw	fp,60(sp)
   4d768:	df000f04 	addi	fp,sp,60
   4d76c:	e13ffd15 	stw	r4,-12(fp)
   4d770:	e17ffe15 	stw	r5,-8(fp)
   4d774:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
   4d778:	e17fff17 	ldw	r5,-4(fp)
   4d77c:	e13ffe17 	ldw	r4,-8(fp)
   4d780:	004d6480 	call	4d648 <__mcmp>
   4d784:	e0bff115 	stw	r2,-60(fp)
  if (!i)
   4d788:	e0bff117 	ldw	r2,-60(fp)
   4d78c:	10000b1e 	bne	r2,zero,4d7bc <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
   4d790:	000b883a 	mov	r5,zero
   4d794:	e13ffd17 	ldw	r4,-12(fp)
   4d798:	004c8300 	call	4c830 <_Balloc>
   4d79c:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
   4d7a0:	e0bff717 	ldw	r2,-36(fp)
   4d7a4:	00c00044 	movi	r3,1
   4d7a8:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
   4d7ac:	e0bff717 	ldw	r2,-36(fp)
   4d7b0:	10000515 	stw	zero,20(r2)
      return c;
   4d7b4:	e0bff717 	ldw	r2,-36(fp)
   4d7b8:	00008c06 	br	4d9ec <__mdiff+0x290>
    }
  if (i < 0)
   4d7bc:	e0bff117 	ldw	r2,-60(fp)
   4d7c0:	1000090e 	bge	r2,zero,4d7e8 <__mdiff+0x8c>
    {
      c = a;
   4d7c4:	e0bffe17 	ldw	r2,-8(fp)
   4d7c8:	e0bff715 	stw	r2,-36(fp)
      a = b;
   4d7cc:	e0bfff17 	ldw	r2,-4(fp)
   4d7d0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   4d7d4:	e0bff717 	ldw	r2,-36(fp)
   4d7d8:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
   4d7dc:	00800044 	movi	r2,1
   4d7e0:	e0bff115 	stw	r2,-60(fp)
   4d7e4:	00000106 	br	4d7ec <__mdiff+0x90>
    }
  else
    i = 0;
   4d7e8:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
   4d7ec:	e0bffe17 	ldw	r2,-8(fp)
   4d7f0:	10800117 	ldw	r2,4(r2)
   4d7f4:	100b883a 	mov	r5,r2
   4d7f8:	e13ffd17 	ldw	r4,-12(fp)
   4d7fc:	004c8300 	call	4c830 <_Balloc>
   4d800:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
   4d804:	e0bff717 	ldw	r2,-36(fp)
   4d808:	e0fff117 	ldw	r3,-60(fp)
   4d80c:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
   4d810:	e0bffe17 	ldw	r2,-8(fp)
   4d814:	10800417 	ldw	r2,16(r2)
   4d818:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
   4d81c:	e0bffe17 	ldw	r2,-8(fp)
   4d820:	10800504 	addi	r2,r2,20
   4d824:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
   4d828:	e0bff217 	ldw	r2,-56(fp)
   4d82c:	1085883a 	add	r2,r2,r2
   4d830:	1085883a 	add	r2,r2,r2
   4d834:	1007883a 	mov	r3,r2
   4d838:	e0bff417 	ldw	r2,-48(fp)
   4d83c:	10c5883a 	add	r2,r2,r3
   4d840:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
   4d844:	e0bfff17 	ldw	r2,-4(fp)
   4d848:	10800417 	ldw	r2,16(r2)
   4d84c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   4d850:	e0bfff17 	ldw	r2,-4(fp)
   4d854:	10800504 	addi	r2,r2,20
   4d858:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
   4d85c:	e0bff917 	ldw	r2,-28(fp)
   4d860:	1085883a 	add	r2,r2,r2
   4d864:	1085883a 	add	r2,r2,r2
   4d868:	1007883a 	mov	r3,r2
   4d86c:	e0bff517 	ldw	r2,-44(fp)
   4d870:	10c5883a 	add	r2,r2,r3
   4d874:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
   4d878:	e0bff717 	ldw	r2,-36(fp)
   4d87c:	10800504 	addi	r2,r2,20
   4d880:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
   4d884:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
   4d888:	e0bff417 	ldw	r2,-48(fp)
   4d88c:	10800017 	ldw	r2,0(r2)
   4d890:	10ffffcc 	andi	r3,r2,65535
   4d894:	e0bff517 	ldw	r2,-44(fp)
   4d898:	10800017 	ldw	r2,0(r2)
   4d89c:	10bfffcc 	andi	r2,r2,65535
   4d8a0:	1887c83a 	sub	r3,r3,r2
   4d8a4:	e0bff317 	ldw	r2,-52(fp)
   4d8a8:	1885883a 	add	r2,r3,r2
   4d8ac:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   4d8b0:	e0bffb17 	ldw	r2,-20(fp)
   4d8b4:	1005d43a 	srai	r2,r2,16
   4d8b8:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
   4d8bc:	e0bff417 	ldw	r2,-48(fp)
   4d8c0:	10c00104 	addi	r3,r2,4
   4d8c4:	e0fff415 	stw	r3,-48(fp)
   4d8c8:	10800017 	ldw	r2,0(r2)
   4d8cc:	1006d43a 	srli	r3,r2,16
   4d8d0:	e0bff517 	ldw	r2,-44(fp)
   4d8d4:	11000104 	addi	r4,r2,4
   4d8d8:	e13ff515 	stw	r4,-44(fp)
   4d8dc:	10800017 	ldw	r2,0(r2)
   4d8e0:	1004d43a 	srli	r2,r2,16
   4d8e4:	1887c83a 	sub	r3,r3,r2
   4d8e8:	e0bff317 	ldw	r2,-52(fp)
   4d8ec:	1885883a 	add	r2,r3,r2
   4d8f0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   4d8f4:	e0bffc17 	ldw	r2,-16(fp)
   4d8f8:	1005d43a 	srai	r2,r2,16
   4d8fc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   4d900:	e0bff617 	ldw	r2,-40(fp)
   4d904:	10c00104 	addi	r3,r2,4
   4d908:	e0fff615 	stw	r3,-40(fp)
   4d90c:	e0fffc17 	ldw	r3,-16(fp)
   4d910:	1808943a 	slli	r4,r3,16
   4d914:	e0fffb17 	ldw	r3,-20(fp)
   4d918:	18ffffcc 	andi	r3,r3,65535
   4d91c:	20c6b03a 	or	r3,r4,r3
   4d920:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
   4d924:	e0fff517 	ldw	r3,-44(fp)
   4d928:	e0bffa17 	ldw	r2,-24(fp)
   4d92c:	18bfd636 	bltu	r3,r2,4d888 <_gp+0xfffee6b0>
  while (xa < xae)
   4d930:	00001d06 	br	4d9a8 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
   4d934:	e0bff417 	ldw	r2,-48(fp)
   4d938:	10800017 	ldw	r2,0(r2)
   4d93c:	10ffffcc 	andi	r3,r2,65535
   4d940:	e0bff317 	ldw	r2,-52(fp)
   4d944:	1885883a 	add	r2,r3,r2
   4d948:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   4d94c:	e0bffb17 	ldw	r2,-20(fp)
   4d950:	1005d43a 	srai	r2,r2,16
   4d954:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
   4d958:	e0bff417 	ldw	r2,-48(fp)
   4d95c:	10c00104 	addi	r3,r2,4
   4d960:	e0fff415 	stw	r3,-48(fp)
   4d964:	10800017 	ldw	r2,0(r2)
   4d968:	1006d43a 	srli	r3,r2,16
   4d96c:	e0bff317 	ldw	r2,-52(fp)
   4d970:	1885883a 	add	r2,r3,r2
   4d974:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   4d978:	e0bffc17 	ldw	r2,-16(fp)
   4d97c:	1005d43a 	srai	r2,r2,16
   4d980:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   4d984:	e0bff617 	ldw	r2,-40(fp)
   4d988:	10c00104 	addi	r3,r2,4
   4d98c:	e0fff615 	stw	r3,-40(fp)
   4d990:	e0fffc17 	ldw	r3,-16(fp)
   4d994:	1808943a 	slli	r4,r3,16
   4d998:	e0fffb17 	ldw	r3,-20(fp)
   4d99c:	18ffffcc 	andi	r3,r3,65535
   4d9a0:	20c6b03a 	or	r3,r4,r3
   4d9a4:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
   4d9a8:	e0fff417 	ldw	r3,-48(fp)
   4d9ac:	e0bff817 	ldw	r2,-32(fp)
   4d9b0:	18bfe036 	bltu	r3,r2,4d934 <_gp+0xfffee75c>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   4d9b4:	00000306 	br	4d9c4 <__mdiff+0x268>
    wa--;
   4d9b8:	e0bff217 	ldw	r2,-56(fp)
   4d9bc:	10bfffc4 	addi	r2,r2,-1
   4d9c0:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   4d9c4:	e0bff617 	ldw	r2,-40(fp)
   4d9c8:	10bfff04 	addi	r2,r2,-4
   4d9cc:	e0bff615 	stw	r2,-40(fp)
   4d9d0:	e0bff617 	ldw	r2,-40(fp)
   4d9d4:	10800017 	ldw	r2,0(r2)
   4d9d8:	103ff726 	beq	r2,zero,4d9b8 <_gp+0xfffee7e0>
    wa--;
  c->_wds = wa;
   4d9dc:	e0bff717 	ldw	r2,-36(fp)
   4d9e0:	e0fff217 	ldw	r3,-56(fp)
   4d9e4:	10c00415 	stw	r3,16(r2)
  return c;
   4d9e8:	e0bff717 	ldw	r2,-36(fp)
}
   4d9ec:	e037883a 	mov	sp,fp
   4d9f0:	dfc00117 	ldw	ra,4(sp)
   4d9f4:	df000017 	ldw	fp,0(sp)
   4d9f8:	dec00204 	addi	sp,sp,8
   4d9fc:	f800283a 	ret

0004da00 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
   4da00:	defff804 	addi	sp,sp,-32
   4da04:	df000715 	stw	fp,28(sp)
   4da08:	dc000615 	stw	r16,24(sp)
   4da0c:	df000704 	addi	fp,sp,28
   4da10:	e13ffd15 	stw	r4,-12(fp)
   4da14:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
   4da18:	e0bffd17 	ldw	r2,-12(fp)
   4da1c:	e0bff915 	stw	r2,-28(fp)
   4da20:	e0bffe17 	ldw	r2,-8(fp)
   4da24:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
   4da28:	e0bffa17 	ldw	r2,-24(fp)
   4da2c:	10dffc2c 	andhi	r3,r2,32752
   4da30:	00bf3034 	movhi	r2,64704
   4da34:	1885883a 	add	r2,r3,r2
   4da38:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
   4da3c:	0400040e 	bge	zero,r16,4da50 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
   4da40:	8005883a 	mov	r2,r16
   4da44:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
   4da48:	e03ffb15 	stw	zero,-20(fp)
   4da4c:	00001406 	br	4daa0 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
   4da50:	0405c83a 	sub	r2,zero,r16
   4da54:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
   4da58:	80800508 	cmpgei	r2,r16,20
   4da5c:	1000051e 	bne	r2,zero,4da74 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
   4da60:	00800234 	movhi	r2,8
   4da64:	1405d83a 	sra	r2,r2,r16
   4da68:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
   4da6c:	e03ffb15 	stw	zero,-20(fp)
   4da70:	00000b06 	br	4daa0 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
   4da74:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
   4da78:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
   4da7c:	808007c8 	cmpgei	r2,r16,31
   4da80:	1000051e 	bne	r2,zero,4da98 <__ulp+0x98>
   4da84:	008007c4 	movi	r2,31
   4da88:	1405c83a 	sub	r2,r2,r16
   4da8c:	00c00044 	movi	r3,1
   4da90:	1884983a 	sll	r2,r3,r2
   4da94:	00000106 	br	4da9c <__ulp+0x9c>
   4da98:	00800044 	movi	r2,1
   4da9c:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
   4daa0:	e0bffb17 	ldw	r2,-20(fp)
   4daa4:	e0fffc17 	ldw	r3,-16(fp)
   4daa8:	1009883a 	mov	r4,r2
   4daac:	180b883a 	mov	r5,r3
}
   4dab0:	2005883a 	mov	r2,r4
   4dab4:	2807883a 	mov	r3,r5
   4dab8:	e6ffff04 	addi	sp,fp,-4
   4dabc:	df000117 	ldw	fp,4(sp)
   4dac0:	dc000017 	ldw	r16,0(sp)
   4dac4:	dec00204 	addi	sp,sp,8
   4dac8:	f800283a 	ret

0004dacc <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
   4dacc:	defff404 	addi	sp,sp,-48
   4dad0:	dfc00b15 	stw	ra,44(sp)
   4dad4:	df000a15 	stw	fp,40(sp)
   4dad8:	df000a04 	addi	fp,sp,40
   4dadc:	e13ffe15 	stw	r4,-8(fp)
   4dae0:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
   4dae4:	e0bffe17 	ldw	r2,-8(fp)
   4dae8:	10800504 	addi	r2,r2,20
   4daec:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
   4daf0:	e0bffe17 	ldw	r2,-8(fp)
   4daf4:	10800417 	ldw	r2,16(r2)
   4daf8:	1085883a 	add	r2,r2,r2
   4dafc:	1085883a 	add	r2,r2,r2
   4db00:	1007883a 	mov	r3,r2
   4db04:	e0bff717 	ldw	r2,-36(fp)
   4db08:	10c5883a 	add	r2,r2,r3
   4db0c:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
   4db10:	e0bff617 	ldw	r2,-40(fp)
   4db14:	10bfff04 	addi	r2,r2,-4
   4db18:	e0bff615 	stw	r2,-40(fp)
   4db1c:	e0bff617 	ldw	r2,-40(fp)
   4db20:	10800017 	ldw	r2,0(r2)
   4db24:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
   4db28:	e13ff817 	ldw	r4,-32(fp)
   4db2c:	004cd140 	call	4cd14 <__hi0bits>
   4db30:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
   4db34:	00c00804 	movi	r3,32
   4db38:	e0bff917 	ldw	r2,-28(fp)
   4db3c:	1887c83a 	sub	r3,r3,r2
   4db40:	e0bfff17 	ldw	r2,-4(fp)
   4db44:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
   4db48:	e0bff917 	ldw	r2,-28(fp)
   4db4c:	108002c8 	cmpgei	r2,r2,11
   4db50:	10001e1e 	bne	r2,zero,4dbcc <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
   4db54:	00c002c4 	movi	r3,11
   4db58:	e0bff917 	ldw	r2,-28(fp)
   4db5c:	1885c83a 	sub	r2,r3,r2
   4db60:	e0fff817 	ldw	r3,-32(fp)
   4db64:	1884d83a 	srl	r2,r3,r2
   4db68:	108ffc34 	orhi	r2,r2,16368
   4db6c:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
   4db70:	e0bff617 	ldw	r2,-40(fp)
   4db74:	e0fff717 	ldw	r3,-36(fp)
   4db78:	1880062e 	bgeu	r3,r2,4db94 <__b2d+0xc8>
   4db7c:	e0bff617 	ldw	r2,-40(fp)
   4db80:	10bfff04 	addi	r2,r2,-4
   4db84:	e0bff615 	stw	r2,-40(fp)
   4db88:	e0bff617 	ldw	r2,-40(fp)
   4db8c:	10800017 	ldw	r2,0(r2)
   4db90:	00000106 	br	4db98 <__b2d+0xcc>
   4db94:	0005883a 	mov	r2,zero
   4db98:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
   4db9c:	e0bff917 	ldw	r2,-28(fp)
   4dba0:	10800544 	addi	r2,r2,21
   4dba4:	e0fff817 	ldw	r3,-32(fp)
   4dba8:	1886983a 	sll	r3,r3,r2
   4dbac:	010002c4 	movi	r4,11
   4dbb0:	e0bff917 	ldw	r2,-28(fp)
   4dbb4:	2085c83a 	sub	r2,r4,r2
   4dbb8:	e13ffa17 	ldw	r4,-24(fp)
   4dbbc:	2084d83a 	srl	r2,r4,r2
   4dbc0:	1884b03a 	or	r2,r3,r2
   4dbc4:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
   4dbc8:	00003606 	br	4dca4 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
   4dbcc:	e0bff617 	ldw	r2,-40(fp)
   4dbd0:	e0fff717 	ldw	r3,-36(fp)
   4dbd4:	1880062e 	bgeu	r3,r2,4dbf0 <__b2d+0x124>
   4dbd8:	e0bff617 	ldw	r2,-40(fp)
   4dbdc:	10bfff04 	addi	r2,r2,-4
   4dbe0:	e0bff615 	stw	r2,-40(fp)
   4dbe4:	e0bff617 	ldw	r2,-40(fp)
   4dbe8:	10800017 	ldw	r2,0(r2)
   4dbec:	00000106 	br	4dbf4 <__b2d+0x128>
   4dbf0:	0005883a 	mov	r2,zero
   4dbf4:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
   4dbf8:	e0bff917 	ldw	r2,-28(fp)
   4dbfc:	10bffd44 	addi	r2,r2,-11
   4dc00:	e0bff915 	stw	r2,-28(fp)
   4dc04:	e0bff917 	ldw	r2,-28(fp)
   4dc08:	10002126 	beq	r2,zero,4dc90 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
   4dc0c:	e0fff817 	ldw	r3,-32(fp)
   4dc10:	e0bff917 	ldw	r2,-28(fp)
   4dc14:	1886983a 	sll	r3,r3,r2
   4dc18:	01000804 	movi	r4,32
   4dc1c:	e0bff917 	ldw	r2,-28(fp)
   4dc20:	2085c83a 	sub	r2,r4,r2
   4dc24:	e13ffb17 	ldw	r4,-20(fp)
   4dc28:	2084d83a 	srl	r2,r4,r2
   4dc2c:	1884b03a 	or	r2,r3,r2
   4dc30:	108ffc34 	orhi	r2,r2,16368
   4dc34:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
   4dc38:	e0bff617 	ldw	r2,-40(fp)
   4dc3c:	e0fff717 	ldw	r3,-36(fp)
   4dc40:	1880062e 	bgeu	r3,r2,4dc5c <__b2d+0x190>
   4dc44:	e0bff617 	ldw	r2,-40(fp)
   4dc48:	10bfff04 	addi	r2,r2,-4
   4dc4c:	e0bff615 	stw	r2,-40(fp)
   4dc50:	e0bff617 	ldw	r2,-40(fp)
   4dc54:	10800017 	ldw	r2,0(r2)
   4dc58:	00000106 	br	4dc60 <__b2d+0x194>
   4dc5c:	0005883a 	mov	r2,zero
   4dc60:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
   4dc64:	e0fffb17 	ldw	r3,-20(fp)
   4dc68:	e0bff917 	ldw	r2,-28(fp)
   4dc6c:	1886983a 	sll	r3,r3,r2
   4dc70:	01000804 	movi	r4,32
   4dc74:	e0bff917 	ldw	r2,-28(fp)
   4dc78:	2085c83a 	sub	r2,r4,r2
   4dc7c:	e13ff817 	ldw	r4,-32(fp)
   4dc80:	2084d83a 	srl	r2,r4,r2
   4dc84:	1884b03a 	or	r2,r3,r2
   4dc88:	e0bffc15 	stw	r2,-16(fp)
   4dc8c:	00000506 	br	4dca4 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
   4dc90:	e0bff817 	ldw	r2,-32(fp)
   4dc94:	108ffc34 	orhi	r2,r2,16368
   4dc98:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
   4dc9c:	e0bffb17 	ldw	r2,-20(fp)
   4dca0:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
   4dca4:	e0bffc17 	ldw	r2,-16(fp)
   4dca8:	e0fffd17 	ldw	r3,-12(fp)
   4dcac:	1009883a 	mov	r4,r2
   4dcb0:	180b883a 	mov	r5,r3
}
   4dcb4:	2005883a 	mov	r2,r4
   4dcb8:	2807883a 	mov	r3,r5
   4dcbc:	e037883a 	mov	sp,fp
   4dcc0:	dfc00117 	ldw	ra,4(sp)
   4dcc4:	df000017 	ldw	fp,0(sp)
   4dcc8:	dec00204 	addi	sp,sp,8
   4dccc:	f800283a 	ret

0004dcd0 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
   4dcd0:	defff004 	addi	sp,sp,-64
   4dcd4:	dfc00f15 	stw	ra,60(sp)
   4dcd8:	df000e15 	stw	fp,56(sp)
   4dcdc:	dc000d15 	stw	r16,52(sp)
   4dce0:	df000e04 	addi	fp,sp,56
   4dce4:	e13ffb15 	stw	r4,-20(fp)
   4dce8:	e17ffc15 	stw	r5,-16(fp)
   4dcec:	e1bffd15 	stw	r6,-12(fp)
   4dcf0:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
   4dcf4:	e0bffc17 	ldw	r2,-16(fp)
   4dcf8:	e0bff715 	stw	r2,-36(fp)
   4dcfc:	e0bffd17 	ldw	r2,-12(fp)
   4dd00:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
   4dd04:	e0bffc17 	ldw	r2,-16(fp)
   4dd08:	e0bff715 	stw	r2,-36(fp)
   4dd0c:	e0bffd17 	ldw	r2,-12(fp)
   4dd10:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
   4dd14:	01400044 	movi	r5,1
   4dd18:	e13ffb17 	ldw	r4,-20(fp)
   4dd1c:	004c8300 	call	4c830 <_Balloc>
   4dd20:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
   4dd24:	e0bff417 	ldw	r2,-48(fp)
   4dd28:	10800504 	addi	r2,r2,20
   4dd2c:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
   4dd30:	e0fff817 	ldw	r3,-32(fp)
   4dd34:	00800434 	movhi	r2,16
   4dd38:	10bfffc4 	addi	r2,r2,-1
   4dd3c:	1884703a 	and	r2,r3,r2
   4dd40:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
   4dd44:	e0fff817 	ldw	r3,-32(fp)
   4dd48:	00a00034 	movhi	r2,32768
   4dd4c:	10bfffc4 	addi	r2,r2,-1
   4dd50:	1884703a 	and	r2,r3,r2
   4dd54:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
   4dd58:	e0bff817 	ldw	r2,-32(fp)
   4dd5c:	1004d53a 	srli	r2,r2,20
   4dd60:	e0bff615 	stw	r2,-40(fp)
   4dd64:	e0bff617 	ldw	r2,-40(fp)
   4dd68:	10000326 	beq	r2,zero,4dd78 <__d2b+0xa8>
    z |= Exp_msk1;
   4dd6c:	e0bffa17 	ldw	r2,-24(fp)
   4dd70:	10800434 	orhi	r2,r2,16
   4dd74:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
   4dd78:	e0bff717 	ldw	r2,-36(fp)
   4dd7c:	10002826 	beq	r2,zero,4de20 <__d2b+0x150>
    {
      y = d1;
   4dd80:	e0bff717 	ldw	r2,-36(fp)
   4dd84:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
   4dd88:	e0bff904 	addi	r2,fp,-28
   4dd8c:	1009883a 	mov	r4,r2
   4dd90:	004cda40 	call	4cda4 <__lo0bits>
   4dd94:	e0bff315 	stw	r2,-52(fp)
      if (k)
   4dd98:	e0bff317 	ldw	r2,-52(fp)
   4dd9c:	10000e26 	beq	r2,zero,4ddd8 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
   4dda0:	e0fffa17 	ldw	r3,-24(fp)
   4dda4:	01000804 	movi	r4,32
   4dda8:	e0bff317 	ldw	r2,-52(fp)
   4ddac:	2085c83a 	sub	r2,r4,r2
   4ddb0:	1886983a 	sll	r3,r3,r2
   4ddb4:	e0bff917 	ldw	r2,-28(fp)
   4ddb8:	1886b03a 	or	r3,r3,r2
   4ddbc:	e0bff517 	ldw	r2,-44(fp)
   4ddc0:	10c00015 	stw	r3,0(r2)
	  z >>= k;
   4ddc4:	e0fffa17 	ldw	r3,-24(fp)
   4ddc8:	e0bff317 	ldw	r2,-52(fp)
   4ddcc:	1884d83a 	srl	r2,r3,r2
   4ddd0:	e0bffa15 	stw	r2,-24(fp)
   4ddd4:	00000306 	br	4dde4 <__d2b+0x114>
	}
      else
	x[0] = y;
   4ddd8:	e0fff917 	ldw	r3,-28(fp)
   4dddc:	e0bff517 	ldw	r2,-44(fp)
   4dde0:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
   4dde4:	e0bff517 	ldw	r2,-44(fp)
   4dde8:	10800104 	addi	r2,r2,4
   4ddec:	e0fffa17 	ldw	r3,-24(fp)
   4ddf0:	10c00015 	stw	r3,0(r2)
   4ddf4:	10800017 	ldw	r2,0(r2)
   4ddf8:	10000226 	beq	r2,zero,4de04 <__d2b+0x134>
   4ddfc:	00800084 	movi	r2,2
   4de00:	00000106 	br	4de08 <__d2b+0x138>
   4de04:	00800044 	movi	r2,1
   4de08:	e0fff417 	ldw	r3,-48(fp)
   4de0c:	18800415 	stw	r2,16(r3)
   4de10:	e0bff417 	ldw	r2,-48(fp)
   4de14:	10800417 	ldw	r2,16(r2)
   4de18:	e0bff215 	stw	r2,-56(fp)
   4de1c:	00001006 	br	4de60 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
   4de20:	e0bffa04 	addi	r2,fp,-24
   4de24:	1009883a 	mov	r4,r2
   4de28:	004cda40 	call	4cda4 <__lo0bits>
   4de2c:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
   4de30:	e0fffa17 	ldw	r3,-24(fp)
   4de34:	e0bff517 	ldw	r2,-44(fp)
   4de38:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
   4de3c:	e0bff417 	ldw	r2,-48(fp)
   4de40:	00c00044 	movi	r3,1
   4de44:	10c00415 	stw	r3,16(r2)
   4de48:	e0bff417 	ldw	r2,-48(fp)
   4de4c:	10800417 	ldw	r2,16(r2)
   4de50:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
   4de54:	e0bff317 	ldw	r2,-52(fp)
   4de58:	10800804 	addi	r2,r2,32
   4de5c:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
   4de60:	e0bff617 	ldw	r2,-40(fp)
   4de64:	10000c26 	beq	r2,zero,4de98 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
   4de68:	e0bff617 	ldw	r2,-40(fp)
   4de6c:	10fef344 	addi	r3,r2,-1075
   4de70:	e0bff317 	ldw	r2,-52(fp)
   4de74:	1887883a 	add	r3,r3,r2
   4de78:	e0bffe17 	ldw	r2,-8(fp)
   4de7c:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
   4de80:	00c00d44 	movi	r3,53
   4de84:	e0bff317 	ldw	r2,-52(fp)
   4de88:	1887c83a 	sub	r3,r3,r2
   4de8c:	e0800217 	ldw	r2,8(fp)
   4de90:	10c00015 	stw	r3,0(r2)
   4de94:	00001706 	br	4def4 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
   4de98:	e0bff617 	ldw	r2,-40(fp)
   4de9c:	10fef384 	addi	r3,r2,-1074
   4dea0:	e0bff317 	ldw	r2,-52(fp)
   4dea4:	1887883a 	add	r3,r3,r2
   4dea8:	e0bffe17 	ldw	r2,-8(fp)
   4deac:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
   4deb0:	e0bff217 	ldw	r2,-56(fp)
   4deb4:	1020917a 	slli	r16,r2,5
   4deb8:	e0fff217 	ldw	r3,-56(fp)
   4debc:	00900034 	movhi	r2,16384
   4dec0:	10bfffc4 	addi	r2,r2,-1
   4dec4:	1885883a 	add	r2,r3,r2
   4dec8:	1085883a 	add	r2,r2,r2
   4decc:	1085883a 	add	r2,r2,r2
   4ded0:	1007883a 	mov	r3,r2
   4ded4:	e0bff517 	ldw	r2,-44(fp)
   4ded8:	10c5883a 	add	r2,r2,r3
   4dedc:	10800017 	ldw	r2,0(r2)
   4dee0:	1009883a 	mov	r4,r2
   4dee4:	004cd140 	call	4cd14 <__hi0bits>
   4dee8:	8087c83a 	sub	r3,r16,r2
   4deec:	e0800217 	ldw	r2,8(fp)
   4def0:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
   4def4:	e0bff417 	ldw	r2,-48(fp)
}
   4def8:	e6ffff04 	addi	sp,fp,-4
   4defc:	dfc00217 	ldw	ra,8(sp)
   4df00:	df000117 	ldw	fp,4(sp)
   4df04:	dc000017 	ldw	r16,0(sp)
   4df08:	dec00304 	addi	sp,sp,12
   4df0c:	f800283a 	ret

0004df10 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
   4df10:	defff504 	addi	sp,sp,-44
   4df14:	dfc00a15 	stw	ra,40(sp)
   4df18:	df000915 	stw	fp,36(sp)
   4df1c:	df000904 	addi	fp,sp,36
   4df20:	e13ffe15 	stw	r4,-8(fp)
   4df24:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
   4df28:	e0bffc04 	addi	r2,fp,-16
   4df2c:	100b883a 	mov	r5,r2
   4df30:	e13ffe17 	ldw	r4,-8(fp)
   4df34:	004dacc0 	call	4dacc <__b2d>
   4df38:	1009883a 	mov	r4,r2
   4df3c:	180b883a 	mov	r5,r3
   4df40:	e13ff815 	stw	r4,-32(fp)
   4df44:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
   4df48:	e0bffd04 	addi	r2,fp,-12
   4df4c:	100b883a 	mov	r5,r2
   4df50:	e13fff17 	ldw	r4,-4(fp)
   4df54:	004dacc0 	call	4dacc <__b2d>
   4df58:	1009883a 	mov	r4,r2
   4df5c:	180b883a 	mov	r5,r3
   4df60:	e13ffa15 	stw	r4,-24(fp)
   4df64:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
   4df68:	e0fffc17 	ldw	r3,-16(fp)
   4df6c:	e0bffd17 	ldw	r2,-12(fp)
   4df70:	1887c83a 	sub	r3,r3,r2
   4df74:	e0bffe17 	ldw	r2,-8(fp)
   4df78:	11000417 	ldw	r4,16(r2)
   4df7c:	e0bfff17 	ldw	r2,-4(fp)
   4df80:	10800417 	ldw	r2,16(r2)
   4df84:	2085c83a 	sub	r2,r4,r2
   4df88:	1004917a 	slli	r2,r2,5
   4df8c:	1885883a 	add	r2,r3,r2
   4df90:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
   4df94:	e0bff717 	ldw	r2,-36(fp)
   4df98:	0080060e 	bge	zero,r2,4dfb4 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
   4df9c:	e0fff917 	ldw	r3,-28(fp)
   4dfa0:	e0bff717 	ldw	r2,-36(fp)
   4dfa4:	1004953a 	slli	r2,r2,20
   4dfa8:	1885883a 	add	r2,r3,r2
   4dfac:	e0bff915 	stw	r2,-28(fp)
   4dfb0:	00000806 	br	4dfd4 <__ratio+0xc4>
  else
    {
      k = -k;
   4dfb4:	e0bff717 	ldw	r2,-36(fp)
   4dfb8:	0085c83a 	sub	r2,zero,r2
   4dfbc:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
   4dfc0:	e0fffb17 	ldw	r3,-20(fp)
   4dfc4:	e0bff717 	ldw	r2,-36(fp)
   4dfc8:	1004953a 	slli	r2,r2,20
   4dfcc:	1885883a 	add	r2,r3,r2
   4dfd0:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
   4dfd4:	e0bff817 	ldw	r2,-32(fp)
   4dfd8:	e0fff917 	ldw	r3,-28(fp)
   4dfdc:	e13ffa17 	ldw	r4,-24(fp)
   4dfe0:	e17ffb17 	ldw	r5,-20(fp)
   4dfe4:	200d883a 	mov	r6,r4
   4dfe8:	280f883a 	mov	r7,r5
   4dfec:	1009883a 	mov	r4,r2
   4dff0:	180b883a 	mov	r5,r3
   4dff4:	0042aa00 	call	42aa0 <__divdf3>
   4dff8:	100f883a 	mov	r7,r2
   4dffc:	1811883a 	mov	r8,r3
   4e000:	380b883a 	mov	r5,r7
   4e004:	400d883a 	mov	r6,r8
   4e008:	2807883a 	mov	r3,r5
   4e00c:	3009883a 	mov	r4,r6
}
   4e010:	1805883a 	mov	r2,r3
   4e014:	2007883a 	mov	r3,r4
   4e018:	e037883a 	mov	sp,fp
   4e01c:	dfc00117 	ldw	ra,4(sp)
   4e020:	df000017 	ldw	fp,0(sp)
   4e024:	dec00204 	addi	sp,sp,8
   4e028:	f800283a 	ret

0004e02c <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
   4e02c:	defffb04 	addi	sp,sp,-20
   4e030:	dfc00415 	stw	ra,16(sp)
   4e034:	df000315 	stw	fp,12(sp)
   4e038:	df000304 	addi	fp,sp,12
   4e03c:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
   4e040:	e03ffd15 	stw	zero,-12(fp)
   4e044:	008ffc34 	movhi	r2,16368
   4e048:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
   4e04c:	e0bfff17 	ldw	r2,-4(fp)
   4e050:	10800608 	cmpgei	r2,r2,24
   4e054:	1000141e 	bne	r2,zero,4e0a8 <_mprec_log10+0x7c>
    return tens[dig];
   4e058:	00800174 	movhi	r2,5
   4e05c:	1093e504 	addi	r2,r2,20372
   4e060:	e0ffff17 	ldw	r3,-4(fp)
   4e064:	180690fa 	slli	r3,r3,3
   4e068:	10c9883a 	add	r4,r2,r3
   4e06c:	20800017 	ldw	r2,0(r4)
   4e070:	20c00117 	ldw	r3,4(r4)
   4e074:	00001006 	br	4e0b8 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
   4e078:	000d883a 	mov	r6,zero
   4e07c:	01d00934 	movhi	r7,16420
   4e080:	e13ffd17 	ldw	r4,-12(fp)
   4e084:	e17ffe17 	ldw	r5,-8(fp)
   4e088:	004354c0 	call	4354c <__muldf3>
   4e08c:	1009883a 	mov	r4,r2
   4e090:	180b883a 	mov	r5,r3
   4e094:	e13ffd15 	stw	r4,-12(fp)
   4e098:	e17ffe15 	stw	r5,-8(fp)
      dig--;
   4e09c:	e0bfff17 	ldw	r2,-4(fp)
   4e0a0:	10bfffc4 	addi	r2,r2,-1
   4e0a4:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
   4e0a8:	e0bfff17 	ldw	r2,-4(fp)
   4e0ac:	00bff216 	blt	zero,r2,4e078 <_gp+0xfffeeea0>
    {
      v *= 10;
      dig--;
    }
  return v;
   4e0b0:	e0bffd17 	ldw	r2,-12(fp)
   4e0b4:	e0fffe17 	ldw	r3,-8(fp)
   4e0b8:	1009883a 	mov	r4,r2
   4e0bc:	180b883a 	mov	r5,r3
}
   4e0c0:	2005883a 	mov	r2,r4
   4e0c4:	2807883a 	mov	r3,r5
   4e0c8:	e037883a 	mov	sp,fp
   4e0cc:	dfc00117 	ldw	ra,4(sp)
   4e0d0:	df000017 	ldw	fp,0(sp)
   4e0d4:	dec00204 	addi	sp,sp,8
   4e0d8:	f800283a 	ret

0004e0dc <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
   4e0dc:	defff904 	addi	sp,sp,-28
   4e0e0:	df000615 	stw	fp,24(sp)
   4e0e4:	df000604 	addi	fp,sp,24
   4e0e8:	e13ffd15 	stw	r4,-12(fp)
   4e0ec:	e17ffe15 	stw	r5,-8(fp)
   4e0f0:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
   4e0f4:	e0bffe17 	ldw	r2,-8(fp)
   4e0f8:	10bfffc4 	addi	r2,r2,-1
   4e0fc:	1005d17a 	srai	r2,r2,5
   4e100:	10800044 	addi	r2,r2,1
   4e104:	1085883a 	add	r2,r2,r2
   4e108:	1085883a 	add	r2,r2,r2
   4e10c:	1007883a 	mov	r3,r2
   4e110:	e0bffd17 	ldw	r2,-12(fp)
   4e114:	10c5883a 	add	r2,r2,r3
   4e118:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
   4e11c:	e0bfff17 	ldw	r2,-4(fp)
   4e120:	10800504 	addi	r2,r2,20
   4e124:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
   4e128:	e0bfff17 	ldw	r2,-4(fp)
   4e12c:	10800417 	ldw	r2,16(r2)
   4e130:	1085883a 	add	r2,r2,r2
   4e134:	1085883a 	add	r2,r2,r2
   4e138:	1007883a 	mov	r3,r2
   4e13c:	e0bffa17 	ldw	r2,-24(fp)
   4e140:	10c5883a 	add	r2,r2,r3
   4e144:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
   4e148:	00000806 	br	4e16c <__copybits+0x90>
		*c++ = *x++;
   4e14c:	e0bffd17 	ldw	r2,-12(fp)
   4e150:	10c00104 	addi	r3,r2,4
   4e154:	e0fffd15 	stw	r3,-12(fp)
   4e158:	e0fffa17 	ldw	r3,-24(fp)
   4e15c:	19000104 	addi	r4,r3,4
   4e160:	e13ffa15 	stw	r4,-24(fp)
   4e164:	18c00017 	ldw	r3,0(r3)
   4e168:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
   4e16c:	e0fffa17 	ldw	r3,-24(fp)
   4e170:	e0bffc17 	ldw	r2,-16(fp)
   4e174:	18bff536 	bltu	r3,r2,4e14c <_gp+0xfffeef74>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   4e178:	00000406 	br	4e18c <__copybits+0xb0>
		*c++ = 0;
   4e17c:	e0bffd17 	ldw	r2,-12(fp)
   4e180:	10c00104 	addi	r3,r2,4
   4e184:	e0fffd15 	stw	r3,-12(fp)
   4e188:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   4e18c:	e0fffd17 	ldw	r3,-12(fp)
   4e190:	e0bffb17 	ldw	r2,-20(fp)
   4e194:	18bff936 	bltu	r3,r2,4e17c <_gp+0xfffeefa4>
		*c++ = 0;
}
   4e198:	0001883a 	nop
   4e19c:	e037883a 	mov	sp,fp
   4e1a0:	df000017 	ldw	fp,0(sp)
   4e1a4:	dec00104 	addi	sp,sp,4
   4e1a8:	f800283a 	ret

0004e1ac <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
   4e1ac:	defff704 	addi	sp,sp,-36
   4e1b0:	df000815 	stw	fp,32(sp)
   4e1b4:	df000804 	addi	fp,sp,32
   4e1b8:	e13ffe15 	stw	r4,-8(fp)
   4e1bc:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
   4e1c0:	e0bffe17 	ldw	r2,-8(fp)
   4e1c4:	10800504 	addi	r2,r2,20
   4e1c8:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
   4e1cc:	e0bffe17 	ldw	r2,-8(fp)
   4e1d0:	10800417 	ldw	r2,16(r2)
   4e1d4:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
   4e1d8:	e0bfff17 	ldw	r2,-4(fp)
   4e1dc:	1005d17a 	srai	r2,r2,5
   4e1e0:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
   4e1e4:	e0bff817 	ldw	r2,-32(fp)
   4e1e8:	e0fffa17 	ldw	r3,-24(fp)
   4e1ec:	1880030e 	bge	r3,r2,4e1fc <__any_on+0x50>
		n = nwds;
   4e1f0:	e0bffa17 	ldw	r2,-24(fp)
   4e1f4:	e0bff815 	stw	r2,-32(fp)
   4e1f8:	00001f06 	br	4e278 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
   4e1fc:	e0fff817 	ldw	r3,-32(fp)
   4e200:	e0bffa17 	ldw	r2,-24(fp)
   4e204:	18801c0e 	bge	r3,r2,4e278 <__any_on+0xcc>
   4e208:	e0bfff17 	ldw	r2,-4(fp)
   4e20c:	108007cc 	andi	r2,r2,31
   4e210:	e0bfff15 	stw	r2,-4(fp)
   4e214:	e0bfff17 	ldw	r2,-4(fp)
   4e218:	10001726 	beq	r2,zero,4e278 <__any_on+0xcc>
		x1 = x2 = x[n];
   4e21c:	e0bff817 	ldw	r2,-32(fp)
   4e220:	1085883a 	add	r2,r2,r2
   4e224:	1085883a 	add	r2,r2,r2
   4e228:	1007883a 	mov	r3,r2
   4e22c:	e0bff917 	ldw	r2,-28(fp)
   4e230:	10c5883a 	add	r2,r2,r3
   4e234:	10800017 	ldw	r2,0(r2)
   4e238:	e0bffb15 	stw	r2,-20(fp)
   4e23c:	e0bffb17 	ldw	r2,-20(fp)
   4e240:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
   4e244:	e0fffc17 	ldw	r3,-16(fp)
   4e248:	e0bfff17 	ldw	r2,-4(fp)
   4e24c:	1884d83a 	srl	r2,r3,r2
   4e250:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
   4e254:	e0fffc17 	ldw	r3,-16(fp)
   4e258:	e0bfff17 	ldw	r2,-4(fp)
   4e25c:	1884983a 	sll	r2,r3,r2
   4e260:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
   4e264:	e0fffc17 	ldw	r3,-16(fp)
   4e268:	e0bffb17 	ldw	r2,-20(fp)
   4e26c:	18800226 	beq	r3,r2,4e278 <__any_on+0xcc>
			return 1;
   4e270:	00800044 	movi	r2,1
   4e274:	00001606 	br	4e2d0 <__any_on+0x124>
		}
	x0 = x;
   4e278:	e0bff917 	ldw	r2,-28(fp)
   4e27c:	e0bffd15 	stw	r2,-12(fp)
	x += n;
   4e280:	e0bff817 	ldw	r2,-32(fp)
   4e284:	1085883a 	add	r2,r2,r2
   4e288:	1085883a 	add	r2,r2,r2
   4e28c:	1007883a 	mov	r3,r2
   4e290:	e0bff917 	ldw	r2,-28(fp)
   4e294:	10c5883a 	add	r2,r2,r3
   4e298:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
   4e29c:	00000806 	br	4e2c0 <__any_on+0x114>
		if (*--x)
   4e2a0:	e0bff917 	ldw	r2,-28(fp)
   4e2a4:	10bfff04 	addi	r2,r2,-4
   4e2a8:	e0bff915 	stw	r2,-28(fp)
   4e2ac:	e0bff917 	ldw	r2,-28(fp)
   4e2b0:	10800017 	ldw	r2,0(r2)
   4e2b4:	10000226 	beq	r2,zero,4e2c0 <__any_on+0x114>
			return 1;
   4e2b8:	00800044 	movi	r2,1
   4e2bc:	00000406 	br	4e2d0 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
   4e2c0:	e0bff917 	ldw	r2,-28(fp)
   4e2c4:	e0fffd17 	ldw	r3,-12(fp)
   4e2c8:	18bff536 	bltu	r3,r2,4e2a0 <_gp+0xfffef0c8>
		if (*--x)
			return 1;
	return 0;
   4e2cc:	0005883a 	mov	r2,zero
}
   4e2d0:	e037883a 	mov	sp,fp
   4e2d4:	df000017 	ldw	fp,0(sp)
   4e2d8:	dec00104 	addi	sp,sp,4
   4e2dc:	f800283a 	ret

0004e2e0 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
   4e2e0:	deffe104 	addi	sp,sp,-124
   4e2e4:	dfc01e15 	stw	ra,120(sp)
   4e2e8:	df001d15 	stw	fp,116(sp)
   4e2ec:	df001d04 	addi	fp,sp,116
   4e2f0:	e13ffd15 	stw	r4,-12(fp)
   4e2f4:	e17ffe15 	stw	r5,-8(fp)
   4e2f8:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   4e2fc:	e0bffe17 	ldw	r2,-8(fp)
   4e300:	1000041e 	bne	r2,zero,4e314 <_realloc_r+0x34>
   4e304:	e17fff17 	ldw	r5,-4(fp)
   4e308:	e13ffd17 	ldw	r4,-12(fp)
   4e30c:	004b5a40 	call	4b5a4 <_malloc_r>
   4e310:	0002ea06 	br	4eebc <_realloc_r+0xbdc>

  MALLOC_LOCK;
   4e314:	e13ffd17 	ldw	r4,-12(fp)
   4e318:	0052a200 	call	52a20 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
   4e31c:	e0bffe17 	ldw	r2,-8(fp)
   4e320:	10bffe04 	addi	r2,r2,-8
   4e324:	e0bfef15 	stw	r2,-68(fp)
   4e328:	e0bfef17 	ldw	r2,-68(fp)
   4e32c:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
   4e330:	e0bfef17 	ldw	r2,-68(fp)
   4e334:	10c00117 	ldw	r3,4(r2)
   4e338:	00bfff04 	movi	r2,-4
   4e33c:	1884703a 	and	r2,r3,r2
   4e340:	e0bff015 	stw	r2,-64(fp)
   4e344:	e0bff017 	ldw	r2,-64(fp)
   4e348:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
   4e34c:	e0bfff17 	ldw	r2,-4(fp)
   4e350:	108002c4 	addi	r2,r2,11
   4e354:	108005f0 	cmpltui	r2,r2,23
   4e358:	1000051e 	bne	r2,zero,4e370 <_realloc_r+0x90>
   4e35c:	e0bfff17 	ldw	r2,-4(fp)
   4e360:	10c002c4 	addi	r3,r2,11
   4e364:	00bffe04 	movi	r2,-8
   4e368:	1884703a 	and	r2,r3,r2
   4e36c:	00000106 	br	4e374 <_realloc_r+0x94>
   4e370:	00800404 	movi	r2,16
   4e374:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   4e378:	e0bff117 	ldw	r2,-60(fp)
   4e37c:	10000316 	blt	r2,zero,4e38c <_realloc_r+0xac>
   4e380:	e0fff117 	ldw	r3,-60(fp)
   4e384:	e0bfff17 	ldw	r2,-4(fp)
   4e388:	1880052e 	bgeu	r3,r2,4e3a0 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
   4e38c:	e0bffd17 	ldw	r2,-12(fp)
   4e390:	00c00304 	movi	r3,12
   4e394:	10c00015 	stw	r3,0(r2)
    return 0;
   4e398:	0005883a 	mov	r2,zero
   4e39c:	0002c706 	br	4eebc <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   4e3a0:	e0fff017 	ldw	r3,-64(fp)
   4e3a4:	e0bff117 	ldw	r2,-60(fp)
   4e3a8:	18828b0e 	bge	r3,r2,4edd8 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
   4e3ac:	e0ffef17 	ldw	r3,-68(fp)
   4e3b0:	e0bff017 	ldw	r2,-64(fp)
   4e3b4:	1885883a 	add	r2,r3,r2
   4e3b8:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
   4e3bc:	00800174 	movhi	r2,5
   4e3c0:	1096f204 	addi	r2,r2,23496
   4e3c4:	10c00217 	ldw	r3,8(r2)
   4e3c8:	e0bfe517 	ldw	r2,-108(fp)
   4e3cc:	18800926 	beq	r3,r2,4e3f4 <_realloc_r+0x114>
   4e3d0:	e0bfe517 	ldw	r2,-108(fp)
   4e3d4:	10c00117 	ldw	r3,4(r2)
   4e3d8:	00bfff84 	movi	r2,-2
   4e3dc:	1884703a 	and	r2,r3,r2
   4e3e0:	e0ffe517 	ldw	r3,-108(fp)
   4e3e4:	1885883a 	add	r2,r3,r2
   4e3e8:	10800117 	ldw	r2,4(r2)
   4e3ec:	1080004c 	andi	r2,r2,1
   4e3f0:	1000461e 	bne	r2,zero,4e50c <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
   4e3f4:	e0bfe517 	ldw	r2,-108(fp)
   4e3f8:	10c00117 	ldw	r3,4(r2)
   4e3fc:	00bfff04 	movi	r2,-4
   4e400:	1884703a 	and	r2,r3,r2
   4e404:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
   4e408:	00800174 	movhi	r2,5
   4e40c:	1096f204 	addi	r2,r2,23496
   4e410:	10c00217 	ldw	r3,8(r2)
   4e414:	e0bfe517 	ldw	r2,-108(fp)
   4e418:	1880251e 	bne	r3,r2,4e4b0 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
   4e41c:	e0ffe617 	ldw	r3,-104(fp)
   4e420:	e0bfe417 	ldw	r2,-112(fp)
   4e424:	1885883a 	add	r2,r3,r2
   4e428:	1007883a 	mov	r3,r2
   4e42c:	e0bff117 	ldw	r2,-60(fp)
   4e430:	10800404 	addi	r2,r2,16
   4e434:	18803816 	blt	r3,r2,4e518 <_realloc_r+0x238>
        {
          newsize += nextsize;
   4e438:	e0ffe417 	ldw	r3,-112(fp)
   4e43c:	e0bfe617 	ldw	r2,-104(fp)
   4e440:	1885883a 	add	r2,r3,r2
   4e444:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
   4e448:	00800174 	movhi	r2,5
   4e44c:	1096f204 	addi	r2,r2,23496
   4e450:	e13fef17 	ldw	r4,-68(fp)
   4e454:	e0fff117 	ldw	r3,-60(fp)
   4e458:	20c7883a 	add	r3,r4,r3
   4e45c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
   4e460:	00800174 	movhi	r2,5
   4e464:	1096f204 	addi	r2,r2,23496
   4e468:	10800217 	ldw	r2,8(r2)
   4e46c:	e13fe417 	ldw	r4,-112(fp)
   4e470:	e0fff117 	ldw	r3,-60(fp)
   4e474:	20c7c83a 	sub	r3,r4,r3
   4e478:	18c00054 	ori	r3,r3,1
   4e47c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
   4e480:	e0bfef17 	ldw	r2,-68(fp)
   4e484:	10800117 	ldw	r2,4(r2)
   4e488:	10c0004c 	andi	r3,r2,1
   4e48c:	e0bff117 	ldw	r2,-60(fp)
   4e490:	1886b03a 	or	r3,r3,r2
   4e494:	e0bfef17 	ldw	r2,-68(fp)
   4e498:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
   4e49c:	e13ffd17 	ldw	r4,-12(fp)
   4e4a0:	0052a440 	call	52a44 <__malloc_unlock>
          return chunk2mem(oldp);
   4e4a4:	e0bfef17 	ldw	r2,-68(fp)
   4e4a8:	10800204 	addi	r2,r2,8
   4e4ac:	00028306 	br	4eebc <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
   4e4b0:	e0ffe617 	ldw	r3,-104(fp)
   4e4b4:	e0bfe417 	ldw	r2,-112(fp)
   4e4b8:	1885883a 	add	r2,r3,r2
   4e4bc:	1007883a 	mov	r3,r2
   4e4c0:	e0bff117 	ldw	r2,-60(fp)
   4e4c4:	18801416 	blt	r3,r2,4e518 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
   4e4c8:	e0bfe517 	ldw	r2,-108(fp)
   4e4cc:	10800317 	ldw	r2,12(r2)
   4e4d0:	e0bff215 	stw	r2,-56(fp)
   4e4d4:	e0bfe517 	ldw	r2,-108(fp)
   4e4d8:	10800217 	ldw	r2,8(r2)
   4e4dc:	e0bff315 	stw	r2,-52(fp)
   4e4e0:	e0bff317 	ldw	r2,-52(fp)
   4e4e4:	e0fff217 	ldw	r3,-56(fp)
   4e4e8:	10c00315 	stw	r3,12(r2)
   4e4ec:	e0bff217 	ldw	r2,-56(fp)
   4e4f0:	e0fff317 	ldw	r3,-52(fp)
   4e4f4:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
   4e4f8:	e0ffe417 	ldw	r3,-112(fp)
   4e4fc:	e0bfe617 	ldw	r2,-104(fp)
   4e500:	1885883a 	add	r2,r3,r2
   4e504:	e0bfe415 	stw	r2,-112(fp)
        goto split;
   4e508:	00023306 	br	4edd8 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
   4e50c:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
   4e510:	e03fe615 	stw	zero,-104(fp)
   4e514:	00000106 	br	4e51c <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
   4e518:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   4e51c:	e0bfef17 	ldw	r2,-68(fp)
   4e520:	10800117 	ldw	r2,4(r2)
   4e524:	1080004c 	andi	r2,r2,1
   4e528:	1001a91e 	bne	r2,zero,4ebd0 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
   4e52c:	e0bfef17 	ldw	r2,-68(fp)
   4e530:	10800017 	ldw	r2,0(r2)
   4e534:	0085c83a 	sub	r2,zero,r2
   4e538:	e0ffef17 	ldw	r3,-68(fp)
   4e53c:	1885883a 	add	r2,r3,r2
   4e540:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
   4e544:	e0bff417 	ldw	r2,-48(fp)
   4e548:	10c00117 	ldw	r3,4(r2)
   4e54c:	00bfff04 	movi	r2,-4
   4e550:	1884703a 	and	r2,r3,r2
   4e554:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
   4e558:	e0bfe517 	ldw	r2,-108(fp)
   4e55c:	10012226 	beq	r2,zero,4e9e8 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
   4e560:	00800174 	movhi	r2,5
   4e564:	1096f204 	addi	r2,r2,23496
   4e568:	10c00217 	ldw	r3,8(r2)
   4e56c:	e0bfe517 	ldw	r2,-108(fp)
   4e570:	1880951e 	bne	r3,r2,4e7c8 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
   4e574:	e0ffe617 	ldw	r3,-104(fp)
   4e578:	e0bff517 	ldw	r2,-44(fp)
   4e57c:	1887883a 	add	r3,r3,r2
   4e580:	e0bfe417 	ldw	r2,-112(fp)
   4e584:	1885883a 	add	r2,r3,r2
   4e588:	1007883a 	mov	r3,r2
   4e58c:	e0bff117 	ldw	r2,-60(fp)
   4e590:	10800404 	addi	r2,r2,16
   4e594:	18811416 	blt	r3,r2,4e9e8 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
   4e598:	e0bff417 	ldw	r2,-48(fp)
   4e59c:	10800317 	ldw	r2,12(r2)
   4e5a0:	e0bff215 	stw	r2,-56(fp)
   4e5a4:	e0bff417 	ldw	r2,-48(fp)
   4e5a8:	10800217 	ldw	r2,8(r2)
   4e5ac:	e0bff315 	stw	r2,-52(fp)
   4e5b0:	e0bff317 	ldw	r2,-52(fp)
   4e5b4:	e0fff217 	ldw	r3,-56(fp)
   4e5b8:	10c00315 	stw	r3,12(r2)
   4e5bc:	e0bff217 	ldw	r2,-56(fp)
   4e5c0:	e0fff317 	ldw	r3,-52(fp)
   4e5c4:	10c00215 	stw	r3,8(r2)
            newp = prev;
   4e5c8:	e0bff417 	ldw	r2,-48(fp)
   4e5cc:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
   4e5d0:	e0fff517 	ldw	r3,-44(fp)
   4e5d4:	e0bfe617 	ldw	r2,-104(fp)
   4e5d8:	1885883a 	add	r2,r3,r2
   4e5dc:	e0ffe417 	ldw	r3,-112(fp)
   4e5e0:	1885883a 	add	r2,r3,r2
   4e5e4:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
   4e5e8:	e0bfe317 	ldw	r2,-116(fp)
   4e5ec:	10800204 	addi	r2,r2,8
   4e5f0:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4e5f4:	e0bff017 	ldw	r2,-64(fp)
   4e5f8:	10bfff04 	addi	r2,r2,-4
   4e5fc:	e0bff715 	stw	r2,-36(fp)
   4e600:	e0bff717 	ldw	r2,-36(fp)
   4e604:	10800968 	cmpgeui	r2,r2,37
   4e608:	1000521e 	bne	r2,zero,4e754 <_realloc_r+0x474>
   4e60c:	e0bffe17 	ldw	r2,-8(fp)
   4e610:	e0bfe715 	stw	r2,-100(fp)
   4e614:	e0bff617 	ldw	r2,-40(fp)
   4e618:	e0bfe815 	stw	r2,-96(fp)
   4e61c:	e0bff717 	ldw	r2,-36(fp)
   4e620:	10800530 	cmpltui	r2,r2,20
   4e624:	1000361e 	bne	r2,zero,4e700 <_realloc_r+0x420>
   4e628:	e0bfe817 	ldw	r2,-96(fp)
   4e62c:	10c00104 	addi	r3,r2,4
   4e630:	e0ffe815 	stw	r3,-96(fp)
   4e634:	e0ffe717 	ldw	r3,-100(fp)
   4e638:	19000104 	addi	r4,r3,4
   4e63c:	e13fe715 	stw	r4,-100(fp)
   4e640:	18c00017 	ldw	r3,0(r3)
   4e644:	10c00015 	stw	r3,0(r2)
   4e648:	e0bfe817 	ldw	r2,-96(fp)
   4e64c:	10c00104 	addi	r3,r2,4
   4e650:	e0ffe815 	stw	r3,-96(fp)
   4e654:	e0ffe717 	ldw	r3,-100(fp)
   4e658:	19000104 	addi	r4,r3,4
   4e65c:	e13fe715 	stw	r4,-100(fp)
   4e660:	18c00017 	ldw	r3,0(r3)
   4e664:	10c00015 	stw	r3,0(r2)
   4e668:	e0bff717 	ldw	r2,-36(fp)
   4e66c:	10800730 	cmpltui	r2,r2,28
   4e670:	1000231e 	bne	r2,zero,4e700 <_realloc_r+0x420>
   4e674:	e0bfe817 	ldw	r2,-96(fp)
   4e678:	10c00104 	addi	r3,r2,4
   4e67c:	e0ffe815 	stw	r3,-96(fp)
   4e680:	e0ffe717 	ldw	r3,-100(fp)
   4e684:	19000104 	addi	r4,r3,4
   4e688:	e13fe715 	stw	r4,-100(fp)
   4e68c:	18c00017 	ldw	r3,0(r3)
   4e690:	10c00015 	stw	r3,0(r2)
   4e694:	e0bfe817 	ldw	r2,-96(fp)
   4e698:	10c00104 	addi	r3,r2,4
   4e69c:	e0ffe815 	stw	r3,-96(fp)
   4e6a0:	e0ffe717 	ldw	r3,-100(fp)
   4e6a4:	19000104 	addi	r4,r3,4
   4e6a8:	e13fe715 	stw	r4,-100(fp)
   4e6ac:	18c00017 	ldw	r3,0(r3)
   4e6b0:	10c00015 	stw	r3,0(r2)
   4e6b4:	e0bff717 	ldw	r2,-36(fp)
   4e6b8:	10800930 	cmpltui	r2,r2,36
   4e6bc:	1000101e 	bne	r2,zero,4e700 <_realloc_r+0x420>
   4e6c0:	e0bfe817 	ldw	r2,-96(fp)
   4e6c4:	10c00104 	addi	r3,r2,4
   4e6c8:	e0ffe815 	stw	r3,-96(fp)
   4e6cc:	e0ffe717 	ldw	r3,-100(fp)
   4e6d0:	19000104 	addi	r4,r3,4
   4e6d4:	e13fe715 	stw	r4,-100(fp)
   4e6d8:	18c00017 	ldw	r3,0(r3)
   4e6dc:	10c00015 	stw	r3,0(r2)
   4e6e0:	e0bfe817 	ldw	r2,-96(fp)
   4e6e4:	10c00104 	addi	r3,r2,4
   4e6e8:	e0ffe815 	stw	r3,-96(fp)
   4e6ec:	e0ffe717 	ldw	r3,-100(fp)
   4e6f0:	19000104 	addi	r4,r3,4
   4e6f4:	e13fe715 	stw	r4,-100(fp)
   4e6f8:	18c00017 	ldw	r3,0(r3)
   4e6fc:	10c00015 	stw	r3,0(r2)
   4e700:	e0bfe817 	ldw	r2,-96(fp)
   4e704:	10c00104 	addi	r3,r2,4
   4e708:	e0ffe815 	stw	r3,-96(fp)
   4e70c:	e0ffe717 	ldw	r3,-100(fp)
   4e710:	19000104 	addi	r4,r3,4
   4e714:	e13fe715 	stw	r4,-100(fp)
   4e718:	18c00017 	ldw	r3,0(r3)
   4e71c:	10c00015 	stw	r3,0(r2)
   4e720:	e0bfe817 	ldw	r2,-96(fp)
   4e724:	10c00104 	addi	r3,r2,4
   4e728:	e0ffe815 	stw	r3,-96(fp)
   4e72c:	e0ffe717 	ldw	r3,-100(fp)
   4e730:	19000104 	addi	r4,r3,4
   4e734:	e13fe715 	stw	r4,-100(fp)
   4e738:	18c00017 	ldw	r3,0(r3)
   4e73c:	10c00015 	stw	r3,0(r2)
   4e740:	e0bfe717 	ldw	r2,-100(fp)
   4e744:	10c00017 	ldw	r3,0(r2)
   4e748:	e0bfe817 	ldw	r2,-96(fp)
   4e74c:	10c00015 	stw	r3,0(r2)
   4e750:	00000406 	br	4e764 <_realloc_r+0x484>
   4e754:	e1bff717 	ldw	r6,-36(fp)
   4e758:	e17ffe17 	ldw	r5,-8(fp)
   4e75c:	e13ff617 	ldw	r4,-40(fp)
   4e760:	004c4640 	call	4c464 <memmove>
            top = chunk_at_offset(newp, nb);
   4e764:	00800174 	movhi	r2,5
   4e768:	1096f204 	addi	r2,r2,23496
   4e76c:	e13fe317 	ldw	r4,-116(fp)
   4e770:	e0fff117 	ldw	r3,-60(fp)
   4e774:	20c7883a 	add	r3,r4,r3
   4e778:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
   4e77c:	00800174 	movhi	r2,5
   4e780:	1096f204 	addi	r2,r2,23496
   4e784:	10800217 	ldw	r2,8(r2)
   4e788:	e13fe417 	ldw	r4,-112(fp)
   4e78c:	e0fff117 	ldw	r3,-60(fp)
   4e790:	20c7c83a 	sub	r3,r4,r3
   4e794:	18c00054 	ori	r3,r3,1
   4e798:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
   4e79c:	e0bfe317 	ldw	r2,-116(fp)
   4e7a0:	10800117 	ldw	r2,4(r2)
   4e7a4:	10c0004c 	andi	r3,r2,1
   4e7a8:	e0bff117 	ldw	r2,-60(fp)
   4e7ac:	1886b03a 	or	r3,r3,r2
   4e7b0:	e0bfe317 	ldw	r2,-116(fp)
   4e7b4:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
   4e7b8:	e13ffd17 	ldw	r4,-12(fp)
   4e7bc:	0052a440 	call	52a44 <__malloc_unlock>
            return newmem;
   4e7c0:	e0bff617 	ldw	r2,-40(fp)
   4e7c4:	0001bd06 	br	4eebc <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
   4e7c8:	e0ffe617 	ldw	r3,-104(fp)
   4e7cc:	e0bff517 	ldw	r2,-44(fp)
   4e7d0:	1887883a 	add	r3,r3,r2
   4e7d4:	e0bfe417 	ldw	r2,-112(fp)
   4e7d8:	1885883a 	add	r2,r3,r2
   4e7dc:	1007883a 	mov	r3,r2
   4e7e0:	e0bff117 	ldw	r2,-60(fp)
   4e7e4:	18808016 	blt	r3,r2,4e9e8 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
   4e7e8:	e0bfe517 	ldw	r2,-108(fp)
   4e7ec:	10800317 	ldw	r2,12(r2)
   4e7f0:	e0bff215 	stw	r2,-56(fp)
   4e7f4:	e0bfe517 	ldw	r2,-108(fp)
   4e7f8:	10800217 	ldw	r2,8(r2)
   4e7fc:	e0bff315 	stw	r2,-52(fp)
   4e800:	e0bff317 	ldw	r2,-52(fp)
   4e804:	e0fff217 	ldw	r3,-56(fp)
   4e808:	10c00315 	stw	r3,12(r2)
   4e80c:	e0bff217 	ldw	r2,-56(fp)
   4e810:	e0fff317 	ldw	r3,-52(fp)
   4e814:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
   4e818:	e0bff417 	ldw	r2,-48(fp)
   4e81c:	10800317 	ldw	r2,12(r2)
   4e820:	e0bff215 	stw	r2,-56(fp)
   4e824:	e0bff417 	ldw	r2,-48(fp)
   4e828:	10800217 	ldw	r2,8(r2)
   4e82c:	e0bff315 	stw	r2,-52(fp)
   4e830:	e0bff317 	ldw	r2,-52(fp)
   4e834:	e0fff217 	ldw	r3,-56(fp)
   4e838:	10c00315 	stw	r3,12(r2)
   4e83c:	e0bff217 	ldw	r2,-56(fp)
   4e840:	e0fff317 	ldw	r3,-52(fp)
   4e844:	10c00215 	stw	r3,8(r2)
          newp = prev;
   4e848:	e0bff417 	ldw	r2,-48(fp)
   4e84c:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
   4e850:	e0ffe617 	ldw	r3,-104(fp)
   4e854:	e0bff517 	ldw	r2,-44(fp)
   4e858:	1885883a 	add	r2,r3,r2
   4e85c:	e0ffe417 	ldw	r3,-112(fp)
   4e860:	1885883a 	add	r2,r3,r2
   4e864:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
   4e868:	e0bfe317 	ldw	r2,-116(fp)
   4e86c:	10800204 	addi	r2,r2,8
   4e870:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4e874:	e0bff017 	ldw	r2,-64(fp)
   4e878:	10bfff04 	addi	r2,r2,-4
   4e87c:	e0bff815 	stw	r2,-32(fp)
   4e880:	e0bff817 	ldw	r2,-32(fp)
   4e884:	10800968 	cmpgeui	r2,r2,37
   4e888:	1000521e 	bne	r2,zero,4e9d4 <_realloc_r+0x6f4>
   4e88c:	e0bffe17 	ldw	r2,-8(fp)
   4e890:	e0bfe915 	stw	r2,-92(fp)
   4e894:	e0bff617 	ldw	r2,-40(fp)
   4e898:	e0bfea15 	stw	r2,-88(fp)
   4e89c:	e0bff817 	ldw	r2,-32(fp)
   4e8a0:	10800530 	cmpltui	r2,r2,20
   4e8a4:	1000361e 	bne	r2,zero,4e980 <_realloc_r+0x6a0>
   4e8a8:	e0bfea17 	ldw	r2,-88(fp)
   4e8ac:	10c00104 	addi	r3,r2,4
   4e8b0:	e0ffea15 	stw	r3,-88(fp)
   4e8b4:	e0ffe917 	ldw	r3,-92(fp)
   4e8b8:	19000104 	addi	r4,r3,4
   4e8bc:	e13fe915 	stw	r4,-92(fp)
   4e8c0:	18c00017 	ldw	r3,0(r3)
   4e8c4:	10c00015 	stw	r3,0(r2)
   4e8c8:	e0bfea17 	ldw	r2,-88(fp)
   4e8cc:	10c00104 	addi	r3,r2,4
   4e8d0:	e0ffea15 	stw	r3,-88(fp)
   4e8d4:	e0ffe917 	ldw	r3,-92(fp)
   4e8d8:	19000104 	addi	r4,r3,4
   4e8dc:	e13fe915 	stw	r4,-92(fp)
   4e8e0:	18c00017 	ldw	r3,0(r3)
   4e8e4:	10c00015 	stw	r3,0(r2)
   4e8e8:	e0bff817 	ldw	r2,-32(fp)
   4e8ec:	10800730 	cmpltui	r2,r2,28
   4e8f0:	1000231e 	bne	r2,zero,4e980 <_realloc_r+0x6a0>
   4e8f4:	e0bfea17 	ldw	r2,-88(fp)
   4e8f8:	10c00104 	addi	r3,r2,4
   4e8fc:	e0ffea15 	stw	r3,-88(fp)
   4e900:	e0ffe917 	ldw	r3,-92(fp)
   4e904:	19000104 	addi	r4,r3,4
   4e908:	e13fe915 	stw	r4,-92(fp)
   4e90c:	18c00017 	ldw	r3,0(r3)
   4e910:	10c00015 	stw	r3,0(r2)
   4e914:	e0bfea17 	ldw	r2,-88(fp)
   4e918:	10c00104 	addi	r3,r2,4
   4e91c:	e0ffea15 	stw	r3,-88(fp)
   4e920:	e0ffe917 	ldw	r3,-92(fp)
   4e924:	19000104 	addi	r4,r3,4
   4e928:	e13fe915 	stw	r4,-92(fp)
   4e92c:	18c00017 	ldw	r3,0(r3)
   4e930:	10c00015 	stw	r3,0(r2)
   4e934:	e0bff817 	ldw	r2,-32(fp)
   4e938:	10800930 	cmpltui	r2,r2,36
   4e93c:	1000101e 	bne	r2,zero,4e980 <_realloc_r+0x6a0>
   4e940:	e0bfea17 	ldw	r2,-88(fp)
   4e944:	10c00104 	addi	r3,r2,4
   4e948:	e0ffea15 	stw	r3,-88(fp)
   4e94c:	e0ffe917 	ldw	r3,-92(fp)
   4e950:	19000104 	addi	r4,r3,4
   4e954:	e13fe915 	stw	r4,-92(fp)
   4e958:	18c00017 	ldw	r3,0(r3)
   4e95c:	10c00015 	stw	r3,0(r2)
   4e960:	e0bfea17 	ldw	r2,-88(fp)
   4e964:	10c00104 	addi	r3,r2,4
   4e968:	e0ffea15 	stw	r3,-88(fp)
   4e96c:	e0ffe917 	ldw	r3,-92(fp)
   4e970:	19000104 	addi	r4,r3,4
   4e974:	e13fe915 	stw	r4,-92(fp)
   4e978:	18c00017 	ldw	r3,0(r3)
   4e97c:	10c00015 	stw	r3,0(r2)
   4e980:	e0bfea17 	ldw	r2,-88(fp)
   4e984:	10c00104 	addi	r3,r2,4
   4e988:	e0ffea15 	stw	r3,-88(fp)
   4e98c:	e0ffe917 	ldw	r3,-92(fp)
   4e990:	19000104 	addi	r4,r3,4
   4e994:	e13fe915 	stw	r4,-92(fp)
   4e998:	18c00017 	ldw	r3,0(r3)
   4e99c:	10c00015 	stw	r3,0(r2)
   4e9a0:	e0bfea17 	ldw	r2,-88(fp)
   4e9a4:	10c00104 	addi	r3,r2,4
   4e9a8:	e0ffea15 	stw	r3,-88(fp)
   4e9ac:	e0ffe917 	ldw	r3,-92(fp)
   4e9b0:	19000104 	addi	r4,r3,4
   4e9b4:	e13fe915 	stw	r4,-92(fp)
   4e9b8:	18c00017 	ldw	r3,0(r3)
   4e9bc:	10c00015 	stw	r3,0(r2)
   4e9c0:	e0bfe917 	ldw	r2,-92(fp)
   4e9c4:	10c00017 	ldw	r3,0(r2)
   4e9c8:	e0bfea17 	ldw	r2,-88(fp)
   4e9cc:	10c00015 	stw	r3,0(r2)
          goto split;
   4e9d0:	00010106 	br	4edd8 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4e9d4:	e1bff817 	ldw	r6,-32(fp)
   4e9d8:	e17ffe17 	ldw	r5,-8(fp)
   4e9dc:	e13ff617 	ldw	r4,-40(fp)
   4e9e0:	004c4640 	call	4c464 <memmove>
          goto split;
   4e9e4:	0000fc06 	br	4edd8 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
   4e9e8:	e0bff417 	ldw	r2,-48(fp)
   4e9ec:	10007826 	beq	r2,zero,4ebd0 <_realloc_r+0x8f0>
   4e9f0:	e0fff517 	ldw	r3,-44(fp)
   4e9f4:	e0bfe417 	ldw	r2,-112(fp)
   4e9f8:	1885883a 	add	r2,r3,r2
   4e9fc:	1007883a 	mov	r3,r2
   4ea00:	e0bff117 	ldw	r2,-60(fp)
   4ea04:	18807216 	blt	r3,r2,4ebd0 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
   4ea08:	e0bff417 	ldw	r2,-48(fp)
   4ea0c:	10800317 	ldw	r2,12(r2)
   4ea10:	e0bff215 	stw	r2,-56(fp)
   4ea14:	e0bff417 	ldw	r2,-48(fp)
   4ea18:	10800217 	ldw	r2,8(r2)
   4ea1c:	e0bff315 	stw	r2,-52(fp)
   4ea20:	e0bff317 	ldw	r2,-52(fp)
   4ea24:	e0fff217 	ldw	r3,-56(fp)
   4ea28:	10c00315 	stw	r3,12(r2)
   4ea2c:	e0bff217 	ldw	r2,-56(fp)
   4ea30:	e0fff317 	ldw	r3,-52(fp)
   4ea34:	10c00215 	stw	r3,8(r2)
        newp = prev;
   4ea38:	e0bff417 	ldw	r2,-48(fp)
   4ea3c:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
   4ea40:	e0ffe417 	ldw	r3,-112(fp)
   4ea44:	e0bff517 	ldw	r2,-44(fp)
   4ea48:	1885883a 	add	r2,r3,r2
   4ea4c:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
   4ea50:	e0bfe317 	ldw	r2,-116(fp)
   4ea54:	10800204 	addi	r2,r2,8
   4ea58:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4ea5c:	e0bff017 	ldw	r2,-64(fp)
   4ea60:	10bfff04 	addi	r2,r2,-4
   4ea64:	e0bff915 	stw	r2,-28(fp)
   4ea68:	e0bff917 	ldw	r2,-28(fp)
   4ea6c:	10800968 	cmpgeui	r2,r2,37
   4ea70:	1000521e 	bne	r2,zero,4ebbc <_realloc_r+0x8dc>
   4ea74:	e0bffe17 	ldw	r2,-8(fp)
   4ea78:	e0bfeb15 	stw	r2,-84(fp)
   4ea7c:	e0bff617 	ldw	r2,-40(fp)
   4ea80:	e0bfec15 	stw	r2,-80(fp)
   4ea84:	e0bff917 	ldw	r2,-28(fp)
   4ea88:	10800530 	cmpltui	r2,r2,20
   4ea8c:	1000361e 	bne	r2,zero,4eb68 <_realloc_r+0x888>
   4ea90:	e0bfec17 	ldw	r2,-80(fp)
   4ea94:	10c00104 	addi	r3,r2,4
   4ea98:	e0ffec15 	stw	r3,-80(fp)
   4ea9c:	e0ffeb17 	ldw	r3,-84(fp)
   4eaa0:	19000104 	addi	r4,r3,4
   4eaa4:	e13feb15 	stw	r4,-84(fp)
   4eaa8:	18c00017 	ldw	r3,0(r3)
   4eaac:	10c00015 	stw	r3,0(r2)
   4eab0:	e0bfec17 	ldw	r2,-80(fp)
   4eab4:	10c00104 	addi	r3,r2,4
   4eab8:	e0ffec15 	stw	r3,-80(fp)
   4eabc:	e0ffeb17 	ldw	r3,-84(fp)
   4eac0:	19000104 	addi	r4,r3,4
   4eac4:	e13feb15 	stw	r4,-84(fp)
   4eac8:	18c00017 	ldw	r3,0(r3)
   4eacc:	10c00015 	stw	r3,0(r2)
   4ead0:	e0bff917 	ldw	r2,-28(fp)
   4ead4:	10800730 	cmpltui	r2,r2,28
   4ead8:	1000231e 	bne	r2,zero,4eb68 <_realloc_r+0x888>
   4eadc:	e0bfec17 	ldw	r2,-80(fp)
   4eae0:	10c00104 	addi	r3,r2,4
   4eae4:	e0ffec15 	stw	r3,-80(fp)
   4eae8:	e0ffeb17 	ldw	r3,-84(fp)
   4eaec:	19000104 	addi	r4,r3,4
   4eaf0:	e13feb15 	stw	r4,-84(fp)
   4eaf4:	18c00017 	ldw	r3,0(r3)
   4eaf8:	10c00015 	stw	r3,0(r2)
   4eafc:	e0bfec17 	ldw	r2,-80(fp)
   4eb00:	10c00104 	addi	r3,r2,4
   4eb04:	e0ffec15 	stw	r3,-80(fp)
   4eb08:	e0ffeb17 	ldw	r3,-84(fp)
   4eb0c:	19000104 	addi	r4,r3,4
   4eb10:	e13feb15 	stw	r4,-84(fp)
   4eb14:	18c00017 	ldw	r3,0(r3)
   4eb18:	10c00015 	stw	r3,0(r2)
   4eb1c:	e0bff917 	ldw	r2,-28(fp)
   4eb20:	10800930 	cmpltui	r2,r2,36
   4eb24:	1000101e 	bne	r2,zero,4eb68 <_realloc_r+0x888>
   4eb28:	e0bfec17 	ldw	r2,-80(fp)
   4eb2c:	10c00104 	addi	r3,r2,4
   4eb30:	e0ffec15 	stw	r3,-80(fp)
   4eb34:	e0ffeb17 	ldw	r3,-84(fp)
   4eb38:	19000104 	addi	r4,r3,4
   4eb3c:	e13feb15 	stw	r4,-84(fp)
   4eb40:	18c00017 	ldw	r3,0(r3)
   4eb44:	10c00015 	stw	r3,0(r2)
   4eb48:	e0bfec17 	ldw	r2,-80(fp)
   4eb4c:	10c00104 	addi	r3,r2,4
   4eb50:	e0ffec15 	stw	r3,-80(fp)
   4eb54:	e0ffeb17 	ldw	r3,-84(fp)
   4eb58:	19000104 	addi	r4,r3,4
   4eb5c:	e13feb15 	stw	r4,-84(fp)
   4eb60:	18c00017 	ldw	r3,0(r3)
   4eb64:	10c00015 	stw	r3,0(r2)
   4eb68:	e0bfec17 	ldw	r2,-80(fp)
   4eb6c:	10c00104 	addi	r3,r2,4
   4eb70:	e0ffec15 	stw	r3,-80(fp)
   4eb74:	e0ffeb17 	ldw	r3,-84(fp)
   4eb78:	19000104 	addi	r4,r3,4
   4eb7c:	e13feb15 	stw	r4,-84(fp)
   4eb80:	18c00017 	ldw	r3,0(r3)
   4eb84:	10c00015 	stw	r3,0(r2)
   4eb88:	e0bfec17 	ldw	r2,-80(fp)
   4eb8c:	10c00104 	addi	r3,r2,4
   4eb90:	e0ffec15 	stw	r3,-80(fp)
   4eb94:	e0ffeb17 	ldw	r3,-84(fp)
   4eb98:	19000104 	addi	r4,r3,4
   4eb9c:	e13feb15 	stw	r4,-84(fp)
   4eba0:	18c00017 	ldw	r3,0(r3)
   4eba4:	10c00015 	stw	r3,0(r2)
   4eba8:	e0bfeb17 	ldw	r2,-84(fp)
   4ebac:	10c00017 	ldw	r3,0(r2)
   4ebb0:	e0bfec17 	ldw	r2,-80(fp)
   4ebb4:	10c00015 	stw	r3,0(r2)
        goto split;
   4ebb8:	00008706 	br	4edd8 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4ebbc:	e1bff917 	ldw	r6,-28(fp)
   4ebc0:	e17ffe17 	ldw	r5,-8(fp)
   4ebc4:	e13ff617 	ldw	r4,-40(fp)
   4ebc8:	004c4640 	call	4c464 <memmove>
        goto split;
   4ebcc:	00008206 	br	4edd8 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
   4ebd0:	e17fff17 	ldw	r5,-4(fp)
   4ebd4:	e13ffd17 	ldw	r4,-12(fp)
   4ebd8:	004b5a40 	call	4b5a4 <_malloc_r>
   4ebdc:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
   4ebe0:	e0bff617 	ldw	r2,-40(fp)
   4ebe4:	1000041e 	bne	r2,zero,4ebf8 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
   4ebe8:	e13ffd17 	ldw	r4,-12(fp)
   4ebec:	0052a440 	call	52a44 <__malloc_unlock>
      return 0;
   4ebf0:	0005883a 	mov	r2,zero
   4ebf4:	0000b106 	br	4eebc <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
   4ebf8:	e0bff617 	ldw	r2,-40(fp)
   4ebfc:	10bffe04 	addi	r2,r2,-8
   4ec00:	e0bfe315 	stw	r2,-116(fp)
   4ec04:	e0bfef17 	ldw	r2,-68(fp)
   4ec08:	10c00117 	ldw	r3,4(r2)
   4ec0c:	00bfff84 	movi	r2,-2
   4ec10:	1884703a 	and	r2,r3,r2
   4ec14:	e0ffef17 	ldw	r3,-68(fp)
   4ec18:	1885883a 	add	r2,r3,r2
   4ec1c:	e0ffe317 	ldw	r3,-116(fp)
   4ec20:	18800a1e 	bne	r3,r2,4ec4c <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
   4ec24:	e0bfe317 	ldw	r2,-116(fp)
   4ec28:	10c00117 	ldw	r3,4(r2)
   4ec2c:	00bfff04 	movi	r2,-4
   4ec30:	1884703a 	and	r2,r3,r2
   4ec34:	e0ffe417 	ldw	r3,-112(fp)
   4ec38:	1885883a 	add	r2,r3,r2
   4ec3c:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
   4ec40:	e0bfef17 	ldw	r2,-68(fp)
   4ec44:	e0bfe315 	stw	r2,-116(fp)
      goto split;
   4ec48:	00006306 	br	4edd8 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   4ec4c:	e0bff017 	ldw	r2,-64(fp)
   4ec50:	10bfff04 	addi	r2,r2,-4
   4ec54:	e0bffa15 	stw	r2,-24(fp)
   4ec58:	e0bffa17 	ldw	r2,-24(fp)
   4ec5c:	10800968 	cmpgeui	r2,r2,37
   4ec60:	1000521e 	bne	r2,zero,4edac <_realloc_r+0xacc>
   4ec64:	e0bffe17 	ldw	r2,-8(fp)
   4ec68:	e0bfed15 	stw	r2,-76(fp)
   4ec6c:	e0bff617 	ldw	r2,-40(fp)
   4ec70:	e0bfee15 	stw	r2,-72(fp)
   4ec74:	e0bffa17 	ldw	r2,-24(fp)
   4ec78:	10800530 	cmpltui	r2,r2,20
   4ec7c:	1000361e 	bne	r2,zero,4ed58 <_realloc_r+0xa78>
   4ec80:	e0bfee17 	ldw	r2,-72(fp)
   4ec84:	10c00104 	addi	r3,r2,4
   4ec88:	e0ffee15 	stw	r3,-72(fp)
   4ec8c:	e0ffed17 	ldw	r3,-76(fp)
   4ec90:	19000104 	addi	r4,r3,4
   4ec94:	e13fed15 	stw	r4,-76(fp)
   4ec98:	18c00017 	ldw	r3,0(r3)
   4ec9c:	10c00015 	stw	r3,0(r2)
   4eca0:	e0bfee17 	ldw	r2,-72(fp)
   4eca4:	10c00104 	addi	r3,r2,4
   4eca8:	e0ffee15 	stw	r3,-72(fp)
   4ecac:	e0ffed17 	ldw	r3,-76(fp)
   4ecb0:	19000104 	addi	r4,r3,4
   4ecb4:	e13fed15 	stw	r4,-76(fp)
   4ecb8:	18c00017 	ldw	r3,0(r3)
   4ecbc:	10c00015 	stw	r3,0(r2)
   4ecc0:	e0bffa17 	ldw	r2,-24(fp)
   4ecc4:	10800730 	cmpltui	r2,r2,28
   4ecc8:	1000231e 	bne	r2,zero,4ed58 <_realloc_r+0xa78>
   4eccc:	e0bfee17 	ldw	r2,-72(fp)
   4ecd0:	10c00104 	addi	r3,r2,4
   4ecd4:	e0ffee15 	stw	r3,-72(fp)
   4ecd8:	e0ffed17 	ldw	r3,-76(fp)
   4ecdc:	19000104 	addi	r4,r3,4
   4ece0:	e13fed15 	stw	r4,-76(fp)
   4ece4:	18c00017 	ldw	r3,0(r3)
   4ece8:	10c00015 	stw	r3,0(r2)
   4ecec:	e0bfee17 	ldw	r2,-72(fp)
   4ecf0:	10c00104 	addi	r3,r2,4
   4ecf4:	e0ffee15 	stw	r3,-72(fp)
   4ecf8:	e0ffed17 	ldw	r3,-76(fp)
   4ecfc:	19000104 	addi	r4,r3,4
   4ed00:	e13fed15 	stw	r4,-76(fp)
   4ed04:	18c00017 	ldw	r3,0(r3)
   4ed08:	10c00015 	stw	r3,0(r2)
   4ed0c:	e0bffa17 	ldw	r2,-24(fp)
   4ed10:	10800930 	cmpltui	r2,r2,36
   4ed14:	1000101e 	bne	r2,zero,4ed58 <_realloc_r+0xa78>
   4ed18:	e0bfee17 	ldw	r2,-72(fp)
   4ed1c:	10c00104 	addi	r3,r2,4
   4ed20:	e0ffee15 	stw	r3,-72(fp)
   4ed24:	e0ffed17 	ldw	r3,-76(fp)
   4ed28:	19000104 	addi	r4,r3,4
   4ed2c:	e13fed15 	stw	r4,-76(fp)
   4ed30:	18c00017 	ldw	r3,0(r3)
   4ed34:	10c00015 	stw	r3,0(r2)
   4ed38:	e0bfee17 	ldw	r2,-72(fp)
   4ed3c:	10c00104 	addi	r3,r2,4
   4ed40:	e0ffee15 	stw	r3,-72(fp)
   4ed44:	e0ffed17 	ldw	r3,-76(fp)
   4ed48:	19000104 	addi	r4,r3,4
   4ed4c:	e13fed15 	stw	r4,-76(fp)
   4ed50:	18c00017 	ldw	r3,0(r3)
   4ed54:	10c00015 	stw	r3,0(r2)
   4ed58:	e0bfee17 	ldw	r2,-72(fp)
   4ed5c:	10c00104 	addi	r3,r2,4
   4ed60:	e0ffee15 	stw	r3,-72(fp)
   4ed64:	e0ffed17 	ldw	r3,-76(fp)
   4ed68:	19000104 	addi	r4,r3,4
   4ed6c:	e13fed15 	stw	r4,-76(fp)
   4ed70:	18c00017 	ldw	r3,0(r3)
   4ed74:	10c00015 	stw	r3,0(r2)
   4ed78:	e0bfee17 	ldw	r2,-72(fp)
   4ed7c:	10c00104 	addi	r3,r2,4
   4ed80:	e0ffee15 	stw	r3,-72(fp)
   4ed84:	e0ffed17 	ldw	r3,-76(fp)
   4ed88:	19000104 	addi	r4,r3,4
   4ed8c:	e13fed15 	stw	r4,-76(fp)
   4ed90:	18c00017 	ldw	r3,0(r3)
   4ed94:	10c00015 	stw	r3,0(r2)
   4ed98:	e0bfed17 	ldw	r2,-76(fp)
   4ed9c:	10c00017 	ldw	r3,0(r2)
   4eda0:	e0bfee17 	ldw	r2,-72(fp)
   4eda4:	10c00015 	stw	r3,0(r2)
   4eda8:	00000406 	br	4edbc <_realloc_r+0xadc>
   4edac:	e1bffa17 	ldw	r6,-24(fp)
   4edb0:	e17ffe17 	ldw	r5,-8(fp)
   4edb4:	e13ff617 	ldw	r4,-40(fp)
   4edb8:	004c4640 	call	4c464 <memmove>
    fREe(RCALL oldmem);
   4edbc:	e17ffe17 	ldw	r5,-8(fp)
   4edc0:	e13ffd17 	ldw	r4,-12(fp)
   4edc4:	0049f540 	call	49f54 <_free_r>
    MALLOC_UNLOCK;
   4edc8:	e13ffd17 	ldw	r4,-12(fp)
   4edcc:	0052a440 	call	52a44 <__malloc_unlock>
    return newmem;
   4edd0:	e0bff617 	ldw	r2,-40(fp)
   4edd4:	00003906 	br	4eebc <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
   4edd8:	e0ffe417 	ldw	r3,-112(fp)
   4eddc:	e0bff117 	ldw	r2,-60(fp)
   4ede0:	1885c83a 	sub	r2,r3,r2
   4ede4:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
   4ede8:	e0bffb17 	ldw	r2,-20(fp)
   4edec:	10800430 	cmpltui	r2,r2,16
   4edf0:	10001e1e 	bne	r2,zero,4ee6c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
   4edf4:	e0ffe317 	ldw	r3,-116(fp)
   4edf8:	e0bff117 	ldw	r2,-60(fp)
   4edfc:	1885883a 	add	r2,r3,r2
   4ee00:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
   4ee04:	e0bfe317 	ldw	r2,-116(fp)
   4ee08:	10800117 	ldw	r2,4(r2)
   4ee0c:	10c0004c 	andi	r3,r2,1
   4ee10:	e0bff117 	ldw	r2,-60(fp)
   4ee14:	1886b03a 	or	r3,r3,r2
   4ee18:	e0bfe317 	ldw	r2,-116(fp)
   4ee1c:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
   4ee20:	e0bffb17 	ldw	r2,-20(fp)
   4ee24:	10c00054 	ori	r3,r2,1
   4ee28:	e0bffc17 	ldw	r2,-16(fp)
   4ee2c:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
   4ee30:	e0fffc17 	ldw	r3,-16(fp)
   4ee34:	e0bffb17 	ldw	r2,-20(fp)
   4ee38:	1885883a 	add	r2,r3,r2
   4ee3c:	e13ffc17 	ldw	r4,-16(fp)
   4ee40:	e0fffb17 	ldw	r3,-20(fp)
   4ee44:	20c7883a 	add	r3,r4,r3
   4ee48:	18c00117 	ldw	r3,4(r3)
   4ee4c:	18c00054 	ori	r3,r3,1
   4ee50:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   4ee54:	e0bffc17 	ldw	r2,-16(fp)
   4ee58:	10800204 	addi	r2,r2,8
   4ee5c:	100b883a 	mov	r5,r2
   4ee60:	e13ffd17 	ldw	r4,-12(fp)
   4ee64:	0049f540 	call	49f54 <_free_r>
   4ee68:	00001006 	br	4eeac <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
   4ee6c:	e0bfe317 	ldw	r2,-116(fp)
   4ee70:	10800117 	ldw	r2,4(r2)
   4ee74:	10c0004c 	andi	r3,r2,1
   4ee78:	e0bfe417 	ldw	r2,-112(fp)
   4ee7c:	1886b03a 	or	r3,r3,r2
   4ee80:	e0bfe317 	ldw	r2,-116(fp)
   4ee84:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
   4ee88:	e0ffe317 	ldw	r3,-116(fp)
   4ee8c:	e0bfe417 	ldw	r2,-112(fp)
   4ee90:	1885883a 	add	r2,r3,r2
   4ee94:	e13fe317 	ldw	r4,-116(fp)
   4ee98:	e0ffe417 	ldw	r3,-112(fp)
   4ee9c:	20c7883a 	add	r3,r4,r3
   4eea0:	18c00117 	ldw	r3,4(r3)
   4eea4:	18c00054 	ori	r3,r3,1
   4eea8:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
   4eeac:	e13ffd17 	ldw	r4,-12(fp)
   4eeb0:	0052a440 	call	52a44 <__malloc_unlock>
  return chunk2mem(newp);
   4eeb4:	e0bfe317 	ldw	r2,-116(fp)
   4eeb8:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   4eebc:	e037883a 	mov	sp,fp
   4eec0:	dfc00117 	ldw	ra,4(sp)
   4eec4:	df000017 	ldw	fp,0(sp)
   4eec8:	dec00204 	addi	sp,sp,8
   4eecc:	f800283a 	ret

0004eed0 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
   4eed0:	defff904 	addi	sp,sp,-28
   4eed4:	df000615 	stw	fp,24(sp)
   4eed8:	df000604 	addi	fp,sp,24
   4eedc:	e13ffe15 	stw	r4,-8(fp)
   4eee0:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
   4eee4:	e0bffe17 	ldw	r2,-8(fp)
   4eee8:	e0bffc15 	stw	r2,-16(fp)
   4eeec:	e0bfff17 	ldw	r2,-4(fp)
   4eef0:	e0bffd15 	stw	r2,-12(fp)
   4eef4:	e0bffd17 	ldw	r2,-12(fp)
   4eef8:	e0bffa15 	stw	r2,-24(fp)
   4eefc:	e0bffc17 	ldw	r2,-16(fp)
   4ef00:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
   4ef04:	e0bffa17 	ldw	r2,-24(fp)
   4ef08:	1000021e 	bne	r2,zero,4ef14 <__fpclassifyd+0x44>
   4ef0c:	e0bffb17 	ldw	r2,-20(fp)
   4ef10:	10000526 	beq	r2,zero,4ef28 <__fpclassifyd+0x58>
   4ef14:	e0fffa17 	ldw	r3,-24(fp)
   4ef18:	00a00034 	movhi	r2,32768
   4ef1c:	1880041e 	bne	r3,r2,4ef30 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
   4ef20:	e0bffb17 	ldw	r2,-20(fp)
   4ef24:	1000021e 	bne	r2,zero,4ef30 <__fpclassifyd+0x60>
    return FP_ZERO;
   4ef28:	00800084 	movi	r2,2
   4ef2c:	00002506 	br	4efc4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
   4ef30:	e0fffa17 	ldw	r3,-24(fp)
   4ef34:	00800434 	movhi	r2,16
   4ef38:	18800336 	bltu	r3,r2,4ef48 <__fpclassifyd+0x78>
   4ef3c:	e0fffa17 	ldw	r3,-24(fp)
   4ef40:	009ffc34 	movhi	r2,32752
   4ef44:	18800636 	bltu	r3,r2,4ef60 <__fpclassifyd+0x90>
   4ef48:	e0fffa17 	ldw	r3,-24(fp)
   4ef4c:	00a00434 	movhi	r2,32784
   4ef50:	18800536 	bltu	r3,r2,4ef68 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
   4ef54:	e0fffa17 	ldw	r3,-24(fp)
   4ef58:	00bffc34 	movhi	r2,65520
   4ef5c:	1880022e 	bgeu	r3,r2,4ef68 <__fpclassifyd+0x98>
    return FP_NORMAL;
   4ef60:	00800104 	movi	r2,4
   4ef64:	00001706 	br	4efc4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   4ef68:	e0fffa17 	ldw	r3,-24(fp)
   4ef6c:	00800434 	movhi	r2,16
   4ef70:	18800536 	bltu	r3,r2,4ef88 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   4ef74:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   4ef78:	1000050e 	bge	r2,zero,4ef90 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   4ef7c:	e0fffa17 	ldw	r3,-24(fp)
   4ef80:	00a00434 	movhi	r2,32784
   4ef84:	1880022e 	bgeu	r3,r2,4ef90 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
   4ef88:	008000c4 	movi	r2,3
   4ef8c:	00000d06 	br	4efc4 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
   4ef90:	e0fffa17 	ldw	r3,-24(fp)
   4ef94:	009ffc34 	movhi	r2,32752
   4ef98:	1880021e 	bne	r3,r2,4efa4 <__fpclassifyd+0xd4>
   4ef9c:	e0bffb17 	ldw	r2,-20(fp)
   4efa0:	10000526 	beq	r2,zero,4efb8 <__fpclassifyd+0xe8>
   4efa4:	e0fffa17 	ldw	r3,-24(fp)
   4efa8:	00bffc34 	movhi	r2,65520
   4efac:	1880041e 	bne	r3,r2,4efc0 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
   4efb0:	e0bffb17 	ldw	r2,-20(fp)
   4efb4:	1000021e 	bne	r2,zero,4efc0 <__fpclassifyd+0xf0>
    return FP_INFINITE;
   4efb8:	00800044 	movi	r2,1
   4efbc:	00000106 	br	4efc4 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
   4efc0:	0005883a 	mov	r2,zero
}
   4efc4:	e037883a 	mov	sp,fp
   4efc8:	df000017 	ldw	fp,0(sp)
   4efcc:	dec00104 	addi	sp,sp,4
   4efd0:	f800283a 	ret

0004efd4 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
   4efd4:	defffb04 	addi	sp,sp,-20
   4efd8:	dfc00415 	stw	ra,16(sp)
   4efdc:	df000315 	stw	fp,12(sp)
   4efe0:	df000304 	addi	fp,sp,12
   4efe4:	e13ffe15 	stw	r4,-8(fp)
   4efe8:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
   4efec:	d0285515 	stw	zero,-24236(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
   4eff0:	e13fff17 	ldw	r4,-4(fp)
   4eff4:	0052c2c0 	call	52c2c <sbrk>
   4eff8:	e0bffd15 	stw	r2,-12(fp)
   4effc:	e0bffd17 	ldw	r2,-12(fp)
   4f000:	10bfffd8 	cmpnei	r2,r2,-1
   4f004:	1000051e 	bne	r2,zero,4f01c <_sbrk_r+0x48>
   4f008:	d0a85517 	ldw	r2,-24236(gp)
   4f00c:	10000326 	beq	r2,zero,4f01c <_sbrk_r+0x48>
    ptr->_errno = errno;
   4f010:	d0e85517 	ldw	r3,-24236(gp)
   4f014:	e0bffe17 	ldw	r2,-8(fp)
   4f018:	10c00015 	stw	r3,0(r2)
  return ret;
   4f01c:	e0bffd17 	ldw	r2,-12(fp)
}
   4f020:	e037883a 	mov	sp,fp
   4f024:	dfc00117 	ldw	ra,4(sp)
   4f028:	df000017 	ldw	fp,0(sp)
   4f02c:	dec00204 	addi	sp,sp,8
   4f030:	f800283a 	ret

0004f034 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   4f034:	defff804 	addi	sp,sp,-32
   4f038:	dfc00715 	stw	ra,28(sp)
   4f03c:	df000615 	stw	fp,24(sp)
   4f040:	dc400515 	stw	r17,20(sp)
   4f044:	dc000415 	stw	r16,16(sp)
   4f048:	df000604 	addi	fp,sp,24
   4f04c:	e13ffa15 	stw	r4,-24(fp)
   4f050:	e17ffb15 	stw	r5,-20(fp)
   4f054:	e1bffc15 	stw	r6,-16(fp)
   4f058:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   4f05c:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   4f060:	8080038b 	ldhu	r2,14(r16)
   4f064:	10bfffcc 	andi	r2,r2,65535
   4f068:	10a0001c 	xori	r2,r2,32768
   4f06c:	10a00004 	addi	r2,r2,-32768
   4f070:	e0fffd17 	ldw	r3,-12(fp)
   4f074:	180f883a 	mov	r7,r3
   4f078:	e1bffc17 	ldw	r6,-16(fp)
   4f07c:	100b883a 	mov	r5,r2
   4f080:	e13ffa17 	ldw	r4,-24(fp)
   4f084:	00510f40 	call	510f4 <_read_r>
   4f088:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
   4f08c:	88000416 	blt	r17,zero,4f0a0 <__sread+0x6c>
    fp->_offset += ret;
   4f090:	80801417 	ldw	r2,80(r16)
   4f094:	1445883a 	add	r2,r2,r17
   4f098:	80801415 	stw	r2,80(r16)
   4f09c:	00000406 	br	4f0b0 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   4f0a0:	80c0030b 	ldhu	r3,12(r16)
   4f0a4:	00bbffc4 	movi	r2,-4097
   4f0a8:	1884703a 	and	r2,r3,r2
   4f0ac:	8080030d 	sth	r2,12(r16)
  return ret;
   4f0b0:	8805883a 	mov	r2,r17
}
   4f0b4:	e6fffe04 	addi	sp,fp,-8
   4f0b8:	dfc00317 	ldw	ra,12(sp)
   4f0bc:	df000217 	ldw	fp,8(sp)
   4f0c0:	dc400117 	ldw	r17,4(sp)
   4f0c4:	dc000017 	ldw	r16,0(sp)
   4f0c8:	dec00404 	addi	sp,sp,16
   4f0cc:	f800283a 	ret

0004f0d0 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
   4f0d0:	defffb04 	addi	sp,sp,-20
   4f0d4:	df000415 	stw	fp,16(sp)
   4f0d8:	df000404 	addi	fp,sp,16
   4f0dc:	e13ffc15 	stw	r4,-16(fp)
   4f0e0:	e17ffd15 	stw	r5,-12(fp)
   4f0e4:	e1bffe15 	stw	r6,-8(fp)
   4f0e8:	e1ffff15 	stw	r7,-4(fp)
  return 0;
   4f0ec:	0005883a 	mov	r2,zero
}
   4f0f0:	e037883a 	mov	sp,fp
   4f0f4:	df000017 	ldw	fp,0(sp)
   4f0f8:	dec00104 	addi	sp,sp,4
   4f0fc:	f800283a 	ret

0004f100 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   4f100:	defff804 	addi	sp,sp,-32
   4f104:	dfc00715 	stw	ra,28(sp)
   4f108:	df000615 	stw	fp,24(sp)
   4f10c:	dc000515 	stw	r16,20(sp)
   4f110:	df000604 	addi	fp,sp,24
   4f114:	e13ffb15 	stw	r4,-20(fp)
   4f118:	e17ffc15 	stw	r5,-16(fp)
   4f11c:	e1bffd15 	stw	r6,-12(fp)
   4f120:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
   4f124:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   4f128:	8080030b 	ldhu	r2,12(r16)
   4f12c:	10bfffcc 	andi	r2,r2,65535
   4f130:	1080400c 	andi	r2,r2,256
   4f134:	10000926 	beq	r2,zero,4f15c <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
   4f138:	8080038b 	ldhu	r2,14(r16)
   4f13c:	10bfffcc 	andi	r2,r2,65535
   4f140:	10a0001c 	xori	r2,r2,32768
   4f144:	10a00004 	addi	r2,r2,-32768
   4f148:	01c00084 	movi	r7,2
   4f14c:	000d883a 	mov	r6,zero
   4f150:	100b883a 	mov	r5,r2
   4f154:	e13ffb17 	ldw	r4,-20(fp)
   4f158:	00510840 	call	51084 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   4f15c:	80c0030b 	ldhu	r3,12(r16)
   4f160:	00bbffc4 	movi	r2,-4097
   4f164:	1884703a 	and	r2,r3,r2
   4f168:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   4f16c:	8080038b 	ldhu	r2,14(r16)
   4f170:	10bfffcc 	andi	r2,r2,65535
   4f174:	10a0001c 	xori	r2,r2,32768
   4f178:	10a00004 	addi	r2,r2,-32768
   4f17c:	e0fffe17 	ldw	r3,-8(fp)
   4f180:	180f883a 	mov	r7,r3
   4f184:	e1bffd17 	ldw	r6,-12(fp)
   4f188:	100b883a 	mov	r5,r2
   4f18c:	e13ffb17 	ldw	r4,-20(fp)
   4f190:	00509400 	call	50940 <_write_r>
   4f194:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
   4f198:	e0bffa17 	ldw	r2,-24(fp)
}
   4f19c:	e6ffff04 	addi	sp,fp,-4
   4f1a0:	dfc00217 	ldw	ra,8(sp)
   4f1a4:	df000117 	ldw	fp,4(sp)
   4f1a8:	dc000017 	ldw	r16,0(sp)
   4f1ac:	dec00304 	addi	sp,sp,12
   4f1b0:	f800283a 	ret

0004f1b4 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
   4f1b4:	defff804 	addi	sp,sp,-32
   4f1b8:	dfc00715 	stw	ra,28(sp)
   4f1bc:	df000615 	stw	fp,24(sp)
   4f1c0:	dc400515 	stw	r17,20(sp)
   4f1c4:	dc000415 	stw	r16,16(sp)
   4f1c8:	df000604 	addi	fp,sp,24
   4f1cc:	e13ffa15 	stw	r4,-24(fp)
   4f1d0:	e17ffb15 	stw	r5,-20(fp)
   4f1d4:	e1bffc15 	stw	r6,-16(fp)
   4f1d8:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   4f1dc:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   4f1e0:	8080038b 	ldhu	r2,14(r16)
   4f1e4:	10bfffcc 	andi	r2,r2,65535
   4f1e8:	10a0001c 	xori	r2,r2,32768
   4f1ec:	10a00004 	addi	r2,r2,-32768
   4f1f0:	e1fffd17 	ldw	r7,-12(fp)
   4f1f4:	e1bffc17 	ldw	r6,-16(fp)
   4f1f8:	100b883a 	mov	r5,r2
   4f1fc:	e13ffa17 	ldw	r4,-24(fp)
   4f200:	00510840 	call	51084 <_lseek_r>
   4f204:	1023883a 	mov	r17,r2
  if (ret == -1L)
   4f208:	88bfffd8 	cmpnei	r2,r17,-1
   4f20c:	1000051e 	bne	r2,zero,4f224 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
   4f210:	80c0030b 	ldhu	r3,12(r16)
   4f214:	00bbffc4 	movi	r2,-4097
   4f218:	1884703a 	and	r2,r3,r2
   4f21c:	8080030d 	sth	r2,12(r16)
   4f220:	00000406 	br	4f234 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
   4f224:	8080030b 	ldhu	r2,12(r16)
   4f228:	10840014 	ori	r2,r2,4096
   4f22c:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
   4f230:	84401415 	stw	r17,80(r16)
    }
  return ret;
   4f234:	8805883a 	mov	r2,r17
}
   4f238:	e6fffe04 	addi	sp,fp,-8
   4f23c:	dfc00317 	ldw	ra,12(sp)
   4f240:	df000217 	ldw	fp,8(sp)
   4f244:	dc400117 	ldw	r17,4(sp)
   4f248:	dc000017 	ldw	r16,0(sp)
   4f24c:	dec00404 	addi	sp,sp,16
   4f250:	f800283a 	ret

0004f254 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
   4f254:	defffb04 	addi	sp,sp,-20
   4f258:	dfc00415 	stw	ra,16(sp)
   4f25c:	df000315 	stw	fp,12(sp)
   4f260:	df000304 	addi	fp,sp,12
   4f264:	e13ffe15 	stw	r4,-8(fp)
   4f268:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
   4f26c:	e0bfff17 	ldw	r2,-4(fp)
   4f270:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
   4f274:	e0bffd17 	ldw	r2,-12(fp)
   4f278:	1080038b 	ldhu	r2,14(r2)
   4f27c:	10bfffcc 	andi	r2,r2,65535
   4f280:	10a0001c 	xori	r2,r2,32768
   4f284:	10a00004 	addi	r2,r2,-32768
   4f288:	100b883a 	mov	r5,r2
   4f28c:	e13ffe17 	ldw	r4,-8(fp)
   4f290:	00509b00 	call	509b0 <_close_r>
}
   4f294:	e037883a 	mov	sp,fp
   4f298:	dfc00117 	ldw	ra,4(sp)
   4f29c:	df000017 	ldw	fp,0(sp)
   4f2a0:	dec00204 	addi	sp,sp,8
   4f2a4:	f800283a 	ret

0004f2a8 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
   4f2a8:	defffb04 	addi	sp,sp,-20
   4f2ac:	df000415 	stw	fp,16(sp)
   4f2b0:	df000404 	addi	fp,sp,16
   4f2b4:	e13ffe15 	stw	r4,-8(fp)
   4f2b8:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
   4f2bc:	e0fffe17 	ldw	r3,-8(fp)
   4f2c0:	e0bfff17 	ldw	r2,-4(fp)
   4f2c4:	1884b03a 	or	r2,r3,r2
   4f2c8:	108000cc 	andi	r2,r2,3
   4f2cc:	10002a1e 	bne	r2,zero,4f378 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
   4f2d0:	e0bffe17 	ldw	r2,-8(fp)
   4f2d4:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
   4f2d8:	e0bfff17 	ldw	r2,-4(fp)
   4f2dc:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
   4f2e0:	00001506 	br	4f338 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
   4f2e4:	e0bffc17 	ldw	r2,-16(fp)
   4f2e8:	10c00017 	ldw	r3,0(r2)
   4f2ec:	00bfbff4 	movhi	r2,65279
   4f2f0:	10bfbfc4 	addi	r2,r2,-257
   4f2f4:	1887883a 	add	r3,r3,r2
   4f2f8:	e0bffc17 	ldw	r2,-16(fp)
   4f2fc:	10800017 	ldw	r2,0(r2)
   4f300:	0084303a 	nor	r2,zero,r2
   4f304:	1886703a 	and	r3,r3,r2
   4f308:	00a02074 	movhi	r2,32897
   4f30c:	10a02004 	addi	r2,r2,-32640
   4f310:	1884703a 	and	r2,r3,r2
   4f314:	10000226 	beq	r2,zero,4f320 <strcmp+0x78>
	    return 0;
   4f318:	0005883a 	mov	r2,zero
   4f31c:	00002e06 	br	4f3d8 <strcmp+0x130>

          a1++;
   4f320:	e0bffc17 	ldw	r2,-16(fp)
   4f324:	10800104 	addi	r2,r2,4
   4f328:	e0bffc15 	stw	r2,-16(fp)
          a2++;
   4f32c:	e0bffd17 	ldw	r2,-12(fp)
   4f330:	10800104 	addi	r2,r2,4
   4f334:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
   4f338:	e0bffc17 	ldw	r2,-16(fp)
   4f33c:	10c00017 	ldw	r3,0(r2)
   4f340:	e0bffd17 	ldw	r2,-12(fp)
   4f344:	10800017 	ldw	r2,0(r2)
   4f348:	18bfe626 	beq	r3,r2,4f2e4 <_gp+0xffff010c>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
   4f34c:	e0bffc17 	ldw	r2,-16(fp)
   4f350:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
   4f354:	e0bffd17 	ldw	r2,-12(fp)
   4f358:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
   4f35c:	00000606 	br	4f378 <strcmp+0xd0>
    {
      s1++;
   4f360:	e0bffe17 	ldw	r2,-8(fp)
   4f364:	10800044 	addi	r2,r2,1
   4f368:	e0bffe15 	stw	r2,-8(fp)
      s2++;
   4f36c:	e0bfff17 	ldw	r2,-4(fp)
   4f370:	10800044 	addi	r2,r2,1
   4f374:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
   4f378:	e0bffe17 	ldw	r2,-8(fp)
   4f37c:	10800003 	ldbu	r2,0(r2)
   4f380:	10803fcc 	andi	r2,r2,255
   4f384:	1080201c 	xori	r2,r2,128
   4f388:	10bfe004 	addi	r2,r2,-128
   4f38c:	10000b26 	beq	r2,zero,4f3bc <strcmp+0x114>
   4f390:	e0bffe17 	ldw	r2,-8(fp)
   4f394:	10c00003 	ldbu	r3,0(r2)
   4f398:	e0bfff17 	ldw	r2,-4(fp)
   4f39c:	10800003 	ldbu	r2,0(r2)
   4f3a0:	18c03fcc 	andi	r3,r3,255
   4f3a4:	18c0201c 	xori	r3,r3,128
   4f3a8:	18ffe004 	addi	r3,r3,-128
   4f3ac:	10803fcc 	andi	r2,r2,255
   4f3b0:	1080201c 	xori	r2,r2,128
   4f3b4:	10bfe004 	addi	r2,r2,-128
   4f3b8:	18bfe926 	beq	r3,r2,4f360 <_gp+0xffff0188>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
   4f3bc:	e0bffe17 	ldw	r2,-8(fp)
   4f3c0:	10800003 	ldbu	r2,0(r2)
   4f3c4:	10c03fcc 	andi	r3,r2,255
   4f3c8:	e0bfff17 	ldw	r2,-4(fp)
   4f3cc:	10800003 	ldbu	r2,0(r2)
   4f3d0:	10803fcc 	andi	r2,r2,255
   4f3d4:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   4f3d8:	e037883a 	mov	sp,fp
   4f3dc:	df000017 	ldw	fp,0(sp)
   4f3e0:	dec00104 	addi	sp,sp,4
   4f3e4:	f800283a 	ret

0004f3e8 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
   4f3e8:	defff604 	addi	sp,sp,-40
   4f3ec:	dfc00915 	stw	ra,36(sp)
   4f3f0:	df000815 	stw	fp,32(sp)
   4f3f4:	dc400715 	stw	r17,28(sp)
   4f3f8:	dc000615 	stw	r16,24(sp)
   4f3fc:	df000804 	addi	fp,sp,32
   4f400:	e13ffc15 	stw	r4,-16(fp)
   4f404:	e17ffd15 	stw	r5,-12(fp)
   4f408:	3021883a 	mov	r16,r6
	register int err = 0;
   4f40c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
   4f410:	80800217 	ldw	r2,8(r16)
   4f414:	1000031e 	bne	r2,zero,4f424 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
   4f418:	80000115 	stw	zero,4(r16)
		return (0);
   4f41c:	0005883a 	mov	r2,zero
   4f420:	00003906 	br	4f508 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
   4f424:	e0bffd17 	ldw	r2,-12(fp)
   4f428:	10801917 	ldw	r2,100(r2)
   4f42c:	1088000c 	andi	r2,r2,8192
   4f430:	10002d26 	beq	r2,zero,4f4e8 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
   4f434:	80800017 	ldw	r2,0(r16)
   4f438:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
   4f43c:	00002706 	br	4f4dc <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
   4f440:	e0bff817 	ldw	r2,-32(fp)
   4f444:	10800017 	ldw	r2,0(r2)
   4f448:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
   4f44c:	e0bff817 	ldw	r2,-32(fp)
   4f450:	10800117 	ldw	r2,4(r2)
   4f454:	1004d0ba 	srli	r2,r2,2
   4f458:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
   4f45c:	e03ff915 	stw	zero,-28(fp)
   4f460:	00001206 	br	4f4ac <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
   4f464:	e0bff917 	ldw	r2,-28(fp)
   4f468:	1085883a 	add	r2,r2,r2
   4f46c:	1085883a 	add	r2,r2,r2
   4f470:	1007883a 	mov	r3,r2
   4f474:	e0bffa17 	ldw	r2,-24(fp)
   4f478:	10c5883a 	add	r2,r2,r3
   4f47c:	10800017 	ldw	r2,0(r2)
   4f480:	e1bffd17 	ldw	r6,-12(fp)
   4f484:	100b883a 	mov	r5,r2
   4f488:	e13ffc17 	ldw	r4,-16(fp)
   4f48c:	0050ecc0 	call	50ecc <_fputwc_r>
   4f490:	10bfffd8 	cmpnei	r2,r2,-1
   4f494:	1000021e 	bne	r2,zero,4f4a0 <__sprint_r+0xb8>
					err = -1;
   4f498:	047fffc4 	movi	r17,-1
					goto out;
   4f49c:	00001706 	br	4f4fc <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
   4f4a0:	e0bff917 	ldw	r2,-28(fp)
   4f4a4:	10800044 	addi	r2,r2,1
   4f4a8:	e0bff915 	stw	r2,-28(fp)
   4f4ac:	e0fff917 	ldw	r3,-28(fp)
   4f4b0:	e0bffb17 	ldw	r2,-20(fp)
   4f4b4:	18bfeb16 	blt	r3,r2,4f464 <_gp+0xffff028c>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
   4f4b8:	80c00217 	ldw	r3,8(r16)
   4f4bc:	e0bffb17 	ldw	r2,-20(fp)
   4f4c0:	1085883a 	add	r2,r2,r2
   4f4c4:	1085883a 	add	r2,r2,r2
   4f4c8:	1885c83a 	sub	r2,r3,r2
   4f4cc:	80800215 	stw	r2,8(r16)
   4f4d0:	e0bff817 	ldw	r2,-32(fp)
   4f4d4:	10800204 	addi	r2,r2,8
   4f4d8:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
   4f4dc:	80800217 	ldw	r2,8(r16)
   4f4e0:	103fd71e 	bne	r2,zero,4f440 <_gp+0xffff0268>
   4f4e4:	00000506 	br	4f4fc <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
   4f4e8:	800d883a 	mov	r6,r16
   4f4ec:	e17ffd17 	ldw	r5,-12(fp)
   4f4f0:	e13ffc17 	ldw	r4,-16(fp)
   4f4f4:	004a6840 	call	4a684 <__sfvwrite_r>
   4f4f8:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
   4f4fc:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
   4f500:	80000115 	stw	zero,4(r16)
	return (err);
   4f504:	8805883a 	mov	r2,r17
}
   4f508:	e6fffe04 	addi	sp,fp,-8
   4f50c:	dfc00317 	ldw	ra,12(sp)
   4f510:	df000217 	ldw	fp,8(sp)
   4f514:	dc400117 	ldw	r17,4(sp)
   4f518:	dc000017 	ldw	r16,0(sp)
   4f51c:	dec00404 	addi	sp,sp,16
   4f520:	f800283a 	ret

0004f524 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   4f524:	defedf04 	addi	sp,sp,-1156
   4f528:	dfc12015 	stw	ra,1152(sp)
   4f52c:	df011f15 	stw	fp,1148(sp)
   4f530:	dc011e15 	stw	r16,1144(sp)
   4f534:	df011f04 	addi	fp,sp,1148
   4f538:	e13ffc15 	stw	r4,-16(fp)
   4f53c:	2821883a 	mov	r16,r5
   4f540:	e1bffd15 	stw	r6,-12(fp)
   4f544:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   4f548:	80c0030b 	ldhu	r3,12(r16)
   4f54c:	00bfff44 	movi	r2,-3
   4f550:	1884703a 	and	r2,r3,r2
   4f554:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   4f558:	80801917 	ldw	r2,100(r16)
   4f55c:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   4f560:	8080038b 	ldhu	r2,14(r16)
   4f564:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   4f568:	80800717 	ldw	r2,28(r16)
   4f56c:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   4f570:	80800917 	ldw	r2,36(r16)
   4f574:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   4f578:	e0befc04 	addi	r2,fp,-1040
   4f57c:	e0bee215 	stw	r2,-1144(fp)
   4f580:	e0bee217 	ldw	r2,-1144(fp)
   4f584:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   4f588:	00810004 	movi	r2,1024
   4f58c:	e0bee415 	stw	r2,-1136(fp)
   4f590:	e0bee417 	ldw	r2,-1136(fp)
   4f594:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   4f598:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   4f59c:	e0bee204 	addi	r2,fp,-1144
   4f5a0:	e1fffe17 	ldw	r7,-8(fp)
   4f5a4:	e1bffd17 	ldw	r6,-12(fp)
   4f5a8:	100b883a 	mov	r5,r2
   4f5ac:	e13ffc17 	ldw	r4,-16(fp)
   4f5b0:	004f6640 	call	4f664 <___vfiprintf_internal_r>
   4f5b4:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   4f5b8:	e0bee117 	ldw	r2,-1148(fp)
   4f5bc:	10000716 	blt	r2,zero,4f5dc <__sbprintf+0xb8>
   4f5c0:	e0bee204 	addi	r2,fp,-1144
   4f5c4:	100b883a 	mov	r5,r2
   4f5c8:	e13ffc17 	ldw	r4,-16(fp)
   4f5cc:	004989c0 	call	4989c <_fflush_r>
   4f5d0:	10000226 	beq	r2,zero,4f5dc <__sbprintf+0xb8>
		ret = EOF;
   4f5d4:	00bfffc4 	movi	r2,-1
   4f5d8:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   4f5dc:	e0bee50b 	ldhu	r2,-1132(fp)
   4f5e0:	10bfffcc 	andi	r2,r2,65535
   4f5e4:	1080100c 	andi	r2,r2,64
   4f5e8:	10000326 	beq	r2,zero,4f5f8 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   4f5ec:	8080030b 	ldhu	r2,12(r16)
   4f5f0:	10801014 	ori	r2,r2,64
   4f5f4:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   4f5f8:	e0bee117 	ldw	r2,-1148(fp)
}
   4f5fc:	e6ffff04 	addi	sp,fp,-4
   4f600:	dfc00217 	ldw	ra,8(sp)
   4f604:	df000117 	ldw	fp,4(sp)
   4f608:	dc000017 	ldw	r16,0(sp)
   4f60c:	dec00304 	addi	sp,sp,12
   4f610:	f800283a 	ret

0004f614 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   4f614:	defffa04 	addi	sp,sp,-24
   4f618:	dfc00515 	stw	ra,20(sp)
   4f61c:	df000415 	stw	fp,16(sp)
   4f620:	df000404 	addi	fp,sp,16
   4f624:	e13ffd15 	stw	r4,-12(fp)
   4f628:	e17ffe15 	stw	r5,-8(fp)
   4f62c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   4f630:	d0a00517 	ldw	r2,-32748(gp)
   4f634:	e1ffff17 	ldw	r7,-4(fp)
   4f638:	e1bffe17 	ldw	r6,-8(fp)
   4f63c:	e17ffd17 	ldw	r5,-12(fp)
   4f640:	1009883a 	mov	r4,r2
   4f644:	004f6640 	call	4f664 <___vfiprintf_internal_r>
   4f648:	e0bffc15 	stw	r2,-16(fp)
  return result;
   4f64c:	e0bffc17 	ldw	r2,-16(fp)
}
   4f650:	e037883a 	mov	sp,fp
   4f654:	dfc00117 	ldw	ra,4(sp)
   4f658:	df000017 	ldw	fp,0(sp)
   4f65c:	dec00204 	addi	sp,sp,8
   4f660:	f800283a 	ret

0004f664 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   4f664:	deffb704 	addi	sp,sp,-292
   4f668:	dfc04815 	stw	ra,288(sp)
   4f66c:	df004715 	stw	fp,284(sp)
   4f670:	ddc04615 	stw	r23,280(sp)
   4f674:	dd804515 	stw	r22,276(sp)
   4f678:	dd404415 	stw	r21,272(sp)
   4f67c:	dd004315 	stw	r20,268(sp)
   4f680:	dcc04215 	stw	r19,264(sp)
   4f684:	dc804115 	stw	r18,260(sp)
   4f688:	dc404015 	stw	r17,256(sp)
   4f68c:	dc003f15 	stw	r16,252(sp)
   4f690:	df004704 	addi	fp,sp,284
   4f694:	e13fe615 	stw	r4,-104(fp)
   4f698:	e17fe715 	stw	r5,-100(fp)
   4f69c:	e1bfe815 	stw	r6,-96(fp)
   4f6a0:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   4f6a4:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   4f6a8:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   4f6ac:	e0bfe617 	ldw	r2,-104(fp)
   4f6b0:	e0bfc415 	stw	r2,-240(fp)
   4f6b4:	e0bfc417 	ldw	r2,-240(fp)
   4f6b8:	10000526 	beq	r2,zero,4f6d0 <___vfiprintf_internal_r+0x6c>
   4f6bc:	e0bfc417 	ldw	r2,-240(fp)
   4f6c0:	10800e17 	ldw	r2,56(r2)
   4f6c4:	1000021e 	bne	r2,zero,4f6d0 <___vfiprintf_internal_r+0x6c>
   4f6c8:	e13fc417 	ldw	r4,-240(fp)
   4f6cc:	0049d340 	call	49d34 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   4f6d0:	e0bfe717 	ldw	r2,-100(fp)
   4f6d4:	1080030b 	ldhu	r2,12(r2)
   4f6d8:	10bfffcc 	andi	r2,r2,65535
   4f6dc:	1088000c 	andi	r2,r2,8192
   4f6e0:	10000c1e 	bne	r2,zero,4f714 <___vfiprintf_internal_r+0xb0>
   4f6e4:	e0bfe717 	ldw	r2,-100(fp)
   4f6e8:	1080030b 	ldhu	r2,12(r2)
   4f6ec:	10880014 	ori	r2,r2,8192
   4f6f0:	1007883a 	mov	r3,r2
   4f6f4:	e0bfe717 	ldw	r2,-100(fp)
   4f6f8:	10c0030d 	sth	r3,12(r2)
   4f6fc:	e0bfe717 	ldw	r2,-100(fp)
   4f700:	10c01917 	ldw	r3,100(r2)
   4f704:	00b7ffc4 	movi	r2,-8193
   4f708:	1886703a 	and	r3,r3,r2
   4f70c:	e0bfe717 	ldw	r2,-100(fp)
   4f710:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   4f714:	e0bfe717 	ldw	r2,-100(fp)
   4f718:	1080030b 	ldhu	r2,12(r2)
   4f71c:	10bfffcc 	andi	r2,r2,65535
   4f720:	1080020c 	andi	r2,r2,8
   4f724:	10000326 	beq	r2,zero,4f734 <___vfiprintf_internal_r+0xd0>
   4f728:	e0bfe717 	ldw	r2,-100(fp)
   4f72c:	10800417 	ldw	r2,16(r2)
   4f730:	1000061e 	bne	r2,zero,4f74c <___vfiprintf_internal_r+0xe8>
   4f734:	e17fe717 	ldw	r5,-100(fp)
   4f738:	e13fe617 	ldw	r4,-104(fp)
   4f73c:	00474bc0 	call	474bc <__swsetup_r>
   4f740:	10000226 	beq	r2,zero,4f74c <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
   4f744:	00bfffc4 	movi	r2,-1
   4f748:	00047006 	br	5090c <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   4f74c:	e0bfe717 	ldw	r2,-100(fp)
   4f750:	1080030b 	ldhu	r2,12(r2)
   4f754:	10bfffcc 	andi	r2,r2,65535
   4f758:	1080068c 	andi	r2,r2,26
   4f75c:	10800298 	cmpnei	r2,r2,10
   4f760:	10000c1e 	bne	r2,zero,4f794 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
   4f764:	e0bfe717 	ldw	r2,-100(fp)
   4f768:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   4f76c:	10bfffcc 	andi	r2,r2,65535
   4f770:	10a0001c 	xori	r2,r2,32768
   4f774:	10a00004 	addi	r2,r2,-32768
   4f778:	10000616 	blt	r2,zero,4f794 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   4f77c:	e1ffe917 	ldw	r7,-92(fp)
   4f780:	e1bfe817 	ldw	r6,-96(fp)
   4f784:	e17fe717 	ldw	r5,-100(fp)
   4f788:	e13fe617 	ldw	r4,-104(fp)
   4f78c:	004f5240 	call	4f524 <__sbprintf>
   4f790:	00045e06 	br	5090c <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   4f794:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   4f798:	e4bfcb04 	addi	r18,fp,-212
   4f79c:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
   4f7a0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   4f7a4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   4f7a8:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   4f7ac:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   4f7b0:	00000106 	br	4f7b8 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
   4f7b4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   4f7b8:	a8800003 	ldbu	r2,0(r21)
   4f7bc:	10803fcc 	andi	r2,r2,255
   4f7c0:	1080201c 	xori	r2,r2,128
   4f7c4:	10bfe004 	addi	r2,r2,-128
   4f7c8:	10000626 	beq	r2,zero,4f7e4 <___vfiprintf_internal_r+0x180>
   4f7cc:	a8800003 	ldbu	r2,0(r21)
   4f7d0:	10803fcc 	andi	r2,r2,255
   4f7d4:	1080201c 	xori	r2,r2,128
   4f7d8:	10bfe004 	addi	r2,r2,-128
   4f7dc:	10800958 	cmpnei	r2,r2,37
   4f7e0:	103ff41e 	bne	r2,zero,4f7b4 <_gp+0xffff05dc>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   4f7e4:	a807883a 	mov	r3,r21
   4f7e8:	a005883a 	mov	r2,r20
   4f7ec:	18a1c83a 	sub	r16,r3,r2
   4f7f0:	80001826 	beq	r16,zero,4f854 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
   4f7f4:	95000015 	stw	r20,0(r18)
   4f7f8:	8005883a 	mov	r2,r16
   4f7fc:	90800115 	stw	r2,4(r18)
   4f800:	e0bfca17 	ldw	r2,-216(fp)
   4f804:	8007883a 	mov	r3,r16
   4f808:	10c5883a 	add	r2,r2,r3
   4f80c:	e0bfca15 	stw	r2,-216(fp)
   4f810:	94800204 	addi	r18,r18,8
   4f814:	e0bfc917 	ldw	r2,-220(fp)
   4f818:	10800044 	addi	r2,r2,1
   4f81c:	e0bfc915 	stw	r2,-220(fp)
   4f820:	e0bfc917 	ldw	r2,-220(fp)
   4f824:	10800210 	cmplti	r2,r2,8
   4f828:	1000071e 	bne	r2,zero,4f848 <___vfiprintf_internal_r+0x1e4>
   4f82c:	e0bfc804 	addi	r2,fp,-224
   4f830:	100d883a 	mov	r6,r2
   4f834:	e17fe717 	ldw	r5,-100(fp)
   4f838:	e13fe617 	ldw	r4,-104(fp)
   4f83c:	004f3e80 	call	4f3e8 <__sprint_r>
   4f840:	1004091e 	bne	r2,zero,50868 <___vfiprintf_internal_r+0x1204>
   4f844:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
   4f848:	e0bfb917 	ldw	r2,-284(fp)
   4f84c:	1405883a 	add	r2,r2,r16
   4f850:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   4f854:	a8800003 	ldbu	r2,0(r21)
   4f858:	10803fcc 	andi	r2,r2,255
   4f85c:	1080201c 	xori	r2,r2,128
   4f860:	10bfe004 	addi	r2,r2,-128
   4f864:	1003f226 	beq	r2,zero,50830 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
   4f868:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
   4f86c:	ad400044 	addi	r21,r21,1

		flags = 0;
   4f870:	0027883a 	mov	r19,zero
		dprec = 0;
   4f874:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
   4f878:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
   4f87c:	00bfffc4 	movi	r2,-1
   4f880:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
   4f884:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   4f888:	a805883a 	mov	r2,r21
   4f88c:	15400044 	addi	r21,r2,1
   4f890:	10800003 	ldbu	r2,0(r2)
   4f894:	14403fcc 	andi	r17,r2,255
   4f898:	8c40201c 	xori	r17,r17,128
   4f89c:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
   4f8a0:	88bff804 	addi	r2,r17,-32
   4f8a4:	10c01668 	cmpgeui	r3,r2,89
   4f8a8:	18028e1e 	bne	r3,zero,502e4 <___vfiprintf_internal_r+0xc80>
   4f8ac:	100690ba 	slli	r3,r2,2
   4f8b0:	00800174 	movhi	r2,5
   4f8b4:	10be3104 	addi	r2,r2,-1852
   4f8b8:	1885883a 	add	r2,r3,r2
   4f8bc:	10800017 	ldw	r2,0(r2)
   4f8c0:	1000683a 	jmp	r2
   4f8c4:	0004fa28 	cmpgeui	zero,zero,5096
   4f8c8:	000502e4 	muli	zero,zero,5131
   4f8cc:	000502e4 	muli	zero,zero,5131
   4f8d0:	0004fa48 	cmpgei	zero,zero,5097
   4f8d4:	000502e4 	muli	zero,zero,5131
   4f8d8:	000502e4 	muli	zero,zero,5131
   4f8dc:	000502e4 	muli	zero,zero,5131
   4f8e0:	000502e4 	muli	zero,zero,5131
   4f8e4:	000502e4 	muli	zero,zero,5131
   4f8e8:	000502e4 	muli	zero,zero,5131
   4f8ec:	0004fa50 	cmplti	zero,zero,5097
   4f8f0:	0004fa84 	movi	zero,5098
   4f8f4:	000502e4 	muli	zero,zero,5131
   4f8f8:	0004fa7c 	xorhi	zero,zero,5097
   4f8fc:	0004fa90 	cmplti	zero,zero,5098
   4f900:	000502e4 	muli	zero,zero,5131
   4f904:	0004fb30 	cmpltui	zero,zero,5100
   4f908:	0004fb38 	rdprs	zero,zero,5100
   4f90c:	0004fb38 	rdprs	zero,zero,5100
   4f910:	0004fb38 	rdprs	zero,zero,5100
   4f914:	0004fb38 	rdprs	zero,zero,5100
   4f918:	0004fb38 	rdprs	zero,zero,5100
   4f91c:	0004fb38 	rdprs	zero,zero,5100
   4f920:	0004fb38 	rdprs	zero,zero,5100
   4f924:	0004fb38 	rdprs	zero,zero,5100
   4f928:	0004fb38 	rdprs	zero,zero,5100
   4f92c:	000502e4 	muli	zero,zero,5131
   4f930:	000502e4 	muli	zero,zero,5131
   4f934:	000502e4 	muli	zero,zero,5131
   4f938:	000502e4 	muli	zero,zero,5131
   4f93c:	000502e4 	muli	zero,zero,5131
   4f940:	000502e4 	muli	zero,zero,5131
   4f944:	000502e4 	muli	zero,zero,5131
   4f948:	000502e4 	muli	zero,zero,5131
   4f94c:	000502e4 	muli	zero,zero,5131
   4f950:	000502e4 	muli	zero,zero,5131
   4f954:	0004fbe4 	muli	zero,zero,5103
   4f958:	000502e4 	muli	zero,zero,5131
   4f95c:	000502e4 	muli	zero,zero,5131
   4f960:	000502e4 	muli	zero,zero,5131
   4f964:	000502e4 	muli	zero,zero,5131
   4f968:	000502e4 	muli	zero,zero,5131
   4f96c:	000502e4 	muli	zero,zero,5131
   4f970:	000502e4 	muli	zero,zero,5131
   4f974:	000502e4 	muli	zero,zero,5131
   4f978:	000502e4 	muli	zero,zero,5131
   4f97c:	000502e4 	muli	zero,zero,5131
   4f980:	0004fd84 	movi	zero,5110
   4f984:	000502e4 	muli	zero,zero,5131
   4f988:	000502e4 	muli	zero,zero,5131
   4f98c:	000502e4 	muli	zero,zero,5131
   4f990:	000502e4 	muli	zero,zero,5131
   4f994:	000502e4 	muli	zero,zero,5131
   4f998:	0004ff00 	call	4ff0 <__alt_mem_MemoriaDados+0x4ff0>
   4f99c:	000502e4 	muli	zero,zero,5131
   4f9a0:	000502e4 	muli	zero,zero,5131
   4f9a4:	0004ffc0 	call	4ffc <__alt_mem_MemoriaDados+0x4ffc>
   4f9a8:	000502e4 	muli	zero,zero,5131
   4f9ac:	000502e4 	muli	zero,zero,5131
   4f9b0:	000502e4 	muli	zero,zero,5131
   4f9b4:	000502e4 	muli	zero,zero,5131
   4f9b8:	000502e4 	muli	zero,zero,5131
   4f9bc:	000502e4 	muli	zero,zero,5131
   4f9c0:	000502e4 	muli	zero,zero,5131
   4f9c4:	000502e4 	muli	zero,zero,5131
   4f9c8:	000502e4 	muli	zero,zero,5131
   4f9cc:	000502e4 	muli	zero,zero,5131
   4f9d0:	0004fbbc 	xorhi	zero,zero,5102
   4f9d4:	0004fbe8 	cmpgeui	zero,zero,5103
   4f9d8:	000502e4 	muli	zero,zero,5131
   4f9dc:	000502e4 	muli	zero,zero,5131
   4f9e0:	000502e4 	muli	zero,zero,5131
   4f9e4:	0004fb80 	call	4fb8 <__alt_mem_MemoriaDados+0x4fb8>
   4f9e8:	0004fbe8 	cmpgeui	zero,zero,5103
   4f9ec:	000502e4 	muli	zero,zero,5131
   4f9f0:	000502e4 	muli	zero,zero,5131
   4f9f4:	0004fb88 	cmpgei	zero,zero,5102
   4f9f8:	000502e4 	muli	zero,zero,5131
   4f9fc:	0004fce4 	muli	zero,zero,5107
   4fa00:	0004fd88 	cmpgei	zero,zero,5110
   4fa04:	0004fe28 	cmpgeui	zero,zero,5112
   4fa08:	0004fbb4 	movhi	zero,5102
   4fa0c:	000502e4 	muli	zero,zero,5131
   4fa10:	0004fe70 	cmpltui	zero,zero,5113
   4fa14:	000502e4 	muli	zero,zero,5131
   4fa18:	0004ff04 	movi	zero,5116
   4fa1c:	000502e4 	muli	zero,zero,5131
   4fa20:	000502e4 	muli	zero,zero,5131
   4fa24:	0004ffd0 	cmplti	zero,zero,5119
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   4fa28:	e0bfc703 	ldbu	r2,-228(fp)
   4fa2c:	10803fcc 	andi	r2,r2,255
   4fa30:	1080201c 	xori	r2,r2,128
   4fa34:	10bfe004 	addi	r2,r2,-128
   4fa38:	103f931e 	bne	r2,zero,4f888 <_gp+0xffff06b0>
				sign = ' ';
   4fa3c:	00800804 	movi	r2,32
   4fa40:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   4fa44:	003f9006 	br	4f888 <_gp+0xffff06b0>
		case '#':
			flags |= ALT;
   4fa48:	9cc00054 	ori	r19,r19,1
			goto rflag;
   4fa4c:	003f8e06 	br	4f888 <_gp+0xffff06b0>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   4fa50:	e0bfe917 	ldw	r2,-92(fp)
   4fa54:	10c00104 	addi	r3,r2,4
   4fa58:	e0ffe915 	stw	r3,-92(fp)
   4fa5c:	10800017 	ldw	r2,0(r2)
   4fa60:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   4fa64:	e0bfba17 	ldw	r2,-280(fp)
   4fa68:	10000116 	blt	r2,zero,4fa70 <___vfiprintf_internal_r+0x40c>
				goto rflag;
   4fa6c:	003f8606 	br	4f888 <_gp+0xffff06b0>
			width = -width;
   4fa70:	e0bfba17 	ldw	r2,-280(fp)
   4fa74:	0085c83a 	sub	r2,zero,r2
   4fa78:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   4fa7c:	9cc00114 	ori	r19,r19,4
			goto rflag;
   4fa80:	003f8106 	br	4f888 <_gp+0xffff06b0>
		case '+':
			sign = '+';
   4fa84:	00800ac4 	movi	r2,43
   4fa88:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   4fa8c:	003f7e06 	br	4f888 <_gp+0xffff06b0>
		case '.':
			if ((ch = *fmt++) == '*') {
   4fa90:	a805883a 	mov	r2,r21
   4fa94:	15400044 	addi	r21,r2,1
   4fa98:	10800003 	ldbu	r2,0(r2)
   4fa9c:	14403fcc 	andi	r17,r2,255
   4faa0:	8c40201c 	xori	r17,r17,128
   4faa4:	8c7fe004 	addi	r17,r17,-128
   4faa8:	88800a98 	cmpnei	r2,r17,42
   4faac:	10000a1e 	bne	r2,zero,4fad8 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   4fab0:	e0bfe917 	ldw	r2,-92(fp)
   4fab4:	10c00104 	addi	r3,r2,4
   4fab8:	e0ffe915 	stw	r3,-92(fp)
   4fabc:	10800017 	ldw	r2,0(r2)
   4fac0:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   4fac4:	e0bfbb17 	ldw	r2,-276(fp)
   4fac8:	103f6f0e 	bge	r2,zero,4f888 <_gp+0xffff06b0>
					prec = -1;
   4facc:	00bfffc4 	movi	r2,-1
   4fad0:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
   4fad4:	003f6c06 	br	4f888 <_gp+0xffff06b0>
			}
			n = 0;
   4fad8:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   4fadc:	00000c06 	br	4fb10 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
   4fae0:	01400284 	movi	r5,10
   4fae4:	8009883a 	mov	r4,r16
   4fae8:	00421cc0 	call	421cc <__mulsi3>
   4faec:	1007883a 	mov	r3,r2
   4faf0:	88bff404 	addi	r2,r17,-48
   4faf4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   4faf8:	a805883a 	mov	r2,r21
   4fafc:	15400044 	addi	r21,r2,1
   4fb00:	10800003 	ldbu	r2,0(r2)
   4fb04:	14403fcc 	andi	r17,r2,255
   4fb08:	8c40201c 	xori	r17,r17,128
   4fb0c:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   4fb10:	88bff404 	addi	r2,r17,-48
   4fb14:	108002b0 	cmpltui	r2,r2,10
   4fb18:	103ff11e 	bne	r2,zero,4fae0 <_gp+0xffff0908>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   4fb1c:	8005883a 	mov	r2,r16
   4fb20:	1000010e 	bge	r2,zero,4fb28 <___vfiprintf_internal_r+0x4c4>
   4fb24:	00bfffc4 	movi	r2,-1
   4fb28:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
   4fb2c:	003f5c06 	br	4f8a0 <_gp+0xffff06c8>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   4fb30:	9cc02014 	ori	r19,r19,128
			goto rflag;
   4fb34:	003f5406 	br	4f888 <_gp+0xffff06b0>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   4fb38:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   4fb3c:	01400284 	movi	r5,10
   4fb40:	8009883a 	mov	r4,r16
   4fb44:	00421cc0 	call	421cc <__mulsi3>
   4fb48:	1007883a 	mov	r3,r2
   4fb4c:	88bff404 	addi	r2,r17,-48
   4fb50:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   4fb54:	a805883a 	mov	r2,r21
   4fb58:	15400044 	addi	r21,r2,1
   4fb5c:	10800003 	ldbu	r2,0(r2)
   4fb60:	14403fcc 	andi	r17,r2,255
   4fb64:	8c40201c 	xori	r17,r17,128
   4fb68:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
   4fb6c:	88bff404 	addi	r2,r17,-48
   4fb70:	108002b0 	cmpltui	r2,r2,10
   4fb74:	103ff11e 	bne	r2,zero,4fb3c <_gp+0xffff0964>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   4fb78:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
   4fb7c:	003f4806 	br	4f8a0 <_gp+0xffff06c8>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   4fb80:	9cc01014 	ori	r19,r19,64
			goto rflag;
   4fb84:	003f4006 	br	4f888 <_gp+0xffff06b0>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   4fb88:	a8800003 	ldbu	r2,0(r21)
   4fb8c:	10803fcc 	andi	r2,r2,255
   4fb90:	1080201c 	xori	r2,r2,128
   4fb94:	10bfe004 	addi	r2,r2,-128
   4fb98:	10801b18 	cmpnei	r2,r2,108
   4fb9c:	1000031e 	bne	r2,zero,4fbac <___vfiprintf_internal_r+0x548>
				fmt++;
   4fba0:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   4fba4:	9cc00814 	ori	r19,r19,32
   4fba8:	003f3706 	br	4f888 <_gp+0xffff06b0>
			} else
#endif
				flags |= LONGINT;
   4fbac:	9cc00414 	ori	r19,r19,16
			goto rflag;
   4fbb0:	003f3506 	br	4f888 <_gp+0xffff06b0>
		case 'q': /* extension */
			flags |= QUADINT;
   4fbb4:	9cc00814 	ori	r19,r19,32
			goto rflag;
   4fbb8:	003f3306 	br	4f888 <_gp+0xffff06b0>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   4fbbc:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   4fbc0:	e0bfe917 	ldw	r2,-92(fp)
   4fbc4:	10c00104 	addi	r3,r2,4
   4fbc8:	e0ffe915 	stw	r3,-92(fp)
   4fbcc:	10800017 	ldw	r2,0(r2)
   4fbd0:	a0800005 	stb	r2,0(r20)
				size = 1;
   4fbd4:	00800044 	movi	r2,1
   4fbd8:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
   4fbdc:	e03fc705 	stb	zero,-228(fp)
			break;
   4fbe0:	0001c806 	br	50304 <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
   4fbe4:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   4fbe8:	9880080c 	andi	r2,r19,32
   4fbec:	10000826 	beq	r2,zero,4fc10 <___vfiprintf_internal_r+0x5ac>
   4fbf0:	e13fe917 	ldw	r4,-92(fp)
   4fbf4:	20800204 	addi	r2,r4,8
   4fbf8:	e0bfe915 	stw	r2,-92(fp)
   4fbfc:	20800017 	ldw	r2,0(r4)
   4fc00:	20c00117 	ldw	r3,4(r4)
   4fc04:	e0bfea15 	stw	r2,-88(fp)
   4fc08:	e0ffeb15 	stw	r3,-84(fp)
   4fc0c:	00001e06 	br	4fc88 <___vfiprintf_internal_r+0x624>
   4fc10:	9880040c 	andi	r2,r19,16
   4fc14:	10000826 	beq	r2,zero,4fc38 <___vfiprintf_internal_r+0x5d4>
   4fc18:	e0bfe917 	ldw	r2,-92(fp)
   4fc1c:	10c00104 	addi	r3,r2,4
   4fc20:	e0ffe915 	stw	r3,-92(fp)
   4fc24:	10800017 	ldw	r2,0(r2)
   4fc28:	e0bfea15 	stw	r2,-88(fp)
   4fc2c:	1005d7fa 	srai	r2,r2,31
   4fc30:	e0bfeb15 	stw	r2,-84(fp)
   4fc34:	00001406 	br	4fc88 <___vfiprintf_internal_r+0x624>
   4fc38:	9880100c 	andi	r2,r19,64
   4fc3c:	10000b26 	beq	r2,zero,4fc6c <___vfiprintf_internal_r+0x608>
   4fc40:	e0bfe917 	ldw	r2,-92(fp)
   4fc44:	10c00104 	addi	r3,r2,4
   4fc48:	e0ffe915 	stw	r3,-92(fp)
   4fc4c:	10800017 	ldw	r2,0(r2)
   4fc50:	10bfffcc 	andi	r2,r2,65535
   4fc54:	10a0001c 	xori	r2,r2,32768
   4fc58:	10a00004 	addi	r2,r2,-32768
   4fc5c:	e0bfea15 	stw	r2,-88(fp)
   4fc60:	1005d7fa 	srai	r2,r2,31
   4fc64:	e0bfeb15 	stw	r2,-84(fp)
   4fc68:	00000706 	br	4fc88 <___vfiprintf_internal_r+0x624>
   4fc6c:	e0bfe917 	ldw	r2,-92(fp)
   4fc70:	10c00104 	addi	r3,r2,4
   4fc74:	e0ffe915 	stw	r3,-92(fp)
   4fc78:	10800017 	ldw	r2,0(r2)
   4fc7c:	e0bfea15 	stw	r2,-88(fp)
   4fc80:	1005d7fa 	srai	r2,r2,31
   4fc84:	e0bfeb15 	stw	r2,-84(fp)
   4fc88:	e0bfea17 	ldw	r2,-88(fp)
   4fc8c:	e0bfbc15 	stw	r2,-272(fp)
   4fc90:	e0ffeb17 	ldw	r3,-84(fp)
   4fc94:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   4fc98:	e0bfbc17 	ldw	r2,-272(fp)
   4fc9c:	e0ffbd17 	ldw	r3,-268(fp)
   4fca0:	18000d0e 	bge	r3,zero,4fcd8 <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   4fca4:	000d883a 	mov	r6,zero
   4fca8:	000f883a 	mov	r7,zero
   4fcac:	e13fbc17 	ldw	r4,-272(fp)
   4fcb0:	e17fbd17 	ldw	r5,-268(fp)
   4fcb4:	3105c83a 	sub	r2,r6,r4
   4fcb8:	3091803a 	cmpltu	r8,r6,r2
   4fcbc:	3947c83a 	sub	r3,r7,r5
   4fcc0:	1a09c83a 	sub	r4,r3,r8
   4fcc4:	2007883a 	mov	r3,r4
   4fcc8:	e0bfbc15 	stw	r2,-272(fp)
   4fccc:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
   4fcd0:	00800b44 	movi	r2,45
   4fcd4:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
   4fcd8:	00800044 	movi	r2,1
   4fcdc:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
   4fce0:	0000f806 	br	500c4 <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   4fce4:	9880080c 	andi	r2,r19,32
   4fce8:	10000d26 	beq	r2,zero,4fd20 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   4fcec:	e0bfe917 	ldw	r2,-92(fp)
   4fcf0:	10c00104 	addi	r3,r2,4
   4fcf4:	e0ffe915 	stw	r3,-92(fp)
   4fcf8:	10800017 	ldw	r2,0(r2)
   4fcfc:	e0ffb917 	ldw	r3,-284(fp)
   4fd00:	e0fff015 	stw	r3,-64(fp)
   4fd04:	1807d7fa 	srai	r3,r3,31
   4fd08:	e0fff115 	stw	r3,-60(fp)
   4fd0c:	e0fff017 	ldw	r3,-64(fp)
   4fd10:	10c00015 	stw	r3,0(r2)
   4fd14:	e0fff117 	ldw	r3,-60(fp)
   4fd18:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   4fd1c:	0002c306 	br	5082c <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   4fd20:	9880040c 	andi	r2,r19,16
   4fd24:	10000726 	beq	r2,zero,4fd44 <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   4fd28:	e0bfe917 	ldw	r2,-92(fp)
   4fd2c:	10c00104 	addi	r3,r2,4
   4fd30:	e0ffe915 	stw	r3,-92(fp)
   4fd34:	10800017 	ldw	r2,0(r2)
   4fd38:	e0ffb917 	ldw	r3,-284(fp)
   4fd3c:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   4fd40:	0002ba06 	br	5082c <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   4fd44:	9880100c 	andi	r2,r19,64
   4fd48:	10000726 	beq	r2,zero,4fd68 <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   4fd4c:	e0bfe917 	ldw	r2,-92(fp)
   4fd50:	10c00104 	addi	r3,r2,4
   4fd54:	e0ffe915 	stw	r3,-92(fp)
   4fd58:	10800017 	ldw	r2,0(r2)
   4fd5c:	e0ffb917 	ldw	r3,-284(fp)
   4fd60:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   4fd64:	0002b106 	br	5082c <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   4fd68:	e0bfe917 	ldw	r2,-92(fp)
   4fd6c:	10c00104 	addi	r3,r2,4
   4fd70:	e0ffe915 	stw	r3,-92(fp)
   4fd74:	10800017 	ldw	r2,0(r2)
   4fd78:	e0ffb917 	ldw	r3,-284(fp)
   4fd7c:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   4fd80:	0002aa06 	br	5082c <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
   4fd84:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   4fd88:	9880080c 	andi	r2,r19,32
   4fd8c:	10000626 	beq	r2,zero,4fda8 <___vfiprintf_internal_r+0x744>
   4fd90:	e0bfe917 	ldw	r2,-92(fp)
   4fd94:	10c00204 	addi	r3,r2,8
   4fd98:	e0ffe915 	stw	r3,-92(fp)
   4fd9c:	15800017 	ldw	r22,0(r2)
   4fda0:	15c00117 	ldw	r23,4(r2)
   4fda4:	00001c06 	br	4fe18 <___vfiprintf_internal_r+0x7b4>
   4fda8:	9880040c 	andi	r2,r19,16
   4fdac:	10000726 	beq	r2,zero,4fdcc <___vfiprintf_internal_r+0x768>
   4fdb0:	e0bfe917 	ldw	r2,-92(fp)
   4fdb4:	10c00104 	addi	r3,r2,4
   4fdb8:	e0ffe915 	stw	r3,-92(fp)
   4fdbc:	10800017 	ldw	r2,0(r2)
   4fdc0:	102d883a 	mov	r22,r2
   4fdc4:	002f883a 	mov	r23,zero
   4fdc8:	00001306 	br	4fe18 <___vfiprintf_internal_r+0x7b4>
   4fdcc:	9880100c 	andi	r2,r19,64
   4fdd0:	10000b26 	beq	r2,zero,4fe00 <___vfiprintf_internal_r+0x79c>
   4fdd4:	e0bfe917 	ldw	r2,-92(fp)
   4fdd8:	10c00104 	addi	r3,r2,4
   4fddc:	e0ffe915 	stw	r3,-92(fp)
   4fde0:	10800017 	ldw	r2,0(r2)
   4fde4:	e0bff215 	stw	r2,-56(fp)
   4fde8:	e03ff315 	stw	zero,-52(fp)
   4fdec:	e0bff217 	ldw	r2,-56(fp)
   4fdf0:	15bfffcc 	andi	r22,r2,65535
   4fdf4:	e0fff317 	ldw	r3,-52(fp)
   4fdf8:	182e703a 	and	r23,r3,zero
   4fdfc:	00000606 	br	4fe18 <___vfiprintf_internal_r+0x7b4>
   4fe00:	e0bfe917 	ldw	r2,-92(fp)
   4fe04:	10c00104 	addi	r3,r2,4
   4fe08:	e0ffe915 	stw	r3,-92(fp)
   4fe0c:	10800017 	ldw	r2,0(r2)
   4fe10:	102d883a 	mov	r22,r2
   4fe14:	002f883a 	mov	r23,zero
   4fe18:	e5bfbc15 	stw	r22,-272(fp)
   4fe1c:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
   4fe20:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   4fe24:	0000a606 	br	500c0 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   4fe28:	e0bfe917 	ldw	r2,-92(fp)
   4fe2c:	10c00104 	addi	r3,r2,4
   4fe30:	e0ffe915 	stw	r3,-92(fp)
   4fe34:	10800017 	ldw	r2,0(r2)
   4fe38:	e0bfbc15 	stw	r2,-272(fp)
   4fe3c:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
   4fe40:	00800084 	movi	r2,2
   4fe44:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
   4fe48:	00800174 	movhi	r2,5
   4fe4c:	10942e04 	addi	r2,r2,20664
   4fe50:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
   4fe54:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   4fe58:	00800c04 	movi	r2,48
   4fe5c:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   4fe60:	04401e04 	movi	r17,120
   4fe64:	00801e04 	movi	r2,120
   4fe68:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   4fe6c:	00009406 	br	500c0 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   4fe70:	e0bfe917 	ldw	r2,-92(fp)
   4fe74:	10c00104 	addi	r3,r2,4
   4fe78:	e0ffe915 	stw	r3,-92(fp)
   4fe7c:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   4fe80:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   4fe84:	a000081e 	bne	r20,zero,4fea8 <___vfiprintf_internal_r+0x844>
				cp = "(null)";
   4fe88:	05000174 	movhi	r20,5
   4fe8c:	a5143304 	addi	r20,r20,20684
				size = ((unsigned) prec > 6U) ? 6 : prec;
   4fe90:	e0bfbb17 	ldw	r2,-276(fp)
   4fe94:	10c001f0 	cmpltui	r3,r2,7
   4fe98:	1800011e 	bne	r3,zero,4fea0 <___vfiprintf_internal_r+0x83c>
   4fe9c:	00800184 	movi	r2,6
   4fea0:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   4fea4:	00011706 	br	50304 <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   4fea8:	e0bfbb17 	ldw	r2,-276(fp)
   4feac:	10001016 	blt	r2,zero,4fef0 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   4feb0:	e0bfbb17 	ldw	r2,-276(fp)
   4feb4:	100d883a 	mov	r6,r2
   4feb8:	000b883a 	mov	r5,zero
   4febc:	a009883a 	mov	r4,r20
   4fec0:	004c1200 	call	4c120 <memchr>
   4fec4:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
   4fec8:	e0bfc617 	ldw	r2,-232(fp)
   4fecc:	10000526 	beq	r2,zero,4fee4 <___vfiprintf_internal_r+0x880>
					size = p - cp;
   4fed0:	e0bfc617 	ldw	r2,-232(fp)
   4fed4:	a007883a 	mov	r3,r20
   4fed8:	10c5c83a 	sub	r2,r2,r3
   4fedc:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   4fee0:	00010806 	br	50304 <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   4fee4:	e0bfbb17 	ldw	r2,-276(fp)
   4fee8:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
   4feec:	00010506 	br	50304 <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   4fef0:	a009883a 	mov	r4,r20
   4fef4:	0044e540 	call	44e54 <strlen>
   4fef8:	e0bfc115 	stw	r2,-252(fp)

			break;
   4fefc:	00010106 	br	50304 <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
   4ff00:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   4ff04:	9880080c 	andi	r2,r19,32
   4ff08:	10000826 	beq	r2,zero,4ff2c <___vfiprintf_internal_r+0x8c8>
   4ff0c:	e0bfe917 	ldw	r2,-92(fp)
   4ff10:	10c00204 	addi	r3,r2,8
   4ff14:	e0ffe915 	stw	r3,-92(fp)
   4ff18:	10c00017 	ldw	r3,0(r2)
   4ff1c:	e0ffec15 	stw	r3,-80(fp)
   4ff20:	10c00117 	ldw	r3,4(r2)
   4ff24:	e0ffed15 	stw	r3,-76(fp)
   4ff28:	00001e06 	br	4ffa4 <___vfiprintf_internal_r+0x940>
   4ff2c:	9880040c 	andi	r2,r19,16
   4ff30:	10000726 	beq	r2,zero,4ff50 <___vfiprintf_internal_r+0x8ec>
   4ff34:	e0bfe917 	ldw	r2,-92(fp)
   4ff38:	10c00104 	addi	r3,r2,4
   4ff3c:	e0ffe915 	stw	r3,-92(fp)
   4ff40:	10800017 	ldw	r2,0(r2)
   4ff44:	e0bfec15 	stw	r2,-80(fp)
   4ff48:	e03fed15 	stw	zero,-76(fp)
   4ff4c:	00001506 	br	4ffa4 <___vfiprintf_internal_r+0x940>
   4ff50:	9880100c 	andi	r2,r19,64
   4ff54:	10000d26 	beq	r2,zero,4ff8c <___vfiprintf_internal_r+0x928>
   4ff58:	e0bfe917 	ldw	r2,-92(fp)
   4ff5c:	10c00104 	addi	r3,r2,4
   4ff60:	e0ffe915 	stw	r3,-92(fp)
   4ff64:	10800017 	ldw	r2,0(r2)
   4ff68:	e0bff415 	stw	r2,-48(fp)
   4ff6c:	e03ff515 	stw	zero,-44(fp)
   4ff70:	e0bff417 	ldw	r2,-48(fp)
   4ff74:	10bfffcc 	andi	r2,r2,65535
   4ff78:	e0bfec15 	stw	r2,-80(fp)
   4ff7c:	e0fff517 	ldw	r3,-44(fp)
   4ff80:	1806703a 	and	r3,r3,zero
   4ff84:	e0ffed15 	stw	r3,-76(fp)
   4ff88:	00000606 	br	4ffa4 <___vfiprintf_internal_r+0x940>
   4ff8c:	e0bfe917 	ldw	r2,-92(fp)
   4ff90:	10c00104 	addi	r3,r2,4
   4ff94:	e0ffe915 	stw	r3,-92(fp)
   4ff98:	10800017 	ldw	r2,0(r2)
   4ff9c:	e0bfec15 	stw	r2,-80(fp)
   4ffa0:	e03fed15 	stw	zero,-76(fp)
   4ffa4:	e0bfec17 	ldw	r2,-80(fp)
   4ffa8:	e0bfbc15 	stw	r2,-272(fp)
   4ffac:	e0ffed17 	ldw	r3,-76(fp)
   4ffb0:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
   4ffb4:	00800044 	movi	r2,1
   4ffb8:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
   4ffbc:	00004006 	br	500c0 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
   4ffc0:	00800174 	movhi	r2,5
   4ffc4:	10943504 	addi	r2,r2,20692
   4ffc8:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
   4ffcc:	00000306 	br	4ffdc <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
   4ffd0:	00800174 	movhi	r2,5
   4ffd4:	10942e04 	addi	r2,r2,20664
   4ffd8:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
   4ffdc:	9880080c 	andi	r2,r19,32
   4ffe0:	10000826 	beq	r2,zero,50004 <___vfiprintf_internal_r+0x9a0>
   4ffe4:	e0bfe917 	ldw	r2,-92(fp)
   4ffe8:	10c00204 	addi	r3,r2,8
   4ffec:	e0ffe915 	stw	r3,-92(fp)
   4fff0:	10c00017 	ldw	r3,0(r2)
   4fff4:	e0ffee15 	stw	r3,-72(fp)
   4fff8:	10c00117 	ldw	r3,4(r2)
   4fffc:	e0ffef15 	stw	r3,-68(fp)
   50000:	00001e06 	br	5007c <___vfiprintf_internal_r+0xa18>
   50004:	9880040c 	andi	r2,r19,16
   50008:	10000726 	beq	r2,zero,50028 <___vfiprintf_internal_r+0x9c4>
   5000c:	e0bfe917 	ldw	r2,-92(fp)
   50010:	10c00104 	addi	r3,r2,4
   50014:	e0ffe915 	stw	r3,-92(fp)
   50018:	10800017 	ldw	r2,0(r2)
   5001c:	e0bfee15 	stw	r2,-72(fp)
   50020:	e03fef15 	stw	zero,-68(fp)
   50024:	00001506 	br	5007c <___vfiprintf_internal_r+0xa18>
   50028:	9880100c 	andi	r2,r19,64
   5002c:	10000d26 	beq	r2,zero,50064 <___vfiprintf_internal_r+0xa00>
   50030:	e0bfe917 	ldw	r2,-92(fp)
   50034:	10c00104 	addi	r3,r2,4
   50038:	e0ffe915 	stw	r3,-92(fp)
   5003c:	10800017 	ldw	r2,0(r2)
   50040:	e0bff615 	stw	r2,-40(fp)
   50044:	e03ff715 	stw	zero,-36(fp)
   50048:	e0bff617 	ldw	r2,-40(fp)
   5004c:	10bfffcc 	andi	r2,r2,65535
   50050:	e0bfee15 	stw	r2,-72(fp)
   50054:	e0fff717 	ldw	r3,-36(fp)
   50058:	1806703a 	and	r3,r3,zero
   5005c:	e0ffef15 	stw	r3,-68(fp)
   50060:	00000606 	br	5007c <___vfiprintf_internal_r+0xa18>
   50064:	e0bfe917 	ldw	r2,-92(fp)
   50068:	10c00104 	addi	r3,r2,4
   5006c:	e0ffe915 	stw	r3,-92(fp)
   50070:	10800017 	ldw	r2,0(r2)
   50074:	e0bfee15 	stw	r2,-72(fp)
   50078:	e03fef15 	stw	zero,-68(fp)
   5007c:	e0bfee17 	ldw	r2,-72(fp)
   50080:	e0bfbc15 	stw	r2,-272(fp)
   50084:	e0ffef17 	ldw	r3,-68(fp)
   50088:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
   5008c:	00800084 	movi	r2,2
   50090:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   50094:	9880004c 	andi	r2,r19,1
   50098:	10000926 	beq	r2,zero,500c0 <___vfiprintf_internal_r+0xa5c>
   5009c:	e0bfbc17 	ldw	r2,-272(fp)
   500a0:	e0ffbd17 	ldw	r3,-268(fp)
   500a4:	10c4b03a 	or	r2,r2,r3
   500a8:	10000526 	beq	r2,zero,500c0 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
   500ac:	00800c04 	movi	r2,48
   500b0:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   500b4:	8805883a 	mov	r2,r17
   500b8:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   500bc:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   500c0:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   500c4:	e0bfbb17 	ldw	r2,-276(fp)
   500c8:	e0bfbf15 	stw	r2,-260(fp)
   500cc:	e0bfbf17 	ldw	r2,-260(fp)
   500d0:	10000216 	blt	r2,zero,500dc <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
   500d4:	00bfdfc4 	movi	r2,-129
   500d8:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   500dc:	e53fdb04 	addi	r20,fp,-148
   500e0:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
   500e4:	e0bfbc17 	ldw	r2,-272(fp)
   500e8:	e0ffbd17 	ldw	r3,-268(fp)
   500ec:	10c4b03a 	or	r2,r2,r3
   500f0:	1000021e 	bne	r2,zero,500fc <___vfiprintf_internal_r+0xa98>
   500f4:	e0bfbb17 	ldw	r2,-276(fp)
   500f8:	10006c26 	beq	r2,zero,502ac <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   500fc:	e0bfbe03 	ldbu	r2,-264(fp)
   50100:	10c00060 	cmpeqi	r3,r2,1
   50104:	1800211e 	bne	r3,zero,5018c <___vfiprintf_internal_r+0xb28>
   50108:	10c000a0 	cmpeqi	r3,r2,2
   5010c:	1800491e 	bne	r3,zero,50234 <___vfiprintf_internal_r+0xbd0>
   50110:	10005d1e 	bne	r2,zero,50288 <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   50114:	a53fffc4 	addi	r20,r20,-1
   50118:	e0bfbc17 	ldw	r2,-272(fp)
   5011c:	108001cc 	andi	r2,r2,7
   50120:	10800c04 	addi	r2,r2,48
   50124:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
   50128:	e0bfbd17 	ldw	r2,-268(fp)
   5012c:	1004977a 	slli	r2,r2,29
   50130:	e0ffbc17 	ldw	r3,-272(fp)
   50134:	1806d0fa 	srli	r3,r3,3
   50138:	1884b03a 	or	r2,r3,r2
   5013c:	e0bfbc15 	stw	r2,-272(fp)
   50140:	e0bfbd17 	ldw	r2,-268(fp)
   50144:	1004d0fa 	srli	r2,r2,3
   50148:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   5014c:	e0bfbc17 	ldw	r2,-272(fp)
   50150:	e0ffbd17 	ldw	r3,-268(fp)
   50154:	10c4b03a 	or	r2,r2,r3
   50158:	103fee1e 	bne	r2,zero,50114 <_gp+0xffff0f3c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   5015c:	9880004c 	andi	r2,r19,1
   50160:	10005026 	beq	r2,zero,502a4 <___vfiprintf_internal_r+0xc40>
   50164:	a0800003 	ldbu	r2,0(r20)
   50168:	10803fcc 	andi	r2,r2,255
   5016c:	1080201c 	xori	r2,r2,128
   50170:	10bfe004 	addi	r2,r2,-128
   50174:	10800c20 	cmpeqi	r2,r2,48
   50178:	10004a1e 	bne	r2,zero,502a4 <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
   5017c:	a53fffc4 	addi	r20,r20,-1
   50180:	00800c04 	movi	r2,48
   50184:	a0800005 	stb	r2,0(r20)
					break;
   50188:	00004606 	br	502a4 <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   5018c:	e0bfbd17 	ldw	r2,-268(fp)
   50190:	10000a1e 	bne	r2,zero,501bc <___vfiprintf_internal_r+0xb58>
   50194:	e0bfbd17 	ldw	r2,-268(fp)
   50198:	1000031e 	bne	r2,zero,501a8 <___vfiprintf_internal_r+0xb44>
   5019c:	e0bfbc17 	ldw	r2,-272(fp)
   501a0:	108002a8 	cmpgeui	r2,r2,10
   501a4:	1000051e 	bne	r2,zero,501bc <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
   501a8:	a53fffc4 	addi	r20,r20,-1
   501ac:	e0bfbc17 	ldw	r2,-272(fp)
   501b0:	10800c04 	addi	r2,r2,48
   501b4:	a0800005 	stb	r2,0(r20)
						break;
   501b8:	00003b06 	br	502a8 <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   501bc:	a53fffc4 	addi	r20,r20,-1
   501c0:	e0bfbc17 	ldw	r2,-272(fp)
   501c4:	e0ffbd17 	ldw	r3,-268(fp)
   501c8:	01800284 	movi	r6,10
   501cc:	000f883a 	mov	r7,zero
   501d0:	1009883a 	mov	r4,r2
   501d4:	180b883a 	mov	r5,r3
   501d8:	0051c9c0 	call	51c9c <__umoddi3>
   501dc:	1009883a 	mov	r4,r2
   501e0:	180b883a 	mov	r5,r3
   501e4:	2005883a 	mov	r2,r4
   501e8:	2807883a 	mov	r3,r5
   501ec:	10800c04 	addi	r2,r2,48
   501f0:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   501f4:	e0bfbc17 	ldw	r2,-272(fp)
   501f8:	e0ffbd17 	ldw	r3,-268(fp)
   501fc:	01800284 	movi	r6,10
   50200:	000f883a 	mov	r7,zero
   50204:	1009883a 	mov	r4,r2
   50208:	180b883a 	mov	r5,r3
   5020c:	00516a00 	call	516a0 <__udivdi3>
   50210:	1009883a 	mov	r4,r2
   50214:	180b883a 	mov	r5,r3
   50218:	e13fbc15 	stw	r4,-272(fp)
   5021c:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
   50220:	e0bfbc17 	ldw	r2,-272(fp)
   50224:	e0ffbd17 	ldw	r3,-268(fp)
   50228:	10c4b03a 	or	r2,r2,r3
   5022c:	103fe31e 	bne	r2,zero,501bc <_gp+0xffff0fe4>
					break;
   50230:	00001d06 	br	502a8 <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   50234:	a53fffc4 	addi	r20,r20,-1
   50238:	e0bfbc17 	ldw	r2,-272(fp)
   5023c:	108003cc 	andi	r2,r2,15
   50240:	e0ffc217 	ldw	r3,-248(fp)
   50244:	1885883a 	add	r2,r3,r2
   50248:	10800003 	ldbu	r2,0(r2)
   5024c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
   50250:	e0bfbd17 	ldw	r2,-268(fp)
   50254:	1004973a 	slli	r2,r2,28
   50258:	e0ffbc17 	ldw	r3,-272(fp)
   5025c:	1806d13a 	srli	r3,r3,4
   50260:	1884b03a 	or	r2,r3,r2
   50264:	e0bfbc15 	stw	r2,-272(fp)
   50268:	e0bfbd17 	ldw	r2,-268(fp)
   5026c:	1004d13a 	srli	r2,r2,4
   50270:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   50274:	e0bfbc17 	ldw	r2,-272(fp)
   50278:	e0ffbd17 	ldw	r3,-268(fp)
   5027c:	10c4b03a 	or	r2,r2,r3
   50280:	103fec1e 	bne	r2,zero,50234 <_gp+0xffff105c>
					break;
   50284:	00000806 	br	502a8 <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
   50288:	05000174 	movhi	r20,5
   5028c:	a5143a04 	addi	r20,r20,20712
					size = strlen (cp);
   50290:	a009883a 	mov	r4,r20
   50294:	0044e540 	call	44e54 <strlen>
   50298:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
   5029c:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   502a0:	00001806 	br	50304 <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   502a4:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   502a8:	00000706 	br	502c8 <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   502ac:	e0bfbe03 	ldbu	r2,-264(fp)
   502b0:	1000051e 	bne	r2,zero,502c8 <___vfiprintf_internal_r+0xc64>
   502b4:	9880004c 	andi	r2,r19,1
   502b8:	10000326 	beq	r2,zero,502c8 <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
   502bc:	a53fffc4 	addi	r20,r20,-1
   502c0:	00800c04 	movi	r2,48
   502c4:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
   502c8:	e0bfdb04 	addi	r2,fp,-148
   502cc:	10800a04 	addi	r2,r2,40
   502d0:	1007883a 	mov	r3,r2
   502d4:	a005883a 	mov	r2,r20
   502d8:	1885c83a 	sub	r2,r3,r2
   502dc:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
   502e0:	00000806 	br	50304 <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   502e4:	88015426 	beq	r17,zero,50838 <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   502e8:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
   502ec:	8805883a 	mov	r2,r17
   502f0:	a0800005 	stb	r2,0(r20)
			size = 1;
   502f4:	00800044 	movi	r2,1
   502f8:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
   502fc:	e03fc705 	stb	zero,-228(fp)
			break;
   50300:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   50304:	e0ffbf17 	ldw	r3,-260(fp)
   50308:	e0bfc117 	ldw	r2,-252(fp)
   5030c:	10c0010e 	bge	r2,r3,50314 <___vfiprintf_internal_r+0xcb0>
   50310:	1805883a 	mov	r2,r3
   50314:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
   50318:	e0bfc703 	ldbu	r2,-228(fp)
   5031c:	10803fcc 	andi	r2,r2,255
   50320:	1080201c 	xori	r2,r2,128
   50324:	10bfe004 	addi	r2,r2,-128
   50328:	10000326 	beq	r2,zero,50338 <___vfiprintf_internal_r+0xcd4>
			realsz++;
   5032c:	e0bfc017 	ldw	r2,-256(fp)
   50330:	10800044 	addi	r2,r2,1
   50334:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
   50338:	9880008c 	andi	r2,r19,2
   5033c:	10000326 	beq	r2,zero,5034c <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
   50340:	e0bfc017 	ldw	r2,-256(fp)
   50344:	10800084 	addi	r2,r2,2
   50348:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   5034c:	9880210c 	andi	r2,r19,132
   50350:	1000351e 	bne	r2,zero,50428 <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
   50354:	e0ffba17 	ldw	r3,-280(fp)
   50358:	e0bfc017 	ldw	r2,-256(fp)
   5035c:	18a1c83a 	sub	r16,r3,r2
   50360:	0400310e 	bge	zero,r16,50428 <___vfiprintf_internal_r+0xdc4>
   50364:	00001706 	br	503c4 <___vfiprintf_internal_r+0xd60>
   50368:	00800174 	movhi	r2,5
   5036c:	10944084 	addi	r2,r2,20738
   50370:	90800015 	stw	r2,0(r18)
   50374:	00800404 	movi	r2,16
   50378:	90800115 	stw	r2,4(r18)
   5037c:	e0bfca17 	ldw	r2,-216(fp)
   50380:	10800404 	addi	r2,r2,16
   50384:	e0bfca15 	stw	r2,-216(fp)
   50388:	94800204 	addi	r18,r18,8
   5038c:	e0bfc917 	ldw	r2,-220(fp)
   50390:	10800044 	addi	r2,r2,1
   50394:	e0bfc915 	stw	r2,-220(fp)
   50398:	e0bfc917 	ldw	r2,-220(fp)
   5039c:	10800210 	cmplti	r2,r2,8
   503a0:	1000071e 	bne	r2,zero,503c0 <___vfiprintf_internal_r+0xd5c>
   503a4:	e0bfc804 	addi	r2,fp,-224
   503a8:	100d883a 	mov	r6,r2
   503ac:	e17fe717 	ldw	r5,-100(fp)
   503b0:	e13fe617 	ldw	r4,-104(fp)
   503b4:	004f3e80 	call	4f3e8 <__sprint_r>
   503b8:	10012d1e 	bne	r2,zero,50870 <___vfiprintf_internal_r+0x120c>
   503bc:	e4bfcb04 	addi	r18,fp,-212
   503c0:	843ffc04 	addi	r16,r16,-16
   503c4:	80800448 	cmpgei	r2,r16,17
   503c8:	103fe71e 	bne	r2,zero,50368 <_gp+0xffff1190>
   503cc:	00800174 	movhi	r2,5
   503d0:	10944084 	addi	r2,r2,20738
   503d4:	90800015 	stw	r2,0(r18)
   503d8:	8005883a 	mov	r2,r16
   503dc:	90800115 	stw	r2,4(r18)
   503e0:	e0bfca17 	ldw	r2,-216(fp)
   503e4:	8007883a 	mov	r3,r16
   503e8:	10c5883a 	add	r2,r2,r3
   503ec:	e0bfca15 	stw	r2,-216(fp)
   503f0:	94800204 	addi	r18,r18,8
   503f4:	e0bfc917 	ldw	r2,-220(fp)
   503f8:	10800044 	addi	r2,r2,1
   503fc:	e0bfc915 	stw	r2,-220(fp)
   50400:	e0bfc917 	ldw	r2,-220(fp)
   50404:	10800210 	cmplti	r2,r2,8
   50408:	1000071e 	bne	r2,zero,50428 <___vfiprintf_internal_r+0xdc4>
   5040c:	e0bfc804 	addi	r2,fp,-224
   50410:	100d883a 	mov	r6,r2
   50414:	e17fe717 	ldw	r5,-100(fp)
   50418:	e13fe617 	ldw	r4,-104(fp)
   5041c:	004f3e80 	call	4f3e8 <__sprint_r>
   50420:	1001151e 	bne	r2,zero,50878 <___vfiprintf_internal_r+0x1214>
   50424:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
   50428:	e0bfc703 	ldbu	r2,-228(fp)
   5042c:	10803fcc 	andi	r2,r2,255
   50430:	1080201c 	xori	r2,r2,128
   50434:	10bfe004 	addi	r2,r2,-128
   50438:	10001526 	beq	r2,zero,50490 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
   5043c:	e0bfc704 	addi	r2,fp,-228
   50440:	90800015 	stw	r2,0(r18)
   50444:	00800044 	movi	r2,1
   50448:	90800115 	stw	r2,4(r18)
   5044c:	e0bfca17 	ldw	r2,-216(fp)
   50450:	10800044 	addi	r2,r2,1
   50454:	e0bfca15 	stw	r2,-216(fp)
   50458:	94800204 	addi	r18,r18,8
   5045c:	e0bfc917 	ldw	r2,-220(fp)
   50460:	10800044 	addi	r2,r2,1
   50464:	e0bfc915 	stw	r2,-220(fp)
   50468:	e0bfc917 	ldw	r2,-220(fp)
   5046c:	10800210 	cmplti	r2,r2,8
   50470:	1000071e 	bne	r2,zero,50490 <___vfiprintf_internal_r+0xe2c>
   50474:	e0bfc804 	addi	r2,fp,-224
   50478:	100d883a 	mov	r6,r2
   5047c:	e17fe717 	ldw	r5,-100(fp)
   50480:	e13fe617 	ldw	r4,-104(fp)
   50484:	004f3e80 	call	4f3e8 <__sprint_r>
   50488:	1000fd1e 	bne	r2,zero,50880 <___vfiprintf_internal_r+0x121c>
   5048c:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
   50490:	9880008c 	andi	r2,r19,2
   50494:	10001526 	beq	r2,zero,504ec <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
   50498:	e0bfe504 	addi	r2,fp,-108
   5049c:	90800015 	stw	r2,0(r18)
   504a0:	00800084 	movi	r2,2
   504a4:	90800115 	stw	r2,4(r18)
   504a8:	e0bfca17 	ldw	r2,-216(fp)
   504ac:	10800084 	addi	r2,r2,2
   504b0:	e0bfca15 	stw	r2,-216(fp)
   504b4:	94800204 	addi	r18,r18,8
   504b8:	e0bfc917 	ldw	r2,-220(fp)
   504bc:	10800044 	addi	r2,r2,1
   504c0:	e0bfc915 	stw	r2,-220(fp)
   504c4:	e0bfc917 	ldw	r2,-220(fp)
   504c8:	10800210 	cmplti	r2,r2,8
   504cc:	1000071e 	bne	r2,zero,504ec <___vfiprintf_internal_r+0xe88>
   504d0:	e0bfc804 	addi	r2,fp,-224
   504d4:	100d883a 	mov	r6,r2
   504d8:	e17fe717 	ldw	r5,-100(fp)
   504dc:	e13fe617 	ldw	r4,-104(fp)
   504e0:	004f3e80 	call	4f3e8 <__sprint_r>
   504e4:	1000e81e 	bne	r2,zero,50888 <___vfiprintf_internal_r+0x1224>
   504e8:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   504ec:	9880210c 	andi	r2,r19,132
   504f0:	10802018 	cmpnei	r2,r2,128
   504f4:	1000351e 	bne	r2,zero,505cc <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
   504f8:	e0ffba17 	ldw	r3,-280(fp)
   504fc:	e0bfc017 	ldw	r2,-256(fp)
   50500:	18a1c83a 	sub	r16,r3,r2
   50504:	0400310e 	bge	zero,r16,505cc <___vfiprintf_internal_r+0xf68>
   50508:	00001706 	br	50568 <___vfiprintf_internal_r+0xf04>
   5050c:	00800174 	movhi	r2,5
   50510:	10944484 	addi	r2,r2,20754
   50514:	90800015 	stw	r2,0(r18)
   50518:	00800404 	movi	r2,16
   5051c:	90800115 	stw	r2,4(r18)
   50520:	e0bfca17 	ldw	r2,-216(fp)
   50524:	10800404 	addi	r2,r2,16
   50528:	e0bfca15 	stw	r2,-216(fp)
   5052c:	94800204 	addi	r18,r18,8
   50530:	e0bfc917 	ldw	r2,-220(fp)
   50534:	10800044 	addi	r2,r2,1
   50538:	e0bfc915 	stw	r2,-220(fp)
   5053c:	e0bfc917 	ldw	r2,-220(fp)
   50540:	10800210 	cmplti	r2,r2,8
   50544:	1000071e 	bne	r2,zero,50564 <___vfiprintf_internal_r+0xf00>
   50548:	e0bfc804 	addi	r2,fp,-224
   5054c:	100d883a 	mov	r6,r2
   50550:	e17fe717 	ldw	r5,-100(fp)
   50554:	e13fe617 	ldw	r4,-104(fp)
   50558:	004f3e80 	call	4f3e8 <__sprint_r>
   5055c:	1000cc1e 	bne	r2,zero,50890 <___vfiprintf_internal_r+0x122c>
   50560:	e4bfcb04 	addi	r18,fp,-212
   50564:	843ffc04 	addi	r16,r16,-16
   50568:	80800448 	cmpgei	r2,r16,17
   5056c:	103fe71e 	bne	r2,zero,5050c <_gp+0xffff1334>
   50570:	00800174 	movhi	r2,5
   50574:	10944484 	addi	r2,r2,20754
   50578:	90800015 	stw	r2,0(r18)
   5057c:	8005883a 	mov	r2,r16
   50580:	90800115 	stw	r2,4(r18)
   50584:	e0bfca17 	ldw	r2,-216(fp)
   50588:	8007883a 	mov	r3,r16
   5058c:	10c5883a 	add	r2,r2,r3
   50590:	e0bfca15 	stw	r2,-216(fp)
   50594:	94800204 	addi	r18,r18,8
   50598:	e0bfc917 	ldw	r2,-220(fp)
   5059c:	10800044 	addi	r2,r2,1
   505a0:	e0bfc915 	stw	r2,-220(fp)
   505a4:	e0bfc917 	ldw	r2,-220(fp)
   505a8:	10800210 	cmplti	r2,r2,8
   505ac:	1000071e 	bne	r2,zero,505cc <___vfiprintf_internal_r+0xf68>
   505b0:	e0bfc804 	addi	r2,fp,-224
   505b4:	100d883a 	mov	r6,r2
   505b8:	e17fe717 	ldw	r5,-100(fp)
   505bc:	e13fe617 	ldw	r4,-104(fp)
   505c0:	004f3e80 	call	4f3e8 <__sprint_r>
   505c4:	1000b41e 	bne	r2,zero,50898 <___vfiprintf_internal_r+0x1234>
   505c8:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   505cc:	e0ffbf17 	ldw	r3,-260(fp)
   505d0:	e0bfc117 	ldw	r2,-252(fp)
   505d4:	18a1c83a 	sub	r16,r3,r2
   505d8:	0400310e 	bge	zero,r16,506a0 <___vfiprintf_internal_r+0x103c>
   505dc:	00001706 	br	5063c <___vfiprintf_internal_r+0xfd8>
   505e0:	00800174 	movhi	r2,5
   505e4:	10944484 	addi	r2,r2,20754
   505e8:	90800015 	stw	r2,0(r18)
   505ec:	00800404 	movi	r2,16
   505f0:	90800115 	stw	r2,4(r18)
   505f4:	e0bfca17 	ldw	r2,-216(fp)
   505f8:	10800404 	addi	r2,r2,16
   505fc:	e0bfca15 	stw	r2,-216(fp)
   50600:	94800204 	addi	r18,r18,8
   50604:	e0bfc917 	ldw	r2,-220(fp)
   50608:	10800044 	addi	r2,r2,1
   5060c:	e0bfc915 	stw	r2,-220(fp)
   50610:	e0bfc917 	ldw	r2,-220(fp)
   50614:	10800210 	cmplti	r2,r2,8
   50618:	1000071e 	bne	r2,zero,50638 <___vfiprintf_internal_r+0xfd4>
   5061c:	e0bfc804 	addi	r2,fp,-224
   50620:	100d883a 	mov	r6,r2
   50624:	e17fe717 	ldw	r5,-100(fp)
   50628:	e13fe617 	ldw	r4,-104(fp)
   5062c:	004f3e80 	call	4f3e8 <__sprint_r>
   50630:	10009b1e 	bne	r2,zero,508a0 <___vfiprintf_internal_r+0x123c>
   50634:	e4bfcb04 	addi	r18,fp,-212
   50638:	843ffc04 	addi	r16,r16,-16
   5063c:	80800448 	cmpgei	r2,r16,17
   50640:	103fe71e 	bne	r2,zero,505e0 <_gp+0xffff1408>
   50644:	00800174 	movhi	r2,5
   50648:	10944484 	addi	r2,r2,20754
   5064c:	90800015 	stw	r2,0(r18)
   50650:	8005883a 	mov	r2,r16
   50654:	90800115 	stw	r2,4(r18)
   50658:	e0bfca17 	ldw	r2,-216(fp)
   5065c:	8007883a 	mov	r3,r16
   50660:	10c5883a 	add	r2,r2,r3
   50664:	e0bfca15 	stw	r2,-216(fp)
   50668:	94800204 	addi	r18,r18,8
   5066c:	e0bfc917 	ldw	r2,-220(fp)
   50670:	10800044 	addi	r2,r2,1
   50674:	e0bfc915 	stw	r2,-220(fp)
   50678:	e0bfc917 	ldw	r2,-220(fp)
   5067c:	10800210 	cmplti	r2,r2,8
   50680:	1000071e 	bne	r2,zero,506a0 <___vfiprintf_internal_r+0x103c>
   50684:	e0bfc804 	addi	r2,fp,-224
   50688:	100d883a 	mov	r6,r2
   5068c:	e17fe717 	ldw	r5,-100(fp)
   50690:	e13fe617 	ldw	r4,-104(fp)
   50694:	004f3e80 	call	4f3e8 <__sprint_r>
   50698:	1000831e 	bne	r2,zero,508a8 <___vfiprintf_internal_r+0x1244>
   5069c:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   506a0:	95000015 	stw	r20,0(r18)
   506a4:	e0bfc117 	ldw	r2,-252(fp)
   506a8:	90800115 	stw	r2,4(r18)
   506ac:	e0ffca17 	ldw	r3,-216(fp)
   506b0:	e0bfc117 	ldw	r2,-252(fp)
   506b4:	1885883a 	add	r2,r3,r2
   506b8:	e0bfca15 	stw	r2,-216(fp)
   506bc:	94800204 	addi	r18,r18,8
   506c0:	e0bfc917 	ldw	r2,-220(fp)
   506c4:	10800044 	addi	r2,r2,1
   506c8:	e0bfc915 	stw	r2,-220(fp)
   506cc:	e0bfc917 	ldw	r2,-220(fp)
   506d0:	10800210 	cmplti	r2,r2,8
   506d4:	1000071e 	bne	r2,zero,506f4 <___vfiprintf_internal_r+0x1090>
   506d8:	e0bfc804 	addi	r2,fp,-224
   506dc:	100d883a 	mov	r6,r2
   506e0:	e17fe717 	ldw	r5,-100(fp)
   506e4:	e13fe617 	ldw	r4,-104(fp)
   506e8:	004f3e80 	call	4f3e8 <__sprint_r>
   506ec:	1000701e 	bne	r2,zero,508b0 <___vfiprintf_internal_r+0x124c>
   506f0:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   506f4:	9880010c 	andi	r2,r19,4
   506f8:	10003526 	beq	r2,zero,507d0 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
   506fc:	e0ffba17 	ldw	r3,-280(fp)
   50700:	e0bfc017 	ldw	r2,-256(fp)
   50704:	18a1c83a 	sub	r16,r3,r2
   50708:	0400310e 	bge	zero,r16,507d0 <___vfiprintf_internal_r+0x116c>
   5070c:	00001706 	br	5076c <___vfiprintf_internal_r+0x1108>
   50710:	00800174 	movhi	r2,5
   50714:	10944084 	addi	r2,r2,20738
   50718:	90800015 	stw	r2,0(r18)
   5071c:	00800404 	movi	r2,16
   50720:	90800115 	stw	r2,4(r18)
   50724:	e0bfca17 	ldw	r2,-216(fp)
   50728:	10800404 	addi	r2,r2,16
   5072c:	e0bfca15 	stw	r2,-216(fp)
   50730:	94800204 	addi	r18,r18,8
   50734:	e0bfc917 	ldw	r2,-220(fp)
   50738:	10800044 	addi	r2,r2,1
   5073c:	e0bfc915 	stw	r2,-220(fp)
   50740:	e0bfc917 	ldw	r2,-220(fp)
   50744:	10800210 	cmplti	r2,r2,8
   50748:	1000071e 	bne	r2,zero,50768 <___vfiprintf_internal_r+0x1104>
   5074c:	e0bfc804 	addi	r2,fp,-224
   50750:	100d883a 	mov	r6,r2
   50754:	e17fe717 	ldw	r5,-100(fp)
   50758:	e13fe617 	ldw	r4,-104(fp)
   5075c:	004f3e80 	call	4f3e8 <__sprint_r>
   50760:	1000551e 	bne	r2,zero,508b8 <___vfiprintf_internal_r+0x1254>
   50764:	e4bfcb04 	addi	r18,fp,-212
   50768:	843ffc04 	addi	r16,r16,-16
   5076c:	80800448 	cmpgei	r2,r16,17
   50770:	103fe71e 	bne	r2,zero,50710 <_gp+0xffff1538>
   50774:	00800174 	movhi	r2,5
   50778:	10944084 	addi	r2,r2,20738
   5077c:	90800015 	stw	r2,0(r18)
   50780:	8005883a 	mov	r2,r16
   50784:	90800115 	stw	r2,4(r18)
   50788:	e0bfca17 	ldw	r2,-216(fp)
   5078c:	8007883a 	mov	r3,r16
   50790:	10c5883a 	add	r2,r2,r3
   50794:	e0bfca15 	stw	r2,-216(fp)
   50798:	94800204 	addi	r18,r18,8
   5079c:	e0bfc917 	ldw	r2,-220(fp)
   507a0:	10800044 	addi	r2,r2,1
   507a4:	e0bfc915 	stw	r2,-220(fp)
   507a8:	e0bfc917 	ldw	r2,-220(fp)
   507ac:	10800210 	cmplti	r2,r2,8
   507b0:	1000071e 	bne	r2,zero,507d0 <___vfiprintf_internal_r+0x116c>
   507b4:	e0bfc804 	addi	r2,fp,-224
   507b8:	100d883a 	mov	r6,r2
   507bc:	e17fe717 	ldw	r5,-100(fp)
   507c0:	e13fe617 	ldw	r4,-104(fp)
   507c4:	004f3e80 	call	4f3e8 <__sprint_r>
   507c8:	10003d1e 	bne	r2,zero,508c0 <___vfiprintf_internal_r+0x125c>
   507cc:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   507d0:	e0ffba17 	ldw	r3,-280(fp)
   507d4:	e0bfc017 	ldw	r2,-256(fp)
   507d8:	10c0010e 	bge	r2,r3,507e0 <___vfiprintf_internal_r+0x117c>
   507dc:	1805883a 	mov	r2,r3
   507e0:	e0ffb917 	ldw	r3,-284(fp)
   507e4:	1885883a 	add	r2,r3,r2
   507e8:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
   507ec:	e0bfca17 	ldw	r2,-216(fp)
   507f0:	10000626 	beq	r2,zero,5080c <___vfiprintf_internal_r+0x11a8>
   507f4:	e0bfc804 	addi	r2,fp,-224
   507f8:	100d883a 	mov	r6,r2
   507fc:	e17fe717 	ldw	r5,-100(fp)
   50800:	e13fe617 	ldw	r4,-104(fp)
   50804:	004f3e80 	call	4f3e8 <__sprint_r>
   50808:	10002f1e 	bne	r2,zero,508c8 <___vfiprintf_internal_r+0x1264>
   5080c:	e03fc915 	stw	zero,-220(fp)
   50810:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
   50814:	e0bfc317 	ldw	r2,-244(fp)
   50818:	103be426 	beq	r2,zero,4f7ac <_gp+0xffff05d4>
			_free_r (data, malloc_buf);
   5081c:	e17fc317 	ldw	r5,-244(fp)
   50820:	e13fe617 	ldw	r4,-104(fp)
   50824:	0049f540 	call	49f54 <_free_r>
			malloc_buf = NULL;
   50828:	e03fc315 	stw	zero,-244(fp)
		}
	}
   5082c:	003bdf06 	br	4f7ac <_gp+0xffff05d4>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   50830:	0001883a 	nop
   50834:	00000106 	br	5083c <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   50838:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   5083c:	e0bfca17 	ldw	r2,-216(fp)
   50840:	10000626 	beq	r2,zero,5085c <___vfiprintf_internal_r+0x11f8>
   50844:	e0bfc804 	addi	r2,fp,-224
   50848:	100d883a 	mov	r6,r2
   5084c:	e17fe717 	ldw	r5,-100(fp)
   50850:	e13fe617 	ldw	r4,-104(fp)
   50854:	004f3e80 	call	4f3e8 <__sprint_r>
   50858:	10001d1e 	bne	r2,zero,508d0 <___vfiprintf_internal_r+0x126c>
   5085c:	e03fc915 	stw	zero,-220(fp)
   50860:	e4bfcb04 	addi	r18,fp,-212
   50864:	00001b06 	br	508d4 <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   50868:	0001883a 	nop
   5086c:	00001906 	br	508d4 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   50870:	0001883a 	nop
   50874:	00001706 	br	508d4 <___vfiprintf_internal_r+0x1270>
   50878:	0001883a 	nop
   5087c:	00001506 	br	508d4 <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   50880:	0001883a 	nop
   50884:	00001306 	br	508d4 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   50888:	0001883a 	nop
   5088c:	00001106 	br	508d4 <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   50890:	0001883a 	nop
   50894:	00000f06 	br	508d4 <___vfiprintf_internal_r+0x1270>
   50898:	0001883a 	nop
   5089c:	00000d06 	br	508d4 <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   508a0:	0001883a 	nop
   508a4:	00000b06 	br	508d4 <___vfiprintf_internal_r+0x1270>
   508a8:	0001883a 	nop
   508ac:	00000906 	br	508d4 <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   508b0:	0001883a 	nop
   508b4:	00000706 	br	508d4 <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   508b8:	0001883a 	nop
   508bc:	00000506 	br	508d4 <___vfiprintf_internal_r+0x1270>
   508c0:	0001883a 	nop
   508c4:	00000306 	br	508d4 <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   508c8:	0001883a 	nop
   508cc:	00000106 	br	508d4 <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   508d0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   508d4:	e0bfc317 	ldw	r2,-244(fp)
   508d8:	10000326 	beq	r2,zero,508e8 <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
   508dc:	e17fc317 	ldw	r5,-244(fp)
   508e0:	e13fe617 	ldw	r4,-104(fp)
   508e4:	0049f540 	call	49f54 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   508e8:	e0bfe717 	ldw	r2,-100(fp)
   508ec:	1080030b 	ldhu	r2,12(r2)
   508f0:	10bfffcc 	andi	r2,r2,65535
   508f4:	1080100c 	andi	r2,r2,64
   508f8:	1000021e 	bne	r2,zero,50904 <___vfiprintf_internal_r+0x12a0>
   508fc:	e0bfb917 	ldw	r2,-284(fp)
   50900:	00000206 	br	5090c <___vfiprintf_internal_r+0x12a8>
   50904:	00bfffc4 	movi	r2,-1
   50908:	0001883a 	nop
	/* NOTREACHED */
}
   5090c:	e6fff804 	addi	sp,fp,-32
   50910:	dfc00917 	ldw	ra,36(sp)
   50914:	df000817 	ldw	fp,32(sp)
   50918:	ddc00717 	ldw	r23,28(sp)
   5091c:	dd800617 	ldw	r22,24(sp)
   50920:	dd400517 	ldw	r21,20(sp)
   50924:	dd000417 	ldw	r20,16(sp)
   50928:	dcc00317 	ldw	r19,12(sp)
   5092c:	dc800217 	ldw	r18,8(sp)
   50930:	dc400117 	ldw	r17,4(sp)
   50934:	dc000017 	ldw	r16,0(sp)
   50938:	dec00a04 	addi	sp,sp,40
   5093c:	f800283a 	ret

00050940 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
   50940:	defff904 	addi	sp,sp,-28
   50944:	dfc00615 	stw	ra,24(sp)
   50948:	df000515 	stw	fp,20(sp)
   5094c:	df000504 	addi	fp,sp,20
   50950:	e13ffc15 	stw	r4,-16(fp)
   50954:	e17ffd15 	stw	r5,-12(fp)
   50958:	e1bffe15 	stw	r6,-8(fp)
   5095c:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   50960:	d0285515 	stw	zero,-24236(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
   50964:	e1bfff17 	ldw	r6,-4(fp)
   50968:	e17ffe17 	ldw	r5,-8(fp)
   5096c:	e13ffd17 	ldw	r4,-12(fp)
   50970:	0052d180 	call	52d18 <write>
   50974:	e0bffb15 	stw	r2,-20(fp)
   50978:	e0bffb17 	ldw	r2,-20(fp)
   5097c:	10bfffd8 	cmpnei	r2,r2,-1
   50980:	1000051e 	bne	r2,zero,50998 <_write_r+0x58>
   50984:	d0a85517 	ldw	r2,-24236(gp)
   50988:	10000326 	beq	r2,zero,50998 <_write_r+0x58>
    ptr->_errno = errno;
   5098c:	d0e85517 	ldw	r3,-24236(gp)
   50990:	e0bffc17 	ldw	r2,-16(fp)
   50994:	10c00015 	stw	r3,0(r2)
  return ret;
   50998:	e0bffb17 	ldw	r2,-20(fp)
}
   5099c:	e037883a 	mov	sp,fp
   509a0:	dfc00117 	ldw	ra,4(sp)
   509a4:	df000017 	ldw	fp,0(sp)
   509a8:	dec00204 	addi	sp,sp,8
   509ac:	f800283a 	ret

000509b0 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   509b0:	defffb04 	addi	sp,sp,-20
   509b4:	dfc00415 	stw	ra,16(sp)
   509b8:	df000315 	stw	fp,12(sp)
   509bc:	df000304 	addi	fp,sp,12
   509c0:	e13ffe15 	stw	r4,-8(fp)
   509c4:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   509c8:	d0285515 	stw	zero,-24236(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
   509cc:	e13fff17 	ldw	r4,-4(fp)
   509d0:	00524c00 	call	524c0 <close>
   509d4:	e0bffd15 	stw	r2,-12(fp)
   509d8:	e0bffd17 	ldw	r2,-12(fp)
   509dc:	10bfffd8 	cmpnei	r2,r2,-1
   509e0:	1000051e 	bne	r2,zero,509f8 <_close_r+0x48>
   509e4:	d0a85517 	ldw	r2,-24236(gp)
   509e8:	10000326 	beq	r2,zero,509f8 <_close_r+0x48>
    ptr->_errno = errno;
   509ec:	d0e85517 	ldw	r3,-24236(gp)
   509f0:	e0bffe17 	ldw	r2,-8(fp)
   509f4:	10c00015 	stw	r3,0(r2)
  return ret;
   509f8:	e0bffd17 	ldw	r2,-12(fp)
}
   509fc:	e037883a 	mov	sp,fp
   50a00:	dfc00117 	ldw	ra,4(sp)
   50a04:	df000017 	ldw	fp,0(sp)
   50a08:	dec00204 	addi	sp,sp,8
   50a0c:	f800283a 	ret

00050a10 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
   50a10:	defff504 	addi	sp,sp,-44
   50a14:	dfc00a15 	stw	ra,40(sp)
   50a18:	df000915 	stw	fp,36(sp)
   50a1c:	df000904 	addi	fp,sp,36
   50a20:	e13ffd15 	stw	r4,-12(fp)
   50a24:	e17ffe15 	stw	r5,-8(fp)
   50a28:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
   50a2c:	e17fff17 	ldw	r5,-4(fp)
   50a30:	e13ffe17 	ldw	r4,-8(fp)
   50a34:	00421cc0 	call	421cc <__mulsi3>
   50a38:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
   50a3c:	e17ff817 	ldw	r5,-32(fp)
   50a40:	e13ffd17 	ldw	r4,-12(fp)
   50a44:	004b5a40 	call	4b5a4 <_malloc_r>
   50a48:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
   50a4c:	e0bff917 	ldw	r2,-28(fp)
   50a50:	1000021e 	bne	r2,zero,50a5c <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
   50a54:	0005883a 	mov	r2,zero
   50a58:	00004106 	br	50b60 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
   50a5c:	e0bff917 	ldw	r2,-28(fp)
   50a60:	10bffe04 	addi	r2,r2,-8
   50a64:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
   50a68:	e0bffa17 	ldw	r2,-24(fp)
   50a6c:	10c00117 	ldw	r3,4(r2)
   50a70:	00bfff04 	movi	r2,-4
   50a74:	1884703a 	and	r2,r3,r2
   50a78:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
   50a7c:	e0bffb17 	ldw	r2,-20(fp)
   50a80:	10bfff04 	addi	r2,r2,-4
   50a84:	e0bffc15 	stw	r2,-16(fp)
   50a88:	e0bffc17 	ldw	r2,-16(fp)
   50a8c:	10800968 	cmpgeui	r2,r2,37
   50a90:	10002e1e 	bne	r2,zero,50b4c <_calloc_r+0x13c>
   50a94:	e0bff917 	ldw	r2,-28(fp)
   50a98:	e0bff715 	stw	r2,-36(fp)
   50a9c:	e0bffc17 	ldw	r2,-16(fp)
   50aa0:	10800530 	cmpltui	r2,r2,20
   50aa4:	10001e1e 	bne	r2,zero,50b20 <_calloc_r+0x110>
   50aa8:	e0bff717 	ldw	r2,-36(fp)
   50aac:	10c00104 	addi	r3,r2,4
   50ab0:	e0fff715 	stw	r3,-36(fp)
   50ab4:	10000015 	stw	zero,0(r2)
   50ab8:	e0bff717 	ldw	r2,-36(fp)
   50abc:	10c00104 	addi	r3,r2,4
   50ac0:	e0fff715 	stw	r3,-36(fp)
   50ac4:	10000015 	stw	zero,0(r2)
   50ac8:	e0bffc17 	ldw	r2,-16(fp)
   50acc:	10800730 	cmpltui	r2,r2,28
   50ad0:	1000131e 	bne	r2,zero,50b20 <_calloc_r+0x110>
   50ad4:	e0bff717 	ldw	r2,-36(fp)
   50ad8:	10c00104 	addi	r3,r2,4
   50adc:	e0fff715 	stw	r3,-36(fp)
   50ae0:	10000015 	stw	zero,0(r2)
   50ae4:	e0bff717 	ldw	r2,-36(fp)
   50ae8:	10c00104 	addi	r3,r2,4
   50aec:	e0fff715 	stw	r3,-36(fp)
   50af0:	10000015 	stw	zero,0(r2)
   50af4:	e0bffc17 	ldw	r2,-16(fp)
   50af8:	10800930 	cmpltui	r2,r2,36
   50afc:	1000081e 	bne	r2,zero,50b20 <_calloc_r+0x110>
   50b00:	e0bff717 	ldw	r2,-36(fp)
   50b04:	10c00104 	addi	r3,r2,4
   50b08:	e0fff715 	stw	r3,-36(fp)
   50b0c:	10000015 	stw	zero,0(r2)
   50b10:	e0bff717 	ldw	r2,-36(fp)
   50b14:	10c00104 	addi	r3,r2,4
   50b18:	e0fff715 	stw	r3,-36(fp)
   50b1c:	10000015 	stw	zero,0(r2)
   50b20:	e0bff717 	ldw	r2,-36(fp)
   50b24:	10c00104 	addi	r3,r2,4
   50b28:	e0fff715 	stw	r3,-36(fp)
   50b2c:	10000015 	stw	zero,0(r2)
   50b30:	e0bff717 	ldw	r2,-36(fp)
   50b34:	10c00104 	addi	r3,r2,4
   50b38:	e0fff715 	stw	r3,-36(fp)
   50b3c:	10000015 	stw	zero,0(r2)
   50b40:	e0bff717 	ldw	r2,-36(fp)
   50b44:	10000015 	stw	zero,0(r2)
   50b48:	00000406 	br	50b5c <_calloc_r+0x14c>
   50b4c:	e1bffc17 	ldw	r6,-16(fp)
   50b50:	000b883a 	mov	r5,zero
   50b54:	e13ff917 	ldw	r4,-28(fp)
   50b58:	004c66c0 	call	4c66c <memset>
    return mem;
   50b5c:	e0bff917 	ldw	r2,-28(fp)
  }
}
   50b60:	e037883a 	mov	sp,fp
   50b64:	dfc00117 	ldw	ra,4(sp)
   50b68:	df000017 	ldw	fp,0(sp)
   50b6c:	dec00204 	addi	sp,sp,8
   50b70:	f800283a 	ret

00050b74 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
   50b74:	defffa04 	addi	sp,sp,-24
   50b78:	dfc00515 	stw	ra,20(sp)
   50b7c:	df000415 	stw	fp,16(sp)
   50b80:	dc000315 	stw	r16,12(sp)
   50b84:	df000404 	addi	fp,sp,16
   50b88:	e13ffe15 	stw	r4,-8(fp)
   50b8c:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
   50b90:	8000021e 	bne	r16,zero,50b9c <_fclose_r+0x28>
    return (0);			/* on NULL */
   50b94:	0005883a 	mov	r2,zero
   50b98:	00003b06 	br	50c88 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
   50b9c:	e0bffe17 	ldw	r2,-8(fp)
   50ba0:	e0bffd15 	stw	r2,-12(fp)
   50ba4:	e0bffd17 	ldw	r2,-12(fp)
   50ba8:	10000526 	beq	r2,zero,50bc0 <_fclose_r+0x4c>
   50bac:	e0bffd17 	ldw	r2,-12(fp)
   50bb0:	10800e17 	ldw	r2,56(r2)
   50bb4:	1000021e 	bne	r2,zero,50bc0 <_fclose_r+0x4c>
   50bb8:	e13ffd17 	ldw	r4,-12(fp)
   50bbc:	0049d340 	call	49d34 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   50bc0:	8080030b 	ldhu	r2,12(r16)
   50bc4:	10bfffcc 	andi	r2,r2,65535
   50bc8:	10a0001c 	xori	r2,r2,32768
   50bcc:	10a00004 	addi	r2,r2,-32768
   50bd0:	1000021e 	bne	r2,zero,50bdc <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
   50bd4:	0005883a 	mov	r2,zero
   50bd8:	00002b06 	br	50c88 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   50bdc:	800b883a 	mov	r5,r16
   50be0:	e13ffe17 	ldw	r4,-8(fp)
   50be4:	00495980 	call	49598 <__sflush_r>
   50be8:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   50bec:	80800b17 	ldw	r2,44(r16)
   50bf0:	10000826 	beq	r2,zero,50c14 <_fclose_r+0xa0>
   50bf4:	80800b17 	ldw	r2,44(r16)
   50bf8:	80c00717 	ldw	r3,28(r16)
   50bfc:	180b883a 	mov	r5,r3
   50c00:	e13ffe17 	ldw	r4,-8(fp)
   50c04:	103ee83a 	callr	r2
   50c08:	1000020e 	bge	r2,zero,50c14 <_fclose_r+0xa0>
    r = EOF;
   50c0c:	00bfffc4 	movi	r2,-1
   50c10:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
   50c14:	8080030b 	ldhu	r2,12(r16)
   50c18:	10bfffcc 	andi	r2,r2,65535
   50c1c:	1080200c 	andi	r2,r2,128
   50c20:	10000426 	beq	r2,zero,50c34 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
   50c24:	80800417 	ldw	r2,16(r16)
   50c28:	100b883a 	mov	r5,r2
   50c2c:	e13ffe17 	ldw	r4,-8(fp)
   50c30:	0049f540 	call	49f54 <_free_r>
  if (HASUB (fp))
   50c34:	80800c17 	ldw	r2,48(r16)
   50c38:	10000826 	beq	r2,zero,50c5c <_fclose_r+0xe8>
    FREEUB (rptr, fp);
   50c3c:	80c00c17 	ldw	r3,48(r16)
   50c40:	80801004 	addi	r2,r16,64
   50c44:	18800426 	beq	r3,r2,50c58 <_fclose_r+0xe4>
   50c48:	80800c17 	ldw	r2,48(r16)
   50c4c:	100b883a 	mov	r5,r2
   50c50:	e13ffe17 	ldw	r4,-8(fp)
   50c54:	0049f540 	call	49f54 <_free_r>
   50c58:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
   50c5c:	80801117 	ldw	r2,68(r16)
   50c60:	10000526 	beq	r2,zero,50c78 <_fclose_r+0x104>
    FREELB (rptr, fp);
   50c64:	80801117 	ldw	r2,68(r16)
   50c68:	100b883a 	mov	r5,r2
   50c6c:	e13ffe17 	ldw	r4,-8(fp)
   50c70:	0049f540 	call	49f54 <_free_r>
   50c74:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
   50c78:	0049e0c0 	call	49e0c <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
   50c7c:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
   50c80:	0049e2c0 	call	49e2c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
   50c84:	e0bffc17 	ldw	r2,-16(fp)
}
   50c88:	e6ffff04 	addi	sp,fp,-4
   50c8c:	dfc00217 	ldw	ra,8(sp)
   50c90:	df000117 	ldw	fp,4(sp)
   50c94:	dc000017 	ldw	r16,0(sp)
   50c98:	dec00304 	addi	sp,sp,12
   50c9c:	f800283a 	ret

00050ca0 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
   50ca0:	defffe04 	addi	sp,sp,-8
   50ca4:	dfc00115 	stw	ra,4(sp)
   50ca8:	df000015 	stw	fp,0(sp)
   50cac:	d839883a 	mov	fp,sp
   50cb0:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
   50cb4:	d0a00517 	ldw	r2,-32748(gp)
   50cb8:	180b883a 	mov	r5,r3
   50cbc:	1009883a 	mov	r4,r2
   50cc0:	0050b740 	call	50b74 <_fclose_r>
}
   50cc4:	e037883a 	mov	sp,fp
   50cc8:	dfc00117 	ldw	ra,4(sp)
   50ccc:	df000017 	ldw	fp,0(sp)
   50cd0:	dec00204 	addi	sp,sp,8
   50cd4:	f800283a 	ret

00050cd8 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   50cd8:	defff804 	addi	sp,sp,-32
   50cdc:	dfc00715 	stw	ra,28(sp)
   50ce0:	df000615 	stw	fp,24(sp)
   50ce4:	df000604 	addi	fp,sp,24
   50ce8:	e13ffd15 	stw	r4,-12(fp)
   50cec:	e17ffe15 	stw	r5,-8(fp)
   50cf0:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
   50cf4:	004aec80 	call	4aec8 <__locale_mb_cur_max>
   50cf8:	10800058 	cmpnei	r2,r2,1
   50cfc:	10000a1e 	bne	r2,zero,50d28 <__fputwc+0x50>
   50d00:	e0bffe17 	ldw	r2,-8(fp)
   50d04:	0080080e 	bge	zero,r2,50d28 <__fputwc+0x50>
   50d08:	e0bffe17 	ldw	r2,-8(fp)
   50d0c:	10804008 	cmpgei	r2,r2,256
   50d10:	1000051e 	bne	r2,zero,50d28 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
   50d14:	e0bffe17 	ldw	r2,-8(fp)
   50d18:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
   50d1c:	00800044 	movi	r2,1
   50d20:	e0bffb15 	stw	r2,-20(fp)
   50d24:	00001406 	br	50d78 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
   50d28:	e0bfff17 	ldw	r2,-4(fp)
   50d2c:	10c01704 	addi	r3,r2,92
   50d30:	e0bffc04 	addi	r2,fp,-16
   50d34:	180f883a 	mov	r7,r3
   50d38:	e1bffe17 	ldw	r6,-8(fp)
   50d3c:	100b883a 	mov	r5,r2
   50d40:	e13ffd17 	ldw	r4,-12(fp)
   50d44:	005130c0 	call	5130c <_wcrtomb_r>
   50d48:	e0bffb15 	stw	r2,-20(fp)
   50d4c:	e0bffb17 	ldw	r2,-20(fp)
   50d50:	10bfffd8 	cmpnei	r2,r2,-1
   50d54:	1000081e 	bne	r2,zero,50d78 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
   50d58:	e0bfff17 	ldw	r2,-4(fp)
   50d5c:	1080030b 	ldhu	r2,12(r2)
   50d60:	10801014 	ori	r2,r2,64
   50d64:	1007883a 	mov	r3,r2
   50d68:	e0bfff17 	ldw	r2,-4(fp)
   50d6c:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
   50d70:	00bfffc4 	movi	r2,-1
   50d74:	00005006 	br	50eb8 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
   50d78:	e03ffa15 	stw	zero,-24(fp)
   50d7c:	00004a06 	br	50ea8 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
   50d80:	e0bfff17 	ldw	r2,-4(fp)
   50d84:	10800217 	ldw	r2,8(r2)
   50d88:	10ffffc4 	addi	r3,r2,-1
   50d8c:	e0bfff17 	ldw	r2,-4(fp)
   50d90:	10c00215 	stw	r3,8(r2)
   50d94:	e0bfff17 	ldw	r2,-4(fp)
   50d98:	10800217 	ldw	r2,8(r2)
   50d9c:	10002c0e 	bge	r2,zero,50e50 <__fputwc+0x178>
   50da0:	e0bfff17 	ldw	r2,-4(fp)
   50da4:	10c00217 	ldw	r3,8(r2)
   50da8:	e0bfff17 	ldw	r2,-4(fp)
   50dac:	10800617 	ldw	r2,24(r2)
   50db0:	18801c16 	blt	r3,r2,50e24 <__fputwc+0x14c>
   50db4:	e0bfff17 	ldw	r2,-4(fp)
   50db8:	10800017 	ldw	r2,0(r2)
   50dbc:	e13ffc04 	addi	r4,fp,-16
   50dc0:	e0fffa17 	ldw	r3,-24(fp)
   50dc4:	20c7883a 	add	r3,r4,r3
   50dc8:	18c00003 	ldbu	r3,0(r3)
   50dcc:	10c00005 	stb	r3,0(r2)
   50dd0:	e0bfff17 	ldw	r2,-4(fp)
   50dd4:	10800017 	ldw	r2,0(r2)
   50dd8:	10800003 	ldbu	r2,0(r2)
   50ddc:	10803fcc 	andi	r2,r2,255
   50de0:	108002a0 	cmpeqi	r2,r2,10
   50de4:	1000091e 	bne	r2,zero,50e0c <__fputwc+0x134>
   50de8:	e0bfff17 	ldw	r2,-4(fp)
   50dec:	10800017 	ldw	r2,0(r2)
   50df0:	11000044 	addi	r4,r2,1
   50df4:	e0ffff17 	ldw	r3,-4(fp)
   50df8:	19000015 	stw	r4,0(r3)
   50dfc:	10800003 	ldbu	r2,0(r2)
   50e00:	10803fcc 	andi	r2,r2,255
   50e04:	10bfffe0 	cmpeqi	r2,r2,-1
   50e08:	00002006 	br	50e8c <__fputwc+0x1b4>
   50e0c:	e1bfff17 	ldw	r6,-4(fp)
   50e10:	01400284 	movi	r5,10
   50e14:	e13ffd17 	ldw	r4,-12(fp)
   50e18:	00511640 	call	51164 <__swbuf_r>
   50e1c:	10bfffe0 	cmpeqi	r2,r2,-1
   50e20:	00001a06 	br	50e8c <__fputwc+0x1b4>
   50e24:	e0fffc04 	addi	r3,fp,-16
   50e28:	e0bffa17 	ldw	r2,-24(fp)
   50e2c:	1885883a 	add	r2,r3,r2
   50e30:	10800003 	ldbu	r2,0(r2)
   50e34:	10803fcc 	andi	r2,r2,255
   50e38:	e1bfff17 	ldw	r6,-4(fp)
   50e3c:	100b883a 	mov	r5,r2
   50e40:	e13ffd17 	ldw	r4,-12(fp)
   50e44:	00511640 	call	51164 <__swbuf_r>
   50e48:	10bfffe0 	cmpeqi	r2,r2,-1
   50e4c:	00000f06 	br	50e8c <__fputwc+0x1b4>
   50e50:	e0bfff17 	ldw	r2,-4(fp)
   50e54:	10800017 	ldw	r2,0(r2)
   50e58:	e13ffc04 	addi	r4,fp,-16
   50e5c:	e0fffa17 	ldw	r3,-24(fp)
   50e60:	20c7883a 	add	r3,r4,r3
   50e64:	18c00003 	ldbu	r3,0(r3)
   50e68:	10c00005 	stb	r3,0(r2)
   50e6c:	e0bfff17 	ldw	r2,-4(fp)
   50e70:	10800017 	ldw	r2,0(r2)
   50e74:	11000044 	addi	r4,r2,1
   50e78:	e0ffff17 	ldw	r3,-4(fp)
   50e7c:	19000015 	stw	r4,0(r3)
   50e80:	10800003 	ldbu	r2,0(r2)
   50e84:	10803fcc 	andi	r2,r2,255
   50e88:	10bfffe0 	cmpeqi	r2,r2,-1
   50e8c:	10803fcc 	andi	r2,r2,255
   50e90:	10000226 	beq	r2,zero,50e9c <__fputwc+0x1c4>
      return WEOF;
   50e94:	00bfffc4 	movi	r2,-1
   50e98:	00000706 	br	50eb8 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
   50e9c:	e0bffa17 	ldw	r2,-24(fp)
   50ea0:	10800044 	addi	r2,r2,1
   50ea4:	e0bffa15 	stw	r2,-24(fp)
   50ea8:	e0fffa17 	ldw	r3,-24(fp)
   50eac:	e0bffb17 	ldw	r2,-20(fp)
   50eb0:	18bfb336 	bltu	r3,r2,50d80 <_gp+0xffff1ba8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
   50eb4:	e0bffe17 	ldw	r2,-8(fp)
}
   50eb8:	e037883a 	mov	sp,fp
   50ebc:	dfc00117 	ldw	ra,4(sp)
   50ec0:	df000017 	ldw	fp,0(sp)
   50ec4:	dec00204 	addi	sp,sp,8
   50ec8:	f800283a 	ret

00050ecc <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   50ecc:	defffa04 	addi	sp,sp,-24
   50ed0:	dfc00515 	stw	ra,20(sp)
   50ed4:	df000415 	stw	fp,16(sp)
   50ed8:	df000404 	addi	fp,sp,16
   50edc:	e13ffd15 	stw	r4,-12(fp)
   50ee0:	e17ffe15 	stw	r5,-8(fp)
   50ee4:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
   50ee8:	e0bfff17 	ldw	r2,-4(fp)
   50eec:	1080030b 	ldhu	r2,12(r2)
   50ef0:	10bfffcc 	andi	r2,r2,65535
   50ef4:	1088000c 	andi	r2,r2,8192
   50ef8:	10000b1e 	bne	r2,zero,50f28 <_fputwc_r+0x5c>
   50efc:	e0bfff17 	ldw	r2,-4(fp)
   50f00:	1080030b 	ldhu	r2,12(r2)
   50f04:	10880014 	ori	r2,r2,8192
   50f08:	1007883a 	mov	r3,r2
   50f0c:	e0bfff17 	ldw	r2,-4(fp)
   50f10:	10c0030d 	sth	r3,12(r2)
   50f14:	e0bfff17 	ldw	r2,-4(fp)
   50f18:	10801917 	ldw	r2,100(r2)
   50f1c:	10c80014 	ori	r3,r2,8192
   50f20:	e0bfff17 	ldw	r2,-4(fp)
   50f24:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
   50f28:	e1bfff17 	ldw	r6,-4(fp)
   50f2c:	e17ffe17 	ldw	r5,-8(fp)
   50f30:	e13ffd17 	ldw	r4,-12(fp)
   50f34:	0050cd80 	call	50cd8 <__fputwc>
   50f38:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
   50f3c:	e0bffc17 	ldw	r2,-16(fp)
}
   50f40:	e037883a 	mov	sp,fp
   50f44:	dfc00117 	ldw	ra,4(sp)
   50f48:	df000017 	ldw	fp,0(sp)
   50f4c:	dec00204 	addi	sp,sp,8
   50f50:	f800283a 	ret

00050f54 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
   50f54:	defffa04 	addi	sp,sp,-24
   50f58:	dfc00515 	stw	ra,20(sp)
   50f5c:	df000415 	stw	fp,16(sp)
   50f60:	df000404 	addi	fp,sp,16
   50f64:	e13ffe15 	stw	r4,-8(fp)
   50f68:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
   50f6c:	d0a00517 	ldw	r2,-32748(gp)
   50f70:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
   50f74:	e0bffc17 	ldw	r2,-16(fp)
   50f78:	e0bffd15 	stw	r2,-12(fp)
   50f7c:	e0bffd17 	ldw	r2,-12(fp)
   50f80:	10000526 	beq	r2,zero,50f98 <fputwc+0x44>
   50f84:	e0bffd17 	ldw	r2,-12(fp)
   50f88:	10800e17 	ldw	r2,56(r2)
   50f8c:	1000021e 	bne	r2,zero,50f98 <fputwc+0x44>
   50f90:	e13ffd17 	ldw	r4,-12(fp)
   50f94:	0049d340 	call	49d34 <__sinit>
  return _fputwc_r (reent, wc, fp);
   50f98:	e1bfff17 	ldw	r6,-4(fp)
   50f9c:	e17ffe17 	ldw	r5,-8(fp)
   50fa0:	e13ffc17 	ldw	r4,-16(fp)
   50fa4:	0050ecc0 	call	50ecc <_fputwc_r>
}
   50fa8:	e037883a 	mov	sp,fp
   50fac:	dfc00117 	ldw	ra,4(sp)
   50fb0:	df000017 	ldw	fp,0(sp)
   50fb4:	dec00204 	addi	sp,sp,8
   50fb8:	f800283a 	ret

00050fbc <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
   50fbc:	defffa04 	addi	sp,sp,-24
   50fc0:	dfc00515 	stw	ra,20(sp)
   50fc4:	df000415 	stw	fp,16(sp)
   50fc8:	df000404 	addi	fp,sp,16
   50fcc:	e13ffd15 	stw	r4,-12(fp)
   50fd0:	e17ffe15 	stw	r5,-8(fp)
   50fd4:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
   50fd8:	d0285515 	stw	zero,-24236(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
   50fdc:	e17fff17 	ldw	r5,-4(fp)
   50fe0:	e13ffe17 	ldw	r4,-8(fp)
   50fe4:	00526000 	call	52600 <fstat>
   50fe8:	e0bffc15 	stw	r2,-16(fp)
   50fec:	e0bffc17 	ldw	r2,-16(fp)
   50ff0:	10bfffd8 	cmpnei	r2,r2,-1
   50ff4:	1000051e 	bne	r2,zero,5100c <_fstat_r+0x50>
   50ff8:	d0a85517 	ldw	r2,-24236(gp)
   50ffc:	10000326 	beq	r2,zero,5100c <_fstat_r+0x50>
    ptr->_errno = errno;
   51000:	d0e85517 	ldw	r3,-24236(gp)
   51004:	e0bffd17 	ldw	r2,-12(fp)
   51008:	10c00015 	stw	r3,0(r2)
  return ret;
   5100c:	e0bffc17 	ldw	r2,-16(fp)
}
   51010:	e037883a 	mov	sp,fp
   51014:	dfc00117 	ldw	ra,4(sp)
   51018:	df000017 	ldw	fp,0(sp)
   5101c:	dec00204 	addi	sp,sp,8
   51020:	f800283a 	ret

00051024 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   51024:	defffb04 	addi	sp,sp,-20
   51028:	dfc00415 	stw	ra,16(sp)
   5102c:	df000315 	stw	fp,12(sp)
   51030:	df000304 	addi	fp,sp,12
   51034:	e13ffe15 	stw	r4,-8(fp)
   51038:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   5103c:	d0285515 	stw	zero,-24236(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
   51040:	e13fff17 	ldw	r4,-4(fp)
   51044:	00526f40 	call	526f4 <isatty>
   51048:	e0bffd15 	stw	r2,-12(fp)
   5104c:	e0bffd17 	ldw	r2,-12(fp)
   51050:	10bfffd8 	cmpnei	r2,r2,-1
   51054:	1000051e 	bne	r2,zero,5106c <_isatty_r+0x48>
   51058:	d0a85517 	ldw	r2,-24236(gp)
   5105c:	10000326 	beq	r2,zero,5106c <_isatty_r+0x48>
    ptr->_errno = errno;
   51060:	d0e85517 	ldw	r3,-24236(gp)
   51064:	e0bffe17 	ldw	r2,-8(fp)
   51068:	10c00015 	stw	r3,0(r2)
  return ret;
   5106c:	e0bffd17 	ldw	r2,-12(fp)
}
   51070:	e037883a 	mov	sp,fp
   51074:	dfc00117 	ldw	ra,4(sp)
   51078:	df000017 	ldw	fp,0(sp)
   5107c:	dec00204 	addi	sp,sp,8
   51080:	f800283a 	ret

00051084 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
   51084:	defff904 	addi	sp,sp,-28
   51088:	dfc00615 	stw	ra,24(sp)
   5108c:	df000515 	stw	fp,20(sp)
   51090:	df000504 	addi	fp,sp,20
   51094:	e13ffc15 	stw	r4,-16(fp)
   51098:	e17ffd15 	stw	r5,-12(fp)
   5109c:	e1bffe15 	stw	r6,-8(fp)
   510a0:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
   510a4:	d0285515 	stw	zero,-24236(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
   510a8:	e1bfff17 	ldw	r6,-4(fp)
   510ac:	e17ffe17 	ldw	r5,-8(fp)
   510b0:	e13ffd17 	ldw	r4,-12(fp)
   510b4:	00528c80 	call	528c8 <lseek>
   510b8:	e0bffb15 	stw	r2,-20(fp)
   510bc:	e0bffb17 	ldw	r2,-20(fp)
   510c0:	10bfffd8 	cmpnei	r2,r2,-1
   510c4:	1000051e 	bne	r2,zero,510dc <_lseek_r+0x58>
   510c8:	d0a85517 	ldw	r2,-24236(gp)
   510cc:	10000326 	beq	r2,zero,510dc <_lseek_r+0x58>
    ptr->_errno = errno;
   510d0:	d0e85517 	ldw	r3,-24236(gp)
   510d4:	e0bffc17 	ldw	r2,-16(fp)
   510d8:	10c00015 	stw	r3,0(r2)
  return ret;
   510dc:	e0bffb17 	ldw	r2,-20(fp)
}
   510e0:	e037883a 	mov	sp,fp
   510e4:	dfc00117 	ldw	ra,4(sp)
   510e8:	df000017 	ldw	fp,0(sp)
   510ec:	dec00204 	addi	sp,sp,8
   510f0:	f800283a 	ret

000510f4 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
   510f4:	defff904 	addi	sp,sp,-28
   510f8:	dfc00615 	stw	ra,24(sp)
   510fc:	df000515 	stw	fp,20(sp)
   51100:	df000504 	addi	fp,sp,20
   51104:	e13ffc15 	stw	r4,-16(fp)
   51108:	e17ffd15 	stw	r5,-12(fp)
   5110c:	e1bffe15 	stw	r6,-8(fp)
   51110:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   51114:	d0285515 	stw	zero,-24236(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
   51118:	e1bfff17 	ldw	r6,-4(fp)
   5111c:	e17ffe17 	ldw	r5,-8(fp)
   51120:	e13ffd17 	ldw	r4,-12(fp)
   51124:	0052aa40 	call	52aa4 <read>
   51128:	e0bffb15 	stw	r2,-20(fp)
   5112c:	e0bffb17 	ldw	r2,-20(fp)
   51130:	10bfffd8 	cmpnei	r2,r2,-1
   51134:	1000051e 	bne	r2,zero,5114c <_read_r+0x58>
   51138:	d0a85517 	ldw	r2,-24236(gp)
   5113c:	10000326 	beq	r2,zero,5114c <_read_r+0x58>
    ptr->_errno = errno;
   51140:	d0e85517 	ldw	r3,-24236(gp)
   51144:	e0bffc17 	ldw	r2,-16(fp)
   51148:	10c00015 	stw	r3,0(r2)
  return ret;
   5114c:	e0bffb17 	ldw	r2,-20(fp)
}
   51150:	e037883a 	mov	sp,fp
   51154:	dfc00117 	ldw	ra,4(sp)
   51158:	df000017 	ldw	fp,0(sp)
   5115c:	dec00204 	addi	sp,sp,8
   51160:	f800283a 	ret

00051164 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
   51164:	defff904 	addi	sp,sp,-28
   51168:	dfc00615 	stw	ra,24(sp)
   5116c:	df000515 	stw	fp,20(sp)
   51170:	dc800415 	stw	r18,16(sp)
   51174:	dc400315 	stw	r17,12(sp)
   51178:	dc000215 	stw	r16,8(sp)
   5117c:	df000504 	addi	fp,sp,20
   51180:	e13ffc15 	stw	r4,-16(fp)
   51184:	2825883a 	mov	r18,r5
   51188:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
   5118c:	e0bffc17 	ldw	r2,-16(fp)
   51190:	e0bffb15 	stw	r2,-20(fp)
   51194:	e0bffb17 	ldw	r2,-20(fp)
   51198:	10000526 	beq	r2,zero,511b0 <__swbuf_r+0x4c>
   5119c:	e0bffb17 	ldw	r2,-20(fp)
   511a0:	10800e17 	ldw	r2,56(r2)
   511a4:	1000021e 	bne	r2,zero,511b0 <__swbuf_r+0x4c>
   511a8:	e13ffb17 	ldw	r4,-20(fp)
   511ac:	0049d340 	call	49d34 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
   511b0:	80800617 	ldw	r2,24(r16)
   511b4:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
   511b8:	8080030b 	ldhu	r2,12(r16)
   511bc:	10bfffcc 	andi	r2,r2,65535
   511c0:	1080020c 	andi	r2,r2,8
   511c4:	10000226 	beq	r2,zero,511d0 <__swbuf_r+0x6c>
   511c8:	80800417 	ldw	r2,16(r16)
   511cc:	1000061e 	bne	r2,zero,511e8 <__swbuf_r+0x84>
   511d0:	800b883a 	mov	r5,r16
   511d4:	e13ffc17 	ldw	r4,-16(fp)
   511d8:	00474bc0 	call	474bc <__swsetup_r>
   511dc:	10000226 	beq	r2,zero,511e8 <__swbuf_r+0x84>
    return EOF;
   511e0:	00bfffc4 	movi	r2,-1
   511e4:	00003106 	br	512ac <__swbuf_r+0x148>
  c = (unsigned char) c;
   511e8:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
   511ec:	8080030b 	ldhu	r2,12(r16)
   511f0:	10bfffcc 	andi	r2,r2,65535
   511f4:	1088000c 	andi	r2,r2,8192
   511f8:	1000071e 	bne	r2,zero,51218 <__swbuf_r+0xb4>
   511fc:	8080030b 	ldhu	r2,12(r16)
   51200:	10880014 	ori	r2,r2,8192
   51204:	8080030d 	sth	r2,12(r16)
   51208:	80c01917 	ldw	r3,100(r16)
   5120c:	00b7ffc4 	movi	r2,-8193
   51210:	1884703a 	and	r2,r3,r2
   51214:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
   51218:	80800017 	ldw	r2,0(r16)
   5121c:	1007883a 	mov	r3,r2
   51220:	80800417 	ldw	r2,16(r16)
   51224:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
   51228:	80800517 	ldw	r2,20(r16)
   5122c:	88800716 	blt	r17,r2,5124c <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
   51230:	800b883a 	mov	r5,r16
   51234:	e13ffc17 	ldw	r4,-16(fp)
   51238:	004989c0 	call	4989c <_fflush_r>
   5123c:	10000226 	beq	r2,zero,51248 <__swbuf_r+0xe4>
	return EOF;
   51240:	00bfffc4 	movi	r2,-1
   51244:	00001906 	br	512ac <__swbuf_r+0x148>
      n = 0;
   51248:	0023883a 	mov	r17,zero
    }
  fp->_w--;
   5124c:	80800217 	ldw	r2,8(r16)
   51250:	10bfffc4 	addi	r2,r2,-1
   51254:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
   51258:	80800017 	ldw	r2,0(r16)
   5125c:	10c00044 	addi	r3,r2,1
   51260:	80c00015 	stw	r3,0(r16)
   51264:	9007883a 	mov	r3,r18
   51268:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
   5126c:	8c400044 	addi	r17,r17,1
   51270:	80800517 	ldw	r2,20(r16)
   51274:	88800626 	beq	r17,r2,51290 <__swbuf_r+0x12c>
   51278:	8080030b 	ldhu	r2,12(r16)
   5127c:	10bfffcc 	andi	r2,r2,65535
   51280:	1080004c 	andi	r2,r2,1
   51284:	10000826 	beq	r2,zero,512a8 <__swbuf_r+0x144>
   51288:	90800298 	cmpnei	r2,r18,10
   5128c:	1000061e 	bne	r2,zero,512a8 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
   51290:	800b883a 	mov	r5,r16
   51294:	e13ffc17 	ldw	r4,-16(fp)
   51298:	004989c0 	call	4989c <_fflush_r>
   5129c:	10000226 	beq	r2,zero,512a8 <__swbuf_r+0x144>
      return EOF;
   512a0:	00bfffc4 	movi	r2,-1
   512a4:	00000106 	br	512ac <__swbuf_r+0x148>
  return c;
   512a8:	9005883a 	mov	r2,r18
}
   512ac:	e6fffd04 	addi	sp,fp,-12
   512b0:	dfc00417 	ldw	ra,16(sp)
   512b4:	df000317 	ldw	fp,12(sp)
   512b8:	dc800217 	ldw	r18,8(sp)
   512bc:	dc400117 	ldw	r17,4(sp)
   512c0:	dc000017 	ldw	r16,0(sp)
   512c4:	dec00504 	addi	sp,sp,20
   512c8:	f800283a 	ret

000512cc <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
   512cc:	defffe04 	addi	sp,sp,-8
   512d0:	dfc00115 	stw	ra,4(sp)
   512d4:	df000015 	stw	fp,0(sp)
   512d8:	d839883a 	mov	fp,sp
   512dc:	2007883a 	mov	r3,r4
   512e0:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
   512e4:	d0a00517 	ldw	r2,-32748(gp)
   512e8:	200d883a 	mov	r6,r4
   512ec:	180b883a 	mov	r5,r3
   512f0:	1009883a 	mov	r4,r2
   512f4:	00511640 	call	51164 <__swbuf_r>
}
   512f8:	e037883a 	mov	sp,fp
   512fc:	dfc00117 	ldw	ra,4(sp)
   51300:	df000017 	ldw	fp,0(sp)
   51304:	dec00204 	addi	sp,sp,8
   51308:	f800283a 	ret

0005130c <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
   5130c:	defff404 	addi	sp,sp,-48
   51310:	dfc00b15 	stw	ra,44(sp)
   51314:	df000a15 	stw	fp,40(sp)
   51318:	dc000915 	stw	r16,36(sp)
   5131c:	df000a04 	addi	fp,sp,40
   51320:	e13ffb15 	stw	r4,-20(fp)
   51324:	e17ffc15 	stw	r5,-16(fp)
   51328:	e1bffd15 	stw	r6,-12(fp)
   5132c:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
   51330:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
   51334:	e0bffc17 	ldw	r2,-16(fp)
   51338:	10000d1e 	bne	r2,zero,51370 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
   5133c:	d4200a17 	ldw	r16,-32728(gp)
   51340:	004aea40 	call	4aea4 <__locale_charset>
   51344:	1009883a 	mov	r4,r2
   51348:	e0fff804 	addi	r3,fp,-32
   5134c:	e0bffe17 	ldw	r2,-8(fp)
   51350:	d8800015 	stw	r2,0(sp)
   51354:	200f883a 	mov	r7,r4
   51358:	000d883a 	mov	r6,zero
   5135c:	180b883a 	mov	r5,r3
   51360:	e13ffb17 	ldw	r4,-20(fp)
   51364:	803ee83a 	callr	r16
   51368:	e0bff715 	stw	r2,-36(fp)
   5136c:	00000b06 	br	5139c <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
   51370:	d4200a17 	ldw	r16,-32728(gp)
   51374:	004aea40 	call	4aea4 <__locale_charset>
   51378:	1007883a 	mov	r3,r2
   5137c:	e0bffe17 	ldw	r2,-8(fp)
   51380:	d8800015 	stw	r2,0(sp)
   51384:	180f883a 	mov	r7,r3
   51388:	e1bffd17 	ldw	r6,-12(fp)
   5138c:	e17ffc17 	ldw	r5,-16(fp)
   51390:	e13ffb17 	ldw	r4,-20(fp)
   51394:	803ee83a 	callr	r16
   51398:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   5139c:	e0bff717 	ldw	r2,-36(fp)
   513a0:	10bfffd8 	cmpnei	r2,r2,-1
   513a4:	1000071e 	bne	r2,zero,513c4 <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
   513a8:	e0bffe17 	ldw	r2,-8(fp)
   513ac:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
   513b0:	e0bffb17 	ldw	r2,-20(fp)
   513b4:	00c02284 	movi	r3,138
   513b8:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   513bc:	00bfffc4 	movi	r2,-1
   513c0:	00000106 	br	513c8 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
   513c4:	e0bff717 	ldw	r2,-36(fp)
}
   513c8:	e6ffff04 	addi	sp,fp,-4
   513cc:	dfc00217 	ldw	ra,8(sp)
   513d0:	df000117 	ldw	fp,4(sp)
   513d4:	dc000017 	ldw	r16,0(sp)
   513d8:	dec00304 	addi	sp,sp,12
   513dc:	f800283a 	ret

000513e0 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
   513e0:	defff404 	addi	sp,sp,-48
   513e4:	dfc00b15 	stw	ra,44(sp)
   513e8:	df000a15 	stw	fp,40(sp)
   513ec:	dc000915 	stw	r16,36(sp)
   513f0:	df000a04 	addi	fp,sp,40
   513f4:	e13ffc15 	stw	r4,-16(fp)
   513f8:	e17ffd15 	stw	r5,-12(fp)
   513fc:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
   51400:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
   51404:	d0a00517 	ldw	r2,-32748(gp)
   51408:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
   5140c:	e0bffc17 	ldw	r2,-16(fp)
   51410:	10000d1e 	bne	r2,zero,51448 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
   51414:	d4200a17 	ldw	r16,-32728(gp)
   51418:	004aea40 	call	4aea4 <__locale_charset>
   5141c:	1009883a 	mov	r4,r2
   51420:	e0fff904 	addi	r3,fp,-28
   51424:	e0bffe17 	ldw	r2,-8(fp)
   51428:	d8800015 	stw	r2,0(sp)
   5142c:	200f883a 	mov	r7,r4
   51430:	000d883a 	mov	r6,zero
   51434:	180b883a 	mov	r5,r3
   51438:	e13ff817 	ldw	r4,-32(fp)
   5143c:	803ee83a 	callr	r16
   51440:	e0bff715 	stw	r2,-36(fp)
   51444:	00000b06 	br	51474 <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
   51448:	d4200a17 	ldw	r16,-32728(gp)
   5144c:	004aea40 	call	4aea4 <__locale_charset>
   51450:	1007883a 	mov	r3,r2
   51454:	e0bffe17 	ldw	r2,-8(fp)
   51458:	d8800015 	stw	r2,0(sp)
   5145c:	180f883a 	mov	r7,r3
   51460:	e1bffd17 	ldw	r6,-12(fp)
   51464:	e17ffc17 	ldw	r5,-16(fp)
   51468:	e13ff817 	ldw	r4,-32(fp)
   5146c:	803ee83a 	callr	r16
   51470:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   51474:	e0bff717 	ldw	r2,-36(fp)
   51478:	10bfffd8 	cmpnei	r2,r2,-1
   5147c:	1000071e 	bne	r2,zero,5149c <wcrtomb+0xbc>
    {
      ps->__count = 0;
   51480:	e0bffe17 	ldw	r2,-8(fp)
   51484:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
   51488:	e0bff817 	ldw	r2,-32(fp)
   5148c:	00c02284 	movi	r3,138
   51490:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   51494:	00bfffc4 	movi	r2,-1
   51498:	00000106 	br	514a0 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
   5149c:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   514a0:	e6ffff04 	addi	sp,fp,-4
   514a4:	dfc00217 	ldw	ra,8(sp)
   514a8:	df000117 	ldw	fp,4(sp)
   514ac:	dc000017 	ldw	r16,0(sp)
   514b0:	dec00304 	addi	sp,sp,12
   514b4:	f800283a 	ret

000514b8 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
   514b8:	defff804 	addi	sp,sp,-32
   514bc:	dfc00715 	stw	ra,28(sp)
   514c0:	df000615 	stw	fp,24(sp)
   514c4:	dc000515 	stw	r16,20(sp)
   514c8:	df000604 	addi	fp,sp,24
   514cc:	e13ffb15 	stw	r4,-20(fp)
   514d0:	e17ffc15 	stw	r5,-16(fp)
   514d4:	e1bffd15 	stw	r6,-12(fp)
   514d8:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
   514dc:	d4200a17 	ldw	r16,-32728(gp)
   514e0:	004aea40 	call	4aea4 <__locale_charset>
   514e4:	1007883a 	mov	r3,r2
   514e8:	e0bffe17 	ldw	r2,-8(fp)
   514ec:	d8800015 	stw	r2,0(sp)
   514f0:	180f883a 	mov	r7,r3
   514f4:	e1bffd17 	ldw	r6,-12(fp)
   514f8:	e17ffc17 	ldw	r5,-16(fp)
   514fc:	e13ffb17 	ldw	r4,-20(fp)
   51500:	803ee83a 	callr	r16
}
   51504:	e6ffff04 	addi	sp,fp,-4
   51508:	dfc00217 	ldw	ra,8(sp)
   5150c:	df000117 	ldw	fp,4(sp)
   51510:	dc000017 	ldw	r16,0(sp)
   51514:	dec00304 	addi	sp,sp,12
   51518:	f800283a 	ret

0005151c <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
   5151c:	defffa04 	addi	sp,sp,-24
   51520:	df000515 	stw	fp,20(sp)
   51524:	df000504 	addi	fp,sp,20
   51528:	e13ffc15 	stw	r4,-16(fp)
   5152c:	e17ffd15 	stw	r5,-12(fp)
   51530:	e1bffe15 	stw	r6,-8(fp)
   51534:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
   51538:	e0bffe17 	ldw	r2,-8(fp)
   5153c:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
   51540:	e0bffd17 	ldw	r2,-12(fp)
   51544:	1000021e 	bne	r2,zero,51550 <__ascii_wctomb+0x34>
    return 0;
   51548:	0005883a 	mov	r2,zero
   5154c:	00000d06 	br	51584 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
   51550:	e0bffb17 	ldw	r2,-20(fp)
   51554:	10804030 	cmpltui	r2,r2,256
   51558:	1000051e 	bne	r2,zero,51570 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
   5155c:	e0bffc17 	ldw	r2,-16(fp)
   51560:	00c02284 	movi	r3,138
   51564:	10c00015 	stw	r3,0(r2)
      return -1;
   51568:	00bfffc4 	movi	r2,-1
   5156c:	00000506 	br	51584 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
   51570:	e0bffb17 	ldw	r2,-20(fp)
   51574:	1007883a 	mov	r3,r2
   51578:	e0bffd17 	ldw	r2,-12(fp)
   5157c:	10c00005 	stb	r3,0(r2)
  return 1;
   51580:	00800044 	movi	r2,1
}
   51584:	e037883a 	mov	sp,fp
   51588:	df000017 	ldw	fp,0(sp)
   5158c:	dec00104 	addi	sp,sp,4
   51590:	f800283a 	ret

00051594 <__muldi3>:
   51594:	defff604 	addi	sp,sp,-40
   51598:	dd800615 	stw	r22,24(sp)
   5159c:	dd400515 	stw	r21,20(sp)
   515a0:	dc400115 	stw	r17,4(sp)
   515a4:	357fffcc 	andi	r21,r6,65535
   515a8:	2022d43a 	srli	r17,r4,16
   515ac:	25bfffcc 	andi	r22,r4,65535
   515b0:	dcc00315 	stw	r19,12(sp)
   515b4:	dc800215 	stw	r18,8(sp)
   515b8:	2027883a 	mov	r19,r4
   515bc:	2825883a 	mov	r18,r5
   515c0:	b009883a 	mov	r4,r22
   515c4:	a80b883a 	mov	r5,r21
   515c8:	dfc00915 	stw	ra,36(sp)
   515cc:	df000815 	stw	fp,32(sp)
   515d0:	ddc00715 	stw	r23,28(sp)
   515d4:	3839883a 	mov	fp,r7
   515d8:	302ed43a 	srli	r23,r6,16
   515dc:	dd000415 	stw	r20,16(sp)
   515e0:	dc000015 	stw	r16,0(sp)
   515e4:	3029883a 	mov	r20,r6
   515e8:	00421cc0 	call	421cc <__mulsi3>
   515ec:	a80b883a 	mov	r5,r21
   515f0:	8809883a 	mov	r4,r17
   515f4:	1021883a 	mov	r16,r2
   515f8:	00421cc0 	call	421cc <__mulsi3>
   515fc:	8809883a 	mov	r4,r17
   51600:	b80b883a 	mov	r5,r23
   51604:	102b883a 	mov	r21,r2
   51608:	00421cc0 	call	421cc <__mulsi3>
   5160c:	b80b883a 	mov	r5,r23
   51610:	b009883a 	mov	r4,r22
   51614:	1023883a 	mov	r17,r2
   51618:	00421cc0 	call	421cc <__mulsi3>
   5161c:	8006d43a 	srli	r3,r16,16
   51620:	1545883a 	add	r2,r2,r21
   51624:	1885883a 	add	r2,r3,r2
   51628:	1540022e 	bgeu	r2,r21,51634 <__muldi3+0xa0>
   5162c:	00c00074 	movhi	r3,1
   51630:	88e3883a 	add	r17,r17,r3
   51634:	1006d43a 	srli	r3,r2,16
   51638:	1004943a 	slli	r2,r2,16
   5163c:	e00b883a 	mov	r5,fp
   51640:	9809883a 	mov	r4,r19
   51644:	843fffcc 	andi	r16,r16,65535
   51648:	1c63883a 	add	r17,r3,r17
   5164c:	1421883a 	add	r16,r2,r16
   51650:	00421cc0 	call	421cc <__mulsi3>
   51654:	900b883a 	mov	r5,r18
   51658:	a009883a 	mov	r4,r20
   5165c:	1027883a 	mov	r19,r2
   51660:	00421cc0 	call	421cc <__mulsi3>
   51664:	9885883a 	add	r2,r19,r2
   51668:	1447883a 	add	r3,r2,r17
   5166c:	8005883a 	mov	r2,r16
   51670:	dfc00917 	ldw	ra,36(sp)
   51674:	df000817 	ldw	fp,32(sp)
   51678:	ddc00717 	ldw	r23,28(sp)
   5167c:	dd800617 	ldw	r22,24(sp)
   51680:	dd400517 	ldw	r21,20(sp)
   51684:	dd000417 	ldw	r20,16(sp)
   51688:	dcc00317 	ldw	r19,12(sp)
   5168c:	dc800217 	ldw	r18,8(sp)
   51690:	dc400117 	ldw	r17,4(sp)
   51694:	dc000017 	ldw	r16,0(sp)
   51698:	dec00a04 	addi	sp,sp,40
   5169c:	f800283a 	ret

000516a0 <__udivdi3>:
   516a0:	defff404 	addi	sp,sp,-48
   516a4:	dcc00515 	stw	r19,20(sp)
   516a8:	dc000215 	stw	r16,8(sp)
   516ac:	dfc00b15 	stw	ra,44(sp)
   516b0:	df000a15 	stw	fp,40(sp)
   516b4:	ddc00915 	stw	r23,36(sp)
   516b8:	dd800815 	stw	r22,32(sp)
   516bc:	dd400715 	stw	r21,28(sp)
   516c0:	dd000615 	stw	r20,24(sp)
   516c4:	dc800415 	stw	r18,16(sp)
   516c8:	dc400315 	stw	r17,12(sp)
   516cc:	2027883a 	mov	r19,r4
   516d0:	2821883a 	mov	r16,r5
   516d4:	3800461e 	bne	r7,zero,517f0 <__udivdi3+0x150>
   516d8:	3023883a 	mov	r17,r6
   516dc:	2025883a 	mov	r18,r4
   516e0:	2980572e 	bgeu	r5,r6,51840 <__udivdi3+0x1a0>
   516e4:	00bfffd4 	movui	r2,65535
   516e8:	282d883a 	mov	r22,r5
   516ec:	1180b236 	bltu	r2,r6,519b8 <__udivdi3+0x318>
   516f0:	00803fc4 	movi	r2,255
   516f4:	1185803a 	cmpltu	r2,r2,r6
   516f8:	100490fa 	slli	r2,r2,3
   516fc:	3086d83a 	srl	r3,r6,r2
   51700:	01000174 	movhi	r4,5
   51704:	21137904 	addi	r4,r4,19940
   51708:	20c7883a 	add	r3,r4,r3
   5170c:	18c00003 	ldbu	r3,0(r3)
   51710:	1885883a 	add	r2,r3,r2
   51714:	00c00804 	movi	r3,32
   51718:	1887c83a 	sub	r3,r3,r2
   5171c:	18000526 	beq	r3,zero,51734 <__udivdi3+0x94>
   51720:	80e0983a 	sll	r16,r16,r3
   51724:	9884d83a 	srl	r2,r19,r2
   51728:	30e2983a 	sll	r17,r6,r3
   5172c:	98e4983a 	sll	r18,r19,r3
   51730:	142cb03a 	or	r22,r2,r16
   51734:	882ad43a 	srli	r21,r17,16
   51738:	b009883a 	mov	r4,r22
   5173c:	8d3fffcc 	andi	r20,r17,65535
   51740:	a80b883a 	mov	r5,r21
   51744:	00421740 	call	42174 <__umodsi3>
   51748:	b009883a 	mov	r4,r22
   5174c:	a80b883a 	mov	r5,r21
   51750:	1027883a 	mov	r19,r2
   51754:	00421100 	call	42110 <__udivsi3>
   51758:	100b883a 	mov	r5,r2
   5175c:	a009883a 	mov	r4,r20
   51760:	102d883a 	mov	r22,r2
   51764:	00421cc0 	call	421cc <__mulsi3>
   51768:	9826943a 	slli	r19,r19,16
   5176c:	9006d43a 	srli	r3,r18,16
   51770:	1cc6b03a 	or	r3,r3,r19
   51774:	1880052e 	bgeu	r3,r2,5178c <__udivdi3+0xec>
   51778:	1c47883a 	add	r3,r3,r17
   5177c:	b13fffc4 	addi	r4,r22,-1
   51780:	1c400136 	bltu	r3,r17,51788 <__udivdi3+0xe8>
   51784:	18814236 	bltu	r3,r2,51c90 <__udivdi3+0x5f0>
   51788:	202d883a 	mov	r22,r4
   5178c:	18a1c83a 	sub	r16,r3,r2
   51790:	8009883a 	mov	r4,r16
   51794:	a80b883a 	mov	r5,r21
   51798:	00421740 	call	42174 <__umodsi3>
   5179c:	1027883a 	mov	r19,r2
   517a0:	8009883a 	mov	r4,r16
   517a4:	a80b883a 	mov	r5,r21
   517a8:	9826943a 	slli	r19,r19,16
   517ac:	00421100 	call	42110 <__udivsi3>
   517b0:	100b883a 	mov	r5,r2
   517b4:	a009883a 	mov	r4,r20
   517b8:	94bfffcc 	andi	r18,r18,65535
   517bc:	1021883a 	mov	r16,r2
   517c0:	94e4b03a 	or	r18,r18,r19
   517c4:	00421cc0 	call	421cc <__mulsi3>
   517c8:	9080052e 	bgeu	r18,r2,517e0 <__udivdi3+0x140>
   517cc:	8ca5883a 	add	r18,r17,r18
   517d0:	80ffffc4 	addi	r3,r16,-1
   517d4:	94410c36 	bltu	r18,r17,51c08 <__udivdi3+0x568>
   517d8:	90810b2e 	bgeu	r18,r2,51c08 <__udivdi3+0x568>
   517dc:	843fff84 	addi	r16,r16,-2
   517e0:	b004943a 	slli	r2,r22,16
   517e4:	0007883a 	mov	r3,zero
   517e8:	1404b03a 	or	r2,r2,r16
   517ec:	00005e06 	br	51968 <__udivdi3+0x2c8>
   517f0:	29c05b36 	bltu	r5,r7,51960 <__udivdi3+0x2c0>
   517f4:	00bfffd4 	movui	r2,65535
   517f8:	11c0672e 	bgeu	r2,r7,51998 <__udivdi3+0x2f8>
   517fc:	00804034 	movhi	r2,256
   51800:	10bfffc4 	addi	r2,r2,-1
   51804:	11c10a36 	bltu	r2,r7,51c30 <__udivdi3+0x590>
   51808:	00800404 	movi	r2,16
   5180c:	3886d83a 	srl	r3,r7,r2
   51810:	01000174 	movhi	r4,5
   51814:	21137904 	addi	r4,r4,19940
   51818:	20c7883a 	add	r3,r4,r3
   5181c:	18c00003 	ldbu	r3,0(r3)
   51820:	05c00804 	movi	r23,32
   51824:	1885883a 	add	r2,r3,r2
   51828:	b8afc83a 	sub	r23,r23,r2
   5182c:	b800671e 	bne	r23,zero,519cc <__udivdi3+0x32c>
   51830:	3c010536 	bltu	r7,r16,51c48 <__udivdi3+0x5a8>
   51834:	9985403a 	cmpgeu	r2,r19,r6
   51838:	0007883a 	mov	r3,zero
   5183c:	00004a06 	br	51968 <__udivdi3+0x2c8>
   51840:	3000041e 	bne	r6,zero,51854 <__udivdi3+0x1b4>
   51844:	000b883a 	mov	r5,zero
   51848:	01000044 	movi	r4,1
   5184c:	00421100 	call	42110 <__udivsi3>
   51850:	1023883a 	mov	r17,r2
   51854:	00bfffd4 	movui	r2,65535
   51858:	1440532e 	bgeu	r2,r17,519a8 <__udivdi3+0x308>
   5185c:	00804034 	movhi	r2,256
   51860:	10bfffc4 	addi	r2,r2,-1
   51864:	1440f436 	bltu	r2,r17,51c38 <__udivdi3+0x598>
   51868:	00800404 	movi	r2,16
   5186c:	8886d83a 	srl	r3,r17,r2
   51870:	01000174 	movhi	r4,5
   51874:	21137904 	addi	r4,r4,19940
   51878:	20c7883a 	add	r3,r4,r3
   5187c:	18c00003 	ldbu	r3,0(r3)
   51880:	1885883a 	add	r2,r3,r2
   51884:	00c00804 	movi	r3,32
   51888:	1887c83a 	sub	r3,r3,r2
   5188c:	1800a51e 	bne	r3,zero,51b24 <__udivdi3+0x484>
   51890:	882ad43a 	srli	r21,r17,16
   51894:	8461c83a 	sub	r16,r16,r17
   51898:	8d3fffcc 	andi	r20,r17,65535
   5189c:	00c00044 	movi	r3,1
   518a0:	a80b883a 	mov	r5,r21
   518a4:	8009883a 	mov	r4,r16
   518a8:	d8c00115 	stw	r3,4(sp)
   518ac:	00421740 	call	42174 <__umodsi3>
   518b0:	a80b883a 	mov	r5,r21
   518b4:	8009883a 	mov	r4,r16
   518b8:	1027883a 	mov	r19,r2
   518bc:	00421100 	call	42110 <__udivsi3>
   518c0:	a00b883a 	mov	r5,r20
   518c4:	1009883a 	mov	r4,r2
   518c8:	102d883a 	mov	r22,r2
   518cc:	00421cc0 	call	421cc <__mulsi3>
   518d0:	9826943a 	slli	r19,r19,16
   518d4:	900ed43a 	srli	r7,r18,16
   518d8:	d8c00117 	ldw	r3,4(sp)
   518dc:	3cceb03a 	or	r7,r7,r19
   518e0:	3880052e 	bgeu	r7,r2,518f8 <__udivdi3+0x258>
   518e4:	3c4f883a 	add	r7,r7,r17
   518e8:	b13fffc4 	addi	r4,r22,-1
   518ec:	3c400136 	bltu	r7,r17,518f4 <__udivdi3+0x254>
   518f0:	3880e436 	bltu	r7,r2,51c84 <__udivdi3+0x5e4>
   518f4:	202d883a 	mov	r22,r4
   518f8:	38a1c83a 	sub	r16,r7,r2
   518fc:	8009883a 	mov	r4,r16
   51900:	a80b883a 	mov	r5,r21
   51904:	d8c00115 	stw	r3,4(sp)
   51908:	00421740 	call	42174 <__umodsi3>
   5190c:	1027883a 	mov	r19,r2
   51910:	8009883a 	mov	r4,r16
   51914:	a80b883a 	mov	r5,r21
   51918:	9826943a 	slli	r19,r19,16
   5191c:	00421100 	call	42110 <__udivsi3>
   51920:	a00b883a 	mov	r5,r20
   51924:	1009883a 	mov	r4,r2
   51928:	94bfffcc 	andi	r18,r18,65535
   5192c:	1021883a 	mov	r16,r2
   51930:	94e4b03a 	or	r18,r18,r19
   51934:	00421cc0 	call	421cc <__mulsi3>
   51938:	d8c00117 	ldw	r3,4(sp)
   5193c:	9080052e 	bgeu	r18,r2,51954 <__udivdi3+0x2b4>
   51940:	8ca5883a 	add	r18,r17,r18
   51944:	813fffc4 	addi	r4,r16,-1
   51948:	9440ad36 	bltu	r18,r17,51c00 <__udivdi3+0x560>
   5194c:	9080ac2e 	bgeu	r18,r2,51c00 <__udivdi3+0x560>
   51950:	843fff84 	addi	r16,r16,-2
   51954:	b004943a 	slli	r2,r22,16
   51958:	1404b03a 	or	r2,r2,r16
   5195c:	00000206 	br	51968 <__udivdi3+0x2c8>
   51960:	0007883a 	mov	r3,zero
   51964:	0005883a 	mov	r2,zero
   51968:	dfc00b17 	ldw	ra,44(sp)
   5196c:	df000a17 	ldw	fp,40(sp)
   51970:	ddc00917 	ldw	r23,36(sp)
   51974:	dd800817 	ldw	r22,32(sp)
   51978:	dd400717 	ldw	r21,28(sp)
   5197c:	dd000617 	ldw	r20,24(sp)
   51980:	dcc00517 	ldw	r19,20(sp)
   51984:	dc800417 	ldw	r18,16(sp)
   51988:	dc400317 	ldw	r17,12(sp)
   5198c:	dc000217 	ldw	r16,8(sp)
   51990:	dec00c04 	addi	sp,sp,48
   51994:	f800283a 	ret
   51998:	00803fc4 	movi	r2,255
   5199c:	11c5803a 	cmpltu	r2,r2,r7
   519a0:	100490fa 	slli	r2,r2,3
   519a4:	003f9906 	br	5180c <_gp+0xffff2634>
   519a8:	00803fc4 	movi	r2,255
   519ac:	1445803a 	cmpltu	r2,r2,r17
   519b0:	100490fa 	slli	r2,r2,3
   519b4:	003fad06 	br	5186c <_gp+0xffff2694>
   519b8:	00804034 	movhi	r2,256
   519bc:	10bfffc4 	addi	r2,r2,-1
   519c0:	11809f36 	bltu	r2,r6,51c40 <__udivdi3+0x5a0>
   519c4:	00800404 	movi	r2,16
   519c8:	003f4c06 	br	516fc <_gp+0xffff2524>
   519cc:	3dce983a 	sll	r7,r7,r23
   519d0:	30b8d83a 	srl	fp,r6,r2
   519d4:	80a2d83a 	srl	r17,r16,r2
   519d8:	35cc983a 	sll	r6,r6,r23
   519dc:	3f38b03a 	or	fp,r7,fp
   519e0:	e024d43a 	srli	r18,fp,16
   519e4:	9884d83a 	srl	r2,r19,r2
   519e8:	85e0983a 	sll	r16,r16,r23
   519ec:	8809883a 	mov	r4,r17
   519f0:	900b883a 	mov	r5,r18
   519f4:	d9800015 	stw	r6,0(sp)
   519f8:	1420b03a 	or	r16,r2,r16
   519fc:	00421740 	call	42174 <__umodsi3>
   51a00:	900b883a 	mov	r5,r18
   51a04:	8809883a 	mov	r4,r17
   51a08:	1029883a 	mov	r20,r2
   51a0c:	e5bfffcc 	andi	r22,fp,65535
   51a10:	00421100 	call	42110 <__udivsi3>
   51a14:	100b883a 	mov	r5,r2
   51a18:	b009883a 	mov	r4,r22
   51a1c:	102b883a 	mov	r21,r2
   51a20:	00421cc0 	call	421cc <__mulsi3>
   51a24:	a028943a 	slli	r20,r20,16
   51a28:	8006d43a 	srli	r3,r16,16
   51a2c:	1d06b03a 	or	r3,r3,r20
   51a30:	1880042e 	bgeu	r3,r2,51a44 <__udivdi3+0x3a4>
   51a34:	1f07883a 	add	r3,r3,fp
   51a38:	a93fffc4 	addi	r4,r21,-1
   51a3c:	1f00892e 	bgeu	r3,fp,51c64 <__udivdi3+0x5c4>
   51a40:	202b883a 	mov	r21,r4
   51a44:	18a3c83a 	sub	r17,r3,r2
   51a48:	8809883a 	mov	r4,r17
   51a4c:	900b883a 	mov	r5,r18
   51a50:	00421740 	call	42174 <__umodsi3>
   51a54:	1029883a 	mov	r20,r2
   51a58:	8809883a 	mov	r4,r17
   51a5c:	900b883a 	mov	r5,r18
   51a60:	a028943a 	slli	r20,r20,16
   51a64:	00421100 	call	42110 <__udivsi3>
   51a68:	100b883a 	mov	r5,r2
   51a6c:	b009883a 	mov	r4,r22
   51a70:	843fffcc 	andi	r16,r16,65535
   51a74:	1023883a 	mov	r17,r2
   51a78:	8520b03a 	or	r16,r16,r20
   51a7c:	00421cc0 	call	421cc <__mulsi3>
   51a80:	8080042e 	bgeu	r16,r2,51a94 <__udivdi3+0x3f4>
   51a84:	8721883a 	add	r16,r16,fp
   51a88:	88ffffc4 	addi	r3,r17,-1
   51a8c:	8700712e 	bgeu	r16,fp,51c54 <__udivdi3+0x5b4>
   51a90:	1823883a 	mov	r17,r3
   51a94:	a80e943a 	slli	r7,r21,16
   51a98:	d8c00017 	ldw	r3,0(sp)
   51a9c:	80a1c83a 	sub	r16,r16,r2
   51aa0:	3c64b03a 	or	r18,r7,r17
   51aa4:	1d3fffcc 	andi	r20,r3,65535
   51aa8:	9022d43a 	srli	r17,r18,16
   51aac:	95bfffcc 	andi	r22,r18,65535
   51ab0:	a00b883a 	mov	r5,r20
   51ab4:	b009883a 	mov	r4,r22
   51ab8:	182ad43a 	srli	r21,r3,16
   51abc:	00421cc0 	call	421cc <__mulsi3>
   51ac0:	a00b883a 	mov	r5,r20
   51ac4:	8809883a 	mov	r4,r17
   51ac8:	1039883a 	mov	fp,r2
   51acc:	00421cc0 	call	421cc <__mulsi3>
   51ad0:	8809883a 	mov	r4,r17
   51ad4:	a80b883a 	mov	r5,r21
   51ad8:	1029883a 	mov	r20,r2
   51adc:	00421cc0 	call	421cc <__mulsi3>
   51ae0:	a80b883a 	mov	r5,r21
   51ae4:	b009883a 	mov	r4,r22
   51ae8:	1023883a 	mov	r17,r2
   51aec:	00421cc0 	call	421cc <__mulsi3>
   51af0:	e006d43a 	srli	r3,fp,16
   51af4:	1505883a 	add	r2,r2,r20
   51af8:	1887883a 	add	r3,r3,r2
   51afc:	1d00022e 	bgeu	r3,r20,51b08 <__udivdi3+0x468>
   51b00:	00800074 	movhi	r2,1
   51b04:	88a3883a 	add	r17,r17,r2
   51b08:	1804d43a 	srli	r2,r3,16
   51b0c:	1463883a 	add	r17,r2,r17
   51b10:	84404436 	bltu	r16,r17,51c24 <__udivdi3+0x584>
   51b14:	84403e26 	beq	r16,r17,51c10 <__udivdi3+0x570>
   51b18:	9005883a 	mov	r2,r18
   51b1c:	0007883a 	mov	r3,zero
   51b20:	003f9106 	br	51968 <_gp+0xffff2790>
   51b24:	88e2983a 	sll	r17,r17,r3
   51b28:	80aed83a 	srl	r23,r16,r2
   51b2c:	80e0983a 	sll	r16,r16,r3
   51b30:	882ad43a 	srli	r21,r17,16
   51b34:	9884d83a 	srl	r2,r19,r2
   51b38:	b809883a 	mov	r4,r23
   51b3c:	a80b883a 	mov	r5,r21
   51b40:	98e4983a 	sll	r18,r19,r3
   51b44:	142cb03a 	or	r22,r2,r16
   51b48:	00421740 	call	42174 <__umodsi3>
   51b4c:	b809883a 	mov	r4,r23
   51b50:	a80b883a 	mov	r5,r21
   51b54:	1027883a 	mov	r19,r2
   51b58:	8d3fffcc 	andi	r20,r17,65535
   51b5c:	00421100 	call	42110 <__udivsi3>
   51b60:	a009883a 	mov	r4,r20
   51b64:	100b883a 	mov	r5,r2
   51b68:	102f883a 	mov	r23,r2
   51b6c:	00421cc0 	call	421cc <__mulsi3>
   51b70:	9826943a 	slli	r19,r19,16
   51b74:	b008d43a 	srli	r4,r22,16
   51b78:	24c8b03a 	or	r4,r4,r19
   51b7c:	2080062e 	bgeu	r4,r2,51b98 <__udivdi3+0x4f8>
   51b80:	2449883a 	add	r4,r4,r17
   51b84:	b8ffffc4 	addi	r3,r23,-1
   51b88:	24403c36 	bltu	r4,r17,51c7c <__udivdi3+0x5dc>
   51b8c:	20803b2e 	bgeu	r4,r2,51c7c <__udivdi3+0x5dc>
   51b90:	bdffff84 	addi	r23,r23,-2
   51b94:	2449883a 	add	r4,r4,r17
   51b98:	20a1c83a 	sub	r16,r4,r2
   51b9c:	a80b883a 	mov	r5,r21
   51ba0:	8009883a 	mov	r4,r16
   51ba4:	00421740 	call	42174 <__umodsi3>
   51ba8:	a80b883a 	mov	r5,r21
   51bac:	8009883a 	mov	r4,r16
   51bb0:	1027883a 	mov	r19,r2
   51bb4:	00421100 	call	42110 <__udivsi3>
   51bb8:	a009883a 	mov	r4,r20
   51bbc:	100b883a 	mov	r5,r2
   51bc0:	9826943a 	slli	r19,r19,16
   51bc4:	1039883a 	mov	fp,r2
   51bc8:	00421cc0 	call	421cc <__mulsi3>
   51bcc:	b13fffcc 	andi	r4,r22,65535
   51bd0:	24c8b03a 	or	r4,r4,r19
   51bd4:	2080062e 	bgeu	r4,r2,51bf0 <__udivdi3+0x550>
   51bd8:	2449883a 	add	r4,r4,r17
   51bdc:	e0ffffc4 	addi	r3,fp,-1
   51be0:	24402436 	bltu	r4,r17,51c74 <__udivdi3+0x5d4>
   51be4:	2080232e 	bgeu	r4,r2,51c74 <__udivdi3+0x5d4>
   51be8:	e73fff84 	addi	fp,fp,-2
   51bec:	2449883a 	add	r4,r4,r17
   51bf0:	b82e943a 	slli	r23,r23,16
   51bf4:	20a1c83a 	sub	r16,r4,r2
   51bf8:	bf06b03a 	or	r3,r23,fp
   51bfc:	003f2806 	br	518a0 <_gp+0xffff26c8>
   51c00:	2021883a 	mov	r16,r4
   51c04:	003f5306 	br	51954 <_gp+0xffff277c>
   51c08:	1821883a 	mov	r16,r3
   51c0c:	003ef406 	br	517e0 <_gp+0xffff2608>
   51c10:	1806943a 	slli	r3,r3,16
   51c14:	9de6983a 	sll	r19,r19,r23
   51c18:	e73fffcc 	andi	fp,fp,65535
   51c1c:	1f07883a 	add	r3,r3,fp
   51c20:	98ffbd2e 	bgeu	r19,r3,51b18 <_gp+0xffff2940>
   51c24:	90bfffc4 	addi	r2,r18,-1
   51c28:	0007883a 	mov	r3,zero
   51c2c:	003f4e06 	br	51968 <_gp+0xffff2790>
   51c30:	00800604 	movi	r2,24
   51c34:	003ef506 	br	5180c <_gp+0xffff2634>
   51c38:	00800604 	movi	r2,24
   51c3c:	003f0b06 	br	5186c <_gp+0xffff2694>
   51c40:	00800604 	movi	r2,24
   51c44:	003ead06 	br	516fc <_gp+0xffff2524>
   51c48:	0007883a 	mov	r3,zero
   51c4c:	00800044 	movi	r2,1
   51c50:	003f4506 	br	51968 <_gp+0xffff2790>
   51c54:	80bf8e2e 	bgeu	r16,r2,51a90 <_gp+0xffff28b8>
   51c58:	8c7fff84 	addi	r17,r17,-2
   51c5c:	8721883a 	add	r16,r16,fp
   51c60:	003f8c06 	br	51a94 <_gp+0xffff28bc>
   51c64:	18bf762e 	bgeu	r3,r2,51a40 <_gp+0xffff2868>
   51c68:	ad7fff84 	addi	r21,r21,-2
   51c6c:	1f07883a 	add	r3,r3,fp
   51c70:	003f7406 	br	51a44 <_gp+0xffff286c>
   51c74:	1839883a 	mov	fp,r3
   51c78:	003fdd06 	br	51bf0 <_gp+0xffff2a18>
   51c7c:	182f883a 	mov	r23,r3
   51c80:	003fc506 	br	51b98 <_gp+0xffff29c0>
   51c84:	b5bfff84 	addi	r22,r22,-2
   51c88:	3c4f883a 	add	r7,r7,r17
   51c8c:	003f1a06 	br	518f8 <_gp+0xffff2720>
   51c90:	b5bfff84 	addi	r22,r22,-2
   51c94:	1c47883a 	add	r3,r3,r17
   51c98:	003ebc06 	br	5178c <_gp+0xffff25b4>

00051c9c <__umoddi3>:
   51c9c:	defff304 	addi	sp,sp,-52
   51ca0:	df000b15 	stw	fp,44(sp)
   51ca4:	dc400415 	stw	r17,16(sp)
   51ca8:	dc000315 	stw	r16,12(sp)
   51cac:	dfc00c15 	stw	ra,48(sp)
   51cb0:	ddc00a15 	stw	r23,40(sp)
   51cb4:	dd800915 	stw	r22,36(sp)
   51cb8:	dd400815 	stw	r21,32(sp)
   51cbc:	dd000715 	stw	r20,28(sp)
   51cc0:	dcc00615 	stw	r19,24(sp)
   51cc4:	dc800515 	stw	r18,20(sp)
   51cc8:	2021883a 	mov	r16,r4
   51ccc:	2823883a 	mov	r17,r5
   51cd0:	2839883a 	mov	fp,r5
   51cd4:	3800401e 	bne	r7,zero,51dd8 <__umoddi3+0x13c>
   51cd8:	3027883a 	mov	r19,r6
   51cdc:	2029883a 	mov	r20,r4
   51ce0:	2980552e 	bgeu	r5,r6,51e38 <__umoddi3+0x19c>
   51ce4:	00bfffd4 	movui	r2,65535
   51ce8:	1180a236 	bltu	r2,r6,51f74 <__umoddi3+0x2d8>
   51cec:	01003fc4 	movi	r4,255
   51cf0:	2189803a 	cmpltu	r4,r4,r6
   51cf4:	200890fa 	slli	r4,r4,3
   51cf8:	3104d83a 	srl	r2,r6,r4
   51cfc:	00c00174 	movhi	r3,5
   51d00:	18d37904 	addi	r3,r3,19940
   51d04:	1885883a 	add	r2,r3,r2
   51d08:	10c00003 	ldbu	r3,0(r2)
   51d0c:	00800804 	movi	r2,32
   51d10:	1909883a 	add	r4,r3,r4
   51d14:	1125c83a 	sub	r18,r2,r4
   51d18:	90000526 	beq	r18,zero,51d30 <__umoddi3+0x94>
   51d1c:	8ca2983a 	sll	r17,r17,r18
   51d20:	8108d83a 	srl	r4,r16,r4
   51d24:	34a6983a 	sll	r19,r6,r18
   51d28:	84a8983a 	sll	r20,r16,r18
   51d2c:	2478b03a 	or	fp,r4,r17
   51d30:	982cd43a 	srli	r22,r19,16
   51d34:	e009883a 	mov	r4,fp
   51d38:	9dffffcc 	andi	r23,r19,65535
   51d3c:	b00b883a 	mov	r5,r22
   51d40:	00421740 	call	42174 <__umodsi3>
   51d44:	b00b883a 	mov	r5,r22
   51d48:	e009883a 	mov	r4,fp
   51d4c:	102b883a 	mov	r21,r2
   51d50:	00421100 	call	42110 <__udivsi3>
   51d54:	100b883a 	mov	r5,r2
   51d58:	b809883a 	mov	r4,r23
   51d5c:	00421cc0 	call	421cc <__mulsi3>
   51d60:	a82a943a 	slli	r21,r21,16
   51d64:	a006d43a 	srli	r3,r20,16
   51d68:	1d46b03a 	or	r3,r3,r21
   51d6c:	1880032e 	bgeu	r3,r2,51d7c <__umoddi3+0xe0>
   51d70:	1cc7883a 	add	r3,r3,r19
   51d74:	1cc00136 	bltu	r3,r19,51d7c <__umoddi3+0xe0>
   51d78:	18813136 	bltu	r3,r2,52240 <__umoddi3+0x5a4>
   51d7c:	18a1c83a 	sub	r16,r3,r2
   51d80:	b00b883a 	mov	r5,r22
   51d84:	8009883a 	mov	r4,r16
   51d88:	00421740 	call	42174 <__umodsi3>
   51d8c:	b00b883a 	mov	r5,r22
   51d90:	8009883a 	mov	r4,r16
   51d94:	1023883a 	mov	r17,r2
   51d98:	00421100 	call	42110 <__udivsi3>
   51d9c:	100b883a 	mov	r5,r2
   51da0:	b809883a 	mov	r4,r23
   51da4:	8822943a 	slli	r17,r17,16
   51da8:	00421cc0 	call	421cc <__mulsi3>
   51dac:	a0ffffcc 	andi	r3,r20,65535
   51db0:	1c46b03a 	or	r3,r3,r17
   51db4:	1880042e 	bgeu	r3,r2,51dc8 <__umoddi3+0x12c>
   51db8:	1cc7883a 	add	r3,r3,r19
   51dbc:	1cc00236 	bltu	r3,r19,51dc8 <__umoddi3+0x12c>
   51dc0:	1880012e 	bgeu	r3,r2,51dc8 <__umoddi3+0x12c>
   51dc4:	1cc7883a 	add	r3,r3,r19
   51dc8:	1885c83a 	sub	r2,r3,r2
   51dcc:	1484d83a 	srl	r2,r2,r18
   51dd0:	0007883a 	mov	r3,zero
   51dd4:	00005306 	br	51f24 <__umoddi3+0x288>
   51dd8:	29c05036 	bltu	r5,r7,51f1c <__umoddi3+0x280>
   51ddc:	00bfffd4 	movui	r2,65535
   51de0:	11c05c2e 	bgeu	r2,r7,51f54 <__umoddi3+0x2b8>
   51de4:	00804034 	movhi	r2,256
   51de8:	10bfffc4 	addi	r2,r2,-1
   51dec:	11c10636 	bltu	r2,r7,52208 <__umoddi3+0x56c>
   51df0:	01000404 	movi	r4,16
   51df4:	3904d83a 	srl	r2,r7,r4
   51df8:	00c00174 	movhi	r3,5
   51dfc:	18d37904 	addi	r3,r3,19940
   51e00:	1885883a 	add	r2,r3,r2
   51e04:	14c00003 	ldbu	r19,0(r2)
   51e08:	00c00804 	movi	r3,32
   51e0c:	9927883a 	add	r19,r19,r4
   51e10:	1ce9c83a 	sub	r20,r3,r19
   51e14:	a0005c1e 	bne	r20,zero,51f88 <__umoddi3+0x2ec>
   51e18:	3c400136 	bltu	r7,r17,51e20 <__umoddi3+0x184>
   51e1c:	81810a36 	bltu	r16,r6,52248 <__umoddi3+0x5ac>
   51e20:	8185c83a 	sub	r2,r16,r6
   51e24:	89e3c83a 	sub	r17,r17,r7
   51e28:	8089803a 	cmpltu	r4,r16,r2
   51e2c:	8939c83a 	sub	fp,r17,r4
   51e30:	e007883a 	mov	r3,fp
   51e34:	00003b06 	br	51f24 <__umoddi3+0x288>
   51e38:	3000041e 	bne	r6,zero,51e4c <__umoddi3+0x1b0>
   51e3c:	000b883a 	mov	r5,zero
   51e40:	01000044 	movi	r4,1
   51e44:	00421100 	call	42110 <__udivsi3>
   51e48:	1027883a 	mov	r19,r2
   51e4c:	00bfffd4 	movui	r2,65535
   51e50:	14c0442e 	bgeu	r2,r19,51f64 <__umoddi3+0x2c8>
   51e54:	00804034 	movhi	r2,256
   51e58:	10bfffc4 	addi	r2,r2,-1
   51e5c:	14c0ec36 	bltu	r2,r19,52210 <__umoddi3+0x574>
   51e60:	00800404 	movi	r2,16
   51e64:	9886d83a 	srl	r3,r19,r2
   51e68:	01000174 	movhi	r4,5
   51e6c:	21137904 	addi	r4,r4,19940
   51e70:	20c7883a 	add	r3,r4,r3
   51e74:	18c00003 	ldbu	r3,0(r3)
   51e78:	1887883a 	add	r3,r3,r2
   51e7c:	00800804 	movi	r2,32
   51e80:	10e5c83a 	sub	r18,r2,r3
   51e84:	9000ab1e 	bne	r18,zero,52134 <__umoddi3+0x498>
   51e88:	982cd43a 	srli	r22,r19,16
   51e8c:	8ce3c83a 	sub	r17,r17,r19
   51e90:	9dffffcc 	andi	r23,r19,65535
   51e94:	b00b883a 	mov	r5,r22
   51e98:	8809883a 	mov	r4,r17
   51e9c:	00421740 	call	42174 <__umodsi3>
   51ea0:	b00b883a 	mov	r5,r22
   51ea4:	8809883a 	mov	r4,r17
   51ea8:	102b883a 	mov	r21,r2
   51eac:	00421100 	call	42110 <__udivsi3>
   51eb0:	b80b883a 	mov	r5,r23
   51eb4:	1009883a 	mov	r4,r2
   51eb8:	00421cc0 	call	421cc <__mulsi3>
   51ebc:	a82a943a 	slli	r21,r21,16
   51ec0:	a006d43a 	srli	r3,r20,16
   51ec4:	1d46b03a 	or	r3,r3,r21
   51ec8:	1880042e 	bgeu	r3,r2,51edc <__umoddi3+0x240>
   51ecc:	1cc7883a 	add	r3,r3,r19
   51ed0:	1cc00236 	bltu	r3,r19,51edc <__umoddi3+0x240>
   51ed4:	1880012e 	bgeu	r3,r2,51edc <__umoddi3+0x240>
   51ed8:	1cc7883a 	add	r3,r3,r19
   51edc:	18a1c83a 	sub	r16,r3,r2
   51ee0:	b00b883a 	mov	r5,r22
   51ee4:	8009883a 	mov	r4,r16
   51ee8:	00421740 	call	42174 <__umodsi3>
   51eec:	1023883a 	mov	r17,r2
   51ef0:	b00b883a 	mov	r5,r22
   51ef4:	8009883a 	mov	r4,r16
   51ef8:	00421100 	call	42110 <__udivsi3>
   51efc:	8822943a 	slli	r17,r17,16
   51f00:	b80b883a 	mov	r5,r23
   51f04:	1009883a 	mov	r4,r2
   51f08:	00421cc0 	call	421cc <__mulsi3>
   51f0c:	a53fffcc 	andi	r20,r20,65535
   51f10:	a446b03a 	or	r3,r20,r17
   51f14:	18bfac2e 	bgeu	r3,r2,51dc8 <_gp+0xffff2bf0>
   51f18:	003fa706 	br	51db8 <_gp+0xffff2be0>
   51f1c:	2005883a 	mov	r2,r4
   51f20:	2807883a 	mov	r3,r5
   51f24:	dfc00c17 	ldw	ra,48(sp)
   51f28:	df000b17 	ldw	fp,44(sp)
   51f2c:	ddc00a17 	ldw	r23,40(sp)
   51f30:	dd800917 	ldw	r22,36(sp)
   51f34:	dd400817 	ldw	r21,32(sp)
   51f38:	dd000717 	ldw	r20,28(sp)
   51f3c:	dcc00617 	ldw	r19,24(sp)
   51f40:	dc800517 	ldw	r18,20(sp)
   51f44:	dc400417 	ldw	r17,16(sp)
   51f48:	dc000317 	ldw	r16,12(sp)
   51f4c:	dec00d04 	addi	sp,sp,52
   51f50:	f800283a 	ret
   51f54:	04c03fc4 	movi	r19,255
   51f58:	99c9803a 	cmpltu	r4,r19,r7
   51f5c:	200890fa 	slli	r4,r4,3
   51f60:	003fa406 	br	51df4 <_gp+0xffff2c1c>
   51f64:	00803fc4 	movi	r2,255
   51f68:	14c5803a 	cmpltu	r2,r2,r19
   51f6c:	100490fa 	slli	r2,r2,3
   51f70:	003fbc06 	br	51e64 <_gp+0xffff2c8c>
   51f74:	00804034 	movhi	r2,256
   51f78:	10bfffc4 	addi	r2,r2,-1
   51f7c:	1180a636 	bltu	r2,r6,52218 <__umoddi3+0x57c>
   51f80:	01000404 	movi	r4,16
   51f84:	003f5c06 	br	51cf8 <_gp+0xffff2b20>
   51f88:	3d0e983a 	sll	r7,r7,r20
   51f8c:	34ead83a 	srl	r21,r6,r19
   51f90:	8cc6d83a 	srl	r3,r17,r19
   51f94:	8d10983a 	sll	r8,r17,r20
   51f98:	3d6ab03a 	or	r21,r7,r21
   51f9c:	a82cd43a 	srli	r22,r21,16
   51fa0:	84e2d83a 	srl	r17,r16,r19
   51fa4:	1809883a 	mov	r4,r3
   51fa8:	b00b883a 	mov	r5,r22
   51fac:	8a22b03a 	or	r17,r17,r8
   51fb0:	3524983a 	sll	r18,r6,r20
   51fb4:	dc400015 	stw	r17,0(sp)
   51fb8:	d8c00115 	stw	r3,4(sp)
   51fbc:	00421740 	call	42174 <__umodsi3>
   51fc0:	d8c00117 	ldw	r3,4(sp)
   51fc4:	b00b883a 	mov	r5,r22
   51fc8:	1039883a 	mov	fp,r2
   51fcc:	1809883a 	mov	r4,r3
   51fd0:	00421100 	call	42110 <__udivsi3>
   51fd4:	adffffcc 	andi	r23,r21,65535
   51fd8:	100b883a 	mov	r5,r2
   51fdc:	b809883a 	mov	r4,r23
   51fe0:	1023883a 	mov	r17,r2
   51fe4:	00421cc0 	call	421cc <__mulsi3>
   51fe8:	d9400017 	ldw	r5,0(sp)
   51fec:	e008943a 	slli	r4,fp,16
   51ff0:	8520983a 	sll	r16,r16,r20
   51ff4:	2806d43a 	srli	r3,r5,16
   51ff8:	1906b03a 	or	r3,r3,r4
   51ffc:	1880042e 	bgeu	r3,r2,52010 <__umoddi3+0x374>
   52000:	1d47883a 	add	r3,r3,r21
   52004:	893fffc4 	addi	r4,r17,-1
   52008:	1d40892e 	bgeu	r3,r21,52230 <__umoddi3+0x594>
   5200c:	2023883a 	mov	r17,r4
   52010:	18b9c83a 	sub	fp,r3,r2
   52014:	b00b883a 	mov	r5,r22
   52018:	e009883a 	mov	r4,fp
   5201c:	00421740 	call	42174 <__umodsi3>
   52020:	b00b883a 	mov	r5,r22
   52024:	e009883a 	mov	r4,fp
   52028:	d8800215 	stw	r2,8(sp)
   5202c:	00421100 	call	42110 <__udivsi3>
   52030:	100b883a 	mov	r5,r2
   52034:	b809883a 	mov	r4,r23
   52038:	102d883a 	mov	r22,r2
   5203c:	00421cc0 	call	421cc <__mulsi3>
   52040:	d9800217 	ldw	r6,8(sp)
   52044:	d8c00017 	ldw	r3,0(sp)
   52048:	300c943a 	slli	r6,r6,16
   5204c:	1a3fffcc 	andi	r8,r3,65535
   52050:	4190b03a 	or	r8,r8,r6
   52054:	4080042e 	bgeu	r8,r2,52068 <__umoddi3+0x3cc>
   52058:	4551883a 	add	r8,r8,r21
   5205c:	b0ffffc4 	addi	r3,r22,-1
   52060:	45406f2e 	bgeu	r8,r21,52220 <__umoddi3+0x584>
   52064:	182d883a 	mov	r22,r3
   52068:	880e943a 	slli	r7,r17,16
   5206c:	9006d43a 	srli	r3,r18,16
   52070:	91bfffcc 	andi	r6,r18,65535
   52074:	3dacb03a 	or	r22,r7,r22
   52078:	b02ed43a 	srli	r23,r22,16
   5207c:	b5bfffcc 	andi	r22,r22,65535
   52080:	300b883a 	mov	r5,r6
   52084:	b009883a 	mov	r4,r22
   52088:	40a3c83a 	sub	r17,r8,r2
   5208c:	d8c00115 	stw	r3,4(sp)
   52090:	d9800215 	stw	r6,8(sp)
   52094:	00421cc0 	call	421cc <__mulsi3>
   52098:	d9800217 	ldw	r6,8(sp)
   5209c:	b809883a 	mov	r4,r23
   520a0:	1039883a 	mov	fp,r2
   520a4:	300b883a 	mov	r5,r6
   520a8:	00421cc0 	call	421cc <__mulsi3>
   520ac:	d8c00117 	ldw	r3,4(sp)
   520b0:	b809883a 	mov	r4,r23
   520b4:	d8800215 	stw	r2,8(sp)
   520b8:	180b883a 	mov	r5,r3
   520bc:	00421cc0 	call	421cc <__mulsi3>
   520c0:	d8c00117 	ldw	r3,4(sp)
   520c4:	b009883a 	mov	r4,r22
   520c8:	102f883a 	mov	r23,r2
   520cc:	180b883a 	mov	r5,r3
   520d0:	00421cc0 	call	421cc <__mulsi3>
   520d4:	d9800217 	ldw	r6,8(sp)
   520d8:	e006d43a 	srli	r3,fp,16
   520dc:	1185883a 	add	r2,r2,r6
   520e0:	1885883a 	add	r2,r3,r2
   520e4:	1180022e 	bgeu	r2,r6,520f0 <__umoddi3+0x454>
   520e8:	00c00074 	movhi	r3,1
   520ec:	b8ef883a 	add	r23,r23,r3
   520f0:	1006d43a 	srli	r3,r2,16
   520f4:	1004943a 	slli	r2,r2,16
   520f8:	e73fffcc 	andi	fp,fp,65535
   520fc:	1dc7883a 	add	r3,r3,r23
   52100:	1739883a 	add	fp,r2,fp
   52104:	88c03a36 	bltu	r17,r3,521f0 <__umoddi3+0x554>
   52108:	88c05126 	beq	r17,r3,52250 <__umoddi3+0x5b4>
   5210c:	88c9c83a 	sub	r4,r17,r3
   52110:	e00f883a 	mov	r7,fp
   52114:	81cfc83a 	sub	r7,r16,r7
   52118:	81c7803a 	cmpltu	r3,r16,r7
   5211c:	20c7c83a 	sub	r3,r4,r3
   52120:	1cc4983a 	sll	r2,r3,r19
   52124:	3d0ed83a 	srl	r7,r7,r20
   52128:	1d06d83a 	srl	r3,r3,r20
   5212c:	11c4b03a 	or	r2,r2,r7
   52130:	003f7c06 	br	51f24 <_gp+0xffff2d4c>
   52134:	9ca6983a 	sll	r19,r19,r18
   52138:	88f8d83a 	srl	fp,r17,r3
   5213c:	80c4d83a 	srl	r2,r16,r3
   52140:	982cd43a 	srli	r22,r19,16
   52144:	8ca2983a 	sll	r17,r17,r18
   52148:	e009883a 	mov	r4,fp
   5214c:	b00b883a 	mov	r5,r22
   52150:	146ab03a 	or	r21,r2,r17
   52154:	00421740 	call	42174 <__umodsi3>
   52158:	b00b883a 	mov	r5,r22
   5215c:	e009883a 	mov	r4,fp
   52160:	1029883a 	mov	r20,r2
   52164:	9dffffcc 	andi	r23,r19,65535
   52168:	00421100 	call	42110 <__udivsi3>
   5216c:	b809883a 	mov	r4,r23
   52170:	100b883a 	mov	r5,r2
   52174:	00421cc0 	call	421cc <__mulsi3>
   52178:	a008943a 	slli	r4,r20,16
   5217c:	a806d43a 	srli	r3,r21,16
   52180:	84a8983a 	sll	r20,r16,r18
   52184:	1906b03a 	or	r3,r3,r4
   52188:	1880042e 	bgeu	r3,r2,5219c <__umoddi3+0x500>
   5218c:	1cc7883a 	add	r3,r3,r19
   52190:	1cc00236 	bltu	r3,r19,5219c <__umoddi3+0x500>
   52194:	1880012e 	bgeu	r3,r2,5219c <__umoddi3+0x500>
   52198:	1cc7883a 	add	r3,r3,r19
   5219c:	18a3c83a 	sub	r17,r3,r2
   521a0:	b00b883a 	mov	r5,r22
   521a4:	8809883a 	mov	r4,r17
   521a8:	00421740 	call	42174 <__umodsi3>
   521ac:	b00b883a 	mov	r5,r22
   521b0:	8809883a 	mov	r4,r17
   521b4:	1021883a 	mov	r16,r2
   521b8:	00421100 	call	42110 <__udivsi3>
   521bc:	100b883a 	mov	r5,r2
   521c0:	b809883a 	mov	r4,r23
   521c4:	8020943a 	slli	r16,r16,16
   521c8:	00421cc0 	call	421cc <__mulsi3>
   521cc:	a8ffffcc 	andi	r3,r21,65535
   521d0:	1c06b03a 	or	r3,r3,r16
   521d4:	1880042e 	bgeu	r3,r2,521e8 <__umoddi3+0x54c>
   521d8:	1cc7883a 	add	r3,r3,r19
   521dc:	1cc00236 	bltu	r3,r19,521e8 <__umoddi3+0x54c>
   521e0:	1880012e 	bgeu	r3,r2,521e8 <__umoddi3+0x54c>
   521e4:	1cc7883a 	add	r3,r3,r19
   521e8:	18a3c83a 	sub	r17,r3,r2
   521ec:	003f2906 	br	51e94 <_gp+0xffff2cbc>
   521f0:	e48fc83a 	sub	r7,fp,r18
   521f4:	1d49c83a 	sub	r4,r3,r21
   521f8:	e1f9803a 	cmpltu	fp,fp,r7
   521fc:	2739c83a 	sub	fp,r4,fp
   52200:	8f09c83a 	sub	r4,r17,fp
   52204:	003fc306 	br	52114 <_gp+0xffff2f3c>
   52208:	01000604 	movi	r4,24
   5220c:	003ef906 	br	51df4 <_gp+0xffff2c1c>
   52210:	00800604 	movi	r2,24
   52214:	003f1306 	br	51e64 <_gp+0xffff2c8c>
   52218:	01000604 	movi	r4,24
   5221c:	003eb606 	br	51cf8 <_gp+0xffff2b20>
   52220:	40bf902e 	bgeu	r8,r2,52064 <_gp+0xffff2e8c>
   52224:	b5bfff84 	addi	r22,r22,-2
   52228:	4551883a 	add	r8,r8,r21
   5222c:	003f8e06 	br	52068 <_gp+0xffff2e90>
   52230:	18bf762e 	bgeu	r3,r2,5200c <_gp+0xffff2e34>
   52234:	8c7fff84 	addi	r17,r17,-2
   52238:	1d47883a 	add	r3,r3,r21
   5223c:	003f7406 	br	52010 <_gp+0xffff2e38>
   52240:	1cc7883a 	add	r3,r3,r19
   52244:	003ecd06 	br	51d7c <_gp+0xffff2ba4>
   52248:	8005883a 	mov	r2,r16
   5224c:	003ef806 	br	51e30 <_gp+0xffff2c58>
   52250:	873fe736 	bltu	r16,fp,521f0 <_gp+0xffff3018>
   52254:	e00f883a 	mov	r7,fp
   52258:	0009883a 	mov	r4,zero
   5225c:	003fad06 	br	52114 <_gp+0xffff2f3c>

00052260 <__eqdf2>:
   52260:	2804d53a 	srli	r2,r5,20
   52264:	3806d53a 	srli	r3,r7,20
   52268:	02000434 	movhi	r8,16
   5226c:	423fffc4 	addi	r8,r8,-1
   52270:	1081ffcc 	andi	r2,r2,2047
   52274:	0281ffc4 	movi	r10,2047
   52278:	2a12703a 	and	r9,r5,r8
   5227c:	18c1ffcc 	andi	r3,r3,2047
   52280:	3a10703a 	and	r8,r7,r8
   52284:	280ad7fa 	srli	r5,r5,31
   52288:	380ed7fa 	srli	r7,r7,31
   5228c:	12801026 	beq	r2,r10,522d0 <__eqdf2+0x70>
   52290:	0281ffc4 	movi	r10,2047
   52294:	1a800a26 	beq	r3,r10,522c0 <__eqdf2+0x60>
   52298:	10c00226 	beq	r2,r3,522a4 <__eqdf2+0x44>
   5229c:	00800044 	movi	r2,1
   522a0:	f800283a 	ret
   522a4:	4a3ffd1e 	bne	r9,r8,5229c <_gp+0xffff30c4>
   522a8:	21bffc1e 	bne	r4,r6,5229c <_gp+0xffff30c4>
   522ac:	29c00c26 	beq	r5,r7,522e0 <__eqdf2+0x80>
   522b0:	103ffa1e 	bne	r2,zero,5229c <_gp+0xffff30c4>
   522b4:	2244b03a 	or	r2,r4,r9
   522b8:	1004c03a 	cmpne	r2,r2,zero
   522bc:	f800283a 	ret
   522c0:	3214b03a 	or	r10,r6,r8
   522c4:	503ff426 	beq	r10,zero,52298 <_gp+0xffff30c0>
   522c8:	00800044 	movi	r2,1
   522cc:	f800283a 	ret
   522d0:	2254b03a 	or	r10,r4,r9
   522d4:	503fee26 	beq	r10,zero,52290 <_gp+0xffff30b8>
   522d8:	00800044 	movi	r2,1
   522dc:	f800283a 	ret
   522e0:	0005883a 	mov	r2,zero
   522e4:	f800283a 	ret

000522e8 <__ledf2>:
   522e8:	2804d53a 	srli	r2,r5,20
   522ec:	3810d53a 	srli	r8,r7,20
   522f0:	00c00434 	movhi	r3,16
   522f4:	18ffffc4 	addi	r3,r3,-1
   522f8:	1081ffcc 	andi	r2,r2,2047
   522fc:	0241ffc4 	movi	r9,2047
   52300:	28d4703a 	and	r10,r5,r3
   52304:	4201ffcc 	andi	r8,r8,2047
   52308:	38c6703a 	and	r3,r7,r3
   5230c:	280ad7fa 	srli	r5,r5,31
   52310:	380ed7fa 	srli	r7,r7,31
   52314:	12401f26 	beq	r2,r9,52394 <__ledf2+0xac>
   52318:	0241ffc4 	movi	r9,2047
   5231c:	42401426 	beq	r8,r9,52370 <__ledf2+0x88>
   52320:	1000091e 	bne	r2,zero,52348 <__ledf2+0x60>
   52324:	2296b03a 	or	r11,r4,r10
   52328:	5813003a 	cmpeq	r9,r11,zero
   5232c:	29403fcc 	andi	r5,r5,255
   52330:	40000a1e 	bne	r8,zero,5235c <__ledf2+0x74>
   52334:	30d8b03a 	or	r12,r6,r3
   52338:	6000081e 	bne	r12,zero,5235c <__ledf2+0x74>
   5233c:	0005883a 	mov	r2,zero
   52340:	5800111e 	bne	r11,zero,52388 <__ledf2+0xa0>
   52344:	f800283a 	ret
   52348:	29403fcc 	andi	r5,r5,255
   5234c:	40000c1e 	bne	r8,zero,52380 <__ledf2+0x98>
   52350:	30d2b03a 	or	r9,r6,r3
   52354:	48000c26 	beq	r9,zero,52388 <__ledf2+0xa0>
   52358:	0013883a 	mov	r9,zero
   5235c:	39c03fcc 	andi	r7,r7,255
   52360:	48000826 	beq	r9,zero,52384 <__ledf2+0x9c>
   52364:	38001126 	beq	r7,zero,523ac <__ledf2+0xc4>
   52368:	00800044 	movi	r2,1
   5236c:	f800283a 	ret
   52370:	30d2b03a 	or	r9,r6,r3
   52374:	483fea26 	beq	r9,zero,52320 <_gp+0xffff3148>
   52378:	00800084 	movi	r2,2
   5237c:	f800283a 	ret
   52380:	39c03fcc 	andi	r7,r7,255
   52384:	39400726 	beq	r7,r5,523a4 <__ledf2+0xbc>
   52388:	2800081e 	bne	r5,zero,523ac <__ledf2+0xc4>
   5238c:	00800044 	movi	r2,1
   52390:	f800283a 	ret
   52394:	2292b03a 	or	r9,r4,r10
   52398:	483fdf26 	beq	r9,zero,52318 <_gp+0xffff3140>
   5239c:	00800084 	movi	r2,2
   523a0:	f800283a 	ret
   523a4:	4080030e 	bge	r8,r2,523b4 <__ledf2+0xcc>
   523a8:	383fef26 	beq	r7,zero,52368 <_gp+0xffff3190>
   523ac:	00bfffc4 	movi	r2,-1
   523b0:	f800283a 	ret
   523b4:	123feb16 	blt	r2,r8,52364 <_gp+0xffff318c>
   523b8:	1abff336 	bltu	r3,r10,52388 <_gp+0xffff31b0>
   523bc:	50c00326 	beq	r10,r3,523cc <__ledf2+0xe4>
   523c0:	50c0042e 	bgeu	r10,r3,523d4 <__ledf2+0xec>
   523c4:	283fe81e 	bne	r5,zero,52368 <_gp+0xffff3190>
   523c8:	003ff806 	br	523ac <_gp+0xffff31d4>
   523cc:	313fee36 	bltu	r6,r4,52388 <_gp+0xffff31b0>
   523d0:	21bffc36 	bltu	r4,r6,523c4 <_gp+0xffff31ec>
   523d4:	0005883a 	mov	r2,zero
   523d8:	f800283a 	ret

000523dc <__floatunsidf>:
   523dc:	defffe04 	addi	sp,sp,-8
   523e0:	dc000015 	stw	r16,0(sp)
   523e4:	dfc00115 	stw	ra,4(sp)
   523e8:	2021883a 	mov	r16,r4
   523ec:	20002226 	beq	r4,zero,52478 <__floatunsidf+0x9c>
   523f0:	0044ac80 	call	44ac8 <__clzsi2>
   523f4:	01010784 	movi	r4,1054
   523f8:	2089c83a 	sub	r4,r4,r2
   523fc:	01810cc4 	movi	r6,1075
   52400:	310dc83a 	sub	r6,r6,r4
   52404:	00c007c4 	movi	r3,31
   52408:	1980120e 	bge	r3,r6,52454 <__floatunsidf+0x78>
   5240c:	00c104c4 	movi	r3,1043
   52410:	1907c83a 	sub	r3,r3,r4
   52414:	80ca983a 	sll	r5,r16,r3
   52418:	00800434 	movhi	r2,16
   5241c:	10bfffc4 	addi	r2,r2,-1
   52420:	2101ffcc 	andi	r4,r4,2047
   52424:	0021883a 	mov	r16,zero
   52428:	288a703a 	and	r5,r5,r2
   5242c:	2008953a 	slli	r4,r4,20
   52430:	00c00434 	movhi	r3,16
   52434:	18ffffc4 	addi	r3,r3,-1
   52438:	28c6703a 	and	r3,r5,r3
   5243c:	8005883a 	mov	r2,r16
   52440:	1906b03a 	or	r3,r3,r4
   52444:	dfc00117 	ldw	ra,4(sp)
   52448:	dc000017 	ldw	r16,0(sp)
   5244c:	dec00204 	addi	sp,sp,8
   52450:	f800283a 	ret
   52454:	00c002c4 	movi	r3,11
   52458:	188bc83a 	sub	r5,r3,r2
   5245c:	814ad83a 	srl	r5,r16,r5
   52460:	00c00434 	movhi	r3,16
   52464:	18ffffc4 	addi	r3,r3,-1
   52468:	81a0983a 	sll	r16,r16,r6
   5246c:	2101ffcc 	andi	r4,r4,2047
   52470:	28ca703a 	and	r5,r5,r3
   52474:	003fed06 	br	5242c <_gp+0xffff3254>
   52478:	0009883a 	mov	r4,zero
   5247c:	000b883a 	mov	r5,zero
   52480:	003fea06 	br	5242c <_gp+0xffff3254>

00052484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52484:	defffe04 	addi	sp,sp,-8
   52488:	dfc00115 	stw	ra,4(sp)
   5248c:	df000015 	stw	fp,0(sp)
   52490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52494:	d0a01017 	ldw	r2,-32704(gp)
   52498:	10000326 	beq	r2,zero,524a8 <alt_get_errno+0x24>
   5249c:	d0a01017 	ldw	r2,-32704(gp)
   524a0:	103ee83a 	callr	r2
   524a4:	00000106 	br	524ac <alt_get_errno+0x28>
   524a8:	d0a85504 	addi	r2,gp,-24236
}
   524ac:	e037883a 	mov	sp,fp
   524b0:	dfc00117 	ldw	ra,4(sp)
   524b4:	df000017 	ldw	fp,0(sp)
   524b8:	dec00204 	addi	sp,sp,8
   524bc:	f800283a 	ret

000524c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   524c0:	defffb04 	addi	sp,sp,-20
   524c4:	dfc00415 	stw	ra,16(sp)
   524c8:	df000315 	stw	fp,12(sp)
   524cc:	df000304 	addi	fp,sp,12
   524d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   524d4:	e0bfff17 	ldw	r2,-4(fp)
   524d8:	10000816 	blt	r2,zero,524fc <close+0x3c>
   524dc:	01400304 	movi	r5,12
   524e0:	e13fff17 	ldw	r4,-4(fp)
   524e4:	00421cc0 	call	421cc <__mulsi3>
   524e8:	1007883a 	mov	r3,r2
   524ec:	00800174 	movhi	r2,5
   524f0:	1097fe04 	addi	r2,r2,24568
   524f4:	1885883a 	add	r2,r3,r2
   524f8:	00000106 	br	52500 <close+0x40>
   524fc:	0005883a 	mov	r2,zero
   52500:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   52504:	e0bffd17 	ldw	r2,-12(fp)
   52508:	10001926 	beq	r2,zero,52570 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   5250c:	e0bffd17 	ldw	r2,-12(fp)
   52510:	10800017 	ldw	r2,0(r2)
   52514:	10800417 	ldw	r2,16(r2)
   52518:	10000626 	beq	r2,zero,52534 <close+0x74>
   5251c:	e0bffd17 	ldw	r2,-12(fp)
   52520:	10800017 	ldw	r2,0(r2)
   52524:	10800417 	ldw	r2,16(r2)
   52528:	e13ffd17 	ldw	r4,-12(fp)
   5252c:	103ee83a 	callr	r2
   52530:	00000106 	br	52538 <close+0x78>
   52534:	0005883a 	mov	r2,zero
   52538:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   5253c:	e13fff17 	ldw	r4,-4(fp)
   52540:	0052ba80 	call	52ba8 <alt_release_fd>
    if (rval < 0)
   52544:	e0bffe17 	ldw	r2,-8(fp)
   52548:	1000070e 	bge	r2,zero,52568 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   5254c:	00524840 	call	52484 <alt_get_errno>
   52550:	1007883a 	mov	r3,r2
   52554:	e0bffe17 	ldw	r2,-8(fp)
   52558:	0085c83a 	sub	r2,zero,r2
   5255c:	18800015 	stw	r2,0(r3)
      return -1;
   52560:	00bfffc4 	movi	r2,-1
   52564:	00000706 	br	52584 <close+0xc4>
    }
    return 0;
   52568:	0005883a 	mov	r2,zero
   5256c:	00000506 	br	52584 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52570:	00524840 	call	52484 <alt_get_errno>
   52574:	1007883a 	mov	r3,r2
   52578:	00801444 	movi	r2,81
   5257c:	18800015 	stw	r2,0(r3)
    return -1;
   52580:	00bfffc4 	movi	r2,-1
  }
}
   52584:	e037883a 	mov	sp,fp
   52588:	dfc00117 	ldw	ra,4(sp)
   5258c:	df000017 	ldw	fp,0(sp)
   52590:	dec00204 	addi	sp,sp,8
   52594:	f800283a 	ret

00052598 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   52598:	defffc04 	addi	sp,sp,-16
   5259c:	df000315 	stw	fp,12(sp)
   525a0:	df000304 	addi	fp,sp,12
   525a4:	e13ffd15 	stw	r4,-12(fp)
   525a8:	e17ffe15 	stw	r5,-8(fp)
   525ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   525b0:	e0bfff17 	ldw	r2,-4(fp)
}
   525b4:	e037883a 	mov	sp,fp
   525b8:	df000017 	ldw	fp,0(sp)
   525bc:	dec00104 	addi	sp,sp,4
   525c0:	f800283a 	ret

000525c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   525c4:	defffe04 	addi	sp,sp,-8
   525c8:	dfc00115 	stw	ra,4(sp)
   525cc:	df000015 	stw	fp,0(sp)
   525d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   525d4:	d0a01017 	ldw	r2,-32704(gp)
   525d8:	10000326 	beq	r2,zero,525e8 <alt_get_errno+0x24>
   525dc:	d0a01017 	ldw	r2,-32704(gp)
   525e0:	103ee83a 	callr	r2
   525e4:	00000106 	br	525ec <alt_get_errno+0x28>
   525e8:	d0a85504 	addi	r2,gp,-24236
}
   525ec:	e037883a 	mov	sp,fp
   525f0:	dfc00117 	ldw	ra,4(sp)
   525f4:	df000017 	ldw	fp,0(sp)
   525f8:	dec00204 	addi	sp,sp,8
   525fc:	f800283a 	ret

00052600 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   52600:	defffb04 	addi	sp,sp,-20
   52604:	dfc00415 	stw	ra,16(sp)
   52608:	df000315 	stw	fp,12(sp)
   5260c:	df000304 	addi	fp,sp,12
   52610:	e13ffe15 	stw	r4,-8(fp)
   52614:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52618:	e0bffe17 	ldw	r2,-8(fp)
   5261c:	10000816 	blt	r2,zero,52640 <fstat+0x40>
   52620:	01400304 	movi	r5,12
   52624:	e13ffe17 	ldw	r4,-8(fp)
   52628:	00421cc0 	call	421cc <__mulsi3>
   5262c:	1007883a 	mov	r3,r2
   52630:	00800174 	movhi	r2,5
   52634:	1097fe04 	addi	r2,r2,24568
   52638:	1885883a 	add	r2,r3,r2
   5263c:	00000106 	br	52644 <fstat+0x44>
   52640:	0005883a 	mov	r2,zero
   52644:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   52648:	e0bffd17 	ldw	r2,-12(fp)
   5264c:	10001026 	beq	r2,zero,52690 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   52650:	e0bffd17 	ldw	r2,-12(fp)
   52654:	10800017 	ldw	r2,0(r2)
   52658:	10800817 	ldw	r2,32(r2)
   5265c:	10000726 	beq	r2,zero,5267c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   52660:	e0bffd17 	ldw	r2,-12(fp)
   52664:	10800017 	ldw	r2,0(r2)
   52668:	10800817 	ldw	r2,32(r2)
   5266c:	e17fff17 	ldw	r5,-4(fp)
   52670:	e13ffd17 	ldw	r4,-12(fp)
   52674:	103ee83a 	callr	r2
   52678:	00000a06 	br	526a4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   5267c:	e0bfff17 	ldw	r2,-4(fp)
   52680:	00c80004 	movi	r3,8192
   52684:	10c00115 	stw	r3,4(r2)
      return 0;
   52688:	0005883a 	mov	r2,zero
   5268c:	00000506 	br	526a4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52690:	00525c40 	call	525c4 <alt_get_errno>
   52694:	1007883a 	mov	r3,r2
   52698:	00801444 	movi	r2,81
   5269c:	18800015 	stw	r2,0(r3)
    return -1;
   526a0:	00bfffc4 	movi	r2,-1
  }
}
   526a4:	e037883a 	mov	sp,fp
   526a8:	dfc00117 	ldw	ra,4(sp)
   526ac:	df000017 	ldw	fp,0(sp)
   526b0:	dec00204 	addi	sp,sp,8
   526b4:	f800283a 	ret

000526b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   526b8:	defffe04 	addi	sp,sp,-8
   526bc:	dfc00115 	stw	ra,4(sp)
   526c0:	df000015 	stw	fp,0(sp)
   526c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   526c8:	d0a01017 	ldw	r2,-32704(gp)
   526cc:	10000326 	beq	r2,zero,526dc <alt_get_errno+0x24>
   526d0:	d0a01017 	ldw	r2,-32704(gp)
   526d4:	103ee83a 	callr	r2
   526d8:	00000106 	br	526e0 <alt_get_errno+0x28>
   526dc:	d0a85504 	addi	r2,gp,-24236
}
   526e0:	e037883a 	mov	sp,fp
   526e4:	dfc00117 	ldw	ra,4(sp)
   526e8:	df000017 	ldw	fp,0(sp)
   526ec:	dec00204 	addi	sp,sp,8
   526f0:	f800283a 	ret

000526f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   526f4:	deffed04 	addi	sp,sp,-76
   526f8:	dfc01215 	stw	ra,72(sp)
   526fc:	df001115 	stw	fp,68(sp)
   52700:	df001104 	addi	fp,sp,68
   52704:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52708:	e0bfff17 	ldw	r2,-4(fp)
   5270c:	10000816 	blt	r2,zero,52730 <isatty+0x3c>
   52710:	01400304 	movi	r5,12
   52714:	e13fff17 	ldw	r4,-4(fp)
   52718:	00421cc0 	call	421cc <__mulsi3>
   5271c:	1007883a 	mov	r3,r2
   52720:	00800174 	movhi	r2,5
   52724:	1097fe04 	addi	r2,r2,24568
   52728:	1885883a 	add	r2,r3,r2
   5272c:	00000106 	br	52734 <isatty+0x40>
   52730:	0005883a 	mov	r2,zero
   52734:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   52738:	e0bfef17 	ldw	r2,-68(fp)
   5273c:	10000e26 	beq	r2,zero,52778 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   52740:	e0bfef17 	ldw	r2,-68(fp)
   52744:	10800017 	ldw	r2,0(r2)
   52748:	10800817 	ldw	r2,32(r2)
   5274c:	1000021e 	bne	r2,zero,52758 <isatty+0x64>
    {
      return 1;
   52750:	00800044 	movi	r2,1
   52754:	00000d06 	br	5278c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   52758:	e0bff004 	addi	r2,fp,-64
   5275c:	100b883a 	mov	r5,r2
   52760:	e13fff17 	ldw	r4,-4(fp)
   52764:	00526000 	call	52600 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   52768:	e0bff117 	ldw	r2,-60(fp)
   5276c:	10880020 	cmpeqi	r2,r2,8192
   52770:	10803fcc 	andi	r2,r2,255
   52774:	00000506 	br	5278c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52778:	00526b80 	call	526b8 <alt_get_errno>
   5277c:	1007883a 	mov	r3,r2
   52780:	00801444 	movi	r2,81
   52784:	18800015 	stw	r2,0(r3)
    return 0;
   52788:	0005883a 	mov	r2,zero
  }
}
   5278c:	e037883a 	mov	sp,fp
   52790:	dfc00117 	ldw	ra,4(sp)
   52794:	df000017 	ldw	fp,0(sp)
   52798:	dec00204 	addi	sp,sp,8
   5279c:	f800283a 	ret

000527a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   527a0:	defffc04 	addi	sp,sp,-16
   527a4:	df000315 	stw	fp,12(sp)
   527a8:	df000304 	addi	fp,sp,12
   527ac:	e13ffd15 	stw	r4,-12(fp)
   527b0:	e17ffe15 	stw	r5,-8(fp)
   527b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   527b8:	e0fffe17 	ldw	r3,-8(fp)
   527bc:	e0bffd17 	ldw	r2,-12(fp)
   527c0:	18800c26 	beq	r3,r2,527f4 <alt_load_section+0x54>
  {
    while( to != end )
   527c4:	00000806 	br	527e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   527c8:	e0bffe17 	ldw	r2,-8(fp)
   527cc:	10c00104 	addi	r3,r2,4
   527d0:	e0fffe15 	stw	r3,-8(fp)
   527d4:	e0fffd17 	ldw	r3,-12(fp)
   527d8:	19000104 	addi	r4,r3,4
   527dc:	e13ffd15 	stw	r4,-12(fp)
   527e0:	18c00017 	ldw	r3,0(r3)
   527e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   527e8:	e0fffe17 	ldw	r3,-8(fp)
   527ec:	e0bfff17 	ldw	r2,-4(fp)
   527f0:	18bff51e 	bne	r3,r2,527c8 <_gp+0xffff35f0>
    {
      *to++ = *from++;
    }
  }
}
   527f4:	0001883a 	nop
   527f8:	e037883a 	mov	sp,fp
   527fc:	df000017 	ldw	fp,0(sp)
   52800:	dec00104 	addi	sp,sp,4
   52804:	f800283a 	ret

00052808 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   52808:	defffe04 	addi	sp,sp,-8
   5280c:	dfc00115 	stw	ra,4(sp)
   52810:	df000015 	stw	fp,0(sp)
   52814:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   52818:	01800174 	movhi	r6,5
   5281c:	319c8b04 	addi	r6,r6,29228
   52820:	01400174 	movhi	r5,5
   52824:	29545404 	addi	r5,r5,20816
   52828:	01000174 	movhi	r4,5
   5282c:	211c8b04 	addi	r4,r4,29228
   52830:	00527a00 	call	527a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   52834:	01800134 	movhi	r6,4
   52838:	31808c04 	addi	r6,r6,560
   5283c:	01400134 	movhi	r5,4
   52840:	29400804 	addi	r5,r5,32
   52844:	01000134 	movhi	r4,4
   52848:	21000804 	addi	r4,r4,32
   5284c:	00527a00 	call	527a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   52850:	01800174 	movhi	r6,5
   52854:	31945404 	addi	r6,r6,20816
   52858:	01400174 	movhi	r5,5
   5285c:	29533304 	addi	r5,r5,19660
   52860:	01000174 	movhi	r4,5
   52864:	21133304 	addi	r4,r4,19660
   52868:	00527a00 	call	527a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   5286c:	0053a600 	call	53a60 <alt_dcache_flush_all>
  alt_icache_flush_all();
   52870:	0053c200 	call	53c20 <alt_icache_flush_all>
}
   52874:	0001883a 	nop
   52878:	e037883a 	mov	sp,fp
   5287c:	dfc00117 	ldw	ra,4(sp)
   52880:	df000017 	ldw	fp,0(sp)
   52884:	dec00204 	addi	sp,sp,8
   52888:	f800283a 	ret

0005288c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5288c:	defffe04 	addi	sp,sp,-8
   52890:	dfc00115 	stw	ra,4(sp)
   52894:	df000015 	stw	fp,0(sp)
   52898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5289c:	d0a01017 	ldw	r2,-32704(gp)
   528a0:	10000326 	beq	r2,zero,528b0 <alt_get_errno+0x24>
   528a4:	d0a01017 	ldw	r2,-32704(gp)
   528a8:	103ee83a 	callr	r2
   528ac:	00000106 	br	528b4 <alt_get_errno+0x28>
   528b0:	d0a85504 	addi	r2,gp,-24236
}
   528b4:	e037883a 	mov	sp,fp
   528b8:	dfc00117 	ldw	ra,4(sp)
   528bc:	df000017 	ldw	fp,0(sp)
   528c0:	dec00204 	addi	sp,sp,8
   528c4:	f800283a 	ret

000528c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   528c8:	defff904 	addi	sp,sp,-28
   528cc:	dfc00615 	stw	ra,24(sp)
   528d0:	df000515 	stw	fp,20(sp)
   528d4:	df000504 	addi	fp,sp,20
   528d8:	e13ffd15 	stw	r4,-12(fp)
   528dc:	e17ffe15 	stw	r5,-8(fp)
   528e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   528e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   528e8:	e0bffd17 	ldw	r2,-12(fp)
   528ec:	10000816 	blt	r2,zero,52910 <lseek+0x48>
   528f0:	01400304 	movi	r5,12
   528f4:	e13ffd17 	ldw	r4,-12(fp)
   528f8:	00421cc0 	call	421cc <__mulsi3>
   528fc:	1007883a 	mov	r3,r2
   52900:	00800174 	movhi	r2,5
   52904:	1097fe04 	addi	r2,r2,24568
   52908:	1885883a 	add	r2,r3,r2
   5290c:	00000106 	br	52914 <lseek+0x4c>
   52910:	0005883a 	mov	r2,zero
   52914:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   52918:	e0bffc17 	ldw	r2,-16(fp)
   5291c:	10001026 	beq	r2,zero,52960 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   52920:	e0bffc17 	ldw	r2,-16(fp)
   52924:	10800017 	ldw	r2,0(r2)
   52928:	10800717 	ldw	r2,28(r2)
   5292c:	10000926 	beq	r2,zero,52954 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   52930:	e0bffc17 	ldw	r2,-16(fp)
   52934:	10800017 	ldw	r2,0(r2)
   52938:	10800717 	ldw	r2,28(r2)
   5293c:	e1bfff17 	ldw	r6,-4(fp)
   52940:	e17ffe17 	ldw	r5,-8(fp)
   52944:	e13ffc17 	ldw	r4,-16(fp)
   52948:	103ee83a 	callr	r2
   5294c:	e0bffb15 	stw	r2,-20(fp)
   52950:	00000506 	br	52968 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   52954:	00bfde84 	movi	r2,-134
   52958:	e0bffb15 	stw	r2,-20(fp)
   5295c:	00000206 	br	52968 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   52960:	00bfebc4 	movi	r2,-81
   52964:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   52968:	e0bffb17 	ldw	r2,-20(fp)
   5296c:	1000070e 	bge	r2,zero,5298c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   52970:	005288c0 	call	5288c <alt_get_errno>
   52974:	1007883a 	mov	r3,r2
   52978:	e0bffb17 	ldw	r2,-20(fp)
   5297c:	0085c83a 	sub	r2,zero,r2
   52980:	18800015 	stw	r2,0(r3)
    rc = -1;
   52984:	00bfffc4 	movi	r2,-1
   52988:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   5298c:	e0bffb17 	ldw	r2,-20(fp)
}
   52990:	e037883a 	mov	sp,fp
   52994:	dfc00117 	ldw	ra,4(sp)
   52998:	df000017 	ldw	fp,0(sp)
   5299c:	dec00204 	addi	sp,sp,8
   529a0:	f800283a 	ret

000529a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   529a4:	defffd04 	addi	sp,sp,-12
   529a8:	dfc00215 	stw	ra,8(sp)
   529ac:	df000115 	stw	fp,4(sp)
   529b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   529b4:	0009883a 	mov	r4,zero
   529b8:	0052e4c0 	call	52e4c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   529bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   529c0:	0052e840 	call	52e84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   529c4:	01800174 	movhi	r6,5
   529c8:	31944c04 	addi	r6,r6,20784
   529cc:	01400174 	movhi	r5,5
   529d0:	29544c04 	addi	r5,r5,20784
   529d4:	01000174 	movhi	r4,5
   529d8:	21144c04 	addi	r4,r4,20784
   529dc:	0053fc40 	call	53fc4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   529e0:	0053b600 	call	53b60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   529e4:	01000174 	movhi	r4,5
   529e8:	210ef004 	addi	r4,r4,15296
   529ec:	00547840 	call	54784 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   529f0:	d0a85617 	ldw	r2,-24232(gp)
   529f4:	d0e85717 	ldw	r3,-24228(gp)
   529f8:	d1285817 	ldw	r4,-24224(gp)
   529fc:	200d883a 	mov	r6,r4
   52a00:	180b883a 	mov	r5,r3
   52a04:	1009883a 	mov	r4,r2
   52a08:	004026c0 	call	4026c <main>
   52a0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   52a10:	01000044 	movi	r4,1
   52a14:	00524c00 	call	524c0 <close>
  exit (result);
   52a18:	e13fff17 	ldw	r4,-4(fp)
   52a1c:	00547c00 	call	547c0 <exit>

00052a20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   52a20:	defffe04 	addi	sp,sp,-8
   52a24:	df000115 	stw	fp,4(sp)
   52a28:	df000104 	addi	fp,sp,4
   52a2c:	e13fff15 	stw	r4,-4(fp)
}
   52a30:	0001883a 	nop
   52a34:	e037883a 	mov	sp,fp
   52a38:	df000017 	ldw	fp,0(sp)
   52a3c:	dec00104 	addi	sp,sp,4
   52a40:	f800283a 	ret

00052a44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   52a44:	defffe04 	addi	sp,sp,-8
   52a48:	df000115 	stw	fp,4(sp)
   52a4c:	df000104 	addi	fp,sp,4
   52a50:	e13fff15 	stw	r4,-4(fp)
}
   52a54:	0001883a 	nop
   52a58:	e037883a 	mov	sp,fp
   52a5c:	df000017 	ldw	fp,0(sp)
   52a60:	dec00104 	addi	sp,sp,4
   52a64:	f800283a 	ret

00052a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52a68:	defffe04 	addi	sp,sp,-8
   52a6c:	dfc00115 	stw	ra,4(sp)
   52a70:	df000015 	stw	fp,0(sp)
   52a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52a78:	d0a01017 	ldw	r2,-32704(gp)
   52a7c:	10000326 	beq	r2,zero,52a8c <alt_get_errno+0x24>
   52a80:	d0a01017 	ldw	r2,-32704(gp)
   52a84:	103ee83a 	callr	r2
   52a88:	00000106 	br	52a90 <alt_get_errno+0x28>
   52a8c:	d0a85504 	addi	r2,gp,-24236
}
   52a90:	e037883a 	mov	sp,fp
   52a94:	dfc00117 	ldw	ra,4(sp)
   52a98:	df000017 	ldw	fp,0(sp)
   52a9c:	dec00204 	addi	sp,sp,8
   52aa0:	f800283a 	ret

00052aa4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   52aa4:	defff904 	addi	sp,sp,-28
   52aa8:	dfc00615 	stw	ra,24(sp)
   52aac:	df000515 	stw	fp,20(sp)
   52ab0:	df000504 	addi	fp,sp,20
   52ab4:	e13ffd15 	stw	r4,-12(fp)
   52ab8:	e17ffe15 	stw	r5,-8(fp)
   52abc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52ac0:	e0bffd17 	ldw	r2,-12(fp)
   52ac4:	10000816 	blt	r2,zero,52ae8 <read+0x44>
   52ac8:	01400304 	movi	r5,12
   52acc:	e13ffd17 	ldw	r4,-12(fp)
   52ad0:	00421cc0 	call	421cc <__mulsi3>
   52ad4:	1007883a 	mov	r3,r2
   52ad8:	00800174 	movhi	r2,5
   52adc:	1097fe04 	addi	r2,r2,24568
   52ae0:	1885883a 	add	r2,r3,r2
   52ae4:	00000106 	br	52aec <read+0x48>
   52ae8:	0005883a 	mov	r2,zero
   52aec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   52af0:	e0bffb17 	ldw	r2,-20(fp)
   52af4:	10002226 	beq	r2,zero,52b80 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52af8:	e0bffb17 	ldw	r2,-20(fp)
   52afc:	10800217 	ldw	r2,8(r2)
   52b00:	108000cc 	andi	r2,r2,3
   52b04:	10800060 	cmpeqi	r2,r2,1
   52b08:	1000181e 	bne	r2,zero,52b6c <read+0xc8>
        (fd->dev->read))
   52b0c:	e0bffb17 	ldw	r2,-20(fp)
   52b10:	10800017 	ldw	r2,0(r2)
   52b14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   52b18:	10001426 	beq	r2,zero,52b6c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   52b1c:	e0bffb17 	ldw	r2,-20(fp)
   52b20:	10800017 	ldw	r2,0(r2)
   52b24:	10800517 	ldw	r2,20(r2)
   52b28:	e0ffff17 	ldw	r3,-4(fp)
   52b2c:	180d883a 	mov	r6,r3
   52b30:	e17ffe17 	ldw	r5,-8(fp)
   52b34:	e13ffb17 	ldw	r4,-20(fp)
   52b38:	103ee83a 	callr	r2
   52b3c:	e0bffc15 	stw	r2,-16(fp)
   52b40:	e0bffc17 	ldw	r2,-16(fp)
   52b44:	1000070e 	bge	r2,zero,52b64 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   52b48:	0052a680 	call	52a68 <alt_get_errno>
   52b4c:	1007883a 	mov	r3,r2
   52b50:	e0bffc17 	ldw	r2,-16(fp)
   52b54:	0085c83a 	sub	r2,zero,r2
   52b58:	18800015 	stw	r2,0(r3)
          return -1;
   52b5c:	00bfffc4 	movi	r2,-1
   52b60:	00000c06 	br	52b94 <read+0xf0>
        }
        return rval;
   52b64:	e0bffc17 	ldw	r2,-16(fp)
   52b68:	00000a06 	br	52b94 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   52b6c:	0052a680 	call	52a68 <alt_get_errno>
   52b70:	1007883a 	mov	r3,r2
   52b74:	00800344 	movi	r2,13
   52b78:	18800015 	stw	r2,0(r3)
   52b7c:	00000406 	br	52b90 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   52b80:	0052a680 	call	52a68 <alt_get_errno>
   52b84:	1007883a 	mov	r3,r2
   52b88:	00801444 	movi	r2,81
   52b8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52b90:	00bfffc4 	movi	r2,-1
}
   52b94:	e037883a 	mov	sp,fp
   52b98:	dfc00117 	ldw	ra,4(sp)
   52b9c:	df000017 	ldw	fp,0(sp)
   52ba0:	dec00204 	addi	sp,sp,8
   52ba4:	f800283a 	ret

00052ba8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   52ba8:	defffc04 	addi	sp,sp,-16
   52bac:	dfc00315 	stw	ra,12(sp)
   52bb0:	df000215 	stw	fp,8(sp)
   52bb4:	dc000115 	stw	r16,4(sp)
   52bb8:	df000204 	addi	fp,sp,8
   52bbc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   52bc0:	e0bffe17 	ldw	r2,-8(fp)
   52bc4:	108000d0 	cmplti	r2,r2,3
   52bc8:	1000111e 	bne	r2,zero,52c10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   52bcc:	04000174 	movhi	r16,5
   52bd0:	8417fe04 	addi	r16,r16,24568
   52bd4:	e0bffe17 	ldw	r2,-8(fp)
   52bd8:	01400304 	movi	r5,12
   52bdc:	1009883a 	mov	r4,r2
   52be0:	00421cc0 	call	421cc <__mulsi3>
   52be4:	8085883a 	add	r2,r16,r2
   52be8:	10800204 	addi	r2,r2,8
   52bec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   52bf0:	04000174 	movhi	r16,5
   52bf4:	8417fe04 	addi	r16,r16,24568
   52bf8:	e0bffe17 	ldw	r2,-8(fp)
   52bfc:	01400304 	movi	r5,12
   52c00:	1009883a 	mov	r4,r2
   52c04:	00421cc0 	call	421cc <__mulsi3>
   52c08:	8085883a 	add	r2,r16,r2
   52c0c:	10000015 	stw	zero,0(r2)
  }
}
   52c10:	0001883a 	nop
   52c14:	e6ffff04 	addi	sp,fp,-4
   52c18:	dfc00217 	ldw	ra,8(sp)
   52c1c:	df000117 	ldw	fp,4(sp)
   52c20:	dc000017 	ldw	r16,0(sp)
   52c24:	dec00304 	addi	sp,sp,12
   52c28:	f800283a 	ret

00052c2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   52c2c:	defff904 	addi	sp,sp,-28
   52c30:	df000615 	stw	fp,24(sp)
   52c34:	df000604 	addi	fp,sp,24
   52c38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52c3c:	0005303a 	rdctl	r2,status
   52c40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52c44:	e0fffe17 	ldw	r3,-8(fp)
   52c48:	00bfff84 	movi	r2,-2
   52c4c:	1884703a 	and	r2,r3,r2
   52c50:	1001703a 	wrctl	status,r2
  
  return context;
   52c54:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   52c58:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   52c5c:	d0a01117 	ldw	r2,-32700(gp)
   52c60:	10c000c4 	addi	r3,r2,3
   52c64:	00bfff04 	movi	r2,-4
   52c68:	1884703a 	and	r2,r3,r2
   52c6c:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   52c70:	d0e01117 	ldw	r3,-32700(gp)
   52c74:	e0bfff17 	ldw	r2,-4(fp)
   52c78:	1887883a 	add	r3,r3,r2
   52c7c:	008001b4 	movhi	r2,6
   52c80:	10b0f004 	addi	r2,r2,-15424
   52c84:	10c0062e 	bgeu	r2,r3,52ca0 <sbrk+0x74>
   52c88:	e0bffb17 	ldw	r2,-20(fp)
   52c8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52c90:	e0bffa17 	ldw	r2,-24(fp)
   52c94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   52c98:	00bfffc4 	movi	r2,-1
   52c9c:	00000b06 	br	52ccc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   52ca0:	d0a01117 	ldw	r2,-32700(gp)
   52ca4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   52ca8:	d0e01117 	ldw	r3,-32700(gp)
   52cac:	e0bfff17 	ldw	r2,-4(fp)
   52cb0:	1885883a 	add	r2,r3,r2
   52cb4:	d0a01115 	stw	r2,-32700(gp)
   52cb8:	e0bffb17 	ldw	r2,-20(fp)
   52cbc:	e0bffc15 	stw	r2,-16(fp)
   52cc0:	e0bffc17 	ldw	r2,-16(fp)
   52cc4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   52cc8:	e0bffd17 	ldw	r2,-12(fp)
} 
   52ccc:	e037883a 	mov	sp,fp
   52cd0:	df000017 	ldw	fp,0(sp)
   52cd4:	dec00104 	addi	sp,sp,4
   52cd8:	f800283a 	ret

00052cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52cdc:	defffe04 	addi	sp,sp,-8
   52ce0:	dfc00115 	stw	ra,4(sp)
   52ce4:	df000015 	stw	fp,0(sp)
   52ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52cec:	d0a01017 	ldw	r2,-32704(gp)
   52cf0:	10000326 	beq	r2,zero,52d00 <alt_get_errno+0x24>
   52cf4:	d0a01017 	ldw	r2,-32704(gp)
   52cf8:	103ee83a 	callr	r2
   52cfc:	00000106 	br	52d04 <alt_get_errno+0x28>
   52d00:	d0a85504 	addi	r2,gp,-24236
}
   52d04:	e037883a 	mov	sp,fp
   52d08:	dfc00117 	ldw	ra,4(sp)
   52d0c:	df000017 	ldw	fp,0(sp)
   52d10:	dec00204 	addi	sp,sp,8
   52d14:	f800283a 	ret

00052d18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   52d18:	defff904 	addi	sp,sp,-28
   52d1c:	dfc00615 	stw	ra,24(sp)
   52d20:	df000515 	stw	fp,20(sp)
   52d24:	df000504 	addi	fp,sp,20
   52d28:	e13ffd15 	stw	r4,-12(fp)
   52d2c:	e17ffe15 	stw	r5,-8(fp)
   52d30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52d34:	e0bffd17 	ldw	r2,-12(fp)
   52d38:	10000816 	blt	r2,zero,52d5c <write+0x44>
   52d3c:	01400304 	movi	r5,12
   52d40:	e13ffd17 	ldw	r4,-12(fp)
   52d44:	00421cc0 	call	421cc <__mulsi3>
   52d48:	1007883a 	mov	r3,r2
   52d4c:	00800174 	movhi	r2,5
   52d50:	1097fe04 	addi	r2,r2,24568
   52d54:	1885883a 	add	r2,r3,r2
   52d58:	00000106 	br	52d60 <write+0x48>
   52d5c:	0005883a 	mov	r2,zero
   52d60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   52d64:	e0bffb17 	ldw	r2,-20(fp)
   52d68:	10002126 	beq	r2,zero,52df0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   52d6c:	e0bffb17 	ldw	r2,-20(fp)
   52d70:	10800217 	ldw	r2,8(r2)
   52d74:	108000cc 	andi	r2,r2,3
   52d78:	10001826 	beq	r2,zero,52ddc <write+0xc4>
   52d7c:	e0bffb17 	ldw	r2,-20(fp)
   52d80:	10800017 	ldw	r2,0(r2)
   52d84:	10800617 	ldw	r2,24(r2)
   52d88:	10001426 	beq	r2,zero,52ddc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   52d8c:	e0bffb17 	ldw	r2,-20(fp)
   52d90:	10800017 	ldw	r2,0(r2)
   52d94:	10800617 	ldw	r2,24(r2)
   52d98:	e0ffff17 	ldw	r3,-4(fp)
   52d9c:	180d883a 	mov	r6,r3
   52da0:	e17ffe17 	ldw	r5,-8(fp)
   52da4:	e13ffb17 	ldw	r4,-20(fp)
   52da8:	103ee83a 	callr	r2
   52dac:	e0bffc15 	stw	r2,-16(fp)
   52db0:	e0bffc17 	ldw	r2,-16(fp)
   52db4:	1000070e 	bge	r2,zero,52dd4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   52db8:	0052cdc0 	call	52cdc <alt_get_errno>
   52dbc:	1007883a 	mov	r3,r2
   52dc0:	e0bffc17 	ldw	r2,-16(fp)
   52dc4:	0085c83a 	sub	r2,zero,r2
   52dc8:	18800015 	stw	r2,0(r3)
        return -1;
   52dcc:	00bfffc4 	movi	r2,-1
   52dd0:	00000c06 	br	52e04 <write+0xec>
      }
      return rval;
   52dd4:	e0bffc17 	ldw	r2,-16(fp)
   52dd8:	00000a06 	br	52e04 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   52ddc:	0052cdc0 	call	52cdc <alt_get_errno>
   52de0:	1007883a 	mov	r3,r2
   52de4:	00800344 	movi	r2,13
   52de8:	18800015 	stw	r2,0(r3)
   52dec:	00000406 	br	52e00 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   52df0:	0052cdc0 	call	52cdc <alt_get_errno>
   52df4:	1007883a 	mov	r3,r2
   52df8:	00801444 	movi	r2,81
   52dfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   52e00:	00bfffc4 	movi	r2,-1
}
   52e04:	e037883a 	mov	sp,fp
   52e08:	dfc00117 	ldw	ra,4(sp)
   52e0c:	df000017 	ldw	fp,0(sp)
   52e10:	dec00204 	addi	sp,sp,8
   52e14:	f800283a 	ret

00052e18 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   52e18:	defffd04 	addi	sp,sp,-12
   52e1c:	dfc00215 	stw	ra,8(sp)
   52e20:	df000115 	stw	fp,4(sp)
   52e24:	df000104 	addi	fp,sp,4
   52e28:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   52e2c:	d1600d04 	addi	r5,gp,-32716
   52e30:	e13fff17 	ldw	r4,-4(fp)
   52e34:	0053abc0 	call	53abc <alt_dev_llist_insert>
}
   52e38:	e037883a 	mov	sp,fp
   52e3c:	dfc00117 	ldw	ra,4(sp)
   52e40:	df000017 	ldw	fp,0(sp)
   52e44:	dec00204 	addi	sp,sp,8
   52e48:	f800283a 	ret

00052e4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   52e4c:	defffd04 	addi	sp,sp,-12
   52e50:	dfc00215 	stw	ra,8(sp)
   52e54:	df000115 	stw	fp,4(sp)
   52e58:	df000104 	addi	fp,sp,4
   52e5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSADOR, Processador);
   52e60:	00544680 	call	54468 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   52e64:	00800044 	movi	r2,1
   52e68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   52e6c:	0001883a 	nop
   52e70:	e037883a 	mov	sp,fp
   52e74:	dfc00117 	ldw	ra,4(sp)
   52e78:	df000017 	ldw	fp,0(sp)
   52e7c:	dec00204 	addi	sp,sp,8
   52e80:	f800283a 	ret

00052e84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   52e84:	defffe04 	addi	sp,sp,-8
   52e88:	dfc00115 	stw	ra,4(sp)
   52e8c:	df000015 	stw	fp,0(sp)
   52e90:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   52e94:	01800184 	movi	r6,6
   52e98:	000b883a 	mov	r5,zero
   52e9c:	01000174 	movhi	r4,5
   52ea0:	21186804 	addi	r4,r4,24992
   52ea4:	00530300 	call	53030 <altera_avalon_jtag_uart_init>
   52ea8:	01000174 	movhi	r4,5
   52eac:	21185e04 	addi	r4,r4,24952
   52eb0:	0052e180 	call	52e18 <alt_dev_reg>
}
   52eb4:	0001883a 	nop
   52eb8:	e037883a 	mov	sp,fp
   52ebc:	dfc00117 	ldw	ra,4(sp)
   52ec0:	df000017 	ldw	fp,0(sp)
   52ec4:	dec00204 	addi	sp,sp,8
   52ec8:	f800283a 	ret

00052ecc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   52ecc:	defffa04 	addi	sp,sp,-24
   52ed0:	dfc00515 	stw	ra,20(sp)
   52ed4:	df000415 	stw	fp,16(sp)
   52ed8:	df000404 	addi	fp,sp,16
   52edc:	e13ffd15 	stw	r4,-12(fp)
   52ee0:	e17ffe15 	stw	r5,-8(fp)
   52ee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   52ee8:	e0bffd17 	ldw	r2,-12(fp)
   52eec:	10800017 	ldw	r2,0(r2)
   52ef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   52ef4:	e0bffc17 	ldw	r2,-16(fp)
   52ef8:	10c00a04 	addi	r3,r2,40
   52efc:	e0bffd17 	ldw	r2,-12(fp)
   52f00:	10800217 	ldw	r2,8(r2)
   52f04:	100f883a 	mov	r7,r2
   52f08:	e1bfff17 	ldw	r6,-4(fp)
   52f0c:	e17ffe17 	ldw	r5,-8(fp)
   52f10:	1809883a 	mov	r4,r3
   52f14:	00534f40 	call	534f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   52f18:	e037883a 	mov	sp,fp
   52f1c:	dfc00117 	ldw	ra,4(sp)
   52f20:	df000017 	ldw	fp,0(sp)
   52f24:	dec00204 	addi	sp,sp,8
   52f28:	f800283a 	ret

00052f2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   52f2c:	defffa04 	addi	sp,sp,-24
   52f30:	dfc00515 	stw	ra,20(sp)
   52f34:	df000415 	stw	fp,16(sp)
   52f38:	df000404 	addi	fp,sp,16
   52f3c:	e13ffd15 	stw	r4,-12(fp)
   52f40:	e17ffe15 	stw	r5,-8(fp)
   52f44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   52f48:	e0bffd17 	ldw	r2,-12(fp)
   52f4c:	10800017 	ldw	r2,0(r2)
   52f50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   52f54:	e0bffc17 	ldw	r2,-16(fp)
   52f58:	10c00a04 	addi	r3,r2,40
   52f5c:	e0bffd17 	ldw	r2,-12(fp)
   52f60:	10800217 	ldw	r2,8(r2)
   52f64:	100f883a 	mov	r7,r2
   52f68:	e1bfff17 	ldw	r6,-4(fp)
   52f6c:	e17ffe17 	ldw	r5,-8(fp)
   52f70:	1809883a 	mov	r4,r3
   52f74:	00537100 	call	53710 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   52f78:	e037883a 	mov	sp,fp
   52f7c:	dfc00117 	ldw	ra,4(sp)
   52f80:	df000017 	ldw	fp,0(sp)
   52f84:	dec00204 	addi	sp,sp,8
   52f88:	f800283a 	ret

00052f8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   52f8c:	defffc04 	addi	sp,sp,-16
   52f90:	dfc00315 	stw	ra,12(sp)
   52f94:	df000215 	stw	fp,8(sp)
   52f98:	df000204 	addi	fp,sp,8
   52f9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   52fa0:	e0bfff17 	ldw	r2,-4(fp)
   52fa4:	10800017 	ldw	r2,0(r2)
   52fa8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   52fac:	e0bffe17 	ldw	r2,-8(fp)
   52fb0:	10c00a04 	addi	r3,r2,40
   52fb4:	e0bfff17 	ldw	r2,-4(fp)
   52fb8:	10800217 	ldw	r2,8(r2)
   52fbc:	100b883a 	mov	r5,r2
   52fc0:	1809883a 	mov	r4,r3
   52fc4:	005339c0 	call	5339c <altera_avalon_jtag_uart_close>
}
   52fc8:	e037883a 	mov	sp,fp
   52fcc:	dfc00117 	ldw	ra,4(sp)
   52fd0:	df000017 	ldw	fp,0(sp)
   52fd4:	dec00204 	addi	sp,sp,8
   52fd8:	f800283a 	ret

00052fdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   52fdc:	defffa04 	addi	sp,sp,-24
   52fe0:	dfc00515 	stw	ra,20(sp)
   52fe4:	df000415 	stw	fp,16(sp)
   52fe8:	df000404 	addi	fp,sp,16
   52fec:	e13ffd15 	stw	r4,-12(fp)
   52ff0:	e17ffe15 	stw	r5,-8(fp)
   52ff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   52ff8:	e0bffd17 	ldw	r2,-12(fp)
   52ffc:	10800017 	ldw	r2,0(r2)
   53000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   53004:	e0bffc17 	ldw	r2,-16(fp)
   53008:	10800a04 	addi	r2,r2,40
   5300c:	e1bfff17 	ldw	r6,-4(fp)
   53010:	e17ffe17 	ldw	r5,-8(fp)
   53014:	1009883a 	mov	r4,r2
   53018:	00534040 	call	53404 <altera_avalon_jtag_uart_ioctl>
}
   5301c:	e037883a 	mov	sp,fp
   53020:	dfc00117 	ldw	ra,4(sp)
   53024:	df000017 	ldw	fp,0(sp)
   53028:	dec00204 	addi	sp,sp,8
   5302c:	f800283a 	ret

00053030 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   53030:	defffa04 	addi	sp,sp,-24
   53034:	dfc00515 	stw	ra,20(sp)
   53038:	df000415 	stw	fp,16(sp)
   5303c:	df000404 	addi	fp,sp,16
   53040:	e13ffd15 	stw	r4,-12(fp)
   53044:	e17ffe15 	stw	r5,-8(fp)
   53048:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5304c:	e0bffd17 	ldw	r2,-12(fp)
   53050:	00c00044 	movi	r3,1
   53054:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   53058:	e0bffd17 	ldw	r2,-12(fp)
   5305c:	10800017 	ldw	r2,0(r2)
   53060:	10800104 	addi	r2,r2,4
   53064:	1007883a 	mov	r3,r2
   53068:	e0bffd17 	ldw	r2,-12(fp)
   5306c:	10800817 	ldw	r2,32(r2)
   53070:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   53074:	e0bffe17 	ldw	r2,-8(fp)
   53078:	e0ffff17 	ldw	r3,-4(fp)
   5307c:	d8000015 	stw	zero,0(sp)
   53080:	e1fffd17 	ldw	r7,-12(fp)
   53084:	01800174 	movhi	r6,5
   53088:	318c3c04 	addi	r6,r6,12528
   5308c:	180b883a 	mov	r5,r3
   53090:	1009883a 	mov	r4,r2
   53094:	0053c400 	call	53c40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   53098:	e0bffd17 	ldw	r2,-12(fp)
   5309c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   530a0:	e0bffd17 	ldw	r2,-12(fp)
   530a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   530a8:	d0e85a17 	ldw	r3,-24216(gp)
   530ac:	e1fffd17 	ldw	r7,-12(fp)
   530b0:	01800174 	movhi	r6,5
   530b4:	318cbf04 	addi	r6,r6,13052
   530b8:	180b883a 	mov	r5,r3
   530bc:	1009883a 	mov	r4,r2
   530c0:	00539340 	call	53934 <alt_alarm_start>
   530c4:	1000040e 	bge	r2,zero,530d8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   530c8:	e0fffd17 	ldw	r3,-12(fp)
   530cc:	00a00034 	movhi	r2,32768
   530d0:	10bfffc4 	addi	r2,r2,-1
   530d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   530d8:	0001883a 	nop
   530dc:	e037883a 	mov	sp,fp
   530e0:	dfc00117 	ldw	ra,4(sp)
   530e4:	df000017 	ldw	fp,0(sp)
   530e8:	dec00204 	addi	sp,sp,8
   530ec:	f800283a 	ret

000530f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   530f0:	defff804 	addi	sp,sp,-32
   530f4:	df000715 	stw	fp,28(sp)
   530f8:	df000704 	addi	fp,sp,28
   530fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   53100:	e0bfff17 	ldw	r2,-4(fp)
   53104:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   53108:	e0bffb17 	ldw	r2,-20(fp)
   5310c:	10800017 	ldw	r2,0(r2)
   53110:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53114:	e0bffc17 	ldw	r2,-16(fp)
   53118:	10800104 	addi	r2,r2,4
   5311c:	10800037 	ldwio	r2,0(r2)
   53120:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   53124:	e0bffd17 	ldw	r2,-12(fp)
   53128:	1080c00c 	andi	r2,r2,768
   5312c:	10006d26 	beq	r2,zero,532e4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   53130:	e0bffd17 	ldw	r2,-12(fp)
   53134:	1080400c 	andi	r2,r2,256
   53138:	10003526 	beq	r2,zero,53210 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   5313c:	00800074 	movhi	r2,1
   53140:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53144:	e0bffb17 	ldw	r2,-20(fp)
   53148:	10800a17 	ldw	r2,40(r2)
   5314c:	10800044 	addi	r2,r2,1
   53150:	1081ffcc 	andi	r2,r2,2047
   53154:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   53158:	e0bffb17 	ldw	r2,-20(fp)
   5315c:	10c00b17 	ldw	r3,44(r2)
   53160:	e0bffe17 	ldw	r2,-8(fp)
   53164:	18801526 	beq	r3,r2,531bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   53168:	e0bffc17 	ldw	r2,-16(fp)
   5316c:	10800037 	ldwio	r2,0(r2)
   53170:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   53174:	e0bff917 	ldw	r2,-28(fp)
   53178:	10a0000c 	andi	r2,r2,32768
   5317c:	10001126 	beq	r2,zero,531c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   53180:	e0bffb17 	ldw	r2,-20(fp)
   53184:	10800a17 	ldw	r2,40(r2)
   53188:	e0fff917 	ldw	r3,-28(fp)
   5318c:	1809883a 	mov	r4,r3
   53190:	e0fffb17 	ldw	r3,-20(fp)
   53194:	1885883a 	add	r2,r3,r2
   53198:	10800e04 	addi	r2,r2,56
   5319c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   531a0:	e0bffb17 	ldw	r2,-20(fp)
   531a4:	10800a17 	ldw	r2,40(r2)
   531a8:	10800044 	addi	r2,r2,1
   531ac:	10c1ffcc 	andi	r3,r2,2047
   531b0:	e0bffb17 	ldw	r2,-20(fp)
   531b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   531b8:	003fe206 	br	53144 <_gp+0xffff3f6c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   531bc:	0001883a 	nop
   531c0:	00000106 	br	531c8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   531c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   531c8:	e0bff917 	ldw	r2,-28(fp)
   531cc:	10bfffec 	andhi	r2,r2,65535
   531d0:	10000f26 	beq	r2,zero,53210 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   531d4:	e0bffb17 	ldw	r2,-20(fp)
   531d8:	10c00817 	ldw	r3,32(r2)
   531dc:	00bfff84 	movi	r2,-2
   531e0:	1886703a 	and	r3,r3,r2
   531e4:	e0bffb17 	ldw	r2,-20(fp)
   531e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   531ec:	e0bffc17 	ldw	r2,-16(fp)
   531f0:	10800104 	addi	r2,r2,4
   531f4:	1007883a 	mov	r3,r2
   531f8:	e0bffb17 	ldw	r2,-20(fp)
   531fc:	10800817 	ldw	r2,32(r2)
   53200:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53204:	e0bffc17 	ldw	r2,-16(fp)
   53208:	10800104 	addi	r2,r2,4
   5320c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   53210:	e0bffd17 	ldw	r2,-12(fp)
   53214:	1080800c 	andi	r2,r2,512
   53218:	103fbe26 	beq	r2,zero,53114 <_gp+0xffff3f3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   5321c:	e0bffd17 	ldw	r2,-12(fp)
   53220:	1004d43a 	srli	r2,r2,16
   53224:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   53228:	00001406 	br	5327c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   5322c:	e0bffc17 	ldw	r2,-16(fp)
   53230:	e0fffb17 	ldw	r3,-20(fp)
   53234:	18c00d17 	ldw	r3,52(r3)
   53238:	e13ffb17 	ldw	r4,-20(fp)
   5323c:	20c7883a 	add	r3,r4,r3
   53240:	18c20e04 	addi	r3,r3,2104
   53244:	18c00003 	ldbu	r3,0(r3)
   53248:	18c03fcc 	andi	r3,r3,255
   5324c:	18c0201c 	xori	r3,r3,128
   53250:	18ffe004 	addi	r3,r3,-128
   53254:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53258:	e0bffb17 	ldw	r2,-20(fp)
   5325c:	10800d17 	ldw	r2,52(r2)
   53260:	10800044 	addi	r2,r2,1
   53264:	10c1ffcc 	andi	r3,r2,2047
   53268:	e0bffb17 	ldw	r2,-20(fp)
   5326c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   53270:	e0bffa17 	ldw	r2,-24(fp)
   53274:	10bfffc4 	addi	r2,r2,-1
   53278:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5327c:	e0bffa17 	ldw	r2,-24(fp)
   53280:	10000526 	beq	r2,zero,53298 <altera_avalon_jtag_uart_irq+0x1a8>
   53284:	e0bffb17 	ldw	r2,-20(fp)
   53288:	10c00d17 	ldw	r3,52(r2)
   5328c:	e0bffb17 	ldw	r2,-20(fp)
   53290:	10800c17 	ldw	r2,48(r2)
   53294:	18bfe51e 	bne	r3,r2,5322c <_gp+0xffff4054>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   53298:	e0bffa17 	ldw	r2,-24(fp)
   5329c:	103f9d26 	beq	r2,zero,53114 <_gp+0xffff3f3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   532a0:	e0bffb17 	ldw	r2,-20(fp)
   532a4:	10c00817 	ldw	r3,32(r2)
   532a8:	00bfff44 	movi	r2,-3
   532ac:	1886703a 	and	r3,r3,r2
   532b0:	e0bffb17 	ldw	r2,-20(fp)
   532b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   532b8:	e0bffb17 	ldw	r2,-20(fp)
   532bc:	10800017 	ldw	r2,0(r2)
   532c0:	10800104 	addi	r2,r2,4
   532c4:	1007883a 	mov	r3,r2
   532c8:	e0bffb17 	ldw	r2,-20(fp)
   532cc:	10800817 	ldw	r2,32(r2)
   532d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   532d4:	e0bffc17 	ldw	r2,-16(fp)
   532d8:	10800104 	addi	r2,r2,4
   532dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   532e0:	003f8c06 	br	53114 <_gp+0xffff3f3c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   532e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   532e8:	0001883a 	nop
   532ec:	e037883a 	mov	sp,fp
   532f0:	df000017 	ldw	fp,0(sp)
   532f4:	dec00104 	addi	sp,sp,4
   532f8:	f800283a 	ret

000532fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   532fc:	defff804 	addi	sp,sp,-32
   53300:	df000715 	stw	fp,28(sp)
   53304:	df000704 	addi	fp,sp,28
   53308:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   5330c:	e0bffb17 	ldw	r2,-20(fp)
   53310:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   53314:	e0bff917 	ldw	r2,-28(fp)
   53318:	10800017 	ldw	r2,0(r2)
   5331c:	10800104 	addi	r2,r2,4
   53320:	10800037 	ldwio	r2,0(r2)
   53324:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   53328:	e0bffa17 	ldw	r2,-24(fp)
   5332c:	1081000c 	andi	r2,r2,1024
   53330:	10000b26 	beq	r2,zero,53360 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   53334:	e0bff917 	ldw	r2,-28(fp)
   53338:	10800017 	ldw	r2,0(r2)
   5333c:	10800104 	addi	r2,r2,4
   53340:	1007883a 	mov	r3,r2
   53344:	e0bff917 	ldw	r2,-28(fp)
   53348:	10800817 	ldw	r2,32(r2)
   5334c:	10810014 	ori	r2,r2,1024
   53350:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   53354:	e0bff917 	ldw	r2,-28(fp)
   53358:	10000915 	stw	zero,36(r2)
   5335c:	00000a06 	br	53388 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   53360:	e0bff917 	ldw	r2,-28(fp)
   53364:	10c00917 	ldw	r3,36(r2)
   53368:	00a00034 	movhi	r2,32768
   5336c:	10bfff04 	addi	r2,r2,-4
   53370:	10c00536 	bltu	r2,r3,53388 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   53374:	e0bff917 	ldw	r2,-28(fp)
   53378:	10800917 	ldw	r2,36(r2)
   5337c:	10c00044 	addi	r3,r2,1
   53380:	e0bff917 	ldw	r2,-28(fp)
   53384:	10c00915 	stw	r3,36(r2)
   53388:	d0a85a17 	ldw	r2,-24216(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   5338c:	e037883a 	mov	sp,fp
   53390:	df000017 	ldw	fp,0(sp)
   53394:	dec00104 	addi	sp,sp,4
   53398:	f800283a 	ret

0005339c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   5339c:	defffd04 	addi	sp,sp,-12
   533a0:	df000215 	stw	fp,8(sp)
   533a4:	df000204 	addi	fp,sp,8
   533a8:	e13ffe15 	stw	r4,-8(fp)
   533ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   533b0:	00000506 	br	533c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   533b4:	e0bfff17 	ldw	r2,-4(fp)
   533b8:	1090000c 	andi	r2,r2,16384
   533bc:	10000226 	beq	r2,zero,533c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   533c0:	00bffd44 	movi	r2,-11
   533c4:	00000b06 	br	533f4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   533c8:	e0bffe17 	ldw	r2,-8(fp)
   533cc:	10c00d17 	ldw	r3,52(r2)
   533d0:	e0bffe17 	ldw	r2,-8(fp)
   533d4:	10800c17 	ldw	r2,48(r2)
   533d8:	18800526 	beq	r3,r2,533f0 <altera_avalon_jtag_uart_close+0x54>
   533dc:	e0bffe17 	ldw	r2,-8(fp)
   533e0:	10c00917 	ldw	r3,36(r2)
   533e4:	e0bffe17 	ldw	r2,-8(fp)
   533e8:	10800117 	ldw	r2,4(r2)
   533ec:	18bff136 	bltu	r3,r2,533b4 <_gp+0xffff41dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   533f0:	0005883a 	mov	r2,zero
}
   533f4:	e037883a 	mov	sp,fp
   533f8:	df000017 	ldw	fp,0(sp)
   533fc:	dec00104 	addi	sp,sp,4
   53400:	f800283a 	ret

00053404 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   53404:	defffa04 	addi	sp,sp,-24
   53408:	df000515 	stw	fp,20(sp)
   5340c:	df000504 	addi	fp,sp,20
   53410:	e13ffd15 	stw	r4,-12(fp)
   53414:	e17ffe15 	stw	r5,-8(fp)
   53418:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   5341c:	00bff9c4 	movi	r2,-25
   53420:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   53424:	e0bffe17 	ldw	r2,-8(fp)
   53428:	10da8060 	cmpeqi	r3,r2,27137
   5342c:	1800031e 	bne	r3,zero,5343c <altera_avalon_jtag_uart_ioctl+0x38>
   53430:	109a80a0 	cmpeqi	r2,r2,27138
   53434:	1000181e 	bne	r2,zero,53498 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   53438:	00002906 	br	534e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   5343c:	e0bffd17 	ldw	r2,-12(fp)
   53440:	10c00117 	ldw	r3,4(r2)
   53444:	00a00034 	movhi	r2,32768
   53448:	10bfffc4 	addi	r2,r2,-1
   5344c:	18802126 	beq	r3,r2,534d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   53450:	e0bfff17 	ldw	r2,-4(fp)
   53454:	10800017 	ldw	r2,0(r2)
   53458:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   5345c:	e0bffc17 	ldw	r2,-16(fp)
   53460:	10800090 	cmplti	r2,r2,2
   53464:	1000061e 	bne	r2,zero,53480 <altera_avalon_jtag_uart_ioctl+0x7c>
   53468:	e0fffc17 	ldw	r3,-16(fp)
   5346c:	00a00034 	movhi	r2,32768
   53470:	10bfffc4 	addi	r2,r2,-1
   53474:	18800226 	beq	r3,r2,53480 <altera_avalon_jtag_uart_ioctl+0x7c>
   53478:	e0bffc17 	ldw	r2,-16(fp)
   5347c:	00000206 	br	53488 <altera_avalon_jtag_uart_ioctl+0x84>
   53480:	00a00034 	movhi	r2,32768
   53484:	10bfff84 	addi	r2,r2,-2
   53488:	e0fffd17 	ldw	r3,-12(fp)
   5348c:	18800115 	stw	r2,4(r3)
      rc = 0;
   53490:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53494:	00000f06 	br	534d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   53498:	e0bffd17 	ldw	r2,-12(fp)
   5349c:	10c00117 	ldw	r3,4(r2)
   534a0:	00a00034 	movhi	r2,32768
   534a4:	10bfffc4 	addi	r2,r2,-1
   534a8:	18800c26 	beq	r3,r2,534dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   534ac:	e0bffd17 	ldw	r2,-12(fp)
   534b0:	10c00917 	ldw	r3,36(r2)
   534b4:	e0bffd17 	ldw	r2,-12(fp)
   534b8:	10800117 	ldw	r2,4(r2)
   534bc:	1885803a 	cmpltu	r2,r3,r2
   534c0:	10c03fcc 	andi	r3,r2,255
   534c4:	e0bfff17 	ldw	r2,-4(fp)
   534c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   534cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   534d0:	00000206 	br	534dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   534d4:	0001883a 	nop
   534d8:	00000106 	br	534e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   534dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   534e0:	e0bffb17 	ldw	r2,-20(fp)
}
   534e4:	e037883a 	mov	sp,fp
   534e8:	df000017 	ldw	fp,0(sp)
   534ec:	dec00104 	addi	sp,sp,4
   534f0:	f800283a 	ret

000534f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   534f4:	defff304 	addi	sp,sp,-52
   534f8:	dfc00c15 	stw	ra,48(sp)
   534fc:	df000b15 	stw	fp,44(sp)
   53500:	df000b04 	addi	fp,sp,44
   53504:	e13ffc15 	stw	r4,-16(fp)
   53508:	e17ffd15 	stw	r5,-12(fp)
   5350c:	e1bffe15 	stw	r6,-8(fp)
   53510:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   53514:	e0bffd17 	ldw	r2,-12(fp)
   53518:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   5351c:	00004706 	br	5363c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   53520:	e0bffc17 	ldw	r2,-16(fp)
   53524:	10800a17 	ldw	r2,40(r2)
   53528:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   5352c:	e0bffc17 	ldw	r2,-16(fp)
   53530:	10800b17 	ldw	r2,44(r2)
   53534:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   53538:	e0fff717 	ldw	r3,-36(fp)
   5353c:	e0bff817 	ldw	r2,-32(fp)
   53540:	18800536 	bltu	r3,r2,53558 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   53544:	e0fff717 	ldw	r3,-36(fp)
   53548:	e0bff817 	ldw	r2,-32(fp)
   5354c:	1885c83a 	sub	r2,r3,r2
   53550:	e0bff615 	stw	r2,-40(fp)
   53554:	00000406 	br	53568 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   53558:	00c20004 	movi	r3,2048
   5355c:	e0bff817 	ldw	r2,-32(fp)
   53560:	1885c83a 	sub	r2,r3,r2
   53564:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   53568:	e0bff617 	ldw	r2,-40(fp)
   5356c:	10001e26 	beq	r2,zero,535e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   53570:	e0fffe17 	ldw	r3,-8(fp)
   53574:	e0bff617 	ldw	r2,-40(fp)
   53578:	1880022e 	bgeu	r3,r2,53584 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   5357c:	e0bffe17 	ldw	r2,-8(fp)
   53580:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   53584:	e0bffc17 	ldw	r2,-16(fp)
   53588:	10c00e04 	addi	r3,r2,56
   5358c:	e0bff817 	ldw	r2,-32(fp)
   53590:	1885883a 	add	r2,r3,r2
   53594:	e1bff617 	ldw	r6,-40(fp)
   53598:	100b883a 	mov	r5,r2
   5359c:	e13ff517 	ldw	r4,-44(fp)
   535a0:	004c2dc0 	call	4c2dc <memcpy>
      ptr   += n;
   535a4:	e0fff517 	ldw	r3,-44(fp)
   535a8:	e0bff617 	ldw	r2,-40(fp)
   535ac:	1885883a 	add	r2,r3,r2
   535b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   535b4:	e0fffe17 	ldw	r3,-8(fp)
   535b8:	e0bff617 	ldw	r2,-40(fp)
   535bc:	1885c83a 	sub	r2,r3,r2
   535c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   535c4:	e0fff817 	ldw	r3,-32(fp)
   535c8:	e0bff617 	ldw	r2,-40(fp)
   535cc:	1885883a 	add	r2,r3,r2
   535d0:	10c1ffcc 	andi	r3,r2,2047
   535d4:	e0bffc17 	ldw	r2,-16(fp)
   535d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   535dc:	e0bffe17 	ldw	r2,-8(fp)
   535e0:	00bfcf16 	blt	zero,r2,53520 <_gp+0xffff4348>
   535e4:	00000106 	br	535ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   535e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   535ec:	e0fff517 	ldw	r3,-44(fp)
   535f0:	e0bffd17 	ldw	r2,-12(fp)
   535f4:	1880141e 	bne	r3,r2,53648 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   535f8:	e0bfff17 	ldw	r2,-4(fp)
   535fc:	1090000c 	andi	r2,r2,16384
   53600:	1000131e 	bne	r2,zero,53650 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   53604:	0001883a 	nop
   53608:	e0bffc17 	ldw	r2,-16(fp)
   5360c:	10c00a17 	ldw	r3,40(r2)
   53610:	e0bff717 	ldw	r2,-36(fp)
   53614:	1880051e 	bne	r3,r2,5362c <altera_avalon_jtag_uart_read+0x138>
   53618:	e0bffc17 	ldw	r2,-16(fp)
   5361c:	10c00917 	ldw	r3,36(r2)
   53620:	e0bffc17 	ldw	r2,-16(fp)
   53624:	10800117 	ldw	r2,4(r2)
   53628:	18bff736 	bltu	r3,r2,53608 <_gp+0xffff4430>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   5362c:	e0bffc17 	ldw	r2,-16(fp)
   53630:	10c00a17 	ldw	r3,40(r2)
   53634:	e0bff717 	ldw	r2,-36(fp)
   53638:	18800726 	beq	r3,r2,53658 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   5363c:	e0bffe17 	ldw	r2,-8(fp)
   53640:	00bfb716 	blt	zero,r2,53520 <_gp+0xffff4348>
   53644:	00000506 	br	5365c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   53648:	0001883a 	nop
   5364c:	00000306 	br	5365c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   53650:	0001883a 	nop
   53654:	00000106 	br	5365c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   53658:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   5365c:	e0fff517 	ldw	r3,-44(fp)
   53660:	e0bffd17 	ldw	r2,-12(fp)
   53664:	18801826 	beq	r3,r2,536c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53668:	0005303a 	rdctl	r2,status
   5366c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53670:	e0fffb17 	ldw	r3,-20(fp)
   53674:	00bfff84 	movi	r2,-2
   53678:	1884703a 	and	r2,r3,r2
   5367c:	1001703a 	wrctl	status,r2
  
  return context;
   53680:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   53684:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53688:	e0bffc17 	ldw	r2,-16(fp)
   5368c:	10800817 	ldw	r2,32(r2)
   53690:	10c00054 	ori	r3,r2,1
   53694:	e0bffc17 	ldw	r2,-16(fp)
   53698:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5369c:	e0bffc17 	ldw	r2,-16(fp)
   536a0:	10800017 	ldw	r2,0(r2)
   536a4:	10800104 	addi	r2,r2,4
   536a8:	1007883a 	mov	r3,r2
   536ac:	e0bffc17 	ldw	r2,-16(fp)
   536b0:	10800817 	ldw	r2,32(r2)
   536b4:	18800035 	stwio	r2,0(r3)
   536b8:	e0bffa17 	ldw	r2,-24(fp)
   536bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   536c0:	e0bff917 	ldw	r2,-28(fp)
   536c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   536c8:	e0fff517 	ldw	r3,-44(fp)
   536cc:	e0bffd17 	ldw	r2,-12(fp)
   536d0:	18800426 	beq	r3,r2,536e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   536d4:	e0fff517 	ldw	r3,-44(fp)
   536d8:	e0bffd17 	ldw	r2,-12(fp)
   536dc:	1885c83a 	sub	r2,r3,r2
   536e0:	00000606 	br	536fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   536e4:	e0bfff17 	ldw	r2,-4(fp)
   536e8:	1090000c 	andi	r2,r2,16384
   536ec:	10000226 	beq	r2,zero,536f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   536f0:	00bffd44 	movi	r2,-11
   536f4:	00000106 	br	536fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   536f8:	00bffec4 	movi	r2,-5
}
   536fc:	e037883a 	mov	sp,fp
   53700:	dfc00117 	ldw	ra,4(sp)
   53704:	df000017 	ldw	fp,0(sp)
   53708:	dec00204 	addi	sp,sp,8
   5370c:	f800283a 	ret

00053710 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   53710:	defff304 	addi	sp,sp,-52
   53714:	dfc00c15 	stw	ra,48(sp)
   53718:	df000b15 	stw	fp,44(sp)
   5371c:	df000b04 	addi	fp,sp,44
   53720:	e13ffc15 	stw	r4,-16(fp)
   53724:	e17ffd15 	stw	r5,-12(fp)
   53728:	e1bffe15 	stw	r6,-8(fp)
   5372c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   53730:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   53734:	e0bffd17 	ldw	r2,-12(fp)
   53738:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5373c:	00003706 	br	5381c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   53740:	e0bffc17 	ldw	r2,-16(fp)
   53744:	10800c17 	ldw	r2,48(r2)
   53748:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   5374c:	e0bffc17 	ldw	r2,-16(fp)
   53750:	10800d17 	ldw	r2,52(r2)
   53754:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   53758:	e0fff917 	ldw	r3,-28(fp)
   5375c:	e0bff517 	ldw	r2,-44(fp)
   53760:	1880062e 	bgeu	r3,r2,5377c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   53764:	e0fff517 	ldw	r3,-44(fp)
   53768:	e0bff917 	ldw	r2,-28(fp)
   5376c:	1885c83a 	sub	r2,r3,r2
   53770:	10bfffc4 	addi	r2,r2,-1
   53774:	e0bff615 	stw	r2,-40(fp)
   53778:	00000b06 	br	537a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   5377c:	e0bff517 	ldw	r2,-44(fp)
   53780:	10000526 	beq	r2,zero,53798 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   53784:	00c20004 	movi	r3,2048
   53788:	e0bff917 	ldw	r2,-28(fp)
   5378c:	1885c83a 	sub	r2,r3,r2
   53790:	e0bff615 	stw	r2,-40(fp)
   53794:	00000406 	br	537a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   53798:	00c1ffc4 	movi	r3,2047
   5379c:	e0bff917 	ldw	r2,-28(fp)
   537a0:	1885c83a 	sub	r2,r3,r2
   537a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   537a8:	e0bff617 	ldw	r2,-40(fp)
   537ac:	10001e26 	beq	r2,zero,53828 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   537b0:	e0fffe17 	ldw	r3,-8(fp)
   537b4:	e0bff617 	ldw	r2,-40(fp)
   537b8:	1880022e 	bgeu	r3,r2,537c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   537bc:	e0bffe17 	ldw	r2,-8(fp)
   537c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   537c4:	e0bffc17 	ldw	r2,-16(fp)
   537c8:	10c20e04 	addi	r3,r2,2104
   537cc:	e0bff917 	ldw	r2,-28(fp)
   537d0:	1885883a 	add	r2,r3,r2
   537d4:	e1bff617 	ldw	r6,-40(fp)
   537d8:	e17ffd17 	ldw	r5,-12(fp)
   537dc:	1009883a 	mov	r4,r2
   537e0:	004c2dc0 	call	4c2dc <memcpy>
      ptr   += n;
   537e4:	e0fffd17 	ldw	r3,-12(fp)
   537e8:	e0bff617 	ldw	r2,-40(fp)
   537ec:	1885883a 	add	r2,r3,r2
   537f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   537f4:	e0fffe17 	ldw	r3,-8(fp)
   537f8:	e0bff617 	ldw	r2,-40(fp)
   537fc:	1885c83a 	sub	r2,r3,r2
   53800:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53804:	e0fff917 	ldw	r3,-28(fp)
   53808:	e0bff617 	ldw	r2,-40(fp)
   5380c:	1885883a 	add	r2,r3,r2
   53810:	10c1ffcc 	andi	r3,r2,2047
   53814:	e0bffc17 	ldw	r2,-16(fp)
   53818:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5381c:	e0bffe17 	ldw	r2,-8(fp)
   53820:	00bfc716 	blt	zero,r2,53740 <_gp+0xffff4568>
   53824:	00000106 	br	5382c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   53828:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5382c:	0005303a 	rdctl	r2,status
   53830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53834:	e0fffb17 	ldw	r3,-20(fp)
   53838:	00bfff84 	movi	r2,-2
   5383c:	1884703a 	and	r2,r3,r2
   53840:	1001703a 	wrctl	status,r2
  
  return context;
   53844:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   53848:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5384c:	e0bffc17 	ldw	r2,-16(fp)
   53850:	10800817 	ldw	r2,32(r2)
   53854:	10c00094 	ori	r3,r2,2
   53858:	e0bffc17 	ldw	r2,-16(fp)
   5385c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53860:	e0bffc17 	ldw	r2,-16(fp)
   53864:	10800017 	ldw	r2,0(r2)
   53868:	10800104 	addi	r2,r2,4
   5386c:	1007883a 	mov	r3,r2
   53870:	e0bffc17 	ldw	r2,-16(fp)
   53874:	10800817 	ldw	r2,32(r2)
   53878:	18800035 	stwio	r2,0(r3)
   5387c:	e0bffa17 	ldw	r2,-24(fp)
   53880:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53884:	e0bff817 	ldw	r2,-32(fp)
   53888:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   5388c:	e0bffe17 	ldw	r2,-8(fp)
   53890:	0080100e 	bge	zero,r2,538d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   53894:	e0bfff17 	ldw	r2,-4(fp)
   53898:	1090000c 	andi	r2,r2,16384
   5389c:	1000101e 	bne	r2,zero,538e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   538a0:	0001883a 	nop
   538a4:	e0bffc17 	ldw	r2,-16(fp)
   538a8:	10c00d17 	ldw	r3,52(r2)
   538ac:	e0bff517 	ldw	r2,-44(fp)
   538b0:	1880051e 	bne	r3,r2,538c8 <altera_avalon_jtag_uart_write+0x1b8>
   538b4:	e0bffc17 	ldw	r2,-16(fp)
   538b8:	10c00917 	ldw	r3,36(r2)
   538bc:	e0bffc17 	ldw	r2,-16(fp)
   538c0:	10800117 	ldw	r2,4(r2)
   538c4:	18bff736 	bltu	r3,r2,538a4 <_gp+0xffff46cc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   538c8:	e0bffc17 	ldw	r2,-16(fp)
   538cc:	10800917 	ldw	r2,36(r2)
   538d0:	1000051e 	bne	r2,zero,538e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   538d4:	e0bffe17 	ldw	r2,-8(fp)
   538d8:	00bfd016 	blt	zero,r2,5381c <_gp+0xffff4644>
   538dc:	00000306 	br	538ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   538e0:	0001883a 	nop
   538e4:	00000106 	br	538ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   538e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   538ec:	e0fffd17 	ldw	r3,-12(fp)
   538f0:	e0bff717 	ldw	r2,-36(fp)
   538f4:	18800426 	beq	r3,r2,53908 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   538f8:	e0fffd17 	ldw	r3,-12(fp)
   538fc:	e0bff717 	ldw	r2,-36(fp)
   53900:	1885c83a 	sub	r2,r3,r2
   53904:	00000606 	br	53920 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   53908:	e0bfff17 	ldw	r2,-4(fp)
   5390c:	1090000c 	andi	r2,r2,16384
   53910:	10000226 	beq	r2,zero,5391c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   53914:	00bffd44 	movi	r2,-11
   53918:	00000106 	br	53920 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   5391c:	00bffec4 	movi	r2,-5
}
   53920:	e037883a 	mov	sp,fp
   53924:	dfc00117 	ldw	ra,4(sp)
   53928:	df000017 	ldw	fp,0(sp)
   5392c:	dec00204 	addi	sp,sp,8
   53930:	f800283a 	ret

00053934 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   53934:	defff504 	addi	sp,sp,-44
   53938:	df000a15 	stw	fp,40(sp)
   5393c:	df000a04 	addi	fp,sp,40
   53940:	e13ffc15 	stw	r4,-16(fp)
   53944:	e17ffd15 	stw	r5,-12(fp)
   53948:	e1bffe15 	stw	r6,-8(fp)
   5394c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   53950:	e03ff615 	stw	zero,-40(fp)
   53954:	d0a85a17 	ldw	r2,-24216(gp)
  
  if (alt_ticks_per_second ())
   53958:	10003c26 	beq	r2,zero,53a4c <alt_alarm_start+0x118>
  {
    if (alarm)
   5395c:	e0bffc17 	ldw	r2,-16(fp)
   53960:	10003826 	beq	r2,zero,53a44 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   53964:	e0bffc17 	ldw	r2,-16(fp)
   53968:	e0fffe17 	ldw	r3,-8(fp)
   5396c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   53970:	e0bffc17 	ldw	r2,-16(fp)
   53974:	e0ffff17 	ldw	r3,-4(fp)
   53978:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5397c:	0005303a 	rdctl	r2,status
   53980:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53984:	e0fff917 	ldw	r3,-28(fp)
   53988:	00bfff84 	movi	r2,-2
   5398c:	1884703a 	and	r2,r3,r2
   53990:	1001703a 	wrctl	status,r2
  
  return context;
   53994:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   53998:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5399c:	d0a85b17 	ldw	r2,-24212(gp)
      
      current_nticks = alt_nticks();
   539a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   539a4:	e0fffd17 	ldw	r3,-12(fp)
   539a8:	e0bff617 	ldw	r2,-40(fp)
   539ac:	1885883a 	add	r2,r3,r2
   539b0:	10c00044 	addi	r3,r2,1
   539b4:	e0bffc17 	ldw	r2,-16(fp)
   539b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   539bc:	e0bffc17 	ldw	r2,-16(fp)
   539c0:	10c00217 	ldw	r3,8(r2)
   539c4:	e0bff617 	ldw	r2,-40(fp)
   539c8:	1880042e 	bgeu	r3,r2,539dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   539cc:	e0bffc17 	ldw	r2,-16(fp)
   539d0:	00c00044 	movi	r3,1
   539d4:	10c00405 	stb	r3,16(r2)
   539d8:	00000206 	br	539e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   539dc:	e0bffc17 	ldw	r2,-16(fp)
   539e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   539e4:	e0bffc17 	ldw	r2,-16(fp)
   539e8:	d0e01304 	addi	r3,gp,-32692
   539ec:	e0fffa15 	stw	r3,-24(fp)
   539f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   539f4:	e0bffb17 	ldw	r2,-20(fp)
   539f8:	e0fffa17 	ldw	r3,-24(fp)
   539fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   53a00:	e0bffa17 	ldw	r2,-24(fp)
   53a04:	10c00017 	ldw	r3,0(r2)
   53a08:	e0bffb17 	ldw	r2,-20(fp)
   53a0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   53a10:	e0bffa17 	ldw	r2,-24(fp)
   53a14:	10800017 	ldw	r2,0(r2)
   53a18:	e0fffb17 	ldw	r3,-20(fp)
   53a1c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   53a20:	e0bffa17 	ldw	r2,-24(fp)
   53a24:	e0fffb17 	ldw	r3,-20(fp)
   53a28:	10c00015 	stw	r3,0(r2)
   53a2c:	e0bff817 	ldw	r2,-32(fp)
   53a30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53a34:	e0bff717 	ldw	r2,-36(fp)
   53a38:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   53a3c:	0005883a 	mov	r2,zero
   53a40:	00000306 	br	53a50 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   53a44:	00bffa84 	movi	r2,-22
   53a48:	00000106 	br	53a50 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   53a4c:	00bfde84 	movi	r2,-134
  }
}
   53a50:	e037883a 	mov	sp,fp
   53a54:	df000017 	ldw	fp,0(sp)
   53a58:	dec00104 	addi	sp,sp,4
   53a5c:	f800283a 	ret

00053a60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   53a60:	deffff04 	addi	sp,sp,-4
   53a64:	df000015 	stw	fp,0(sp)
   53a68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   53a6c:	0001883a 	nop
   53a70:	e037883a 	mov	sp,fp
   53a74:	df000017 	ldw	fp,0(sp)
   53a78:	dec00104 	addi	sp,sp,4
   53a7c:	f800283a 	ret

00053a80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53a80:	defffe04 	addi	sp,sp,-8
   53a84:	dfc00115 	stw	ra,4(sp)
   53a88:	df000015 	stw	fp,0(sp)
   53a8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53a90:	d0a01017 	ldw	r2,-32704(gp)
   53a94:	10000326 	beq	r2,zero,53aa4 <alt_get_errno+0x24>
   53a98:	d0a01017 	ldw	r2,-32704(gp)
   53a9c:	103ee83a 	callr	r2
   53aa0:	00000106 	br	53aa8 <alt_get_errno+0x28>
   53aa4:	d0a85504 	addi	r2,gp,-24236
}
   53aa8:	e037883a 	mov	sp,fp
   53aac:	dfc00117 	ldw	ra,4(sp)
   53ab0:	df000017 	ldw	fp,0(sp)
   53ab4:	dec00204 	addi	sp,sp,8
   53ab8:	f800283a 	ret

00053abc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   53abc:	defffa04 	addi	sp,sp,-24
   53ac0:	dfc00515 	stw	ra,20(sp)
   53ac4:	df000415 	stw	fp,16(sp)
   53ac8:	df000404 	addi	fp,sp,16
   53acc:	e13ffe15 	stw	r4,-8(fp)
   53ad0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   53ad4:	e0bffe17 	ldw	r2,-8(fp)
   53ad8:	10000326 	beq	r2,zero,53ae8 <alt_dev_llist_insert+0x2c>
   53adc:	e0bffe17 	ldw	r2,-8(fp)
   53ae0:	10800217 	ldw	r2,8(r2)
   53ae4:	1000061e 	bne	r2,zero,53b00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   53ae8:	0053a800 	call	53a80 <alt_get_errno>
   53aec:	1007883a 	mov	r3,r2
   53af0:	00800584 	movi	r2,22
   53af4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   53af8:	00bffa84 	movi	r2,-22
   53afc:	00001306 	br	53b4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   53b00:	e0bffe17 	ldw	r2,-8(fp)
   53b04:	e0ffff17 	ldw	r3,-4(fp)
   53b08:	e0fffc15 	stw	r3,-16(fp)
   53b0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   53b10:	e0bffd17 	ldw	r2,-12(fp)
   53b14:	e0fffc17 	ldw	r3,-16(fp)
   53b18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   53b1c:	e0bffc17 	ldw	r2,-16(fp)
   53b20:	10c00017 	ldw	r3,0(r2)
   53b24:	e0bffd17 	ldw	r2,-12(fp)
   53b28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   53b2c:	e0bffc17 	ldw	r2,-16(fp)
   53b30:	10800017 	ldw	r2,0(r2)
   53b34:	e0fffd17 	ldw	r3,-12(fp)
   53b38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   53b3c:	e0bffc17 	ldw	r2,-16(fp)
   53b40:	e0fffd17 	ldw	r3,-12(fp)
   53b44:	10c00015 	stw	r3,0(r2)

  return 0;  
   53b48:	0005883a 	mov	r2,zero
}
   53b4c:	e037883a 	mov	sp,fp
   53b50:	dfc00117 	ldw	ra,4(sp)
   53b54:	df000017 	ldw	fp,0(sp)
   53b58:	dec00204 	addi	sp,sp,8
   53b5c:	f800283a 	ret

00053b60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   53b60:	defffd04 	addi	sp,sp,-12
   53b64:	dfc00215 	stw	ra,8(sp)
   53b68:	df000115 	stw	fp,4(sp)
   53b6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   53b70:	00800174 	movhi	r2,5
   53b74:	10933204 	addi	r2,r2,19656
   53b78:	e0bfff15 	stw	r2,-4(fp)
   53b7c:	00000606 	br	53b98 <_do_ctors+0x38>
        (*ctor) (); 
   53b80:	e0bfff17 	ldw	r2,-4(fp)
   53b84:	10800017 	ldw	r2,0(r2)
   53b88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   53b8c:	e0bfff17 	ldw	r2,-4(fp)
   53b90:	10bfff04 	addi	r2,r2,-4
   53b94:	e0bfff15 	stw	r2,-4(fp)
   53b98:	e0ffff17 	ldw	r3,-4(fp)
   53b9c:	00800174 	movhi	r2,5
   53ba0:	10933304 	addi	r2,r2,19660
   53ba4:	18bff62e 	bgeu	r3,r2,53b80 <_gp+0xffff49a8>
        (*ctor) (); 
}
   53ba8:	0001883a 	nop
   53bac:	e037883a 	mov	sp,fp
   53bb0:	dfc00117 	ldw	ra,4(sp)
   53bb4:	df000017 	ldw	fp,0(sp)
   53bb8:	dec00204 	addi	sp,sp,8
   53bbc:	f800283a 	ret

00053bc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   53bc0:	defffd04 	addi	sp,sp,-12
   53bc4:	dfc00215 	stw	ra,8(sp)
   53bc8:	df000115 	stw	fp,4(sp)
   53bcc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   53bd0:	00800174 	movhi	r2,5
   53bd4:	10933204 	addi	r2,r2,19656
   53bd8:	e0bfff15 	stw	r2,-4(fp)
   53bdc:	00000606 	br	53bf8 <_do_dtors+0x38>
        (*dtor) (); 
   53be0:	e0bfff17 	ldw	r2,-4(fp)
   53be4:	10800017 	ldw	r2,0(r2)
   53be8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   53bec:	e0bfff17 	ldw	r2,-4(fp)
   53bf0:	10bfff04 	addi	r2,r2,-4
   53bf4:	e0bfff15 	stw	r2,-4(fp)
   53bf8:	e0ffff17 	ldw	r3,-4(fp)
   53bfc:	00800174 	movhi	r2,5
   53c00:	10933304 	addi	r2,r2,19660
   53c04:	18bff62e 	bgeu	r3,r2,53be0 <_gp+0xffff4a08>
        (*dtor) (); 
}
   53c08:	0001883a 	nop
   53c0c:	e037883a 	mov	sp,fp
   53c10:	dfc00117 	ldw	ra,4(sp)
   53c14:	df000017 	ldw	fp,0(sp)
   53c18:	dec00204 	addi	sp,sp,8
   53c1c:	f800283a 	ret

00053c20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   53c20:	deffff04 	addi	sp,sp,-4
   53c24:	df000015 	stw	fp,0(sp)
   53c28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   53c2c:	0001883a 	nop
   53c30:	e037883a 	mov	sp,fp
   53c34:	df000017 	ldw	fp,0(sp)
   53c38:	dec00104 	addi	sp,sp,4
   53c3c:	f800283a 	ret

00053c40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   53c40:	defff904 	addi	sp,sp,-28
   53c44:	dfc00615 	stw	ra,24(sp)
   53c48:	df000515 	stw	fp,20(sp)
   53c4c:	df000504 	addi	fp,sp,20
   53c50:	e13ffc15 	stw	r4,-16(fp)
   53c54:	e17ffd15 	stw	r5,-12(fp)
   53c58:	e1bffe15 	stw	r6,-8(fp)
   53c5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   53c60:	e0800217 	ldw	r2,8(fp)
   53c64:	d8800015 	stw	r2,0(sp)
   53c68:	e1ffff17 	ldw	r7,-4(fp)
   53c6c:	e1bffe17 	ldw	r6,-8(fp)
   53c70:	e17ffd17 	ldw	r5,-12(fp)
   53c74:	e13ffc17 	ldw	r4,-16(fp)
   53c78:	0053df00 	call	53df0 <alt_iic_isr_register>
}  
   53c7c:	e037883a 	mov	sp,fp
   53c80:	dfc00117 	ldw	ra,4(sp)
   53c84:	df000017 	ldw	fp,0(sp)
   53c88:	dec00204 	addi	sp,sp,8
   53c8c:	f800283a 	ret

00053c90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   53c90:	defff904 	addi	sp,sp,-28
   53c94:	df000615 	stw	fp,24(sp)
   53c98:	df000604 	addi	fp,sp,24
   53c9c:	e13ffe15 	stw	r4,-8(fp)
   53ca0:	e17fff15 	stw	r5,-4(fp)
   53ca4:	e0bfff17 	ldw	r2,-4(fp)
   53ca8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53cac:	0005303a 	rdctl	r2,status
   53cb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53cb4:	e0fffb17 	ldw	r3,-20(fp)
   53cb8:	00bfff84 	movi	r2,-2
   53cbc:	1884703a 	and	r2,r3,r2
   53cc0:	1001703a 	wrctl	status,r2
  
  return context;
   53cc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   53cc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   53ccc:	00c00044 	movi	r3,1
   53cd0:	e0bffa17 	ldw	r2,-24(fp)
   53cd4:	1884983a 	sll	r2,r3,r2
   53cd8:	1007883a 	mov	r3,r2
   53cdc:	d0a85917 	ldw	r2,-24220(gp)
   53ce0:	1884b03a 	or	r2,r3,r2
   53ce4:	d0a85915 	stw	r2,-24220(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   53ce8:	d0a85917 	ldw	r2,-24220(gp)
   53cec:	100170fa 	wrctl	ienable,r2
   53cf0:	e0bffc17 	ldw	r2,-16(fp)
   53cf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53cf8:	e0bffd17 	ldw	r2,-12(fp)
   53cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   53d00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   53d04:	0001883a 	nop
}
   53d08:	e037883a 	mov	sp,fp
   53d0c:	df000017 	ldw	fp,0(sp)
   53d10:	dec00104 	addi	sp,sp,4
   53d14:	f800283a 	ret

00053d18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   53d18:	defff904 	addi	sp,sp,-28
   53d1c:	df000615 	stw	fp,24(sp)
   53d20:	df000604 	addi	fp,sp,24
   53d24:	e13ffe15 	stw	r4,-8(fp)
   53d28:	e17fff15 	stw	r5,-4(fp)
   53d2c:	e0bfff17 	ldw	r2,-4(fp)
   53d30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53d34:	0005303a 	rdctl	r2,status
   53d38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53d3c:	e0fffb17 	ldw	r3,-20(fp)
   53d40:	00bfff84 	movi	r2,-2
   53d44:	1884703a 	and	r2,r3,r2
   53d48:	1001703a 	wrctl	status,r2
  
  return context;
   53d4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   53d50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   53d54:	00c00044 	movi	r3,1
   53d58:	e0bffa17 	ldw	r2,-24(fp)
   53d5c:	1884983a 	sll	r2,r3,r2
   53d60:	0084303a 	nor	r2,zero,r2
   53d64:	1007883a 	mov	r3,r2
   53d68:	d0a85917 	ldw	r2,-24220(gp)
   53d6c:	1884703a 	and	r2,r3,r2
   53d70:	d0a85915 	stw	r2,-24220(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   53d74:	d0a85917 	ldw	r2,-24220(gp)
   53d78:	100170fa 	wrctl	ienable,r2
   53d7c:	e0bffc17 	ldw	r2,-16(fp)
   53d80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53d84:	e0bffd17 	ldw	r2,-12(fp)
   53d88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   53d8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   53d90:	0001883a 	nop
}
   53d94:	e037883a 	mov	sp,fp
   53d98:	df000017 	ldw	fp,0(sp)
   53d9c:	dec00104 	addi	sp,sp,4
   53da0:	f800283a 	ret

00053da4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   53da4:	defffc04 	addi	sp,sp,-16
   53da8:	df000315 	stw	fp,12(sp)
   53dac:	df000304 	addi	fp,sp,12
   53db0:	e13ffe15 	stw	r4,-8(fp)
   53db4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   53db8:	000530fa 	rdctl	r2,ienable
   53dbc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   53dc0:	00c00044 	movi	r3,1
   53dc4:	e0bfff17 	ldw	r2,-4(fp)
   53dc8:	1884983a 	sll	r2,r3,r2
   53dcc:	1007883a 	mov	r3,r2
   53dd0:	e0bffd17 	ldw	r2,-12(fp)
   53dd4:	1884703a 	and	r2,r3,r2
   53dd8:	1004c03a 	cmpne	r2,r2,zero
   53ddc:	10803fcc 	andi	r2,r2,255
}
   53de0:	e037883a 	mov	sp,fp
   53de4:	df000017 	ldw	fp,0(sp)
   53de8:	dec00104 	addi	sp,sp,4
   53dec:	f800283a 	ret

00053df0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   53df0:	defff504 	addi	sp,sp,-44
   53df4:	dfc00a15 	stw	ra,40(sp)
   53df8:	df000915 	stw	fp,36(sp)
   53dfc:	df000904 	addi	fp,sp,36
   53e00:	e13ffc15 	stw	r4,-16(fp)
   53e04:	e17ffd15 	stw	r5,-12(fp)
   53e08:	e1bffe15 	stw	r6,-8(fp)
   53e0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   53e10:	00bffa84 	movi	r2,-22
   53e14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   53e18:	e0bffd17 	ldw	r2,-12(fp)
   53e1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   53e20:	e0bff817 	ldw	r2,-32(fp)
   53e24:	10800808 	cmpgei	r2,r2,32
   53e28:	1000271e 	bne	r2,zero,53ec8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53e2c:	0005303a 	rdctl	r2,status
   53e30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53e34:	e0fffb17 	ldw	r3,-20(fp)
   53e38:	00bfff84 	movi	r2,-2
   53e3c:	1884703a 	and	r2,r3,r2
   53e40:	1001703a 	wrctl	status,r2
  
  return context;
   53e44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   53e48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   53e4c:	008001b4 	movhi	r2,6
   53e50:	10a4de04 	addi	r2,r2,-27784
   53e54:	e0fff817 	ldw	r3,-32(fp)
   53e58:	180690fa 	slli	r3,r3,3
   53e5c:	10c5883a 	add	r2,r2,r3
   53e60:	e0fffe17 	ldw	r3,-8(fp)
   53e64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   53e68:	008001b4 	movhi	r2,6
   53e6c:	10a4de04 	addi	r2,r2,-27784
   53e70:	e0fff817 	ldw	r3,-32(fp)
   53e74:	180690fa 	slli	r3,r3,3
   53e78:	10c5883a 	add	r2,r2,r3
   53e7c:	10800104 	addi	r2,r2,4
   53e80:	e0ffff17 	ldw	r3,-4(fp)
   53e84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   53e88:	e0bffe17 	ldw	r2,-8(fp)
   53e8c:	10000526 	beq	r2,zero,53ea4 <alt_iic_isr_register+0xb4>
   53e90:	e0bff817 	ldw	r2,-32(fp)
   53e94:	100b883a 	mov	r5,r2
   53e98:	e13ffc17 	ldw	r4,-16(fp)
   53e9c:	0053c900 	call	53c90 <alt_ic_irq_enable>
   53ea0:	00000406 	br	53eb4 <alt_iic_isr_register+0xc4>
   53ea4:	e0bff817 	ldw	r2,-32(fp)
   53ea8:	100b883a 	mov	r5,r2
   53eac:	e13ffc17 	ldw	r4,-16(fp)
   53eb0:	0053d180 	call	53d18 <alt_ic_irq_disable>
   53eb4:	e0bff715 	stw	r2,-36(fp)
   53eb8:	e0bffa17 	ldw	r2,-24(fp)
   53ebc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53ec0:	e0bff917 	ldw	r2,-28(fp)
   53ec4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   53ec8:	e0bff717 	ldw	r2,-36(fp)
}
   53ecc:	e037883a 	mov	sp,fp
   53ed0:	dfc00117 	ldw	ra,4(sp)
   53ed4:	df000017 	ldw	fp,0(sp)
   53ed8:	dec00204 	addi	sp,sp,8
   53edc:	f800283a 	ret

00053ee0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   53ee0:	defff804 	addi	sp,sp,-32
   53ee4:	dfc00715 	stw	ra,28(sp)
   53ee8:	df000615 	stw	fp,24(sp)
   53eec:	dc000515 	stw	r16,20(sp)
   53ef0:	df000604 	addi	fp,sp,24
   53ef4:	e13ffb15 	stw	r4,-20(fp)
   53ef8:	e17ffc15 	stw	r5,-16(fp)
   53efc:	e1bffd15 	stw	r6,-12(fp)
   53f00:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   53f04:	e1bffe17 	ldw	r6,-8(fp)
   53f08:	e17ffd17 	ldw	r5,-12(fp)
   53f0c:	e13ffc17 	ldw	r4,-16(fp)
   53f10:	00541680 	call	54168 <open>
   53f14:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   53f18:	e0bffa17 	ldw	r2,-24(fp)
   53f1c:	10002216 	blt	r2,zero,53fa8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   53f20:	04000174 	movhi	r16,5
   53f24:	8417fe04 	addi	r16,r16,24568
   53f28:	e0bffa17 	ldw	r2,-24(fp)
   53f2c:	01400304 	movi	r5,12
   53f30:	1009883a 	mov	r4,r2
   53f34:	00421cc0 	call	421cc <__mulsi3>
   53f38:	8085883a 	add	r2,r16,r2
   53f3c:	10c00017 	ldw	r3,0(r2)
   53f40:	e0bffb17 	ldw	r2,-20(fp)
   53f44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   53f48:	04000174 	movhi	r16,5
   53f4c:	8417fe04 	addi	r16,r16,24568
   53f50:	e0bffa17 	ldw	r2,-24(fp)
   53f54:	01400304 	movi	r5,12
   53f58:	1009883a 	mov	r4,r2
   53f5c:	00421cc0 	call	421cc <__mulsi3>
   53f60:	8085883a 	add	r2,r16,r2
   53f64:	10800104 	addi	r2,r2,4
   53f68:	10c00017 	ldw	r3,0(r2)
   53f6c:	e0bffb17 	ldw	r2,-20(fp)
   53f70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   53f74:	04000174 	movhi	r16,5
   53f78:	8417fe04 	addi	r16,r16,24568
   53f7c:	e0bffa17 	ldw	r2,-24(fp)
   53f80:	01400304 	movi	r5,12
   53f84:	1009883a 	mov	r4,r2
   53f88:	00421cc0 	call	421cc <__mulsi3>
   53f8c:	8085883a 	add	r2,r16,r2
   53f90:	10800204 	addi	r2,r2,8
   53f94:	10c00017 	ldw	r3,0(r2)
   53f98:	e0bffb17 	ldw	r2,-20(fp)
   53f9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   53fa0:	e13ffa17 	ldw	r4,-24(fp)
   53fa4:	0052ba80 	call	52ba8 <alt_release_fd>
  }
} 
   53fa8:	0001883a 	nop
   53fac:	e6ffff04 	addi	sp,fp,-4
   53fb0:	dfc00217 	ldw	ra,8(sp)
   53fb4:	df000117 	ldw	fp,4(sp)
   53fb8:	dc000017 	ldw	r16,0(sp)
   53fbc:	dec00304 	addi	sp,sp,12
   53fc0:	f800283a 	ret

00053fc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   53fc4:	defffb04 	addi	sp,sp,-20
   53fc8:	dfc00415 	stw	ra,16(sp)
   53fcc:	df000315 	stw	fp,12(sp)
   53fd0:	df000304 	addi	fp,sp,12
   53fd4:	e13ffd15 	stw	r4,-12(fp)
   53fd8:	e17ffe15 	stw	r5,-8(fp)
   53fdc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   53fe0:	01c07fc4 	movi	r7,511
   53fe4:	01800044 	movi	r6,1
   53fe8:	e17ffd17 	ldw	r5,-12(fp)
   53fec:	01000174 	movhi	r4,5
   53ff0:	21180104 	addi	r4,r4,24580
   53ff4:	0053ee00 	call	53ee0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   53ff8:	01c07fc4 	movi	r7,511
   53ffc:	000d883a 	mov	r6,zero
   54000:	e17ffe17 	ldw	r5,-8(fp)
   54004:	01000174 	movhi	r4,5
   54008:	2117fe04 	addi	r4,r4,24568
   5400c:	0053ee00 	call	53ee0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54010:	01c07fc4 	movi	r7,511
   54014:	01800044 	movi	r6,1
   54018:	e17fff17 	ldw	r5,-4(fp)
   5401c:	01000174 	movhi	r4,5
   54020:	21180404 	addi	r4,r4,24592
   54024:	0053ee00 	call	53ee0 <alt_open_fd>
}  
   54028:	0001883a 	nop
   5402c:	e037883a 	mov	sp,fp
   54030:	dfc00117 	ldw	ra,4(sp)
   54034:	df000017 	ldw	fp,0(sp)
   54038:	dec00204 	addi	sp,sp,8
   5403c:	f800283a 	ret

00054040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54040:	defffe04 	addi	sp,sp,-8
   54044:	dfc00115 	stw	ra,4(sp)
   54048:	df000015 	stw	fp,0(sp)
   5404c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54050:	d0a01017 	ldw	r2,-32704(gp)
   54054:	10000326 	beq	r2,zero,54064 <alt_get_errno+0x24>
   54058:	d0a01017 	ldw	r2,-32704(gp)
   5405c:	103ee83a 	callr	r2
   54060:	00000106 	br	54068 <alt_get_errno+0x28>
   54064:	d0a85504 	addi	r2,gp,-24236
}
   54068:	e037883a 	mov	sp,fp
   5406c:	dfc00117 	ldw	ra,4(sp)
   54070:	df000017 	ldw	fp,0(sp)
   54074:	dec00204 	addi	sp,sp,8
   54078:	f800283a 	ret

0005407c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   5407c:	defffb04 	addi	sp,sp,-20
   54080:	dfc00415 	stw	ra,16(sp)
   54084:	df000315 	stw	fp,12(sp)
   54088:	dc000215 	stw	r16,8(sp)
   5408c:	df000304 	addi	fp,sp,12
   54090:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   54094:	e0bffe17 	ldw	r2,-8(fp)
   54098:	10800217 	ldw	r2,8(r2)
   5409c:	10d00034 	orhi	r3,r2,16384
   540a0:	e0bffe17 	ldw	r2,-8(fp)
   540a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   540a8:	e03ffd15 	stw	zero,-12(fp)
   540ac:	00002306 	br	5413c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   540b0:	04000174 	movhi	r16,5
   540b4:	8417fe04 	addi	r16,r16,24568
   540b8:	e0bffd17 	ldw	r2,-12(fp)
   540bc:	01400304 	movi	r5,12
   540c0:	1009883a 	mov	r4,r2
   540c4:	00421cc0 	call	421cc <__mulsi3>
   540c8:	8085883a 	add	r2,r16,r2
   540cc:	10c00017 	ldw	r3,0(r2)
   540d0:	e0bffe17 	ldw	r2,-8(fp)
   540d4:	10800017 	ldw	r2,0(r2)
   540d8:	1880151e 	bne	r3,r2,54130 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   540dc:	04000174 	movhi	r16,5
   540e0:	8417fe04 	addi	r16,r16,24568
   540e4:	e0bffd17 	ldw	r2,-12(fp)
   540e8:	01400304 	movi	r5,12
   540ec:	1009883a 	mov	r4,r2
   540f0:	00421cc0 	call	421cc <__mulsi3>
   540f4:	8085883a 	add	r2,r16,r2
   540f8:	10800204 	addi	r2,r2,8
   540fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54100:	10000b0e 	bge	r2,zero,54130 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   54104:	01400304 	movi	r5,12
   54108:	e13ffd17 	ldw	r4,-12(fp)
   5410c:	00421cc0 	call	421cc <__mulsi3>
   54110:	1007883a 	mov	r3,r2
   54114:	00800174 	movhi	r2,5
   54118:	1097fe04 	addi	r2,r2,24568
   5411c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54120:	e0bffe17 	ldw	r2,-8(fp)
   54124:	18800226 	beq	r3,r2,54130 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   54128:	00bffcc4 	movi	r2,-13
   5412c:	00000806 	br	54150 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54130:	e0bffd17 	ldw	r2,-12(fp)
   54134:	10800044 	addi	r2,r2,1
   54138:	e0bffd15 	stw	r2,-12(fp)
   5413c:	d0a00f17 	ldw	r2,-32708(gp)
   54140:	1007883a 	mov	r3,r2
   54144:	e0bffd17 	ldw	r2,-12(fp)
   54148:	18bfd92e 	bgeu	r3,r2,540b0 <_gp+0xffff4ed8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   5414c:	0005883a 	mov	r2,zero
}
   54150:	e6ffff04 	addi	sp,fp,-4
   54154:	dfc00217 	ldw	ra,8(sp)
   54158:	df000117 	ldw	fp,4(sp)
   5415c:	dc000017 	ldw	r16,0(sp)
   54160:	dec00304 	addi	sp,sp,12
   54164:	f800283a 	ret

00054168 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   54168:	defff604 	addi	sp,sp,-40
   5416c:	dfc00915 	stw	ra,36(sp)
   54170:	df000815 	stw	fp,32(sp)
   54174:	df000804 	addi	fp,sp,32
   54178:	e13ffd15 	stw	r4,-12(fp)
   5417c:	e17ffe15 	stw	r5,-8(fp)
   54180:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   54184:	00bfffc4 	movi	r2,-1
   54188:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   5418c:	00bffb44 	movi	r2,-19
   54190:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   54194:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   54198:	d1600d04 	addi	r5,gp,-32716
   5419c:	e13ffd17 	ldw	r4,-12(fp)
   541a0:	005448c0 	call	5448c <alt_find_dev>
   541a4:	e0bff815 	stw	r2,-32(fp)
   541a8:	e0bff817 	ldw	r2,-32(fp)
   541ac:	1000051e 	bne	r2,zero,541c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   541b0:	e13ffd17 	ldw	r4,-12(fp)
   541b4:	005451c0 	call	5451c <alt_find_file>
   541b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   541bc:	00800044 	movi	r2,1
   541c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   541c4:	e0bff817 	ldw	r2,-32(fp)
   541c8:	10002b26 	beq	r2,zero,54278 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   541cc:	e13ff817 	ldw	r4,-32(fp)
   541d0:	00546240 	call	54624 <alt_get_fd>
   541d4:	e0bff915 	stw	r2,-28(fp)
   541d8:	e0bff917 	ldw	r2,-28(fp)
   541dc:	1000030e 	bge	r2,zero,541ec <open+0x84>
    {
      status = index;
   541e0:	e0bff917 	ldw	r2,-28(fp)
   541e4:	e0bffa15 	stw	r2,-24(fp)
   541e8:	00002506 	br	54280 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   541ec:	01400304 	movi	r5,12
   541f0:	e13ff917 	ldw	r4,-28(fp)
   541f4:	00421cc0 	call	421cc <__mulsi3>
   541f8:	1007883a 	mov	r3,r2
   541fc:	00800174 	movhi	r2,5
   54200:	1097fe04 	addi	r2,r2,24568
   54204:	1885883a 	add	r2,r3,r2
   54208:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   5420c:	e0fffe17 	ldw	r3,-8(fp)
   54210:	00900034 	movhi	r2,16384
   54214:	10bfffc4 	addi	r2,r2,-1
   54218:	1886703a 	and	r3,r3,r2
   5421c:	e0bffc17 	ldw	r2,-16(fp)
   54220:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   54224:	e0bffb17 	ldw	r2,-20(fp)
   54228:	1000051e 	bne	r2,zero,54240 <open+0xd8>
   5422c:	e13ffc17 	ldw	r4,-16(fp)
   54230:	005407c0 	call	5407c <alt_file_locked>
   54234:	e0bffa15 	stw	r2,-24(fp)
   54238:	e0bffa17 	ldw	r2,-24(fp)
   5423c:	10001016 	blt	r2,zero,54280 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   54240:	e0bff817 	ldw	r2,-32(fp)
   54244:	10800317 	ldw	r2,12(r2)
   54248:	10000826 	beq	r2,zero,5426c <open+0x104>
   5424c:	e0bff817 	ldw	r2,-32(fp)
   54250:	10800317 	ldw	r2,12(r2)
   54254:	e1ffff17 	ldw	r7,-4(fp)
   54258:	e1bffe17 	ldw	r6,-8(fp)
   5425c:	e17ffd17 	ldw	r5,-12(fp)
   54260:	e13ffc17 	ldw	r4,-16(fp)
   54264:	103ee83a 	callr	r2
   54268:	00000106 	br	54270 <open+0x108>
   5426c:	0005883a 	mov	r2,zero
   54270:	e0bffa15 	stw	r2,-24(fp)
   54274:	00000206 	br	54280 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   54278:	00bffb44 	movi	r2,-19
   5427c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   54280:	e0bffa17 	ldw	r2,-24(fp)
   54284:	1000090e 	bge	r2,zero,542ac <open+0x144>
  {
    alt_release_fd (index);  
   54288:	e13ff917 	ldw	r4,-28(fp)
   5428c:	0052ba80 	call	52ba8 <alt_release_fd>
    ALT_ERRNO = -status;
   54290:	00540400 	call	54040 <alt_get_errno>
   54294:	1007883a 	mov	r3,r2
   54298:	e0bffa17 	ldw	r2,-24(fp)
   5429c:	0085c83a 	sub	r2,zero,r2
   542a0:	18800015 	stw	r2,0(r3)
    return -1;
   542a4:	00bfffc4 	movi	r2,-1
   542a8:	00000106 	br	542b0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   542ac:	e0bff917 	ldw	r2,-28(fp)
}
   542b0:	e037883a 	mov	sp,fp
   542b4:	dfc00117 	ldw	ra,4(sp)
   542b8:	df000017 	ldw	fp,0(sp)
   542bc:	dec00204 	addi	sp,sp,8
   542c0:	f800283a 	ret

000542c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   542c4:	defffa04 	addi	sp,sp,-24
   542c8:	df000515 	stw	fp,20(sp)
   542cc:	df000504 	addi	fp,sp,20
   542d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   542d4:	0005303a 	rdctl	r2,status
   542d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   542dc:	e0fffc17 	ldw	r3,-16(fp)
   542e0:	00bfff84 	movi	r2,-2
   542e4:	1884703a 	and	r2,r3,r2
   542e8:	1001703a 	wrctl	status,r2
  
  return context;
   542ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   542f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   542f4:	e0bfff17 	ldw	r2,-4(fp)
   542f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   542fc:	e0bffd17 	ldw	r2,-12(fp)
   54300:	10800017 	ldw	r2,0(r2)
   54304:	e0fffd17 	ldw	r3,-12(fp)
   54308:	18c00117 	ldw	r3,4(r3)
   5430c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   54310:	e0bffd17 	ldw	r2,-12(fp)
   54314:	10800117 	ldw	r2,4(r2)
   54318:	e0fffd17 	ldw	r3,-12(fp)
   5431c:	18c00017 	ldw	r3,0(r3)
   54320:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   54324:	e0bffd17 	ldw	r2,-12(fp)
   54328:	e0fffd17 	ldw	r3,-12(fp)
   5432c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   54330:	e0bffd17 	ldw	r2,-12(fp)
   54334:	e0fffd17 	ldw	r3,-12(fp)
   54338:	10c00015 	stw	r3,0(r2)
   5433c:	e0bffb17 	ldw	r2,-20(fp)
   54340:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54344:	e0bffe17 	ldw	r2,-8(fp)
   54348:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   5434c:	0001883a 	nop
   54350:	e037883a 	mov	sp,fp
   54354:	df000017 	ldw	fp,0(sp)
   54358:	dec00104 	addi	sp,sp,4
   5435c:	f800283a 	ret

00054360 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   54360:	defffb04 	addi	sp,sp,-20
   54364:	dfc00415 	stw	ra,16(sp)
   54368:	df000315 	stw	fp,12(sp)
   5436c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   54370:	d0a01317 	ldw	r2,-32692(gp)
   54374:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   54378:	d0a85b17 	ldw	r2,-24212(gp)
   5437c:	10800044 	addi	r2,r2,1
   54380:	d0a85b15 	stw	r2,-24212(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54384:	00002e06 	br	54440 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   54388:	e0bffd17 	ldw	r2,-12(fp)
   5438c:	10800017 	ldw	r2,0(r2)
   54390:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   54394:	e0bffd17 	ldw	r2,-12(fp)
   54398:	10800403 	ldbu	r2,16(r2)
   5439c:	10803fcc 	andi	r2,r2,255
   543a0:	10000426 	beq	r2,zero,543b4 <alt_tick+0x54>
   543a4:	d0a85b17 	ldw	r2,-24212(gp)
   543a8:	1000021e 	bne	r2,zero,543b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   543ac:	e0bffd17 	ldw	r2,-12(fp)
   543b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   543b4:	e0bffd17 	ldw	r2,-12(fp)
   543b8:	10800217 	ldw	r2,8(r2)
   543bc:	d0e85b17 	ldw	r3,-24212(gp)
   543c0:	18801d36 	bltu	r3,r2,54438 <alt_tick+0xd8>
   543c4:	e0bffd17 	ldw	r2,-12(fp)
   543c8:	10800403 	ldbu	r2,16(r2)
   543cc:	10803fcc 	andi	r2,r2,255
   543d0:	1000191e 	bne	r2,zero,54438 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   543d4:	e0bffd17 	ldw	r2,-12(fp)
   543d8:	10800317 	ldw	r2,12(r2)
   543dc:	e0fffd17 	ldw	r3,-12(fp)
   543e0:	18c00517 	ldw	r3,20(r3)
   543e4:	1809883a 	mov	r4,r3
   543e8:	103ee83a 	callr	r2
   543ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   543f0:	e0bfff17 	ldw	r2,-4(fp)
   543f4:	1000031e 	bne	r2,zero,54404 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   543f8:	e13ffd17 	ldw	r4,-12(fp)
   543fc:	00542c40 	call	542c4 <alt_alarm_stop>
   54400:	00000d06 	br	54438 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   54404:	e0bffd17 	ldw	r2,-12(fp)
   54408:	10c00217 	ldw	r3,8(r2)
   5440c:	e0bfff17 	ldw	r2,-4(fp)
   54410:	1887883a 	add	r3,r3,r2
   54414:	e0bffd17 	ldw	r2,-12(fp)
   54418:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   5441c:	e0bffd17 	ldw	r2,-12(fp)
   54420:	10c00217 	ldw	r3,8(r2)
   54424:	d0a85b17 	ldw	r2,-24212(gp)
   54428:	1880032e 	bgeu	r3,r2,54438 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   5442c:	e0bffd17 	ldw	r2,-12(fp)
   54430:	00c00044 	movi	r3,1
   54434:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   54438:	e0bffe17 	ldw	r2,-8(fp)
   5443c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54440:	e0fffd17 	ldw	r3,-12(fp)
   54444:	d0a01304 	addi	r2,gp,-32692
   54448:	18bfcf1e 	bne	r3,r2,54388 <_gp+0xffff51b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   5444c:	0001883a 	nop
}
   54450:	0001883a 	nop
   54454:	e037883a 	mov	sp,fp
   54458:	dfc00117 	ldw	ra,4(sp)
   5445c:	df000017 	ldw	fp,0(sp)
   54460:	dec00204 	addi	sp,sp,8
   54464:	f800283a 	ret

00054468 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   54468:	deffff04 	addi	sp,sp,-4
   5446c:	df000015 	stw	fp,0(sp)
   54470:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   54474:	000170fa 	wrctl	ienable,zero
}
   54478:	0001883a 	nop
   5447c:	e037883a 	mov	sp,fp
   54480:	df000017 	ldw	fp,0(sp)
   54484:	dec00104 	addi	sp,sp,4
   54488:	f800283a 	ret

0005448c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   5448c:	defffa04 	addi	sp,sp,-24
   54490:	dfc00515 	stw	ra,20(sp)
   54494:	df000415 	stw	fp,16(sp)
   54498:	df000404 	addi	fp,sp,16
   5449c:	e13ffe15 	stw	r4,-8(fp)
   544a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   544a4:	e0bfff17 	ldw	r2,-4(fp)
   544a8:	10800017 	ldw	r2,0(r2)
   544ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   544b0:	e13ffe17 	ldw	r4,-8(fp)
   544b4:	0044e540 	call	44e54 <strlen>
   544b8:	10800044 	addi	r2,r2,1
   544bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   544c0:	00000d06 	br	544f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   544c4:	e0bffc17 	ldw	r2,-16(fp)
   544c8:	10800217 	ldw	r2,8(r2)
   544cc:	e0fffd17 	ldw	r3,-12(fp)
   544d0:	180d883a 	mov	r6,r3
   544d4:	e17ffe17 	ldw	r5,-8(fp)
   544d8:	1009883a 	mov	r4,r2
   544dc:	00548080 	call	54808 <memcmp>
   544e0:	1000021e 	bne	r2,zero,544ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   544e4:	e0bffc17 	ldw	r2,-16(fp)
   544e8:	00000706 	br	54508 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   544ec:	e0bffc17 	ldw	r2,-16(fp)
   544f0:	10800017 	ldw	r2,0(r2)
   544f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   544f8:	e0fffc17 	ldw	r3,-16(fp)
   544fc:	e0bfff17 	ldw	r2,-4(fp)
   54500:	18bff01e 	bne	r3,r2,544c4 <_gp+0xffff52ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   54504:	0005883a 	mov	r2,zero
}
   54508:	e037883a 	mov	sp,fp
   5450c:	dfc00117 	ldw	ra,4(sp)
   54510:	df000017 	ldw	fp,0(sp)
   54514:	dec00204 	addi	sp,sp,8
   54518:	f800283a 	ret

0005451c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   5451c:	defffb04 	addi	sp,sp,-20
   54520:	dfc00415 	stw	ra,16(sp)
   54524:	df000315 	stw	fp,12(sp)
   54528:	df000304 	addi	fp,sp,12
   5452c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   54530:	d0a00b17 	ldw	r2,-32724(gp)
   54534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   54538:	00003106 	br	54600 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   5453c:	e0bffd17 	ldw	r2,-12(fp)
   54540:	10800217 	ldw	r2,8(r2)
   54544:	1009883a 	mov	r4,r2
   54548:	0044e540 	call	44e54 <strlen>
   5454c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   54550:	e0bffd17 	ldw	r2,-12(fp)
   54554:	10c00217 	ldw	r3,8(r2)
   54558:	e0bffe17 	ldw	r2,-8(fp)
   5455c:	10bfffc4 	addi	r2,r2,-1
   54560:	1885883a 	add	r2,r3,r2
   54564:	10800003 	ldbu	r2,0(r2)
   54568:	10803fcc 	andi	r2,r2,255
   5456c:	1080201c 	xori	r2,r2,128
   54570:	10bfe004 	addi	r2,r2,-128
   54574:	10800bd8 	cmpnei	r2,r2,47
   54578:	1000031e 	bne	r2,zero,54588 <alt_find_file+0x6c>
    {
      len -= 1;
   5457c:	e0bffe17 	ldw	r2,-8(fp)
   54580:	10bfffc4 	addi	r2,r2,-1
   54584:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   54588:	e0bffe17 	ldw	r2,-8(fp)
   5458c:	e0ffff17 	ldw	r3,-4(fp)
   54590:	1885883a 	add	r2,r3,r2
   54594:	10800003 	ldbu	r2,0(r2)
   54598:	10803fcc 	andi	r2,r2,255
   5459c:	1080201c 	xori	r2,r2,128
   545a0:	10bfe004 	addi	r2,r2,-128
   545a4:	10800be0 	cmpeqi	r2,r2,47
   545a8:	1000081e 	bne	r2,zero,545cc <alt_find_file+0xb0>
   545ac:	e0bffe17 	ldw	r2,-8(fp)
   545b0:	e0ffff17 	ldw	r3,-4(fp)
   545b4:	1885883a 	add	r2,r3,r2
   545b8:	10800003 	ldbu	r2,0(r2)
   545bc:	10803fcc 	andi	r2,r2,255
   545c0:	1080201c 	xori	r2,r2,128
   545c4:	10bfe004 	addi	r2,r2,-128
   545c8:	10000a1e 	bne	r2,zero,545f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   545cc:	e0bffd17 	ldw	r2,-12(fp)
   545d0:	10800217 	ldw	r2,8(r2)
   545d4:	e0fffe17 	ldw	r3,-8(fp)
   545d8:	180d883a 	mov	r6,r3
   545dc:	e17fff17 	ldw	r5,-4(fp)
   545e0:	1009883a 	mov	r4,r2
   545e4:	00548080 	call	54808 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   545e8:	1000021e 	bne	r2,zero,545f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   545ec:	e0bffd17 	ldw	r2,-12(fp)
   545f0:	00000706 	br	54610 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   545f4:	e0bffd17 	ldw	r2,-12(fp)
   545f8:	10800017 	ldw	r2,0(r2)
   545fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   54600:	e0fffd17 	ldw	r3,-12(fp)
   54604:	d0a00b04 	addi	r2,gp,-32724
   54608:	18bfcc1e 	bne	r3,r2,5453c <_gp+0xffff5364>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   5460c:	0005883a 	mov	r2,zero
}
   54610:	e037883a 	mov	sp,fp
   54614:	dfc00117 	ldw	ra,4(sp)
   54618:	df000017 	ldw	fp,0(sp)
   5461c:	dec00204 	addi	sp,sp,8
   54620:	f800283a 	ret

00054624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   54624:	defffa04 	addi	sp,sp,-24
   54628:	dfc00515 	stw	ra,20(sp)
   5462c:	df000415 	stw	fp,16(sp)
   54630:	dc000315 	stw	r16,12(sp)
   54634:	df000404 	addi	fp,sp,16
   54638:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   5463c:	00bffa04 	movi	r2,-24
   54640:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   54644:	e03ffc15 	stw	zero,-16(fp)
   54648:	00001d06 	br	546c0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   5464c:	04000174 	movhi	r16,5
   54650:	8417fe04 	addi	r16,r16,24568
   54654:	e0bffc17 	ldw	r2,-16(fp)
   54658:	01400304 	movi	r5,12
   5465c:	1009883a 	mov	r4,r2
   54660:	00421cc0 	call	421cc <__mulsi3>
   54664:	8085883a 	add	r2,r16,r2
   54668:	10800017 	ldw	r2,0(r2)
   5466c:	1000111e 	bne	r2,zero,546b4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   54670:	04000174 	movhi	r16,5
   54674:	8417fe04 	addi	r16,r16,24568
   54678:	e0bffc17 	ldw	r2,-16(fp)
   5467c:	01400304 	movi	r5,12
   54680:	1009883a 	mov	r4,r2
   54684:	00421cc0 	call	421cc <__mulsi3>
   54688:	8085883a 	add	r2,r16,r2
   5468c:	e0fffe17 	ldw	r3,-8(fp)
   54690:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   54694:	d0e00f17 	ldw	r3,-32708(gp)
   54698:	e0bffc17 	ldw	r2,-16(fp)
   5469c:	1880020e 	bge	r3,r2,546a8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   546a0:	e0bffc17 	ldw	r2,-16(fp)
   546a4:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   546a8:	e0bffc17 	ldw	r2,-16(fp)
   546ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   546b0:	00000606 	br	546cc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   546b4:	e0bffc17 	ldw	r2,-16(fp)
   546b8:	10800044 	addi	r2,r2,1
   546bc:	e0bffc15 	stw	r2,-16(fp)
   546c0:	e0bffc17 	ldw	r2,-16(fp)
   546c4:	10800810 	cmplti	r2,r2,32
   546c8:	103fe01e 	bne	r2,zero,5464c <_gp+0xffff5474>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   546cc:	e0bffd17 	ldw	r2,-12(fp)
}
   546d0:	e6ffff04 	addi	sp,fp,-4
   546d4:	dfc00217 	ldw	ra,8(sp)
   546d8:	df000117 	ldw	fp,4(sp)
   546dc:	dc000017 	ldw	r16,0(sp)
   546e0:	dec00304 	addi	sp,sp,12
   546e4:	f800283a 	ret

000546e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   546e8:	defffe04 	addi	sp,sp,-8
   546ec:	df000115 	stw	fp,4(sp)
   546f0:	df000104 	addi	fp,sp,4
   546f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   546f8:	e0bfff17 	ldw	r2,-4(fp)
   546fc:	10bffe84 	addi	r2,r2,-6
   54700:	10c00428 	cmpgeui	r3,r2,16
   54704:	18001a1e 	bne	r3,zero,54770 <alt_exception_cause_generated_bad_addr+0x88>
   54708:	100690ba 	slli	r3,r2,2
   5470c:	00800174 	movhi	r2,5
   54710:	1091c804 	addi	r2,r2,18208
   54714:	1885883a 	add	r2,r3,r2
   54718:	10800017 	ldw	r2,0(r2)
   5471c:	1000683a 	jmp	r2
   54720:	00054760 	cmpeqi	zero,zero,5405
   54724:	00054760 	cmpeqi	zero,zero,5405
   54728:	00054770 	cmpltui	zero,zero,5405
   5472c:	00054770 	cmpltui	zero,zero,5405
   54730:	00054770 	cmpltui	zero,zero,5405
   54734:	00054760 	cmpeqi	zero,zero,5405
   54738:	00054768 	cmpgeui	zero,zero,5405
   5473c:	00054770 	cmpltui	zero,zero,5405
   54740:	00054760 	cmpeqi	zero,zero,5405
   54744:	00054760 	cmpeqi	zero,zero,5405
   54748:	00054770 	cmpltui	zero,zero,5405
   5474c:	00054760 	cmpeqi	zero,zero,5405
   54750:	00054768 	cmpgeui	zero,zero,5405
   54754:	00054770 	cmpltui	zero,zero,5405
   54758:	00054770 	cmpltui	zero,zero,5405
   5475c:	00054760 	cmpeqi	zero,zero,5405
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   54760:	00800044 	movi	r2,1
   54764:	00000306 	br	54774 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   54768:	0005883a 	mov	r2,zero
   5476c:	00000106 	br	54774 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   54770:	0005883a 	mov	r2,zero
  }
}
   54774:	e037883a 	mov	sp,fp
   54778:	df000017 	ldw	fp,0(sp)
   5477c:	dec00104 	addi	sp,sp,4
   54780:	f800283a 	ret

00054784 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
   54784:	defffd04 	addi	sp,sp,-12
   54788:	dfc00215 	stw	ra,8(sp)
   5478c:	df000115 	stw	fp,4(sp)
   54790:	df000104 	addi	fp,sp,4
   54794:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
   54798:	000f883a 	mov	r7,zero
   5479c:	000d883a 	mov	r6,zero
   547a0:	e17fff17 	ldw	r5,-4(fp)
   547a4:	0009883a 	mov	r4,zero
   547a8:	005493c0 	call	5493c <__register_exitproc>
}
   547ac:	e037883a 	mov	sp,fp
   547b0:	dfc00117 	ldw	ra,4(sp)
   547b4:	df000017 	ldw	fp,0(sp)
   547b8:	dec00204 	addi	sp,sp,8
   547bc:	f800283a 	ret

000547c0 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
   547c0:	defffd04 	addi	sp,sp,-12
   547c4:	dfc00215 	stw	ra,8(sp)
   547c8:	df000115 	stw	fp,4(sp)
   547cc:	df000104 	addi	fp,sp,4
   547d0:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
   547d4:	000b883a 	mov	r5,zero
   547d8:	e13fff17 	ldw	r4,-4(fp)
   547dc:	0054aac0 	call	54aac <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
   547e0:	d0a00617 	ldw	r2,-32744(gp)
   547e4:	10800f17 	ldw	r2,60(r2)
   547e8:	10000526 	beq	r2,zero,54800 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
   547ec:	d0a00617 	ldw	r2,-32744(gp)
   547f0:	10800f17 	ldw	r2,60(r2)
   547f4:	d0e00617 	ldw	r3,-32744(gp)
   547f8:	1809883a 	mov	r4,r3
   547fc:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
   54800:	e13fff17 	ldw	r4,-4(fp)
   54804:	0054c980 	call	54c98 <_exit>

00054808 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
   54808:	defff804 	addi	sp,sp,-32
   5480c:	df000715 	stw	fp,28(sp)
   54810:	df000704 	addi	fp,sp,28
   54814:	e13ffd15 	stw	r4,-12(fp)
   54818:	e17ffe15 	stw	r5,-8(fp)
   5481c:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
   54820:	e0bffd17 	ldw	r2,-12(fp)
   54824:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
   54828:	e0bffe17 	ldw	r2,-8(fp)
   5482c:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
   54830:	e0bfff17 	ldw	r2,-4(fp)
   54834:	10800130 	cmpltui	r2,r2,4
   54838:	1000371e 	bne	r2,zero,54918 <memcmp+0x110>
   5483c:	e0fff917 	ldw	r3,-28(fp)
   54840:	e0bffa17 	ldw	r2,-24(fp)
   54844:	1884b03a 	or	r2,r3,r2
   54848:	108000cc 	andi	r2,r2,3
   5484c:	1000321e 	bne	r2,zero,54918 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
   54850:	e0bff917 	ldw	r2,-28(fp)
   54854:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
   54858:	e0bffa17 	ldw	r2,-24(fp)
   5485c:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
   54860:	00000e06 	br	5489c <memcmp+0x94>
        {
          if (*a1 != *a2) 
   54864:	e0bffb17 	ldw	r2,-20(fp)
   54868:	10c00017 	ldw	r3,0(r2)
   5486c:	e0bffc17 	ldw	r2,-16(fp)
   54870:	10800017 	ldw	r2,0(r2)
   54874:	18800d1e 	bne	r3,r2,548ac <memcmp+0xa4>
   	    break;
          a1++;
   54878:	e0bffb17 	ldw	r2,-20(fp)
   5487c:	10800104 	addi	r2,r2,4
   54880:	e0bffb15 	stw	r2,-20(fp)
          a2++;
   54884:	e0bffc17 	ldw	r2,-16(fp)
   54888:	10800104 	addi	r2,r2,4
   5488c:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
   54890:	e0bfff17 	ldw	r2,-4(fp)
   54894:	10bfff04 	addi	r2,r2,-4
   54898:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
   5489c:	e0bfff17 	ldw	r2,-4(fp)
   548a0:	10800128 	cmpgeui	r2,r2,4
   548a4:	103fef1e 	bne	r2,zero,54864 <_gp+0xffff568c>
   548a8:	00000106 	br	548b0 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
   548ac:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
   548b0:	e0bffb17 	ldw	r2,-20(fp)
   548b4:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
   548b8:	e0bffc17 	ldw	r2,-16(fp)
   548bc:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
   548c0:	00001506 	br	54918 <memcmp+0x110>
    {
      if (*s1 != *s2)
   548c4:	e0bff917 	ldw	r2,-28(fp)
   548c8:	10c00003 	ldbu	r3,0(r2)
   548cc:	e0bffa17 	ldw	r2,-24(fp)
   548d0:	10800003 	ldbu	r2,0(r2)
   548d4:	18c03fcc 	andi	r3,r3,255
   548d8:	10803fcc 	andi	r2,r2,255
   548dc:	18800826 	beq	r3,r2,54900 <memcmp+0xf8>
	return *s1 - *s2;
   548e0:	e0bff917 	ldw	r2,-28(fp)
   548e4:	10800003 	ldbu	r2,0(r2)
   548e8:	10c03fcc 	andi	r3,r2,255
   548ec:	e0bffa17 	ldw	r2,-24(fp)
   548f0:	10800003 	ldbu	r2,0(r2)
   548f4:	10803fcc 	andi	r2,r2,255
   548f8:	1885c83a 	sub	r2,r3,r2
   548fc:	00000b06 	br	5492c <memcmp+0x124>
      s1++;
   54900:	e0bff917 	ldw	r2,-28(fp)
   54904:	10800044 	addi	r2,r2,1
   54908:	e0bff915 	stw	r2,-28(fp)
      s2++;
   5490c:	e0bffa17 	ldw	r2,-24(fp)
   54910:	10800044 	addi	r2,r2,1
   54914:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
   54918:	e0bfff17 	ldw	r2,-4(fp)
   5491c:	10ffffc4 	addi	r3,r2,-1
   54920:	e0ffff15 	stw	r3,-4(fp)
   54924:	103fe71e 	bne	r2,zero,548c4 <_gp+0xffff56ec>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
   54928:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   5492c:	e037883a 	mov	sp,fp
   54930:	df000017 	ldw	fp,0(sp)
   54934:	dec00104 	addi	sp,sp,4
   54938:	f800283a 	ret

0005493c <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   5493c:	defff804 	addi	sp,sp,-32
   54940:	dfc00715 	stw	ra,28(sp)
   54944:	df000615 	stw	fp,24(sp)
   54948:	dc000515 	stw	r16,20(sp)
   5494c:	df000604 	addi	fp,sp,24
   54950:	e13ffb15 	stw	r4,-20(fp)
   54954:	e17ffc15 	stw	r5,-16(fp)
   54958:	e1bffd15 	stw	r6,-12(fp)
   5495c:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   54960:	d0a00617 	ldw	r2,-32744(gp)
   54964:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
   54968:	8000041e 	bne	r16,zero,5497c <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
   5496c:	d0a00617 	ldw	r2,-32744(gp)
   54970:	d0e00617 	ldw	r3,-32744(gp)
   54974:	1c005304 	addi	r16,r3,332
   54978:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
   5497c:	80800117 	ldw	r2,4(r16)
   54980:	10800810 	cmplti	r2,r2,32
   54984:	1000131e 	bne	r2,zero,549d4 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
   54988:	00800034 	movhi	r2,0
   5498c:	10800004 	addi	r2,r2,0
   54990:	1000021e 	bne	r2,zero,5499c <__register_exitproc+0x60>
	return -1;
   54994:	00bfffc4 	movi	r2,-1
   54998:	00003e06 	br	54a94 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
   5499c:	01006404 	movi	r4,400
   549a0:	00000000 	call	0 <__alt_mem_MemoriaDados>
   549a4:	1021883a 	mov	r16,r2
      if (p == NULL)
   549a8:	8000021e 	bne	r16,zero,549b4 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
   549ac:	00bfffc4 	movi	r2,-1
   549b0:	00003806 	br	54a94 <__register_exitproc+0x158>
	}
      p->_ind = 0;
   549b4:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
   549b8:	d0a00617 	ldw	r2,-32744(gp)
   549bc:	10805217 	ldw	r2,328(r2)
   549c0:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
   549c4:	d0a00617 	ldw	r2,-32744(gp)
   549c8:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
   549cc:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
   549d0:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
   549d4:	e0bffb17 	ldw	r2,-20(fp)
   549d8:	10002426 	beq	r2,zero,54a6c <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
   549dc:	80802204 	addi	r2,r16,136
   549e0:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
   549e4:	80800117 	ldw	r2,4(r16)
   549e8:	e0fffa17 	ldw	r3,-24(fp)
   549ec:	1085883a 	add	r2,r2,r2
   549f0:	1085883a 	add	r2,r2,r2
   549f4:	1885883a 	add	r2,r3,r2
   549f8:	e0fffd17 	ldw	r3,-12(fp)
   549fc:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
   54a00:	e0bffa17 	ldw	r2,-24(fp)
   54a04:	10804017 	ldw	r2,256(r2)
   54a08:	80c00117 	ldw	r3,4(r16)
   54a0c:	01000044 	movi	r4,1
   54a10:	20c6983a 	sll	r3,r4,r3
   54a14:	10c6b03a 	or	r3,r2,r3
   54a18:	e0bffa17 	ldw	r2,-24(fp)
   54a1c:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
   54a20:	80800117 	ldw	r2,4(r16)
   54a24:	e0fffa17 	ldw	r3,-24(fp)
   54a28:	10800804 	addi	r2,r2,32
   54a2c:	1085883a 	add	r2,r2,r2
   54a30:	1085883a 	add	r2,r2,r2
   54a34:	1885883a 	add	r2,r3,r2
   54a38:	e0fffe17 	ldw	r3,-8(fp)
   54a3c:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
   54a40:	e0bffb17 	ldw	r2,-20(fp)
   54a44:	10800098 	cmpnei	r2,r2,2
   54a48:	1000081e 	bne	r2,zero,54a6c <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
   54a4c:	e0bffa17 	ldw	r2,-24(fp)
   54a50:	10804117 	ldw	r2,260(r2)
   54a54:	80c00117 	ldw	r3,4(r16)
   54a58:	01000044 	movi	r4,1
   54a5c:	20c6983a 	sll	r3,r4,r3
   54a60:	10c6b03a 	or	r3,r2,r3
   54a64:	e0bffa17 	ldw	r2,-24(fp)
   54a68:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
   54a6c:	80800117 	ldw	r2,4(r16)
   54a70:	10c00044 	addi	r3,r2,1
   54a74:	80c00115 	stw	r3,4(r16)
   54a78:	10800084 	addi	r2,r2,2
   54a7c:	1085883a 	add	r2,r2,r2
   54a80:	1085883a 	add	r2,r2,r2
   54a84:	8085883a 	add	r2,r16,r2
   54a88:	e0fffc17 	ldw	r3,-16(fp)
   54a8c:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
   54a90:	0005883a 	mov	r2,zero
}
   54a94:	e6ffff04 	addi	sp,fp,-4
   54a98:	dfc00217 	ldw	ra,8(sp)
   54a9c:	df000117 	ldw	fp,4(sp)
   54aa0:	dc000017 	ldw	r16,0(sp)
   54aa4:	dec00304 	addi	sp,sp,12
   54aa8:	f800283a 	ret

00054aac <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
   54aac:	defff504 	addi	sp,sp,-44
   54ab0:	dfc00a15 	stw	ra,40(sp)
   54ab4:	df000915 	stw	fp,36(sp)
   54ab8:	dc800815 	stw	r18,32(sp)
   54abc:	dc400715 	stw	r17,28(sp)
   54ac0:	dc000615 	stw	r16,24(sp)
   54ac4:	df000904 	addi	fp,sp,36
   54ac8:	e13ffb15 	stw	r4,-20(fp)
   54acc:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
   54ad0:	d0a00617 	ldw	r2,-32744(gp)
   54ad4:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
   54ad8:	d0a00617 	ldw	r2,-32744(gp)
   54adc:	10805204 	addi	r2,r2,328
   54ae0:	e0bff715 	stw	r2,-36(fp)
  while (p)
   54ae4:	00006006 	br	54c68 <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
   54ae8:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   54aec:	80800117 	ldw	r2,4(r16)
   54af0:	147fffc4 	addi	r17,r2,-1
   54af4:	00004a06 	br	54c20 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
   54af8:	00800044 	movi	r2,1
   54afc:	1444983a 	sll	r2,r2,r17
   54b00:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
   54b04:	e0bffc17 	ldw	r2,-16(fp)
   54b08:	10000826 	beq	r2,zero,54b2c <__call_exitprocs+0x80>
   54b0c:	90004026 	beq	r18,zero,54c10 <__call_exitprocs+0x164>
   54b10:	88800804 	addi	r2,r17,32
   54b14:	1085883a 	add	r2,r2,r2
   54b18:	1085883a 	add	r2,r2,r2
   54b1c:	9085883a 	add	r2,r18,r2
   54b20:	10c00017 	ldw	r3,0(r2)
   54b24:	e0bffc17 	ldw	r2,-16(fp)
   54b28:	1880391e 	bne	r3,r2,54c10 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
   54b2c:	88800084 	addi	r2,r17,2
   54b30:	1085883a 	add	r2,r2,r2
   54b34:	1085883a 	add	r2,r2,r2
   54b38:	8085883a 	add	r2,r16,r2
   54b3c:	10800017 	ldw	r2,0(r2)
   54b40:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
   54b44:	80800117 	ldw	r2,4(r16)
   54b48:	10bfffc4 	addi	r2,r2,-1
   54b4c:	1440041e 	bne	r2,r17,54b60 <__call_exitprocs+0xb4>
	    p->_ind--;
   54b50:	80800117 	ldw	r2,4(r16)
   54b54:	10bfffc4 	addi	r2,r2,-1
   54b58:	80800115 	stw	r2,4(r16)
   54b5c:	00000506 	br	54b74 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
   54b60:	88800084 	addi	r2,r17,2
   54b64:	1085883a 	add	r2,r2,r2
   54b68:	1085883a 	add	r2,r2,r2
   54b6c:	8085883a 	add	r2,r16,r2
   54b70:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
   54b74:	e0bff917 	ldw	r2,-28(fp)
   54b78:	10002726 	beq	r2,zero,54c18 <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
   54b7c:	80800117 	ldw	r2,4(r16)
   54b80:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
   54b84:	90000426 	beq	r18,zero,54b98 <__call_exitprocs+0xec>
   54b88:	90c04017 	ldw	r3,256(r18)
   54b8c:	e0bff817 	ldw	r2,-32(fp)
   54b90:	1884703a 	and	r2,r3,r2
   54b94:	1000031e 	bne	r2,zero,54ba4 <__call_exitprocs+0xf8>
	    fn ();
   54b98:	e0bff917 	ldw	r2,-28(fp)
   54b9c:	103ee83a 	callr	r2
   54ba0:	00001406 	br	54bf4 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
   54ba4:	90c04117 	ldw	r3,260(r18)
   54ba8:	e0bff817 	ldw	r2,-32(fp)
   54bac:	1884703a 	and	r2,r3,r2
   54bb0:	1000091e 	bne	r2,zero,54bd8 <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
   54bb4:	8c45883a 	add	r2,r17,r17
   54bb8:	1085883a 	add	r2,r2,r2
   54bbc:	9085883a 	add	r2,r18,r2
   54bc0:	10c00017 	ldw	r3,0(r2)
   54bc4:	e0bff917 	ldw	r2,-28(fp)
   54bc8:	180b883a 	mov	r5,r3
   54bcc:	e13ffb17 	ldw	r4,-20(fp)
   54bd0:	103ee83a 	callr	r2
   54bd4:	00000706 	br	54bf4 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
   54bd8:	8c45883a 	add	r2,r17,r17
   54bdc:	1085883a 	add	r2,r2,r2
   54be0:	9085883a 	add	r2,r18,r2
   54be4:	10c00017 	ldw	r3,0(r2)
   54be8:	e0bff917 	ldw	r2,-28(fp)
   54bec:	1809883a 	mov	r4,r3
   54bf0:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
   54bf4:	80c00117 	ldw	r3,4(r16)
   54bf8:	e0bffa17 	ldw	r2,-24(fp)
   54bfc:	18bfb41e 	bne	r3,r2,54ad0 <_gp+0xffff58f8>
   54c00:	e0bff717 	ldw	r2,-36(fp)
   54c04:	10800017 	ldw	r2,0(r2)
   54c08:	143fb11e 	bne	r2,r16,54ad0 <_gp+0xffff58f8>
   54c0c:	00000306 	br	54c1c <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
   54c10:	0001883a 	nop
   54c14:	00000106 	br	54c1c <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
   54c18:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   54c1c:	8c7fffc4 	addi	r17,r17,-1
   54c20:	883fb50e 	bge	r17,zero,54af8 <_gp+0xffff5920>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
   54c24:	00800034 	movhi	r2,0
   54c28:	10800004 	addi	r2,r2,0
   54c2c:	10001026 	beq	r2,zero,54c70 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
   54c30:	80800117 	ldw	r2,4(r16)
   54c34:	10000a1e 	bne	r2,zero,54c60 <__call_exitprocs+0x1b4>
   54c38:	80800017 	ldw	r2,0(r16)
   54c3c:	10000826 	beq	r2,zero,54c60 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
   54c40:	80c00017 	ldw	r3,0(r16)
   54c44:	e0bff717 	ldw	r2,-36(fp)
   54c48:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
   54c4c:	8009883a 	mov	r4,r16
   54c50:	00000000 	call	0 <__alt_mem_MemoriaDados>
	  p = *lastp;
   54c54:	e0bff717 	ldw	r2,-36(fp)
   54c58:	14000017 	ldw	r16,0(r2)
   54c5c:	00000206 	br	54c68 <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
   54c60:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
   54c64:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
   54c68:	803f9f1e 	bne	r16,zero,54ae8 <_gp+0xffff5910>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   54c6c:	00000106 	br	54c74 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
   54c70:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   54c74:	0001883a 	nop
   54c78:	e6fffd04 	addi	sp,fp,-12
   54c7c:	dfc00417 	ldw	ra,16(sp)
   54c80:	df000317 	ldw	fp,12(sp)
   54c84:	dc800217 	ldw	r18,8(sp)
   54c88:	dc400117 	ldw	r17,4(sp)
   54c8c:	dc000017 	ldw	r16,0(sp)
   54c90:	dec00504 	addi	sp,sp,20
   54c94:	f800283a 	ret

00054c98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   54c98:	defffd04 	addi	sp,sp,-12
   54c9c:	df000215 	stw	fp,8(sp)
   54ca0:	df000204 	addi	fp,sp,8
   54ca4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   54ca8:	0001883a 	nop
   54cac:	e0bfff17 	ldw	r2,-4(fp)
   54cb0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   54cb4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   54cb8:	10000226 	beq	r2,zero,54cc4 <_exit+0x2c>
    ALT_SIM_FAIL();
   54cbc:	002af070 	cmpltui	zero,zero,43969
   54cc0:	00000106 	br	54cc8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   54cc4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   54cc8:	003fff06 	br	54cc8 <_gp+0xffff5af0>

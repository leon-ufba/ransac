#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <stdint.h>
#include "ransac.h"

// RANSAC parameters
#define MIN_POINTS 2        // - The minimum number of data points required to estimate the model parameters.
#define C 0.5              	// - The percent of close data points (inliers) required to assert that the model fits well to the data.
#define E 5              	// - A threshold value to determine data points that are fit well by the model (inlier).
#define N 10                // - Number of iterations required
#define MIN_DIST_POINTS 25  // - The minimum square distance of points required to select the sample


float square_root(float number) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
	float x = number;
	float y = 1;
    float precision = 0.1;
    while (x - y > precision) {
        x = (x + y) / 2;
        y = number / x;
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    square_root_counter+=*MEDIDOR_LEITURA;
    //printf("square_root = %d\n", *MEDIDOR_LEITURA);
    return x;
}

int calculateIntersection(Line* k, Line* l) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    int intersection;
    int x = (l->b - k->b) / (k->a - l->a);
    int y = (k->a * x + k->b);
    intersection = PACKING_COORD(x,y);
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    //printf("calculateIntersection = %d\n", *MEDIDOR_LEITURA);
    calculateIntersection_counter+=*MEDIDOR_LEITURA;
    return intersection;
}

float getAngleFromModel(float a) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float radian = -atan(a);
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    getAngleFromModel_counter+=*MEDIDOR_LEITURA;
    //printf("getAngleFromModel = %d\n", *MEDIDOR_LEITURA);
    return radian;
}

Line leastSquare(int* data, int size) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float sx = 0;
    float sy = 0;
    float sxy = 0;
    float sx2 = 0;
    if (size == 0) {
        Line line = {INFINITY, 0};
        return line;
    }
    for (int i = 0; i < size; i++) {
        sx +=  GET_X(data[i]);
        sy +=  GET_Y(data[i]);
        sxy += GET_X(data[i]) * GET_Y(data[i]);
        sx2 += GET_X(data[i]) * GET_X(data[i]);
    }
    float avg_y = sy / size;
    float den = (size * sx2 - sx * sx);
    if (den == 0) {
        Line line = {INFINITY, avg_y};
        return line;
    }
    float a = (size * sxy - sx * sy) / den;
    float b = (sy / size) - a * (sx / size);
    Line line = {a, b};

    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    leastSquare_counter+=*MEDIDOR_LEITURA;
    //printf("leastSquare = %d\n", *MEDIDOR_LEITURA);
    return line;
}

float coefficientOfDetermination(int* data, Line model, float avg_y, int data_size) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float ss_res = 0;
    float ss_tot = 0;
    for (int i = 0; i < data_size; i++) {
        float f = model.a * GET_X(data[i]) + model.b;
        float y_f = (GET_Y(data[i]) - f);
        float y_y = (GET_Y(data[i]) - avg_y);
        ss_res += y_f * y_f;
        ss_tot += y_y * y_y;
    }
    float r = (ss_res / ss_tot);
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    coefficientOfDetermination_counter+=*MEDIDOR_LEITURA;
    //printf("coefficientOfDetermination = %d\n", *MEDIDOR_LEITURA);
    return r;
}

void inliersOutliersMemory(int* data, Line model, int* inliers, int* outliers, int dataSize, int* inlierSize, int* outlierSize) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float square2 = E * E * (model.a * model.a + 1.0);
    for (int k = 0; k < dataSize; k++) {
    	int tempX = data[k]&0xFF;
        int tempY = (data[k]>>8)&0xFF ;
        float dist = (model.a * tempX - tempY + model.b);
        if (dist * dist <= square2) {
        	inliers[*inlierSize] = data[k];
            (*inlierSize)++;
        } else {
        	outliers[*outlierSize] = data[k];
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    inliersOutliersMemory_counter+=*MEDIDOR_LEITURA;
    //printf("inliersOutliersMemory = %d\n", *MEDIDOR_LEITURA);
}

void inliersOutliers(int* data, Line model, int* inliers, int* outliers, int dataSize, int* inlierSize, int* outlierSize) {
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
    float square2 = E * E * (model.a * model.a + 1.0);

    for (int k = 0; k < dataSize; k++) {
        float dist = (model.a * GET_X(data[k]) - GET_Y(data[k]) + model.b);
        if (dist * dist <= square2) {
            inliers[*inlierSize] = data[k];
            (*inlierSize)++;
        } else {
            outliers[*outlierSize] = data[k];
            (*outlierSize)++;
        }
    }
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    inliersOutliers_counter+=*MEDIDOR_LEITURA;
    //printf("inliersOutliers = %d\n", *MEDIDOR_LEITURA);
}

void checkModel(int* data, int* temp, RansacResult* rs, int data_size, int temp_size) {
    int* inliers[MAX_POINTS];
    int* outliers[MAX_POINTS];
    int inlinersSize = 0;
    int outlierSize = 0;
    Line model = leastSquare(temp, temp_size);

    inliersOutliers(data, model, inliers, outliers, data_size, &inlinersSize, &outlierSize);

    if(inlinersSize >= rs->bestQty && inlinersSize >= (int)(data_size * C)){
        Line inliersModel = leastSquare(inliers, inlinersSize);
        float inliersAvg_y = 0;
        for (int i = 0; i < inlinersSize; i++) {
            inliersAvg_y += GET_Y(inliers[i]);
        }
        inliersAvg_y /= inlinersSize;
        float  inliersFit = coefficientOfDetermination(inliers, inliersModel, inliersAvg_y, data_size);
        if (inliersFit < rs->bestFit) {
        rs->bestModel = inliersModel;
        rs->bestFit = inliersFit;
        rs->bestQty = inlinersSize;
        }
    }
}

int squareDistanceBetweenPoints (int a, int b){
	*MEDIDOR_ESCRITA = 0; // para resetar a contagem
	*MEDIDOR_ESCRITA = 1; // para iniciar a contagem
	int dx = GET_X(a) - GET_X(b);
    int dy = GET_Y(a) - GET_Y(b);
    int resultado = (dx * dx) + (dy * dy);
    *MEDIDOR_ESCRITA = 2; // para pausar a contagem
    squareDistanceBetweenPoints_counter+=*MEDIDOR_LEITURA;
    //printf("squareDistanceBetweenPoints = %d\n", *MEDIDOR_LEITURA);
    return resultado;
}

RansacResult RANSAC(int* data, int botPos, int* outliers, int data_size) {
    RansacResult rs;

    rs.bestModel.a = 0.0;
    rs.bestModel.b = (float)GET_Y(botPos);
    rs.bestFit = INFINITY;
    rs.bestQty = 0;

    int* inliers[MAX_POINTS];

    int temp_dist_points = 0;
    int temp_index = 0;
    int loopCounter = 0;
    int inlinersSize = 0;
    int outlierSize = 0;

    inliersOutliersMemory(data, rs.bestModel, inliers, outliers, data_size, &inlinersSize, &outlierSize);

    if (outlierSize <= 25) {
        rs.bestFit = INFINITY;
        rs.bestQty = data_size;
        return rs;
    }

    int temp_size = MIN_POINTS;
    int temp[temp_size]; // alocação tamanho P

    //Posição inicial do robô
    temp[0] = outliers[0];
    //Execute for N iterations
    while(loopCounter < N) {
		//Sorteia 2 coordenadas que tenham uma distância minima entre si
		if(temp_dist_points < MIN_DIST_POINTS) {
		for (int j = 1; j < temp_size; j++) {
			temp_index = rand() % outlierSize;
			temp[j] = outliers[temp_index];
			temp_dist_points = squareDistanceBetweenPoints(temp[0], temp[1]);
		}
        }
        else {
        	checkModel(outliers, temp, &rs, outlierSize, temp_size);
            temp_dist_points = 0;
            loopCounter++;
        }
    }

    return rs;
}
